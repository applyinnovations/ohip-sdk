/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Asynchronous API
 * APIs to cater for Reservation Asynchronous functionality in OPERA Cloud. This includes viewing reservation data along with its revenue. <p>This API follows an async pattern where</p><ul><li>You make an initial request, which returns a Location header</li><li>You poll HEAD on the Location header returned to obtain the status of the process</li><li>Once the process completes HEAD will return in the Location header the URL that must be called to obtain the results of the process</li><li>You call the URL to obtain the results of the process</li></ul><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRoomingListType,
  Criteria,
  ExceptionDetailType,
  HousekeepingMassUpdateCriteria,
  MassUpdateSummaryType,
  NotesMassUpdateCriteria,
  PaymentInstructionsMassUpdateCriteria,
  PreferencesMassUpdateCriteria,
  ReservationDetailsMassUpdateCriteria,
  ReservationsDailySummaryDetails,
  RoomingList,
  RoutingInstructionsMassUpdateCriteria,
  TracesMassUpdateCriteria,
  TransportationsMassUpdateCriteria,
  ValidateRoomingListType,
} from '../models/index';
import {
    CreateRoomingListTypeFromJSON,
    CreateRoomingListTypeToJSON,
    CriteriaFromJSON,
    CriteriaToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HousekeepingMassUpdateCriteriaFromJSON,
    HousekeepingMassUpdateCriteriaToJSON,
    MassUpdateSummaryTypeFromJSON,
    MassUpdateSummaryTypeToJSON,
    NotesMassUpdateCriteriaFromJSON,
    NotesMassUpdateCriteriaToJSON,
    PaymentInstructionsMassUpdateCriteriaFromJSON,
    PaymentInstructionsMassUpdateCriteriaToJSON,
    PreferencesMassUpdateCriteriaFromJSON,
    PreferencesMassUpdateCriteriaToJSON,
    ReservationDetailsMassUpdateCriteriaFromJSON,
    ReservationDetailsMassUpdateCriteriaToJSON,
    ReservationsDailySummaryDetailsFromJSON,
    ReservationsDailySummaryDetailsToJSON,
    RoomingListFromJSON,
    RoomingListToJSON,
    RoutingInstructionsMassUpdateCriteriaFromJSON,
    RoutingInstructionsMassUpdateCriteriaToJSON,
    TracesMassUpdateCriteriaFromJSON,
    TracesMassUpdateCriteriaToJSON,
    TransportationsMassUpdateCriteriaFromJSON,
    TransportationsMassUpdateCriteriaToJSON,
    ValidateRoomingListTypeFromJSON,
    ValidateRoomingListTypeToJSON,
} from '../models/index';

export interface GetMassUpdateProcessSummaryRequest {
    massUpdateId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsDailySummaryRequest {
    summaryId: string;
    extSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetReservationsProcessStatusRequest {
    summaryId: string;
    extSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetRoomingListCreationProcessResultsRequest {
    requestId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomingListCreationProcessStatusRequest {
    requestId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomingListValidationProcessResultsRequest {
    requestId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomingListValidationProcessStatusRequest {
    requestId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface HeadMassUpdateProcessStatusRequest {
    massUpdateId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartHousekeepingMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: HousekeepingMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartNotesMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: NotesMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartPaymentInstructionsMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: PaymentInstructionsMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartPreferencesMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: PreferencesMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartReservationDetailsMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: ReservationDetailsMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartReservationsDailySummaryProcessRequest {
    extSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: Criteria;
    acceptLanguage?: string;
}

export interface StartRoomingListCreationProcessRequest {
    hotelId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomingList: RoomingList;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartRoomingListValidationProcessRequest {
    hotelId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomingList: RoomingList;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartRoutingInstructionsMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: RoutingInstructionsMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartTracesMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: TracesMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartTransportationsMassUpdateProcessRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: TransportationsMassUpdateCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ReservationAsyncApi extends runtime.BaseAPI {

    /**
     * This API returns a summary of the reservations included in the mass update process. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>getMassUpdateProcessSummary</p>
     * Get results of a Mass Update process
     */
    async getMassUpdateProcessSummaryRaw(requestParameters: GetMassUpdateProcessSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MassUpdateSummaryType>> {
        if (requestParameters.massUpdateId === null || requestParameters.massUpdateId === undefined) {
            throw new runtime.RequiredError('massUpdateId','Required parameter requestParameters.massUpdateId was null or undefined when calling getMassUpdateProcessSummary.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getMassUpdateProcessSummary.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/massUpdate/{massUpdateId}`.replace(`{${"massUpdateId"}}`, encodeURIComponent(String(requestParameters.massUpdateId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MassUpdateSummaryTypeFromJSON(jsonValue));
    }

    /**
     * This API returns a summary of the reservations included in the mass update process. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>getMassUpdateProcessSummary</p>
     * Get results of a Mass Update process
     */
    async getMassUpdateProcessSummary(requestParameters: GetMassUpdateProcessSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MassUpdateSummaryType> {
        const response = await this.getMassUpdateProcessSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve a property&apos;s reservation daily summary within the dates given in the startReservationsDailySummaryProcess API request. You can get the value of the summaryId from the Location header returned by the getReservationsProcessStatus operation after the process is completed.  <p><strong>OperationId:</strong>getReservationsDailySummary</p>
     * Get results of Reservations Daily Summary
     */
    async getReservationsDailySummaryRaw(requestParameters: GetReservationsDailySummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDailySummaryDetails>> {
        if (requestParameters.summaryId === null || requestParameters.summaryId === undefined) {
            throw new runtime.RequiredError('summaryId','Required parameter requestParameters.summaryId was null or undefined when calling getReservationsDailySummary.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getReservationsDailySummary.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationsDailySummary.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/reservations/dailySummary/{summaryId}`.replace(`{${"summaryId"}}`, encodeURIComponent(String(requestParameters.summaryId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsDailySummaryDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve a property&apos;s reservation daily summary within the dates given in the startReservationsDailySummaryProcess API request. You can get the value of the summaryId from the Location header returned by the getReservationsProcessStatus operation after the process is completed.  <p><strong>OperationId:</strong>getReservationsDailySummary</p>
     * Get results of Reservations Daily Summary
     */
    async getReservationsDailySummary(requestParameters: GetReservationsDailySummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDailySummaryDetails> {
        const response = await this.getReservationsDailySummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to check whether the process to generate reservations daily summaries is complete. You can get value of summaryId from the Location header returned by the startReservationsDailySummaryProcess operation. <p><strong>OperationId:</strong>getReservationsProcessStatus</p>
     * Check status of Reservation Daily Summary process
     */
    async getReservationsProcessStatusRaw(requestParameters: GetReservationsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.summaryId === null || requestParameters.summaryId === undefined) {
            throw new runtime.RequiredError('summaryId','Required parameter requestParameters.summaryId was null or undefined when calling getReservationsProcessStatus.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getReservationsProcessStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationsProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/reservations/dailySummary/{summaryId}`.replace(`{${"summaryId"}}`, encodeURIComponent(String(requestParameters.summaryId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this to check whether the process to generate reservations daily summaries is complete. You can get value of summaryId from the Location header returned by the startReservationsDailySummaryProcess operation. <p><strong>OperationId:</strong>getReservationsProcessStatus</p>
     * Check status of Reservation Daily Summary process
     */
    async getReservationsProcessStatus(requestParameters: GetReservationsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getReservationsProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * This API returns a summary of the status from rooming list creation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListCreationProcessResults</p>
     * Get results of Rooming List Creation process
     */
    async getRoomingListCreationProcessResultsRaw(requestParameters: GetRoomingListCreationProcessResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRoomingListType>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getRoomingListCreationProcessResults.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListCreationProcessResults.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roominglistcreation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateRoomingListTypeFromJSON(jsonValue));
    }

    /**
     * This API returns a summary of the status from rooming list creation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListCreationProcessResults</p>
     * Get results of Rooming List Creation process
     */
    async getRoomingListCreationProcessResults(requestParameters: GetRoomingListCreationProcessResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRoomingListType> {
        const response = await this.getRoomingListCreationProcessResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to check whether the create rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListCreationProcessStatus</p>
     * Check status of Rooming List creation process.
     */
    async getRoomingListCreationProcessStatusRaw(requestParameters: GetRoomingListCreationProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getRoomingListCreationProcessStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListCreationProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roominglistcreation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this to check whether the create rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListCreationProcessStatus</p>
     * Check status of Rooming List creation process.
     */
    async getRoomingListCreationProcessStatus(requestParameters: GetRoomingListCreationProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getRoomingListCreationProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * This API returns a summary of the status from rooming list validation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListValidationProcessResults</p>
     * Get results of Rooming List validation process
     */
    async getRoomingListValidationProcessResultsRaw(requestParameters: GetRoomingListValidationProcessResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateRoomingListType>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getRoomingListValidationProcessResults.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListValidationProcessResults.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roominglistvalidation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateRoomingListTypeFromJSON(jsonValue));
    }

    /**
     * This API returns a summary of the status from rooming list validation process. You can get the value of requestId from the process API response (under header location). <p><strong>OperationId:</strong>getRoomingListValidationProcessResults</p>
     * Get results of Rooming List validation process
     */
    async getRoomingListValidationProcessResults(requestParameters: GetRoomingListValidationProcessResultsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateRoomingListType> {
        const response = await this.getRoomingListValidationProcessResultsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to check whether the validate rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListValidationProcessStatus</p>
     * Check status of Rooming List validation process.
     */
    async getRoomingListValidationProcessStatusRaw(requestParameters: GetRoomingListValidationProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getRoomingListValidationProcessStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomingListValidationProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roominglistvalidation/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this to check whether the validate rooming list process status is Processing, Invalid, Failed or Success. You can get the value of requestId from the process API response under header location. <p><strong>OperationId: </strong>getRoomingListValidationProcessStatus</p>
     * Check status of Rooming List validation process.
     */
    async getRoomingListValidationProcessStatus(requestParameters: GetRoomingListValidationProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getRoomingListValidationProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * Use this to check whether the mass update process has been completed. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>headMassUpdateProcessStatus</p>
     * Check status of Mass Update process.
     */
    async headMassUpdateProcessStatusRaw(requestParameters: HeadMassUpdateProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.massUpdateId === null || requestParameters.massUpdateId === undefined) {
            throw new runtime.RequiredError('massUpdateId','Required parameter requestParameters.massUpdateId was null or undefined when calling headMassUpdateProcessStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling headMassUpdateProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/massUpdate/{massUpdateId}`.replace(`{${"massUpdateId"}}`, encodeURIComponent(String(requestParameters.massUpdateId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this to check whether the mass update process has been completed. You can get the value of massUpdateId from the process API response (under header location). <p><strong>OperationId:</strong>headMassUpdateProcessStatus</p>
     * Check status of Mass Update process.
     */
    async headMassUpdateProcessStatus(requestParameters: HeadMassUpdateProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.headMassUpdateProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to update reservation housekeeping options and/or schedules of a given list of reservations. A user is allowed to submit only one mass update reservations request per hotel at a time. <p><strong>OperationId:</strong>startHousekeepingMassUpdateProcess</p>
     * Updates reservation housekeeping options and/or schedules of a given list of reservations.
     */
    async startHousekeepingMassUpdateProcessRaw(requestParameters: StartHousekeepingMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startHousekeepingMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startHousekeepingMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HousekeepingMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to update reservation housekeeping options and/or schedules of a given list of reservations. A user is allowed to submit only one mass update reservations request per hotel at a time. <p><strong>OperationId:</strong>startHousekeepingMassUpdateProcess</p>
     * Updates reservation housekeeping options and/or schedules of a given list of reservations.
     */
    async startHousekeepingMassUpdateProcess(requestParameters: StartHousekeepingMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startHousekeepingMassUpdateProcessRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to update reservation notes of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startNotesMassUpdateProcess</p>
     * Updates reservation notes of a given list of reservations.
     */
    async startNotesMassUpdateProcessRaw(requestParameters: StartNotesMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startNotesMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startNotesMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/notesMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotesMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to update reservation notes of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startNotesMassUpdateProcess</p>
     * Updates reservation notes of a given list of reservations.
     */
    async startNotesMassUpdateProcess(requestParameters: StartNotesMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startNotesMassUpdateProcessRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to update reservation payment instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPaymentInsructionsMassUpdateProcess</p>
     * Updates reservation payment instructions of a given list of reservations.
     */
    async startPaymentInstructionsMassUpdateProcessRaw(requestParameters: StartPaymentInstructionsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startPaymentInstructionsMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startPaymentInstructionsMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/paymentInstructionsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInstructionsMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to update reservation payment instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPaymentInsructionsMassUpdateProcess</p>
     * Updates reservation payment instructions of a given list of reservations.
     */
    async startPaymentInstructionsMassUpdateProcess(requestParameters: StartPaymentInstructionsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startPaymentInstructionsMassUpdateProcessRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to create reservation preferences of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPreferencesMassUpdateProcess</p>
     * Updates reservation preferences of a given list of reservations.
     */
    async startPreferencesMassUpdateProcessRaw(requestParameters: StartPreferencesMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startPreferencesMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startPreferencesMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/preferencesMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreferencesMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to create reservation preferences of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startPreferencesMassUpdateProcess</p>
     * Updates reservation preferences of a given list of reservations.
     */
    async startPreferencesMassUpdateProcess(requestParameters: StartPreferencesMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startPreferencesMassUpdateProcessRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to update reservation details of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startReservationDetailsMassUpdateProcess</p>
     * Updates reservation details of a given list of reservations.
     */
    async startReservationDetailsMassUpdateProcessRaw(requestParameters: StartReservationDetailsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startReservationDetailsMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startReservationDetailsMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservationDetailsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationDetailsMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to update reservation details of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startReservationDetailsMassUpdateProcess</p>
     * Updates reservation details of a given list of reservations.
     */
    async startReservationDetailsMassUpdateProcess(requestParameters: StartReservationDetailsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startReservationDetailsMassUpdateProcessRaw(requestParameters, initOverrides);
    }

    /**
     * Use this API to get a reservation daily summary for a property within a given date range. Maximum limit of date range is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel. Returns a header parameter Location that can be used in the getReservationsProcessStatus operation.  Use event driven APIs (see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) to get real time reservation updates.  <p><strong>OperationId:</strong>startReservationsDailySummaryProcess</p>
     * Fetch past, present and future Reservations Daily Summary
     */
    async startReservationsDailySummaryProcessRaw(requestParameters: StartReservationsDailySummaryProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling startReservationsDailySummaryProcess.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startReservationsDailySummaryProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startReservationsDailySummaryProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/reservations/dailySummary`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this API to get a reservation daily summary for a property within a given date range. Maximum limit of date range is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel. Returns a header parameter Location that can be used in the getReservationsProcessStatus operation.  Use event driven APIs (see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) to get real time reservation updates.  <p><strong>OperationId:</strong>startReservationsDailySummaryProcess</p>
     * Fetch past, present and future Reservations Daily Summary
     */
    async startReservationsDailySummaryProcess(requestParameters: StartReservationsDailySummaryProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startReservationsDailySummaryProcessRaw(requestParameters, initOverrides);
    }

    /**
     * Use this API to create Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListCreationProcess</p>
     * Create Rooming List Reservations
     */
    async startRoomingListCreationProcessRaw(requestParameters: StartRoomingListCreationProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startRoomingListCreationProcess.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling startRoomingListCreationProcess.');
        }
        
        if (requestParameters.roomingList === null || requestParameters.roomingList === undefined) {
            throw new runtime.RequiredError('roomingList','Required parameter requestParameters.roomingList was null or undefined when calling startRoomingListCreationProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/roominglistcreation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoomingListToJSON(requestParameters.roomingList),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this API to create Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListCreationProcess</p>
     * Create Rooming List Reservations
     */
    async startRoomingListCreationProcess(requestParameters: StartRoomingListCreationProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startRoomingListCreationProcessRaw(requestParameters, initOverrides);
    }

    /**
     * Use this API to validate Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListValidationProcess</p>
     * Validate Rooming List Reservations
     */
    async startRoomingListValidationProcessRaw(requestParameters: StartRoomingListValidationProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startRoomingListValidationProcess.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling startRoomingListValidationProcess.');
        }
        
        if (requestParameters.roomingList === null || requestParameters.roomingList === undefined) {
            throw new runtime.RequiredError('roomingList','Required parameter requestParameters.roomingList was null or undefined when calling startRoomingListValidationProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/roominglistvalidation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoomingListToJSON(requestParameters.roomingList),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this API to validate Reservations Rooming List. <p><strong>OperationId:</strong>startRoomingListValidationProcess</p>
     * Validate Rooming List Reservations
     */
    async startRoomingListValidationProcess(requestParameters: StartRoomingListValidationProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startRoomingListValidationProcessRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to update reservation routing instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startRoutingInstructionsMassUpdateProcess</p>
     * Updates reservation routing instructions of a given list of reservations.
     */
    async startRoutingInstructionsMassUpdateProcessRaw(requestParameters: StartRoutingInstructionsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startRoutingInstructionsMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startRoutingInstructionsMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/routingInstructionsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingInstructionsMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to update reservation routing instructions of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startRoutingInstructionsMassUpdateProcess</p>
     * Updates reservation routing instructions of a given list of reservations.
     */
    async startRoutingInstructionsMassUpdateProcess(requestParameters: StartRoutingInstructionsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startRoutingInstructionsMassUpdateProcessRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to update reservation traces of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTracesMassUpdateProcess</p>
     * Updates reservation traces of a given list of reservations.
     */
    async startTracesMassUpdateProcessRaw(requestParameters: StartTracesMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startTracesMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startTracesMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/tracesMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TracesMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to update reservation traces of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTracesMassUpdateProcess</p>
     * Updates reservation traces of a given list of reservations.
     */
    async startTracesMassUpdateProcess(requestParameters: StartTracesMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startTracesMassUpdateProcessRaw(requestParameters, initOverrides);
    }

    /**
     * This API allows you to create reservation transportations of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTransportationsMassUpdateProcess</p>
     * Updates reservation transportations of a given list of reservations.
     */
    async startTransportationsMassUpdateProcessRaw(requestParameters: StartTransportationsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startTransportationsMassUpdateProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startTransportationsMassUpdateProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transportationsMassUpdate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransportationsMassUpdateCriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API allows you to create reservation transportations of a given list of reservations. A user is allowed to submit only one mass update request per hotel at a time. <p><strong>OperationId:</strong>startTransportationsMassUpdateProcess</p>
     * Updates reservation transportations of a given list of reservations.
     */
    async startTransportationsMassUpdateProcess(requestParameters: StartTransportationsMassUpdateProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startTransportationsMassUpdateProcessRaw(requestParameters, initOverrides);
    }

}
