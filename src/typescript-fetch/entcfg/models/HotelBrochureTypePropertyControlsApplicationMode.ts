/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Application Mode information configuration of the hotel.
 * @export
 * @interface HotelBrochureTypePropertyControlsApplicationMode
 */
export interface HotelBrochureTypePropertyControlsApplicationMode {
    /**
     * The hotel's configuration mode if applicable.
     * @type {string}
     * @memberof HotelBrochureTypePropertyControlsApplicationMode
     */
    configurationMode?: string;
    /**
     * The hotel's country code.
     * @type {string}
     * @memberof HotelBrochureTypePropertyControlsApplicationMode
     */
    countryMode?: string;
    /**
     * Hotel Code used for third party exports.
     * @type {string}
     * @memberof HotelBrochureTypePropertyControlsApplicationMode
     */
    expHotelCode?: string;
    /**
     * Indicates if the hotel uses MBS (Marriott Business Services).
     * @type {boolean}
     * @memberof HotelBrochureTypePropertyControlsApplicationMode
     */
    mbsSupported?: boolean;
    /**
     * The Tourist Number of the hotel.
     * @type {string}
     * @memberof HotelBrochureTypePropertyControlsApplicationMode
     */
    touristNumber?: string;
}

/**
 * Check if a given object implements the HotelBrochureTypePropertyControlsApplicationMode interface.
 */
export function instanceOfHotelBrochureTypePropertyControlsApplicationMode(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelBrochureTypePropertyControlsApplicationModeFromJSON(json: any): HotelBrochureTypePropertyControlsApplicationMode {
    return HotelBrochureTypePropertyControlsApplicationModeFromJSONTyped(json, false);
}

export function HotelBrochureTypePropertyControlsApplicationModeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelBrochureTypePropertyControlsApplicationMode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configurationMode': !exists(json, 'configurationMode') ? undefined : json['configurationMode'],
        'countryMode': !exists(json, 'countryMode') ? undefined : json['countryMode'],
        'expHotelCode': !exists(json, 'expHotelCode') ? undefined : json['expHotelCode'],
        'mbsSupported': !exists(json, 'mbsSupported') ? undefined : json['mbsSupported'],
        'touristNumber': !exists(json, 'touristNumber') ? undefined : json['touristNumber'],
    };
}

export function HotelBrochureTypePropertyControlsApplicationModeToJSON(value?: HotelBrochureTypePropertyControlsApplicationMode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configurationMode': value.configurationMode,
        'countryMode': value.countryMode,
        'expHotelCode': value.expHotelCode,
        'mbsSupported': value.mbsSupported,
        'touristNumber': value.touristNumber,
    };
}

