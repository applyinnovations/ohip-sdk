/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NegotiatedInfoType } from './NegotiatedInfoType';
import {
    NegotiatedInfoTypeFromJSON,
    NegotiatedInfoTypeFromJSONTyped,
    NegotiatedInfoTypeToJSON,
} from './NegotiatedInfoType';

/**
 * This holds a list of NegotiatedInfoType.
 * @export
 * @interface NegotiatedType
 */
export interface NegotiatedType {
    /**
     * 
     * @type {Array<NegotiatedInfoType>}
     * @memberof NegotiatedType
     */
    negotiatedInfoList?: Array<NegotiatedInfoType>;
    /**
     * Hotel code for the negotiated rate.
     * @type {string}
     * @memberof NegotiatedType
     */
    hotelId?: string;
    /**
     * Rate plan code for the negotiated rate.
     * @type {string}
     * @memberof NegotiatedType
     */
    rateCode?: string;
}

/**
 * Check if a given object implements the NegotiatedType interface.
 */
export function instanceOfNegotiatedType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NegotiatedTypeFromJSON(json: any): NegotiatedType {
    return NegotiatedTypeFromJSONTyped(json, false);
}

export function NegotiatedTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NegotiatedType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'negotiatedInfoList': !exists(json, 'negotiatedInfoList') ? undefined : ((json['negotiatedInfoList'] as Array<any>).map(NegotiatedInfoTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
    };
}

export function NegotiatedTypeToJSON(value?: NegotiatedType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'negotiatedInfoList': value.negotiatedInfoList === undefined ? undefined : ((value.negotiatedInfoList as Array<any>).map(NegotiatedInfoTypeToJSON)),
        'hotelId': value.hotelId,
        'rateCode': value.rateCode,
    };
}

