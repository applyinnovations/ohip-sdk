/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Base details of the marketing city.
 * @export
 * @interface TemplateMarketingCityConfigType
 */
export interface TemplateMarketingCityConfigType {
    /**
     * Description of the marketing city.
     * @type {string}
     * @memberof TemplateMarketingCityConfigType
     */
    description?: string;
    /**
     * Distance from the hotel to the marketing city.
     * @type {number}
     * @memberof TemplateMarketingCityConfigType
     */
    distance?: number;
    /**
     * Unit of distance for the Distance measurement.
     * @type {string}
     * @memberof TemplateMarketingCityConfigType
     */
    distanceType?: string;
    /**
     * Driving time from the hotel to the marketing city.
     * @type {string}
     * @memberof TemplateMarketingCityConfigType
     */
    drivingTime?: string;
    /**
     * Direction of the marketing city in relation to the hotel.
     * @type {string}
     * @memberof TemplateMarketingCityConfigType
     */
    direction?: string;
    /**
     * Sequence number for displaying the marketing city.
     * @type {number}
     * @memberof TemplateMarketingCityConfigType
     */
    sequence?: number;
    /**
     * Flag to indicate whether the marketing city is inactive or not.
     * @type {boolean}
     * @memberof TemplateMarketingCityConfigType
     */
    inactive?: boolean;
    /**
     * Marketing city code.
     * @type {string}
     * @memberof TemplateMarketingCityConfigType
     */
    marketingCity?: string;
    /**
     * Region that the marketing city belongs to.
     * @type {string}
     * @memberof TemplateMarketingCityConfigType
     */
    regionCode?: string;
    /**
     * New region code to change the marketing city to. Template marketing cities allow editing of the region code. Because this is a key field we need to retain the original region code to locate the appropriate record to update. The original region code element is located in MarketingCityBaseType.
     * @type {string}
     * @memberof TemplateMarketingCityConfigType
     */
    newRegionCode?: string;
}

/**
 * Check if a given object implements the TemplateMarketingCityConfigType interface.
 */
export function instanceOfTemplateMarketingCityConfigType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplateMarketingCityConfigTypeFromJSON(json: any): TemplateMarketingCityConfigType {
    return TemplateMarketingCityConfigTypeFromJSONTyped(json, false);
}

export function TemplateMarketingCityConfigTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateMarketingCityConfigType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'distance': !exists(json, 'distance') ? undefined : json['distance'],
        'distanceType': !exists(json, 'distanceType') ? undefined : json['distanceType'],
        'drivingTime': !exists(json, 'drivingTime') ? undefined : json['drivingTime'],
        'direction': !exists(json, 'direction') ? undefined : json['direction'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'marketingCity': !exists(json, 'marketingCity') ? undefined : json['marketingCity'],
        'regionCode': !exists(json, 'regionCode') ? undefined : json['regionCode'],
        'newRegionCode': !exists(json, 'newRegionCode') ? undefined : json['newRegionCode'],
    };
}

export function TemplateMarketingCityConfigTypeToJSON(value?: TemplateMarketingCityConfigType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'distance': value.distance,
        'distanceType': value.distanceType,
        'drivingTime': value.drivingTime,
        'direction': value.direction,
        'sequence': value.sequence,
        'inactive': value.inactive,
        'marketingCity': value.marketingCity,
        'regionCode': value.regionCode,
        'newRegionCode': value.newRegionCode,
    };
}

