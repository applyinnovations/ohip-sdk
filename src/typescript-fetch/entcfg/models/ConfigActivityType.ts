/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Changes log record to import/Export/Delete customization operations.
 * @export
 * @interface ConfigActivityType
 */
export interface ConfigActivityType {
    /**
     * Action Type: MDS_IMP, MDS_EXP, MDS_DEL, MDS_EXP_UNENC, MDS_IMP_UNENC.
     * @type {string}
     * @memberof ConfigActivityType
     */
    actionType?: string;
    /**
     * action, layer, org name, user name and screen name or file name or path.
     * @type {string}
     * @memberof ConfigActivityType
     */
    actionDescription?: string;
    /**
     * Code that uniquely identifies the hotel belonging to the organization.
     * @type {string}
     * @memberof ConfigActivityType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the ConfigActivityType interface.
 */
export function instanceOfConfigActivityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigActivityTypeFromJSON(json: any): ConfigActivityType {
    return ConfigActivityTypeFromJSONTyped(json, false);
}

export function ConfigActivityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigActivityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actionType': !exists(json, 'actionType') ? undefined : json['actionType'],
        'actionDescription': !exists(json, 'actionDescription') ? undefined : json['actionDescription'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function ConfigActivityTypeToJSON(value?: ConfigActivityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actionType': value.actionType,
        'actionDescription': value.actionDescription,
        'hotelId': value.hotelId,
    };
}

