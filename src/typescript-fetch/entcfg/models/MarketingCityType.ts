/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CityHotelInfoType } from './CityHotelInfoType';
import {
    CityHotelInfoTypeFromJSON,
    CityHotelInfoTypeFromJSONTyped,
    CityHotelInfoTypeToJSON,
} from './CityHotelInfoType';

/**
 * 
 * @export
 * @interface MarketingCityType
 */
export interface MarketingCityType {
    /**
     * Hotels under this Marketing City.
     * @type {Array<CityHotelInfoType>}
     * @memberof MarketingCityType
     */
    cityHotels?: Array<CityHotelInfoType>;
    /**
     * Hotels under this Marketing City.
     * @type {string}
     * @memberof MarketingCityType
     */
    marketingCity?: string;
    /**
     * Description of the Marketing City
     * @type {string}
     * @memberof MarketingCityType
     */
    description?: string;
}

/**
 * Check if a given object implements the MarketingCityType interface.
 */
export function instanceOfMarketingCityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MarketingCityTypeFromJSON(json: any): MarketingCityType {
    return MarketingCityTypeFromJSONTyped(json, false);
}

export function MarketingCityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MarketingCityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cityHotels': !exists(json, 'cityHotels') ? undefined : ((json['cityHotels'] as Array<any>).map(CityHotelInfoTypeFromJSON)),
        'marketingCity': !exists(json, 'marketingCity') ? undefined : json['marketingCity'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function MarketingCityTypeToJSON(value?: MarketingCityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cityHotels': value.cityHotels === undefined ? undefined : ((value.cityHotels as Array<any>).map(CityHotelInfoTypeToJSON)),
        'marketingCity': value.marketingCity,
        'description': value.description,
    };
}

