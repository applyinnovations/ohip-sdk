/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RelativePositionType } from './RelativePositionType';
import {
    RelativePositionTypeFromJSON,
    RelativePositionTypeFromJSONTyped,
    RelativePositionTypeToJSON,
} from './RelativePositionType';
import type { TransportationCodeType } from './TransportationCodeType';
import {
    TransportationCodeTypeFromJSON,
    TransportationCodeTypeFromJSONTyped,
    TransportationCodeTypeToJSON,
} from './TransportationCodeType';

/**
 * Airport details of the Hotel
 * @export
 * @interface HotelAirportType
 */
export interface HotelAirportType {
    /**
     * Description of the airport
     * @type {string}
     * @memberof HotelAirportType
     */
    description?: string;
    /**
     * 
     * @type {RelativePositionType}
     * @memberof HotelAirportType
     */
    relativePosition?: RelativePositionType;
    /**
     * Directions from the airport to the Hotel.
     * @type {string}
     * @memberof HotelAirportType
     */
    direction?: string;
    /**
     * List of available transportations from airport to get into Hotel.
     * @type {Array<TransportationCodeType>}
     * @memberof HotelAirportType
     */
    transportationList?: Array<TransportationCodeType>;
    /**
     * 
     * @type {string}
     * @memberof HotelAirportType
     */
    airportCode?: string;
    /**
     * Display Order sequence.
     * @type {number}
     * @memberof HotelAirportType
     */
    orderSequence?: number;
}

/**
 * Check if a given object implements the HotelAirportType interface.
 */
export function instanceOfHotelAirportType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelAirportTypeFromJSON(json: any): HotelAirportType {
    return HotelAirportTypeFromJSONTyped(json, false);
}

export function HotelAirportTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelAirportType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'relativePosition': !exists(json, 'relativePosition') ? undefined : RelativePositionTypeFromJSON(json['relativePosition']),
        'direction': !exists(json, 'direction') ? undefined : json['direction'],
        'transportationList': !exists(json, 'transportationList') ? undefined : ((json['transportationList'] as Array<any>).map(TransportationCodeTypeFromJSON)),
        'airportCode': !exists(json, 'airportCode') ? undefined : json['airportCode'],
        'orderSequence': !exists(json, 'orderSequence') ? undefined : json['orderSequence'],
    };
}

export function HotelAirportTypeToJSON(value?: HotelAirportType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'relativePosition': RelativePositionTypeToJSON(value.relativePosition),
        'direction': value.direction,
        'transportationList': value.transportationList === undefined ? undefined : ((value.transportationList as Array<any>).map(TransportationCodeTypeToJSON)),
        'airportCode': value.airportCode,
        'orderSequence': value.orderSequence,
    };
}

