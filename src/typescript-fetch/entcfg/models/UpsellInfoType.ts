/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UpsellInfoTypeOriginalInfo } from './UpsellInfoTypeOriginalInfo';
import {
    UpsellInfoTypeOriginalInfoFromJSON,
    UpsellInfoTypeOriginalInfoFromJSONTyped,
    UpsellInfoTypeOriginalInfoToJSON,
} from './UpsellInfoTypeOriginalInfo';
import type { UpsellInfoTypeUpsellInfo } from './UpsellInfoTypeUpsellInfo';
import {
    UpsellInfoTypeUpsellInfoFromJSON,
    UpsellInfoTypeUpsellInfoFromJSONTyped,
    UpsellInfoTypeUpsellInfoToJSON,
} from './UpsellInfoTypeUpsellInfo';

/**
 * Information regarding upsell for a reservation.
 * @export
 * @interface UpsellInfoType
 */
export interface UpsellInfoType {
    /**
     * 
     * @type {UpsellInfoTypeOriginalInfo}
     * @memberof UpsellInfoType
     */
    originalInfo?: UpsellInfoTypeOriginalInfo;
    /**
     * 
     * @type {UpsellInfoTypeUpsellInfo}
     * @memberof UpsellInfoType
     */
    upsellInfo?: UpsellInfoTypeUpsellInfo;
}

/**
 * Check if a given object implements the UpsellInfoType interface.
 */
export function instanceOfUpsellInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpsellInfoTypeFromJSON(json: any): UpsellInfoType {
    return UpsellInfoTypeFromJSONTyped(json, false);
}

export function UpsellInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsellInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'originalInfo': !exists(json, 'originalInfo') ? undefined : UpsellInfoTypeOriginalInfoFromJSON(json['originalInfo']),
        'upsellInfo': !exists(json, 'upsellInfo') ? undefined : UpsellInfoTypeUpsellInfoFromJSON(json['upsellInfo']),
    };
}

export function UpsellInfoTypeToJSON(value?: UpsellInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'originalInfo': UpsellInfoTypeOriginalInfoToJSON(value.originalInfo),
        'upsellInfo': UpsellInfoTypeUpsellInfoToJSON(value.upsellInfo),
    };
}

