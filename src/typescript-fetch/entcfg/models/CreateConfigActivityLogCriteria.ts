/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfigActivityType } from './ConfigActivityType';
import {
    ConfigActivityTypeFromJSON,
    ConfigActivityTypeFromJSONTyped,
    ConfigActivityTypeToJSON,
} from './ConfigActivityType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for creating Config Activity Logs.
 * @export
 * @interface CreateConfigActivityLogCriteria
 */
export interface CreateConfigActivityLogCriteria {
    /**
     * Changes log record to import/Export/Delete customization operations.
     * @type {Array<ConfigActivityType>}
     * @memberof CreateConfigActivityLogCriteria
     */
    configActivities?: Array<ConfigActivityType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof CreateConfigActivityLogCriteria
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the CreateConfigActivityLogCriteria interface.
 */
export function instanceOfCreateConfigActivityLogCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreateConfigActivityLogCriteriaFromJSON(json: any): CreateConfigActivityLogCriteria {
    return CreateConfigActivityLogCriteriaFromJSONTyped(json, false);
}

export function CreateConfigActivityLogCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateConfigActivityLogCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configActivities': !exists(json, 'configActivities') ? undefined : ((json['configActivities'] as Array<any>).map(ConfigActivityTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CreateConfigActivityLogCriteriaToJSON(value?: CreateConfigActivityLogCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configActivities': value.configActivities === undefined ? undefined : ((value.configActivities as Array<any>).map(ConfigActivityTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

