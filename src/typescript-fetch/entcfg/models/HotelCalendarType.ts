/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelCalendarDayType } from './HotelCalendarDayType';
import {
    HotelCalendarDayTypeFromJSON,
    HotelCalendarDayTypeFromJSONTyped,
    HotelCalendarDayTypeToJSON,
} from './HotelCalendarDayType';

/**
 * Represents the calendar with individual days having corresponding entries (day type, event, etc.) for a hotel.
 * @export
 * @interface HotelCalendarType
 */
export interface HotelCalendarType {
    /**
     * Entries for a specific calendar day.
     * @type {Array<HotelCalendarDayType>}
     * @memberof HotelCalendarType
     */
    calendarDay?: Array<HotelCalendarDayType>;
    /**
     * Indicates a specific hotel for which the calendar is being represented.
     * @type {string}
     * @memberof HotelCalendarType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the HotelCalendarType interface.
 */
export function instanceOfHotelCalendarType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelCalendarTypeFromJSON(json: any): HotelCalendarType {
    return HotelCalendarTypeFromJSONTyped(json, false);
}

export function HotelCalendarTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelCalendarType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'calendarDay': !exists(json, 'calendarDay') ? undefined : ((json['calendarDay'] as Array<any>).map(HotelCalendarDayTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function HotelCalendarTypeToJSON(value?: HotelCalendarType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'calendarDay': value.calendarDay === undefined ? undefined : ((value.calendarDay as Array<any>).map(HotelCalendarDayTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

