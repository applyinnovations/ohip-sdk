/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserDefinedFieldGroupDataType } from './UserDefinedFieldGroupDataType';
import {
    UserDefinedFieldGroupDataTypeFromJSON,
    UserDefinedFieldGroupDataTypeFromJSONTyped,
    UserDefinedFieldGroupDataTypeToJSON,
} from './UserDefinedFieldGroupDataType';

/**
 * Information representation of User Defined Field Group.
 * @export
 * @interface UserDefinedFieldGroupType
 */
export interface UserDefinedFieldGroupType {
    /**
     * The Code of User Defined Field Group.
     * @type {string}
     * @memberof UserDefinedFieldGroupType
     */
    groupCode?: string;
    /**
     * The Description of User Defined Field Group.
     * @type {string}
     * @memberof UserDefinedFieldGroupType
     */
    description?: string;
    /**
     * 
     * @type {UserDefinedFieldGroupDataType}
     * @memberof UserDefinedFieldGroupType
     */
    dataType?: UserDefinedFieldGroupDataType;
    /**
     * Length of field values of User Defined Field Group.
     * @type {number}
     * @memberof UserDefinedFieldGroupType
     */
    dataLength?: number;
    /**
     * Indicates that if the group could be deleted. This is a readonly element an it is only used in the fetch operation.
     * @type {boolean}
     * @memberof UserDefinedFieldGroupType
     */
    _protected?: boolean;
}

/**
 * Check if a given object implements the UserDefinedFieldGroupType interface.
 */
export function instanceOfUserDefinedFieldGroupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UserDefinedFieldGroupTypeFromJSON(json: any): UserDefinedFieldGroupType {
    return UserDefinedFieldGroupTypeFromJSONTyped(json, false);
}

export function UserDefinedFieldGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDefinedFieldGroupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groupCode': !exists(json, 'groupCode') ? undefined : json['groupCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'dataType': !exists(json, 'dataType') ? undefined : UserDefinedFieldGroupDataTypeFromJSON(json['dataType']),
        'dataLength': !exists(json, 'dataLength') ? undefined : json['dataLength'],
        '_protected': !exists(json, 'protected') ? undefined : json['protected'],
    };
}

export function UserDefinedFieldGroupTypeToJSON(value?: UserDefinedFieldGroupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groupCode': value.groupCode,
        'description': value.description,
        'dataType': UserDefinedFieldGroupDataTypeToJSON(value.dataType),
        'dataLength': value.dataLength,
        'protected': value._protected,
    };
}

