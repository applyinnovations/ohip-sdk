/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { TemplateAirportsType } from './TemplateAirportsType';
import {
    TemplateAirportsTypeFromJSON,
    TemplateAirportsTypeFromJSONTyped,
    TemplateAirportsTypeToJSON,
} from './TemplateAirportsType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response object for fetching template airports.
 * @export
 * @interface TemplateAirportsDetails
 */
export interface TemplateAirportsDetails {
    /**
     * 
     * @type {Links}
     * @memberof TemplateAirportsDetails
     */
    links?: Links;
    /**
     * 
     * @type {TemplateAirportsType}
     * @memberof TemplateAirportsDetails
     */
    templateAirports?: TemplateAirportsType;
    /**
     * 
     * @type {WarningsType}
     * @memberof TemplateAirportsDetails
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the TemplateAirportsDetails interface.
 */
export function instanceOfTemplateAirportsDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplateAirportsDetailsFromJSON(json: any): TemplateAirportsDetails {
    return TemplateAirportsDetailsFromJSONTyped(json, false);
}

export function TemplateAirportsDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateAirportsDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'templateAirports': !exists(json, 'templateAirports') ? undefined : TemplateAirportsTypeFromJSON(json['templateAirports']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function TemplateAirportsDetailsToJSON(value?: TemplateAirportsDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'templateAirports': TemplateAirportsTypeToJSON(value.templateAirports),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

