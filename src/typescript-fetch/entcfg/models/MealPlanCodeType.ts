/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Meal plan codes associated with the rate codes.
 * @export
 * @interface MealPlanCodeType
 */
export interface MealPlanCodeType {
    /**
     * Meal plan code.
     * @type {string}
     * @memberof MealPlanCodeType
     */
    code?: string;
    /**
     * Represents if the meal plan code is included in rate code or not.
     * @type {boolean}
     * @memberof MealPlanCodeType
     */
    included?: boolean;
    /**
     * Represents if the meal plan code is available for breakfast or not.
     * @type {boolean}
     * @memberof MealPlanCodeType
     */
    breakfastIncluded?: boolean;
    /**
     * Represents if the meal plan code is available for lunch or not.
     * @type {boolean}
     * @memberof MealPlanCodeType
     */
    lunchIncluded?: boolean;
    /**
     * Represents if the meal plan code is available for dinner or not.
     * @type {boolean}
     * @memberof MealPlanCodeType
     */
    dinnerIncluded?: boolean;
}

/**
 * Check if a given object implements the MealPlanCodeType interface.
 */
export function instanceOfMealPlanCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MealPlanCodeTypeFromJSON(json: any): MealPlanCodeType {
    return MealPlanCodeTypeFromJSONTyped(json, false);
}

export function MealPlanCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MealPlanCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'included': !exists(json, 'included') ? undefined : json['included'],
        'breakfastIncluded': !exists(json, 'breakfastIncluded') ? undefined : json['breakfastIncluded'],
        'lunchIncluded': !exists(json, 'lunchIncluded') ? undefined : json['lunchIncluded'],
        'dinnerIncluded': !exists(json, 'dinnerIncluded') ? undefined : json['dinnerIncluded'],
    };
}

export function MealPlanCodeTypeToJSON(value?: MealPlanCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'included': value.included,
        'breakfastIncluded': value.breakfastIncluded,
        'lunchIncluded': value.lunchIncluded,
        'dinnerIncluded': value.dinnerIncluded,
    };
}

