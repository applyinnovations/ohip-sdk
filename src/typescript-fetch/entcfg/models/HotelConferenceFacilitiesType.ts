/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelBanquetSpaceType } from './HotelBanquetSpaceType';
import {
    HotelBanquetSpaceTypeFromJSON,
    HotelBanquetSpaceTypeFromJSONTyped,
    HotelBanquetSpaceTypeToJSON,
} from './HotelBanquetSpaceType';
import type { HotelConferenceRoomType } from './HotelConferenceRoomType';
import {
    HotelConferenceRoomTypeFromJSON,
    HotelConferenceRoomTypeFromJSONTyped,
    HotelConferenceRoomTypeToJSON,
} from './HotelConferenceRoomType';

/**
 * 
 * @export
 * @interface HotelConferenceFacilitiesType
 */
export interface HotelConferenceFacilitiesType {
    /**
     * 
     * @type {HotelBanquetSpaceType}
     * @memberof HotelConferenceFacilitiesType
     */
    hotelBanquetSpace?: HotelBanquetSpaceType;
    /**
     * 
     * @type {Array<HotelConferenceRoomType>}
     * @memberof HotelConferenceFacilitiesType
     */
    hotelConferenceRooms?: Array<HotelConferenceRoomType>;
}

/**
 * Check if a given object implements the HotelConferenceFacilitiesType interface.
 */
export function instanceOfHotelConferenceFacilitiesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelConferenceFacilitiesTypeFromJSON(json: any): HotelConferenceFacilitiesType {
    return HotelConferenceFacilitiesTypeFromJSONTyped(json, false);
}

export function HotelConferenceFacilitiesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelConferenceFacilitiesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelBanquetSpace': !exists(json, 'hotelBanquetSpace') ? undefined : HotelBanquetSpaceTypeFromJSON(json['hotelBanquetSpace']),
        'hotelConferenceRooms': !exists(json, 'hotelConferenceRooms') ? undefined : ((json['hotelConferenceRooms'] as Array<any>).map(HotelConferenceRoomTypeFromJSON)),
    };
}

export function HotelConferenceFacilitiesTypeToJSON(value?: HotelConferenceFacilitiesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelBanquetSpace': HotelBanquetSpaceTypeToJSON(value.hotelBanquetSpace),
        'hotelConferenceRooms': value.hotelConferenceRooms === undefined ? undefined : ((value.hotelConferenceRooms as Array<any>).map(HotelConferenceRoomTypeToJSON)),
    };
}

