/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationsTextType } from './TranslationsTextType';
import {
    TranslationsTextTypeFromJSON,
    TranslationsTextTypeFromJSONTyped,
    TranslationsTextTypeToJSON,
} from './TranslationsTextType';

/**
 * Contains Multiple translated texts and language codes.
 * @export
 * @interface TranslationTextType50
 */
export interface TranslationTextType50 {
    /**
     * Default text with Character length from 0 to 50.
     * @type {string}
     * @memberof TranslationTextType50
     */
    defaultText?: string;
    /**
     * 
     * @type {TranslationsTextType}
     * @memberof TranslationTextType50
     */
    translatedTexts?: TranslationsTextType;
}

/**
 * Check if a given object implements the TranslationTextType50 interface.
 */
export function instanceOfTranslationTextType50(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TranslationTextType50FromJSON(json: any): TranslationTextType50 {
    return TranslationTextType50FromJSONTyped(json, false);
}

export function TranslationTextType50FromJSONTyped(json: any, ignoreDiscriminator: boolean): TranslationTextType50 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultText': !exists(json, 'defaultText') ? undefined : json['defaultText'],
        'translatedTexts': !exists(json, 'translatedTexts') ? undefined : TranslationsTextTypeFromJSON(json['translatedTexts']),
    };
}

export function TranslationTextType50ToJSON(value?: TranslationTextType50 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'defaultText': value.defaultText,
        'translatedTexts': TranslationsTextTypeToJSON(value.translatedTexts),
    };
}

