/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeListType } from './CodeListType';
import {
    CodeListTypeFromJSON,
    CodeListTypeFromJSONTyped,
    CodeListTypeToJSON,
} from './CodeListType';
import type { CopyTemplateType } from './CopyTemplateType';
import {
    CopyTemplateTypeFromJSON,
    CopyTemplateTypeFromJSONTyped,
    CopyTemplateTypeToJSON,
} from './CopyTemplateType';
import type { HotelCodeListType } from './HotelCodeListType';
import {
    HotelCodeListTypeFromJSON,
    HotelCodeListTypeFromJSONTyped,
    HotelCodeListTypeToJSON,
} from './HotelCodeListType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface CopyTemplateCodesRequest
 */
export interface CopyTemplateCodesRequest {
    /**
     * 
     * @type {CodeListType}
     * @memberof CopyTemplateCodesRequest
     */
    codes?: CodeListType;
    /**
     * 
     * @type {HotelCodeListType}
     * @memberof CopyTemplateCodesRequest
     */
    hotelCodes?: HotelCodeListType;
    /**
     * 
     * @type {Links}
     * @memberof CopyTemplateCodesRequest
     */
    links?: Links;
    /**
     * 
     * @type {CopyTemplateType}
     * @memberof CopyTemplateCodesRequest
     */
    templateName?: CopyTemplateType;
    /**
     * 
     * @type {WarningsType}
     * @memberof CopyTemplateCodesRequest
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the CopyTemplateCodesRequest interface.
 */
export function instanceOfCopyTemplateCodesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyTemplateCodesRequestFromJSON(json: any): CopyTemplateCodesRequest {
    return CopyTemplateCodesRequestFromJSONTyped(json, false);
}

export function CopyTemplateCodesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyTemplateCodesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'codes': !exists(json, 'codes') ? undefined : CodeListTypeFromJSON(json['codes']),
        'hotelCodes': !exists(json, 'hotelCodes') ? undefined : HotelCodeListTypeFromJSON(json['hotelCodes']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'templateName': !exists(json, 'templateName') ? undefined : CopyTemplateTypeFromJSON(json['templateName']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function CopyTemplateCodesRequestToJSON(value?: CopyTemplateCodesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'codes': CodeListTypeToJSON(value.codes),
        'hotelCodes': HotelCodeListTypeToJSON(value.hotelCodes),
        'links': LinksToJSON(value.links),
        'templateName': CopyTemplateTypeToJSON(value.templateName),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

