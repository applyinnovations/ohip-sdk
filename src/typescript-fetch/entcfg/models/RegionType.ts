/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MarketingCityType } from './MarketingCityType';
import {
    MarketingCityTypeFromJSON,
    MarketingCityTypeFromJSONTyped,
    MarketingCityTypeToJSON,
} from './MarketingCityType';

/**
 * 
 * @export
 * @interface RegionType
 */
export interface RegionType {
    /**
     * Marketing Cities under this Region.
     * @type {Array<MarketingCityType>}
     * @memberof RegionType
     */
    marketingCities?: Array<MarketingCityType>;
    /**
     * Code of this Region.
     * @type {string}
     * @memberof RegionType
     */
    regionCode?: string;
    /**
     * Description of the Region
     * @type {string}
     * @memberof RegionType
     */
    description?: string;
}

/**
 * Check if a given object implements the RegionType interface.
 */
export function instanceOfRegionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RegionTypeFromJSON(json: any): RegionType {
    return RegionTypeFromJSONTyped(json, false);
}

export function RegionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'marketingCities': !exists(json, 'marketingCities') ? undefined : ((json['marketingCities'] as Array<any>).map(MarketingCityTypeFromJSON)),
        'regionCode': !exists(json, 'regionCode') ? undefined : json['regionCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function RegionTypeToJSON(value?: RegionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'marketingCities': value.marketingCities === undefined ? undefined : ((value.marketingCities as Array<any>).map(MarketingCityTypeToJSON)),
        'regionCode': value.regionCode,
        'description': value.description,
    };
}

