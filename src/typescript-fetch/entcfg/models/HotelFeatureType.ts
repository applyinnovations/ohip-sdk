/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Base details used for amenities.
 * @export
 * @interface HotelFeatureType
 */
export interface HotelFeatureType {
    /**
     * The description about amenity of the hotel.
     * @type {string}
     * @memberof HotelFeatureType
     */
    description?: string;
    /**
     * The comments about amenity of the hotel.
     * @type {string}
     * @memberof HotelFeatureType
     */
    comments?: string;
    /**
     * Specifies the feature code (aka amenity code).
     * @type {string}
     * @memberof HotelFeatureType
     */
    featureCode?: string;
    /**
     * Display Order sequence.
     * @type {number}
     * @memberof HotelFeatureType
     */
    orderSequence?: number;
    /**
     * The hours of operation of the amenity in the hotel.
     * @type {string}
     * @memberof HotelFeatureType
     */
    hours?: string;
    /**
     * The price range of the amenity in the hotel.
     * @type {string}
     * @memberof HotelFeatureType
     */
    priceRange?: string;
}

/**
 * Check if a given object implements the HotelFeatureType interface.
 */
export function instanceOfHotelFeatureType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelFeatureTypeFromJSON(json: any): HotelFeatureType {
    return HotelFeatureTypeFromJSONTyped(json, false);
}

export function HotelFeatureTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelFeatureType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'featureCode': !exists(json, 'featureCode') ? undefined : json['featureCode'],
        'orderSequence': !exists(json, 'orderSequence') ? undefined : json['orderSequence'],
        'hours': !exists(json, 'hours') ? undefined : json['hours'],
        'priceRange': !exists(json, 'priceRange') ? undefined : json['priceRange'],
    };
}

export function HotelFeatureTypeToJSON(value?: HotelFeatureType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'comments': value.comments,
        'featureCode': value.featureCode,
        'orderSequence': value.orderSequence,
        'hours': value.hours,
        'priceRange': value.priceRange,
    };
}

