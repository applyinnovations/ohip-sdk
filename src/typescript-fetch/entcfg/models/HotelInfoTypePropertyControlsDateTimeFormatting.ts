/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Date Time Formatting information configuration of the hotel
 * @export
 * @interface HotelInfoTypePropertyControlsDateTimeFormatting
 */
export interface HotelInfoTypePropertyControlsDateTimeFormatting {
    /**
     * Long date format of the hotel.
     * @type {string}
     * @memberof HotelInfoTypePropertyControlsDateTimeFormatting
     */
    longDateFormat?: string;
    /**
     * Short date format of the hotel.
     * @type {string}
     * @memberof HotelInfoTypePropertyControlsDateTimeFormatting
     */
    shortDateFormat?: string;
    /**
     * Time format for the hotel.
     * @type {string}
     * @memberof HotelInfoTypePropertyControlsDateTimeFormatting
     */
    timeFormat?: string;
    /**
     * Time zone region of the hotel.
     * @type {string}
     * @memberof HotelInfoTypePropertyControlsDateTimeFormatting
     */
    timeZoneRegion?: string;
}

/**
 * Check if a given object implements the HotelInfoTypePropertyControlsDateTimeFormatting interface.
 */
export function instanceOfHotelInfoTypePropertyControlsDateTimeFormatting(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelInfoTypePropertyControlsDateTimeFormattingFromJSON(json: any): HotelInfoTypePropertyControlsDateTimeFormatting {
    return HotelInfoTypePropertyControlsDateTimeFormattingFromJSONTyped(json, false);
}

export function HotelInfoTypePropertyControlsDateTimeFormattingFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelInfoTypePropertyControlsDateTimeFormatting {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'longDateFormat': !exists(json, 'longDateFormat') ? undefined : json['longDateFormat'],
        'shortDateFormat': !exists(json, 'shortDateFormat') ? undefined : json['shortDateFormat'],
        'timeFormat': !exists(json, 'timeFormat') ? undefined : json['timeFormat'],
        'timeZoneRegion': !exists(json, 'timeZoneRegion') ? undefined : json['timeZoneRegion'],
    };
}

export function HotelInfoTypePropertyControlsDateTimeFormattingToJSON(value?: HotelInfoTypePropertyControlsDateTimeFormatting | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'longDateFormat': value.longDateFormat,
        'shortDateFormat': value.shortDateFormat,
        'timeFormat': value.timeFormat,
        'timeZoneRegion': value.timeZoneRegion,
    };
}

