/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyExchangeRateType } from './CurrencyExchangeRateType';
import {
    CurrencyExchangeRateTypeFromJSON,
    CurrencyExchangeRateTypeFromJSONTyped,
    CurrencyExchangeRateTypeToJSON,
} from './CurrencyExchangeRateType';

/**
 * 
 * @export
 * @interface CurrencyExchangeRatesDetailsExchangeRatesInner
 */
export interface CurrencyExchangeRatesDetailsExchangeRatesInner {
    /**
     * Exchange Rate information for a currency code.
     * @type {Array<CurrencyExchangeRateType>}
     * @memberof CurrencyExchangeRatesDetailsExchangeRatesInner
     */
    exchangeInfo?: Array<CurrencyExchangeRateType>;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof CurrencyExchangeRatesDetailsExchangeRatesInner
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the CurrencyExchangeRatesDetailsExchangeRatesInner interface.
 */
export function instanceOfCurrencyExchangeRatesDetailsExchangeRatesInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrencyExchangeRatesDetailsExchangeRatesInnerFromJSON(json: any): CurrencyExchangeRatesDetailsExchangeRatesInner {
    return CurrencyExchangeRatesDetailsExchangeRatesInnerFromJSONTyped(json, false);
}

export function CurrencyExchangeRatesDetailsExchangeRatesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyExchangeRatesDetailsExchangeRatesInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exchangeInfo': !exists(json, 'exchangeInfo') ? undefined : ((json['exchangeInfo'] as Array<any>).map(CurrencyExchangeRateTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function CurrencyExchangeRatesDetailsExchangeRatesInnerToJSON(value?: CurrencyExchangeRatesDetailsExchangeRatesInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exchangeInfo': value.exchangeInfo === undefined ? undefined : ((value.exchangeInfo as Array<any>).map(CurrencyExchangeRateTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

