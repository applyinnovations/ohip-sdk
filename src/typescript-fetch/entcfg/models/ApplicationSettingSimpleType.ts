/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationSettingLevelType } from './ApplicationSettingLevelType';
import {
    ApplicationSettingLevelTypeFromJSON,
    ApplicationSettingLevelTypeFromJSONTyped,
    ApplicationSettingLevelTypeToJSON,
} from './ApplicationSettingLevelType';

/**
 * Internal settings that is mainly used to get a quick information on the type.
 * @export
 * @interface ApplicationSettingSimpleType
 */
export interface ApplicationSettingSimpleType {
    /**
     * This element is used for additional items (Key-Value-Pair) that has relevance to the operation.
     * @type {Array<ApplicationSettingSimpleType>}
     * @memberof ApplicationSettingSimpleType
     */
    configurations?: Array<ApplicationSettingSimpleType>;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingSimpleType
     */
    levelCode?: string;
    /**
     * 
     * @type {ApplicationSettingLevelType}
     * @memberof ApplicationSettingSimpleType
     */
    levelType?: ApplicationSettingLevelType;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingSimpleType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingSimpleType
     */
    value?: string;
}

/**
 * Check if a given object implements the ApplicationSettingSimpleType interface.
 */
export function instanceOfApplicationSettingSimpleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationSettingSimpleTypeFromJSON(json: any): ApplicationSettingSimpleType {
    return ApplicationSettingSimpleTypeFromJSONTyped(json, false);
}

export function ApplicationSettingSimpleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationSettingSimpleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configurations': !exists(json, 'configurations') ? undefined : ((json['configurations'] as Array<any>).map(ApplicationSettingSimpleTypeFromJSON)),
        'levelCode': !exists(json, 'levelCode') ? undefined : json['levelCode'],
        'levelType': !exists(json, 'levelType') ? undefined : ApplicationSettingLevelTypeFromJSON(json['levelType']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function ApplicationSettingSimpleTypeToJSON(value?: ApplicationSettingSimpleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configurations': value.configurations === undefined ? undefined : ((value.configurations as Array<any>).map(ApplicationSettingSimpleTypeToJSON)),
        'levelCode': value.levelCode,
        'levelType': ApplicationSettingLevelTypeToJSON(value.levelType),
        'name': value.name,
        'value': value.value,
    };
}

