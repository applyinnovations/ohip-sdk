/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Defines the Banquet and Meeting Area of the Hotel
 * @export
 * @interface HotelBanquetSpaceType
 */
export interface HotelBanquetSpaceType {
    /**
     * Defines the BanquetArea of the Hotel
     * @type {string}
     * @memberof HotelBanquetSpaceType
     */
    banquetArea?: string;
    /**
     * 
     * @type {number}
     * @memberof HotelBanquetSpaceType
     */
    banquetSeats?: number;
    /**
     * Defines the Meeting Area of the hotel
     * @type {number}
     * @memberof HotelBanquetSpaceType
     */
    meetingArea?: number;
    /**
     * 
     * @type {number}
     * @memberof HotelBanquetSpaceType
     */
    meetingRooms?: number;
    /**
     * The unit of measure in a code format.
     * @type {string}
     * @memberof HotelBanquetSpaceType
     */
    unitOfMeasureCode?: string;
}

/**
 * Check if a given object implements the HotelBanquetSpaceType interface.
 */
export function instanceOfHotelBanquetSpaceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelBanquetSpaceTypeFromJSON(json: any): HotelBanquetSpaceType {
    return HotelBanquetSpaceTypeFromJSONTyped(json, false);
}

export function HotelBanquetSpaceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelBanquetSpaceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'banquetArea': !exists(json, 'banquetArea') ? undefined : json['banquetArea'],
        'banquetSeats': !exists(json, 'banquetSeats') ? undefined : json['banquetSeats'],
        'meetingArea': !exists(json, 'meetingArea') ? undefined : json['meetingArea'],
        'meetingRooms': !exists(json, 'meetingRooms') ? undefined : json['meetingRooms'],
        'unitOfMeasureCode': !exists(json, 'unitOfMeasureCode') ? undefined : json['unitOfMeasureCode'],
    };
}

export function HotelBanquetSpaceTypeToJSON(value?: HotelBanquetSpaceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'banquetArea': value.banquetArea,
        'banquetSeats': value.banquetSeats,
        'meetingArea': value.meetingArea,
        'meetingRooms': value.meetingRooms,
        'unitOfMeasureCode': value.unitOfMeasureCode,
    };
}

