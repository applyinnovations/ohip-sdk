/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TemplateHotelDetailIDType } from './TemplateHotelDetailIDType';
import {
    TemplateHotelDetailIDTypeFromJSON,
    TemplateHotelDetailIDTypeFromJSONTyped,
    TemplateHotelDetailIDTypeToJSON,
} from './TemplateHotelDetailIDType';

/**
 * Instructions for copying template hotel details to hotel(s).
 * @export
 * @interface CopyHotelDetailsType
 */
export interface CopyHotelDetailsType {
    /**
     * 
     * @type {Array<string>}
     * @memberof CopyHotelDetailsType
     */
    hotels?: Array<string>;
    /**
     * Collection of template level hotel detail identifiers.
     * @type {Array<TemplateHotelDetailIDType>}
     * @memberof CopyHotelDetailsType
     */
    templateHotelDetails?: Array<TemplateHotelDetailIDType>;
}

/**
 * Check if a given object implements the CopyHotelDetailsType interface.
 */
export function instanceOfCopyHotelDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyHotelDetailsTypeFromJSON(json: any): CopyHotelDetailsType {
    return CopyHotelDetailsTypeFromJSONTyped(json, false);
}

export function CopyHotelDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyHotelDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotels': !exists(json, 'hotels') ? undefined : json['hotels'],
        'templateHotelDetails': !exists(json, 'templateHotelDetails') ? undefined : ((json['templateHotelDetails'] as Array<any>).map(TemplateHotelDetailIDTypeFromJSON)),
    };
}

export function CopyHotelDetailsTypeToJSON(value?: CopyHotelDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotels': value.hotels,
        'templateHotelDetails': value.templateHotelDetails === undefined ? undefined : ((value.templateHotelDetails as Array<any>).map(TemplateHotelDetailIDTypeToJSON)),
    };
}

