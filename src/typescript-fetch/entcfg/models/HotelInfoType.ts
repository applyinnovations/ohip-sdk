/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AlternateHotelType } from './AlternateHotelType';
import {
    AlternateHotelTypeFromJSON,
    AlternateHotelTypeFromJSONTyped,
    AlternateHotelTypeToJSON,
} from './AlternateHotelType';
import type { CommentInfoType } from './CommentInfoType';
import {
    CommentInfoTypeFromJSON,
    CommentInfoTypeFromJSONTyped,
    CommentInfoTypeToJSON,
} from './CommentInfoType';
import type { HotelAttractionType } from './HotelAttractionType';
import {
    HotelAttractionTypeFromJSON,
    HotelAttractionTypeFromJSONTyped,
    HotelAttractionTypeToJSON,
} from './HotelAttractionType';
import type { HotelContactType } from './HotelContactType';
import {
    HotelContactTypeFromJSON,
    HotelContactTypeFromJSONTyped,
    HotelContactTypeToJSON,
} from './HotelContactType';
import type { HotelCorporateInformationsType } from './HotelCorporateInformationsType';
import {
    HotelCorporateInformationsTypeFromJSON,
    HotelCorporateInformationsTypeFromJSONTyped,
    HotelCorporateInformationsTypeToJSON,
} from './HotelCorporateInformationsType';
import type { HotelEventSpacesType } from './HotelEventSpacesType';
import {
    HotelEventSpacesTypeFromJSON,
    HotelEventSpacesTypeFromJSONTyped,
    HotelEventSpacesTypeToJSON,
} from './HotelEventSpacesType';
import type { HotelInfoTypeAccommodationDetails } from './HotelInfoTypeAccommodationDetails';
import {
    HotelInfoTypeAccommodationDetailsFromJSON,
    HotelInfoTypeAccommodationDetailsFromJSONTyped,
    HotelInfoTypeAccommodationDetailsToJSON,
} from './HotelInfoTypeAccommodationDetails';
import type { HotelInfoTypeAddress } from './HotelInfoTypeAddress';
import {
    HotelInfoTypeAddressFromJSON,
    HotelInfoTypeAddressFromJSONTyped,
    HotelInfoTypeAddressToJSON,
} from './HotelInfoTypeAddress';
import type { HotelInfoTypeCommunication } from './HotelInfoTypeCommunication';
import {
    HotelInfoTypeCommunicationFromJSON,
    HotelInfoTypeCommunicationFromJSONTyped,
    HotelInfoTypeCommunicationToJSON,
} from './HotelInfoTypeCommunication';
import type { HotelInfoTypeGeneralInformation } from './HotelInfoTypeGeneralInformation';
import {
    HotelInfoTypeGeneralInformationFromJSON,
    HotelInfoTypeGeneralInformationFromJSONTyped,
    HotelInfoTypeGeneralInformationToJSON,
} from './HotelInfoTypeGeneralInformation';
import type { HotelInfoTypePrimaryDetails } from './HotelInfoTypePrimaryDetails';
import {
    HotelInfoTypePrimaryDetailsFromJSON,
    HotelInfoTypePrimaryDetailsFromJSONTyped,
    HotelInfoTypePrimaryDetailsToJSON,
} from './HotelInfoTypePrimaryDetails';
import type { HotelInfoTypePropertyControls } from './HotelInfoTypePropertyControls';
import {
    HotelInfoTypePropertyControlsFromJSON,
    HotelInfoTypePropertyControlsFromJSONTyped,
    HotelInfoTypePropertyControlsToJSON,
} from './HotelInfoTypePropertyControls';
import type { HotelRateRangeType } from './HotelRateRangeType';
import {
    HotelRateRangeTypeFromJSON,
    HotelRateRangeTypeFromJSONTyped,
    HotelRateRangeTypeToJSON,
} from './HotelRateRangeType';
import type { HotelRestaurantType } from './HotelRestaurantType';
import {
    HotelRestaurantTypeFromJSON,
    HotelRestaurantTypeFromJSONTyped,
    HotelRestaurantTypeToJSON,
} from './HotelRestaurantType';
import type { MeetingRoomType } from './MeetingRoomType';
import {
    MeetingRoomTypeFromJSON,
    MeetingRoomTypeFromJSONTyped,
    MeetingRoomTypeToJSON,
} from './MeetingRoomType';

/**
 * Contains the basic configuration information about a Hotel.
 * @export
 * @interface HotelInfoType
 */
export interface HotelInfoType {
    /**
     * 
     * @type {HotelInfoTypePrimaryDetails}
     * @memberof HotelInfoType
     */
    primaryDetails?: HotelInfoTypePrimaryDetails;
    /**
     * 
     * @type {HotelInfoTypeGeneralInformation}
     * @memberof HotelInfoType
     */
    generalInformation?: HotelInfoTypeGeneralInformation;
    /**
     * 
     * @type {HotelInfoTypeAccommodationDetails}
     * @memberof HotelInfoType
     */
    accommodationDetails?: HotelInfoTypeAccommodationDetails;
    /**
     * 
     * @type {HotelInfoTypePropertyControls}
     * @memberof HotelInfoType
     */
    propertyControls?: HotelInfoTypePropertyControls;
    /**
     * 
     * @type {HotelInfoTypeCommunication}
     * @memberof HotelInfoType
     */
    communication?: HotelInfoTypeCommunication;
    /**
     * 
     * @type {HotelInfoTypeAddress}
     * @memberof HotelInfoType
     */
    address?: HotelInfoTypeAddress;
    /**
     * 
     * @type {Array<HotelRestaurantType>}
     * @memberof HotelInfoType
     */
    hotelRestaurants?: Array<HotelRestaurantType>;
    /**
     * Lists of rate ranges of the hotel.
     * @type {Array<HotelRateRangeType>}
     * @memberof HotelInfoType
     */
    hotelRateRanges?: Array<HotelRateRangeType>;
    /**
     * 
     * @type {Array<AlternateHotelType>}
     * @memberof HotelInfoType
     */
    alternateHotels?: Array<AlternateHotelType>;
    /**
     * Lists of contacts of the hotel.
     * @type {Array<HotelContactType>}
     * @memberof HotelInfoType
     */
    hotelContacts?: Array<HotelContactType>;
    /**
     * 
     * @type {HotelEventSpacesType}
     * @memberof HotelInfoType
     */
    hotelEventSpaces?: HotelEventSpacesType;
    /**
     * List of Notes of the hotel.
     * @type {Array<CommentInfoType>}
     * @memberof HotelInfoType
     */
    hotelNotes?: Array<CommentInfoType>;
    /**
     * 
     * @type {HotelCorporateInformationsType}
     * @memberof HotelInfoType
     */
    hotelCorporateInformations?: HotelCorporateInformationsType;
    /**
     * 
     * @type {Array<HotelAttractionType>}
     * @memberof HotelInfoType
     */
    attractions?: Array<HotelAttractionType>;
    /**
     * List of meeting rooms of the hotel.
     * @type {Array<MeetingRoomType>}
     * @memberof HotelInfoType
     */
    meetingRooms?: Array<MeetingRoomType>;
    /**
     * The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
     * @type {string}
     * @memberof HotelInfoType
     */
    chainCode?: string;
    /**
     * The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
     * @type {string}
     * @memberof HotelInfoType
     */
    hotelId?: string;
    /**
     * The IATA city code; for example DCA, ORD.
     * @type {string}
     * @memberof HotelInfoType
     */
    hotelCityCode?: string;
    /**
     * A text field used to communicate the proper name of the hotel.
     * @type {string}
     * @memberof HotelInfoType
     */
    hotelName?: string;
    /**
     * A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
     * @type {string}
     * @memberof HotelInfoType
     */
    hotelCodeContext?: string;
    /**
     * The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
     * @type {string}
     * @memberof HotelInfoType
     */
    chainName?: string;
}

/**
 * Check if a given object implements the HotelInfoType interface.
 */
export function instanceOfHotelInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelInfoTypeFromJSON(json: any): HotelInfoType {
    return HotelInfoTypeFromJSONTyped(json, false);
}

export function HotelInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'primaryDetails': !exists(json, 'primaryDetails') ? undefined : HotelInfoTypePrimaryDetailsFromJSON(json['primaryDetails']),
        'generalInformation': !exists(json, 'generalInformation') ? undefined : HotelInfoTypeGeneralInformationFromJSON(json['generalInformation']),
        'accommodationDetails': !exists(json, 'accommodationDetails') ? undefined : HotelInfoTypeAccommodationDetailsFromJSON(json['accommodationDetails']),
        'propertyControls': !exists(json, 'propertyControls') ? undefined : HotelInfoTypePropertyControlsFromJSON(json['propertyControls']),
        'communication': !exists(json, 'communication') ? undefined : HotelInfoTypeCommunicationFromJSON(json['communication']),
        'address': !exists(json, 'address') ? undefined : HotelInfoTypeAddressFromJSON(json['address']),
        'hotelRestaurants': !exists(json, 'hotelRestaurants') ? undefined : ((json['hotelRestaurants'] as Array<any>).map(HotelRestaurantTypeFromJSON)),
        'hotelRateRanges': !exists(json, 'hotelRateRanges') ? undefined : ((json['hotelRateRanges'] as Array<any>).map(HotelRateRangeTypeFromJSON)),
        'alternateHotels': !exists(json, 'alternateHotels') ? undefined : ((json['alternateHotels'] as Array<any>).map(AlternateHotelTypeFromJSON)),
        'hotelContacts': !exists(json, 'hotelContacts') ? undefined : ((json['hotelContacts'] as Array<any>).map(HotelContactTypeFromJSON)),
        'hotelEventSpaces': !exists(json, 'hotelEventSpaces') ? undefined : HotelEventSpacesTypeFromJSON(json['hotelEventSpaces']),
        'hotelNotes': !exists(json, 'hotelNotes') ? undefined : ((json['hotelNotes'] as Array<any>).map(CommentInfoTypeFromJSON)),
        'hotelCorporateInformations': !exists(json, 'hotelCorporateInformations') ? undefined : HotelCorporateInformationsTypeFromJSON(json['hotelCorporateInformations']),
        'attractions': !exists(json, 'attractions') ? undefined : ((json['attractions'] as Array<any>).map(HotelAttractionTypeFromJSON)),
        'meetingRooms': !exists(json, 'meetingRooms') ? undefined : ((json['meetingRooms'] as Array<any>).map(MeetingRoomTypeFromJSON)),
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelCityCode': !exists(json, 'hotelCityCode') ? undefined : json['hotelCityCode'],
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'hotelCodeContext': !exists(json, 'hotelCodeContext') ? undefined : json['hotelCodeContext'],
        'chainName': !exists(json, 'chainName') ? undefined : json['chainName'],
    };
}

export function HotelInfoTypeToJSON(value?: HotelInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'primaryDetails': HotelInfoTypePrimaryDetailsToJSON(value.primaryDetails),
        'generalInformation': HotelInfoTypeGeneralInformationToJSON(value.generalInformation),
        'accommodationDetails': HotelInfoTypeAccommodationDetailsToJSON(value.accommodationDetails),
        'propertyControls': HotelInfoTypePropertyControlsToJSON(value.propertyControls),
        'communication': HotelInfoTypeCommunicationToJSON(value.communication),
        'address': HotelInfoTypeAddressToJSON(value.address),
        'hotelRestaurants': value.hotelRestaurants === undefined ? undefined : ((value.hotelRestaurants as Array<any>).map(HotelRestaurantTypeToJSON)),
        'hotelRateRanges': value.hotelRateRanges === undefined ? undefined : ((value.hotelRateRanges as Array<any>).map(HotelRateRangeTypeToJSON)),
        'alternateHotels': value.alternateHotels === undefined ? undefined : ((value.alternateHotels as Array<any>).map(AlternateHotelTypeToJSON)),
        'hotelContacts': value.hotelContacts === undefined ? undefined : ((value.hotelContacts as Array<any>).map(HotelContactTypeToJSON)),
        'hotelEventSpaces': HotelEventSpacesTypeToJSON(value.hotelEventSpaces),
        'hotelNotes': value.hotelNotes === undefined ? undefined : ((value.hotelNotes as Array<any>).map(CommentInfoTypeToJSON)),
        'hotelCorporateInformations': HotelCorporateInformationsTypeToJSON(value.hotelCorporateInformations),
        'attractions': value.attractions === undefined ? undefined : ((value.attractions as Array<any>).map(HotelAttractionTypeToJSON)),
        'meetingRooms': value.meetingRooms === undefined ? undefined : ((value.meetingRooms as Array<any>).map(MeetingRoomTypeToJSON)),
        'chainCode': value.chainCode,
        'hotelId': value.hotelId,
        'hotelCityCode': value.hotelCityCode,
        'hotelName': value.hotelName,
        'hotelCodeContext': value.hotelCodeContext,
        'chainName': value.chainName,
    };
}

