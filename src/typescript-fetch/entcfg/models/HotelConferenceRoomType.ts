/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the Conference rooms in the hotel.
 * @export
 * @interface HotelConferenceRoomType
 */
export interface HotelConferenceRoomType {
    /**
     * 
     * @type {string}
     * @memberof HotelConferenceRoomType
     */
    roomCode?: string;
    /**
     * The name of the Restaurant.
     * @type {string}
     * @memberof HotelConferenceRoomType
     */
    roomName?: string;
    /**
     * The Type of Restaurant.
     * @type {string}
     * @memberof HotelConferenceRoomType
     */
    roomType?: string;
}

/**
 * Check if a given object implements the HotelConferenceRoomType interface.
 */
export function instanceOfHotelConferenceRoomType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelConferenceRoomTypeFromJSON(json: any): HotelConferenceRoomType {
    return HotelConferenceRoomTypeFromJSONTyped(json, false);
}

export function HotelConferenceRoomTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelConferenceRoomType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomCode': !exists(json, 'roomCode') ? undefined : json['roomCode'],
        'roomName': !exists(json, 'roomName') ? undefined : json['roomName'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
    };
}

export function HotelConferenceRoomTypeToJSON(value?: HotelConferenceRoomType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomCode': value.roomCode,
        'roomName': value.roomName,
        'roomType': value.roomType,
    };
}

