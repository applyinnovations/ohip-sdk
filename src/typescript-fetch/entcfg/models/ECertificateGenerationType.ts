/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * E-Certificates details.
 * @export
 * @interface ECertificateGenerationType
 */
export interface ECertificateGenerationType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ECertificateGenerationType
     */
    ruleId?: UniqueIDType;
    /**
     * Reason for which e-certificate was generated.
     * @type {string}
     * @memberof ECertificateGenerationType
     */
    generationDetail?: string;
    /**
     * Type of value that is in the certificate.valid values are membership_level.
     * @type {string}
     * @memberof ECertificateGenerationType
     */
    referenceValue?: string;
}

/**
 * Check if a given object implements the ECertificateGenerationType interface.
 */
export function instanceOfECertificateGenerationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ECertificateGenerationTypeFromJSON(json: any): ECertificateGenerationType {
    return ECertificateGenerationTypeFromJSONTyped(json, false);
}

export function ECertificateGenerationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ECertificateGenerationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ruleId': !exists(json, 'ruleId') ? undefined : UniqueIDTypeFromJSON(json['ruleId']),
        'generationDetail': !exists(json, 'generationDetail') ? undefined : json['generationDetail'],
        'referenceValue': !exists(json, 'referenceValue') ? undefined : json['referenceValue'],
    };
}

export function ECertificateGenerationTypeToJSON(value?: ECertificateGenerationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ruleId': UniqueIDTypeToJSON(value.ruleId),
        'generationDetail': value.generationDetail,
        'referenceValue': value.referenceValue,
    };
}

