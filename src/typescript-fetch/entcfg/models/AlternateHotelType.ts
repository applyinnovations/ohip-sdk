/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddressType } from './AddressType';
import {
    AddressTypeFromJSON,
    AddressTypeFromJSONTyped,
    AddressTypeToJSON,
} from './AddressType';
import type { ChannelSummaryInfoType } from './ChannelSummaryInfoType';
import {
    ChannelSummaryInfoTypeFromJSON,
    ChannelSummaryInfoTypeFromJSONTyped,
    ChannelSummaryInfoTypeToJSON,
} from './ChannelSummaryInfoType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { CurrencyExchangeRateType } from './CurrencyExchangeRateType';
import {
    CurrencyExchangeRateTypeFromJSON,
    CurrencyExchangeRateTypeFromJSONTyped,
    CurrencyExchangeRateTypeToJSON,
} from './CurrencyExchangeRateType';
import type { HotelAmenityType } from './HotelAmenityType';
import {
    HotelAmenityTypeFromJSON,
    HotelAmenityTypeFromJSONTyped,
    HotelAmenityTypeToJSON,
} from './HotelAmenityType';
import type { RateRoomDetailsType } from './RateRoomDetailsType';
import {
    RateRoomDetailsTypeFromJSON,
    RateRoomDetailsTypeFromJSONTyped,
    RateRoomDetailsTypeToJSON,
} from './RateRoomDetailsType';
import type { RelativePositionType } from './RelativePositionType';
import {
    RelativePositionTypeFromJSON,
    RelativePositionTypeFromJSONTyped,
    RelativePositionTypeToJSON,
} from './RelativePositionType';
import type { SellMessagesType } from './SellMessagesType';
import {
    SellMessagesTypeFromJSON,
    SellMessagesTypeFromJSONTyped,
    SellMessagesTypeToJSON,
} from './SellMessagesType';
import type { TelephoneType } from './TelephoneType';
import {
    TelephoneTypeFromJSON,
    TelephoneTypeFromJSONTyped,
    TelephoneTypeToJSON,
} from './TelephoneType';

/**
 * 
 * @export
 * @interface AlternateHotelType
 */
export interface AlternateHotelType {
    /**
     * 
     * @type {AddressType}
     * @memberof AlternateHotelType
     */
    address?: AddressType;
    /**
     * 
     * @type {Array<TelephoneType>}
     * @memberof AlternateHotelType
     */
    contactNumbers?: Array<TelephoneType>;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AlternateHotelType
     */
    minRate?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AlternateHotelType
     */
    maxRate?: CurrencyAmountType;
    /**
     * 
     * @type {RelativePositionType}
     * @memberof AlternateHotelType
     */
    relativePosition?: RelativePositionType;
    /**
     * 
     * @type {Array<HotelAmenityType>}
     * @memberof AlternateHotelType
     */
    hotelAmenities?: Array<HotelAmenityType>;
    /**
     * True if the hotel has any scheduled events within the requested date range.
     * @type {boolean}
     * @memberof AlternateHotelType
     */
    event?: boolean;
    /**
     * 
     * @type {RateRoomDetailsType}
     * @memberof AlternateHotelType
     */
    rateRoomDetails?: RateRoomDetailsType;
    /**
     * 
     * @type {ChannelSummaryInfoType}
     * @memberof AlternateHotelType
     */
    channelSummaryInfo?: ChannelSummaryInfoType;
    /**
     * 
     * @type {SellMessagesType}
     * @memberof AlternateHotelType
     */
    sellMessages?: SellMessagesType;
    /**
     * Exchange Rate information for a currency code.
     * @type {Array<CurrencyExchangeRateType>}
     * @memberof AlternateHotelType
     */
    currencyExchangeRates?: Array<CurrencyExchangeRateType>;
    /**
     * The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.
     * @type {string}
     * @memberof AlternateHotelType
     */
    chainCode?: string;
    /**
     * The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.
     * @type {string}
     * @memberof AlternateHotelType
     */
    hotelId?: string;
    /**
     * The IATA city code; for example DCA, ORD.
     * @type {string}
     * @memberof AlternateHotelType
     */
    hotelCityCode?: string;
    /**
     * A text field used to communicate the proper name of the hotel.
     * @type {string}
     * @memberof AlternateHotelType
     */
    hotelName?: string;
    /**
     * A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.
     * @type {string}
     * @memberof AlternateHotelType
     */
    hotelCodeContext?: string;
    /**
     * The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).
     * @type {string}
     * @memberof AlternateHotelType
     */
    chainName?: string;
    /**
     * 
     * @type {string}
     * @memberof AlternateHotelType
     */
    hotelType?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AlternateHotelType
     */
    negotiated?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AlternateHotelType
     */
    alternate?: boolean;
    /**
     * 
     * @type {number}
     * @memberof AlternateHotelType
     */
    displayOrder?: number;
    /**
     * 
     * @type {number}
     * @memberof AlternateHotelType
     */
    inventoryRooms?: number;
    /**
     * 
     * @type {number}
     * @memberof AlternateHotelType
     */
    availableRooms?: number;
    /**
     * Comments of alternate Hotel.
     * @type {string}
     * @memberof AlternateHotelType
     */
    comments?: string;
    /**
     * Compass direction to the attraction from the hotel (North/South, etc).
     * @type {string}
     * @memberof AlternateHotelType
     */
    direction?: string;
    /**
     * whether the alternate relationship should be applied to the alternate hotel as well. If this flag is true, not only will the AlternateHotelCode hotel be an alternate for HotelCode hotel, but HotelCode hotel will also be an alternate for AlternateHotelCode hotel.
     * @type {boolean}
     * @memberof AlternateHotelType
     */
    reciprocalRelationship?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlternateHotelType
     */
    alternateHotelCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AlternateHotelType
     */
    newAlternateHotelCode?: string;
}

/**
 * Check if a given object implements the AlternateHotelType interface.
 */
export function instanceOfAlternateHotelType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AlternateHotelTypeFromJSON(json: any): AlternateHotelType {
    return AlternateHotelTypeFromJSONTyped(json, false);
}

export function AlternateHotelTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AlternateHotelType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : AddressTypeFromJSON(json['address']),
        'contactNumbers': !exists(json, 'contactNumbers') ? undefined : ((json['contactNumbers'] as Array<any>).map(TelephoneTypeFromJSON)),
        'minRate': !exists(json, 'minRate') ? undefined : CurrencyAmountTypeFromJSON(json['minRate']),
        'maxRate': !exists(json, 'maxRate') ? undefined : CurrencyAmountTypeFromJSON(json['maxRate']),
        'relativePosition': !exists(json, 'relativePosition') ? undefined : RelativePositionTypeFromJSON(json['relativePosition']),
        'hotelAmenities': !exists(json, 'hotelAmenities') ? undefined : ((json['hotelAmenities'] as Array<any>).map(HotelAmenityTypeFromJSON)),
        'event': !exists(json, 'event') ? undefined : json['event'],
        'rateRoomDetails': !exists(json, 'rateRoomDetails') ? undefined : RateRoomDetailsTypeFromJSON(json['rateRoomDetails']),
        'channelSummaryInfo': !exists(json, 'channelSummaryInfo') ? undefined : ChannelSummaryInfoTypeFromJSON(json['channelSummaryInfo']),
        'sellMessages': !exists(json, 'sellMessages') ? undefined : SellMessagesTypeFromJSON(json['sellMessages']),
        'currencyExchangeRates': !exists(json, 'currencyExchangeRates') ? undefined : ((json['currencyExchangeRates'] as Array<any>).map(CurrencyExchangeRateTypeFromJSON)),
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelCityCode': !exists(json, 'hotelCityCode') ? undefined : json['hotelCityCode'],
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'hotelCodeContext': !exists(json, 'hotelCodeContext') ? undefined : json['hotelCodeContext'],
        'chainName': !exists(json, 'chainName') ? undefined : json['chainName'],
        'hotelType': !exists(json, 'hotelType') ? undefined : json['hotelType'],
        'negotiated': !exists(json, 'negotiated') ? undefined : json['negotiated'],
        'alternate': !exists(json, 'alternate') ? undefined : json['alternate'],
        'displayOrder': !exists(json, 'displayOrder') ? undefined : json['displayOrder'],
        'inventoryRooms': !exists(json, 'inventoryRooms') ? undefined : json['inventoryRooms'],
        'availableRooms': !exists(json, 'availableRooms') ? undefined : json['availableRooms'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'direction': !exists(json, 'direction') ? undefined : json['direction'],
        'reciprocalRelationship': !exists(json, 'reciprocalRelationship') ? undefined : json['reciprocalRelationship'],
        'alternateHotelCode': !exists(json, 'alternateHotelCode') ? undefined : json['alternateHotelCode'],
        'newAlternateHotelCode': !exists(json, 'newAlternateHotelCode') ? undefined : json['newAlternateHotelCode'],
    };
}

export function AlternateHotelTypeToJSON(value?: AlternateHotelType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': AddressTypeToJSON(value.address),
        'contactNumbers': value.contactNumbers === undefined ? undefined : ((value.contactNumbers as Array<any>).map(TelephoneTypeToJSON)),
        'minRate': CurrencyAmountTypeToJSON(value.minRate),
        'maxRate': CurrencyAmountTypeToJSON(value.maxRate),
        'relativePosition': RelativePositionTypeToJSON(value.relativePosition),
        'hotelAmenities': value.hotelAmenities === undefined ? undefined : ((value.hotelAmenities as Array<any>).map(HotelAmenityTypeToJSON)),
        'event': value.event,
        'rateRoomDetails': RateRoomDetailsTypeToJSON(value.rateRoomDetails),
        'channelSummaryInfo': ChannelSummaryInfoTypeToJSON(value.channelSummaryInfo),
        'sellMessages': SellMessagesTypeToJSON(value.sellMessages),
        'currencyExchangeRates': value.currencyExchangeRates === undefined ? undefined : ((value.currencyExchangeRates as Array<any>).map(CurrencyExchangeRateTypeToJSON)),
        'chainCode': value.chainCode,
        'hotelId': value.hotelId,
        'hotelCityCode': value.hotelCityCode,
        'hotelName': value.hotelName,
        'hotelCodeContext': value.hotelCodeContext,
        'chainName': value.chainName,
        'hotelType': value.hotelType,
        'negotiated': value.negotiated,
        'alternate': value.alternate,
        'displayOrder': value.displayOrder,
        'inventoryRooms': value.inventoryRooms,
        'availableRooms': value.availableRooms,
        'comments': value.comments,
        'direction': value.direction,
        'reciprocalRelationship': value.reciprocalRelationship,
        'alternateHotelCode': value.alternateHotelCode,
        'newAlternateHotelCode': value.newAlternateHotelCode,
    };
}

