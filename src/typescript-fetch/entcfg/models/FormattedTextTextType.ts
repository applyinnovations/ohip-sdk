/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Provides text and indicates whether it is formatted or not.
 * @export
 * @interface FormattedTextTextType
 */
export interface FormattedTextTextType {
    /**
     * Property Value
     * @type {string}
     * @memberof FormattedTextTextType
     */
    value?: string;
    /**
     * Language identification.
     * @type {string}
     * @memberof FormattedTextTextType
     */
    language?: string;
}

/**
 * Check if a given object implements the FormattedTextTextType interface.
 */
export function instanceOfFormattedTextTextType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FormattedTextTextTypeFromJSON(json: any): FormattedTextTextType {
    return FormattedTextTextTypeFromJSONTyped(json, false);
}

export function FormattedTextTextTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormattedTextTextType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': !exists(json, 'value') ? undefined : json['value'],
        'language': !exists(json, 'language') ? undefined : json['language'],
    };
}

export function FormattedTextTextTypeToJSON(value?: FormattedTextTextType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'language': value.language,
    };
}

