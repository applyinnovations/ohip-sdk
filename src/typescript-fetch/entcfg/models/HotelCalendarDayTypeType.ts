/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ColorType } from './ColorType';
import {
    ColorTypeFromJSON,
    ColorTypeFromJSONTyped,
    ColorTypeToJSON,
} from './ColorType';

/**
 * Details of Day Type.
 * @export
 * @interface HotelCalendarDayTypeType
 */
export interface HotelCalendarDayTypeType {
    /**
     * Code of the Day Type
     * @type {string}
     * @memberof HotelCalendarDayTypeType
     */
    code?: string;
    /**
     * Description of the Day Type.
     * @type {string}
     * @memberof HotelCalendarDayTypeType
     */
    description?: string;
    /**
     * 
     * @type {ColorType}
     * @memberof HotelCalendarDayTypeType
     */
    color?: ColorType;
}

/**
 * Check if a given object implements the HotelCalendarDayTypeType interface.
 */
export function instanceOfHotelCalendarDayTypeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelCalendarDayTypeTypeFromJSON(json: any): HotelCalendarDayTypeType {
    return HotelCalendarDayTypeTypeFromJSONTyped(json, false);
}

export function HotelCalendarDayTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelCalendarDayTypeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'color': !exists(json, 'color') ? undefined : ColorTypeFromJSON(json['color']),
    };
}

export function HotelCalendarDayTypeTypeToJSON(value?: HotelCalendarDayTypeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'color': ColorTypeToJSON(value.color),
    };
}

