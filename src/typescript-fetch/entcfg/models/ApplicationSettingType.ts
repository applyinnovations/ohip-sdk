/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationSettingConversionType } from './ApplicationSettingConversionType';
import {
    ApplicationSettingConversionTypeFromJSON,
    ApplicationSettingConversionTypeFromJSONTyped,
    ApplicationSettingConversionTypeToJSON,
} from './ApplicationSettingConversionType';
import type { ApplicationSettingLevelType } from './ApplicationSettingLevelType';
import {
    ApplicationSettingLevelTypeFromJSON,
    ApplicationSettingLevelTypeFromJSONTyped,
    ApplicationSettingLevelTypeToJSON,
} from './ApplicationSettingLevelType';
import type { ApplicationSettingTypeType } from './ApplicationSettingTypeType';
import {
    ApplicationSettingTypeTypeFromJSON,
    ApplicationSettingTypeTypeFromJSONTyped,
    ApplicationSettingTypeTypeToJSON,
} from './ApplicationSettingTypeType';
import type { BaseApplicationSettingType } from './BaseApplicationSettingType';
import {
    BaseApplicationSettingTypeFromJSON,
    BaseApplicationSettingTypeFromJSONTyped,
    BaseApplicationSettingTypeToJSON,
} from './BaseApplicationSettingType';

/**
 * Internal settings that can be of a certain valueType.
 * @export
 * @interface ApplicationSettingType
 */
export interface ApplicationSettingType {
    /**
     * 
     * @type {ApplicationSettingConversionType}
     * @memberof ApplicationSettingType
     */
    conversionType?: ApplicationSettingConversionType;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationSettingType
     */
    editAllowed?: boolean;
    /**
     * Each configuration item will come with a HotelCode which will help the configuration to specify what context the update has to be. Eg. _Global,ORS,'CRO', etc.
     * @type {string}
     * @memberof ApplicationSettingType
     */
    hotelId?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    levelCode?: string;
    /**
     * 
     * @type {ApplicationSettingLevelType}
     * @memberof ApplicationSettingType
     */
    levelType?: ApplicationSettingLevelType;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    scope?: ApplicationSettingTypeScopeEnum;
    /**
     * 
     * @type {number}
     * @memberof ApplicationSettingType
     */
    sequence?: number;
    /**
     * 
     * @type {Array<BaseApplicationSettingType>}
     * @memberof ApplicationSettingType
     */
    settings?: Array<BaseApplicationSettingType>;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    shortDescription?: string;
    /**
     * 
     * @type {ApplicationSettingTypeType}
     * @memberof ApplicationSettingType
     */
    type?: ApplicationSettingTypeType;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSettingType
     */
    valueType?: ApplicationSettingTypeValueTypeEnum;
    /**
     * A flag which indicate whether a wild card search should be made.
     * @type {boolean}
     * @memberof ApplicationSettingType
     */
    wildCardMatch?: boolean;
}


/**
 * @export
 */
export const ApplicationSettingTypeScopeEnum = {
    P: 'P',
    G: 'G',
    Ch: 'Ch',
    C: 'C'
} as const;
export type ApplicationSettingTypeScopeEnum = typeof ApplicationSettingTypeScopeEnum[keyof typeof ApplicationSettingTypeScopeEnum];

/**
 * @export
 */
export const ApplicationSettingTypeValueTypeEnum = {
    Yn: 'Yn',
    Integer: 'Integer',
    String: 'String',
    SingleSelectLov: 'SingleSelectLov',
    MultiSelectLov: 'MultiSelectLov',
    ShuttleLov: 'ShuttleLov',
    Custom: 'Custom',
    Double: 'Double',
    Secure: 'Secure'
} as const;
export type ApplicationSettingTypeValueTypeEnum = typeof ApplicationSettingTypeValueTypeEnum[keyof typeof ApplicationSettingTypeValueTypeEnum];


/**
 * Check if a given object implements the ApplicationSettingType interface.
 */
export function instanceOfApplicationSettingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationSettingTypeFromJSON(json: any): ApplicationSettingType {
    return ApplicationSettingTypeFromJSONTyped(json, false);
}

export function ApplicationSettingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationSettingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conversionType': !exists(json, 'conversionType') ? undefined : ApplicationSettingConversionTypeFromJSON(json['conversionType']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'editAllowed': !exists(json, 'editAllowed') ? undefined : json['editAllowed'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'levelCode': !exists(json, 'levelCode') ? undefined : json['levelCode'],
        'levelType': !exists(json, 'levelType') ? undefined : ApplicationSettingLevelTypeFromJSON(json['levelType']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'settings': !exists(json, 'settings') ? undefined : ((json['settings'] as Array<any>).map(BaseApplicationSettingTypeFromJSON)),
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'type': !exists(json, 'type') ? undefined : ApplicationSettingTypeTypeFromJSON(json['type']),
        'value': !exists(json, 'value') ? undefined : json['value'],
        'valueType': !exists(json, 'valueType') ? undefined : json['valueType'],
        'wildCardMatch': !exists(json, 'wildCardMatch') ? undefined : json['wildCardMatch'],
    };
}

export function ApplicationSettingTypeToJSON(value?: ApplicationSettingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conversionType': ApplicationSettingConversionTypeToJSON(value.conversionType),
        'description': value.description,
        'displayName': value.displayName,
        'editAllowed': value.editAllowed,
        'hotelId': value.hotelId,
        'levelCode': value.levelCode,
        'levelType': ApplicationSettingLevelTypeToJSON(value.levelType),
        'name': value.name,
        'scope': value.scope,
        'sequence': value.sequence,
        'settings': value.settings === undefined ? undefined : ((value.settings as Array<any>).map(BaseApplicationSettingTypeToJSON)),
        'shortDescription': value.shortDescription,
        'type': ApplicationSettingTypeTypeToJSON(value.type),
        'value': value.value,
        'valueType': value.valueType,
        'wildCardMatch': value.wildCardMatch,
    };
}

