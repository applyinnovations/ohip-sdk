/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This provides information for a channel negotiated rate.
 * @export
 * @interface GdsNegotiatedInfoType
 */
export interface GdsNegotiatedInfoType {
    /**
     * The GDS negotiated rate code.
     * @type {string}
     * @memberof GdsNegotiatedInfoType
     */
    accessCode?: string;
    /**
     * The sell order.
     * @type {number}
     * @memberof GdsNegotiatedInfoType
     */
    order?: number;
    /**
     * The GDS Negotiated Rate is inactive or not
     * @type {boolean}
     * @memberof GdsNegotiatedInfoType
     */
    inactive?: boolean;
    /**
     * The starting value of the date range.
     * @type {string}
     * @memberof GdsNegotiatedInfoType
     */
    start?: string;
    /**
     * The ending value of the date range.
     * @type {string}
     * @memberof GdsNegotiatedInfoType
     */
    end?: string;
}

/**
 * Check if a given object implements the GdsNegotiatedInfoType interface.
 */
export function instanceOfGdsNegotiatedInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GdsNegotiatedInfoTypeFromJSON(json: any): GdsNegotiatedInfoType {
    return GdsNegotiatedInfoTypeFromJSONTyped(json, false);
}

export function GdsNegotiatedInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GdsNegotiatedInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessCode': !exists(json, 'accessCode') ? undefined : json['accessCode'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'start': !exists(json, 'start') ? undefined : json['start'],
        'end': !exists(json, 'end') ? undefined : json['end'],
    };
}

export function GdsNegotiatedInfoTypeToJSON(value?: GdsNegotiatedInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessCode': value.accessCode,
        'order': value.order,
        'inactive': value.inactive,
        'start': value.start,
        'end': value.end,
    };
}

