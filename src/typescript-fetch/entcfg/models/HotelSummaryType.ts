/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A brief summary of information about a hotel.
 * @export
 * @interface HotelSummaryType
 */
export interface HotelSummaryType {
    /**
     * Code identifying the hotel.
     * @type {string}
     * @memberof HotelSummaryType
     */
    hotelId?: string;
    /**
     * The name of the hotel.
     * @type {string}
     * @memberof HotelSummaryType
     */
    hotelName?: string;
    /**
     * Date when the hotel becomes valid for use.
     * @type {string}
     * @memberof HotelSummaryType
     */
    activeDate?: string;
    /**
     * Date when the hotel becomes invalid for use.
     * @type {string}
     * @memberof HotelSummaryType
     */
    inactiveDate?: string;
    /**
     * Hotels Chain Code. This attribute uniquely assign Hotel to a single chain.
     * @type {string}
     * @memberof HotelSummaryType
     */
    chainCode?: string;
    /**
     * Property Type Description. The property type defined for the hotel
     * @type {string}
     * @memberof HotelSummaryType
     */
    propertyType?: string;
}

/**
 * Check if a given object implements the HotelSummaryType interface.
 */
export function instanceOfHotelSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelSummaryTypeFromJSON(json: any): HotelSummaryType {
    return HotelSummaryTypeFromJSONTyped(json, false);
}

export function HotelSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'activeDate': !exists(json, 'activeDate') ? undefined : json['activeDate'],
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : json['inactiveDate'],
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
        'propertyType': !exists(json, 'propertyType') ? undefined : json['propertyType'],
    };
}

export function HotelSummaryTypeToJSON(value?: HotelSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'hotelName': value.hotelName,
        'activeDate': value.activeDate,
        'inactiveDate': value.inactiveDate,
        'chainCode': value.chainCode,
        'propertyType': value.propertyType,
    };
}

