/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AmenityTypeType } from './AmenityTypeType';
import {
    AmenityTypeTypeFromJSON,
    AmenityTypeTypeFromJSONTyped,
    AmenityTypeTypeToJSON,
} from './AmenityTypeType';

/**
 * Base details used for amenities.
 * @export
 * @interface ConfigHotelAmenityType
 */
export interface ConfigHotelAmenityType {
    /**
     * The description about amenity of the hotel.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    description?: string;
    /**
     * The comments about amenity of the hotel.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    comments?: string;
    /**
     * Specifies the feature code (aka amenity code).
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    featureCode?: string;
    /**
     * Display Order sequence.
     * @type {number}
     * @memberof ConfigHotelAmenityType
     */
    orderSequence?: number;
    /**
     * 
     * @type {AmenityTypeType}
     * @memberof ConfigHotelAmenityType
     */
    amenityType?: AmenityTypeType;
    /**
     * The date the amenity is scheduled to become active.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    beginDate?: string;
    /**
     * The date the amenity is scheduled to become inactive.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    endDate?: string;
    /**
     * The new amenity code which is used in the change method.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    newAmenityCode?: string;
    /**
     * The new date the amenity is scheduled to become active.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    newBeginDate?: string;
    /**
     * The hours of operation of the amenity in the hotel.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    hours?: string;
    /**
     * The price range of the amenity in the hotel.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    priceRange?: string;
    /**
     * Specifies the hotel code for which the amenity is specified.
     * @type {string}
     * @memberof ConfigHotelAmenityType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the ConfigHotelAmenityType interface.
 */
export function instanceOfConfigHotelAmenityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigHotelAmenityTypeFromJSON(json: any): ConfigHotelAmenityType {
    return ConfigHotelAmenityTypeFromJSONTyped(json, false);
}

export function ConfigHotelAmenityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigHotelAmenityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'featureCode': !exists(json, 'featureCode') ? undefined : json['featureCode'],
        'orderSequence': !exists(json, 'orderSequence') ? undefined : json['orderSequence'],
        'amenityType': !exists(json, 'amenityType') ? undefined : AmenityTypeTypeFromJSON(json['amenityType']),
        'beginDate': !exists(json, 'beginDate') ? undefined : json['beginDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'newAmenityCode': !exists(json, 'newAmenityCode') ? undefined : json['newAmenityCode'],
        'newBeginDate': !exists(json, 'newBeginDate') ? undefined : json['newBeginDate'],
        'hours': !exists(json, 'hours') ? undefined : json['hours'],
        'priceRange': !exists(json, 'priceRange') ? undefined : json['priceRange'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function ConfigHotelAmenityTypeToJSON(value?: ConfigHotelAmenityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'comments': value.comments,
        'featureCode': value.featureCode,
        'orderSequence': value.orderSequence,
        'amenityType': AmenityTypeTypeToJSON(value.amenityType),
        'beginDate': value.beginDate,
        'endDate': value.endDate,
        'newAmenityCode': value.newAmenityCode,
        'newBeginDate': value.newBeginDate,
        'hours': value.hours,
        'priceRange': value.priceRange,
        'hotelId': value.hotelId,
    };
}

