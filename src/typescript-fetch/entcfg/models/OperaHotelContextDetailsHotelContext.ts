/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A record containing hotel contextual information, stored as attributes.
 * @export
 * @interface OperaHotelContextDetailsHotelContext
 */
export interface OperaHotelContextDetailsHotelContext {
    /**
     * The hotel's business date.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    businessDate?: string;
    /**
     * Catering Currency Code, used when Catering Currency differs from base currency.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    cateringCurrencyCode?: string;
    /**
     * The hotel's chain code.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    chainCode?: string;
    /**
     * The hotel's check-in time.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    checkInTime?: string;
    /**
     * The hotel's check-out time.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    checkOutTime?: string;
    /**
     * The hotel's configuration mode if applicable.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    configurationMode?: string;
    /**
     * The hotel's country code.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    countryMode?: string;
    /**
     * Provides the hotel's currency code.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    currencyCode?: string;
    /**
     * The hotel code.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    hotelId?: string;
    /**
     * The hotel name.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    hotelName?: string;
    /**
     * The hotel's language code.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    languageCode?: string;
    /**
     * The login user.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    loginUserId?: string;
    /**
     * The hotel's timezone.
     * @type {string}
     * @memberof OperaHotelContextDetailsHotelContext
     */
    timezone?: string;
}

/**
 * Check if a given object implements the OperaHotelContextDetailsHotelContext interface.
 */
export function instanceOfOperaHotelContextDetailsHotelContext(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OperaHotelContextDetailsHotelContextFromJSON(json: any): OperaHotelContextDetailsHotelContext {
    return OperaHotelContextDetailsHotelContextFromJSONTyped(json, false);
}

export function OperaHotelContextDetailsHotelContextFromJSONTyped(json: any, ignoreDiscriminator: boolean): OperaHotelContextDetailsHotelContext {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'businessDate': !exists(json, 'businessDate') ? undefined : json['businessDate'],
        'cateringCurrencyCode': !exists(json, 'cateringCurrencyCode') ? undefined : json['cateringCurrencyCode'],
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
        'checkInTime': !exists(json, 'checkInTime') ? undefined : json['checkInTime'],
        'checkOutTime': !exists(json, 'checkOutTime') ? undefined : json['checkOutTime'],
        'configurationMode': !exists(json, 'configurationMode') ? undefined : json['configurationMode'],
        'countryMode': !exists(json, 'countryMode') ? undefined : json['countryMode'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'languageCode': !exists(json, 'languageCode') ? undefined : json['languageCode'],
        'loginUserId': !exists(json, 'loginUserId') ? undefined : json['loginUserId'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
    };
}

export function OperaHotelContextDetailsHotelContextToJSON(value?: OperaHotelContextDetailsHotelContext | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'businessDate': value.businessDate,
        'cateringCurrencyCode': value.cateringCurrencyCode,
        'chainCode': value.chainCode,
        'checkInTime': value.checkInTime,
        'checkOutTime': value.checkOutTime,
        'configurationMode': value.configurationMode,
        'countryMode': value.countryMode,
        'currencyCode': value.currencyCode,
        'hotelId': value.hotelId,
        'hotelName': value.hotelName,
        'languageCode': value.languageCode,
        'loginUserId': value.loginUserId,
        'timezone': value.timezone,
    };
}

