/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlexFieldModuleType } from './FlexFieldModuleType';
import {
    FlexFieldModuleTypeFromJSON,
    FlexFieldModuleTypeFromJSONTyped,
    FlexFieldModuleTypeToJSON,
} from './FlexFieldModuleType';

/**
 * Provides the details of a flex field
 * @export
 * @interface FlexFieldType
 */
export interface FlexFieldType {
    /**
     * 
     * @type {FlexFieldModuleType}
     * @memberof FlexFieldType
     */
    module?: FlexFieldModuleType;
    /**
     * Flex field code
     * @type {string}
     * @memberof FlexFieldType
     */
    code?: string;
    /**
     * Unique ID of the flex field
     * @type {number}
     * @memberof FlexFieldType
     */
    flexFieldId?: number;
    /**
     * Description of the flex field
     * @type {string}
     * @memberof FlexFieldType
     */
    description?: string;
    /**
     * Sequence of the flex field
     * @type {number}
     * @memberof FlexFieldType
     */
    sequence?: number;
    /**
     * Name of the flex field LOV
     * @type {string}
     * @memberof FlexFieldType
     */
    lovName?: string;
    /**
     * Indicates whether the flex field is mandatory or not
     * @type {boolean}
     * @memberof FlexFieldType
     */
    isMandatory?: boolean;
    /**
     * Indicates whether the flex field is a LOV or not
     * @type {boolean}
     * @memberof FlexFieldType
     */
    isLov?: boolean;
    /**
     * Indicates whether the flex field is multi-select or not
     * @type {boolean}
     * @memberof FlexFieldType
     */
    isMultiSelectLov?: boolean;
    /**
     * Indicates whether the flex field is active or not
     * @type {boolean}
     * @memberof FlexFieldType
     */
    isInactive?: boolean;
    /**
     * Hotel Code
     * @type {string}
     * @memberof FlexFieldType
     */
    hotelId?: string;
    /**
     * Profile Type
     * @type {string}
     * @memberof FlexFieldType
     */
    profileType?: string;
}

/**
 * Check if a given object implements the FlexFieldType interface.
 */
export function instanceOfFlexFieldType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FlexFieldTypeFromJSON(json: any): FlexFieldType {
    return FlexFieldTypeFromJSONTyped(json, false);
}

export function FlexFieldTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlexFieldType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'module': !exists(json, 'module') ? undefined : FlexFieldModuleTypeFromJSON(json['module']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'flexFieldId': !exists(json, 'flexFieldId') ? undefined : json['flexFieldId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'lovName': !exists(json, 'lovName') ? undefined : json['lovName'],
        'isMandatory': !exists(json, 'isMandatory') ? undefined : json['isMandatory'],
        'isLov': !exists(json, 'isLov') ? undefined : json['isLov'],
        'isMultiSelectLov': !exists(json, 'isMultiSelectLov') ? undefined : json['isMultiSelectLov'],
        'isInactive': !exists(json, 'isInactive') ? undefined : json['isInactive'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'profileType': !exists(json, 'profileType') ? undefined : json['profileType'],
    };
}

export function FlexFieldTypeToJSON(value?: FlexFieldType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'module': FlexFieldModuleTypeToJSON(value.module),
        'code': value.code,
        'flexFieldId': value.flexFieldId,
        'description': value.description,
        'sequence': value.sequence,
        'lovName': value.lovName,
        'isMandatory': value.isMandatory,
        'isLov': value.isLov,
        'isMultiSelectLov': value.isMultiSelectLov,
        'isInactive': value.isInactive,
        'hotelId': value.hotelId,
        'profileType': value.profileType,
    };
}

