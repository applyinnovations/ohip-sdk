/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Enterprise Configuration API
 * APIs to cater for Enterprise Configuration functionality in OPERA Cloud. <br /><br In this module, you can configure a variety of options related to your properties such as their locations, facilities, and local attractions. The available options are dependant on the active controls at your property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AirportsDetails,
  AmenitiesDetails,
  AttractionTemplatesDetails,
  AttractionsDetails,
  ChangeAirportsRequest,
  ChangeAlternateHotelsRequest,
  ChangeAmenitiesRequest,
  ChangeAttractionTemplatesRequest,
  ChangeAttractionsRequest,
  ChangeCountriesRequest,
  ChangeCreditCardTypesRequest,
  ChangeDepartmentsRequest,
  ChangeHotelContactsRequest,
  ChangeHotelDayTypeCodesRequest,
  ChangeHotelNotesRequest,
  ChangeHotelRateRangesRequest,
  ChangeHotelRestaurantsRequest,
  ChangeJobTitlesRequest,
  ChangeLanguagesRequest,
  ChangeMarketingCitiesRequest,
  ChangeTelephoneBookCategoriesRequest,
  ChangeTelephoneBookEntriesRequest,
  ChangeTemplateAirportsRequest,
  ChangeTemplateAmenitiesRequest,
  ChangeTemplateCountriesRequest,
  ChangeTemplateDayTypeCodesRequest,
  ChangeTemplateHotelDetailsRequest,
  ChangeTemplateJobTitlesRequest,
  ChangeTemplateMarketingCitiesRequest,
  ChangeTransportationRequest,
  ChangeTransportationTemplatesRequest,
  ChangeYieldAdjustmentCodesRequest,
  ChangeYieldCategoriesRequest,
  ChangeYieldMarketTypesRequest,
  ConfigActivityLogDetails,
  CopyDepartmentsRequest,
  CopyHotelDetailsRequest,
  CopyMarketingCitiesRequest,
  CopyTemplateCodesRequest,
  CopyYieldAdjustmentCodesRequest,
  CopyYieldCategoriesRequest,
  CountriesDetails,
  CreditCardTypesDetails,
  CurrencyExchangeRatesDetails,
  DepartmentsDetails,
  ExceptionDetailType,
  HotelBrochureDetails,
  HotelCalendarDetails,
  HotelDayTypeCodesDetails,
  HotelDetails,
  HotelDetailsDetails,
  HotelsDetails,
  JobTitlesDetails,
  LanguagesDetails,
  MarketingCitiesDetails,
  OperaHotelContextDetails,
  OperaParametersDetails,
  OperaSettingsDetails,
  PostAirportsRequest,
  PostAlternateHotelsRequest,
  PostAmenitiesRequest,
  PostAttractionTemplatesRequest,
  PostAttractionsRequest,
  PostConfigActivityLogRequest,
  PostCreditCardTypesRequest,
  PostDepartmentsRequest,
  PostHotelContactsRequest,
  PostHotelDayTypeCodesRequest,
  PostHotelNotesRequest,
  PostHotelRateRangesRequest,
  PostHotelRestaurantsRequest,
  PostJobTitlesRequest,
  PostLanguagesRequest,
  PostMarketingCitiesRequest,
  PostTelephoneBookCategoriesRequest,
  PostTelephoneBookEntriesRequest,
  PostTemplateAirportsRequest,
  PostTemplateAmenitiesRequest,
  PostTemplateCountriesRequest,
  PostTemplateDayTypeCodesRequest,
  PostTemplateHotelDetailsRequest,
  PostTemplateJobTitlesRequest,
  PostTemplateMarketingCitiesRequest,
  PostTransportationRequest,
  PostTransportationTemplatesRequest,
  PostYieldAdjustmentCodesRequest,
  PostYieldCategoriesRequest,
  PostYieldMarketTypesRequest,
  SetDayTypesRequest,
  SetHotelEventsRequest,
  Status,
  TelephoneBookCategoriesDetails,
  TelephoneBookEntriesDetails,
  TemplateAirportsDetails,
  TemplateAmenitiesDetails,
  TemplateCountriesDetails,
  TemplateDayTypeCodesDetails,
  TemplateHotelDetailsDetails,
  TemplateJobTitlesDetails,
  TemplateMarketingCitiesDetails,
  TransportationDetails,
  TransportationTemplatesDetails,
  YieldAdjustmentCodesDetails,
  YieldCategoriesDetails,
  YieldMarketTypesDetails,
} from '../models';
import {
    AirportsDetailsFromJSON,
    AirportsDetailsToJSON,
    AmenitiesDetailsFromJSON,
    AmenitiesDetailsToJSON,
    AttractionTemplatesDetailsFromJSON,
    AttractionTemplatesDetailsToJSON,
    AttractionsDetailsFromJSON,
    AttractionsDetailsToJSON,
    ChangeAirportsRequestFromJSON,
    ChangeAirportsRequestToJSON,
    ChangeAlternateHotelsRequestFromJSON,
    ChangeAlternateHotelsRequestToJSON,
    ChangeAmenitiesRequestFromJSON,
    ChangeAmenitiesRequestToJSON,
    ChangeAttractionTemplatesRequestFromJSON,
    ChangeAttractionTemplatesRequestToJSON,
    ChangeAttractionsRequestFromJSON,
    ChangeAttractionsRequestToJSON,
    ChangeCountriesRequestFromJSON,
    ChangeCountriesRequestToJSON,
    ChangeCreditCardTypesRequestFromJSON,
    ChangeCreditCardTypesRequestToJSON,
    ChangeDepartmentsRequestFromJSON,
    ChangeDepartmentsRequestToJSON,
    ChangeHotelContactsRequestFromJSON,
    ChangeHotelContactsRequestToJSON,
    ChangeHotelDayTypeCodesRequestFromJSON,
    ChangeHotelDayTypeCodesRequestToJSON,
    ChangeHotelNotesRequestFromJSON,
    ChangeHotelNotesRequestToJSON,
    ChangeHotelRateRangesRequestFromJSON,
    ChangeHotelRateRangesRequestToJSON,
    ChangeHotelRestaurantsRequestFromJSON,
    ChangeHotelRestaurantsRequestToJSON,
    ChangeJobTitlesRequestFromJSON,
    ChangeJobTitlesRequestToJSON,
    ChangeLanguagesRequestFromJSON,
    ChangeLanguagesRequestToJSON,
    ChangeMarketingCitiesRequestFromJSON,
    ChangeMarketingCitiesRequestToJSON,
    ChangeTelephoneBookCategoriesRequestFromJSON,
    ChangeTelephoneBookCategoriesRequestToJSON,
    ChangeTelephoneBookEntriesRequestFromJSON,
    ChangeTelephoneBookEntriesRequestToJSON,
    ChangeTemplateAirportsRequestFromJSON,
    ChangeTemplateAirportsRequestToJSON,
    ChangeTemplateAmenitiesRequestFromJSON,
    ChangeTemplateAmenitiesRequestToJSON,
    ChangeTemplateCountriesRequestFromJSON,
    ChangeTemplateCountriesRequestToJSON,
    ChangeTemplateDayTypeCodesRequestFromJSON,
    ChangeTemplateDayTypeCodesRequestToJSON,
    ChangeTemplateHotelDetailsRequestFromJSON,
    ChangeTemplateHotelDetailsRequestToJSON,
    ChangeTemplateJobTitlesRequestFromJSON,
    ChangeTemplateJobTitlesRequestToJSON,
    ChangeTemplateMarketingCitiesRequestFromJSON,
    ChangeTemplateMarketingCitiesRequestToJSON,
    ChangeTransportationRequestFromJSON,
    ChangeTransportationRequestToJSON,
    ChangeTransportationTemplatesRequestFromJSON,
    ChangeTransportationTemplatesRequestToJSON,
    ChangeYieldAdjustmentCodesRequestFromJSON,
    ChangeYieldAdjustmentCodesRequestToJSON,
    ChangeYieldCategoriesRequestFromJSON,
    ChangeYieldCategoriesRequestToJSON,
    ChangeYieldMarketTypesRequestFromJSON,
    ChangeYieldMarketTypesRequestToJSON,
    ConfigActivityLogDetailsFromJSON,
    ConfigActivityLogDetailsToJSON,
    CopyDepartmentsRequestFromJSON,
    CopyDepartmentsRequestToJSON,
    CopyHotelDetailsRequestFromJSON,
    CopyHotelDetailsRequestToJSON,
    CopyMarketingCitiesRequestFromJSON,
    CopyMarketingCitiesRequestToJSON,
    CopyTemplateCodesRequestFromJSON,
    CopyTemplateCodesRequestToJSON,
    CopyYieldAdjustmentCodesRequestFromJSON,
    CopyYieldAdjustmentCodesRequestToJSON,
    CopyYieldCategoriesRequestFromJSON,
    CopyYieldCategoriesRequestToJSON,
    CountriesDetailsFromJSON,
    CountriesDetailsToJSON,
    CreditCardTypesDetailsFromJSON,
    CreditCardTypesDetailsToJSON,
    CurrencyExchangeRatesDetailsFromJSON,
    CurrencyExchangeRatesDetailsToJSON,
    DepartmentsDetailsFromJSON,
    DepartmentsDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelBrochureDetailsFromJSON,
    HotelBrochureDetailsToJSON,
    HotelCalendarDetailsFromJSON,
    HotelCalendarDetailsToJSON,
    HotelDayTypeCodesDetailsFromJSON,
    HotelDayTypeCodesDetailsToJSON,
    HotelDetailsFromJSON,
    HotelDetailsToJSON,
    HotelDetailsDetailsFromJSON,
    HotelDetailsDetailsToJSON,
    HotelsDetailsFromJSON,
    HotelsDetailsToJSON,
    JobTitlesDetailsFromJSON,
    JobTitlesDetailsToJSON,
    LanguagesDetailsFromJSON,
    LanguagesDetailsToJSON,
    MarketingCitiesDetailsFromJSON,
    MarketingCitiesDetailsToJSON,
    OperaHotelContextDetailsFromJSON,
    OperaHotelContextDetailsToJSON,
    OperaParametersDetailsFromJSON,
    OperaParametersDetailsToJSON,
    OperaSettingsDetailsFromJSON,
    OperaSettingsDetailsToJSON,
    PostAirportsRequestFromJSON,
    PostAirportsRequestToJSON,
    PostAlternateHotelsRequestFromJSON,
    PostAlternateHotelsRequestToJSON,
    PostAmenitiesRequestFromJSON,
    PostAmenitiesRequestToJSON,
    PostAttractionTemplatesRequestFromJSON,
    PostAttractionTemplatesRequestToJSON,
    PostAttractionsRequestFromJSON,
    PostAttractionsRequestToJSON,
    PostConfigActivityLogRequestFromJSON,
    PostConfigActivityLogRequestToJSON,
    PostCreditCardTypesRequestFromJSON,
    PostCreditCardTypesRequestToJSON,
    PostDepartmentsRequestFromJSON,
    PostDepartmentsRequestToJSON,
    PostHotelContactsRequestFromJSON,
    PostHotelContactsRequestToJSON,
    PostHotelDayTypeCodesRequestFromJSON,
    PostHotelDayTypeCodesRequestToJSON,
    PostHotelNotesRequestFromJSON,
    PostHotelNotesRequestToJSON,
    PostHotelRateRangesRequestFromJSON,
    PostHotelRateRangesRequestToJSON,
    PostHotelRestaurantsRequestFromJSON,
    PostHotelRestaurantsRequestToJSON,
    PostJobTitlesRequestFromJSON,
    PostJobTitlesRequestToJSON,
    PostLanguagesRequestFromJSON,
    PostLanguagesRequestToJSON,
    PostMarketingCitiesRequestFromJSON,
    PostMarketingCitiesRequestToJSON,
    PostTelephoneBookCategoriesRequestFromJSON,
    PostTelephoneBookCategoriesRequestToJSON,
    PostTelephoneBookEntriesRequestFromJSON,
    PostTelephoneBookEntriesRequestToJSON,
    PostTemplateAirportsRequestFromJSON,
    PostTemplateAirportsRequestToJSON,
    PostTemplateAmenitiesRequestFromJSON,
    PostTemplateAmenitiesRequestToJSON,
    PostTemplateCountriesRequestFromJSON,
    PostTemplateCountriesRequestToJSON,
    PostTemplateDayTypeCodesRequestFromJSON,
    PostTemplateDayTypeCodesRequestToJSON,
    PostTemplateHotelDetailsRequestFromJSON,
    PostTemplateHotelDetailsRequestToJSON,
    PostTemplateJobTitlesRequestFromJSON,
    PostTemplateJobTitlesRequestToJSON,
    PostTemplateMarketingCitiesRequestFromJSON,
    PostTemplateMarketingCitiesRequestToJSON,
    PostTransportationRequestFromJSON,
    PostTransportationRequestToJSON,
    PostTransportationTemplatesRequestFromJSON,
    PostTransportationTemplatesRequestToJSON,
    PostYieldAdjustmentCodesRequestFromJSON,
    PostYieldAdjustmentCodesRequestToJSON,
    PostYieldCategoriesRequestFromJSON,
    PostYieldCategoriesRequestToJSON,
    PostYieldMarketTypesRequestFromJSON,
    PostYieldMarketTypesRequestToJSON,
    SetDayTypesRequestFromJSON,
    SetDayTypesRequestToJSON,
    SetHotelEventsRequestFromJSON,
    SetHotelEventsRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
    TelephoneBookCategoriesDetailsFromJSON,
    TelephoneBookCategoriesDetailsToJSON,
    TelephoneBookEntriesDetailsFromJSON,
    TelephoneBookEntriesDetailsToJSON,
    TemplateAirportsDetailsFromJSON,
    TemplateAirportsDetailsToJSON,
    TemplateAmenitiesDetailsFromJSON,
    TemplateAmenitiesDetailsToJSON,
    TemplateCountriesDetailsFromJSON,
    TemplateCountriesDetailsToJSON,
    TemplateDayTypeCodesDetailsFromJSON,
    TemplateDayTypeCodesDetailsToJSON,
    TemplateHotelDetailsDetailsFromJSON,
    TemplateHotelDetailsDetailsToJSON,
    TemplateJobTitlesDetailsFromJSON,
    TemplateJobTitlesDetailsToJSON,
    TemplateMarketingCitiesDetailsFromJSON,
    TemplateMarketingCitiesDetailsToJSON,
    TransportationDetailsFromJSON,
    TransportationDetailsToJSON,
    TransportationTemplatesDetailsFromJSON,
    TransportationTemplatesDetailsToJSON,
    YieldAdjustmentCodesDetailsFromJSON,
    YieldAdjustmentCodesDetailsToJSON,
    YieldCategoriesDetailsFromJSON,
    YieldCategoriesDetailsToJSON,
    YieldMarketTypesDetailsFromJSON,
    YieldMarketTypesDetailsToJSON,
} from '../models';

export interface ChangeAirportsOperationRequest {
    airportCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    airportsToBeChanged?: ChangeAirportsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeAlternateHotelsOperationRequest {
    alternateHotelId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alternateHotelsToBeChanged?: ChangeAlternateHotelsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeAmenitiesOperationRequest {
    featureCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    amenitiesToBeChanged?: ChangeAmenitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeAttractionTemplatesOperationRequest {
    attractionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionTemplatesToBeChanged?: ChangeAttractionTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeAttractionsOperationRequest {
    attractionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionsToBeChanged?: ChangeAttractionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCountriesOperationRequest {
    countryCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countriesToBeChanged?: ChangeCountriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCreditCardTypesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCardTypesToBeChanged?: ChangeCreditCardTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeDepartmentsOperationRequest {
    departmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    departmentsToBeChanged?: ChangeDepartmentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelContactsOperationRequest {
    contactId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelContactsToBeChanged?: ChangeHotelContactsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelDayTypeCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelDayTypeCodesToBeChanged?: ChangeHotelDayTypeCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelNotesOperationRequest {
    noteCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelNotesToBeChanged?: ChangeHotelNotesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelRateRangesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelRateRangesToBeChanged?: ChangeHotelRateRangesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeHotelRestaurantsOperationRequest {
    restaurantCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelRestaurantsToBeChanged?: ChangeHotelRestaurantsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeJobTitlesOperationRequest {
    jobTitleCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    jobTitlesToBeChanged?: ChangeJobTitlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeLanguagesOperationRequest {
    languageCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languagesToBeChanged?: ChangeLanguagesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMarketingCitiesOperationRequest {
    cityCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketingCitiesToBeChanged?: ChangeMarketingCitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTelephoneBookCategoriesOperationRequest {
    categoryCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    telephoneBookCategoriesToBeChanged?: ChangeTelephoneBookCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTelephoneBookEntriesOperationRequest {
    entryId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    telephoneBookEntriesToBeChanged?: ChangeTelephoneBookEntriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateAirportsOperationRequest {
    airportCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateAirportsToBeChanged?: ChangeTemplateAirportsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateAmenitiesOperationRequest {
    featureCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateAmenitiesToBeChanged?: ChangeTemplateAmenitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateCountriesOperationRequest {
    countryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCountriesToBeChanged?: ChangeTemplateCountriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateDayTypeCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateDayTypeCodesToBeChanged?: ChangeTemplateDayTypeCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateHotelDetailsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateHotelDetailsToBeChanged?: ChangeTemplateHotelDetailsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateJobTitlesOperationRequest {
    jobTitleCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateJobTitlesToBeChanged?: ChangeTemplateJobTitlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateMarketingCitiesOperationRequest {
    cityCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketingCitiesToBeChanged?: ChangeTemplateMarketingCitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTransportationOperationRequest {
    transportationCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationToBeChanged?: ChangeTransportationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTransportationTemplatesOperationRequest {
    transportationCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationTemplatesToBeChanged?: ChangeTransportationTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeYieldAdjustmentCodesOperationRequest {
    yieldAdjustmentCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldAdjustmentCodesToBeChanged?: ChangeYieldAdjustmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeYieldCategoriesOperationRequest {
    code?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldCategoriesToBeChanged?: ChangeYieldCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeYieldMarketTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldMarketTypesToBeChanged?: ChangeYieldMarketTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyDepartmentsOperationRequest {
    sourceHotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyDepartments?: CopyDepartmentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyHotelDetailsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyHotelDetails?: CopyHotelDetailsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyMarketingCitiesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyMarketingCities?: CopyMarketingCitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTemplateCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyTemplateCodes?: CopyTemplateCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyYieldAdjustmentCodesOperationRequest {
    sourceHotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyYieldAdjustmentCodes?: CopyYieldAdjustmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyYieldCategoriesOperationRequest {
    sourceHotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyYieldCategories?: CopyYieldCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAirportsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    pageNumber?: number;
    airportCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAmenitiesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    general?: boolean;
    meeting?: boolean;
    amenityCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAttractionTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionCodes?: Array<string>;
    wildCard?: string;
    classCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAttractionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    attractionCodes?: Array<string>;
    wildCard?: string;
    classCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfigActivityLogRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelId?: string;
    module?: GetConfigActivityLogModuleEnum;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIds?: Array<number>;
    userForIds?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCountriesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    countriesCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditCardTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCurrencyExchangeRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exchangeType?: GetCurrencyExchangeRatesExchangeTypeEnum;
    hotelIds?: Array<string>;
    currencyCode?: string;
    currencyCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepartmentsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    departmentCodes?: Array<string>;
    departmentWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetHotelFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelBrochureRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetHotelBrochureFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelCalendarRequest {
    hotelId?: string;
    startDate?: Date;
    endDate?: Date;
    fetchInstructions?: Set<GetHotelCalendarFetchInstructionsEnum>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelDayTypeCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    dayTypesCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelDetailsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    hotelDetailCodes?: Array<string>;
    hotelDetailCategoriesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    name?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetJobTitlesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    jobTitleCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLanguagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languageCodes?: Array<string>;
    description?: string;
    useAsAlternateLanguage?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketingCitiesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    includeInactive?: boolean;
    limit?: number;
    pageNumber?: number;
    marketingCitys?: Array<string>;
    regionCodes?: Array<string>;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOperaHotelContextRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOperaParametersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    parameterName?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOperaSettingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    cROCode?: string;
    parameterNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPropertyCalendarRequest {
    startDate?: Date;
    endDate?: Date;
    fetchInstructions?: Set<GetPropertyCalendarFetchInstructionsEnum>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTelephoneBookCategoriesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTelephoneBookEntriesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    category?: string;
    name?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateAirportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    airportCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateAmenitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    general?: boolean;
    meeting?: boolean;
    amenityCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateCountriesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countriesCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateDayTypeCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dayTypesCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateHotelDetailsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelDetailCodes?: Array<string>;
    hotelDetailCategoriesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateJobTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    jobTitleCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateMarketingCitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    limit?: number;
    pageNumber?: number;
    marketingCitys?: Array<string>;
    regionCodes?: Array<string>;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransportationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    transportationCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransportationTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetYieldAdjustmentCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    yieldAdjustmentCodes?: Array<string>;
    wildCard?: string;
    type?: GetYieldAdjustmentCodesTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetYieldCategoriesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldCategoriesCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetYieldMarketTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldMarketTypesCodes?: Array<string>;
    wildCard?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAirportsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    airportsCriteria?: PostAirportsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAlternateHotelsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alternateHotelsCriteria?: PostAlternateHotelsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAmenitiesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    amenitiesCriteria?: PostAmenitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAttractionTemplatesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionTemplatesCriteria?: PostAttractionTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAttractionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionsCriteria?: PostAttractionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostConfigActivityLogOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createConfigActivityLogCriteria?: PostConfigActivityLogRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCreditCardTypesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCardTypesCriteria?: PostCreditCardTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepartmentsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    departmentsCriteria?: PostDepartmentsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelContactsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelContactsCriteria?: PostHotelContactsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelDayTypeCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelDayTypeCodesCriteria?: PostHotelDayTypeCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelNotesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelNotesCriteria?: PostHotelNotesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelRateRangesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelRateRangesCriteria?: PostHotelRateRangesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelRestaurantsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelRestaurantsCriteria?: PostHotelRestaurantsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostJobTitlesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    jobTitlesCriteria?: PostJobTitlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostLanguagesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languagesCriteria?: PostLanguagesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMarketingCitiesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketingCitiesCriteria?: PostMarketingCitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTelephoneBookCategoriesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    telephoneBookCategoriesCriteria?: PostTelephoneBookCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTelephoneBookEntriesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    telephoneBookEntriesCriteria?: PostTelephoneBookEntriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateAirportsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateAirportsCriteria?: PostTemplateAirportsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateAmenitiesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateAmenitiesCriteria?: PostTemplateAmenitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateCountriesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCountriesCriteria?: PostTemplateCountriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateDayTypeCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateDayTypeCodesCriteria?: PostTemplateDayTypeCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateHotelDetailsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateHotelDetailsCriteria?: PostTemplateHotelDetailsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateJobTitlesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateJobTitlesCriteria?: PostTemplateJobTitlesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateMarketingCitiesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketingCitiesCriteria?: PostTemplateMarketingCitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransportationOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationCriteria?: PostTransportationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransportationTemplatesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transportationTemplatesCriteria?: PostTransportationTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostYieldAdjustmentCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldAdjustmentCodesCriteria?: PostYieldAdjustmentCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostYieldCategoriesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldCategoriesCriteria?: PostYieldCategoriesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostYieldMarketTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yieldMarketTypesCriteria?: PostYieldMarketTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAirportsRequest {
    airportCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAlternateHotelsRequest {
    alternateHotelId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAmenitiesRequest {
    featureCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    beginDate?: Array<Date>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAttractionTemplatesRequest {
    attractionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAttractionsRequest {
    attractionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attractionCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAttractionsByCodeRequest {
    attractionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCreditCardTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCardTypesCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveDayTypesRequest {
    dayType?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveDepartmentsRequest {
    departmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelContactsRequest {
    contactId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelDayTypeCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelEventsRequest {
    eventId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelNotesRequest {
    noteCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelRateRangesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveHotelRestaurantsRequest {
    restaurantCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveJobTitlesRequest {
    jobTitleCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveLanguagesRequest {
    languageCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMarketingCitiesRequest {
    cityCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    regionCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTelephoneBookCategoriesRequest {
    categoryCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    description?: Array<string>;
    orderBy?: Array<number>;
    generic?: Array<boolean>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTelephoneBookEntriesRequest {
    entryId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTelephoneBookEntriesWithoutHotelIdRequest {
    entryId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateAirportsRequest {
    airportCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateAmenitiesRequest {
    featureCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateCountriesRequest {
    countryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateDayTypeCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateDayTypeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateHotelDetailsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateHotelDetailCode?: Array<string>;
    templateHotelDetailCategory?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateJobTitlesRequest {
    jobTitleCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateMarketingCitiesRequest {
    cityCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    regionCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTransportationRequest {
    transportationCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    label?: Array<string>;
    orderBy?: Array<number>;
    createDateTime?: string;
    creatorId?: string;
    extension?: string;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    phoneNumberOrderSequence?: number;
    phoneNumber?: string;
    phoneTechType?: string;
    phoneUseType?: string;
    phoneUseTypeDescription?: string;
    phoneNumberPrimaryInd?: boolean;
    purgeDate?: Date;
    distance?: number;
    distanceType?: string;
    drivingTime?: string;
    description?: Array<string>;
    comments?: Array<string>;
    priceRange?: Array<string>;
    websiteOrderSequence?: number;
    websitePrimaryInd?: boolean;
    type?: string;
    typeDescription?: string;
    keyOptionsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTransportationTemplatesRequest {
    transportationCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveYieldAdjustmentCodesRequest {
    yieldAdjustmentCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveYieldCategoriesRequest {
    code?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveYieldMarketTypesRequest {
    code?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetDayTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    setDayTypes?: SetDayTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetHotelEventsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    setHotelEvents?: SetHotelEventsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update airports for a specific property based on airportCode, hotelId, airportsToBeChanged. <p><strong>OperationId:</strong>changeAirports</p>
     * Change resort airports
     */
    async changeAirportsRaw(requestParameters: ChangeAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/airports/{airportCode}`.replace(`{${"airportCode"}}`, encodeURIComponent(String(requestParameters.airportCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeAirportsRequestToJSON(requestParameters.airportsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update airports for a specific property based on airportCode, hotelId, airportsToBeChanged. <p><strong>OperationId:</strong>changeAirports</p>
     * Change resort airports
     */
    async changeAirports(requestParameters: ChangeAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update alternate hotels for a specific property based on  alternateHotelId, hotelId, alternateHotelsToBeChanged. <p><strong>OperationId:</strong>changeAlternateHotels</p>
     * Update Alternate Hotels
     */
    async changeAlternateHotelsRaw(requestParameters: ChangeAlternateHotelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alternates/{alternateHotelId}`.replace(`{${"alternateHotelId"}}`, encodeURIComponent(String(requestParameters.alternateHotelId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeAlternateHotelsRequestToJSON(requestParameters.alternateHotelsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update alternate hotels for a specific property based on  alternateHotelId, hotelId, alternateHotelsToBeChanged. <p><strong>OperationId:</strong>changeAlternateHotels</p>
     * Update Alternate Hotels
     */
    async changeAlternateHotels(requestParameters: ChangeAlternateHotelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeAlternateHotelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update amenities for a specific property based on featureCode, hotelId, amenitiesToBeChanged. <p><strong>OperationId:</strong>changeAmenities</p>
     * Change amenities
     */
    async changeAmenitiesRaw(requestParameters: ChangeAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/amenities/{featureCode}`.replace(`{${"featureCode"}}`, encodeURIComponent(String(requestParameters.featureCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeAmenitiesRequestToJSON(requestParameters.amenitiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update amenities for a specific property based on featureCode, hotelId, amenitiesToBeChanged. <p><strong>OperationId:</strong>changeAmenities</p>
     * Change amenities
     */
    async changeAmenities(requestParameters: ChangeAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update attraction templates based on attractionCode, attractionTemplatesToBeChanged. <p><strong>OperationId:</strong>changeAttractionTemplates</p>
     * Change Attraction Template
     */
    async changeAttractionTemplatesRaw(requestParameters: ChangeAttractionTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeAttractionTemplatesRequestToJSON(requestParameters.attractionTemplatesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update attraction templates based on attractionCode, attractionTemplatesToBeChanged. <p><strong>OperationId:</strong>changeAttractionTemplates</p>
     * Change Attraction Template
     */
    async changeAttractionTemplates(requestParameters: ChangeAttractionTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeAttractionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update attractions for a specific property based on attractionCode, hotelId, attractionsToBeChanged. <p><strong>OperationId:</strong>changeAttractions</p>
     * Update an Attraction
     */
    async changeAttractionsRaw(requestParameters: ChangeAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeAttractionsRequestToJSON(requestParameters.attractionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update attractions for a specific property based on attractionCode, hotelId, attractionsToBeChanged. <p><strong>OperationId:</strong>changeAttractions</p>
     * Update an Attraction
     */
    async changeAttractions(requestParameters: ChangeAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update country codes for a specific property based on countryCode, hotelId, countriesToBeChanged. <p><strong>OperationId:</strong>changeCountries</p>
     * Update a Country Code
     */
    async changeCountriesRaw(requestParameters: ChangeCountriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/countries/{countryCode}`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCountriesRequestToJSON(requestParameters.countriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update country codes for a specific property based on countryCode, hotelId, countriesToBeChanged. <p><strong>OperationId:</strong>changeCountries</p>
     * Update a Country Code
     */
    async changeCountries(requestParameters: ChangeCountriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update credit card types for a specific property based on hotelId, creditCardTypesToBeChanged. <p><strong>OperationId:</strong>changeCreditCardTypes</p>
     * Change Credit Card Types
     */
    async changeCreditCardTypesRaw(requestParameters: ChangeCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCreditCardTypesRequestToJSON(requestParameters.creditCardTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update credit card types for a specific property based on hotelId, creditCardTypesToBeChanged. <p><strong>OperationId:</strong>changeCreditCardTypes</p>
     * Change Credit Card Types
     */
    async changeCreditCardTypes(requestParameters: ChangeCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update departments based on departmentCode, departmentsToBeChanged. <p><strong>OperationId:</strong>changeDepartments</p>
     * Change Departments
     */
    async changeDepartmentsRaw(requestParameters: ChangeDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeDepartmentsRequestToJSON(requestParameters.departmentsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update departments based on departmentCode, departmentsToBeChanged. <p><strong>OperationId:</strong>changeDepartments</p>
     * Change Departments
     */
    async changeDepartments(requestParameters: ChangeDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update hotel contacts for a specific property based on contactId, hotelId, hotelContactsToBeChanged. <p><strong>OperationId:</strong>changeHotelContacts</p>
     * Change Hotel Contact
     */
    async changeHotelContactsRaw(requestParameters: ChangeHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelContactsRequestToJSON(requestParameters.hotelContactsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update hotel contacts for a specific property based on contactId, hotelId, hotelContactsToBeChanged. <p><strong>OperationId:</strong>changeHotelContacts</p>
     * Change Hotel Contact
     */
    async changeHotelContacts(requestParameters: ChangeHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update day type codes for a specific property based on hotelId, hotelDayTypeCodesToBeChanged. <p><strong>OperationId:</strong>changeHotelDayTypeCodes</p>
     * Change Hotel Day Type Codes
     */
    async changeHotelDayTypeCodesRaw(requestParameters: ChangeHotelDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dayTypeCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelDayTypeCodesRequestToJSON(requestParameters.hotelDayTypeCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update day type codes for a specific property based on hotelId, hotelDayTypeCodesToBeChanged. <p><strong>OperationId:</strong>changeHotelDayTypeCodes</p>
     * Change Hotel Day Type Codes
     */
    async changeHotelDayTypeCodes(requestParameters: ChangeHotelDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update note information for a specific property based on noteCode, hotelId, hotelNotesToBeChanged. <p><strong>OperationId:</strong>changeHotelNotes</p>
     * Update Note information
     */
    async changeHotelNotesRaw(requestParameters: ChangeHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/notes/{noteCode}`.replace(`{${"noteCode"}}`, encodeURIComponent(String(requestParameters.noteCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelNotesRequestToJSON(requestParameters.hotelNotesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update note information for a specific property based on noteCode, hotelId, hotelNotesToBeChanged. <p><strong>OperationId:</strong>changeHotelNotes</p>
     * Update Note information
     */
    async changeHotelNotes(requestParameters: ChangeHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update rate range information for a specific property based on hotelId, hotelRateRangesToBeChanged. <p><strong>OperationId:</strong>changeHotelRateRanges</p>
     * Update Rate Range information
     */
    async changeHotelRateRangesRaw(requestParameters: ChangeHotelRateRangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelRateRangesRequestToJSON(requestParameters.hotelRateRangesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update rate range information for a specific property based on hotelId, hotelRateRangesToBeChanged. <p><strong>OperationId:</strong>changeHotelRateRanges</p>
     * Update Rate Range information
     */
    async changeHotelRateRanges(requestParameters: ChangeHotelRateRangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelRateRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update restaurant information for a specific property based on restaurantCode, hotelId, hotelRestaurantsToBeChanged. <p><strong>OperationId:</strong>changeHotelRestaurants</p>
     * Update the restaurant information
     */
    async changeHotelRestaurantsRaw(requestParameters: ChangeHotelRestaurantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restaurants/{restaurantCode}`.replace(`{${"restaurantCode"}}`, encodeURIComponent(String(requestParameters.restaurantCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeHotelRestaurantsRequestToJSON(requestParameters.hotelRestaurantsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update restaurant information for a specific property based on restaurantCode, hotelId, hotelRestaurantsToBeChanged. <p><strong>OperationId:</strong>changeHotelRestaurants</p>
     * Update the restaurant information
     */
    async changeHotelRestaurants(requestParameters: ChangeHotelRestaurantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeHotelRestaurantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update job titles for a specific property based on jobTitleCode, hotelId, jobTitlesToBeChanged. <p><strong>OperationId:</strong>changeJobTitles</p>
     * Change resort job titles
     */
    async changeJobTitlesRaw(requestParameters: ChangeJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/jobTitles/{jobTitleCode}`.replace(`{${"jobTitleCode"}}`, encodeURIComponent(String(requestParameters.jobTitleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeJobTitlesRequestToJSON(requestParameters.jobTitlesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update job titles for a specific property based on jobTitleCode, hotelId, jobTitlesToBeChanged. <p><strong>OperationId:</strong>changeJobTitles</p>
     * Change resort job titles
     */
    async changeJobTitles(requestParameters: ChangeJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update languages based on languageCode, languagesToBeChanged. <p><strong>OperationId:</strong>changeLanguages</p>
     * Update a Language
     */
    async changeLanguagesRaw(requestParameters: ChangeLanguagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/languages/{languageCode}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeLanguagesRequestToJSON(requestParameters.languagesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update languages based on languageCode, languagesToBeChanged. <p><strong>OperationId:</strong>changeLanguages</p>
     * Update a Language
     */
    async changeLanguages(requestParameters: ChangeLanguagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update marketing cities for a specific property based on cityCode, hotelId, marketingCitiesToBeChanged. <p><strong>OperationId:</strong>changeMarketingCities</p>
     * Change resort marketing cities
     */
    async changeMarketingCitiesRaw(requestParameters: ChangeMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketingCities/{cityCode}`.replace(`{${"cityCode"}}`, encodeURIComponent(String(requestParameters.cityCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeMarketingCitiesRequestToJSON(requestParameters.marketingCitiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update marketing cities for a specific property based on cityCode, hotelId, marketingCitiesToBeChanged. <p><strong>OperationId:</strong>changeMarketingCities</p>
     * Change resort marketing cities
     */
    async changeMarketingCities(requestParameters: ChangeMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update telephone book categories for a specific property based on categoryCode, hotelId, telephoneBookCategoriesToBeChanged. <p><strong>OperationId:</strong>changeTelephoneBookCategories</p>
     * Change Telephone Book Category
     */
    async changeTelephoneBookCategoriesRaw(requestParameters: ChangeTelephoneBookCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTelephoneBookCategoriesRequestToJSON(requestParameters.telephoneBookCategoriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update telephone book categories for a specific property based on categoryCode, hotelId, telephoneBookCategoriesToBeChanged. <p><strong>OperationId:</strong>changeTelephoneBookCategories</p>
     * Change Telephone Book Category
     */
    async changeTelephoneBookCategories(requestParameters: ChangeTelephoneBookCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTelephoneBookCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update telephone book entries for a specific property based on entryId, hotelId, telephoneBookEntriesToBeChanged. <p><strong>OperationId:</strong>changeTelephoneBookEntries</p>
     * Create Telephone Book Entries
     */
    async changeTelephoneBookEntriesRaw(requestParameters: ChangeTelephoneBookEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookEntries/{entryId}`.replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTelephoneBookEntriesRequestToJSON(requestParameters.telephoneBookEntriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update telephone book entries for a specific property based on entryId, hotelId, telephoneBookEntriesToBeChanged. <p><strong>OperationId:</strong>changeTelephoneBookEntries</p>
     * Create Telephone Book Entries
     */
    async changeTelephoneBookEntries(requestParameters: ChangeTelephoneBookEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTelephoneBookEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update airport templates based on airportCode, templateAirportsToBeChanged. <p><strong>OperationId:</strong>changeTemplateAirports</p>
     * Change template airports
     */
    async changeTemplateAirportsRaw(requestParameters: ChangeTemplateAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/airports/{airportCode}`.replace(`{${"airportCode"}}`, encodeURIComponent(String(requestParameters.airportCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateAirportsRequestToJSON(requestParameters.templateAirportsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update airport templates based on airportCode, templateAirportsToBeChanged. <p><strong>OperationId:</strong>changeTemplateAirports</p>
     * Change template airports
     */
    async changeTemplateAirports(requestParameters: ChangeTemplateAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update amenity templates based on featureCode, templateAmenitiesToBeChanged. <p><strong>OperationId:</strong>changeTemplateAmenities</p>
     * Change template amenities
     */
    async changeTemplateAmenitiesRaw(requestParameters: ChangeTemplateAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/amenities/{featureCode}`.replace(`{${"featureCode"}}`, encodeURIComponent(String(requestParameters.featureCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateAmenitiesRequestToJSON(requestParameters.templateAmenitiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update amenity templates based on featureCode, templateAmenitiesToBeChanged. <p><strong>OperationId:</strong>changeTemplateAmenities</p>
     * Change template amenities
     */
    async changeTemplateAmenities(requestParameters: ChangeTemplateAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update country templates based on countryCode, templateCountriesToBeChanged. <p><strong>OperationId:</strong>changeTemplateCountries</p>
     * Change template Countries
     */
    async changeTemplateCountriesRaw(requestParameters: ChangeTemplateCountriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries/{countryCode}`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateCountriesRequestToJSON(requestParameters.templateCountriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update country templates based on countryCode, templateCountriesToBeChanged. <p><strong>OperationId:</strong>changeTemplateCountries</p>
     * Change template Countries
     */
    async changeTemplateCountries(requestParameters: ChangeTemplateCountriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update day type code templates based on templateDayTypeCodesToBeChanged. <p><strong>OperationId:</strong>changeTemplateDayTypeCodes</p>
     * Change Template Day Type Codes
     */
    async changeTemplateDayTypeCodesRaw(requestParameters: ChangeTemplateDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dayTypeCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateDayTypeCodesRequestToJSON(requestParameters.templateDayTypeCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update day type code templates based on templateDayTypeCodesToBeChanged. <p><strong>OperationId:</strong>changeTemplateDayTypeCodes</p>
     * Change Template Day Type Codes
     */
    async changeTemplateDayTypeCodes(requestParameters: ChangeTemplateDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update template hotel details based on templateHotelDetailsToBeChanged. <p><strong>OperationId:</strong>changeTemplateHotelDetails</p>
     * Change hotel details specified at the template level
     */
    async changeTemplateHotelDetailsRaw(requestParameters: ChangeTemplateHotelDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelDetails`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateHotelDetailsRequestToJSON(requestParameters.templateHotelDetailsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update template hotel details based on templateHotelDetailsToBeChanged. <p><strong>OperationId:</strong>changeTemplateHotelDetails</p>
     * Change hotel details specified at the template level
     */
    async changeTemplateHotelDetails(requestParameters: ChangeTemplateHotelDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update job title templates based on jobTitleCode, templateJobTitlesToBeChanged. <p><strong>OperationId:</strong>changeTemplateJobTitles</p>
     * Change template job titles
     */
    async changeTemplateJobTitlesRaw(requestParameters: ChangeTemplateJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/jobTitles/{jobTitleCode}`.replace(`{${"jobTitleCode"}}`, encodeURIComponent(String(requestParameters.jobTitleCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateJobTitlesRequestToJSON(requestParameters.templateJobTitlesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update job title templates based on jobTitleCode, templateJobTitlesToBeChanged. <p><strong>OperationId:</strong>changeTemplateJobTitles</p>
     * Change template job titles
     */
    async changeTemplateJobTitles(requestParameters: ChangeTemplateJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update marketing city templates based on cityCode, templateMarketingCitiesToBeChanged. <p><strong>OperationId:</strong>changeTemplateMarketingCities</p>
     * Change template marketing cities
     */
    async changeTemplateMarketingCitiesRaw(requestParameters: ChangeTemplateMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingCities/{cityCode}`.replace(`{${"cityCode"}}`, encodeURIComponent(String(requestParameters.cityCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateMarketingCitiesRequestToJSON(requestParameters.templateMarketingCitiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update marketing city templates based on cityCode, templateMarketingCitiesToBeChanged. <p><strong>OperationId:</strong>changeTemplateMarketingCities</p>
     * Change template marketing cities
     */
    async changeTemplateMarketingCities(requestParameters: ChangeTemplateMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update transportation for a specific property based on transportationCode, hotelId, transportationToBeChanged. <p><strong>OperationId:</strong>changeTransportation</p>
     *  modify transportation
     */
    async changeTransportationRaw(requestParameters: ChangeTransportationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transportations/{transportationCode}`.replace(`{${"transportationCode"}}`, encodeURIComponent(String(requestParameters.transportationCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTransportationRequestToJSON(requestParameters.transportationToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update transportation for a specific property based on transportationCode, hotelId, transportationToBeChanged. <p><strong>OperationId:</strong>changeTransportation</p>
     *  modify transportation
     */
    async changeTransportation(requestParameters: ChangeTransportationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update transportation templates based on transportationCode,  transportationTemplatesToBeChanged. <p><strong>OperationId:</strong>changeTransportationTemplates</p>
     * Change transportation templates
     */
    async changeTransportationTemplatesRaw(requestParameters: ChangeTransportationTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transportations/{transportationCode}`.replace(`{${"transportationCode"}}`, encodeURIComponent(String(requestParameters.transportationCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTransportationTemplatesRequestToJSON(requestParameters.transportationTemplatesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update transportation templates based on transportationCode,  transportationTemplatesToBeChanged. <p><strong>OperationId:</strong>changeTransportationTemplates</p>
     * Change transportation templates
     */
    async changeTransportationTemplates(requestParameters: ChangeTransportationTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTransportationTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update yield adjustment codes for a specific property based on yieldAdjustmentCode, hotelId, yieldAdjustmentCodesToBeChanged. <p><strong>OperationId:</strong>changeYieldAdjustmentCodes</p>
     * Change Yield Adjustment Codes
     */
    async changeYieldAdjustmentCodesRaw(requestParameters: ChangeYieldAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldAdjustmentCodes/{yieldAdjustmentCode}`.replace(`{${"yieldAdjustmentCode"}}`, encodeURIComponent(String(requestParameters.yieldAdjustmentCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeYieldAdjustmentCodesRequestToJSON(requestParameters.yieldAdjustmentCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update yield adjustment codes for a specific property based on yieldAdjustmentCode, hotelId, yieldAdjustmentCodesToBeChanged. <p><strong>OperationId:</strong>changeYieldAdjustmentCodes</p>
     * Change Yield Adjustment Codes
     */
    async changeYieldAdjustmentCodes(requestParameters: ChangeYieldAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeYieldAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update yield categories for a specific property based on code, hotelId, yieldCategoriesToBeChanged. <p><strong>OperationId:</strong>changeYieldCategories</p>
     * Change Yield Category
     */
    async changeYieldCategoriesRaw(requestParameters: ChangeYieldCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldCategories/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeYieldCategoriesRequestToJSON(requestParameters.yieldCategoriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update yield categories for a specific property based on code, hotelId, yieldCategoriesToBeChanged. <p><strong>OperationId:</strong>changeYieldCategories</p>
     * Change Yield Category
     */
    async changeYieldCategories(requestParameters: ChangeYieldCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeYieldCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update yield market types based on yieldMarketTypesToBeChanged. <p><strong>OperationId:</strong>changeYieldMarketTypes</p>
     * Change Yield Market Types
     */
    async changeYieldMarketTypesRaw(requestParameters: ChangeYieldMarketTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/yieldMarketTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeYieldMarketTypesRequestToJSON(requestParameters.yieldMarketTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update yield market types based on yieldMarketTypesToBeChanged. <p><strong>OperationId:</strong>changeYieldMarketTypes</p>
     * Change Yield Market Types
     */
    async changeYieldMarketTypes(requestParameters: ChangeYieldMarketTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeYieldMarketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Departments. <p><strong>OperationId:</strong>copyDepartments</p>
     *  copy Departments
     */
    async copyDepartmentsRaw(requestParameters: CopyDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/departments/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyDepartmentsRequestToJSON(requestParameters.copyDepartments),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Departments. <p><strong>OperationId:</strong>copyDepartments</p>
     *  copy Departments
     */
    async copyDepartments(requestParameters: CopyDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to copy template hotel details to other properties. <p><strong>OperationId:</strong>copyHotelDetails</p>
     * Copy template hotel details to other properties
     */
    async copyHotelDetailsRaw(requestParameters: CopyHotelDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelDetails/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyHotelDetailsRequestToJSON(requestParameters.copyHotelDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to copy template hotel details to other properties. <p><strong>OperationId:</strong>copyHotelDetails</p>
     * Copy template hotel details to other properties
     */
    async copyHotelDetails(requestParameters: CopyHotelDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy marketing cities to resorts. <p><strong>OperationId:</strong>copyMarketingCities</p>
     * Copy marketing cities to resorts
     */
    async copyMarketingCitiesRaw(requestParameters: CopyMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingCities/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyMarketingCitiesRequestToJSON(requestParameters.copyMarketingCities),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy marketing cities to resorts. <p><strong>OperationId:</strong>copyMarketingCities</p>
     * Copy marketing cities to resorts
     */
    async copyMarketingCities(requestParameters: CopyMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to Copy a Template Rate Category in order to create a new Template Rate Category. <p><strong>OperationId:</strong>copyTemplateCodes</p>
     * Copy Template Codes
     */
    async copyTemplateCodesRaw(requestParameters: CopyTemplateCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTemplateCodesRequestToJSON(requestParameters.copyTemplateCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to Copy a Template Rate Category in order to create a new Template Rate Category. <p><strong>OperationId:</strong>copyTemplateCodes</p>
     * Copy Template Codes
     */
    async copyTemplateCodes(requestParameters: CopyTemplateCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTemplateCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Yield Adjustment Codes. <p><strong>OperationId:</strong>copyYieldAdjustmentCodes</p>
     *  copy Yield Adjustment Codes
     */
    async copyYieldAdjustmentCodesRaw(requestParameters: CopyYieldAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/yieldAdjustmentCodes/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyYieldAdjustmentCodesRequestToJSON(requestParameters.copyYieldAdjustmentCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Yield Adjustment Codes. <p><strong>OperationId:</strong>copyYieldAdjustmentCodes</p>
     *  copy Yield Adjustment Codes
     */
    async copyYieldAdjustmentCodes(requestParameters: CopyYieldAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyYieldAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Yield Category. <p><strong>OperationId:</strong>copyYieldCategories</p>
     *  copy Yield Category
     */
    async copyYieldCategoriesRaw(requestParameters: CopyYieldCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/yieldCategories/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyYieldCategoriesRequestToJSON(requestParameters.copyYieldCategories),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Yield Category. <p><strong>OperationId:</strong>copyYieldCategories</p>
     *  copy Yield Category
     */
    async copyYieldCategories(requestParameters: CopyYieldCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyYieldCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get resort airports. <p><strong>OperationId:</strong>getAirports</p>
     * Get resort airports
     */
    async getAirportsRaw(requestParameters: GetAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AirportsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.airportCodes) {
            queryParameters['airportCodes'] = requestParameters.airportCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/airports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AirportsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get resort airports. <p><strong>OperationId:</strong>getAirports</p>
     * Get resort airports
     */
    async getAirports(requestParameters: GetAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AirportsDetails> {
        const response = await this.getAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get amenities. <p><strong>OperationId:</strong>getAmenities</p>
     * Get amenities
     */
    async getAmenitiesRaw(requestParameters: GetAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AmenitiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.general !== undefined) {
            queryParameters['general'] = requestParameters.general;
        }

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.amenityCodes) {
            queryParameters['amenityCodes'] = requestParameters.amenityCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/amenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmenitiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get amenities. <p><strong>OperationId:</strong>getAmenities</p>
     * Get amenities
     */
    async getAmenities(requestParameters: GetAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AmenitiesDetails> {
        const response = await this.getAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API accepts the attraction template request search criteria and fetches the attraction templates that match the criteria. <p><strong>OperationId:</strong>getAttractionTemplates</p>
     * Get Attraction Template
     */
    async getAttractionTemplatesRaw(requestParameters: GetAttractionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttractionTemplatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.attractionCodes) {
            queryParameters['attractionCodes'] = requestParameters.attractionCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.classCodes) {
            queryParameters['classCodes'] = requestParameters.classCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttractionTemplatesDetailsFromJSON(jsonValue));
    }

    /**
     * This API accepts the attraction template request search criteria and fetches the attraction templates that match the criteria. <p><strong>OperationId:</strong>getAttractionTemplates</p>
     * Get Attraction Template
     */
    async getAttractionTemplates(requestParameters: GetAttractionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttractionTemplatesDetails> {
        const response = await this.getAttractionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Attractions. <p><strong>OperationId:</strong>getAttractions</p>
     * Get Attractions
     */
    async getAttractionsRaw(requestParameters: GetAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttractionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.attractionCodes) {
            queryParameters['attractionCodes'] = requestParameters.attractionCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.classCodes) {
            queryParameters['classCodes'] = requestParameters.classCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttractionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Attractions. <p><strong>OperationId:</strong>getAttractions</p>
     * Get Attractions
     */
    async getAttractions(requestParameters: GetAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttractionsDetails> {
        const response = await this.getAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Fetch Configuration Activity logs from Activity Group or Type. <p><strong>OperationId:</strong>getConfigActivityLog</p>
     * Get Configuration Activity Logs
     */
    async getConfigActivityLogRaw(requestParameters: GetConfigActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfigActivityLogDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userByIds) {
            queryParameters['userByIds'] = requestParameters.userByIds;
        }

        if (requestParameters.userForIds) {
            queryParameters['userForIds'] = requestParameters.userForIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/configurations/activityLogs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfigActivityLogDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to Fetch Configuration Activity logs from Activity Group or Type. <p><strong>OperationId:</strong>getConfigActivityLog</p>
     * Get Configuration Activity Logs
     */
    async getConfigActivityLog(requestParameters: GetConfigActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfigActivityLogDetails> {
        const response = await this.getConfigActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Countries. <p><strong>OperationId:</strong>getCountries</p>
     * Get Countries
     */
    async getCountriesRaw(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CountriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.countriesCodes) {
            queryParameters['countriesCodes'] = requestParameters.countriesCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/countries`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Countries. <p><strong>OperationId:</strong>getCountries</p>
     * Get Countries
     */
    async getCountries(requestParameters: GetCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CountriesDetails> {
        const response = await this.getCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Credit Card Types. <p><strong>OperationId:</strong>getCreditCardTypes</p>
     * Get Credit Card Types
     */
    async getCreditCardTypesRaw(requestParameters: GetCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Credit Card Types. <p><strong>OperationId:</strong>getCreditCardTypes</p>
     * Get Credit Card Types
     */
    async getCreditCardTypes(requestParameters: GetCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardTypesDetails> {
        const response = await this.getCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the currency exchange rates when using this API. <p><strong>OperationId:</strong>getCurrencyExchangeRates</p>
     * Get Currency Exchange Rates
     */
    async getCurrencyExchangeRatesRaw(requestParameters: GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeRatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.exchangeType !== undefined) {
            queryParameters['exchangeType'] = requestParameters.exchangeType;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.currencyCodes) {
            queryParameters['currencyCodes'] = requestParameters.currencyCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeRates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeRatesDetailsFromJSON(jsonValue));
    }

    /**
     * Fetch the currency exchange rates when using this API. <p><strong>OperationId:</strong>getCurrencyExchangeRates</p>
     * Get Currency Exchange Rates
     */
    async getCurrencyExchangeRates(requestParameters: GetCurrencyExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeRatesDetails> {
        const response = await this.getCurrencyExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Departments. <p><strong>OperationId:</strong>getDepartments</p>
     * Get Departments
     */
    async getDepartmentsRaw(requestParameters: GetDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepartmentsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.departmentCodes) {
            queryParameters['departmentCodes'] = requestParameters.departmentCodes;
        }

        if (requestParameters.departmentWildCard !== undefined) {
            queryParameters['departmentWildCard'] = requestParameters.departmentWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepartmentsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Departments. <p><strong>OperationId:</strong>getDepartments</p>
     * Get Departments
     */
    async getDepartments(requestParameters: GetDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepartmentsDetails> {
        const response = await this.getDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return hotel configuration information details for a specific property.  Specific areas of configuration can be returned based on the fetchInstructions query parameter such as General, Attraction, Airports, Alternatehotels, Raterange, etc.<p><strong>OperationId:</strong>getHotel</p>
     * Get hotel property configuration details
     */
    async getHotelRaw(requestParameters: GetHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return hotel configuration information details for a specific property.  Specific areas of configuration can be returned based on the fetchInstructions query parameter such as General, Attraction, Airports, Alternatehotels, Raterange, etc.<p><strong>OperationId:</strong>getHotel</p>
     * Get hotel property configuration details
     */
    async getHotel(requestParameters: GetHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelDetails> {
        const response = await this.getHotelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API Use this API to gets the hotel brochure information based on the search criteria. The Hotel code and a set of instructions can be sent as part of the request message. <p><strong>OperationId:</strong>getHotelBrochure</p>
     * Get Hotel Brochure
     */
    async getHotelBrochureRaw(requestParameters: GetHotelBrochureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelBrochureDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hotelBrochure`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelBrochureDetailsFromJSON(jsonValue));
    }

    /**
     * This API Use this API to gets the hotel brochure information based on the search criteria. The Hotel code and a set of instructions can be sent as part of the request message. <p><strong>OperationId:</strong>getHotelBrochure</p>
     * Get Hotel Brochure
     */
    async getHotelBrochure(requestParameters: GetHotelBrochureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelBrochureDetails> {
        const response = await this.getHotelBrochureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get detailed information of calendar entries for a date range. <p><strong>OperationId:</strong>getHotelCalendar</p>
     * Get Hotel Calendar
     */
    async getHotelCalendarRaw(requestParameters: GetHotelCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelCalendarDetails>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/calendar`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelCalendarDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get detailed information of calendar entries for a date range. <p><strong>OperationId:</strong>getHotelCalendar</p>
     * Get Hotel Calendar
     */
    async getHotelCalendar(requestParameters: GetHotelCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelCalendarDetails> {
        const response = await this.getHotelCalendarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Hotel Day Type Codes. <p><strong>OperationId:</strong>getHotelDayTypeCodes</p>
     * Get Hotel Day Type Codes
     */
    async getHotelDayTypeCodesRaw(requestParameters: GetHotelDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelDayTypeCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.dayTypesCodes) {
            queryParameters['dayTypesCodes'] = requestParameters.dayTypesCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dayTypeCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelDayTypeCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Hotel Day Type Codes. <p><strong>OperationId:</strong>getHotelDayTypeCodes</p>
     * Get Hotel Day Type Codes
     */
    async getHotelDayTypeCodes(requestParameters: GetHotelDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelDayTypeCodesDetails> {
        const response = await this.getHotelDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get hotel details. <p><strong>OperationId:</strong>getHotelDetails</p>
     * Get hotel details 
     */
    async getHotelDetailsRaw(requestParameters: GetHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelDetailsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.hotelDetailCodes) {
            queryParameters['hotelDetailCodes'] = requestParameters.hotelDetailCodes;
        }

        if (requestParameters.hotelDetailCategoriesCodes) {
            queryParameters['hotelDetailCategoriesCodes'] = requestParameters.hotelDetailCategoriesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hotelDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelDetailsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get hotel details. <p><strong>OperationId:</strong>getHotelDetails</p>
     * Get hotel details 
     */
    async getHotelDetails(requestParameters: GetHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelDetailsDetails> {
        const response = await this.getHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return hotel configuration information based on search criteria such as hotelId, name.<p><strong>OperationId:</strong>getHotels</p>
     * Get property configuration
     */
    async getHotelsRaw(requestParameters: GetHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return hotel configuration information based on search criteria such as hotelId, name.<p><strong>OperationId:</strong>getHotels</p>
     * Get property configuration
     */
    async getHotels(requestParameters: GetHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelsDetails> {
        const response = await this.getHotelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get resort job titles. <p><strong>OperationId:</strong>getJobTitles</p>
     * Get resort job titles
     */
    async getJobTitlesRaw(requestParameters: GetJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobTitlesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.jobTitleCodes) {
            queryParameters['jobTitleCodes'] = requestParameters.jobTitleCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/jobTitles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobTitlesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get resort job titles. <p><strong>OperationId:</strong>getJobTitles</p>
     * Get resort job titles
     */
    async getJobTitles(requestParameters: GetJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobTitlesDetails> {
        const response = await this.getJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Languages. <p><strong>OperationId:</strong>getLanguages</p>
     * Get Languages
     */
    async getLanguagesRaw(requestParameters: GetLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LanguagesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.languageCodes) {
            queryParameters['languageCodes'] = requestParameters.languageCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.useAsAlternateLanguage !== undefined) {
            queryParameters['useAsAlternateLanguage'] = requestParameters.useAsAlternateLanguage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/languages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguagesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Languages. <p><strong>OperationId:</strong>getLanguages</p>
     * Get Languages
     */
    async getLanguages(requestParameters: GetLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LanguagesDetails> {
        const response = await this.getLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get resort marketing cities. <p><strong>OperationId:</strong>getMarketingCities</p>
     * Get resort marketing cities
     */
    async getMarketingCitiesRaw(requestParameters: GetMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketingCitiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.marketingCitys) {
            queryParameters['marketingCitys'] = requestParameters.marketingCitys;
        }

        if (requestParameters.regionCodes) {
            queryParameters['regionCodes'] = requestParameters.regionCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketingCities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketingCitiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get resort marketing cities. <p><strong>OperationId:</strong>getMarketingCities</p>
     * Get resort marketing cities
     */
    async getMarketingCities(requestParameters: GetMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketingCitiesDetails> {
        const response = await this.getMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will retrieve general contextual information for the specified hotel such as business date. <p><strong>OperationId:</strong>getOperaHotelContext</p>
     * Get Opera Hotel Context
     */
    async getOperaHotelContextRaw(requestParameters: GetOperaHotelContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaHotelContextDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/operaContext`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaHotelContextDetailsFromJSON(jsonValue));
    }

    /**
     * This API will retrieve general contextual information for the specified hotel such as business date. <p><strong>OperationId:</strong>getOperaHotelContext</p>
     * Get Opera Hotel Context
     */
    async getOperaHotelContext(requestParameters: GetOperaHotelContextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaHotelContextDetails> {
        const response = await this.getOperaHotelContextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get OPERA Parameters. <p><strong>OperationId:</strong>getOperaParameters</p>
     * Get OPERA Parameters
     */
    async getOperaParametersRaw(requestParameters: GetOperaParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaParametersDetails>> {
        const queryParameters: any = {};

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/parameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaParametersDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get OPERA Parameters. <p><strong>OperationId:</strong>getOperaParameters</p>
     * Get OPERA Parameters
     */
    async getOperaParameters(requestParameters: GetOperaParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaParametersDetails> {
        const response = await this.getOperaParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return OPERA controls based on search criteria such as hotelId, cROCode, parameterNameWildCard.<p><strong>OperationId:</strong>getOperaSettings</p>
     * Get OPERA controls
     */
    async getOperaSettingsRaw(requestParameters: GetOperaSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaSettingsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.cROCode !== undefined) {
            queryParameters['cROCode'] = requestParameters.cROCode;
        }

        if (requestParameters.parameterNameWildCard !== undefined) {
            queryParameters['parameterNameWildCard'] = requestParameters.parameterNameWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaSettingsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return OPERA controls based on search criteria such as hotelId, cROCode, parameterNameWildCard.<p><strong>OperationId:</strong>getOperaSettings</p>
     * Get OPERA controls
     */
    async getOperaSettings(requestParameters: GetOperaSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaSettingsDetails> {
        const response = await this.getOperaSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get detailed information of calendar entries for a date range. <p><strong>OperationId:</strong>getPropertyCalendar</p>
     * Get Hotel Calendar
     */
    async getPropertyCalendarRaw(requestParameters: GetPropertyCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelCalendarDetails>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/calendar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelCalendarDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get detailed information of calendar entries for a date range. <p><strong>OperationId:</strong>getPropertyCalendar</p>
     * Get Hotel Calendar
     */
    async getPropertyCalendar(requestParameters: GetPropertyCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelCalendarDetails> {
        const response = await this.getPropertyCalendarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Telephone Book Category. <p><strong>OperationId:</strong>getTelephoneBookCategories</p>
     * Get Telephone Book Category
     */
    async getTelephoneBookCategoriesRaw(requestParameters: GetTelephoneBookCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelephoneBookCategoriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelephoneBookCategoriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Telephone Book Category. <p><strong>OperationId:</strong>getTelephoneBookCategories</p>
     * Get Telephone Book Category
     */
    async getTelephoneBookCategories(requestParameters: GetTelephoneBookCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelephoneBookCategoriesDetails> {
        const response = await this.getTelephoneBookCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Telephone Book Entries. <p><strong>OperationId:</strong>getTelephoneBookEntries</p>
     * Get Telephone Book Entries
     */
    async getTelephoneBookEntriesRaw(requestParameters: GetTelephoneBookEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TelephoneBookEntriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookEntries`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TelephoneBookEntriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Telephone Book Entries. <p><strong>OperationId:</strong>getTelephoneBookEntries</p>
     * Get Telephone Book Entries
     */
    async getTelephoneBookEntries(requestParameters: GetTelephoneBookEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TelephoneBookEntriesDetails> {
        const response = await this.getTelephoneBookEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template airports. <p><strong>OperationId:</strong>getTemplateAirports</p>
     * Get template airports
     */
    async getTemplateAirportsRaw(requestParameters: GetTemplateAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateAirportsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.airportCodes) {
            queryParameters['airportCodes'] = requestParameters.airportCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/airports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateAirportsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template airports. <p><strong>OperationId:</strong>getTemplateAirports</p>
     * Get template airports
     */
    async getTemplateAirports(requestParameters: GetTemplateAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateAirportsDetails> {
        const response = await this.getTemplateAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to get template amenities. <p><strong>OperationId:</strong>getTemplateAmenities</p>
     *  Get template amenities
     */
    async getTemplateAmenitiesRaw(requestParameters: GetTemplateAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateAmenitiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.general !== undefined) {
            queryParameters['general'] = requestParameters.general;
        }

        if (requestParameters.meeting !== undefined) {
            queryParameters['meeting'] = requestParameters.meeting;
        }

        if (requestParameters.amenityCodes) {
            queryParameters['amenityCodes'] = requestParameters.amenityCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/amenities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateAmenitiesDetailsFromJSON(jsonValue));
    }

    /**
     *  Use this API to get template amenities. <p><strong>OperationId:</strong>getTemplateAmenities</p>
     *  Get template amenities
     */
    async getTemplateAmenities(requestParameters: GetTemplateAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateAmenitiesDetails> {
        const response = await this.getTemplateAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template Countries. <p><strong>OperationId:</strong>getTemplateCountries</p>
     * Get template Countries
     */
    async getTemplateCountriesRaw(requestParameters: GetTemplateCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateCountriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.countriesCodes) {
            queryParameters['countriesCodes'] = requestParameters.countriesCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateCountriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template Countries. <p><strong>OperationId:</strong>getTemplateCountries</p>
     * Get template Countries
     */
    async getTemplateCountries(requestParameters: GetTemplateCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateCountriesDetails> {
        const response = await this.getTemplateCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Template Day Type Codes. <p><strong>OperationId:</strong>getTemplateDayTypeCodes</p>
     * Get Template Day Type Codes
     */
    async getTemplateDayTypeCodesRaw(requestParameters: GetTemplateDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateDayTypeCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.dayTypesCodes) {
            queryParameters['dayTypesCodes'] = requestParameters.dayTypesCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dayTypeCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateDayTypeCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Template Day Type Codes. <p><strong>OperationId:</strong>getTemplateDayTypeCodes</p>
     * Get Template Day Type Codes
     */
    async getTemplateDayTypeCodes(requestParameters: GetTemplateDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateDayTypeCodesDetails> {
        const response = await this.getTemplateDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get hotel details specified at the template level. <p><strong>OperationId:</strong>getTemplateHotelDetails</p>
     * Get hotel details specified at the template level
     */
    async getTemplateHotelDetailsRaw(requestParameters: GetTemplateHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateHotelDetailsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelDetailCodes) {
            queryParameters['hotelDetailCodes'] = requestParameters.hotelDetailCodes;
        }

        if (requestParameters.hotelDetailCategoriesCodes) {
            queryParameters['hotelDetailCategoriesCodes'] = requestParameters.hotelDetailCategoriesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelDetails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateHotelDetailsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get hotel details specified at the template level. <p><strong>OperationId:</strong>getTemplateHotelDetails</p>
     * Get hotel details specified at the template level
     */
    async getTemplateHotelDetails(requestParameters: GetTemplateHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateHotelDetailsDetails> {
        const response = await this.getTemplateHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template job titles. <p><strong>OperationId:</strong>getTemplateJobTitles</p>
     * Get template job titles
     */
    async getTemplateJobTitlesRaw(requestParameters: GetTemplateJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateJobTitlesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.jobTitleCodes) {
            queryParameters['jobTitleCodes'] = requestParameters.jobTitleCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/jobTitles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateJobTitlesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template job titles. <p><strong>OperationId:</strong>getTemplateJobTitles</p>
     * Get template job titles
     */
    async getTemplateJobTitles(requestParameters: GetTemplateJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateJobTitlesDetails> {
        const response = await this.getTemplateJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template marketing cities. <p><strong>OperationId:</strong>getTemplateMarketingCities</p>
     * Get template marketing cities
     */
    async getTemplateMarketingCitiesRaw(requestParameters: GetTemplateMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateMarketingCitiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.marketingCitys) {
            queryParameters['marketingCitys'] = requestParameters.marketingCitys;
        }

        if (requestParameters.regionCodes) {
            queryParameters['regionCodes'] = requestParameters.regionCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingCities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateMarketingCitiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template marketing cities. <p><strong>OperationId:</strong>getTemplateMarketingCities</p>
     * Get template marketing cities
     */
    async getTemplateMarketingCities(requestParameters: GetTemplateMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateMarketingCitiesDetails> {
        const response = await this.getTemplateMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get transportation. <p><strong>OperationId:</strong>getTransportation</p>
     * Get transportation
     */
    async getTransportationRaw(requestParameters: GetTransportationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportationDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transportations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get transportation. <p><strong>OperationId:</strong>getTransportation</p>
     * Get transportation
     */
    async getTransportation(requestParameters: GetTransportationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportationDetails> {
        const response = await this.getTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get transportation templates. <p><strong>OperationId:</strong>getTransportationTemplates</p>
     * Get transportation templates
     */
    async getTransportationTemplatesRaw(requestParameters: GetTransportationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransportationTemplatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transportations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransportationTemplatesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get transportation templates. <p><strong>OperationId:</strong>getTransportationTemplates</p>
     * Get transportation templates
     */
    async getTransportationTemplates(requestParameters: GetTransportationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransportationTemplatesDetails> {
        const response = await this.getTransportationTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Yield Adjustment Codes. <p><strong>OperationId:</strong>getYieldAdjustmentCodes</p>
     * Get Yield Adjustment Codes
     */
    async getYieldAdjustmentCodesRaw(requestParameters: GetYieldAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<YieldAdjustmentCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.yieldAdjustmentCodes) {
            queryParameters['yieldAdjustmentCodes'] = requestParameters.yieldAdjustmentCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldAdjustmentCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => YieldAdjustmentCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Yield Adjustment Codes. <p><strong>OperationId:</strong>getYieldAdjustmentCodes</p>
     * Get Yield Adjustment Codes
     */
    async getYieldAdjustmentCodes(requestParameters: GetYieldAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<YieldAdjustmentCodesDetails> {
        const response = await this.getYieldAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Yield Category. <p><strong>OperationId:</strong>getYieldCategories</p>
     * Get Yield Category
     */
    async getYieldCategoriesRaw(requestParameters: GetYieldCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<YieldCategoriesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.yieldCategoriesCodes) {
            queryParameters['yieldCategoriesCodes'] = requestParameters.yieldCategoriesCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => YieldCategoriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Yield Category. <p><strong>OperationId:</strong>getYieldCategories</p>
     * Get Yield Category
     */
    async getYieldCategories(requestParameters: GetYieldCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<YieldCategoriesDetails> {
        const response = await this.getYieldCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Yield Market Types. <p><strong>OperationId:</strong>getYieldMarketTypes</p>
     * Get Yield Market Types
     */
    async getYieldMarketTypesRaw(requestParameters: GetYieldMarketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<YieldMarketTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.yieldMarketTypesCodes) {
            queryParameters['yieldMarketTypesCodes'] = requestParameters.yieldMarketTypesCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/yieldMarketTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => YieldMarketTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Yield Market Types. <p><strong>OperationId:</strong>getYieldMarketTypes</p>
     * Get Yield Market Types
     */
    async getYieldMarketTypes(requestParameters: GetYieldMarketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<YieldMarketTypesDetails> {
        const response = await this.getYieldMarketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new resort airports. <p><strong>OperationId:</strong>postAirports</p>
     * Create new resort airports
     */
    async postAirportsRaw(requestParameters: PostAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/airports`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAirportsRequestToJSON(requestParameters.airportsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new resort airports. <p><strong>OperationId:</strong>postAirports</p>
     * Create new resort airports
     */
    async postAirports(requestParameters: PostAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API Use this API to creates the hotels Alternate Hotel information. <p><strong>OperationId:</strong>postAlternateHotels</p>
     * Create Alternate Hotels
     */
    async postAlternateHotelsRaw(requestParameters: PostAlternateHotelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alternates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAlternateHotelsRequestToJSON(requestParameters.alternateHotelsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API Use this API to creates the hotels Alternate Hotel information. <p><strong>OperationId:</strong>postAlternateHotels</p>
     * Create Alternate Hotels
     */
    async postAlternateHotels(requestParameters: PostAlternateHotelsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAlternateHotelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create amenities. <p><strong>OperationId:</strong>postAmenities</p>
     * Create amenities
     */
    async postAmenitiesRaw(requestParameters: PostAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/amenities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAmenitiesRequestToJSON(requestParameters.amenitiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create amenities. <p><strong>OperationId:</strong>postAmenities</p>
     * Create amenities
     */
    async postAmenities(requestParameters: PostAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create a new attraction template based on the request. . <p><strong>OperationId:</strong>postAttractionTemplates</p>
     * Create Attraction Template
     */
    async postAttractionTemplatesRaw(requestParameters: PostAttractionTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAttractionTemplatesRequestToJSON(requestParameters.attractionTemplatesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create a new attraction template based on the request. . <p><strong>OperationId:</strong>postAttractionTemplates</p>
     * Create Attraction Template
     */
    async postAttractionTemplates(requestParameters: PostAttractionTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAttractionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to Use this API to create a new attraction for a property. . <p><strong>OperationId:</strong>postAttractions</p>
     * Create Attractions
     */
    async postAttractionsRaw(requestParameters: PostAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAttractionsRequestToJSON(requestParameters.attractionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to Use this API to create a new attraction for a property. . <p><strong>OperationId:</strong>postAttractions</p>
     * Create Attractions
     */
    async postAttractions(requestParameters: PostAttractionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Activity Log. <p><strong>OperationId:</strong>postConfigActivityLog</p>
     * Create a new Config Activity Log
     */
    async postConfigActivityLogRaw(requestParameters: PostConfigActivityLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/configurations/activityLogs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostConfigActivityLogRequestToJSON(requestParameters.createConfigActivityLogCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Activity Log. <p><strong>OperationId:</strong>postConfigActivityLog</p>
     * Create a new Config Activity Log
     */
    async postConfigActivityLog(requestParameters: PostConfigActivityLogOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postConfigActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Credit Card Types. <p><strong>OperationId:</strong>postCreditCardTypes</p>
     * Create Credit Card Types
     */
    async postCreditCardTypesRaw(requestParameters: PostCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreditCardTypesRequestToJSON(requestParameters.creditCardTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Credit Card Types. <p><strong>OperationId:</strong>postCreditCardTypes</p>
     * Create Credit Card Types
     */
    async postCreditCardTypes(requestParameters: PostCreditCardTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Departments. <p><strong>OperationId:</strong>postDepartments</p>
     * Create Departments
     */
    async postDepartmentsRaw(requestParameters: PostDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostDepartmentsRequestToJSON(requestParameters.departmentsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Departments. <p><strong>OperationId:</strong>postDepartments</p>
     * Create Departments
     */
    async postDepartments(requestParameters: PostDepartmentsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Hotel Contacts. <p><strong>OperationId:</strong>postHotelContacts</p>
     * Create Hotel Contacts
     */
    async postHotelContactsRaw(requestParameters: PostHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/contacts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelContactsRequestToJSON(requestParameters.hotelContactsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Hotel Contacts. <p><strong>OperationId:</strong>postHotelContacts</p>
     * Create Hotel Contacts
     */
    async postHotelContacts(requestParameters: PostHotelContactsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Hotel Day Type Codes. <p><strong>OperationId:</strong>postHotelDayTypeCodes</p>
     * Create Hotel Day Type Codes
     */
    async postHotelDayTypeCodesRaw(requestParameters: PostHotelDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dayTypeCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelDayTypeCodesRequestToJSON(requestParameters.hotelDayTypeCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Hotel Day Type Codes. <p><strong>OperationId:</strong>postHotelDayTypeCodes</p>
     * Create Hotel Day Type Codes
     */
    async postHotelDayTypeCodes(requestParameters: PostHotelDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Note information. <p><strong>OperationId:</strong>postHotelNotes</p>
     * Create Note information
     */
    async postHotelNotesRaw(requestParameters: PostHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/notes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelNotesRequestToJSON(requestParameters.hotelNotesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Note information. <p><strong>OperationId:</strong>postHotelNotes</p>
     * Create Note information
     */
    async postHotelNotes(requestParameters: PostHotelNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Rate Range information. <p><strong>OperationId:</strong>postHotelRateRanges</p>
     * Create Rate Range information
     */
    async postHotelRateRangesRaw(requestParameters: PostHotelRateRangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelRateRangesRequestToJSON(requestParameters.hotelRateRangesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Rate Range information. <p><strong>OperationId:</strong>postHotelRateRanges</p>
     * Create Rate Range information
     */
    async postHotelRateRanges(requestParameters: PostHotelRateRangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelRateRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create restaurant information. <p><strong>OperationId:</strong>postHotelRestaurants</p>
     * Create restaurant information
     */
    async postHotelRestaurantsRaw(requestParameters: PostHotelRestaurantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restaurants`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHotelRestaurantsRequestToJSON(requestParameters.hotelRestaurantsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create restaurant information. <p><strong>OperationId:</strong>postHotelRestaurants</p>
     * Create restaurant information
     */
    async postHotelRestaurants(requestParameters: PostHotelRestaurantsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelRestaurantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new resort job titles. <p><strong>OperationId:</strong>postJobTitles</p>
     * Create new resort job titles
     */
    async postJobTitlesRaw(requestParameters: PostJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/jobTitles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostJobTitlesRequestToJSON(requestParameters.jobTitlesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new resort job titles. <p><strong>OperationId:</strong>postJobTitles</p>
     * Create new resort job titles
     */
    async postJobTitles(requestParameters: PostJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Languages. <p><strong>OperationId:</strong>postLanguages</p>
     * Create Languages
     */
    async postLanguagesRaw(requestParameters: PostLanguagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/languages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLanguagesRequestToJSON(requestParameters.languagesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Languages. <p><strong>OperationId:</strong>postLanguages</p>
     * Create Languages
     */
    async postLanguages(requestParameters: PostLanguagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new resort marketing cities. <p><strong>OperationId:</strong>postMarketingCities</p>
     * Create new resort marketing cities
     */
    async postMarketingCitiesRaw(requestParameters: PostMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketingCities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMarketingCitiesRequestToJSON(requestParameters.marketingCitiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new resort marketing cities. <p><strong>OperationId:</strong>postMarketingCities</p>
     * Create new resort marketing cities
     */
    async postMarketingCities(requestParameters: PostMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Telephone Book Category. <p><strong>OperationId:</strong>postTelephoneBookCategories</p>
     * Create Telephone Book Category
     */
    async postTelephoneBookCategoriesRaw(requestParameters: PostTelephoneBookCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTelephoneBookCategoriesRequestToJSON(requestParameters.telephoneBookCategoriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Telephone Book Category. <p><strong>OperationId:</strong>postTelephoneBookCategories</p>
     * Create Telephone Book Category
     */
    async postTelephoneBookCategories(requestParameters: PostTelephoneBookCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTelephoneBookCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Telephone Book Entries. <p><strong>OperationId:</strong>postTelephoneBookEntries</p>
     * Create Telephone Book Entries
     */
    async postTelephoneBookEntriesRaw(requestParameters: PostTelephoneBookEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookEntries`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTelephoneBookEntriesRequestToJSON(requestParameters.telephoneBookEntriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Telephone Book Entries. <p><strong>OperationId:</strong>postTelephoneBookEntries</p>
     * Create Telephone Book Entries
     */
    async postTelephoneBookEntries(requestParameters: PostTelephoneBookEntriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTelephoneBookEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new template airports. <p><strong>OperationId:</strong>postTemplateAirports</p>
     * Create new template airports
     */
    async postTemplateAirportsRaw(requestParameters: PostTemplateAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/airports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateAirportsRequestToJSON(requestParameters.templateAirportsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new template airports. <p><strong>OperationId:</strong>postTemplateAirports</p>
     * Create new template airports
     */
    async postTemplateAirports(requestParameters: PostTemplateAirportsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create template amenities. <p><strong>OperationId:</strong>postTemplateAmenities</p>
     * Create template amenities
     */
    async postTemplateAmenitiesRaw(requestParameters: PostTemplateAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/amenities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateAmenitiesRequestToJSON(requestParameters.templateAmenitiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create template amenities. <p><strong>OperationId:</strong>postTemplateAmenities</p>
     * Create template amenities
     */
    async postTemplateAmenities(requestParameters: PostTemplateAmenitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create template Countries. <p><strong>OperationId:</strong>postTemplateCountries</p>
     * Create template Countries
     */
    async postTemplateCountriesRaw(requestParameters: PostTemplateCountriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateCountriesRequestToJSON(requestParameters.templateCountriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create template Countries. <p><strong>OperationId:</strong>postTemplateCountries</p>
     * Create template Countries
     */
    async postTemplateCountries(requestParameters: PostTemplateCountriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Template Day Type Codes. <p><strong>OperationId:</strong>postTemplateDayTypeCodes</p>
     * Create Template Day Type Codes
     */
    async postTemplateDayTypeCodesRaw(requestParameters: PostTemplateDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dayTypeCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateDayTypeCodesRequestToJSON(requestParameters.templateDayTypeCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Template Day Type Codes. <p><strong>OperationId:</strong>postTemplateDayTypeCodes</p>
     * Create Template Day Type Codes
     */
    async postTemplateDayTypeCodes(requestParameters: PostTemplateDayTypeCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create hotel details at the template level. <p><strong>OperationId:</strong>postTemplateHotelDetails</p>
     * Create hotel details at the template level
     */
    async postTemplateHotelDetailsRaw(requestParameters: PostTemplateHotelDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelDetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateHotelDetailsRequestToJSON(requestParameters.templateHotelDetailsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create hotel details at the template level. <p><strong>OperationId:</strong>postTemplateHotelDetails</p>
     * Create hotel details at the template level
     */
    async postTemplateHotelDetails(requestParameters: PostTemplateHotelDetailsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new template job titles. <p><strong>OperationId:</strong>postTemplateJobTitles</p>
     * Create new template job titles
     */
    async postTemplateJobTitlesRaw(requestParameters: PostTemplateJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/jobTitles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateJobTitlesRequestToJSON(requestParameters.templateJobTitlesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new template job titles. <p><strong>OperationId:</strong>postTemplateJobTitles</p>
     * Create new template job titles
     */
    async postTemplateJobTitles(requestParameters: PostTemplateJobTitlesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create new template marketing cities. <p><strong>OperationId:</strong>postTemplateMarketingCities</p>
     * Create new template marketing cities
     */
    async postTemplateMarketingCitiesRaw(requestParameters: PostTemplateMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingCities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateMarketingCitiesRequestToJSON(requestParameters.templateMarketingCitiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create new template marketing cities. <p><strong>OperationId:</strong>postTemplateMarketingCities</p>
     * Create new template marketing cities
     */
    async postTemplateMarketingCities(requestParameters: PostTemplateMarketingCitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transportation. <p><strong>OperationId:</strong>postTransportation</p>
     * Create transportation
     */
    async postTransportationRaw(requestParameters: PostTransportationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transportations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTransportationRequestToJSON(requestParameters.transportationCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transportation. <p><strong>OperationId:</strong>postTransportation</p>
     * Create transportation
     */
    async postTransportation(requestParameters: PostTransportationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transportation templates. <p><strong>OperationId:</strong>postTransportationTemplates</p>
     * Create transportation templates
     */
    async postTransportationTemplatesRaw(requestParameters: PostTransportationTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transportations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTransportationTemplatesRequestToJSON(requestParameters.transportationTemplatesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transportation templates. <p><strong>OperationId:</strong>postTransportationTemplates</p>
     * Create transportation templates
     */
    async postTransportationTemplates(requestParameters: PostTransportationTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransportationTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Yield Adjustment Codes. <p><strong>OperationId:</strong>postYieldAdjustmentCodes</p>
     * Create Yield Adjustment Codes
     */
    async postYieldAdjustmentCodesRaw(requestParameters: PostYieldAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldAdjustmentCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostYieldAdjustmentCodesRequestToJSON(requestParameters.yieldAdjustmentCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Yield Adjustment Codes. <p><strong>OperationId:</strong>postYieldAdjustmentCodes</p>
     * Create Yield Adjustment Codes
     */
    async postYieldAdjustmentCodes(requestParameters: PostYieldAdjustmentCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postYieldAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Yield Category. <p><strong>OperationId:</strong>postYieldCategories</p>
     * Create Yield Category
     */
    async postYieldCategoriesRaw(requestParameters: PostYieldCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldCategories`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostYieldCategoriesRequestToJSON(requestParameters.yieldCategoriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Yield Category. <p><strong>OperationId:</strong>postYieldCategories</p>
     * Create Yield Category
     */
    async postYieldCategories(requestParameters: PostYieldCategoriesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postYieldCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Yield Market Types. <p><strong>OperationId:</strong>postYieldMarketTypes</p>
     * Create Yield Market Types
     */
    async postYieldMarketTypesRaw(requestParameters: PostYieldMarketTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/yieldMarketTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostYieldMarketTypesRequestToJSON(requestParameters.yieldMarketTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Yield Market Types. <p><strong>OperationId:</strong>postYieldMarketTypes</p>
     * Create Yield Market Types
     */
    async postYieldMarketTypes(requestParameters: PostYieldMarketTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postYieldMarketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete airports for a specific property based on airportCode, hotelId. <p><strong>OperationId:</strong>removeAirports</p>
     * Delete resort airports
     */
    async removeAirportsRaw(requestParameters: RemoveAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/airports/{airportCode}`.replace(`{${"airportCode"}}`, encodeURIComponent(String(requestParameters.airportCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete airports for a specific property based on airportCode, hotelId. <p><strong>OperationId:</strong>removeAirports</p>
     * Delete resort airports
     */
    async removeAirports(requestParameters: RemoveAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete the alternate hotels for a specific property based on alternateHotelId, hotelId. <p><strong>OperationId:</strong>removeAlternateHotels</p>
     * Delete Alternate Hotels
     */
    async removeAlternateHotelsRaw(requestParameters: RemoveAlternateHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alternates/{alternateHotelId}`.replace(`{${"alternateHotelId"}}`, encodeURIComponent(String(requestParameters.alternateHotelId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete the alternate hotels for a specific property based on alternateHotelId, hotelId. <p><strong>OperationId:</strong>removeAlternateHotels</p>
     * Delete Alternate Hotels
     */
    async removeAlternateHotels(requestParameters: RemoveAlternateHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAlternateHotelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete amenities for a specific property based on featureCode, hotelId, beginDate. <p><strong>OperationId:</strong>removeAmenities</p>
     * Delete amenities
     */
    async removeAmenitiesRaw(requestParameters: RemoveAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.beginDate) {
            queryParameters['beginDate'] = requestParameters.beginDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/amenities/{featureCode}`.replace(`{${"featureCode"}}`, encodeURIComponent(String(requestParameters.featureCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete amenities for a specific property based on featureCode, hotelId, beginDate. <p><strong>OperationId:</strong>removeAmenities</p>
     * Delete amenities
     */
    async removeAmenities(requestParameters: RemoveAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete attraction templates based on attractionCode. <p><strong>OperationId:</strong>removeAttractionTemplates</p>
     * Delete an existing attraction template
     */
    async removeAttractionTemplatesRaw(requestParameters: RemoveAttractionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete attraction templates based on attractionCode. <p><strong>OperationId:</strong>removeAttractionTemplates</p>
     * Delete an existing attraction template
     */
    async removeAttractionTemplates(requestParameters: RemoveAttractionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAttractionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete attractions for a specific property based on attractionCode, hotelId, attractionCodes. <p><strong>OperationId:</strong>removeAttractions</p>
     * Delete Attractions
     */
    async removeAttractionsRaw(requestParameters: RemoveAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.attractionCodes) {
            queryParameters['attractionCodes'] = requestParameters.attractionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete attractions for a specific property based on attractionCode, hotelId, attractionCodes. <p><strong>OperationId:</strong>removeAttractions</p>
     * Delete Attractions
     */
    async removeAttractions(requestParameters: RemoveAttractionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAttractionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete attractions by code based on attractionCode. <p><strong>OperationId:</strong>removeAttractionsByCode</p>
     * Delete Attractions
     */
    async removeAttractionsByCodeRaw(requestParameters: RemoveAttractionsByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/attractions/{attractionCode}`.replace(`{${"attractionCode"}}`, encodeURIComponent(String(requestParameters.attractionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete attractions by code based on attractionCode. <p><strong>OperationId:</strong>removeAttractionsByCode</p>
     * Delete Attractions
     */
    async removeAttractionsByCode(requestParameters: RemoveAttractionsByCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAttractionsByCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete credit card types for a specific property based on hotelId, creditCardTypesCode. <p><strong>OperationId:</strong>removeCreditCardTypes</p>
     * Delete Credit Card Types
     */
    async removeCreditCardTypesRaw(requestParameters: RemoveCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.creditCardTypesCode) {
            queryParameters['creditCardTypesCode'] = requestParameters.creditCardTypesCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/creditcardTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete credit card types for a specific property based on hotelId, creditCardTypesCode. <p><strong>OperationId:</strong>removeCreditCardTypes</p>
     * Delete Credit Card Types
     */
    async removeCreditCardTypes(requestParameters: RemoveCreditCardTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCreditCardTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete day types for a date range based on criteria such as dayType, hotelId, startDate, endDate, duration. <p><strong>OperationId:</strong>removeDayTypes</p>
     * Delete day type for a date range
     */
    async removeDayTypesRaw(requestParameters: RemoveDayTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dayTypes/{dayType}`.replace(`{${"dayType"}}`, encodeURIComponent(String(requestParameters.dayType))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete day types for a date range based on criteria such as dayType, hotelId, startDate, endDate, duration. <p><strong>OperationId:</strong>removeDayTypes</p>
     * Delete day type for a date range
     */
    async removeDayTypes(requestParameters: RemoveDayTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeDayTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete departments based on departmentCode, hotelId. <p><strong>OperationId:</strong>removeDepartments</p>
     * Delete Departments
     */
    async removeDepartmentsRaw(requestParameters: RemoveDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/departments/{departmentCode}`.replace(`{${"departmentCode"}}`, encodeURIComponent(String(requestParameters.departmentCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete departments based on departmentCode, hotelId. <p><strong>OperationId:</strong>removeDepartments</p>
     * Delete Departments
     */
    async removeDepartments(requestParameters: RemoveDepartmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeDepartmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete hotel contacts for a specific property based on contactId, hotelId, idExtension. <p><strong>OperationId:</strong>removeHotelContacts</p>
     * Delete Hotel contact
     */
    async removeHotelContactsRaw(requestParameters: RemoveHotelContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/contacts/{contactId}`.replace(`{${"contactId"}}`, encodeURIComponent(String(requestParameters.contactId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete hotel contacts for a specific property based on contactId, hotelId, idExtension. <p><strong>OperationId:</strong>removeHotelContacts</p>
     * Delete Hotel contact
     */
    async removeHotelContacts(requestParameters: RemoveHotelContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete day type codes for a specific property based on hotelId, hotelIds. <p><strong>OperationId:</strong>removeHotelDayTypeCodes</p>
     * Delete Hotel Day Type Codes
     */
    async removeHotelDayTypeCodesRaw(requestParameters: RemoveHotelDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dayTypeCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete day type codes for a specific property based on hotelId, hotelIds. <p><strong>OperationId:</strong>removeHotelDayTypeCodes</p>
     * Delete Hotel Day Type Codes
     */
    async removeHotelDayTypeCodes(requestParameters: RemoveHotelDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete events for a specific property based on parameters such as eventId, hotelId, startDate, endDate, duration. <p><strong>OperationId:</strong>removeHotelEvents</p>
     * Delete Hotel Events
     */
    async removeHotelEventsRaw(requestParameters: RemoveHotelEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/events/{eventId}`.replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete events for a specific property based on parameters such as eventId, hotelId, startDate, endDate, duration. <p><strong>OperationId:</strong>removeHotelEvents</p>
     * Delete Hotel Events
     */
    async removeHotelEvents(requestParameters: RemoveHotelEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete note information based on noteCode. <p><strong>OperationId:</strong>removeHotelNotes</p>
     * Delete Note information
     */
    async removeHotelNotesRaw(requestParameters: RemoveHotelNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/notes/{noteCode}`.replace(`{${"noteCode"}}`, encodeURIComponent(String(requestParameters.noteCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete note information based on noteCode. <p><strong>OperationId:</strong>removeHotelNotes</p>
     * Delete Note information
     */
    async removeHotelNotes(requestParameters: RemoveHotelNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete rate range information for a specific property based on hotelId, startDate, endDate, duration. <p><strong>OperationId:</strong>removeHotelRateRanges</p>
     * Delete Rate Range information
     */
    async removeHotelRateRangesRaw(requestParameters: RemoveHotelRateRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete rate range information for a specific property based on hotelId, startDate, endDate, duration. <p><strong>OperationId:</strong>removeHotelRateRanges</p>
     * Delete Rate Range information
     */
    async removeHotelRateRanges(requestParameters: RemoveHotelRateRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelRateRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete restaurant information for a specific property based on restaurantCode, hotelId. <p><strong>OperationId:</strong>removeHotelRestaurants</p>
     * Delete restaurant information
     */
    async removeHotelRestaurantsRaw(requestParameters: RemoveHotelRestaurantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restaurants/{restaurantCode}`.replace(`{${"restaurantCode"}}`, encodeURIComponent(String(requestParameters.restaurantCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete restaurant information for a specific property based on restaurantCode, hotelId. <p><strong>OperationId:</strong>removeHotelRestaurants</p>
     * Delete restaurant information
     */
    async removeHotelRestaurants(requestParameters: RemoveHotelRestaurantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeHotelRestaurantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete job titles for a specific property based on jobTitleCode, hotelId. <p><strong>OperationId:</strong>removeJobTitles</p>
     * Delete resort job titles
     */
    async removeJobTitlesRaw(requestParameters: RemoveJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/jobTitles/{jobTitleCode}`.replace(`{${"jobTitleCode"}}`, encodeURIComponent(String(requestParameters.jobTitleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete job titles for a specific property based on jobTitleCode, hotelId. <p><strong>OperationId:</strong>removeJobTitles</p>
     * Delete resort job titles
     */
    async removeJobTitles(requestParameters: RemoveJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete languages based on languageCode. <p><strong>OperationId:</strong>removeLanguages</p>
     * Delete a Language
     */
    async removeLanguagesRaw(requestParameters: RemoveLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/languages/{languageCode}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete languages based on languageCode. <p><strong>OperationId:</strong>removeLanguages</p>
     * Delete a Language
     */
    async removeLanguages(requestParameters: RemoveLanguagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeLanguagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete marketing cities for a specific property based on  cityCode, hotelId, regionCode. <p><strong>OperationId:</strong>removeMarketingCities</p>
     * Delete resort marketing cities
     */
    async removeMarketingCitiesRaw(requestParameters: RemoveMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketingCities/{cityCode}`.replace(`{${"cityCode"}}`, encodeURIComponent(String(requestParameters.cityCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete marketing cities for a specific property based on  cityCode, hotelId, regionCode. <p><strong>OperationId:</strong>removeMarketingCities</p>
     * Delete resort marketing cities
     */
    async removeMarketingCities(requestParameters: RemoveMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete telephone book categories for a specific property based on categoryCode, hotelId, description, orderBy, generic. <p><strong>OperationId:</strong>removeTelephoneBookCategories</p>
     * Delete Telephone Book Category
     */
    async removeTelephoneBookCategoriesRaw(requestParameters: RemoveTelephoneBookCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.generic) {
            queryParameters['generic'] = requestParameters.generic;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookCategories/{categoryCode}`.replace(`{${"categoryCode"}}`, encodeURIComponent(String(requestParameters.categoryCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete telephone book categories for a specific property based on categoryCode, hotelId, description, orderBy, generic. <p><strong>OperationId:</strong>removeTelephoneBookCategories</p>
     * Delete Telephone Book Category
     */
    async removeTelephoneBookCategories(requestParameters: RemoveTelephoneBookCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTelephoneBookCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete telephone book entries for a specific property based on entryId, hotelId, idContext. <p><strong>OperationId:</strong>removeTelephoneBookEntries</p>
     * Delete Telephone Book Entries
     */
    async removeTelephoneBookEntriesRaw(requestParameters: RemoveTelephoneBookEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/telephoneBookEntries/{entryId}`.replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete telephone book entries for a specific property based on entryId, hotelId, idContext. <p><strong>OperationId:</strong>removeTelephoneBookEntries</p>
     * Delete Telephone Book Entries
     */
    async removeTelephoneBookEntries(requestParameters: RemoveTelephoneBookEntriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTelephoneBookEntriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete telephone book entries. <p><strong>OperationId:</strong>removeTelephoneBookEntriesWithoutHotelId</p>
     * Delete Telephone Book Entries
     */
    async removeTelephoneBookEntriesWithoutHotelIdRaw(requestParameters: RemoveTelephoneBookEntriesWithoutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/telephoneBookEntries/{entryId}`.replace(`{${"entryId"}}`, encodeURIComponent(String(requestParameters.entryId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete telephone book entries. <p><strong>OperationId:</strong>removeTelephoneBookEntriesWithoutHotelId</p>
     * Delete Telephone Book Entries
     */
    async removeTelephoneBookEntriesWithoutHotelId(requestParameters: RemoveTelephoneBookEntriesWithoutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTelephoneBookEntriesWithoutHotelIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete airport templates based on airportCode. <p><strong>OperationId:</strong>removeTemplateAirports</p>
     * Delete template airports
     */
    async removeTemplateAirportsRaw(requestParameters: RemoveTemplateAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/airports/{airportCode}`.replace(`{${"airportCode"}}`, encodeURIComponent(String(requestParameters.airportCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete airport templates based on airportCode. <p><strong>OperationId:</strong>removeTemplateAirports</p>
     * Delete template airports
     */
    async removeTemplateAirports(requestParameters: RemoveTemplateAirportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateAirportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete amenity templates based on featureCode. <p><strong>OperationId:</strong>removeTemplateAmenities</p>
     * Delete template amenities
     */
    async removeTemplateAmenitiesRaw(requestParameters: RemoveTemplateAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/amenities/{featureCode}`.replace(`{${"featureCode"}}`, encodeURIComponent(String(requestParameters.featureCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete amenity templates based on featureCode. <p><strong>OperationId:</strong>removeTemplateAmenities</p>
     * Delete template amenities
     */
    async removeTemplateAmenities(requestParameters: RemoveTemplateAmenitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateAmenitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete country templates based on countryCode. <p><strong>OperationId:</strong>removeTemplateCountries</p>
     * Delete template Countries
     */
    async removeTemplateCountriesRaw(requestParameters: RemoveTemplateCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/countries/{countryCode}`.replace(`{${"countryCode"}}`, encodeURIComponent(String(requestParameters.countryCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete country templates based on countryCode. <p><strong>OperationId:</strong>removeTemplateCountries</p>
     * Delete template Countries
     */
    async removeTemplateCountries(requestParameters: RemoveTemplateCountriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateCountriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete day type code templates based on templateDayTypeCodes. <p><strong>OperationId:</strong>removeTemplateDayTypeCodes</p>
     * Delete Template Day Type Codes
     */
    async removeTemplateDayTypeCodesRaw(requestParameters: RemoveTemplateDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.templateDayTypeCodes) {
            queryParameters['templateDayTypeCodes'] = requestParameters.templateDayTypeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dayTypeCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete day type code templates based on templateDayTypeCodes. <p><strong>OperationId:</strong>removeTemplateDayTypeCodes</p>
     * Delete Template Day Type Codes
     */
    async removeTemplateDayTypeCodes(requestParameters: RemoveTemplateDayTypeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateDayTypeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete template hotel details based on templateHotelDetailCode, templateHotelDetailCategory. <p><strong>OperationId:</strong>removeTemplateHotelDetails</p>
     * Delete hotel details specified at the template level
     */
    async removeTemplateHotelDetailsRaw(requestParameters: RemoveTemplateHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.templateHotelDetailCode) {
            queryParameters['templateHotelDetailCode'] = requestParameters.templateHotelDetailCode;
        }

        if (requestParameters.templateHotelDetailCategory) {
            queryParameters['templateHotelDetailCategory'] = requestParameters.templateHotelDetailCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelDetails`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete template hotel details based on templateHotelDetailCode, templateHotelDetailCategory. <p><strong>OperationId:</strong>removeTemplateHotelDetails</p>
     * Delete hotel details specified at the template level
     */
    async removeTemplateHotelDetails(requestParameters: RemoveTemplateHotelDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateHotelDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete job title templates based on jobTitleCode. <p><strong>OperationId:</strong>removeTemplateJobTitles</p>
     * Delete template job titles
     */
    async removeTemplateJobTitlesRaw(requestParameters: RemoveTemplateJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/jobTitles/{jobTitleCode}`.replace(`{${"jobTitleCode"}}`, encodeURIComponent(String(requestParameters.jobTitleCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete job title templates based on jobTitleCode. <p><strong>OperationId:</strong>removeTemplateJobTitles</p>
     * Delete template job titles
     */
    async removeTemplateJobTitles(requestParameters: RemoveTemplateJobTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateJobTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete marketing city templates based on cityCode, regionCode. <p><strong>OperationId:</strong>removeTemplateMarketingCities</p>
     * Delete template marketing cities
     */
    async removeTemplateMarketingCitiesRaw(requestParameters: RemoveTemplateMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketingCities/{cityCode}`.replace(`{${"cityCode"}}`, encodeURIComponent(String(requestParameters.cityCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete marketing city templates based on cityCode, regionCode. <p><strong>OperationId:</strong>removeTemplateMarketingCities</p>
     * Delete template marketing cities
     */
    async removeTemplateMarketingCities(requestParameters: RemoveTemplateMarketingCitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateMarketingCitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete transportation for a specific property based on parameters such as transportationCode, hotelId, label, orderBy, createDateTime, creatorId, extension, lastModifierId, lastModifyDateTime, etc. <p><strong>OperationId:</strong>removeTransportation</p>
     * Delete transportation
     */
    async removeTransportationRaw(requestParameters: RemoveTransportationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.label) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        if (requestParameters.extension !== undefined) {
            queryParameters['extension'] = requestParameters.extension;
        }

        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }

        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
        }

        if (requestParameters.phoneNumberOrderSequence !== undefined) {
            queryParameters['phoneNumberOrderSequence'] = requestParameters.phoneNumberOrderSequence;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.phoneTechType !== undefined) {
            queryParameters['phoneTechType'] = requestParameters.phoneTechType;
        }

        if (requestParameters.phoneUseType !== undefined) {
            queryParameters['phoneUseType'] = requestParameters.phoneUseType;
        }

        if (requestParameters.phoneUseTypeDescription !== undefined) {
            queryParameters['phoneUseTypeDescription'] = requestParameters.phoneUseTypeDescription;
        }

        if (requestParameters.phoneNumberPrimaryInd !== undefined) {
            queryParameters['phoneNumberPrimaryInd'] = requestParameters.phoneNumberPrimaryInd;
        }

        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = (requestParameters.purgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.distance !== undefined) {
            queryParameters['distance'] = requestParameters.distance;
        }

        if (requestParameters.distanceType !== undefined) {
            queryParameters['distanceType'] = requestParameters.distanceType;
        }

        if (requestParameters.drivingTime !== undefined) {
            queryParameters['drivingTime'] = requestParameters.drivingTime;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.comments) {
            queryParameters['comments'] = requestParameters.comments;
        }

        if (requestParameters.priceRange) {
            queryParameters['priceRange'] = requestParameters.priceRange;
        }

        if (requestParameters.websiteOrderSequence !== undefined) {
            queryParameters['websiteOrderSequence'] = requestParameters.websiteOrderSequence;
        }

        if (requestParameters.websitePrimaryInd !== undefined) {
            queryParameters['websitePrimaryInd'] = requestParameters.websitePrimaryInd;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }

        if (requestParameters.keyOptionsCodes) {
            queryParameters['keyOptionsCodes'] = requestParameters.keyOptionsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transportations/{transportationCode}`.replace(`{${"transportationCode"}}`, encodeURIComponent(String(requestParameters.transportationCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete transportation for a specific property based on parameters such as transportationCode, hotelId, label, orderBy, createDateTime, creatorId, extension, lastModifierId, lastModifyDateTime, etc. <p><strong>OperationId:</strong>removeTransportation</p>
     * Delete transportation
     */
    async removeTransportation(requestParameters: RemoveTransportationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTransportationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete transportation templates based on transportationCode. <p><strong>OperationId:</strong>removeTransportationTemplates</p>
     * Delete transportation templates
     */
    async removeTransportationTemplatesRaw(requestParameters: RemoveTransportationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transportations/{transportationCode}`.replace(`{${"transportationCode"}}`, encodeURIComponent(String(requestParameters.transportationCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete transportation templates based on transportationCode. <p><strong>OperationId:</strong>removeTransportationTemplates</p>
     * Delete transportation templates
     */
    async removeTransportationTemplates(requestParameters: RemoveTransportationTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTransportationTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete yield adjstment codes for a specific property based on yieldAdjustmentCode, hotelId. <p><strong>OperationId:</strong>removeYieldAdjustmentCodes</p>
     * Delete Yield Adjustment Codes
     */
    async removeYieldAdjustmentCodesRaw(requestParameters: RemoveYieldAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldAdjustmentCodes/{yieldAdjustmentCode}`.replace(`{${"yieldAdjustmentCode"}}`, encodeURIComponent(String(requestParameters.yieldAdjustmentCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete yield adjstment codes for a specific property based on yieldAdjustmentCode, hotelId. <p><strong>OperationId:</strong>removeYieldAdjustmentCodes</p>
     * Delete Yield Adjustment Codes
     */
    async removeYieldAdjustmentCodes(requestParameters: RemoveYieldAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeYieldAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete yield categories for a specific property based on code, hotelId. <p><strong>OperationId:</strong>removeYieldCategories</p>
     * Delete Yield Category
     */
    async removeYieldCategoriesRaw(requestParameters: RemoveYieldCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldCategories/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete yield categories for a specific property based on code, hotelId. <p><strong>OperationId:</strong>removeYieldCategories</p>
     * Delete Yield Category
     */
    async removeYieldCategories(requestParameters: RemoveYieldCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeYieldCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete yield market types for a specific property based on code, hotelId. <p><strong>OperationId:</strong>removeYieldMarketTypes</p>
     * Delete Yield Market Types
     */
    async removeYieldMarketTypesRaw(requestParameters: RemoveYieldMarketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldMarketTypes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete yield market types for a specific property based on code, hotelId. <p><strong>OperationId:</strong>removeYieldMarketTypes</p>
     * Delete Yield Market Types
     */
    async removeYieldMarketTypes(requestParameters: RemoveYieldMarketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeYieldMarketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update day types for a date range based on setDayTypes. <p><strong>OperationId:</strong>setDayTypes</p>
     * Set day type for a date range
     */
    async setDayTypesRaw(requestParameters: SetDayTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dayTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetDayTypesRequestToJSON(requestParameters.setDayTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update day types for a date range based on setDayTypes. <p><strong>OperationId:</strong>setDayTypes</p>
     * Set day type for a date range
     */
    async setDayTypes(requestParameters: SetDayTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setDayTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update events for a specific property based on hotelId, setHotelEvents. <p><strong>OperationId:</strong>setHotelEvents</p>
     * Set hotel events 
     */
    async setHotelEventsRaw(requestParameters: SetHotelEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/events`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetHotelEventsRequestToJSON(requestParameters.setHotelEvents),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update events for a specific property based on hotelId, setHotelEvents. <p><strong>OperationId:</strong>setHotelEvents</p>
     * Set hotel events 
     */
    async setHotelEvents(requestParameters: SetHotelEventsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setHotelEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetConfigActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
} as const;
export type GetConfigActivityLogModuleEnum = typeof GetConfigActivityLogModuleEnum[keyof typeof GetConfigActivityLogModuleEnum];
/**
 * @export
 */
export const GetCurrencyExchangeRatesExchangeTypeEnum = {
    Posting: 'Posting',
    Settlement: 'Settlement',
    Exchangecash: 'Exchangecash',
    Travelagent: 'Travelagent',
    Forecast: 'Forecast',
    Membership: 'Membership',
    Exchangecheck: 'Exchangecheck',
    Certificate: 'Certificate'
} as const;
export type GetCurrencyExchangeRatesExchangeTypeEnum = typeof GetCurrencyExchangeRatesExchangeTypeEnum[keyof typeof GetCurrencyExchangeRatesExchangeTypeEnum];
/**
 * @export
 */
export const GetHotelFetchInstructionsEnum = {
    General: 'General',
    Attraction: 'Attraction',
    Transportation: 'Transportation',
    Package: 'Package',
    Dining: 'Dining',
    Feature: 'Feature',
    Directions: 'Directions',
    GeneralNotes: 'GeneralNotes',
    Airports: 'Airports',
    Alternatehotels: 'Alternatehotels',
    Miscellaneous: 'Miscellaneous',
    Raterange: 'Raterange',
    Contacts: 'Contacts',
    EventSpaces: 'EventSpaces',
    Notes: 'Notes',
    Corporateinformation: 'Corporateinformation',
    Meetingrooms: 'Meetingrooms'
} as const;
export type GetHotelFetchInstructionsEnum = typeof GetHotelFetchInstructionsEnum[keyof typeof GetHotelFetchInstructionsEnum];
/**
 * @export
 */
export const GetHotelBrochureFetchInstructionsEnum = {
    General: 'General',
    Attraction: 'Attraction',
    Transportation: 'Transportation',
    Package: 'Package',
    Dining: 'Dining',
    Feature: 'Feature',
    Directions: 'Directions',
    GeneralNotes: 'GeneralNotes',
    Airports: 'Airports',
    Alternatehotels: 'Alternatehotels',
    Miscellaneous: 'Miscellaneous',
    Raterange: 'Raterange',
    Contacts: 'Contacts',
    EventSpaces: 'EventSpaces',
    Notes: 'Notes',
    Corporateinformation: 'Corporateinformation',
    Meetingrooms: 'Meetingrooms'
} as const;
export type GetHotelBrochureFetchInstructionsEnum = typeof GetHotelBrochureFetchInstructionsEnum[keyof typeof GetHotelBrochureFetchInstructionsEnum];
/**
 * @export
 */
export const GetHotelCalendarFetchInstructionsEnum = {
    DayType: 'DayType',
    Event: 'Event'
} as const;
export type GetHotelCalendarFetchInstructionsEnum = typeof GetHotelCalendarFetchInstructionsEnum[keyof typeof GetHotelCalendarFetchInstructionsEnum];
/**
 * @export
 */
export const GetPropertyCalendarFetchInstructionsEnum = {
    DayType: 'DayType',
    Event: 'Event'
} as const;
export type GetPropertyCalendarFetchInstructionsEnum = typeof GetPropertyCalendarFetchInstructionsEnum[keyof typeof GetPropertyCalendarFetchInstructionsEnum];
/**
 * @export
 */
export const GetYieldAdjustmentCodesTypeEnum = {
    PerStay: 'PerStay',
    PerNight: 'PerNight',
    PerPersonPerNight: 'PerPersonPerNight',
    PerPersonPerStay: 'PerPersonPerStay'
} as const;
export type GetYieldAdjustmentCodesTypeEnum = typeof GetYieldAdjustmentCodesTypeEnum[keyof typeof GetYieldAdjustmentCodesTypeEnum];
