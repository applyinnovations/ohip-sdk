/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CancelReservationsInstructionsType } from './CancelReservationsInstructionsType';
import {
    CancelReservationsInstructionsTypeFromJSON,
    CancelReservationsInstructionsTypeFromJSONTyped,
    CancelReservationsInstructionsTypeToJSON,
} from './CancelReservationsInstructionsType';
import type { CancellationReasonType } from './CancellationReasonType';
import {
    CancellationReasonTypeFromJSON,
    CancellationReasonTypeFromJSONTyped,
    CancellationReasonTypeToJSON,
} from './CancellationReasonType';
import type { Reservations } from './Reservations';
import {
    ReservationsFromJSON,
    ReservationsFromJSONTyped,
    ReservationsToJSON,
} from './Reservations';

/**
 * Criteria for submitting batch cancel reservations.
 * @export
 * @interface CancelReservationsType
 */
export interface CancelReservationsType {
    /**
     * 
     * @type {CancelReservationsInstructionsType}
     * @memberof CancelReservationsType
     */
    cancelInstructions?: CancelReservationsInstructionsType;
    /**
     * The hotel code for the reservations that are being cancelled.
     * @type {string}
     * @memberof CancelReservationsType
     */
    hotelId?: string;
    /**
     * 
     * @type {CancellationReasonType}
     * @memberof CancelReservationsType
     */
    reason?: CancellationReasonType;
    /**
     * 
     * @type {Reservations}
     * @memberof CancelReservationsType
     */
    reservations?: Reservations;
}

/**
 * Check if a given object implements the CancelReservationsType interface.
 */
export function instanceOfCancelReservationsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CancelReservationsTypeFromJSON(json: any): CancelReservationsType {
    return CancelReservationsTypeFromJSONTyped(json, false);
}

export function CancelReservationsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CancelReservationsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cancelInstructions': !exists(json, 'cancelInstructions') ? undefined : CancelReservationsInstructionsTypeFromJSON(json['cancelInstructions']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reason': !exists(json, 'reason') ? undefined : CancellationReasonTypeFromJSON(json['reason']),
        'reservations': !exists(json, 'reservations') ? undefined : ReservationsFromJSON(json['reservations']),
    };
}

export function CancelReservationsTypeToJSON(value?: CancelReservationsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cancelInstructions': CancelReservationsInstructionsTypeToJSON(value.cancelInstructions),
        'hotelId': value.hotelId,
        'reason': CancellationReasonTypeToJSON(value.reason),
        'reservations': ReservationsToJSON(value.reservations),
    };
}

