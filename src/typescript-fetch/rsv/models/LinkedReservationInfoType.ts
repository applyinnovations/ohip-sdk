/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BackToBackResSequenceType } from './BackToBackResSequenceType';
import {
    BackToBackResSequenceTypeFromJSON,
    BackToBackResSequenceTypeFromJSONTyped,
    BackToBackResSequenceTypeToJSON,
} from './BackToBackResSequenceType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { LinkedReservationType } from './LinkedReservationType';
import {
    LinkedReservationTypeFromJSON,
    LinkedReservationTypeFromJSONTyped,
    LinkedReservationTypeToJSON,
} from './LinkedReservationType';
import type { PMSResStatusType } from './PMSResStatusType';
import {
    PMSResStatusTypeFromJSON,
    PMSResStatusTypeFromJSONTyped,
    PMSResStatusTypeToJSON,
} from './PMSResStatusType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { ResGuaranteeType } from './ResGuaranteeType';
import {
    ResGuaranteeTypeFromJSON,
    ResGuaranteeTypeFromJSONTyped,
    ResGuaranteeTypeToJSON,
} from './ResGuaranteeType';
import type { ReservationAllowedActionType } from './ReservationAllowedActionType';
import {
    ReservationAllowedActionTypeFromJSON,
    ReservationAllowedActionTypeFromJSONTyped,
    ReservationAllowedActionTypeToJSON,
} from './ReservationAllowedActionType';
import type { ReservationBlockType } from './ReservationBlockType';
import {
    ReservationBlockTypeFromJSON,
    ReservationBlockTypeFromJSONTyped,
    ReservationBlockTypeToJSON,
} from './ReservationBlockType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface LinkedReservationInfoType
 */
export interface LinkedReservationInfoType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof LinkedReservationInfoType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof LinkedReservationInfoType
     */
    timeSpan?: TimeSpanType;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    givenName?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    surname?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    roomType?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    room?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    ratePlanCode?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof LinkedReservationInfoType
     */
    rate?: CurrencyAmountType;
    /**
     * 
     * @type {ResGuaranteeType}
     * @memberof LinkedReservationInfoType
     */
    guarantee?: ResGuaranteeType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof LinkedReservationInfoType
     */
    balance?: CurrencyAmountType;
    /**
     * 
     * @type {ReservationBlockType}
     * @memberof LinkedReservationInfoType
     */
    reservationBlock?: ReservationBlockType;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    displayColor?: string;
    /**
     * Allowed action.
     * @type {Array<ReservationAllowedActionType>}
     * @memberof LinkedReservationInfoType
     */
    allowedActions?: Array<ReservationAllowedActionType>;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof LinkedReservationInfoType
     */
    reservationStatus?: PMSResStatusType;
    /**
     * 
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {LinkedReservationType}
     * @memberof LinkedReservationInfoType
     */
    linkReservationType?: LinkedReservationType;
    /**
     * This attribute is to verify if reverse check-in is allowed for the reservation.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    reverseCheckInAllowed?: boolean;
    /**
     * This attribute is to verify if room number is locked for the reservation. When true the room number cannot be changed
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    roomNumberLocked?: boolean;
    /**
     * This attribute checks if rate is suppressed or not in order to properly show strike through.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    suppressRate?: boolean;
    /**
     * Number of adults of the reservation.
     * @type {number}
     * @memberof LinkedReservationInfoType
     */
    adultCount?: number;
    /**
     * Number of children of the reservation.
     * @type {number}
     * @memberof LinkedReservationInfoType
     */
    childCount?: number;
    /**
     * This attribute indicates if the linked reservation is marked as Back to Back or not.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    backToBack?: boolean;
    /**
     * 
     * @type {ProfileId}
     * @memberof LinkedReservationInfoType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {BackToBackResSequenceType}
     * @memberof LinkedReservationInfoType
     */
    backToBackSequence?: BackToBackResSequenceType;
    /**
     * This attribute indicates if the linked reservation is a shared reservation or not.
     * @type {boolean}
     * @memberof LinkedReservationInfoType
     */
    shared?: boolean;
    /**
     * This attribute represents a common identifier for a subgroup of linked reservations marked as Back to Back in a group of linked reservations.
     * @type {string}
     * @memberof LinkedReservationInfoType
     */
    backToBackGroupId?: string;
}

/**
 * Check if a given object implements the LinkedReservationInfoType interface.
 */
export function instanceOfLinkedReservationInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LinkedReservationInfoTypeFromJSON(json: any): LinkedReservationInfoType {
    return LinkedReservationInfoTypeFromJSONTyped(json, false);
}

export function LinkedReservationInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedReservationInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'timeSpan': !exists(json, 'timeSpan') ? undefined : TimeSpanTypeFromJSON(json['timeSpan']),
        'givenName': !exists(json, 'givenName') ? undefined : json['givenName'],
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'room': !exists(json, 'room') ? undefined : json['room'],
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'rate': !exists(json, 'rate') ? undefined : CurrencyAmountTypeFromJSON(json['rate']),
        'guarantee': !exists(json, 'guarantee') ? undefined : ResGuaranteeTypeFromJSON(json['guarantee']),
        'balance': !exists(json, 'balance') ? undefined : CurrencyAmountTypeFromJSON(json['balance']),
        'reservationBlock': !exists(json, 'reservationBlock') ? undefined : ReservationBlockTypeFromJSON(json['reservationBlock']),
        'displayColor': !exists(json, 'displayColor') ? undefined : json['displayColor'],
        'allowedActions': !exists(json, 'allowedActions') ? undefined : ((json['allowedActions'] as Array<any>).map(ReservationAllowedActionTypeFromJSON)),
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['reservationStatus']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'linkReservationType': !exists(json, 'linkReservationType') ? undefined : LinkedReservationTypeFromJSON(json['linkReservationType']),
        'reverseCheckInAllowed': !exists(json, 'reverseCheckInAllowed') ? undefined : json['reverseCheckInAllowed'],
        'roomNumberLocked': !exists(json, 'roomNumberLocked') ? undefined : json['roomNumberLocked'],
        'suppressRate': !exists(json, 'suppressRate') ? undefined : json['suppressRate'],
        'adultCount': !exists(json, 'adultCount') ? undefined : json['adultCount'],
        'childCount': !exists(json, 'childCount') ? undefined : json['childCount'],
        'backToBack': !exists(json, 'backToBack') ? undefined : json['backToBack'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'backToBackSequence': !exists(json, 'backToBackSequence') ? undefined : BackToBackResSequenceTypeFromJSON(json['backToBackSequence']),
        'shared': !exists(json, 'shared') ? undefined : json['shared'],
        'backToBackGroupId': !exists(json, 'backToBackGroupId') ? undefined : json['backToBackGroupId'],
    };
}

export function LinkedReservationInfoTypeToJSON(value?: LinkedReservationInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'timeSpan': TimeSpanTypeToJSON(value.timeSpan),
        'givenName': value.givenName,
        'surname': value.surname,
        'title': value.title,
        'roomType': value.roomType,
        'room': value.room,
        'ratePlanCode': value.ratePlanCode,
        'rate': CurrencyAmountTypeToJSON(value.rate),
        'guarantee': ResGuaranteeTypeToJSON(value.guarantee),
        'balance': CurrencyAmountTypeToJSON(value.balance),
        'reservationBlock': ReservationBlockTypeToJSON(value.reservationBlock),
        'displayColor': value.displayColor,
        'allowedActions': value.allowedActions === undefined ? undefined : ((value.allowedActions as Array<any>).map(ReservationAllowedActionTypeToJSON)),
        'reservationStatus': PMSResStatusTypeToJSON(value.reservationStatus),
        'hotelId': value.hotelId,
        'linkReservationType': LinkedReservationTypeToJSON(value.linkReservationType),
        'reverseCheckInAllowed': value.reverseCheckInAllowed,
        'roomNumberLocked': value.roomNumberLocked,
        'suppressRate': value.suppressRate,
        'adultCount': value.adultCount,
        'childCount': value.childCount,
        'backToBack': value.backToBack,
        'profileId': ProfileIdToJSON(value.profileId),
        'backToBackSequence': BackToBackResSequenceTypeToJSON(value.backToBackSequence),
        'shared': value.shared,
        'backToBackGroupId': value.backToBackGroupId,
    };
}

