/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This type contains unique information of external reference.
 * @export
 * @interface ExternalReferenceType
 */
export interface ExternalReferenceType {
    /**
     * Unique ID of external reference.
     * @type {string}
     * @memberof ExternalReferenceType
     */
    id?: string;
    /**
     * Additional identifying value assigned by the creating system for the external reference number. It is only applicable to reservation external references.
     * @type {number}
     * @memberof ExternalReferenceType
     */
    idExtension?: number;
    /**
     * ID context for external reference.
     * @type {string}
     * @memberof ExternalReferenceType
     */
    idContext?: string;
}

/**
 * Check if a given object implements the ExternalReferenceType interface.
 */
export function instanceOfExternalReferenceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExternalReferenceTypeFromJSON(json: any): ExternalReferenceType {
    return ExternalReferenceTypeFromJSONTyped(json, false);
}

export function ExternalReferenceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalReferenceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
    };
}

export function ExternalReferenceTypeToJSON(value?: ExternalReferenceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'idExtension': value.idExtension,
        'idContext': value.idContext,
    };
}

