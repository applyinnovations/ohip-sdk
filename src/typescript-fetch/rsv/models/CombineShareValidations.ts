/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CombineShareFromProfileType } from './CombineShareFromProfileType';
import {
    CombineShareFromProfileTypeFromJSON,
    CombineShareFromProfileTypeFromJSONTyped,
    CombineShareFromProfileTypeToJSON,
} from './CombineShareFromProfileType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request to validate a combine share operation. This would be done prior to the actual Combine Share operation. Based on the validations returned from this request, the appropriate values can be returned to the Combine Share operation request.
 * @export
 * @interface CombineShareValidations
 */
export interface CombineShareValidations {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CombineShareValidations
     */
    existingReservationId?: UniqueIDType;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof CombineShareValidations
     */
    hotelId?: string;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof CombineShareValidations
     */
    links?: Array<InstanceLink>;
    /**
     * 
     * @type {CombineShareFromProfileType}
     * @memberof CombineShareValidations
     */
    newReservation?: CombineShareFromProfileType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CombineShareValidations
     */
    shareToReservationId?: UniqueIDType;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof CombineShareValidations
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the CombineShareValidations interface.
 */
export function instanceOfCombineShareValidations(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CombineShareValidationsFromJSON(json: any): CombineShareValidations {
    return CombineShareValidationsFromJSONTyped(json, false);
}

export function CombineShareValidationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CombineShareValidations {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'existingReservationId': !exists(json, 'existingReservationId') ? undefined : UniqueIDTypeFromJSON(json['existingReservationId']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'newReservation': !exists(json, 'newReservation') ? undefined : CombineShareFromProfileTypeFromJSON(json['newReservation']),
        'shareToReservationId': !exists(json, 'shareToReservationId') ? undefined : UniqueIDTypeFromJSON(json['shareToReservationId']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CombineShareValidationsToJSON(value?: CombineShareValidations | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'existingReservationId': UniqueIDTypeToJSON(value.existingReservationId),
        'hotelId': value.hotelId,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'newReservation': CombineShareFromProfileTypeToJSON(value.newReservation),
        'shareToReservationId': UniqueIDTypeToJSON(value.shareToReservationId),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

