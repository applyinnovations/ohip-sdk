/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChildAgesType } from './ChildAgesType';
import {
    ChildAgesTypeFromJSON,
    ChildAgesTypeFromJSONTyped,
    ChildAgesTypeToJSON,
} from './ChildAgesType';
import type { ChildBucketsType } from './ChildBucketsType';
import {
    ChildBucketsTypeFromJSON,
    ChildBucketsTypeFromJSONTyped,
    ChildBucketsTypeToJSON,
} from './ChildBucketsType';

/**
 * A collection of GuestCount by age group.
 * @export
 * @interface GuestCountsType
 */
export interface GuestCountsType {
    /**
     * Defines the number of Adults.
     * @type {number}
     * @memberof GuestCountsType
     */
    adults?: number;
    /**
     * 
     * @type {ChildAgesType}
     * @memberof GuestCountsType
     */
    childAges?: ChildAgesType;
    /**
     * 
     * @type {ChildBucketsType}
     * @memberof GuestCountsType
     */
    childBuckets?: ChildBucketsType;
    /**
     * Defines the number of Children.
     * @type {number}
     * @memberof GuestCountsType
     */
    children?: number;
}

/**
 * Check if a given object implements the GuestCountsType interface.
 */
export function instanceOfGuestCountsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GuestCountsTypeFromJSON(json: any): GuestCountsType {
    return GuestCountsTypeFromJSONTyped(json, false);
}

export function GuestCountsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GuestCountsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'adults': !exists(json, 'adults') ? undefined : json['adults'],
        'childAges': !exists(json, 'childAges') ? undefined : ChildAgesTypeFromJSON(json['childAges']),
        'childBuckets': !exists(json, 'childBuckets') ? undefined : ChildBucketsTypeFromJSON(json['childBuckets']),
        'children': !exists(json, 'children') ? undefined : json['children'],
    };
}

export function GuestCountsTypeToJSON(value?: GuestCountsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'adults': value.adults,
        'childAges': ChildAgesTypeToJSON(value.childAges),
        'childBuckets': ChildBucketsTypeToJSON(value.childBuckets),
        'children': value.children,
    };
}

