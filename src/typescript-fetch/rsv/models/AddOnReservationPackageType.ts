/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PackageCalculationRuleType } from './PackageCalculationRuleType';
import {
    PackageCalculationRuleTypeFromJSON,
    PackageCalculationRuleTypeFromJSONTyped,
    PackageCalculationRuleTypeToJSON,
} from './PackageCalculationRuleType';
import type { PackageConsumptionType } from './PackageConsumptionType';
import {
    PackageConsumptionTypeFromJSON,
    PackageConsumptionTypeFromJSONTyped,
    PackageConsumptionTypeToJSON,
} from './PackageConsumptionType';
import type { ProductSourceType } from './ProductSourceType';
import {
    ProductSourceTypeFromJSON,
    ProductSourceTypeFromJSONTyped,
    ProductSourceTypeToJSON,
} from './ProductSourceType';
import type { ReservationPackageScheduleType } from './ReservationPackageScheduleType';
import {
    ReservationPackageScheduleTypeFromJSON,
    ReservationPackageScheduleTypeFromJSONTyped,
    ReservationPackageScheduleTypeToJSON,
} from './ReservationPackageScheduleType';

/**
 * AddOn ReservationPackageType class.
 * @export
 * @interface AddOnReservationPackageType
 */
export interface AddOnReservationPackageType {
    /**
     * A HotelPackageSchedule type.
     * @type {Array<ReservationPackageScheduleType>}
     * @memberof AddOnReservationPackageType
     */
    scheduleList?: Array<ReservationPackageScheduleType>;
    /**
     * 
     * @type {PackageConsumptionType}
     * @memberof AddOnReservationPackageType
     */
    consumptionDetails?: PackageConsumptionType;
    /**
     * Package code. This is the unique code used for the package and is a required element.
     * @type {string}
     * @memberof AddOnReservationPackageType
     */
    packageCode?: string;
    /**
     * Reservation Package Opera Internal Unique Id. This is the unique Id used for this reservation package.
     * @type {number}
     * @memberof AddOnReservationPackageType
     */
    internalId?: number;
    /**
     * Package begin date.
     * @type {string}
     * @memberof AddOnReservationPackageType
     */
    startDate?: string;
    /**
     * Package End Date.
     * @type {string}
     * @memberof AddOnReservationPackageType
     */
    endDate?: string;
    /**
     * Package group code. Package group code is used to link multiple packages that are members of a group.
     * @type {string}
     * @memberof AddOnReservationPackageType
     */
    packageGroup?: string;
    /**
     * 
     * @type {ProductSourceType}
     * @memberof AddOnReservationPackageType
     */
    source?: ProductSourceType;
    /**
     * This is the Award code used to redeem the package if the package is a redemption package.
     * @type {string}
     * @memberof AddOnReservationPackageType
     */
    awardCode?: string;
    /**
     * Indicates the points used to redeem the redemption package.
     * @type {number}
     * @memberof AddOnReservationPackageType
     */
    points?: number;
    /**
     * 
     * @type {PackageCalculationRuleType}
     * @memberof AddOnReservationPackageType
     */
    calculationRule?: PackageCalculationRuleType;
}

/**
 * Check if a given object implements the AddOnReservationPackageType interface.
 */
export function instanceOfAddOnReservationPackageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AddOnReservationPackageTypeFromJSON(json: any): AddOnReservationPackageType {
    return AddOnReservationPackageTypeFromJSONTyped(json, false);
}

export function AddOnReservationPackageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddOnReservationPackageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'scheduleList': !exists(json, 'scheduleList') ? undefined : ((json['scheduleList'] as Array<any>).map(ReservationPackageScheduleTypeFromJSON)),
        'consumptionDetails': !exists(json, 'consumptionDetails') ? undefined : PackageConsumptionTypeFromJSON(json['consumptionDetails']),
        'packageCode': !exists(json, 'packageCode') ? undefined : json['packageCode'],
        'internalId': !exists(json, 'internalId') ? undefined : json['internalId'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'packageGroup': !exists(json, 'packageGroup') ? undefined : json['packageGroup'],
        'source': !exists(json, 'source') ? undefined : ProductSourceTypeFromJSON(json['source']),
        'awardCode': !exists(json, 'awardCode') ? undefined : json['awardCode'],
        'points': !exists(json, 'points') ? undefined : json['points'],
        'calculationRule': !exists(json, 'calculationRule') ? undefined : PackageCalculationRuleTypeFromJSON(json['calculationRule']),
    };
}

export function AddOnReservationPackageTypeToJSON(value?: AddOnReservationPackageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'scheduleList': value.scheduleList === undefined ? undefined : ((value.scheduleList as Array<any>).map(ReservationPackageScheduleTypeToJSON)),
        'consumptionDetails': PackageConsumptionTypeToJSON(value.consumptionDetails),
        'packageCode': value.packageCode,
        'internalId': value.internalId,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'packageGroup': value.packageGroup,
        'source': ProductSourceTypeToJSON(value.source),
        'awardCode': value.awardCode,
        'points': value.points,
        'calculationRule': PackageCalculationRuleTypeToJSON(value.calculationRule),
    };
}

