/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { RoutingInfoType } from './RoutingInfoType';
import {
    RoutingInfoTypeFromJSON,
    RoutingInfoTypeFromJSONTyped,
    RoutingInfoTypeToJSON,
} from './RoutingInfoType';
import type { RoutingInstructionsInfoCriteriaComp } from './RoutingInstructionsInfoCriteriaComp';
import {
    RoutingInstructionsInfoCriteriaCompFromJSON,
    RoutingInstructionsInfoCriteriaCompFromJSONTyped,
    RoutingInstructionsInfoCriteriaCompToJSON,
} from './RoutingInstructionsInfoCriteriaComp';
import type { RoutingInstructionsInfoCriteriaFolio } from './RoutingInstructionsInfoCriteriaFolio';
import {
    RoutingInstructionsInfoCriteriaFolioFromJSON,
    RoutingInstructionsInfoCriteriaFolioFromJSONTyped,
    RoutingInstructionsInfoCriteriaFolioToJSON,
} from './RoutingInstructionsInfoCriteriaFolio';
import type { RoutingInstructionsInfoCriteriaRequest } from './RoutingInstructionsInfoCriteriaRequest';
import {
    RoutingInstructionsInfoCriteriaRequestFromJSON,
    RoutingInstructionsInfoCriteriaRequestFromJSONTyped,
    RoutingInstructionsInfoCriteriaRequestToJSON,
} from './RoutingInstructionsInfoCriteriaRequest';
import type { RoutingInstructionsInfoCriteriaRoom } from './RoutingInstructionsInfoCriteriaRoom';
import {
    RoutingInstructionsInfoCriteriaRoomFromJSON,
    RoutingInstructionsInfoCriteriaRoomFromJSONTyped,
    RoutingInstructionsInfoCriteriaRoomToJSON,
} from './RoutingInstructionsInfoCriteriaRoom';

/**
 * Transactions and scheduled instructions included in this routing element will be replaced with the new element.
 * @export
 * @interface RoutingInstructionsInfoCriteria
 */
export interface RoutingInstructionsInfoCriteria {
    /**
     * 
     * @type {RoutingInstructionsInfoCriteriaFolio}
     * @memberof RoutingInstructionsInfoCriteria
     */
    folio?: RoutingInstructionsInfoCriteriaFolio;
    /**
     * 
     * @type {RoutingInstructionsInfoCriteriaRoom}
     * @memberof RoutingInstructionsInfoCriteria
     */
    room?: RoutingInstructionsInfoCriteriaRoom;
    /**
     * 
     * @type {RoutingInstructionsInfoCriteriaComp}
     * @memberof RoutingInstructionsInfoCriteria
     */
    comp?: RoutingInstructionsInfoCriteriaComp;
    /**
     * 
     * @type {RoutingInstructionsInfoCriteriaRequest}
     * @memberof RoutingInstructionsInfoCriteria
     */
    request?: RoutingInstructionsInfoCriteriaRequest;
    /**
     * Hotel context of the reservation.
     * @type {string}
     * @memberof RoutingInstructionsInfoCriteria
     */
    hotelId?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof RoutingInstructionsInfoCriteria
     */
    reservationId?: ReservationId;
    /**
     * On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions.
     * @type {boolean}
     * @memberof RoutingInstructionsInfoCriteria
     */
    refreshFolio?: boolean;
    /**
     * This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted.
     * @type {boolean}
     * @memberof RoutingInstructionsInfoCriteria
     */
    retrievePostingsForRoomRouting?: boolean;
    /**
     * 
     * @type {RoutingInfoType}
     * @memberof RoutingInstructionsInfoCriteria
     */
    newRoutingInfo?: RoutingInfoType;
}

/**
 * Check if a given object implements the RoutingInstructionsInfoCriteria interface.
 */
export function instanceOfRoutingInstructionsInfoCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoutingInstructionsInfoCriteriaFromJSON(json: any): RoutingInstructionsInfoCriteria {
    return RoutingInstructionsInfoCriteriaFromJSONTyped(json, false);
}

export function RoutingInstructionsInfoCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingInstructionsInfoCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'folio': !exists(json, 'folio') ? undefined : RoutingInstructionsInfoCriteriaFolioFromJSON(json['folio']),
        'room': !exists(json, 'room') ? undefined : RoutingInstructionsInfoCriteriaRoomFromJSON(json['room']),
        'comp': !exists(json, 'comp') ? undefined : RoutingInstructionsInfoCriteriaCompFromJSON(json['comp']),
        'request': !exists(json, 'request') ? undefined : RoutingInstructionsInfoCriteriaRequestFromJSON(json['request']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'refreshFolio': !exists(json, 'refreshFolio') ? undefined : json['refreshFolio'],
        'retrievePostingsForRoomRouting': !exists(json, 'retrievePostingsForRoomRouting') ? undefined : json['retrievePostingsForRoomRouting'],
        'newRoutingInfo': !exists(json, 'newRoutingInfo') ? undefined : RoutingInfoTypeFromJSON(json['newRoutingInfo']),
    };
}

export function RoutingInstructionsInfoCriteriaToJSON(value?: RoutingInstructionsInfoCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'folio': RoutingInstructionsInfoCriteriaFolioToJSON(value.folio),
        'room': RoutingInstructionsInfoCriteriaRoomToJSON(value.room),
        'comp': RoutingInstructionsInfoCriteriaCompToJSON(value.comp),
        'request': RoutingInstructionsInfoCriteriaRequestToJSON(value.request),
        'hotelId': value.hotelId,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'refreshFolio': value.refreshFolio,
        'retrievePostingsForRoomRouting': value.retrievePostingsForRoomRouting,
        'newRoutingInfo': RoutingInfoTypeToJSON(value.newRoutingInfo),
    };
}

