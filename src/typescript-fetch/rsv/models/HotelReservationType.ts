/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityLookUpList } from './ActivityLookUpList';
import {
    ActivityLookUpListFromJSON,
    ActivityLookUpListFromJSONTyped,
    ActivityLookUpListToJSON,
} from './ActivityLookUpList';
import type { AdvanceCheckInType } from './AdvanceCheckInType';
import {
    AdvanceCheckInTypeFromJSON,
    AdvanceCheckInTypeFromJSONTyped,
    AdvanceCheckInTypeToJSON,
} from './AdvanceCheckInType';
import type { AlertsType } from './AlertsType';
import {
    AlertsTypeFromJSON,
    AlertsTypeFromJSONTyped,
    AlertsTypeToJSON,
} from './AlertsType';
import type { AttachmentsType } from './AttachmentsType';
import {
    AttachmentsTypeFromJSON,
    AttachmentsTypeFromJSONTyped,
    AttachmentsTypeToJSON,
} from './AttachmentsType';
import type { AwardsType } from './AwardsType';
import {
    AwardsTypeFromJSON,
    AwardsTypeFromJSONTyped,
    AwardsTypeToJSON,
} from './AwardsType';
import type { CallHistoryType } from './CallHistoryType';
import {
    CallHistoryTypeFromJSON,
    CallHistoryTypeFromJSONTyped,
    CallHistoryTypeToJSON,
} from './CallHistoryType';
import type { CateringResInfoType } from './CateringResInfoType';
import {
    CateringResInfoTypeFromJSON,
    CateringResInfoTypeFromJSONTyped,
    CateringResInfoTypeToJSON,
} from './CateringResInfoType';
import type { CommentInfoType } from './CommentInfoType';
import {
    CommentInfoTypeFromJSON,
    CommentInfoTypeFromJSONTyped,
    CommentInfoTypeToJSON,
} from './CommentInfoType';
import type { CompAuthorizerInfoType } from './CompAuthorizerInfoType';
import {
    CompAuthorizerInfoTypeFromJSON,
    CompAuthorizerInfoTypeFromJSONTyped,
    CompAuthorizerInfoTypeToJSON,
} from './CompAuthorizerInfoType';
import type { ConfirmationsType } from './ConfirmationsType';
import {
    ConfirmationsTypeFromJSON,
    ConfirmationsTypeFromJSONTyped,
    ConfirmationsTypeToJSON,
} from './ConfirmationsType';
import type { CustomChargeExemptionsType } from './CustomChargeExemptionsType';
import {
    CustomChargeExemptionsTypeFromJSON,
    CustomChargeExemptionsTypeFromJSONTyped,
    CustomChargeExemptionsTypeToJSON,
} from './CustomChargeExemptionsType';
import type { ECouponsType } from './ECouponsType';
import {
    ECouponsTypeFromJSON,
    ECouponsTypeFromJSONTyped,
    ECouponsTypeToJSON,
} from './ECouponsType';
import type { ExternalReferencesType } from './ExternalReferencesType';
import {
    ExternalReferencesTypeFromJSON,
    ExternalReferencesTypeFromJSONTyped,
    ExternalReferencesTypeToJSON,
} from './ExternalReferencesType';
import type { FixedChargesType } from './FixedChargesType';
import {
    FixedChargesTypeFromJSON,
    FixedChargesTypeFromJSONTyped,
    FixedChargesTypeToJSON,
} from './FixedChargesType';
import type { FoliosShortInfoType } from './FoliosShortInfoType';
import {
    FoliosShortInfoTypeFromJSON,
    FoliosShortInfoTypeFromJSONTyped,
    FoliosShortInfoTypeToJSON,
} from './FoliosShortInfoType';
import type { GuestMessagesType } from './GuestMessagesType';
import {
    GuestMessagesTypeFromJSON,
    GuestMessagesTypeFromJSONTyped,
    GuestMessagesTypeToJSON,
} from './GuestMessagesType';
import type { HotelReservationInstructionTypeCancellation } from './HotelReservationInstructionTypeCancellation';
import {
    HotelReservationInstructionTypeCancellationFromJSON,
    HotelReservationInstructionTypeCancellationFromJSONTyped,
    HotelReservationInstructionTypeCancellationToJSON,
} from './HotelReservationInstructionTypeCancellation';
import type { HotelReservationInstructionTypeReservationProfiles } from './HotelReservationInstructionTypeReservationProfiles';
import {
    HotelReservationInstructionTypeReservationProfilesFromJSON,
    HotelReservationInstructionTypeReservationProfilesFromJSONTyped,
    HotelReservationInstructionTypeReservationProfilesToJSON,
} from './HotelReservationInstructionTypeReservationProfiles';
import type { HotelReservationInstructionTypeTransactionDiversions } from './HotelReservationInstructionTypeTransactionDiversions';
import {
    HotelReservationInstructionTypeTransactionDiversionsFromJSON,
    HotelReservationInstructionTypeTransactionDiversionsFromJSONTyped,
    HotelReservationInstructionTypeTransactionDiversionsToJSON,
} from './HotelReservationInstructionTypeTransactionDiversions';
import type { HotelReservationTracesType } from './HotelReservationTracesType';
import {
    HotelReservationTracesTypeFromJSON,
    HotelReservationTracesTypeFromJSONTyped,
    HotelReservationTracesTypeToJSON,
} from './HotelReservationTracesType';
import type { IndicatorsType } from './IndicatorsType';
import {
    IndicatorsTypeFromJSON,
    IndicatorsTypeFromJSONTyped,
    IndicatorsTypeToJSON,
} from './IndicatorsType';
import type { LinkedReservationsInfoType } from './LinkedReservationsInfoType';
import {
    LinkedReservationsInfoTypeFromJSON,
    LinkedReservationsInfoTypeFromJSONTyped,
    LinkedReservationsInfoTypeToJSON,
} from './LinkedReservationsInfoType';
import type { MembershipType } from './MembershipType';
import {
    MembershipTypeFromJSON,
    MembershipTypeFromJSONTyped,
    MembershipTypeToJSON,
} from './MembershipType';
import type { NameValueDetailType } from './NameValueDetailType';
import {
    NameValueDetailTypeFromJSON,
    NameValueDetailTypeFromJSONTyped,
    NameValueDetailTypeToJSON,
} from './NameValueDetailType';
import type { OverrideInstructionsType } from './OverrideInstructionsType';
import {
    OverrideInstructionsTypeFromJSON,
    OverrideInstructionsTypeFromJSONTyped,
    OverrideInstructionsTypeToJSON,
} from './OverrideInstructionsType';
import type { PMSResStatusType } from './PMSResStatusType';
import {
    PMSResStatusTypeFromJSON,
    PMSResStatusTypeFromJSONTyped,
    PMSResStatusTypeToJSON,
} from './PMSResStatusType';
import type { PreferenceTypeType } from './PreferenceTypeType';
import {
    PreferenceTypeTypeFromJSON,
    PreferenceTypeTypeFromJSONTyped,
    PreferenceTypeTypeToJSON,
} from './PreferenceTypeType';
import type { PrepaidCardsType } from './PrepaidCardsType';
import {
    PrepaidCardsTypeFromJSON,
    PrepaidCardsTypeFromJSONTyped,
    PrepaidCardsTypeToJSON,
} from './PrepaidCardsType';
import type { ResAccessRestrictionType } from './ResAccessRestrictionType';
import {
    ResAccessRestrictionTypeFromJSON,
    ResAccessRestrictionTypeFromJSONTyped,
    ResAccessRestrictionTypeToJSON,
} from './ResAccessRestrictionType';
import type { ResCashieringType } from './ResCashieringType';
import {
    ResCashieringTypeFromJSON,
    ResCashieringTypeFromJSONTyped,
    ResCashieringTypeToJSON,
} from './ResCashieringType';
import type { ResCommunicationType } from './ResCommunicationType';
import {
    ResCommunicationTypeFromJSON,
    ResCommunicationTypeFromJSONTyped,
    ResCommunicationTypeToJSON,
} from './ResCommunicationType';
import type { ResGuestAdditionalInfoType } from './ResGuestAdditionalInfoType';
import {
    ResGuestAdditionalInfoTypeFromJSON,
    ResGuestAdditionalInfoTypeFromJSONTyped,
    ResGuestAdditionalInfoTypeToJSON,
} from './ResGuestAdditionalInfoType';
import type { ResGuestType } from './ResGuestType';
import {
    ResGuestTypeFromJSON,
    ResGuestTypeFromJSONTyped,
    ResGuestTypeToJSON,
} from './ResGuestType';
import type { ResHousekeepingType } from './ResHousekeepingType';
import {
    ResHousekeepingTypeFromJSON,
    ResHousekeepingTypeFromJSONTyped,
    ResHousekeepingTypeToJSON,
} from './ResHousekeepingType';
import type { ResInventoryItemsType } from './ResInventoryItemsType';
import {
    ResInventoryItemsTypeFromJSON,
    ResInventoryItemsTypeFromJSONTyped,
    ResInventoryItemsTypeToJSON,
} from './ResInventoryItemsType';
import type { ResSharedGuestListType } from './ResSharedGuestListType';
import {
    ResSharedGuestListTypeFromJSON,
    ResSharedGuestListTypeFromJSONTyped,
    ResSharedGuestListTypeToJSON,
} from './ResSharedGuestListType';
import type { ReservationAllowedActionsType } from './ReservationAllowedActionsType';
import {
    ReservationAllowedActionsTypeFromJSON,
    ReservationAllowedActionsTypeFromJSONTyped,
    ReservationAllowedActionsTypeToJSON,
} from './ReservationAllowedActionsType';
import type { ReservationDisplayColorInfoType } from './ReservationDisplayColorInfoType';
import {
    ReservationDisplayColorInfoTypeFromJSON,
    ReservationDisplayColorInfoTypeFromJSONTyped,
    ReservationDisplayColorInfoTypeToJSON,
} from './ReservationDisplayColorInfoType';
import type { ReservationECertificatesType } from './ReservationECertificatesType';
import {
    ReservationECertificatesTypeFromJSON,
    ReservationECertificatesTypeFromJSONTyped,
    ReservationECertificatesTypeToJSON,
} from './ReservationECertificatesType';
import type { ReservationIdList } from './ReservationIdList';
import {
    ReservationIdListFromJSON,
    ReservationIdListFromJSONTyped,
    ReservationIdListToJSON,
} from './ReservationIdList';
import type { ReservationLocatorsType } from './ReservationLocatorsType';
import {
    ReservationLocatorsTypeFromJSON,
    ReservationLocatorsTypeFromJSONTyped,
    ReservationLocatorsTypeToJSON,
} from './ReservationLocatorsType';
import type { ReservationMembershipAwardType } from './ReservationMembershipAwardType';
import {
    ReservationMembershipAwardTypeFromJSON,
    ReservationMembershipAwardTypeFromJSONTyped,
    ReservationMembershipAwardTypeToJSON,
} from './ReservationMembershipAwardType';
import type { ReservationMembershipType } from './ReservationMembershipType';
import {
    ReservationMembershipTypeFromJSON,
    ReservationMembershipTypeFromJSONTyped,
    ReservationMembershipTypeToJSON,
} from './ReservationMembershipType';
import type { ReservationPackageType } from './ReservationPackageType';
import {
    ReservationPackageTypeFromJSON,
    ReservationPackageTypeFromJSONTyped,
    ReservationPackageTypeToJSON,
} from './ReservationPackageType';
import type { ReservationPaymentMethodsType } from './ReservationPaymentMethodsType';
import {
    ReservationPaymentMethodsTypeFromJSON,
    ReservationPaymentMethodsTypeFromJSONTyped,
    ReservationPaymentMethodsTypeToJSON,
} from './ReservationPaymentMethodsType';
import type { ReservationPoliciesType } from './ReservationPoliciesType';
import {
    ReservationPoliciesTypeFromJSON,
    ReservationPoliciesTypeFromJSONTyped,
    ReservationPoliciesTypeToJSON,
} from './ReservationPoliciesType';
import type { ReservationQueueInformationType } from './ReservationQueueInformationType';
import {
    ReservationQueueInformationTypeFromJSON,
    ReservationQueueInformationTypeFromJSONTyped,
    ReservationQueueInformationTypeToJSON,
} from './ReservationQueueInformationType';
import type { RoomStayType } from './RoomStayType';
import {
    RoomStayTypeFromJSON,
    RoomStayTypeFromJSONTyped,
    RoomStayTypeToJSON,
} from './RoomStayType';
import type { RoutingInfoListType } from './RoutingInfoListType';
import {
    RoutingInfoListTypeFromJSON,
    RoutingInfoListTypeFromJSONTyped,
    RoutingInfoListTypeToJSON,
} from './RoutingInfoListType';
import type { ServiceRequests } from './ServiceRequests';
import {
    ServiceRequestsFromJSON,
    ServiceRequestsFromJSONTyped,
    ServiceRequestsToJSON,
} from './ServiceRequests';
import type { SourceOfSaleType } from './SourceOfSaleType';
import {
    SourceOfSaleTypeFromJSON,
    SourceOfSaleTypeFromJSONTyped,
    SourceOfSaleTypeToJSON,
} from './SourceOfSaleType';
import type { TicketsType } from './TicketsType';
import {
    TicketsTypeFromJSON,
    TicketsTypeFromJSONTyped,
    TicketsTypeToJSON,
} from './TicketsType';
import type { TrackItItemsType } from './TrackItItemsType';
import {
    TrackItItemsTypeFromJSON,
    TrackItItemsTypeFromJSONTyped,
    TrackItItemsTypeToJSON,
} from './TrackItItemsType';
import type { UserDefinedFieldsType } from './UserDefinedFieldsType';
import {
    UserDefinedFieldsTypeFromJSON,
    UserDefinedFieldsTypeFromJSONTyped,
    UserDefinedFieldsTypeToJSON,
} from './UserDefinedFieldsType';
import type { WaitlistResType } from './WaitlistResType';
import {
    WaitlistResTypeFromJSON,
    WaitlistResTypeFromJSONTyped,
    WaitlistResTypeToJSON,
} from './WaitlistResType';

/**
 * The Reservation class contains the current reservation being created or altered.
 * @export
 * @interface HotelReservationType
 */
export interface HotelReservationType {
    /**
     * 
     * @type {ResAccessRestrictionType}
     * @memberof HotelReservationType
     */
    accessRestriction?: ResAccessRestrictionType;
    /**
     * Configurable Access Restriction Message for Excluded Block or Rate Code.
     * @type {string}
     * @memberof HotelReservationType
     */
    accessRestrictionMessage?: string;
    /**
     * 
     * @type {ResGuestAdditionalInfoType}
     * @memberof HotelReservationType
     */
    additionalGuestInfo?: ResGuestAdditionalInfoType;
    /**
     * 
     * @type {AdvanceCheckInType}
     * @memberof HotelReservationType
     */
    advanceCheckIn?: AdvanceCheckInType;
    /**
     * 
     * @type {AlertsType}
     * @memberof HotelReservationType
     */
    alerts?: AlertsType;
    /**
     * Flag to allow auto checkin
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowAutoCheckin?: boolean;
    /**
     * Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowMobileCheckout?: boolean;
    /**
     * Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowMobileViewFolio?: boolean;
    /**
     * Flag containing true or false value for reservation to be eligible for prior check in by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile check in yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    allowPreRegistration?: boolean;
    /**
     * 
     * @type {ReservationAllowedActionsType}
     * @memberof HotelReservationType
     */
    allowedActions?: ReservationAllowedActionsType;
    /**
     * 
     * @type {AttachmentsType}
     * @memberof HotelReservationType
     */
    attachments?: AttachmentsType;
    /**
     * This flag will force to borrow from house if borrow required for number of rooms requested, this will only applicable when reservation is attached to a Block.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    autoBorrowFromHouse?: boolean;
    /**
     * 
     * @type {CallHistoryType}
     * @memberof HotelReservationType
     */
    callHistory?: CallHistoryType;
    /**
     * 
     * @type {HotelReservationInstructionTypeCancellation}
     * @memberof HotelReservationType
     */
    cancellation?: HotelReservationInstructionTypeCancellation;
    /**
     * 
     * @type {ResCashieringType}
     * @memberof HotelReservationType
     */
    cashiering?: ResCashieringType;
    /**
     * 
     * @type {CateringResInfoType}
     * @memberof HotelReservationType
     */
    catering?: CateringResInfoType;
    /**
     * This attribute represents Hotel charge card number. This number is generated automatically in OPERA when a reservation is created in OPERA. It is part of a functionality that provide the guest with the convenience of placing all their charges directly on their reservation folio.
     * @type {string}
     * @memberof HotelReservationType
     */
    chargeCardNumber?: string;
    /**
     * List of Notes for the Guest related to the reservation.
     * @type {Array<CommentInfoType>}
     * @memberof HotelReservationType
     */
    comments?: Array<CommentInfoType>;
    /**
     * 
     * @type {CompAuthorizerInfoType}
     * @memberof HotelReservationType
     */
    compAuthorizer?: CompAuthorizerInfoType;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof HotelReservationType
     */
    computedReservationStatus?: PMSResStatusType;
    /**
     * 
     * @type {ConfirmationsType}
     * @memberof HotelReservationType
     */
    confirmationLetters?: ConfirmationsType;
    /**
     * Business Date when the reservation was created.
     * @type {Date}
     * @memberof HotelReservationType
     */
    createBusinessDate?: Date;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof HotelReservationType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof HotelReservationType
     */
    creatorId?: string;
    /**
     * 
     * @type {CustomChargeExemptionsType}
     * @memberof HotelReservationType
     */
    customChargeExemptionDetails?: CustomChargeExemptionsType;
    /**
     * 
     * @type {NameValueDetailType}
     * @memberof HotelReservationType
     */
    customNameValueDetail?: NameValueDetailType;
    /**
     * Custom Reference to identify reservation.
     * @type {string}
     * @memberof HotelReservationType
     */
    customReference?: string;
    /**
     * The color to display this reservation on room grid displays.
     * @type {string}
     * @memberof HotelReservationType
     */
    displayColor?: string;
    /**
     * 
     * @type {ReservationDisplayColorInfoType}
     * @memberof HotelReservationType
     */
    displayColorDetails?: ReservationDisplayColorInfoType;
    /**
     * 
     * @type {ReservationECertificatesType}
     * @memberof HotelReservationType
     */
    eCertificates?: ReservationECertificatesType;
    /**
     * 
     * @type {ECouponsType}
     * @memberof HotelReservationType
     */
    eCoupons?: ECouponsType;
    /**
     * 
     * @type {boolean}
     * @memberof HotelReservationType
     */
    extSystemSync?: boolean;
    /**
     * 
     * @type {ExternalReferencesType}
     * @memberof HotelReservationType
     */
    externalReferences?: ExternalReferencesType;
    /**
     * 
     * @type {FixedChargesType}
     * @memberof HotelReservationType
     */
    fixedCharges?: FixedChargesType;
    /**
     * 
     * @type {FoliosShortInfoType}
     * @memberof HotelReservationType
     */
    folios?: FoliosShortInfoType;
    /**
     * List of Notes for the Guest related to the profile.
     * @type {Array<CommentInfoType>}
     * @memberof HotelReservationType
     */
    guestComments?: Array<CommentInfoType>;
    /**
     * List of Memberships for the Guest related to the reservation.
     * @type {Array<MembershipType>}
     * @memberof HotelReservationType
     */
    guestMemberships?: Array<MembershipType>;
    /**
     * 
     * @type {GuestMessagesType}
     * @memberof HotelReservationType
     */
    guestMessages?: GuestMessagesType;
    /**
     * 
     * @type {boolean}
     * @memberof HotelReservationType
     */
    hasOpenFolio?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HotelReservationType
     */
    hotelId?: string;
    /**
     * 
     * @type {ResHousekeepingType}
     * @memberof HotelReservationType
     */
    housekeeping?: ResHousekeepingType;
    /**
     * 
     * @type {ResInventoryItemsType}
     * @memberof HotelReservationType
     */
    inventoryItems?: ResInventoryItemsType;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof HotelReservationType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof HotelReservationType
     */
    lastModifyDateTime?: string;
    /**
     * 
     * @type {LinkedReservationsInfoType}
     * @memberof HotelReservationType
     */
    linkedReservation?: LinkedReservationsInfoType;
    /**
     * 
     * @type {ReservationLocatorsType}
     * @memberof HotelReservationType
     */
    locators?: ReservationLocatorsType;
    /**
     * An id representing the record lock for this reservation. When passed, update operation will verify that this lock is still valid.
     * @type {number}
     * @memberof HotelReservationType
     */
    lockHandle?: number;
    /**
     * Mark this reservation as recently accessed.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     * Flag containing true or false value to determine if the guest has opted for communications pertaining to this reservation.Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is marked for communication. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    optedForCommunication?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideBlockRestriction?: boolean;
    /**
     * Forcefully override the create/update action on the Reservation. For real-time CRS interfaces, this element is used as force selling indicator in case of Create or Update Reservation
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideExternalChecks?: boolean;
    /**
     * 
     * @type {OverrideInstructionsType}
     * @memberof HotelReservationType
     */
    overrideInstructions?: OverrideInstructionsType;
    /**
     * Indicates to Override the Room Inventory Check if applicable.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideInventoryCheck?: boolean;
    /**
     * Indicates to Override the Room Out Of Service Check if applicable.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideOutOfServiceCheck?: boolean;
    /**
     * Override the room ownership of the room currently assigned to this reservation. This is applicable when Room Rotation OPERA Control is active.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideRoomOwnership?: boolean;
    /**
     * Override the rotation room that is next in the sequence with the room currently assigned to this reservation. This is applicable when Room Rotation OPERA Control is active.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    overrideRotationRoom?: boolean;
    /**
     * Party/PartyCode when reservation is part of a party(a small group).
     * @type {string}
     * @memberof HotelReservationType
     */
    party?: string;
    /**
     * Is the reservation pre-registered.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    preRegistered?: boolean;
    /**
     * Collection of reservation preferences.
     * @type {Array<PreferenceTypeType>}
     * @memberof HotelReservationType
     */
    preferenceCollection?: Array<PreferenceTypeType>;
    /**
     * 
     * @type {PrepaidCardsType}
     * @memberof HotelReservationType
     */
    prepaidCards?: PrepaidCardsType;
    /**
     * Name of the Chain for the primary enrollment
     * @type {string}
     * @memberof HotelReservationType
     */
    primaryEnrollmentChain?: string;
    /**
     * Name Of the Resort/Hotel for the primary enrollment
     * @type {string}
     * @memberof HotelReservationType
     */
    primaryEnrollmentResort?: string;
    /**
     * Indicates whether to show the rate or not on a printed document which includes the rate.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    printRate?: boolean;
    /**
     * 
     * @type {AwardsType}
     * @memberof HotelReservationType
     */
    profileAwards?: AwardsType;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof HotelReservationType
     */
    purgeDate?: Date;
    /**
     * 
     * @type {ReservationQueueInformationType}
     * @memberof HotelReservationType
     */
    queue?: ReservationQueueInformationType;
    /**
     * Business Date when the reservation was last reinstated.
     * @type {Date}
     * @memberof HotelReservationType
     */
    reinstateDate?: Date;
    /**
     * 
     * @type {ActivityLookUpList}
     * @memberof HotelReservationType
     */
    reservationActivities?: ActivityLookUpList;
    /**
     * 
     * @type {ResCommunicationType}
     * @memberof HotelReservationType
     */
    reservationCommunication?: ResCommunicationType;
    /**
     * Collection of guests associated with the reservation.
     * @type {Array<ResGuestType>}
     * @memberof HotelReservationType
     */
    reservationGuests?: Array<ResGuestType>;
    /**
     * 
     * @type {ReservationIdList}
     * @memberof HotelReservationType
     */
    reservationIdList?: ReservationIdList;
    /**
     * 
     * @type {IndicatorsType}
     * @memberof HotelReservationType
     */
    reservationIndicators?: IndicatorsType;
    /**
     * Collection of membership awards attached to a reservation
     * @type {Array<ReservationMembershipAwardType>}
     * @memberof HotelReservationType
     */
    reservationMembershipAwards?: Array<ReservationMembershipAwardType>;
    /**
     * List of reservation memberships.
     * @type {Array<ReservationMembershipType>}
     * @memberof HotelReservationType
     */
    reservationMemberships?: Array<ReservationMembershipType>;
    /**
     * A Service object represents a non-room product provided to guests. Service products may have associated inventory and charges.
     * @type {Array<ReservationPackageType>}
     * @memberof HotelReservationType
     */
    reservationPackages?: Array<ReservationPackageType>;
    /**
     * 
     * @type {ReservationPaymentMethodsType}
     * @memberof HotelReservationType
     */
    reservationPaymentMethods?: ReservationPaymentMethodsType;
    /**
     * 
     * @type {ReservationPoliciesType}
     * @memberof HotelReservationType
     */
    reservationPolicies?: ReservationPoliciesType;
    /**
     * 
     * @type {HotelReservationInstructionTypeReservationProfiles}
     * @memberof HotelReservationType
     */
    reservationProfiles?: HotelReservationInstructionTypeReservationProfiles;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof HotelReservationType
     */
    reservationStatus?: PMSResStatusType;
    /**
     * 
     * @type {RoomStayType}
     * @memberof HotelReservationType
     */
    roomStay?: RoomStayType;
    /**
     * Boolean True if this reservation is reserving rooms. False if it is only reserving services.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    roomStayReservation?: boolean;
    /**
     * 
     * @type {RoutingInfoListType}
     * @memberof HotelReservationType
     */
    routingInstructions?: RoutingInfoListType;
    /**
     * 
     * @type {ActivityLookUpList}
     * @memberof HotelReservationType
     */
    scheduledActivities?: ActivityLookUpList;
    /**
     * 
     * @type {ServiceRequests}
     * @memberof HotelReservationType
     */
    serviceRequests?: ServiceRequests;
    /**
     * 
     * @type {ResSharedGuestListType}
     * @memberof HotelReservationType
     */
    sharedGuests?: ResSharedGuestListType;
    /**
     * 
     * @type {SourceOfSaleType}
     * @memberof HotelReservationType
     */
    sourceOfSale?: SourceOfSaleType;
    /**
     * 
     * @type {TicketsType}
     * @memberof HotelReservationType
     */
    tickets?: TicketsType;
    /**
     * 
     * @type {HotelReservationTracesType}
     * @memberof HotelReservationType
     */
    traces?: HotelReservationTracesType;
    /**
     * 
     * @type {TrackItItemsType}
     * @memberof HotelReservationType
     */
    trackItItems?: TrackItItemsType;
    /**
     * 
     * @type {HotelReservationInstructionTypeTransactionDiversions}
     * @memberof HotelReservationType
     */
    transactionDiversions?: HotelReservationInstructionTypeTransactionDiversions;
    /**
     * Indicates whether the reservation is eligible for upgrade.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    upgradeEligible?: boolean;
    /**
     * 
     * @type {UserDefinedFieldsType}
     * @memberof HotelReservationType
     */
    userDefinedFields?: UserDefinedFieldsType;
    /**
     * 
     * @type {WaitlistResType}
     * @memberof HotelReservationType
     */
    waitlist?: WaitlistResType;
    /**
     * When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
     * @type {boolean}
     * @memberof HotelReservationType
     */
    walkIn?: boolean;
    /**
     * 
     * @type {AttachmentsType}
     * @memberof HotelReservationType
     */
    webRegistrationCards?: AttachmentsType;
}

/**
 * Check if a given object implements the HotelReservationType interface.
 */
export function instanceOfHotelReservationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelReservationTypeFromJSON(json: any): HotelReservationType {
    return HotelReservationTypeFromJSONTyped(json, false);
}

export function HotelReservationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelReservationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessRestriction': !exists(json, 'accessRestriction') ? undefined : ResAccessRestrictionTypeFromJSON(json['accessRestriction']),
        'accessRestrictionMessage': !exists(json, 'accessRestrictionMessage') ? undefined : json['accessRestrictionMessage'],
        'additionalGuestInfo': !exists(json, 'additionalGuestInfo') ? undefined : ResGuestAdditionalInfoTypeFromJSON(json['additionalGuestInfo']),
        'advanceCheckIn': !exists(json, 'advanceCheckIn') ? undefined : AdvanceCheckInTypeFromJSON(json['advanceCheckIn']),
        'alerts': !exists(json, 'alerts') ? undefined : AlertsTypeFromJSON(json['alerts']),
        'allowAutoCheckin': !exists(json, 'allowAutoCheckin') ? undefined : json['allowAutoCheckin'],
        'allowMobileCheckout': !exists(json, 'allowMobileCheckout') ? undefined : json['allowMobileCheckout'],
        'allowMobileViewFolio': !exists(json, 'allowMobileViewFolio') ? undefined : json['allowMobileViewFolio'],
        'allowPreRegistration': !exists(json, 'allowPreRegistration') ? undefined : json['allowPreRegistration'],
        'allowedActions': !exists(json, 'allowedActions') ? undefined : ReservationAllowedActionsTypeFromJSON(json['allowedActions']),
        'attachments': !exists(json, 'attachments') ? undefined : AttachmentsTypeFromJSON(json['attachments']),
        'autoBorrowFromHouse': !exists(json, 'autoBorrowFromHouse') ? undefined : json['autoBorrowFromHouse'],
        'callHistory': !exists(json, 'callHistory') ? undefined : CallHistoryTypeFromJSON(json['callHistory']),
        'cancellation': !exists(json, 'cancellation') ? undefined : HotelReservationInstructionTypeCancellationFromJSON(json['cancellation']),
        'cashiering': !exists(json, 'cashiering') ? undefined : ResCashieringTypeFromJSON(json['cashiering']),
        'catering': !exists(json, 'catering') ? undefined : CateringResInfoTypeFromJSON(json['catering']),
        'chargeCardNumber': !exists(json, 'chargeCardNumber') ? undefined : json['chargeCardNumber'],
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CommentInfoTypeFromJSON)),
        'compAuthorizer': !exists(json, 'compAuthorizer') ? undefined : CompAuthorizerInfoTypeFromJSON(json['compAuthorizer']),
        'computedReservationStatus': !exists(json, 'computedReservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['computedReservationStatus']),
        'confirmationLetters': !exists(json, 'confirmationLetters') ? undefined : ConfirmationsTypeFromJSON(json['confirmationLetters']),
        'createBusinessDate': !exists(json, 'createBusinessDate') ? undefined : (new Date(json['createBusinessDate'])),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'customChargeExemptionDetails': !exists(json, 'customChargeExemptionDetails') ? undefined : CustomChargeExemptionsTypeFromJSON(json['customChargeExemptionDetails']),
        'customNameValueDetail': !exists(json, 'customNameValueDetail') ? undefined : NameValueDetailTypeFromJSON(json['customNameValueDetail']),
        'customReference': !exists(json, 'customReference') ? undefined : json['customReference'],
        'displayColor': !exists(json, 'displayColor') ? undefined : json['displayColor'],
        'displayColorDetails': !exists(json, 'displayColorDetails') ? undefined : ReservationDisplayColorInfoTypeFromJSON(json['displayColorDetails']),
        'eCertificates': !exists(json, 'eCertificates') ? undefined : ReservationECertificatesTypeFromJSON(json['eCertificates']),
        'eCoupons': !exists(json, 'eCoupons') ? undefined : ECouponsTypeFromJSON(json['eCoupons']),
        'extSystemSync': !exists(json, 'extSystemSync') ? undefined : json['extSystemSync'],
        'externalReferences': !exists(json, 'externalReferences') ? undefined : ExternalReferencesTypeFromJSON(json['externalReferences']),
        'fixedCharges': !exists(json, 'fixedCharges') ? undefined : FixedChargesTypeFromJSON(json['fixedCharges']),
        'folios': !exists(json, 'folios') ? undefined : FoliosShortInfoTypeFromJSON(json['folios']),
        'guestComments': !exists(json, 'guestComments') ? undefined : ((json['guestComments'] as Array<any>).map(CommentInfoTypeFromJSON)),
        'guestMemberships': !exists(json, 'guestMemberships') ? undefined : ((json['guestMemberships'] as Array<any>).map(MembershipTypeFromJSON)),
        'guestMessages': !exists(json, 'guestMessages') ? undefined : GuestMessagesTypeFromJSON(json['guestMessages']),
        'hasOpenFolio': !exists(json, 'hasOpenFolio') ? undefined : json['hasOpenFolio'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'housekeeping': !exists(json, 'housekeeping') ? undefined : ResHousekeepingTypeFromJSON(json['housekeeping']),
        'inventoryItems': !exists(json, 'inventoryItems') ? undefined : ResInventoryItemsTypeFromJSON(json['inventoryItems']),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'linkedReservation': !exists(json, 'linkedReservation') ? undefined : LinkedReservationsInfoTypeFromJSON(json['linkedReservation']),
        'locators': !exists(json, 'locators') ? undefined : ReservationLocatorsTypeFromJSON(json['locators']),
        'lockHandle': !exists(json, 'lockHandle') ? undefined : json['lockHandle'],
        'markAsRecentlyAccessed': !exists(json, 'markAsRecentlyAccessed') ? undefined : json['markAsRecentlyAccessed'],
        'optedForCommunication': !exists(json, 'optedForCommunication') ? undefined : json['optedForCommunication'],
        'overrideBlockRestriction': !exists(json, 'overrideBlockRestriction') ? undefined : json['overrideBlockRestriction'],
        'overrideExternalChecks': !exists(json, 'overrideExternalChecks') ? undefined : json['overrideExternalChecks'],
        'overrideInstructions': !exists(json, 'overrideInstructions') ? undefined : OverrideInstructionsTypeFromJSON(json['overrideInstructions']),
        'overrideInventoryCheck': !exists(json, 'overrideInventoryCheck') ? undefined : json['overrideInventoryCheck'],
        'overrideOutOfServiceCheck': !exists(json, 'overrideOutOfServiceCheck') ? undefined : json['overrideOutOfServiceCheck'],
        'overrideRoomOwnership': !exists(json, 'overrideRoomOwnership') ? undefined : json['overrideRoomOwnership'],
        'overrideRotationRoom': !exists(json, 'overrideRotationRoom') ? undefined : json['overrideRotationRoom'],
        'party': !exists(json, 'party') ? undefined : json['party'],
        'preRegistered': !exists(json, 'preRegistered') ? undefined : json['preRegistered'],
        'preferenceCollection': !exists(json, 'preferenceCollection') ? undefined : ((json['preferenceCollection'] as Array<any>).map(PreferenceTypeTypeFromJSON)),
        'prepaidCards': !exists(json, 'prepaidCards') ? undefined : PrepaidCardsTypeFromJSON(json['prepaidCards']),
        'primaryEnrollmentChain': !exists(json, 'primaryEnrollmentChain') ? undefined : json['primaryEnrollmentChain'],
        'primaryEnrollmentResort': !exists(json, 'primaryEnrollmentResort') ? undefined : json['primaryEnrollmentResort'],
        'printRate': !exists(json, 'printRate') ? undefined : json['printRate'],
        'profileAwards': !exists(json, 'profileAwards') ? undefined : AwardsTypeFromJSON(json['profileAwards']),
        'purgeDate': !exists(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'queue': !exists(json, 'queue') ? undefined : ReservationQueueInformationTypeFromJSON(json['queue']),
        'reinstateDate': !exists(json, 'reinstateDate') ? undefined : (new Date(json['reinstateDate'])),
        'reservationActivities': !exists(json, 'reservationActivities') ? undefined : ActivityLookUpListFromJSON(json['reservationActivities']),
        'reservationCommunication': !exists(json, 'reservationCommunication') ? undefined : ResCommunicationTypeFromJSON(json['reservationCommunication']),
        'reservationGuests': !exists(json, 'reservationGuests') ? undefined : ((json['reservationGuests'] as Array<any>).map(ResGuestTypeFromJSON)),
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ReservationIdListFromJSON(json['reservationIdList']),
        'reservationIndicators': !exists(json, 'reservationIndicators') ? undefined : IndicatorsTypeFromJSON(json['reservationIndicators']),
        'reservationMembershipAwards': !exists(json, 'reservationMembershipAwards') ? undefined : ((json['reservationMembershipAwards'] as Array<any>).map(ReservationMembershipAwardTypeFromJSON)),
        'reservationMemberships': !exists(json, 'reservationMemberships') ? undefined : ((json['reservationMemberships'] as Array<any>).map(ReservationMembershipTypeFromJSON)),
        'reservationPackages': !exists(json, 'reservationPackages') ? undefined : ((json['reservationPackages'] as Array<any>).map(ReservationPackageTypeFromJSON)),
        'reservationPaymentMethods': !exists(json, 'reservationPaymentMethods') ? undefined : ReservationPaymentMethodsTypeFromJSON(json['reservationPaymentMethods']),
        'reservationPolicies': !exists(json, 'reservationPolicies') ? undefined : ReservationPoliciesTypeFromJSON(json['reservationPolicies']),
        'reservationProfiles': !exists(json, 'reservationProfiles') ? undefined : HotelReservationInstructionTypeReservationProfilesFromJSON(json['reservationProfiles']),
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['reservationStatus']),
        'roomStay': !exists(json, 'roomStay') ? undefined : RoomStayTypeFromJSON(json['roomStay']),
        'roomStayReservation': !exists(json, 'roomStayReservation') ? undefined : json['roomStayReservation'],
        'routingInstructions': !exists(json, 'routingInstructions') ? undefined : RoutingInfoListTypeFromJSON(json['routingInstructions']),
        'scheduledActivities': !exists(json, 'scheduledActivities') ? undefined : ActivityLookUpListFromJSON(json['scheduledActivities']),
        'serviceRequests': !exists(json, 'serviceRequests') ? undefined : ServiceRequestsFromJSON(json['serviceRequests']),
        'sharedGuests': !exists(json, 'sharedGuests') ? undefined : ResSharedGuestListTypeFromJSON(json['sharedGuests']),
        'sourceOfSale': !exists(json, 'sourceOfSale') ? undefined : SourceOfSaleTypeFromJSON(json['sourceOfSale']),
        'tickets': !exists(json, 'tickets') ? undefined : TicketsTypeFromJSON(json['tickets']),
        'traces': !exists(json, 'traces') ? undefined : HotelReservationTracesTypeFromJSON(json['traces']),
        'trackItItems': !exists(json, 'trackItItems') ? undefined : TrackItItemsTypeFromJSON(json['trackItItems']),
        'transactionDiversions': !exists(json, 'transactionDiversions') ? undefined : HotelReservationInstructionTypeTransactionDiversionsFromJSON(json['transactionDiversions']),
        'upgradeEligible': !exists(json, 'upgradeEligible') ? undefined : json['upgradeEligible'],
        'userDefinedFields': !exists(json, 'userDefinedFields') ? undefined : UserDefinedFieldsTypeFromJSON(json['userDefinedFields']),
        'waitlist': !exists(json, 'waitlist') ? undefined : WaitlistResTypeFromJSON(json['waitlist']),
        'walkIn': !exists(json, 'walkIn') ? undefined : json['walkIn'],
        'webRegistrationCards': !exists(json, 'webRegistrationCards') ? undefined : AttachmentsTypeFromJSON(json['webRegistrationCards']),
    };
}

export function HotelReservationTypeToJSON(value?: HotelReservationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessRestriction': ResAccessRestrictionTypeToJSON(value.accessRestriction),
        'accessRestrictionMessage': value.accessRestrictionMessage,
        'additionalGuestInfo': ResGuestAdditionalInfoTypeToJSON(value.additionalGuestInfo),
        'advanceCheckIn': AdvanceCheckInTypeToJSON(value.advanceCheckIn),
        'alerts': AlertsTypeToJSON(value.alerts),
        'allowAutoCheckin': value.allowAutoCheckin,
        'allowMobileCheckout': value.allowMobileCheckout,
        'allowMobileViewFolio': value.allowMobileViewFolio,
        'allowPreRegistration': value.allowPreRegistration,
        'allowedActions': ReservationAllowedActionsTypeToJSON(value.allowedActions),
        'attachments': AttachmentsTypeToJSON(value.attachments),
        'autoBorrowFromHouse': value.autoBorrowFromHouse,
        'callHistory': CallHistoryTypeToJSON(value.callHistory),
        'cancellation': HotelReservationInstructionTypeCancellationToJSON(value.cancellation),
        'cashiering': ResCashieringTypeToJSON(value.cashiering),
        'catering': CateringResInfoTypeToJSON(value.catering),
        'chargeCardNumber': value.chargeCardNumber,
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CommentInfoTypeToJSON)),
        'compAuthorizer': CompAuthorizerInfoTypeToJSON(value.compAuthorizer),
        'computedReservationStatus': PMSResStatusTypeToJSON(value.computedReservationStatus),
        'confirmationLetters': ConfirmationsTypeToJSON(value.confirmationLetters),
        'createBusinessDate': value.createBusinessDate === undefined ? undefined : (value.createBusinessDate.toISOString().substr(0,10)),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'customChargeExemptionDetails': CustomChargeExemptionsTypeToJSON(value.customChargeExemptionDetails),
        'customNameValueDetail': NameValueDetailTypeToJSON(value.customNameValueDetail),
        'customReference': value.customReference,
        'displayColor': value.displayColor,
        'displayColorDetails': ReservationDisplayColorInfoTypeToJSON(value.displayColorDetails),
        'eCertificates': ReservationECertificatesTypeToJSON(value.eCertificates),
        'eCoupons': ECouponsTypeToJSON(value.eCoupons),
        'extSystemSync': value.extSystemSync,
        'externalReferences': ExternalReferencesTypeToJSON(value.externalReferences),
        'fixedCharges': FixedChargesTypeToJSON(value.fixedCharges),
        'folios': FoliosShortInfoTypeToJSON(value.folios),
        'guestComments': value.guestComments === undefined ? undefined : ((value.guestComments as Array<any>).map(CommentInfoTypeToJSON)),
        'guestMemberships': value.guestMemberships === undefined ? undefined : ((value.guestMemberships as Array<any>).map(MembershipTypeToJSON)),
        'guestMessages': GuestMessagesTypeToJSON(value.guestMessages),
        'hasOpenFolio': value.hasOpenFolio,
        'hotelId': value.hotelId,
        'housekeeping': ResHousekeepingTypeToJSON(value.housekeeping),
        'inventoryItems': ResInventoryItemsTypeToJSON(value.inventoryItems),
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'linkedReservation': LinkedReservationsInfoTypeToJSON(value.linkedReservation),
        'locators': ReservationLocatorsTypeToJSON(value.locators),
        'lockHandle': value.lockHandle,
        'markAsRecentlyAccessed': value.markAsRecentlyAccessed,
        'optedForCommunication': value.optedForCommunication,
        'overrideBlockRestriction': value.overrideBlockRestriction,
        'overrideExternalChecks': value.overrideExternalChecks,
        'overrideInstructions': OverrideInstructionsTypeToJSON(value.overrideInstructions),
        'overrideInventoryCheck': value.overrideInventoryCheck,
        'overrideOutOfServiceCheck': value.overrideOutOfServiceCheck,
        'overrideRoomOwnership': value.overrideRoomOwnership,
        'overrideRotationRoom': value.overrideRotationRoom,
        'party': value.party,
        'preRegistered': value.preRegistered,
        'preferenceCollection': value.preferenceCollection === undefined ? undefined : ((value.preferenceCollection as Array<any>).map(PreferenceTypeTypeToJSON)),
        'prepaidCards': PrepaidCardsTypeToJSON(value.prepaidCards),
        'primaryEnrollmentChain': value.primaryEnrollmentChain,
        'primaryEnrollmentResort': value.primaryEnrollmentResort,
        'printRate': value.printRate,
        'profileAwards': AwardsTypeToJSON(value.profileAwards),
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substr(0,10)),
        'queue': ReservationQueueInformationTypeToJSON(value.queue),
        'reinstateDate': value.reinstateDate === undefined ? undefined : (value.reinstateDate.toISOString().substr(0,10)),
        'reservationActivities': ActivityLookUpListToJSON(value.reservationActivities),
        'reservationCommunication': ResCommunicationTypeToJSON(value.reservationCommunication),
        'reservationGuests': value.reservationGuests === undefined ? undefined : ((value.reservationGuests as Array<any>).map(ResGuestTypeToJSON)),
        'reservationIdList': ReservationIdListToJSON(value.reservationIdList),
        'reservationIndicators': IndicatorsTypeToJSON(value.reservationIndicators),
        'reservationMembershipAwards': value.reservationMembershipAwards === undefined ? undefined : ((value.reservationMembershipAwards as Array<any>).map(ReservationMembershipAwardTypeToJSON)),
        'reservationMemberships': value.reservationMemberships === undefined ? undefined : ((value.reservationMemberships as Array<any>).map(ReservationMembershipTypeToJSON)),
        'reservationPackages': value.reservationPackages === undefined ? undefined : ((value.reservationPackages as Array<any>).map(ReservationPackageTypeToJSON)),
        'reservationPaymentMethods': ReservationPaymentMethodsTypeToJSON(value.reservationPaymentMethods),
        'reservationPolicies': ReservationPoliciesTypeToJSON(value.reservationPolicies),
        'reservationProfiles': HotelReservationInstructionTypeReservationProfilesToJSON(value.reservationProfiles),
        'reservationStatus': PMSResStatusTypeToJSON(value.reservationStatus),
        'roomStay': RoomStayTypeToJSON(value.roomStay),
        'roomStayReservation': value.roomStayReservation,
        'routingInstructions': RoutingInfoListTypeToJSON(value.routingInstructions),
        'scheduledActivities': ActivityLookUpListToJSON(value.scheduledActivities),
        'serviceRequests': ServiceRequestsToJSON(value.serviceRequests),
        'sharedGuests': ResSharedGuestListTypeToJSON(value.sharedGuests),
        'sourceOfSale': SourceOfSaleTypeToJSON(value.sourceOfSale),
        'tickets': TicketsTypeToJSON(value.tickets),
        'traces': HotelReservationTracesTypeToJSON(value.traces),
        'trackItItems': TrackItItemsTypeToJSON(value.trackItItems),
        'transactionDiversions': HotelReservationInstructionTypeTransactionDiversionsToJSON(value.transactionDiversions),
        'upgradeEligible': value.upgradeEligible,
        'userDefinedFields': UserDefinedFieldsTypeToJSON(value.userDefinedFields),
        'waitlist': WaitlistResTypeToJSON(value.waitlist),
        'walkIn': value.walkIn,
        'webRegistrationCards': AttachmentsTypeToJSON(value.webRegistrationCards),
    };
}

