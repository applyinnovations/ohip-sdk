/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelResvRQInfoType } from './ChannelResvRQInfoType';
import {
    ChannelResvRQInfoTypeFromJSON,
    ChannelResvRQInfoTypeFromJSONTyped,
    ChannelResvRQInfoTypeToJSON,
} from './ChannelResvRQInfoType';
import type { HotelReservationInstructionType } from './HotelReservationInstructionType';
import {
    HotelReservationInstructionTypeFromJSON,
    HotelReservationInstructionTypeFromJSONTyped,
    HotelReservationInstructionTypeToJSON,
} from './HotelReservationInstructionType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { ReservationsInstructionsType } from './ReservationsInstructionsType';
import {
    ReservationsInstructionsTypeFromJSON,
    ReservationsInstructionsTypeFromJSONTyped,
    ReservationsInstructionsTypeToJSON,
} from './ReservationsInstructionsType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface PutReservationRequest
 */
export interface PutReservationRequest {
    /**
     * A collection of Reservations with information that needs to be changed.
     * @type {Array<HotelReservationInstructionType>}
     * @memberof PutReservationRequest
     */
    reservations?: Array<HotelReservationInstructionType>;
    /**
     * 
     * @type {ReservationsInstructionsType}
     * @memberof PutReservationRequest
     */
    reservationsInstructionsType?: ReservationsInstructionsType;
    /**
     * 
     * @type {ChannelResvRQInfoType}
     * @memberof PutReservationRequest
     */
    channelInformation?: ChannelResvRQInfoType;
    /**
     * Boolean flag that forces reservation to updates in OPERA. By default, this value is false.
     * @type {boolean}
     * @memberof PutReservationRequest
     */
    reservationNotification?: boolean;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof PutReservationRequest
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof PutReservationRequest
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the PutReservationRequest interface.
 */
export function instanceOfPutReservationRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PutReservationRequestFromJSON(json: any): PutReservationRequest {
    return PutReservationRequestFromJSONTyped(json, false);
}

export function PutReservationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PutReservationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservations': !exists(json, 'reservations') ? undefined : ((json['reservations'] as Array<any>).map(HotelReservationInstructionTypeFromJSON)),
        'reservationsInstructionsType': !exists(json, 'reservationsInstructionsType') ? undefined : ReservationsInstructionsTypeFromJSON(json['reservationsInstructionsType']),
        'channelInformation': !exists(json, 'channelInformation') ? undefined : ChannelResvRQInfoTypeFromJSON(json['channelInformation']),
        'reservationNotification': !exists(json, 'reservationNotification') ? undefined : json['reservationNotification'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function PutReservationRequestToJSON(value?: PutReservationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservations': value.reservations === undefined ? undefined : ((value.reservations as Array<any>).map(HotelReservationInstructionTypeToJSON)),
        'reservationsInstructionsType': ReservationsInstructionsTypeToJSON(value.reservationsInstructionsType),
        'channelInformation': ChannelResvRQInfoTypeToJSON(value.channelInformation),
        'reservationNotification': value.reservationNotification,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

