/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Possible overlapping stay information of a reservation.
 * @export
 * @interface OverlappingStayInfoType
 */
export interface OverlappingStayInfoType {
    /**
     * The ending value of the date range.
     * @type {string}
     * @memberof OverlappingStayInfoType
     */
    end?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof OverlappingStayInfoType
     */
    excludedReservations?: Array<UniqueIDType>;
    /**
     * Hotel Code of the reservation.
     * @type {string}
     * @memberof OverlappingStayInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof OverlappingStayInfoType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {ReservationId}
     * @memberof OverlappingStayInfoType
     */
    reservationId?: ReservationId;
    /**
     * The starting value of the date range.
     * @type {string}
     * @memberof OverlappingStayInfoType
     */
    start?: string;
}

/**
 * Check if a given object implements the OverlappingStayInfoType interface.
 */
export function instanceOfOverlappingStayInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OverlappingStayInfoTypeFromJSON(json: any): OverlappingStayInfoType {
    return OverlappingStayInfoTypeFromJSONTyped(json, false);
}

export function OverlappingStayInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OverlappingStayInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'end': !exists(json, 'end') ? undefined : json['end'],
        'excludedReservations': !exists(json, 'excludedReservations') ? undefined : ((json['excludedReservations'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'start': !exists(json, 'start') ? undefined : json['start'],
    };
}

export function OverlappingStayInfoTypeToJSON(value?: OverlappingStayInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'end': value.end,
        'excludedReservations': value.excludedReservations === undefined ? undefined : ((value.excludedReservations as Array<any>).map(UniqueIDTypeToJSON)),
        'hotelId': value.hotelId,
        'profileId': ProfileIdToJSON(value.profileId),
        'reservationId': ReservationIdToJSON(value.reservationId),
        'start': value.start,
    };
}

