/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ActivityLogType
 */
export interface ActivityLogType {
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    hotelId?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    module?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    logDate?: string;
    /**
     * 
     * @type {number}
     * @memberof ActivityLogType
     */
    refActionId?: number;
    /**
     * 
     * @type {number}
     * @memberof ActivityLogType
     */
    logUserId?: number;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    logUserName?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    machineStation?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    croCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    actionType?: string;
    /**
     * 
     * @type {string}
     * @memberof ActivityLogType
     */
    actionDescription?: string;
    /**
     * The IP Address of the machine that performed the activity
     * @type {string}
     * @memberof ActivityLogType
     */
    iPAddress?: string;
    /**
     * The selected device code
     * @type {string}
     * @memberof ActivityLogType
     */
    deviceCode?: string;
}

/**
 * Check if a given object implements the ActivityLogType interface.
 */
export function instanceOfActivityLogType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityLogTypeFromJSON(json: any): ActivityLogType {
    return ActivityLogTypeFromJSONTyped(json, false);
}

export function ActivityLogTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityLogType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'module': !exists(json, 'module') ? undefined : json['module'],
        'logDate': !exists(json, 'logDate') ? undefined : json['logDate'],
        'refActionId': !exists(json, 'refActionId') ? undefined : json['refActionId'],
        'logUserId': !exists(json, 'logUserId') ? undefined : json['logUserId'],
        'logUserName': !exists(json, 'logUserName') ? undefined : json['logUserName'],
        'machineStation': !exists(json, 'machineStation') ? undefined : json['machineStation'],
        'croCode': !exists(json, 'croCode') ? undefined : json['croCode'],
        'actionType': !exists(json, 'actionType') ? undefined : json['actionType'],
        'actionDescription': !exists(json, 'actionDescription') ? undefined : json['actionDescription'],
        'iPAddress': !exists(json, 'iPAddress') ? undefined : json['iPAddress'],
        'deviceCode': !exists(json, 'deviceCode') ? undefined : json['deviceCode'],
    };
}

export function ActivityLogTypeToJSON(value?: ActivityLogType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'module': value.module,
        'logDate': value.logDate,
        'refActionId': value.refActionId,
        'logUserId': value.logUserId,
        'logUserName': value.logUserName,
        'machineStation': value.machineStation,
        'croCode': value.croCode,
        'actionType': value.actionType,
        'actionDescription': value.actionDescription,
        'iPAddress': value.iPAddress,
        'deviceCode': value.deviceCode,
    };
}

