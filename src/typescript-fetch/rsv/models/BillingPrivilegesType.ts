/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This stores the information for Bed Tax Reporting. Mainly used in Maldives.
 * @export
 * @interface BillingPrivilegesType
 */
export interface BillingPrivilegesType {
    /**
     * Indicated if a new reservation should be created and automatically checked in whenever the room is checked out. Available for pseudo room types only.
     * @type {boolean}
     * @memberof BillingPrivilegesType
     */
    allowAutoCheckin?: boolean;
    /**
     * Indicates if the is a candidate for auto folio settlement.
     * @type {boolean}
     * @memberof BillingPrivilegesType
     */
    autoSettlement?: boolean;
    /**
     * The interval of days between each auto folio settlement.
     * @type {number}
     * @memberof BillingPrivilegesType
     */
    autoSettlementFreq?: number;
    /**
     * The folio settlement type for auto folio settlement.
     * @type {string}
     * @memberof BillingPrivilegesType
     */
    autoSettlementType?: string;
    /**
     * Indicates if the reservation will be included in the Automatic Credit Limit Overages process and also be listed in the Credit Limit Overages screen results.
     * @type {boolean}
     * @memberof BillingPrivilegesType
     */
    creditLimitAutoPay?: boolean;
    /**
     * Indicates if the reservation has charging privileges after checkout.
     * @type {boolean}
     * @memberof BillingPrivilegesType
     */
    postStayCharging?: boolean;
    /**
     * Flag used by interface program during check in.
     * @type {boolean}
     * @memberof BillingPrivilegesType
     */
    postingRestriction?: boolean;
    /**
     * Indicates if the reservation has charging privileges before arrival.
     * @type {boolean}
     * @memberof BillingPrivilegesType
     */
    preStayCharging?: boolean;
    /**
     * Indicates if the guest can do video checkout
     * @type {boolean}
     * @memberof BillingPrivilegesType
     */
    videoCheckout?: boolean;
}

/**
 * Check if a given object implements the BillingPrivilegesType interface.
 */
export function instanceOfBillingPrivilegesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BillingPrivilegesTypeFromJSON(json: any): BillingPrivilegesType {
    return BillingPrivilegesTypeFromJSONTyped(json, false);
}

export function BillingPrivilegesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingPrivilegesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowAutoCheckin': !exists(json, 'allowAutoCheckin') ? undefined : json['allowAutoCheckin'],
        'autoSettlement': !exists(json, 'autoSettlement') ? undefined : json['autoSettlement'],
        'autoSettlementFreq': !exists(json, 'autoSettlementFreq') ? undefined : json['autoSettlementFreq'],
        'autoSettlementType': !exists(json, 'autoSettlementType') ? undefined : json['autoSettlementType'],
        'creditLimitAutoPay': !exists(json, 'creditLimitAutoPay') ? undefined : json['creditLimitAutoPay'],
        'postStayCharging': !exists(json, 'postStayCharging') ? undefined : json['postStayCharging'],
        'postingRestriction': !exists(json, 'postingRestriction') ? undefined : json['postingRestriction'],
        'preStayCharging': !exists(json, 'preStayCharging') ? undefined : json['preStayCharging'],
        'videoCheckout': !exists(json, 'videoCheckout') ? undefined : json['videoCheckout'],
    };
}

export function BillingPrivilegesTypeToJSON(value?: BillingPrivilegesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowAutoCheckin': value.allowAutoCheckin,
        'autoSettlement': value.autoSettlement,
        'autoSettlementFreq': value.autoSettlementFreq,
        'autoSettlementType': value.autoSettlementType,
        'creditLimitAutoPay': value.creditLimitAutoPay,
        'postStayCharging': value.postStayCharging,
        'postingRestriction': value.postingRestriction,
        'preStayCharging': value.preStayCharging,
        'videoCheckout': value.videoCheckout,
    };
}

