/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ECertificateConsumptionType } from './ECertificateConsumptionType';
import {
    ECertificateConsumptionTypeFromJSON,
    ECertificateConsumptionTypeFromJSONTyped,
    ECertificateConsumptionTypeToJSON,
} from './ECertificateConsumptionType';
import type { ECertificateInfoType } from './ECertificateInfoType';
import {
    ECertificateInfoTypeFromJSON,
    ECertificateInfoTypeFromJSONTyped,
    ECertificateInfoTypeToJSON,
} from './ECertificateInfoType';
import type { ECertificateIssueSourceType } from './ECertificateIssueSourceType';
import {
    ECertificateIssueSourceTypeFromJSON,
    ECertificateIssueSourceTypeFromJSONTyped,
    ECertificateIssueSourceTypeToJSON,
} from './ECertificateIssueSourceType';
import type { ECertificateStatusType } from './ECertificateStatusType';
import {
    ECertificateStatusTypeFromJSON,
    ECertificateStatusTypeFromJSONTyped,
    ECertificateStatusTypeToJSON,
} from './ECertificateStatusType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';

/**
 * E-Certificates details.
 * @export
 * @interface ECertificateType
 */
export interface ECertificateType {
    /**
     * System generated unique voucher number.
     * @type {string}
     * @memberof ECertificateType
     */
    voucherNo?: string;
    /**
     * Printed certificate no. This has to be unique.
     * @type {string}
     * @memberof ECertificateType
     */
    certificateNo?: string;
    /**
     * 
     * @type {ECertificateInfoType}
     * @memberof ECertificateType
     */
    eCertificateInfo?: ECertificateInfoType;
    /**
     * Date of expiry.
     * @type {string}
     * @memberof ECertificateType
     */
    expiryDate?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof ECertificateType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {ECertificateConsumptionType}
     * @memberof ECertificateType
     */
    consumptionDetail?: ECertificateConsumptionType;
    /**
     * 
     * @type {ECertificateStatusType}
     * @memberof ECertificateType
     */
    status?: ECertificateStatusType;
    /**
     * Print status of the certificate.
     * @type {boolean}
     * @memberof ECertificateType
     */
    printed?: boolean;
    /**
     * 
     * @type {ECertificateIssueSourceType}
     * @memberof ECertificateType
     */
    source?: ECertificateIssueSourceType;
    /**
     * Date when certificate was issued.
     * @type {string}
     * @memberof ECertificateType
     */
    issueDate?: string;
}

/**
 * Check if a given object implements the ECertificateType interface.
 */
export function instanceOfECertificateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ECertificateTypeFromJSON(json: any): ECertificateType {
    return ECertificateTypeFromJSONTyped(json, false);
}

export function ECertificateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ECertificateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'voucherNo': !exists(json, 'voucherNo') ? undefined : json['voucherNo'],
        'certificateNo': !exists(json, 'certificateNo') ? undefined : json['certificateNo'],
        'eCertificateInfo': !exists(json, 'eCertificateInfo') ? undefined : ECertificateInfoTypeFromJSON(json['eCertificateInfo']),
        'expiryDate': !exists(json, 'expiryDate') ? undefined : json['expiryDate'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'consumptionDetail': !exists(json, 'consumptionDetail') ? undefined : ECertificateConsumptionTypeFromJSON(json['consumptionDetail']),
        'status': !exists(json, 'status') ? undefined : ECertificateStatusTypeFromJSON(json['status']),
        'printed': !exists(json, 'printed') ? undefined : json['printed'],
        'source': !exists(json, 'source') ? undefined : ECertificateIssueSourceTypeFromJSON(json['source']),
        'issueDate': !exists(json, 'issueDate') ? undefined : json['issueDate'],
    };
}

export function ECertificateTypeToJSON(value?: ECertificateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'voucherNo': value.voucherNo,
        'certificateNo': value.certificateNo,
        'eCertificateInfo': ECertificateInfoTypeToJSON(value.eCertificateInfo),
        'expiryDate': value.expiryDate,
        'profileId': ProfileIdToJSON(value.profileId),
        'consumptionDetail': ECertificateConsumptionTypeToJSON(value.consumptionDetail),
        'status': ECertificateStatusTypeToJSON(value.status),
        'printed': value.printed,
        'source': ECertificateIssueSourceTypeToJSON(value.source),
        'issueDate': value.issueDate,
    };
}

