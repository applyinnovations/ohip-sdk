/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CopyReservationPaymentMethodsType } from './CopyReservationPaymentMethodsType';
import {
    CopyReservationPaymentMethodsTypeFromJSON,
    CopyReservationPaymentMethodsTypeFromJSONTyped,
    CopyReservationPaymentMethodsTypeToJSON,
} from './CopyReservationPaymentMethodsType';
import type { DailyRateType } from './DailyRateType';
import {
    DailyRateTypeFromJSON,
    DailyRateTypeFromJSONTyped,
    DailyRateTypeToJSON,
} from './DailyRateType';
import type { GuestCountsType } from './GuestCountsType';
import {
    GuestCountsTypeFromJSON,
    GuestCountsTypeFromJSONTyped,
    GuestCountsTypeToJSON,
} from './GuestCountsType';
import type { ResGuaranteeType } from './ResGuaranteeType';
import {
    ResGuaranteeTypeFromJSON,
    ResGuaranteeTypeFromJSONTyped,
    ResGuaranteeTypeToJSON,
} from './ResGuaranteeType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type for the profile information to create a new share reservation. This is used to create sharers from profiles.
 * @export
 * @interface CombineShareFromProfileType
 */
export interface CombineShareFromProfileType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CombineShareFromProfileType
     */
    newSharerId?: UniqueIDType;
    /**
     * 
     * @type {GuestCountsType}
     * @memberof CombineShareFromProfileType
     */
    guestCounts?: GuestCountsType;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof CombineShareFromProfileType
     */
    reservationPaymentMethod?: ReservationPaymentMethodType;
    /**
     * 
     * @type {CopyReservationPaymentMethodsType}
     * @memberof CombineShareFromProfileType
     */
    reservationPaymentMethods?: CopyReservationPaymentMethodsType;
    /**
     * 
     * @type {ResGuaranteeType}
     * @memberof CombineShareFromProfileType
     */
    guarantee?: ResGuaranteeType;
    /**
     * Defines room rate information on a daily basis.
     * @type {Array<DailyRateType>}
     * @memberof CombineShareFromProfileType
     */
    dailyRates?: Array<DailyRateType>;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof CombineShareFromProfileType
     */
    timeSpan?: TimeSpanType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CombineShareFromProfileType
     */
    routeAllTransactionsToShareReservationId?: UniqueIDType;
}

/**
 * Check if a given object implements the CombineShareFromProfileType interface.
 */
export function instanceOfCombineShareFromProfileType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CombineShareFromProfileTypeFromJSON(json: any): CombineShareFromProfileType {
    return CombineShareFromProfileTypeFromJSONTyped(json, false);
}

export function CombineShareFromProfileTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CombineShareFromProfileType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'newSharerId': !exists(json, 'newSharerId') ? undefined : UniqueIDTypeFromJSON(json['newSharerId']),
        'guestCounts': !exists(json, 'guestCounts') ? undefined : GuestCountsTypeFromJSON(json['guestCounts']),
        'reservationPaymentMethod': !exists(json, 'reservationPaymentMethod') ? undefined : ReservationPaymentMethodTypeFromJSON(json['reservationPaymentMethod']),
        'reservationPaymentMethods': !exists(json, 'reservationPaymentMethods') ? undefined : CopyReservationPaymentMethodsTypeFromJSON(json['reservationPaymentMethods']),
        'guarantee': !exists(json, 'guarantee') ? undefined : ResGuaranteeTypeFromJSON(json['guarantee']),
        'dailyRates': !exists(json, 'dailyRates') ? undefined : ((json['dailyRates'] as Array<any>).map(DailyRateTypeFromJSON)),
        'timeSpan': !exists(json, 'timeSpan') ? undefined : TimeSpanTypeFromJSON(json['timeSpan']),
        'routeAllTransactionsToShareReservationId': !exists(json, 'routeAllTransactionsToShareReservationId') ? undefined : UniqueIDTypeFromJSON(json['routeAllTransactionsToShareReservationId']),
    };
}

export function CombineShareFromProfileTypeToJSON(value?: CombineShareFromProfileType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'newSharerId': UniqueIDTypeToJSON(value.newSharerId),
        'guestCounts': GuestCountsTypeToJSON(value.guestCounts),
        'reservationPaymentMethod': ReservationPaymentMethodTypeToJSON(value.reservationPaymentMethod),
        'reservationPaymentMethods': CopyReservationPaymentMethodsTypeToJSON(value.reservationPaymentMethods),
        'guarantee': ResGuaranteeTypeToJSON(value.guarantee),
        'dailyRates': value.dailyRates === undefined ? undefined : ((value.dailyRates as Array<any>).map(DailyRateTypeToJSON)),
        'timeSpan': TimeSpanTypeToJSON(value.timeSpan),
        'routeAllTransactionsToShareReservationId': UniqueIDTypeToJSON(value.routeAllTransactionsToShareReservationId),
    };
}

