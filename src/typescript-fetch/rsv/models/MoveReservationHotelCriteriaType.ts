/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelReservationInstructionType } from './HotelReservationInstructionType';
import {
    HotelReservationInstructionTypeFromJSON,
    HotelReservationInstructionTypeFromJSONTyped,
    HotelReservationInstructionTypeToJSON,
} from './HotelReservationInstructionType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface MoveReservationHotelCriteriaType
 */
export interface MoveReservationHotelCriteriaType {
    /**
     * Hotel code for the current reservation being moved.
     * @type {string}
     * @memberof MoveReservationHotelCriteriaType
     */
    sourceHotelCode?: string;
    /**
     * Hotel code for the hotel which the reservation will be moved.
     * @type {string}
     * @memberof MoveReservationHotelCriteriaType
     */
    destinationHotelCode?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof MoveReservationHotelCriteriaType
     */
    reservationId?: ReservationId;
    /**
     * 
     * @type {HotelReservationInstructionType}
     * @memberof MoveReservationHotelCriteriaType
     */
    configuredReservation?: HotelReservationInstructionType;
    /**
     * Valid share reservation identifier. This ID will be verified against the SourceHotel.
     * @type {Array<Array<UniqueIDType>>}
     * @memberof MoveReservationHotelCriteriaType
     */
    includedSharers?: Array<Array<UniqueIDType>>;
    /**
     * 
     * @type {string}
     * @memberof MoveReservationHotelCriteriaType
     */
    moveReasonCode?: string;
    /**
     * If true, it indicates that rate codes and amounts for different days of the source reservation will be moved to target reservation. When false or null that means available rate codes from target property is used and will be part of REST request already.
     * @type {boolean}
     * @memberof MoveReservationHotelCriteriaType
     */
    retainRateCodeAndAmount?: boolean;
}

/**
 * Check if a given object implements the MoveReservationHotelCriteriaType interface.
 */
export function instanceOfMoveReservationHotelCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MoveReservationHotelCriteriaTypeFromJSON(json: any): MoveReservationHotelCriteriaType {
    return MoveReservationHotelCriteriaTypeFromJSONTyped(json, false);
}

export function MoveReservationHotelCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MoveReservationHotelCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceHotelCode': !exists(json, 'sourceHotelCode') ? undefined : json['sourceHotelCode'],
        'destinationHotelCode': !exists(json, 'destinationHotelCode') ? undefined : json['destinationHotelCode'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'configuredReservation': !exists(json, 'configuredReservation') ? undefined : HotelReservationInstructionTypeFromJSON(json['configuredReservation']),
        'includedSharers': !exists(json, 'includedSharers') ? undefined : json['includedSharers'],
        'moveReasonCode': !exists(json, 'moveReasonCode') ? undefined : json['moveReasonCode'],
        'retainRateCodeAndAmount': !exists(json, 'retainRateCodeAndAmount') ? undefined : json['retainRateCodeAndAmount'],
    };
}

export function MoveReservationHotelCriteriaTypeToJSON(value?: MoveReservationHotelCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceHotelCode': value.sourceHotelCode,
        'destinationHotelCode': value.destinationHotelCode,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'configuredReservation': HotelReservationInstructionTypeToJSON(value.configuredReservation),
        'includedSharers': value.includedSharers,
        'moveReasonCode': value.moveReasonCode,
        'retainRateCodeAndAmount': value.retainRateCodeAndAmount,
    };
}

