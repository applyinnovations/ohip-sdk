/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelReservationInstructionType } from './HotelReservationInstructionType';
import {
    HotelReservationInstructionTypeFromJSON,
    HotelReservationInstructionTypeFromJSONTyped,
    HotelReservationInstructionTypeToJSON,
} from './HotelReservationInstructionType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { ReservationIdList } from './ReservationIdList';
import {
    ReservationIdListFromJSON,
    ReservationIdListFromJSONTyped,
    ReservationIdListToJSON,
} from './ReservationIdList';

/**
 * 
 * @export
 * @interface MoveReservationHotelCriteriaType
 */
export interface MoveReservationHotelCriteriaType {
    /**
     * 
     * @type {HotelReservationInstructionType}
     * @memberof MoveReservationHotelCriteriaType
     */
    configuredReservation?: HotelReservationInstructionType;
    /**
     * Hotel code for the hotel which the reservation will be moved.
     * @type {string}
     * @memberof MoveReservationHotelCriteriaType
     */
    destinationHotelCode?: string;
    /**
     * Valid share reservation identifier. This ID will be verified against the SourceHotel.
     * @type {Array<ReservationIdList>}
     * @memberof MoveReservationHotelCriteriaType
     */
    includedSharers?: Array<ReservationIdList>;
    /**
     * 
     * @type {string}
     * @memberof MoveReservationHotelCriteriaType
     */
    moveReasonCode?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof MoveReservationHotelCriteriaType
     */
    reservationId?: ReservationId;
    /**
     * Hotel code for the current reservation being moved.
     * @type {string}
     * @memberof MoveReservationHotelCriteriaType
     */
    sourceHotelCode?: string;
}

/**
 * Check if a given object implements the MoveReservationHotelCriteriaType interface.
 */
export function instanceOfMoveReservationHotelCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MoveReservationHotelCriteriaTypeFromJSON(json: any): MoveReservationHotelCriteriaType {
    return MoveReservationHotelCriteriaTypeFromJSONTyped(json, false);
}

export function MoveReservationHotelCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MoveReservationHotelCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'configuredReservation': !exists(json, 'configuredReservation') ? undefined : HotelReservationInstructionTypeFromJSON(json['configuredReservation']),
        'destinationHotelCode': !exists(json, 'destinationHotelCode') ? undefined : json['destinationHotelCode'],
        'includedSharers': !exists(json, 'includedSharers') ? undefined : ((json['includedSharers'] as Array<any>).map(ReservationIdListFromJSON)),
        'moveReasonCode': !exists(json, 'moveReasonCode') ? undefined : json['moveReasonCode'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'sourceHotelCode': !exists(json, 'sourceHotelCode') ? undefined : json['sourceHotelCode'],
    };
}

export function MoveReservationHotelCriteriaTypeToJSON(value?: MoveReservationHotelCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'configuredReservation': HotelReservationInstructionTypeToJSON(value.configuredReservation),
        'destinationHotelCode': value.destinationHotelCode,
        'includedSharers': value.includedSharers === undefined ? undefined : ((value.includedSharers as Array<any>).map(ReservationIdListToJSON)),
        'moveReasonCode': value.moveReasonCode,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'sourceHotelCode': value.sourceHotelCode,
    };
}

