/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { CommentInfoType } from './CommentInfoType';
import {
    CommentInfoTypeFromJSON,
    CommentInfoTypeFromJSONTyped,
    CommentInfoTypeToJSON,
} from './CommentInfoType';
import type { MembershipTypeLevelType } from './MembershipTypeLevelType';
import {
    MembershipTypeLevelTypeFromJSON,
    MembershipTypeLevelTypeFromJSONTyped,
    MembershipTypeLevelTypeToJSON,
} from './MembershipTypeLevelType';
import type { ThresholdDetailsType } from './ThresholdDetailsType';
import {
    ThresholdDetailsTypeFromJSON,
    ThresholdDetailsTypeFromJSONTyped,
    ThresholdDetailsTypeToJSON,
} from './ThresholdDetailsType';
import type { TransactionDiversionDailyDetailsType } from './TransactionDiversionDailyDetailsType';
import {
    TransactionDiversionDailyDetailsTypeFromJSON,
    TransactionDiversionDailyDetailsTypeFromJSONTyped,
    TransactionDiversionDailyDetailsTypeToJSON,
} from './TransactionDiversionDailyDetailsType';
import type { TransactionDiversionRuleLevelType } from './TransactionDiversionRuleLevelType';
import {
    TransactionDiversionRuleLevelTypeFromJSON,
    TransactionDiversionRuleLevelTypeFromJSONTyped,
    TransactionDiversionRuleLevelTypeToJSON,
} from './TransactionDiversionRuleLevelType';
import type { TransactionDiversionRuleTypeType } from './TransactionDiversionRuleTypeType';
import {
    TransactionDiversionRuleTypeTypeFromJSON,
    TransactionDiversionRuleTypeTypeFromJSONTyped,
    TransactionDiversionRuleTypeTypeToJSON,
} from './TransactionDiversionRuleTypeType';

/**
 * A Transaction Diversion Rule Type
 * @export
 * @interface ReservationTransactionDiversionType
 */
export interface ReservationTransactionDiversionType {
    /**
     * Transaction Diversion Code
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    code?: string;
    /**
     * 
     * @type {TransactionDiversionDailyDetailsType}
     * @memberof ReservationTransactionDiversionType
     */
    dailyDetails?: TransactionDiversionDailyDetailsType;
    /**
     * User defined message for the Transaction Diversion Rule.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    description?: string;
    /**
     * User configured Sequence number.
     * @type {number}
     * @memberof ReservationTransactionDiversionType
     */
    displaySequence?: number;
    /**
     * Transaction diversions that are diverted .
     * @type {number}
     * @memberof ReservationTransactionDiversionType
     */
    diverted?: number;
    /**
     * Hotel code with which Transaction Diversion Rule is associated.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    hotelId?: string;
    /**
     * Indicator that tells whether the transaction diversion rule is active or not.
     * @type {boolean}
     * @memberof ReservationTransactionDiversionType
     */
    inactive?: boolean;
    /**
     * 
     * @type {TransactionDiversionRuleLevelType}
     * @memberof ReservationTransactionDiversionType
     */
    level?: TransactionDiversionRuleLevelType;
    /**
     * 
     * @type {MembershipTypeLevelType}
     * @memberof ReservationTransactionDiversionType
     */
    membership?: MembershipTypeLevelType;
    /**
     * 
     * @type {CommentInfoType}
     * @memberof ReservationTransactionDiversionType
     */
    notes?: CommentInfoType;
    /**
     * Transaction diversions that are posted.
     * @type {number}
     * @memberof ReservationTransactionDiversionType
     */
    posted?: number;
    /**
     * Room number to receive all the diverted transactions configured for this instruction.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    targetRoom?: string;
    /**
     * 
     * @type {ThresholdDetailsType}
     * @memberof ReservationTransactionDiversionType
     */
    thresholds?: ThresholdDetailsType;
    /**
     * Collection of Transaction Code List
     * @type {Array<CodeDescriptionType>}
     * @memberof ReservationTransactionDiversionType
     */
    transactionCodes?: Array<CodeDescriptionType>;
    /**
     * 
     * @type {TransactionDiversionRuleTypeType}
     * @memberof ReservationTransactionDiversionType
     */
    type?: TransactionDiversionRuleTypeType;
    /**
     * VIP code to consider while applying Diversion Instruction.
     * @type {string}
     * @memberof ReservationTransactionDiversionType
     */
    vipCode?: string;
}

/**
 * Check if a given object implements the ReservationTransactionDiversionType interface.
 */
export function instanceOfReservationTransactionDiversionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationTransactionDiversionTypeFromJSON(json: any): ReservationTransactionDiversionType {
    return ReservationTransactionDiversionTypeFromJSONTyped(json, false);
}

export function ReservationTransactionDiversionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationTransactionDiversionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'dailyDetails': !exists(json, 'dailyDetails') ? undefined : TransactionDiversionDailyDetailsTypeFromJSON(json['dailyDetails']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'diverted': !exists(json, 'diverted') ? undefined : json['diverted'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'level': !exists(json, 'level') ? undefined : TransactionDiversionRuleLevelTypeFromJSON(json['level']),
        'membership': !exists(json, 'membership') ? undefined : MembershipTypeLevelTypeFromJSON(json['membership']),
        'notes': !exists(json, 'notes') ? undefined : CommentInfoTypeFromJSON(json['notes']),
        'posted': !exists(json, 'posted') ? undefined : json['posted'],
        'targetRoom': !exists(json, 'targetRoom') ? undefined : json['targetRoom'],
        'thresholds': !exists(json, 'thresholds') ? undefined : ThresholdDetailsTypeFromJSON(json['thresholds']),
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : ((json['transactionCodes'] as Array<any>).map(CodeDescriptionTypeFromJSON)),
        'type': !exists(json, 'type') ? undefined : TransactionDiversionRuleTypeTypeFromJSON(json['type']),
        'vipCode': !exists(json, 'vipCode') ? undefined : json['vipCode'],
    };
}

export function ReservationTransactionDiversionTypeToJSON(value?: ReservationTransactionDiversionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'dailyDetails': TransactionDiversionDailyDetailsTypeToJSON(value.dailyDetails),
        'description': value.description,
        'displaySequence': value.displaySequence,
        'diverted': value.diverted,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'level': TransactionDiversionRuleLevelTypeToJSON(value.level),
        'membership': MembershipTypeLevelTypeToJSON(value.membership),
        'notes': CommentInfoTypeToJSON(value.notes),
        'posted': value.posted,
        'targetRoom': value.targetRoom,
        'thresholds': ThresholdDetailsTypeToJSON(value.thresholds),
        'transactionCodes': value.transactionCodes === undefined ? undefined : ((value.transactionCodes as Array<any>).map(CodeDescriptionTypeToJSON)),
        'type': TransactionDiversionRuleTypeTypeToJSON(value.type),
        'vipCode': value.vipCode,
    };
}

