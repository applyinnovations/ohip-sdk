/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BillingInstructionType } from './BillingInstructionType';
import {
    BillingInstructionTypeFromJSON,
    BillingInstructionTypeFromJSONTyped,
    BillingInstructionTypeToJSON,
} from './BillingInstructionType';
import type { RoutingInstructionTypeDuration } from './RoutingInstructionTypeDuration';
import {
    RoutingInstructionTypeDurationFromJSON,
    RoutingInstructionTypeDurationFromJSONTyped,
    RoutingInstructionTypeDurationToJSON,
} from './RoutingInstructionTypeDuration';
import type { TrxInfoType } from './TrxInfoType';
import {
    TrxInfoTypeFromJSON,
    TrxInfoTypeFromJSONTyped,
    TrxInfoTypeToJSON,
} from './TrxInfoType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Routing limit can be one of the three: Credit Limit, Percetage Limit, Covers Limit
 * @export
 * @interface RoutingInstructionType
 */
export interface RoutingInstructionType {
    /**
     * Set of Billing Instruction codes.
     * @type {Array<BillingInstructionType>}
     * @memberof RoutingInstructionType
     */
    billingInstructions?: Array<BillingInstructionType>;
    /**
     * Number of covers for this routing instruction.
     * @type {number}
     * @memberof RoutingInstructionType
     */
    covers?: number;
    /**
     * Allowable credit amount for this routing instruction. Null value means no limit, 0 equals zero.
     * @type {number}
     * @memberof RoutingInstructionType
     */
    creditLimit?: number;
    /**
     * 
     * @type {RoutingInstructionTypeDuration}
     * @memberof RoutingInstructionType
     */
    duration?: RoutingInstructionTypeDuration;
    /**
     * Amount of Credit used for this routing instruction.
     * @type {number}
     * @memberof RoutingInstructionType
     */
    limitUsed?: number;
    /**
     * The routing limit percentage allowed for this routing instruction.
     * @type {number}
     * @memberof RoutingInstructionType
     */
    percentageLimit?: number;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoutingInstructionType
     */
    routingLinkId?: UniqueIDType;
    /**
     * List of Transaction codes info.
     * @type {Array<TrxInfoType>}
     * @memberof RoutingInstructionType
     */
    transactionCodes?: Array<TrxInfoType>;
}

/**
 * Check if a given object implements the RoutingInstructionType interface.
 */
export function instanceOfRoutingInstructionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoutingInstructionTypeFromJSON(json: any): RoutingInstructionType {
    return RoutingInstructionTypeFromJSONTyped(json, false);
}

export function RoutingInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingInstructionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'billingInstructions': !exists(json, 'billingInstructions') ? undefined : ((json['billingInstructions'] as Array<any>).map(BillingInstructionTypeFromJSON)),
        'covers': !exists(json, 'covers') ? undefined : json['covers'],
        'creditLimit': !exists(json, 'creditLimit') ? undefined : json['creditLimit'],
        'duration': !exists(json, 'duration') ? undefined : RoutingInstructionTypeDurationFromJSON(json['duration']),
        'limitUsed': !exists(json, 'limitUsed') ? undefined : json['limitUsed'],
        'percentageLimit': !exists(json, 'percentageLimit') ? undefined : json['percentageLimit'],
        'routingLinkId': !exists(json, 'routingLinkId') ? undefined : UniqueIDTypeFromJSON(json['routingLinkId']),
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : ((json['transactionCodes'] as Array<any>).map(TrxInfoTypeFromJSON)),
    };
}

export function RoutingInstructionTypeToJSON(value?: RoutingInstructionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'billingInstructions': value.billingInstructions === undefined ? undefined : ((value.billingInstructions as Array<any>).map(BillingInstructionTypeToJSON)),
        'covers': value.covers,
        'creditLimit': value.creditLimit,
        'duration': RoutingInstructionTypeDurationToJSON(value.duration),
        'limitUsed': value.limitUsed,
        'percentageLimit': value.percentageLimit,
        'routingLinkId': UniqueIDTypeToJSON(value.routingLinkId),
        'transactionCodes': value.transactionCodes === undefined ? undefined : ((value.transactionCodes as Array<any>).map(TrxInfoTypeToJSON)),
    };
}

