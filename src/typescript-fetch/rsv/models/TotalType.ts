/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TaxesType } from './TaxesType';
import {
    TaxesTypeFromJSON,
    TaxesTypeFromJSONTyped,
    TaxesTypeToJSON,
} from './TaxesType';

/**
 * The total amount charged for the service including additional amounts and fees.
 * @export
 * @interface TotalType
 */
export interface TotalType {
    /**
     * 
     * @type {TaxesType}
     * @memberof TotalType
     */
    taxes?: TaxesType;
    /**
     * 
     * @type {string}
     * @memberof TotalType
     */
    description?: string;
    /**
     * The total amount does not include any associated tax (e.g., sales tax, VAT, GST or any associated tax), if the amount is Tax Exclusive. However, it does Include Taxes if it is marked as Tax Inclusive.
     * @type {number}
     * @memberof TotalType
     */
    amountBeforeTax?: number;
    /**
     * The total amount per room does not include any associated tax (e.g., sales tax, VAT, GST or any associated tax), for both Tax Exclusive/Inclusive.
     * @type {number}
     * @memberof TotalType
     */
    amountBeforeAnyTax?: number;
    /**
     * The total amount including all associated taxes (e.g., sales tax, VAT, GST or any associated tax).
     * @type {number}
     * @memberof TotalType
     */
    amountAfterTax?: number;
    /**
     * The code specifying a monetary unit. Use ISO 4217, three alpha code.
     * @type {string}
     * @memberof TotalType
     */
    currencyCode?: string;
    /**
     * The symbol for the currency, e.g, for currencyCode USD the symbol is $.
     * @type {string}
     * @memberof TotalType
     */
    currencySymbol?: string;
    /**
     * Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
     * @type {number}
     * @memberof TotalType
     */
    decimalPlaces?: number;
    /**
     * Type of charge.
     * @type {string}
     * @memberof TotalType
     */
    code?: string;
    /**
     * When true indicates that the rate amount has been overridden.
     * @type {boolean}
     * @memberof TotalType
     */
    rateOverride?: boolean;
    /**
     * The rate's base price. Amount excluding price for any add to rate combine line package attached to the rate.Also excludes any discounts
     * @type {number}
     * @memberof TotalType
     */
    baseAmount?: number;
    /**
     * The total amount per room not including any associated tax (e.g., sales tax, VAT, GST or any associated tax).
     * @type {number}
     * @memberof TotalType
     */
    amountBeforeTaxPerRoom?: number;
    /**
     * The total amount per room including all associated taxes (e.g., sales tax, VAT, GST or any associated tax).
     * @type {number}
     * @memberof TotalType
     */
    amountAfterTaxPerRoom?: number;
}

/**
 * Check if a given object implements the TotalType interface.
 */
export function instanceOfTotalType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TotalTypeFromJSON(json: any): TotalType {
    return TotalTypeFromJSONTyped(json, false);
}

export function TotalTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TotalType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taxes': !exists(json, 'taxes') ? undefined : TaxesTypeFromJSON(json['taxes']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'amountBeforeTax': !exists(json, 'amountBeforeTax') ? undefined : json['amountBeforeTax'],
        'amountBeforeAnyTax': !exists(json, 'amountBeforeAnyTax') ? undefined : json['amountBeforeAnyTax'],
        'amountAfterTax': !exists(json, 'amountAfterTax') ? undefined : json['amountAfterTax'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'currencySymbol': !exists(json, 'currencySymbol') ? undefined : json['currencySymbol'],
        'decimalPlaces': !exists(json, 'decimalPlaces') ? undefined : json['decimalPlaces'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'rateOverride': !exists(json, 'rateOverride') ? undefined : json['rateOverride'],
        'baseAmount': !exists(json, 'baseAmount') ? undefined : json['baseAmount'],
        'amountBeforeTaxPerRoom': !exists(json, 'amountBeforeTaxPerRoom') ? undefined : json['amountBeforeTaxPerRoom'],
        'amountAfterTaxPerRoom': !exists(json, 'amountAfterTaxPerRoom') ? undefined : json['amountAfterTaxPerRoom'],
    };
}

export function TotalTypeToJSON(value?: TotalType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taxes': TaxesTypeToJSON(value.taxes),
        'description': value.description,
        'amountBeforeTax': value.amountBeforeTax,
        'amountBeforeAnyTax': value.amountBeforeAnyTax,
        'amountAfterTax': value.amountAfterTax,
        'currencyCode': value.currencyCode,
        'currencySymbol': value.currencySymbol,
        'decimalPlaces': value.decimalPlaces,
        'code': value.code,
        'rateOverride': value.rateOverride,
        'baseAmount': value.baseAmount,
        'amountBeforeTaxPerRoom': value.amountBeforeTaxPerRoom,
        'amountAfterTaxPerRoom': value.amountAfterTaxPerRoom,
    };
}

