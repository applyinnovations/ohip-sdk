/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EffectiveRateType } from './EffectiveRateType';
import {
    EffectiveRateTypeFromJSON,
    EffectiveRateTypeFromJSONTyped,
    EffectiveRateTypeToJSON,
} from './EffectiveRateType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { ShareDistributionInstructionType } from './ShareDistributionInstructionType';
import {
    ShareDistributionInstructionTypeFromJSON,
    ShareDistributionInstructionTypeFromJSONTyped,
    ShareDistributionInstructionTypeToJSON,
} from './ShareDistributionInstructionType';
import type { ShareTypeType } from './ShareTypeType';
import {
    ShareTypeTypeFromJSON,
    ShareTypeTypeFromJSONTyped,
    ShareTypeTypeToJSON,
} from './ShareTypeType';

/**
 * 
 * @export
 * @interface ShareReservationInstructionType
 */
export interface ShareReservationInstructionType {
    /**
     * Collection of effective rate amount per guest on specific dates.
     * @type {Array<EffectiveRateType>}
     * @memberof ShareReservationInstructionType
     */
    effectiveRates?: Array<EffectiveRateType>;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof ShareReservationInstructionType
     */
    paymentMethod?: ReservationPaymentMethodType;
    /**
     * 
     * @type {ShareDistributionInstructionType}
     * @memberof ShareReservationInstructionType
     */
    rateAmountShare?: ShareDistributionInstructionType;
    /**
     * 
     * @type {ShareTypeType}
     * @memberof ShareReservationInstructionType
     */
    shareType?: ShareTypeType;
    /**
     * Indicates whether fixed rate will be applied to all shares.
     * @type {boolean}
     * @memberof ShareReservationInstructionType
     */
    fixedRate?: boolean;
}

/**
 * Check if a given object implements the ShareReservationInstructionType interface.
 */
export function instanceOfShareReservationInstructionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ShareReservationInstructionTypeFromJSON(json: any): ShareReservationInstructionType {
    return ShareReservationInstructionTypeFromJSONTyped(json, false);
}

export function ShareReservationInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShareReservationInstructionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'effectiveRates': !exists(json, 'effectiveRates') ? undefined : ((json['effectiveRates'] as Array<any>).map(EffectiveRateTypeFromJSON)),
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : ReservationPaymentMethodTypeFromJSON(json['paymentMethod']),
        'rateAmountShare': !exists(json, 'rateAmountShare') ? undefined : ShareDistributionInstructionTypeFromJSON(json['rateAmountShare']),
        'shareType': !exists(json, 'shareType') ? undefined : ShareTypeTypeFromJSON(json['shareType']),
        'fixedRate': !exists(json, 'fixedRate') ? undefined : json['fixedRate'],
    };
}

export function ShareReservationInstructionTypeToJSON(value?: ShareReservationInstructionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'effectiveRates': value.effectiveRates === undefined ? undefined : ((value.effectiveRates as Array<any>).map(EffectiveRateTypeToJSON)),
        'paymentMethod': ReservationPaymentMethodTypeToJSON(value.paymentMethod),
        'rateAmountShare': ShareDistributionInstructionTypeToJSON(value.rateAmountShare),
        'shareType': ShareTypeTypeToJSON(value.shareType),
        'fixedRate': value.fixedRate,
    };
}

