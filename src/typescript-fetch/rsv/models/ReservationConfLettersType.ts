/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfirmationType } from './ConfirmationType';
import {
    ConfirmationTypeFromJSON,
    ConfirmationTypeFromJSONTyped,
    ConfirmationTypeToJSON,
} from './ConfirmationType';
import type { ReservationInfoType } from './ReservationInfoType';
import {
    ReservationInfoTypeFromJSON,
    ReservationInfoTypeFromJSONTyped,
    ReservationInfoTypeToJSON,
} from './ReservationInfoType';

/**
 * Reservation information and the confirmation letters type attached with it.
 * @export
 * @interface ReservationConfLettersType
 */
export interface ReservationConfLettersType {
    /**
     * List of confirmation letters.
     * @type {Array<ConfirmationType>}
     * @memberof ReservationConfLettersType
     */
    confLetters?: Array<ConfirmationType>;
    /**
     * 
     * @type {ReservationInfoType}
     * @memberof ReservationConfLettersType
     */
    reservation?: ReservationInfoType;
}

/**
 * Check if a given object implements the ReservationConfLettersType interface.
 */
export function instanceOfReservationConfLettersType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationConfLettersTypeFromJSON(json: any): ReservationConfLettersType {
    return ReservationConfLettersTypeFromJSONTyped(json, false);
}

export function ReservationConfLettersTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationConfLettersType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'confLetters': !exists(json, 'confLetters') ? undefined : ((json['confLetters'] as Array<any>).map(ConfirmationTypeFromJSON)),
        'reservation': !exists(json, 'reservation') ? undefined : ReservationInfoTypeFromJSON(json['reservation']),
    };
}

export function ReservationConfLettersTypeToJSON(value?: ReservationConfLettersType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'confLetters': value.confLetters === undefined ? undefined : ((value.confLetters as Array<any>).map(ConfirmationTypeToJSON)),
        'reservation': ReservationInfoTypeToJSON(value.reservation),
    };
}

