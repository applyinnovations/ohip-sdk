/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GuestLastStayInfoType } from './GuestLastStayInfoType';
import {
    GuestLastStayInfoTypeFromJSON,
    GuestLastStayInfoTypeFromJSONTyped,
    GuestLastStayInfoTypeToJSON,
} from './GuestLastStayInfoType';

/**
 * 
 * @export
 * @interface ResGuestAdditionalInfoType
 */
export interface ResGuestAdditionalInfoType {
    /**
     * Entry Date into the country. (Croatian Requirements).
     * @type {Date}
     * @memberof ResGuestAdditionalInfoType
     */
    dateOfEntry?: Date;
    /**
     * Guest Classification for the data export.
     * @type {string}
     * @memberof ResGuestAdditionalInfoType
     */
    guestClassification?: string;
    /**
     * Guest Status for the data export.
     * @type {string}
     * @memberof ResGuestAdditionalInfoType
     */
    guestStatus?: string;
    /**
     * 
     * @type {GuestLastStayInfoType}
     * @memberof ResGuestAdditionalInfoType
     */
    lastStay?: GuestLastStayInfoType;
    /**
     * Entry Date into the country. (Croatian Requirements).
     * @type {string}
     * @memberof ResGuestAdditionalInfoType
     */
    nextDestination?: string;
    /**
     * Entry point into the country. (Croatian Requirements).
     * @type {string}
     * @memberof ResGuestAdditionalInfoType
     */
    portOfEntry?: string;
    /**
     * Preferred Room Type of the guest.
     * @type {string}
     * @memberof ResGuestAdditionalInfoType
     */
    preferredRoomType?: string;
    /**
     * Purpose of stay.
     * @type {string}
     * @memberof ResGuestAdditionalInfoType
     */
    purposeOfStay?: string;
}

/**
 * Check if a given object implements the ResGuestAdditionalInfoType interface.
 */
export function instanceOfResGuestAdditionalInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResGuestAdditionalInfoTypeFromJSON(json: any): ResGuestAdditionalInfoType {
    return ResGuestAdditionalInfoTypeFromJSONTyped(json, false);
}

export function ResGuestAdditionalInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResGuestAdditionalInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dateOfEntry': !exists(json, 'dateOfEntry') ? undefined : (new Date(json['dateOfEntry'])),
        'guestClassification': !exists(json, 'guestClassification') ? undefined : json['guestClassification'],
        'guestStatus': !exists(json, 'guestStatus') ? undefined : json['guestStatus'],
        'lastStay': !exists(json, 'lastStay') ? undefined : GuestLastStayInfoTypeFromJSON(json['lastStay']),
        'nextDestination': !exists(json, 'nextDestination') ? undefined : json['nextDestination'],
        'portOfEntry': !exists(json, 'portOfEntry') ? undefined : json['portOfEntry'],
        'preferredRoomType': !exists(json, 'preferredRoomType') ? undefined : json['preferredRoomType'],
        'purposeOfStay': !exists(json, 'purposeOfStay') ? undefined : json['purposeOfStay'],
    };
}

export function ResGuestAdditionalInfoTypeToJSON(value?: ResGuestAdditionalInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dateOfEntry': value.dateOfEntry === undefined ? undefined : (value.dateOfEntry.toISOString().substring(0,10)),
        'guestClassification': value.guestClassification,
        'guestStatus': value.guestStatus,
        'lastStay': GuestLastStayInfoTypeToJSON(value.lastStay),
        'nextDestination': value.nextDestination,
        'portOfEntry': value.portOfEntry,
        'preferredRoomType': value.preferredRoomType,
        'purposeOfStay': value.purposeOfStay,
    };
}

