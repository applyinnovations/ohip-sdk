/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationRoomOwnershipType } from './ReservationRoomOwnershipType';
import {
    ReservationRoomOwnershipTypeFromJSON,
    ReservationRoomOwnershipTypeFromJSONTyped,
    ReservationRoomOwnershipTypeToJSON,
} from './ReservationRoomOwnershipType';

/**
 * Room information of the reservation for the current day.
 * @export
 * @interface CurrentRoomInfoType
 */
export interface CurrentRoomInfoType {
    /**
     * Current room type.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomType?: string;
    /**
     * Current room number.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomId?: string;
    /**
     * 
     * @type {ReservationRoomOwnershipType}
     * @memberof CurrentRoomInfoType
     */
    roomOwnershipType?: ReservationRoomOwnershipType;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentRoomInfoType
     */
    suggestedRoomNumbers?: Array<string>;
    /**
     * Current room description.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomDescription?: string;
    /**
     * Represents the room view code like City view, River view, Ocean view etc.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomViewCode?: string;
    /**
     * Represents the room was assigned by AI Room Assignment.
     * @type {boolean}
     * @memberof CurrentRoomInfoType
     */
    assignedByAI?: boolean;
    /**
     * Represents the room was upgraded by AI Room Assignment.
     * @type {boolean}
     * @memberof CurrentRoomInfoType
     */
    upgradedByAI?: boolean;
}

/**
 * Check if a given object implements the CurrentRoomInfoType interface.
 */
export function instanceOfCurrentRoomInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrentRoomInfoTypeFromJSON(json: any): CurrentRoomInfoType {
    return CurrentRoomInfoTypeFromJSONTyped(json, false);
}

export function CurrentRoomInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentRoomInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'roomOwnershipType': !exists(json, 'roomOwnershipType') ? undefined : ReservationRoomOwnershipTypeFromJSON(json['roomOwnershipType']),
        'suggestedRoomNumbers': !exists(json, 'suggestedRoomNumbers') ? undefined : json['suggestedRoomNumbers'],
        'roomDescription': !exists(json, 'roomDescription') ? undefined : json['roomDescription'],
        'roomViewCode': !exists(json, 'roomViewCode') ? undefined : json['roomViewCode'],
        'assignedByAI': !exists(json, 'assignedByAI') ? undefined : json['assignedByAI'],
        'upgradedByAI': !exists(json, 'upgradedByAI') ? undefined : json['upgradedByAI'],
    };
}

export function CurrentRoomInfoTypeToJSON(value?: CurrentRoomInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomType': value.roomType,
        'roomId': value.roomId,
        'roomOwnershipType': ReservationRoomOwnershipTypeToJSON(value.roomOwnershipType),
        'suggestedRoomNumbers': value.suggestedRoomNumbers,
        'roomDescription': value.roomDescription,
        'roomViewCode': value.roomViewCode,
        'assignedByAI': value.assignedByAI,
        'upgradedByAI': value.upgradedByAI,
    };
}

