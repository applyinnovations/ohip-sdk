/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PMSResStatusType } from './PMSResStatusType';
import {
    PMSResStatusTypeFromJSON,
    PMSResStatusTypeFromJSONTyped,
    PMSResStatusTypeToJSON,
} from './PMSResStatusType';

/**
 * 
 * @export
 * @interface LastCommittedResvType
 */
export interface LastCommittedResvType {
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof LastCommittedResvType
     */
    reservationStatus?: PMSResStatusType;
    /**
     * Current room type.
     * @type {string}
     * @memberof LastCommittedResvType
     */
    roomType?: string;
    /**
     * Number of rooms
     * @type {number}
     * @memberof LastCommittedResvType
     */
    numberOfRooms?: number;
    /**
     * 
     * @type {string}
     * @memberof LastCommittedResvType
     */
    arrivalDate?: string;
    /**
     * 
     * @type {string}
     * @memberof LastCommittedResvType
     */
    departureDate?: string;
}

/**
 * Check if a given object implements the LastCommittedResvType interface.
 */
export function instanceOfLastCommittedResvType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LastCommittedResvTypeFromJSON(json: any): LastCommittedResvType {
    return LastCommittedResvTypeFromJSONTyped(json, false);
}

export function LastCommittedResvTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LastCommittedResvType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['reservationStatus']),
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'numberOfRooms': !exists(json, 'numberOfRooms') ? undefined : json['numberOfRooms'],
        'arrivalDate': !exists(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'departureDate': !exists(json, 'departureDate') ? undefined : json['departureDate'],
    };
}

export function LastCommittedResvTypeToJSON(value?: LastCommittedResvType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationStatus': PMSResStatusTypeToJSON(value.reservationStatus),
        'roomType': value.roomType,
        'numberOfRooms': value.numberOfRooms,
        'arrivalDate': value.arrivalDate,
        'departureDate': value.departureDate,
    };
}

