/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Membership Details
 * @export
 * @interface MembershipDetails
 */
export interface MembershipDetails {
    /**
     * Membership Internal ID.
     * @type {string}
     * @memberof MembershipDetails
     */
    membershipId?: string;
    /**
     * Membership number.
     * @type {string}
     * @memberof MembershipDetails
     */
    membershipNumber?: string;
    /**
     * Membership Type.
     * @type {string}
     * @memberof MembershipDetails
     */
    membershipType?: string;
    /**
     * Membership Level.
     * @type {string}
     * @memberof MembershipDetails
     */
    membershipLevel?: string;
    /**
     * Multiple Memberships.
     * @type {boolean}
     * @memberof MembershipDetails
     */
    multipleMemberships?: boolean;
}

/**
 * Check if a given object implements the MembershipDetails interface.
 */
export function instanceOfMembershipDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipDetailsFromJSON(json: any): MembershipDetails {
    return MembershipDetailsFromJSONTyped(json, false);
}

export function MembershipDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'membershipId': !exists(json, 'membershipId') ? undefined : json['membershipId'],
        'membershipNumber': !exists(json, 'membershipNumber') ? undefined : json['membershipNumber'],
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'membershipLevel': !exists(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'multipleMemberships': !exists(json, 'multipleMemberships') ? undefined : json['multipleMemberships'],
    };
}

export function MembershipDetailsToJSON(value?: MembershipDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'membershipId': value.membershipId,
        'membershipNumber': value.membershipNumber,
        'membershipType': value.membershipType,
        'membershipLevel': value.membershipLevel,
        'multipleMemberships': value.multipleMemberships,
    };
}

