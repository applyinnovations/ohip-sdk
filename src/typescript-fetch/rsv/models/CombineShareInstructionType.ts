/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EffectiveRatesType } from './EffectiveRatesType';
import {
    EffectiveRatesTypeFromJSON,
    EffectiveRatesTypeFromJSONTyped,
    EffectiveRatesTypeToJSON,
} from './EffectiveRatesType';
import type { OverrideInstructionType } from './OverrideInstructionType';
import {
    OverrideInstructionTypeFromJSON,
    OverrideInstructionTypeFromJSONTyped,
    OverrideInstructionTypeToJSON,
} from './OverrideInstructionType';
import type { RateChangeInstructionType } from './RateChangeInstructionType';
import {
    RateChangeInstructionTypeFromJSON,
    RateChangeInstructionTypeFromJSONTyped,
    RateChangeInstructionTypeToJSON,
} from './RateChangeInstructionType';
import type { ShareDistributionInstructionType } from './ShareDistributionInstructionType';
import {
    ShareDistributionInstructionTypeFromJSON,
    ShareDistributionInstructionTypeFromJSONTyped,
    ShareDistributionInstructionTypeToJSON,
} from './ShareDistributionInstructionType';

/**
 * Instructions for overriding checks during combine share operation.
 * @export
 * @interface CombineShareInstructionType
 */
export interface CombineShareInstructionType {
    /**
     * 
     * @type {ShareDistributionInstructionType}
     * @memberof CombineShareInstructionType
     */
    distributionType?: ShareDistributionInstructionType;
    /**
     * 
     * @type {EffectiveRatesType}
     * @memberof CombineShareInstructionType
     */
    effectiveRates?: EffectiveRatesType;
    /**
     * 
     * @type {OverrideInstructionType}
     * @memberof CombineShareInstructionType
     */
    overrideInstruction?: OverrideInstructionType;
    /**
     * Indicate to override the room inventory check if applicable.
     * @type {boolean}
     * @memberof CombineShareInstructionType
     */
    overrideInventoryCheck?: boolean;
    /**
     * Indicate to override the check on maximum room occupancy if applicable.
     * @type {boolean}
     * @memberof CombineShareInstructionType
     */
    overrideMaxOccupancyCheck?: boolean;
    /**
     * 
     * @type {RateChangeInstructionType}
     * @memberof CombineShareInstructionType
     */
    rateChangeInstruction?: RateChangeInstructionType;
    /**
     * If the joining sharer is checked in, do a room move to the main sharer's room.
     * @type {boolean}
     * @memberof CombineShareInstructionType
     */
    roomMoveCheckedinResv?: boolean;
}

/**
 * Check if a given object implements the CombineShareInstructionType interface.
 */
export function instanceOfCombineShareInstructionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CombineShareInstructionTypeFromJSON(json: any): CombineShareInstructionType {
    return CombineShareInstructionTypeFromJSONTyped(json, false);
}

export function CombineShareInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CombineShareInstructionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'distributionType': !exists(json, 'distributionType') ? undefined : ShareDistributionInstructionTypeFromJSON(json['distributionType']),
        'effectiveRates': !exists(json, 'effectiveRates') ? undefined : EffectiveRatesTypeFromJSON(json['effectiveRates']),
        'overrideInstruction': !exists(json, 'overrideInstruction') ? undefined : OverrideInstructionTypeFromJSON(json['overrideInstruction']),
        'overrideInventoryCheck': !exists(json, 'overrideInventoryCheck') ? undefined : json['overrideInventoryCheck'],
        'overrideMaxOccupancyCheck': !exists(json, 'overrideMaxOccupancyCheck') ? undefined : json['overrideMaxOccupancyCheck'],
        'rateChangeInstruction': !exists(json, 'rateChangeInstruction') ? undefined : RateChangeInstructionTypeFromJSON(json['rateChangeInstruction']),
        'roomMoveCheckedinResv': !exists(json, 'roomMoveCheckedinResv') ? undefined : json['roomMoveCheckedinResv'],
    };
}

export function CombineShareInstructionTypeToJSON(value?: CombineShareInstructionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'distributionType': ShareDistributionInstructionTypeToJSON(value.distributionType),
        'effectiveRates': EffectiveRatesTypeToJSON(value.effectiveRates),
        'overrideInstruction': OverrideInstructionTypeToJSON(value.overrideInstruction),
        'overrideInventoryCheck': value.overrideInventoryCheck,
        'overrideMaxOccupancyCheck': value.overrideMaxOccupancyCheck,
        'rateChangeInstruction': RateChangeInstructionTypeToJSON(value.rateChangeInstruction),
        'roomMoveCheckedinResv': value.roomMoveCheckedinResv,
    };
}

