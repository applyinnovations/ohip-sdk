/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Statistics of one room pool.
 * @export
 * @interface RoomPoolStatType
 */
export interface RoomPoolStatType {
    /**
     * Room pool (room pool represents a group of room types).
     * @type {string}
     * @memberof RoomPoolStatType
     */
    roomPool?: string;
    /**
     * Number of non-complementary rooms.
     * @type {number}
     * @memberof RoomPoolStatType
     */
    paidRooms?: number;
    /**
     * Number of complementary rooms.
     * @type {number}
     * @memberof RoomPoolStatType
     */
    compRooms?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof RoomPoolStatType
     */
    roomRevenue?: CurrencyAmountType;
}

/**
 * Check if a given object implements the RoomPoolStatType interface.
 */
export function instanceOfRoomPoolStatType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomPoolStatTypeFromJSON(json: any): RoomPoolStatType {
    return RoomPoolStatTypeFromJSONTyped(json, false);
}

export function RoomPoolStatTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomPoolStatType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomPool': !exists(json, 'roomPool') ? undefined : json['roomPool'],
        'paidRooms': !exists(json, 'paidRooms') ? undefined : json['paidRooms'],
        'compRooms': !exists(json, 'compRooms') ? undefined : json['compRooms'],
        'roomRevenue': !exists(json, 'roomRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['roomRevenue']),
    };
}

export function RoomPoolStatTypeToJSON(value?: RoomPoolStatType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomPool': value.roomPool,
        'paidRooms': value.paidRooms,
        'compRooms': value.compRooms,
        'roomRevenue': CurrencyAmountTypeToJSON(value.roomRevenue),
    };
}

