/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AwardUpgradeDetailType } from './AwardUpgradeDetailType';
import {
    AwardUpgradeDetailTypeFromJSON,
    AwardUpgradeDetailTypeFromJSONTyped,
    AwardUpgradeDetailTypeToJSON,
} from './AwardUpgradeDetailType';

/**
 * 
 * @export
 * @interface AwardUpgradeSummaryType
 */
export interface AwardUpgradeSummaryType {
    /**
     * User configured award code.
     * @type {string}
     * @memberof AwardUpgradeSummaryType
     */
    awardCode?: string;
    /**
     * From Room type associated with the award.
     * @type {string}
     * @memberof AwardUpgradeSummaryType
     */
    fromRoomType?: string;
    /**
     * To Room type associated with the award.
     * @type {string}
     * @memberof AwardUpgradeSummaryType
     */
    toRoomType?: string;
    /**
     * Total Number of points required for the award.
     * @type {number}
     * @memberof AwardUpgradeSummaryType
     */
    pointsRequired?: number;
    /**
     * Total Number of penalty points if cancelled.
     * @type {number}
     * @memberof AwardUpgradeSummaryType
     */
    penaltyPoints?: number;
    /**
     * Number days before arrival to apply penalty for cancellation.
     * @type {number}
     * @memberof AwardUpgradeSummaryType
     */
    penaltyDays?: number;
    /**
     * Number points deducted if award is cancelled.
     * @type {number}
     * @memberof AwardUpgradeSummaryType
     */
    penaltyCharge?: number;
    /**
     * Type of cancel penalty like Points, etc.
     * @type {string}
     * @memberof AwardUpgradeSummaryType
     */
    penaltyType?: string;
    /**
     * Daily Details related to award upgrade.
     * @type {Array<AwardUpgradeDetailType>}
     * @memberof AwardUpgradeSummaryType
     */
    awardUpgradeDetails?: Array<AwardUpgradeDetailType>;
}

/**
 * Check if a given object implements the AwardUpgradeSummaryType interface.
 */
export function instanceOfAwardUpgradeSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AwardUpgradeSummaryTypeFromJSON(json: any): AwardUpgradeSummaryType {
    return AwardUpgradeSummaryTypeFromJSONTyped(json, false);
}

export function AwardUpgradeSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwardUpgradeSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'awardCode': !exists(json, 'awardCode') ? undefined : json['awardCode'],
        'fromRoomType': !exists(json, 'fromRoomType') ? undefined : json['fromRoomType'],
        'toRoomType': !exists(json, 'toRoomType') ? undefined : json['toRoomType'],
        'pointsRequired': !exists(json, 'pointsRequired') ? undefined : json['pointsRequired'],
        'penaltyPoints': !exists(json, 'penaltyPoints') ? undefined : json['penaltyPoints'],
        'penaltyDays': !exists(json, 'penaltyDays') ? undefined : json['penaltyDays'],
        'penaltyCharge': !exists(json, 'penaltyCharge') ? undefined : json['penaltyCharge'],
        'penaltyType': !exists(json, 'penaltyType') ? undefined : json['penaltyType'],
        'awardUpgradeDetails': !exists(json, 'awardUpgradeDetails') ? undefined : ((json['awardUpgradeDetails'] as Array<any>).map(AwardUpgradeDetailTypeFromJSON)),
    };
}

export function AwardUpgradeSummaryTypeToJSON(value?: AwardUpgradeSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'awardCode': value.awardCode,
        'fromRoomType': value.fromRoomType,
        'toRoomType': value.toRoomType,
        'pointsRequired': value.pointsRequired,
        'penaltyPoints': value.penaltyPoints,
        'penaltyDays': value.penaltyDays,
        'penaltyCharge': value.penaltyCharge,
        'penaltyType': value.penaltyType,
        'awardUpgradeDetails': value.awardUpgradeDetails === undefined ? undefined : ((value.awardUpgradeDetails as Array<any>).map(AwardUpgradeDetailTypeToJSON)),
    };
}

