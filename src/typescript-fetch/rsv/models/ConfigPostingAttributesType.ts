/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PackageCalculationRuleType } from './PackageCalculationRuleType';
import {
    PackageCalculationRuleTypeFromJSON,
    PackageCalculationRuleTypeFromJSONTyped,
    PackageCalculationRuleTypeToJSON,
} from './PackageCalculationRuleType';
import type { PackagePostingRhythmType } from './PackagePostingRhythmType';
import {
    PackagePostingRhythmTypeFromJSON,
    PackagePostingRhythmTypeFromJSONTyped,
    PackagePostingRhythmTypeToJSON,
} from './PackagePostingRhythmType';
import type { PkgInventoryItemType } from './PkgInventoryItemType';
import {
    PkgInventoryItemTypeFromJSON,
    PkgInventoryItemTypeFromJSONTyped,
    PkgInventoryItemTypeToJSON,
} from './PkgInventoryItemType';

/**
 * A config Package posting attributes type.
 * @export
 * @interface ConfigPostingAttributesType
 */
export interface ConfigPostingAttributesType {
    /**
     * The package price is added to the room rate.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    addToRate?: boolean;
    /**
     * The package price is printed on separate line of the folio.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    printSeparateLine?: boolean;
    /**
     * Can the package be sold separate from rate plan code?
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    sellSeparate?: boolean;
    /**
     * package charges will be posted next business day.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    postNextDay?: boolean;
    /**
     * Package will be forecasted for consumption the next business day.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    forecastNextDay?: boolean;
    /**
     * The custom formula used for this package, if any.
     * @type {string}
     * @memberof ConfigPostingAttributesType
     */
    formula?: string;
    /**
     * Start time the package is valid.
     * @type {string}
     * @memberof ConfigPostingAttributesType
     */
    startTime?: string;
    /**
     * End time the package is valid.
     * @type {string}
     * @memberof ConfigPostingAttributesType
     */
    endTime?: string;
    /**
     * Is package used for catering?
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    catering?: boolean;
    /**
     * 
     * @type {PackagePostingRhythmType}
     * @memberof ConfigPostingAttributesType
     */
    postingRhythm?: PackagePostingRhythmType;
    /**
     * 
     * @type {PackageCalculationRuleType}
     * @memberof ConfigPostingAttributesType
     */
    priceCalculationRule?: PackageCalculationRuleType;
    /**
     * Indicates whether a package is configured as a ticket or not.
     * @type {boolean}
     * @memberof ConfigPostingAttributesType
     */
    ticket?: boolean;
    /**
     * Package Code Inventory Items type.
     * @type {Array<PkgInventoryItemType>}
     * @memberof ConfigPostingAttributesType
     */
    inventoryItems?: Array<PkgInventoryItemType>;
    /**
     * Calculated Package Price based from Number of Adults, Children and Calculation Rule.
     * @type {number}
     * @memberof ConfigPostingAttributesType
     */
    calculatedPrice?: number;
}

/**
 * Check if a given object implements the ConfigPostingAttributesType interface.
 */
export function instanceOfConfigPostingAttributesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigPostingAttributesTypeFromJSON(json: any): ConfigPostingAttributesType {
    return ConfigPostingAttributesTypeFromJSONTyped(json, false);
}

export function ConfigPostingAttributesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigPostingAttributesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addToRate': !exists(json, 'addToRate') ? undefined : json['addToRate'],
        'printSeparateLine': !exists(json, 'printSeparateLine') ? undefined : json['printSeparateLine'],
        'sellSeparate': !exists(json, 'sellSeparate') ? undefined : json['sellSeparate'],
        'postNextDay': !exists(json, 'postNextDay') ? undefined : json['postNextDay'],
        'forecastNextDay': !exists(json, 'forecastNextDay') ? undefined : json['forecastNextDay'],
        'formula': !exists(json, 'formula') ? undefined : json['formula'],
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'endTime': !exists(json, 'endTime') ? undefined : json['endTime'],
        'catering': !exists(json, 'catering') ? undefined : json['catering'],
        'postingRhythm': !exists(json, 'postingRhythm') ? undefined : PackagePostingRhythmTypeFromJSON(json['postingRhythm']),
        'priceCalculationRule': !exists(json, 'priceCalculationRule') ? undefined : PackageCalculationRuleTypeFromJSON(json['priceCalculationRule']),
        'ticket': !exists(json, 'ticket') ? undefined : json['ticket'],
        'inventoryItems': !exists(json, 'inventoryItems') ? undefined : ((json['inventoryItems'] as Array<any>).map(PkgInventoryItemTypeFromJSON)),
        'calculatedPrice': !exists(json, 'calculatedPrice') ? undefined : json['calculatedPrice'],
    };
}

export function ConfigPostingAttributesTypeToJSON(value?: ConfigPostingAttributesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addToRate': value.addToRate,
        'printSeparateLine': value.printSeparateLine,
        'sellSeparate': value.sellSeparate,
        'postNextDay': value.postNextDay,
        'forecastNextDay': value.forecastNextDay,
        'formula': value.formula,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'catering': value.catering,
        'postingRhythm': PackagePostingRhythmTypeToJSON(value.postingRhythm),
        'priceCalculationRule': PackageCalculationRuleTypeToJSON(value.priceCalculationRule),
        'ticket': value.ticket,
        'inventoryItems': value.inventoryItems === undefined ? undefined : ((value.inventoryItems as Array<any>).map(PkgInventoryItemTypeToJSON)),
        'calculatedPrice': value.calculatedPrice,
    };
}

