/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PackageCodeHeaderType } from './PackageCodeHeaderType';
import {
    PackageCodeHeaderTypeFromJSON,
    PackageCodeHeaderTypeFromJSONTyped,
    PackageCodeHeaderTypeToJSON,
} from './PackageCodeHeaderType';
import type { PackageConsumptionType } from './PackageConsumptionType';
import {
    PackageConsumptionTypeFromJSON,
    PackageConsumptionTypeFromJSONTyped,
    PackageConsumptionTypeToJSON,
} from './PackageConsumptionType';
import type { ProductSourceType } from './ProductSourceType';
import {
    ProductSourceTypeFromJSON,
    ProductSourceTypeFromJSONTyped,
    ProductSourceTypeToJSON,
} from './ProductSourceType';
import type { ReservationPackageScheduleType } from './ReservationPackageScheduleType';
import {
    ReservationPackageScheduleTypeFromJSON,
    ReservationPackageScheduleTypeFromJSONTyped,
    ReservationPackageScheduleTypeToJSON,
} from './ReservationPackageScheduleType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';

/**
 * A ReservationPackageType class.
 * @export
 * @interface ReservationPackageType
 */
export interface ReservationPackageType {
    /**
     * 
     * @type {PackageCodeHeaderType}
     * @memberof ReservationPackageType
     */
    packageHeaderType?: PackageCodeHeaderType;
    /**
     * A HotelPackageSchedule type.
     * @type {Array<ReservationPackageScheduleType>}
     * @memberof ReservationPackageType
     */
    scheduleList?: Array<ReservationPackageScheduleType>;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof ReservationPackageType
     */
    newTimeSpan?: TimeSpanType;
    /**
     * 
     * @type {PackageConsumptionType}
     * @memberof ReservationPackageType
     */
    consumptionDetails?: PackageConsumptionType;
    /**
     * Package code. This is the unique code used for the package and is a required element.
     * @type {string}
     * @memberof ReservationPackageType
     */
    packageCode?: string;
    /**
     * Reservation Package Opera Internal Unique Id. This is the unique Id used for this reservation package.
     * @type {number}
     * @memberof ReservationPackageType
     */
    internalId?: number;
    /**
     * The rate code which contains this package. If the package is not part of a rate code, this will be empty. Required element and part of the key to fetch the correct package record on the reservation.
     * @type {string}
     * @memberof ReservationPackageType
     */
    ratePlanCode?: string;
    /**
     * Required value when changing a reservation package. If the original start date was null, then null is required.
     * @type {string}
     * @memberof ReservationPackageType
     */
    startDate?: string;
    /**
     * Required value when changing a reservation package. If the original end date was null, then null is required.
     * @type {string}
     * @memberof ReservationPackageType
     */
    endDate?: string;
    /**
     * Package group code. If this package is part of a package group, the group code is indicated here. This is a required element and is part of the key to fetch the correct package record .
     * @type {string}
     * @memberof ReservationPackageType
     */
    packageGroup?: string;
    /**
     * 
     * @type {ProductSourceType}
     * @memberof ReservationPackageType
     */
    source?: ProductSourceType;
    /**
     * This is the Award code used to redeem the package if the package is a redemption package.
     * @type {string}
     * @memberof ReservationPackageType
     */
    awardCode?: string;
    /**
     * Indicates the points used to redeem the redemption package.
     * @type {number}
     * @memberof ReservationPackageType
     */
    points?: number;
}

/**
 * Check if a given object implements the ReservationPackageType interface.
 */
export function instanceOfReservationPackageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationPackageTypeFromJSON(json: any): ReservationPackageType {
    return ReservationPackageTypeFromJSONTyped(json, false);
}

export function ReservationPackageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationPackageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'packageHeaderType': !exists(json, 'packageHeaderType') ? undefined : PackageCodeHeaderTypeFromJSON(json['packageHeaderType']),
        'scheduleList': !exists(json, 'scheduleList') ? undefined : ((json['scheduleList'] as Array<any>).map(ReservationPackageScheduleTypeFromJSON)),
        'newTimeSpan': !exists(json, 'newTimeSpan') ? undefined : TimeSpanTypeFromJSON(json['newTimeSpan']),
        'consumptionDetails': !exists(json, 'consumptionDetails') ? undefined : PackageConsumptionTypeFromJSON(json['consumptionDetails']),
        'packageCode': !exists(json, 'packageCode') ? undefined : json['packageCode'],
        'internalId': !exists(json, 'internalId') ? undefined : json['internalId'],
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'packageGroup': !exists(json, 'packageGroup') ? undefined : json['packageGroup'],
        'source': !exists(json, 'source') ? undefined : ProductSourceTypeFromJSON(json['source']),
        'awardCode': !exists(json, 'awardCode') ? undefined : json['awardCode'],
        'points': !exists(json, 'points') ? undefined : json['points'],
    };
}

export function ReservationPackageTypeToJSON(value?: ReservationPackageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'packageHeaderType': PackageCodeHeaderTypeToJSON(value.packageHeaderType),
        'scheduleList': value.scheduleList === undefined ? undefined : ((value.scheduleList as Array<any>).map(ReservationPackageScheduleTypeToJSON)),
        'newTimeSpan': TimeSpanTypeToJSON(value.newTimeSpan),
        'consumptionDetails': PackageConsumptionTypeToJSON(value.consumptionDetails),
        'packageCode': value.packageCode,
        'internalId': value.internalId,
        'ratePlanCode': value.ratePlanCode,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'packageGroup': value.packageGroup,
        'source': ProductSourceTypeToJSON(value.source),
        'awardCode': value.awardCode,
        'points': value.points,
    };
}

