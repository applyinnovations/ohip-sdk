/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation API
 * APIs to cater for Reservation functionality in OPERA Cloud. <br /><br />OPERA Cloud Reservations provides a complete set of capabilities for creating and updating reservations. Reservations are a central feature of OPERA Cloud. As a key source of information, the reservation specifies a guest&apos;s arrival date, departure date, room type, rate, packages, and many other details. It is also a gateway to dozens of other functions that contribute to the guest&apos;s experience.  All reservations in OPERA Cloud require a guest profile.<br /><br /> You can create profiles while booking a reservation. If a profile already exists, you can look it up (using getProfiles in the Customer Relationship Management module) and attach it to the reservation during the reservation booking process using the profileId.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityLog,
  Alerts,
  AttachCertificate,
  AwardUpgrades,
  BreakShareValidations,
  BreakShareValidationsDetails,
  CallHistory,
  CallStatistics,
  CancelReservation,
  CancelReservationDetails,
  CancelReservations,
  CancellationHistory,
  ChangeDepositPolicyDetails,
  ChangeGuestMessages,
  ChangeReservation,
  ChangeReservationDetails,
  ChangeResvGuestMessages,
  ChangeShareRateAmount,
  ChangeSharingGuests,
  CheckReservationsDetails,
  CombineShareReservations,
  CombineShareReservationsDetails,
  CombineShareValidations,
  CombineShareValidationsDetails,
  ComputeCancellationPolicies,
  ComputeCancellationPoliciesDetails,
  ComputeDepositPolicies,
  ComputeDepositPoliciesDetails,
  ConfirmationLetters,
  ConfirmationLettersDetails,
  CopyReservation,
  CreateGuestMessages,
  CreateReservationType,
  DeliveryHistoryLog,
  ECoupons,
  ECouponsInfo,
  ExceptionDetailType,
  ExtendReservationLock,
  ExtendReservationLockDetails,
  FetchReservations,
  FetchSellMessageConfig,
  FutureReservationsOrBlocksDetails,
  GuestMessages,
  GuestMessagesDetails,
  InventoryItems,
  LinkReservationsCriteria,
  LinkedHotelReservations,
  LinkedReservationsInfo,
  MasterAccount,
  MasterAccountSummary,
  MergeReservationsStatus,
  MoveReservationHotel,
  MoveReservationHotelDetails,
  OverlappingStay,
  OverlappingStayDetails,
  Packages,
  PostCancelReservationRequest,
  PostPreCheckInReservationRequest,
  PostReservationByBlockRequest,
  PostReservationLinksRequest,
  PostReservationRequest,
  PostUpsellReservationRequest,
  PreArrivalMemberReservationsDetails,
  PreConfiguredRoutingInstructions,
  PutReservationRequest,
  PutValidateReservationChangesRequest,
  RateInfo,
  RecentlyAccessedReservations,
  RegisterCall,
  RegisterTurnaway,
  ReinstateReservation,
  ReinstateReservationDetails,
  Reservation,
  ReservationAlerts,
  ReservationAttachments,
  ReservationAwards,
  ReservationCancellationPolicyCriteria,
  ReservationConfirmationLetters,
  ReservationDailyRateDetail,
  ReservationDailyRateDetailDetails,
  ReservationDepositPolicyCriteria,
  ReservationExcludedPreferences,
  ReservationLocators,
  ReservationLocatorsDetails,
  ReservationLocatorsDetailsInfo,
  ReservationLocatorsInfo,
  ReservationLocatorsStatus,
  ReservationLock,
  ReservationLockDetails,
  ReservationMembership,
  ReservationPackagesInfo,
  ReservationPaymentMethods,
  ReservationPolicies,
  ReservationPreference,
  ReservationPreferenceDetails,
  ReservationPreferenceInfo,
  ReservationRoutingCriteria,
  ReservationUpsellInfo,
  ReservationsDetails,
  ReservationsSummary,
  ReservationsToMerge,
  ReservationsUpgradeEligibility,
  ReservationsUpgradeEligibilityDetails,
  ReserveInventoryItems,
  ReservedInventoryItemsInfo,
  ReverseDepositPolicy,
  RoomCalendar,
  RoutingInstructions,
  RoutingInstructionsInfo,
  Script,
  SellMessageConfig,
  SellMessages,
  ShareReservations,
  SplitMultiRoomReservation,
  SplitMultiRoomReservationDetails,
  Status,
  Tickets,
  TicketsInfo,
  Traces,
  TransactionDiversions,
  TransactionDiversionsDetails,
  TransactionDiversionsInfo,
  UpgradeEligibilityReservations,
  ValidateRateInfo,
  ValidateReservationChangesDetails,
} from '../models/index';
import {
    ActivityLogFromJSON,
    ActivityLogToJSON,
    AlertsFromJSON,
    AlertsToJSON,
    AttachCertificateFromJSON,
    AttachCertificateToJSON,
    AwardUpgradesFromJSON,
    AwardUpgradesToJSON,
    BreakShareValidationsFromJSON,
    BreakShareValidationsToJSON,
    BreakShareValidationsDetailsFromJSON,
    BreakShareValidationsDetailsToJSON,
    CallHistoryFromJSON,
    CallHistoryToJSON,
    CallStatisticsFromJSON,
    CallStatisticsToJSON,
    CancelReservationFromJSON,
    CancelReservationToJSON,
    CancelReservationDetailsFromJSON,
    CancelReservationDetailsToJSON,
    CancelReservationsFromJSON,
    CancelReservationsToJSON,
    CancellationHistoryFromJSON,
    CancellationHistoryToJSON,
    ChangeDepositPolicyDetailsFromJSON,
    ChangeDepositPolicyDetailsToJSON,
    ChangeGuestMessagesFromJSON,
    ChangeGuestMessagesToJSON,
    ChangeReservationFromJSON,
    ChangeReservationToJSON,
    ChangeReservationDetailsFromJSON,
    ChangeReservationDetailsToJSON,
    ChangeResvGuestMessagesFromJSON,
    ChangeResvGuestMessagesToJSON,
    ChangeShareRateAmountFromJSON,
    ChangeShareRateAmountToJSON,
    ChangeSharingGuestsFromJSON,
    ChangeSharingGuestsToJSON,
    CheckReservationsDetailsFromJSON,
    CheckReservationsDetailsToJSON,
    CombineShareReservationsFromJSON,
    CombineShareReservationsToJSON,
    CombineShareReservationsDetailsFromJSON,
    CombineShareReservationsDetailsToJSON,
    CombineShareValidationsFromJSON,
    CombineShareValidationsToJSON,
    CombineShareValidationsDetailsFromJSON,
    CombineShareValidationsDetailsToJSON,
    ComputeCancellationPoliciesFromJSON,
    ComputeCancellationPoliciesToJSON,
    ComputeCancellationPoliciesDetailsFromJSON,
    ComputeCancellationPoliciesDetailsToJSON,
    ComputeDepositPoliciesFromJSON,
    ComputeDepositPoliciesToJSON,
    ComputeDepositPoliciesDetailsFromJSON,
    ComputeDepositPoliciesDetailsToJSON,
    ConfirmationLettersFromJSON,
    ConfirmationLettersToJSON,
    ConfirmationLettersDetailsFromJSON,
    ConfirmationLettersDetailsToJSON,
    CopyReservationFromJSON,
    CopyReservationToJSON,
    CreateGuestMessagesFromJSON,
    CreateGuestMessagesToJSON,
    CreateReservationTypeFromJSON,
    CreateReservationTypeToJSON,
    DeliveryHistoryLogFromJSON,
    DeliveryHistoryLogToJSON,
    ECouponsFromJSON,
    ECouponsToJSON,
    ECouponsInfoFromJSON,
    ECouponsInfoToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ExtendReservationLockFromJSON,
    ExtendReservationLockToJSON,
    ExtendReservationLockDetailsFromJSON,
    ExtendReservationLockDetailsToJSON,
    FetchReservationsFromJSON,
    FetchReservationsToJSON,
    FetchSellMessageConfigFromJSON,
    FetchSellMessageConfigToJSON,
    FutureReservationsOrBlocksDetailsFromJSON,
    FutureReservationsOrBlocksDetailsToJSON,
    GuestMessagesFromJSON,
    GuestMessagesToJSON,
    GuestMessagesDetailsFromJSON,
    GuestMessagesDetailsToJSON,
    InventoryItemsFromJSON,
    InventoryItemsToJSON,
    LinkReservationsCriteriaFromJSON,
    LinkReservationsCriteriaToJSON,
    LinkedHotelReservationsFromJSON,
    LinkedHotelReservationsToJSON,
    LinkedReservationsInfoFromJSON,
    LinkedReservationsInfoToJSON,
    MasterAccountFromJSON,
    MasterAccountToJSON,
    MasterAccountSummaryFromJSON,
    MasterAccountSummaryToJSON,
    MergeReservationsStatusFromJSON,
    MergeReservationsStatusToJSON,
    MoveReservationHotelFromJSON,
    MoveReservationHotelToJSON,
    MoveReservationHotelDetailsFromJSON,
    MoveReservationHotelDetailsToJSON,
    OverlappingStayFromJSON,
    OverlappingStayToJSON,
    OverlappingStayDetailsFromJSON,
    OverlappingStayDetailsToJSON,
    PackagesFromJSON,
    PackagesToJSON,
    PostCancelReservationRequestFromJSON,
    PostCancelReservationRequestToJSON,
    PostPreCheckInReservationRequestFromJSON,
    PostPreCheckInReservationRequestToJSON,
    PostReservationByBlockRequestFromJSON,
    PostReservationByBlockRequestToJSON,
    PostReservationLinksRequestFromJSON,
    PostReservationLinksRequestToJSON,
    PostReservationRequestFromJSON,
    PostReservationRequestToJSON,
    PostUpsellReservationRequestFromJSON,
    PostUpsellReservationRequestToJSON,
    PreArrivalMemberReservationsDetailsFromJSON,
    PreArrivalMemberReservationsDetailsToJSON,
    PreConfiguredRoutingInstructionsFromJSON,
    PreConfiguredRoutingInstructionsToJSON,
    PutReservationRequestFromJSON,
    PutReservationRequestToJSON,
    PutValidateReservationChangesRequestFromJSON,
    PutValidateReservationChangesRequestToJSON,
    RateInfoFromJSON,
    RateInfoToJSON,
    RecentlyAccessedReservationsFromJSON,
    RecentlyAccessedReservationsToJSON,
    RegisterCallFromJSON,
    RegisterCallToJSON,
    RegisterTurnawayFromJSON,
    RegisterTurnawayToJSON,
    ReinstateReservationFromJSON,
    ReinstateReservationToJSON,
    ReinstateReservationDetailsFromJSON,
    ReinstateReservationDetailsToJSON,
    ReservationFromJSON,
    ReservationToJSON,
    ReservationAlertsFromJSON,
    ReservationAlertsToJSON,
    ReservationAttachmentsFromJSON,
    ReservationAttachmentsToJSON,
    ReservationAwardsFromJSON,
    ReservationAwardsToJSON,
    ReservationCancellationPolicyCriteriaFromJSON,
    ReservationCancellationPolicyCriteriaToJSON,
    ReservationConfirmationLettersFromJSON,
    ReservationConfirmationLettersToJSON,
    ReservationDailyRateDetailFromJSON,
    ReservationDailyRateDetailToJSON,
    ReservationDailyRateDetailDetailsFromJSON,
    ReservationDailyRateDetailDetailsToJSON,
    ReservationDepositPolicyCriteriaFromJSON,
    ReservationDepositPolicyCriteriaToJSON,
    ReservationExcludedPreferencesFromJSON,
    ReservationExcludedPreferencesToJSON,
    ReservationLocatorsFromJSON,
    ReservationLocatorsToJSON,
    ReservationLocatorsDetailsFromJSON,
    ReservationLocatorsDetailsToJSON,
    ReservationLocatorsDetailsInfoFromJSON,
    ReservationLocatorsDetailsInfoToJSON,
    ReservationLocatorsInfoFromJSON,
    ReservationLocatorsInfoToJSON,
    ReservationLocatorsStatusFromJSON,
    ReservationLocatorsStatusToJSON,
    ReservationLockFromJSON,
    ReservationLockToJSON,
    ReservationLockDetailsFromJSON,
    ReservationLockDetailsToJSON,
    ReservationMembershipFromJSON,
    ReservationMembershipToJSON,
    ReservationPackagesInfoFromJSON,
    ReservationPackagesInfoToJSON,
    ReservationPaymentMethodsFromJSON,
    ReservationPaymentMethodsToJSON,
    ReservationPoliciesFromJSON,
    ReservationPoliciesToJSON,
    ReservationPreferenceFromJSON,
    ReservationPreferenceToJSON,
    ReservationPreferenceDetailsFromJSON,
    ReservationPreferenceDetailsToJSON,
    ReservationPreferenceInfoFromJSON,
    ReservationPreferenceInfoToJSON,
    ReservationRoutingCriteriaFromJSON,
    ReservationRoutingCriteriaToJSON,
    ReservationUpsellInfoFromJSON,
    ReservationUpsellInfoToJSON,
    ReservationsDetailsFromJSON,
    ReservationsDetailsToJSON,
    ReservationsSummaryFromJSON,
    ReservationsSummaryToJSON,
    ReservationsToMergeFromJSON,
    ReservationsToMergeToJSON,
    ReservationsUpgradeEligibilityFromJSON,
    ReservationsUpgradeEligibilityToJSON,
    ReservationsUpgradeEligibilityDetailsFromJSON,
    ReservationsUpgradeEligibilityDetailsToJSON,
    ReserveInventoryItemsFromJSON,
    ReserveInventoryItemsToJSON,
    ReservedInventoryItemsInfoFromJSON,
    ReservedInventoryItemsInfoToJSON,
    ReverseDepositPolicyFromJSON,
    ReverseDepositPolicyToJSON,
    RoomCalendarFromJSON,
    RoomCalendarToJSON,
    RoutingInstructionsFromJSON,
    RoutingInstructionsToJSON,
    RoutingInstructionsInfoFromJSON,
    RoutingInstructionsInfoToJSON,
    ScriptFromJSON,
    ScriptToJSON,
    SellMessageConfigFromJSON,
    SellMessageConfigToJSON,
    SellMessagesFromJSON,
    SellMessagesToJSON,
    ShareReservationsFromJSON,
    ShareReservationsToJSON,
    SplitMultiRoomReservationFromJSON,
    SplitMultiRoomReservationToJSON,
    SplitMultiRoomReservationDetailsFromJSON,
    SplitMultiRoomReservationDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TicketsFromJSON,
    TicketsToJSON,
    TicketsInfoFromJSON,
    TicketsInfoToJSON,
    TracesFromJSON,
    TracesToJSON,
    TransactionDiversionsFromJSON,
    TransactionDiversionsToJSON,
    TransactionDiversionsDetailsFromJSON,
    TransactionDiversionsDetailsToJSON,
    TransactionDiversionsInfoFromJSON,
    TransactionDiversionsInfoToJSON,
    UpgradeEligibilityReservationsFromJSON,
    UpgradeEligibilityReservationsToJSON,
    ValidateRateInfoFromJSON,
    ValidateRateInfoToJSON,
    ValidateReservationChangesDetailsFromJSON,
    ValidateReservationChangesDetailsToJSON,
} from '../models/index';

export interface ChangeReservationLocatorsRequest {
    locatorId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLocatorsInfo?: ReservationLocatorsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCancellationPolicyRequest {
    reservationId?: string;
    hotelId?: string;
    policyId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDepositPolicyRequest {
    reservationId?: string;
    hotelId?: string;
    policyId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteECouponsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuestMessagesRequest {
    guestMessageId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMasterAccountRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePaymentMethodsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePreCheckInReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    resvIDExtension?: number;
    arrivalTime?: string;
    roomNumber?: string;
    guestPreferredCurrency?: string;
    allowMobileViewFolio?: boolean;
    paymentMethodDescription?: Array<string>;
    paymentMethodFolioView?: Array<number>;
    paymentMethod?: Array<string>;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardOrToken?: DeletePreCheckInReservationCardOrTokenEnum;
    cardType?: DeletePreCheckInReservationCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: DeletePreCheckInReservationProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardId?: string;
    cardIdIDExtension?: number;
    cardIdIDContext?: string;
    cardIdType?: string;
    currentAuthorizedAmount?: number;
    authorizedAmountCurrencyCode?: string;
    approvalAmountNeeded?: number;
    approvalAmountCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    authorizationRuleCode?: number;
    authorizationRuleAmount?: number;
    authorizationRuleCurrencyCode?: string;
    authorizationRulePercent?: number;
    emailFolio?: boolean;
    emailFolioID?: string;
    emailFolioIDExtension?: number;
    emailFolioIDContext?: string;
    emailFolioIDType?: string;
    emailFolioCreateDateTime?: string;
    emailFolioCreatorID?: string;
    emailFolioEmailAddress?: string;
    emailFolioEmailFormat?: DeletePreCheckInReservationEmailFolioEmailFormatEnum;
    emailFolioLastModifierID?: string;
    emailFolioLastModifyDateTime?: string;
    emailFolioOrderSequence?: number;
    emailFolioPrimaryInd?: boolean;
    emailFolioPurgeDate?: Date;
    emailFolioType?: string;
    emailFolioTypeDescription?: string;
    arrivalCarrierCode?: string;
    arrivalDateTime?: string;
    arrivalStationCode?: string;
    arrivalTransportCode?: string;
    arrivalTransportationReqd?: boolean;
    arrivalType?: string;
    arrivalComments?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRefundTicketsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationAttachmentRequest {
    attachmentId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationCertificateRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationLinksRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationLinksByChainRequest {
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationLinksByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationLocatorsRequest {
    locatorId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationLockRequest {
    lockHandle?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationMembershipRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationPackageRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationPreferenceRequest {
    preferenceCode?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservedInventoryItemsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteSellMessageConfigRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfigId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteShareReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideInventoryCheck?: boolean;
    overrideMaxOccupancyCheck?: boolean;
    overrideRateAvailabilityCheck?: boolean;
    returnShareReservations?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteShareReservationByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overrideInventoryCheck?: boolean;
    overrideMaxOccupancyCheck?: boolean;
    overrideRateAvailabilityCheck?: boolean;
    returnShareReservations?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTicketsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTransactionDiversionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteUpsellRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlertNoticesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertArea?: GetAlertNoticesAlertAreaEnum;
    welcomeOffer?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardUpgradesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    idContext?: string;
    profileIdType?: string;
    membershipType?: string;
    membershipCardNo?: string;
    membershipPoints?: number;
    id?: Array<string>;
    reservationTimeSpanStartDate?: Date;
    reservationTimeSpanEndDate?: Date;
    reservationTimeSpanDuration?: string;
    numberOfRooms?: number;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCallHistoryRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCallStatisticsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    end?: Date;
    start?: Date;
    domain?: string;
    appUserName?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCancellationHistoryRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelName?: string;
    roomStayStartDate?: Date;
    roomStayEndDate?: Date;
    roomStayDuration?: string;
    roomClass?: string;
    roomType?: string;
    numberOfRooms?: number;
    roomId?: string;
    ratePlanCode?: string;
    reservationBlockHotelId?: string;
    reservationBlockId?: Array<string>;
    reservationBlockIdType?: Array<string>;
    blockName?: string;
    bookingChannelCode?: string;
    linkCode?: string;
    onHold?: boolean;
    membershipAccountId?: string;
    membershipBonusCode?: string;
    membershipLevel?: string;
    membershipId?: number;
    lastStayDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfirmationLettersRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    notAttached?: boolean;
    pending?: boolean;
    sent?: boolean;
    createdOnEndDate?: Date;
    createdOnStartDate?: Date;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    letterStyleId?: Array<string>;
    letterStyle?: Array<string>;
    letterStyleIdType?: Array<string>;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    membershipId?: string;
    membershipLevelCode?: Array<string>;
    membershipTypeCode?: Array<string>;
    surname?: string;
    givenName?: string;
    blockHotelId?: string;
    blockId?: Array<string>;
    blockIdType?: Array<string>;
    blockName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetECouponsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalSystemDeliveryHistoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    reservationIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalSystemReservationsRequest {
    extSystemCode?: string;
    externalReferenceList?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetExternalSystemReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    expectedArrivalStartTime?: string;
    expectedArrivalEndTime?: string;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetExternalSystemReservationsOrderByEnum>;
    sortOrder?: Set<GetExternalSystemReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetExternalSystemReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetExternalSystemReservationsFetchInstructionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    excludeRoomFeatures?: Array<string>;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetExternalSystemReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetExternalSystemReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetExternalSystemReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFutureReservationsOrBlocksRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestMessagesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    reservationId?: string;
    retrieveDeliveredMessages?: boolean;
    room?: string;
    travelAgent?: string;
    company?: string;
    group?: string;
    source?: string;
    reservationStatus?: GetGuestMessagesReservationStatusEnum;
    retrieveUndeliveredMessages?: boolean;
    retrievePrintedMessages?: boolean;
    retrieveTextedMessages?: boolean;
    blockName?: string;
    recipientName?: string;
    confirmationNo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelReservationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    keyTrack2?: string;
    discrepancy?: GetHotelReservationsDiscrepancyEnum;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetHotelReservationsSearchTypeEnum;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    stayOnStartDate?: Date;
    createdOnStartDate?: Date;
    expectedArrivalEndTime?: string;
    expectedArrivalStartTime?: string;
    depositDueEndDate?: Date;
    depositDueStartDate?: Date;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    sourceNames?: Array<string>;
    travelAgentNames?: Array<string>;
    groupNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileId?: string;
    commissionPaid?: boolean;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    fromName?: string;
    toName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockCriteriaHotelCode?: string;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetHotelReservationsOrderByEnum>;
    sortOrder?: Set<GetHotelReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetHotelReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetHotelReservationsFetchInstructionsEnum>;
    allowedReservationActions?: Set<GetHotelReservationsAllowedReservationActionsEnum>;
    allowPreRegistration?: boolean;
    excludeNoPost?: boolean;
    excludePMRooms?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    periodicFolio?: GetHotelReservationsPeriodicFolioEnum;
    folioSettlementTypes?: string;
    defaultDays?: boolean;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    excludeRoomFeatures?: Array<string>;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetHotelReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetHotelReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetHotelReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    swapShiftRoomReservationId?: string;
    roomSmokingPreferences?: Array<string>;
    roomFeaturePreferences?: Array<string>;
    roomsFloorPreferences?: Array<string>;
    contactNames?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLinkedReservationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    additionalReservationId?: Array<string>;
    additionalReservationIdType?: Array<string>;
    fetchInstructions?: Set<GetLinkedReservationsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLinkedReservationsSummaryRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    additionalReservationId?: Array<string>;
    additionalReservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postingRhythm?: string;
    productCode?: string;
    ratePlanCode?: string;
    reservationTimeSpanStartDate?: Date;
    reservationTimeSpanEndDate?: Date;
    packageTimeSpanStartDate?: Date;
    packageTimeSpanEndDate?: Date;
    packageQuantity?: number;
    packageExcludedQuantity?: number;
    reservationAdults?: number;
    reservationChildren?: number;
    fetchInstructions?: Set<GetPackageFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPaymentMethodsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeAmounts?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreArrivalMemberReservationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    end?: Date;
    start?: Date;
    membershipType?: string;
    externalReferenceType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreConfiguredRoutingInstructionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateCode?: string;
    promotionCodes?: Array<string>;
    guestName?: string;
    guestIds?: Array<string>;
    companyName?: string;
    companyIds?: Array<string>;
    groupName?: string;
    groupIds?: Array<string>;
    travelAgentName?: string;
    travelAgentIds?: Array<string>;
    sourceName?: string;
    sourceIds?: Array<string>;
    contactName?: string;
    contactIds?: Array<string>;
    billingContactName?: string;
    billingContactIds?: Array<string>;
    addresseeName?: string;
    addresseeIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyCode?: string;
    summaryInfo?: boolean;
    criteriaStartDate?: Date;
    criteriaEndDate?: Date;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    detailDate?: Date;
    blockId?: string;
    blockIdType?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    ratePlanCode?: string;
    effectiveRateEnd?: Array<Date>;
    effectiveRateStart?: Array<Date>;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRecentlyAccessedReservationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReprintTicketsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketId?: string;
    ticketIdType?: string;
    packageCode?: Array<string>;
    reservationProductId?: string;
    reservationProductIdType?: string;
    ticketNumberId?: string;
    ticketNumberIdType?: string;
    ticketIssueDate?: Array<Date>;
    ticketConsumptionDate?: Array<Date>;
    ticketRateCode?: Array<string>;
    ticketStatus?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetReservationFetchInstructionsEnum>;
    allowedActions?: Set<GetReservationAllowedActionsEnum>;
    markAsRecentlyAccessed?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationActivityLogRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIdsUserId?: Array<number>;
    userForIdsUserId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationAttachmentsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    webRegistrationCard?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetReservationByExtIdFetchInstructionsEnum>;
    allowedActions?: Set<GetReservationByExtIdAllowedActionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationExcludedPreferencesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceType?: string;
    preferenceCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationIndicatorsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: Array<string>;
    checkInstructions?: Set<GetReservationIndicatorsCheckInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationLocatorsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationPoliciesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchDepositPolicies?: boolean;
    fetchCancellationPolicies?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationPreferenceRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceTypeCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationUpsellInfoRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    recentlyAccessed?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetReservationsSearchTypeEnum;
    hotelIds?: Array<string>;
    text?: string;
    reservationIdList?: Array<string>;
    confirmationNumberList?: Array<string>;
    cancellationNumberList?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    departureEndDate?: Date;
    departureStartDate?: Date;
    expectedArrivalStartTime?: string;
    expectedArrivalEndTime?: string;
    expectedReturnEndTime?: string;
    expectedReturnStartTime?: string;
    companyNames?: Array<string>;
    sourceNames?: Array<string>;
    travelAgentNames?: Array<string>;
    groupNames?: Array<string>;
    travelAgentIds?: Array<string>;
    companyIds?: Array<string>;
    sourceIds?: Array<string>;
    contactIds?: Array<string>;
    groupIds?: Array<string>;
    billingContactIds?: Array<string>;
    profileIds?: Array<string>;
    membershipCardNumber?: string;
    membershipLevels?: Array<string>;
    membershipTypes?: Array<string>;
    surname?: string;
    givenName?: string;
    anyVIPStatus?: boolean;
    vipCodes?: Array<string>;
    guaranteeCode?: string;
    paymentMethod?: string;
    discountApplied?: boolean;
    user?: Array<string>;
    createdBy?: string;
    cancelledByList?: Array<string>;
    cancelledOn?: Date;
    ratePlanCodes?: Array<string>;
    sourceCodes?: Array<string>;
    marketCodes?: Array<string>;
    excludeBlockReservations?: boolean;
    blockName?: string;
    blockIds?: Array<string>;
    blockCodes?: Array<string>;
    customReference?: string;
    recordLocator?: string;
    orderBy?: Array<GetReservationsOrderByEnum>;
    sortOrder?: Set<GetReservationsSortOrderEnum>;
    roomAssignedOnly?: boolean;
    roomUnassignedOnly?: boolean;
    roomId?: string;
    roomType?: Array<string>;
    roomFeatures?: Array<string>;
    roomSpecials?: Array<string>;
    roomSmokingPreference?: string;
    roomFloorPreferences?: Array<string>;
    housekeepingRoomStatuses?: Set<GetReservationsHousekeepingRoomStatusesEnum>;
    roomClasses?: Array<string>;
    roomRangeFrom?: string;
    roomRangeTo?: string;
    communication?: string;
    fetchInstructions?: Set<GetReservationsFetchInstructionsEnum>;
    allowedReservationActions?: Set<GetReservationsAllowedReservationActionsEnum>;
    allowPreRegistration?: boolean;
    hasDepositBalance?: boolean;
    hasOpenBalance?: boolean;
    hasOpenFolio?: boolean;
    includeScheduledCheckOut?: boolean;
    linkedOnly?: boolean;
    unlinkedOnly?: boolean;
    actualArrivals?: boolean;
    actualDepartures?: boolean;
    complimentaryReservations?: boolean;
    dayOfArrivalCancels?: boolean;
    dayUse?: boolean;
    earlyDepartures?: boolean;
    expectedArrivals?: boolean;
    expectedDepartures?: boolean;
    extendedStays?: boolean;
    houseUseReservations?: boolean;
    stayovers?: boolean;
    stayDate?: Date;
    roomRoutingId?: string;
    excludePseudoRoomReservations?: boolean;
    excludeReservationIds?: Array<string>;
    excludeVIPStatusCodes?: Array<string>;
    excludeSpecials?: Array<string>;
    excludeFloorPreferences?: Array<string>;
    excludeAdvanceCheckedIn?: boolean;
    excludeRoomFeatures?: Array<string>;
    playerId?: string;
    gamingBalanceFrom?: number;
    gamingBalanceTo?: number;
    compAccountingBalanceFrom?: number;
    compAccountingBalanceTo?: number;
    searchTypes?: Set<GetReservationsSearchTypesEnum>;
    reservationStatuses?: Set<GetReservationsReservationStatusesEnum>;
    transportationCodes?: Array<string>;
    roomReadyStatuses?: Set<GetReservationsRoomReadyStatusesEnum>;
    checkoutMessageReceived?: boolean;
    optedForCommunication?: boolean;
    createdOn?: Date;
    stayOn?: Date;
    contactNames?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsSummaryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    advancedCheckedIn?: boolean;
    limit?: number;
    offset?: number;
    preRegistered?: boolean;
    arrivalDate?: Date;
    departureDate?: Date;
    createDateTime?: Date;
    cancelledOn?: Date;
    folioClosedOn?: Date;
    lastName?: string;
    companyId?: number;
    guestNameId?: number;
    reservationStatus?: GetReservationsSummaryReservationStatusEnum;
    confirmationNumber?: string;
    externalReferenceNumber?: string;
    cancellationNumber?: string;
    membershipNumber?: string;
    registeredCardNumber?: string;
    balance?: number;
    roomId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsToShareByProfileIdRequest {
    profileIdtoShare?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    superSearch?: string;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    membershipId?: string;
    membershipLevel?: Array<string>;
    membershipType?: Array<string>;
    surname?: string;
    givenName?: string;
    roomId?: string;
    fetchInstructions?: Set<GetReservationsToShareByProfileIdFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsToShareByReservationIdRequest {
    reservationIdtoShare?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    superSearch?: string;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    membershipId?: string;
    membershipLevel?: Array<string>;
    membershipType?: Array<string>;
    surname?: string;
    givenName?: string;
    roomId?: string;
    fetchInstructions?: Set<GetReservationsToShareByReservationIdFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservedInventoryItemsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomCalendarRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    advanceCheckedIn?: boolean;
    assignedRooms?: string;
    componentRooms?: string;
    connectingRoomsOnly?: string;
    dueOut?: string;
    endDate?: Date;
    isSortDescending?: boolean;
    pageIndex?: number;
    partiallyAssignedRooms?: string;
    recordsPerPage?: number;
    roomConditions?: string;
    ownerRoomsOnly?: string;
    ownerExclusiveOnly?: string;
    sortingBy?: GetRoomCalendarSortingByEnum;
    includeRoomMoveHistory?: boolean;
    includeComponentRoomBlockOutDates?: boolean;
    startDate?: Date;
    unassignedRooms?: string;
    roomId?: Array<string>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    floor?: Array<string>;
    roomFeature?: Array<string>;
    roomStatus?: Set<GetRoomCalendarRoomStatusEnum>;
    smokingPreference?: Array<string>;
    bedType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeWindowRouting?: boolean;
    includeRoomRouting?: boolean;
    includeCompRouting?: boolean;
    includeCompRoutingRequests?: boolean;
    effectiveOn?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetScriptRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languageCode?: string;
    scriptType?: string;
    reservationId?: Array<string>;
    reservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSellMessageConfigRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    message?: string;
    roomType?: Array<string>;
    ratePlanCode?: Array<string>;
    blockId?: Array<string>;
    blockIdType?: Array<string>;
    blockCode?: string;
    languageCode?: string;
    croCode?: string;
    displayDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    message?: string;
    roomType?: Array<string>;
    ratePlanCode?: Array<string>;
    blockId?: Array<string>;
    blockIdType?: Array<string>;
    blockCode?: string;
    languageCode?: string;
    hotelIds?: Array<string>;
    chainId?: string;
    croCode?: string;
    displayDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSellMessagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    croCode?: string;
    hotelId?: string;
    criteriaId?: string;
    criteriaIdType?: string;
    limit?: number;
    ratePlanCode?: string;
    roomType?: string;
    stickyFlagYn?: string;
    criteriaType?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    fetchInstructions?: Set<GetSellMessagesFetchInstructionsEnum>;
    usedInModule?: GetSellMessagesUsedInModuleEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetShareReservationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetShareReservationsByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTicketsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageCode?: string;
    retrieveIssuedOnly?: boolean;
    retrieveNotIssuedOnly?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTicketsInquiryRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketId?: string;
    ticketIdType?: string;
    packageCode?: Array<string>;
    reservationProductId?: string;
    reservationProductIdType?: string;
    ticketNumberId?: string;
    ticketNumberIdType?: string;
    ticketIssueDate?: Array<Date>;
    ticketConsumptionDate?: Array<Date>;
    ticketRateCode?: Array<string>;
    ticketStatus?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTracesByReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTracesByRoomRequest {
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionDiversionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionCodes?: Array<string>;
    includeDailyDetails?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpgradeEligibilityReservationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arrivalEndDate?: Date;
    arrivalStartDate?: Date;
    membershipType?: string;
    externalReferenceType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface MergeReservationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationsToMerge?: ReservationsToMerge;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBreakReservationLockRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLock?: ReservationLock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBulkReservationAlertsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationAlerts?: ReservationAlerts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCallRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registerCall?: RegisterCall;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancelReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation?: PostCancelReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancelReservationByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation?: CancelReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancelReservationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservations?: CancelReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancelShareReservationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancelReservation?: CancelReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancellationPolicyRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationCancellationPolicyCriteria?: ReservationCancellationPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCombineShareReservationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations?: CombineShareReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCombineShareReservationsByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareReservations?: CombineShareReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostConfirmationLettersRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    confirmationLetters?: ConfirmationLetters;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepositPolicyRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDepositPolicyCriteria?: ReservationDepositPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostECouponsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponsInfo?: ECouponsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestMessagesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createGuestMessages?: CreateGuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostIssueTicketsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketsInfo?: TicketsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMasterAccountRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    masterAccount?: MasterAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPaymentMethodsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPaymentMethods?: ReservationPaymentMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPreCheckInReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preCheckInReservation?: PostPreCheckInReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation?: PostReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationByBlockOperationRequest {
    blockId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createReservation?: PostReservationByBlockRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationCertificateRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attachCertificate?: AttachCertificate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationCopyRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyReservation?: CopyReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationLinksOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria?: PostReservationLinksRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationLinksByChainRequest {
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria?: LinkReservationsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationLinksByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkReservationsCriteria?: LinkReservationsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationLocatorsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLocatorsDetailsInfo?: ReservationLocatorsDetailsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationMembershipRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationMembership?: ReservationMembership;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationPackageRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPackagesInfo?: ReservationPackagesInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationPreferenceRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPreferenceInfo?: ReservationPreferenceInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReserveInventoryItemsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reserveInventoryItems?: ReserveInventoryItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReverseDepositPolicyRequest {
    policyId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reverseDepositPolicy?: ReverseDepositPolicy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationRoutingCriteria?: ReservationRoutingCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoutingInstructionsByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationRoutingCriteria?: ReservationRoutingCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSellMessageConfigRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig?: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig?: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTicketsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketsInfo?: TicketsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionDiversionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionsInfo?: TransactionDiversionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTurnawayReservationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registerTurnaway?: RegisterTurnaway;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUpsellReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellReservation?: PostUpsellReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAcquireReservationLockRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationLock?: ReservationLock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBreakShareValidationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    breakShareValidations?: BreakShareValidations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCancellationPolicyRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationCancellationPolicyCriteria?: ReservationCancellationPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCombineShareValidationsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    combineShareValidations?: CombineShareValidations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutComputeCancellationPoliciesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    computeCancellationPolicies?: ComputeCancellationPolicies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutComputeDepositPoliciesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    computeDepositPolicies?: ComputeDepositPolicies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDepositPolicyRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDepositPolicyCriteria?: ReservationDepositPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutECouponsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponsInfo?: ECouponsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGuestMessagesRequest {
    guestMessageId?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeGuestMessages?: ChangeGuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMasterAccountRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    masterAccount?: MasterAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPaymentMethodsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPaymentMethods?: ReservationPaymentMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReinstateReservationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reinstateReservation?: ReinstateReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReinstateReservationByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reinstateReservation?: ReinstateReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeReservation?: PutReservationRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeReservation?: ChangeReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationDailyRateDetailValidationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDailyRateDetail?: ReservationDailyRateDetail;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationHeaderValidationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationDailyRateDetail?: ReservationDailyRateDetail;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationHotelMoveRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    moveReservationHotel?: MoveReservationHotel;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationLockRequest {
    lockHandle?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    extendReservationLock?: ExtendReservationLock;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationPackageRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPackagesInfo?: ReservationPackagesInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationPreferenceRequest {
    preferenceCode?: string;
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationPreferenceInfo?: ReservationPreferenceInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationsUpgradeEligibilityRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationsUpgradeEligibility?: ReservationsUpgradeEligibility;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservedInventoryItemsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservedInventoryItemsInfo?: ReservedInventoryItemsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutResvGuestMessagesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeResvGuestMessages?: ChangeResvGuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoutingInstructionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructionsInfo?: RoutingInstructionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoutingInstructionsByExtIdRequest {
    reservationExternalId?: string;
    externalSystemCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructionsInfo?: RoutingInstructionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSellMessageConfigRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig?: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSellMessageConfigByChainRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sellMessageConfig?: SellMessageConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutShareRateAmountRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeShareRateAmount?: ChangeShareRateAmount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSharingGuestsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeSharingGuests?: ChangeSharingGuests;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSplitMultiRoomReservationRequest {
    reservationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    splitMultiRoomReservation?: SplitMultiRoomReservation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTicketsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketsInfo?: TicketsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionDiversionsRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionsInfo?: TransactionDiversionsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutValidateOverlappingStayRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overlappingStay?: OverlappingStay;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutValidateOverlappingStaysRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    overlappingStay?: OverlappingStay;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutValidateReservationChangesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateReservationChanges?: PutValidateReservationChangesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateRateInfoRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateRateInfo?: ValidateRateInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ReservationApi extends runtime.BaseAPI {

    /**
     * Change a list of Guest Locater for a Reservation. <p><strong>OperationId:</strong>changeReservationLocators</p>
     * Change Reservation Guest Locators
     */
    async changeReservationLocatorsRaw(requestParameters: ChangeReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLocatorsStatus>> {
        if (requestParameters.locatorId === null || requestParameters.locatorId === undefined) {
            throw new runtime.RequiredError('locatorId','Required parameter requestParameters.locatorId was null or undefined when calling changeReservationLocators.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling changeReservationLocators.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeReservationLocators.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeReservationLocators.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeReservationLocators.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeReservationLocators.');
        }

        if (requestParameters.reservationLocatorsInfo === null || requestParameters.reservationLocatorsInfo === undefined) {
            throw new runtime.RequiredError('reservationLocatorsInfo','Required parameter requestParameters.reservationLocatorsInfo was null or undefined when calling changeReservationLocators.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators/{locatorId}`.replace(`{${"locatorId"}}`, encodeURIComponent(String(requestParameters.locatorId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationLocatorsInfoToJSON(requestParameters.reservationLocatorsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationLocatorsStatusFromJSON(jsonValue));
    }

    /**
     * Change a list of Guest Locater for a Reservation. <p><strong>OperationId:</strong>changeReservationLocators</p>
     * Change Reservation Guest Locators
     */
    async changeReservationLocators(requestParameters: ChangeReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLocatorsStatus> {
        const response = await this.changeReservationLocatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing cancellation policy for a specific hotel. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete a Cancellation policy
     */
    async deleteCancellationPolicyRaw(requestParameters: DeleteCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteCancellationPolicy.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCancellationPolicy.');
        }

        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling deleteCancellationPolicy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCancellationPolicy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCancellationPolicy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCancellationPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.policyId !== undefined) {
            queryParameters['policyId'] = requestParameters.policyId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing cancellation policy for a specific hotel. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete a Cancellation policy
     */
    async deleteCancellationPolicy(requestParameters: DeleteCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete deposit policy for a property.   <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy
     */
    async deleteDepositPolicyRaw(requestParameters: DeleteDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteDepositPolicy.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteDepositPolicy.');
        }

        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling deleteDepositPolicy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDepositPolicy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteDepositPolicy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteDepositPolicy.');
        }

        const queryParameters: any = {};

        if (requestParameters.policyId !== undefined) {
            queryParameters['policyId'] = requestParameters.policyId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete deposit policy for a property.   <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy
     */
    async deleteDepositPolicy(requestParameters: DeleteDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the Reservation Ecoupons. <p><strong>OperationId:</strong>deleteECoupons</p>
     * Delete Reservation ECoupons
     */
    async deleteECouponsRaw(requestParameters: DeleteECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteECoupons.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteECoupons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteECoupons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteECoupons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteECoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.eCouponId !== undefined) {
            queryParameters['eCouponId'] = requestParameters.eCouponId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete the Reservation Ecoupons. <p><strong>OperationId:</strong>deleteECoupons</p>
     * Delete Reservation ECoupons
     */
    async deleteECoupons(requestParameters: DeleteECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteECouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete guest messages from a reservation. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete guest messages
     */
    async deleteGuestMessagesRaw(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestMessageId === null || requestParameters.guestMessageId === undefined) {
            throw new runtime.RequiredError('guestMessageId','Required parameter requestParameters.guestMessageId was null or undefined when calling deleteGuestMessages.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteGuestMessages.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteGuestMessages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteGuestMessages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteGuestMessages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteGuestMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages/{guestMessageId}`.replace(`{${"guestMessageId"}}`, encodeURIComponent(String(requestParameters.guestMessageId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete guest messages from a reservation. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete guest messages
     */
    async deleteGuestMessages(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel Master account on a reservation. <p><strong>OperationId:</strong>deleteMasterAccount</p>
     * Cancel Master Account
     */
    async deleteMasterAccountRaw(requestParameters: DeleteMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteMasterAccount.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteMasterAccount.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteMasterAccount.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteMasterAccount.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteMasterAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/masterAccount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Cancel Master account on a reservation. <p><strong>OperationId:</strong>deleteMasterAccount</p>
     * Cancel Master Account
     */
    async deleteMasterAccount(requestParameters: DeleteMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMasterAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete a payment method from a reservation. <p><strong>OperationId:</strong>deletePaymentMethods</p>
     * Delete a payment method 
     */
    async deletePaymentMethodsRaw(requestParameters: DeletePaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deletePaymentMethods.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePaymentMethods.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deletePaymentMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deletePaymentMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deletePaymentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete a payment method from a reservation. <p><strong>OperationId:</strong>deletePaymentMethods</p>
     * Delete a payment method 
     */
    async deletePaymentMethods(requestParameters: DeletePaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    async deletePreCheckInReservationRaw(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deletePreCheckInReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePreCheckInReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deletePreCheckInReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deletePreCheckInReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deletePreCheckInReservation.');
        }

        const queryParameters: any = {};

        if (requestParameters.resvIDExtension !== undefined) {
            queryParameters['resvIDExtension'] = requestParameters.resvIDExtension;
        }

        if (requestParameters.arrivalTime !== undefined) {
            queryParameters['arrivalTime'] = requestParameters.arrivalTime;
        }

        if (requestParameters.roomNumber !== undefined) {
            queryParameters['roomNumber'] = requestParameters.roomNumber;
        }

        if (requestParameters.guestPreferredCurrency !== undefined) {
            queryParameters['guestPreferredCurrency'] = requestParameters.guestPreferredCurrency;
        }

        if (requestParameters.allowMobileViewFolio !== undefined) {
            queryParameters['allowMobileViewFolio'] = requestParameters.allowMobileViewFolio;
        }

        if (requestParameters.paymentMethodDescription) {
            queryParameters['paymentMethodDescription'] = requestParameters.paymentMethodDescription;
        }

        if (requestParameters.paymentMethodFolioView) {
            queryParameters['paymentMethodFolioView'] = requestParameters.paymentMethodFolioView;
        }

        if (requestParameters.paymentMethod) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardOrToken !== undefined) {
            queryParameters['cardOrToken'] = requestParameters.cardOrToken;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.cardId !== undefined) {
            queryParameters['cardId'] = requestParameters.cardId;
        }

        if (requestParameters.cardIdIDExtension !== undefined) {
            queryParameters['cardIdIDExtension'] = requestParameters.cardIdIDExtension;
        }

        if (requestParameters.cardIdIDContext !== undefined) {
            queryParameters['cardIdIDContext'] = requestParameters.cardIdIDContext;
        }

        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }

        if (requestParameters.currentAuthorizedAmount !== undefined) {
            queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
        }

        if (requestParameters.authorizedAmountCurrencyCode !== undefined) {
            queryParameters['authorizedAmountCurrencyCode'] = requestParameters.authorizedAmountCurrencyCode;
        }

        if (requestParameters.approvalAmountNeeded !== undefined) {
            queryParameters['approvalAmountNeeded'] = requestParameters.approvalAmountNeeded;
        }

        if (requestParameters.approvalAmountCurrencyCode !== undefined) {
            queryParameters['approvalAmountCurrencyCode'] = requestParameters.approvalAmountCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.authorizationRuleCode !== undefined) {
            queryParameters['authorizationRuleCode'] = requestParameters.authorizationRuleCode;
        }

        if (requestParameters.authorizationRuleAmount !== undefined) {
            queryParameters['authorizationRuleAmount'] = requestParameters.authorizationRuleAmount;
        }

        if (requestParameters.authorizationRuleCurrencyCode !== undefined) {
            queryParameters['authorizationRuleCurrencyCode'] = requestParameters.authorizationRuleCurrencyCode;
        }

        if (requestParameters.authorizationRulePercent !== undefined) {
            queryParameters['authorizationRulePercent'] = requestParameters.authorizationRulePercent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.emailFolioID !== undefined) {
            queryParameters['emailFolioID'] = requestParameters.emailFolioID;
        }

        if (requestParameters.emailFolioIDExtension !== undefined) {
            queryParameters['emailFolioIDExtension'] = requestParameters.emailFolioIDExtension;
        }

        if (requestParameters.emailFolioIDContext !== undefined) {
            queryParameters['emailFolioIDContext'] = requestParameters.emailFolioIDContext;
        }

        if (requestParameters.emailFolioIDType !== undefined) {
            queryParameters['emailFolioIDType'] = requestParameters.emailFolioIDType;
        }

        if (requestParameters.emailFolioCreateDateTime !== undefined) {
            queryParameters['emailFolioCreateDateTime'] = requestParameters.emailFolioCreateDateTime;
        }

        if (requestParameters.emailFolioCreatorID !== undefined) {
            queryParameters['emailFolioCreatorID'] = requestParameters.emailFolioCreatorID;
        }

        if (requestParameters.emailFolioEmailAddress !== undefined) {
            queryParameters['emailFolioEmailAddress'] = requestParameters.emailFolioEmailAddress;
        }

        if (requestParameters.emailFolioEmailFormat !== undefined) {
            queryParameters['emailFolioEmailFormat'] = requestParameters.emailFolioEmailFormat;
        }

        if (requestParameters.emailFolioLastModifierID !== undefined) {
            queryParameters['emailFolioLastModifierID'] = requestParameters.emailFolioLastModifierID;
        }

        if (requestParameters.emailFolioLastModifyDateTime !== undefined) {
            queryParameters['emailFolioLastModifyDateTime'] = requestParameters.emailFolioLastModifyDateTime;
        }

        if (requestParameters.emailFolioOrderSequence !== undefined) {
            queryParameters['emailFolioOrderSequence'] = requestParameters.emailFolioOrderSequence;
        }

        if (requestParameters.emailFolioPrimaryInd !== undefined) {
            queryParameters['emailFolioPrimaryInd'] = requestParameters.emailFolioPrimaryInd;
        }

        if (requestParameters.emailFolioPurgeDate !== undefined) {
            queryParameters['emailFolioPurgeDate'] = (requestParameters.emailFolioPurgeDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.emailFolioType !== undefined) {
            queryParameters['emailFolioType'] = requestParameters.emailFolioType;
        }

        if (requestParameters.emailFolioTypeDescription !== undefined) {
            queryParameters['emailFolioTypeDescription'] = requestParameters.emailFolioTypeDescription;
        }

        if (requestParameters.arrivalCarrierCode !== undefined) {
            queryParameters['arrivalCarrierCode'] = requestParameters.arrivalCarrierCode;
        }

        if (requestParameters.arrivalDateTime !== undefined) {
            queryParameters['arrivalDateTime'] = requestParameters.arrivalDateTime;
        }

        if (requestParameters.arrivalStationCode !== undefined) {
            queryParameters['arrivalStationCode'] = requestParameters.arrivalStationCode;
        }

        if (requestParameters.arrivalTransportCode !== undefined) {
            queryParameters['arrivalTransportCode'] = requestParameters.arrivalTransportCode;
        }

        if (requestParameters.arrivalTransportationReqd !== undefined) {
            queryParameters['arrivalTransportationReqd'] = requestParameters.arrivalTransportationReqd;
        }

        if (requestParameters.arrivalType !== undefined) {
            queryParameters['arrivalType'] = requestParameters.arrivalType;
        }

        if (requestParameters.arrivalComments !== undefined) {
            queryParameters['arrivalComments'] = requestParameters.arrivalComments;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will cancel or rather revert the pre-checkin action for a guest\'s reservation. The reservation will return to DUEIN status. <p><strong>OperationId:</strong>deletePreCheckInReservation</p>
     * Revert a PreCheckIn Reservation
     */
    async deletePreCheckInReservation(requestParameters: DeletePreCheckInReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePreCheckInReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to refund Reservation tickets. <p><strong>OperationId:</strong>deleteRefundTickets</p>
     * Refund Reservation tickets
     */
    async deleteRefundTicketsRaw(requestParameters: DeleteRefundTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteRefundTickets.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRefundTickets.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRefundTickets.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteRefundTickets.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteRefundTickets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/refund`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to refund Reservation tickets. <p><strong>OperationId:</strong>deleteRefundTickets</p>
     * Refund Reservation tickets
     */
    async deleteRefundTickets(requestParameters: DeleteRefundTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRefundTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete attachments from a Reservation. <p><strong>OperationId:</strong>deleteReservationAttachment</p>
     * Delete Reservation attachments
     */
    async deleteReservationAttachmentRaw(requestParameters: DeleteReservationAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling deleteReservationAttachment.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationAttachment.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationAttachment.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationAttachment.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationAttachment.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationAttachment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/attachments/{attachmentId}`.replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete attachments from a Reservation. <p><strong>OperationId:</strong>deleteReservationAttachment</p>
     * Delete Reservation attachments
     */
    async deleteReservationAttachment(requestParameters: DeleteReservationAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a certification from a reservation. <p><strong>OperationId:</strong>deleteReservationCertificate</p>
     * Detach Certificate
     */
    async deleteReservationCertificateRaw(requestParameters: DeleteReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationCertificate.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationCertificate.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationCertificate.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationCertificate.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/certificates`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Remove a certification from a reservation. <p><strong>OperationId:</strong>deleteReservationCertificate</p>
     * Detach Certificate
     */
    async deleteReservationCertificate(requestParameters: DeleteReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    async deleteReservationLinksRaw(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationLinks.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLinks.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationLinks.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationLinks.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationLinks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinks</p>
     * Remove Reservation Links
     */
    async deleteReservationLinks(requestParameters: DeleteReservationLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByChain</p>
     * Remove Reservation Links By Chain
     */
    async deleteReservationLinksByChainRaw(requestParameters: DeleteReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationLinksByChain.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationLinksByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationLinksByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationLinksByChain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByChain</p>
     * Remove Reservation Links By Chain
     */
    async deleteReservationLinksByChain(requestParameters: DeleteReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationLinksByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByExtId</p>
     * Remove Reservation Links
     */
    async deleteReservationLinksByExtIdRaw(requestParameters: DeleteReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling deleteReservationLinksByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling deleteReservationLinksByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLinksByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationLinksByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationLinksByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationLinksByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/linkedReservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to unlink a reservation from its currently associated reservation. <p><strong>OperationId:</strong>deleteReservationLinksByExtId</p>
     * Remove Reservation Links
     */
    async deleteReservationLinksByExtId(requestParameters: DeleteReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationLinksByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Guest Locater for a Reservation. <p><strong>OperationId:</strong>deleteReservationLocators</p>
     * Remove Reservation Locators
     */
    async deleteReservationLocatorsRaw(requestParameters: DeleteReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locatorId === null || requestParameters.locatorId === undefined) {
            throw new runtime.RequiredError('locatorId','Required parameter requestParameters.locatorId was null or undefined when calling deleteReservationLocators.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationLocators.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLocators.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationLocators.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationLocators.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationLocators.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators/{locatorId}`.replace(`{${"locatorId"}}`, encodeURIComponent(String(requestParameters.locatorId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a Guest Locater for a Reservation. <p><strong>OperationId:</strong>deleteReservationLocators</p>
     * Remove Reservation Locators
     */
    async deleteReservationLocators(requestParameters: DeleteReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationLocatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Release Reservation Lock. <p><strong>OperationId:</strong>deleteReservationLock</p>
     * Release Reservation Lock
     */
    async deleteReservationLockRaw(requestParameters: DeleteReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.lockHandle === null || requestParameters.lockHandle === undefined) {
            throw new runtime.RequiredError('lockHandle','Required parameter requestParameters.lockHandle was null or undefined when calling deleteReservationLock.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationLock.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationLock.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationLock.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationLock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locks/{lockHandle}`.replace(`{${"lockHandle"}}`, encodeURIComponent(String(requestParameters.lockHandle))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Release Reservation Lock. <p><strong>OperationId:</strong>deleteReservationLock</p>
     * Release Reservation Lock
     */
    async deleteReservationLock(requestParameters: DeleteReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a membership from an existing reservation. <p><strong>OperationId:</strong>deleteReservationMembership</p>
     * Delete a Reservation membership
     */
    async deleteReservationMembershipRaw(requestParameters: DeleteReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationMembership.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationMembership.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationMembership.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationMembership.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationMembership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/memberships`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a membership from an existing reservation. <p><strong>OperationId:</strong>deleteReservationMembership</p>
     * Delete a Reservation membership
     */
    async deleteReservationMembership(requestParameters: DeleteReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to delete packages from a reservation. <p><strong>OperationId:</strong>deleteReservationPackage</p>
     * Delete a package from a Reservation
     */
    async deleteReservationPackageRaw(requestParameters: DeleteReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationPackage.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationPackage.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationPackage.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationPackage.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete packages from a reservation. <p><strong>OperationId:</strong>deleteReservationPackage</p>
     * Delete a package from a Reservation
     */
    async deleteReservationPackage(requestParameters: DeleteReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to remove a preference that exist on a reservation. <p><strong>OperationId:</strong>deleteReservationPreference</p>
     * Delete a Reservation Preference
     */
    async deleteReservationPreferenceRaw(requestParameters: DeleteReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
            throw new runtime.RequiredError('preferenceCode','Required parameter requestParameters.preferenceCode was null or undefined when calling deleteReservationPreference.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservationPreference.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservationPreference.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservationPreference.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservationPreference.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservationPreference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preferences/{preferenceCode}`.replace(`{${"preferenceCode"}}`, encodeURIComponent(String(requestParameters.preferenceCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to remove a preference that exist on a reservation. <p><strong>OperationId:</strong>deleteReservationPreference</p>
     * Delete a Reservation Preference
     */
    async deleteReservationPreference(requestParameters: DeleteReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>deleteReservedInventoryItems</p>
     * Delete Reserved Inventory Items
     */
    async deleteReservedInventoryItemsRaw(requestParameters: DeleteReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteReservedInventoryItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteReservedInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteReservedInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteReservedInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteReservedInventoryItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>deleteReservedInventoryItems</p>
     * Delete Reserved Inventory Items
     */
    async deleteReservedInventoryItems(requestParameters: DeleteReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservedInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete routing instructions from a reservation. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    async deleteRoutingInstructionsRaw(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteRoutingInstructions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRoutingInstructions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRoutingInstructions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteRoutingInstructions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteRoutingInstructions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete routing instructions from a reservation. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Delete routing instructions
     * @deprecated
     */
    async deleteRoutingInstructions(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing sell message configuration for a property. <p><strong>OperationId:</strong>deleteSellMessageConfig</p>
     * Delete sell message
     */
    async deleteSellMessageConfigRaw(requestParameters: DeleteSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteSellMessageConfig.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteSellMessageConfig.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteSellMessageConfig.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteSellMessageConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing sell message configuration for a property. <p><strong>OperationId:</strong>deleteSellMessageConfig</p>
     * Delete sell message
     */
    async deleteSellMessageConfig(requestParameters: DeleteSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteSellMessageConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing sell message configuration. <p><strong>OperationId:</strong>deleteSellMessageConfigByChain</p>
     * Delete sell message by chain
     */
    async deleteSellMessageConfigByChainRaw(requestParameters: DeleteSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteSellMessageConfigByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteSellMessageConfigByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteSellMessageConfigByChain.');
        }

        const queryParameters: any = {};

        if (requestParameters.sellMessageConfigId) {
            queryParameters['sellMessageConfigId'] = requestParameters.sellMessageConfigId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sellMessages/config`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing sell message configuration. <p><strong>OperationId:</strong>deleteSellMessageConfigByChain</p>
     * Delete sell message by chain
     */
    async deleteSellMessageConfigByChain(requestParameters: DeleteSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteSellMessageConfigByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservation</p>
     * Separate share Reservations
     */
    async deleteShareReservationRaw(requestParameters: DeleteShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteShareReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteShareReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteShareReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteShareReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteShareReservation.');
        }

        const queryParameters: any = {};

        if (requestParameters.overrideInventoryCheck !== undefined) {
            queryParameters['overrideInventoryCheck'] = requestParameters.overrideInventoryCheck;
        }

        if (requestParameters.overrideMaxOccupancyCheck !== undefined) {
            queryParameters['overrideMaxOccupancyCheck'] = requestParameters.overrideMaxOccupancyCheck;
        }

        if (requestParameters.overrideRateAvailabilityCheck !== undefined) {
            queryParameters['overrideRateAvailabilityCheck'] = requestParameters.overrideRateAvailabilityCheck;
        }

        if (requestParameters.returnShareReservations !== undefined) {
            queryParameters['returnShareReservations'] = requestParameters.returnShareReservations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservation</p>
     * Separate share Reservations
     */
    async deleteShareReservation(requestParameters: DeleteShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteShareReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservationByExtId</p>
     * Separate share Reservations
     */
    async deleteShareReservationByExtIdRaw(requestParameters: DeleteShareReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling deleteShareReservationByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling deleteShareReservationByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteShareReservationByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteShareReservationByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteShareReservationByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteShareReservationByExtId.');
        }

        const queryParameters: any = {};

        if (requestParameters.overrideInventoryCheck !== undefined) {
            queryParameters['overrideInventoryCheck'] = requestParameters.overrideInventoryCheck;
        }

        if (requestParameters.overrideMaxOccupancyCheck !== undefined) {
            queryParameters['overrideMaxOccupancyCheck'] = requestParameters.overrideMaxOccupancyCheck;
        }

        if (requestParameters.overrideRateAvailabilityCheck !== undefined) {
            queryParameters['overrideRateAvailabilityCheck'] = requestParameters.overrideRateAvailabilityCheck;
        }

        if (requestParameters.returnShareReservations !== undefined) {
            queryParameters['returnShareReservations'] = requestParameters.returnShareReservations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to separate the share reservations. <p><strong>OperationId:</strong>deleteShareReservationByExtId</p>
     * Separate share Reservations
     */
    async deleteShareReservationByExtId(requestParameters: DeleteShareReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteShareReservationByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete tickets from a reservation. <p><strong>OperationId:</strong>deleteTickets</p>
     * Delete tickets
     */
    async deleteTicketsRaw(requestParameters: DeleteTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteTickets.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTickets.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteTickets.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteTickets.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteTickets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete tickets from a reservation. <p><strong>OperationId:</strong>deleteTickets</p>
     * Delete tickets
     */
    async deleteTickets(requestParameters: DeleteTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Transaction Diversions. <p><strong>OperationId:</strong>deleteTransactionDiversions</p>
     * Delete Transaction Diversions 
     */
    async deleteTransactionDiversionsRaw(requestParameters: DeleteTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteTransactionDiversions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTransactionDiversions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteTransactionDiversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteTransactionDiversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteTransactionDiversions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Transaction Diversions. <p><strong>OperationId:</strong>deleteTransactionDiversions</p>
     * Delete Transaction Diversions 
     */
    async deleteTransactionDiversions(requestParameters: DeleteTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTransactionDiversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will enable you to delete an upsell from a reservation. There may be reservation policies that might prevent an upsell from being deleted and as such an appropriate response will be returned. <p><strong>OperationId:</strong>deleteUpsell</p>
     * Delete a Reservation Upsell
     */
    async deleteUpsellRaw(requestParameters: DeleteUpsellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteUpsell.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteUpsell.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteUpsell.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteUpsell.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteUpsell.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will enable you to delete an upsell from a reservation. There may be reservation policies that might prevent an upsell from being deleted and as such an appropriate response will be returned. <p><strong>OperationId:</strong>deleteUpsell</p>
     * Delete a Reservation Upsell
     */
    async deleteUpsell(requestParameters: DeleteUpsellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteUpsellRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the alert notices including global alerts for a reservation. <p><strong>OperationId:</strong>getAlertNotices</p>
     * Fetch Alert Notices
     */
    async getAlertNoticesRaw(requestParameters: GetAlertNoticesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Alerts>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getAlertNotices.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAlertNotices.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAlertNotices.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAlertNotices.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAlertNotices.');
        }

        const queryParameters: any = {};

        if (requestParameters.alertArea !== undefined) {
            queryParameters['alertArea'] = requestParameters.alertArea;
        }

        if (requestParameters.welcomeOffer !== undefined) {
            queryParameters['welcomeOffer'] = requestParameters.welcomeOffer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/alerts`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertsFromJSON(jsonValue));
    }

    /**
     * Get the alert notices including global alerts for a reservation. <p><strong>OperationId:</strong>getAlertNotices</p>
     * Fetch Alert Notices
     */
    async getAlertNotices(requestParameters: GetAlertNoticesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Alerts> {
        const response = await this.getAlertNoticesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get award upgrades for a specific property. <p><strong>OperationId:</strong>getAwardUpgrades</p>
     * Get Award Upgrades
     */
    async getAwardUpgradesRaw(requestParameters: GetAwardUpgradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwardUpgrades>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAwardUpgrades.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAwardUpgrades.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAwardUpgrades.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAwardUpgrades.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.membershipCardNo !== undefined) {
            queryParameters['membershipCardNo'] = requestParameters.membershipCardNo;
        }

        if (requestParameters.membershipPoints !== undefined) {
            queryParameters['membershipPoints'] = requestParameters.membershipPoints;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.reservationTimeSpanStartDate !== undefined) {
            queryParameters['reservationTimeSpanStartDate'] = (requestParameters.reservationTimeSpanStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.reservationTimeSpanEndDate !== undefined) {
            queryParameters['reservationTimeSpanEndDate'] = (requestParameters.reservationTimeSpanEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.reservationTimeSpanDuration !== undefined) {
            queryParameters['reservationTimeSpanDuration'] = requestParameters.reservationTimeSpanDuration;
        }

        if (requestParameters.numberOfRooms !== undefined) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/awardUpgrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardUpgradesFromJSON(jsonValue));
    }

    /**
     * Get award upgrades for a specific property. <p><strong>OperationId:</strong>getAwardUpgrades</p>
     * Get Award Upgrades
     */
    async getAwardUpgrades(requestParameters: GetAwardUpgradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwardUpgrades> {
        const response = await this.getAwardUpgradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get certificates and awards associated with the Reservation. <p><strong>OperationId:</strong>getAwards</p>
     * Fetch Awards
     */
    async getAwardsRaw(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationAwards>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAwards.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAwards.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAwards.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAwards.');
        }

        const queryParameters: any = {};

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/awards`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationAwardsFromJSON(jsonValue));
    }

    /**
     * Get certificates and awards associated with the Reservation. <p><strong>OperationId:</strong>getAwards</p>
     * Fetch Awards
     */
    async getAwards(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationAwards> {
        const response = await this.getAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Reservation Call History <p><strong>OperationId:</strong>getCallHistory</p>
     * Get the Reservation Call History
     */
    async getCallHistoryRaw(requestParameters: GetCallHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallHistory>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getCallHistory.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCallHistory.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCallHistory.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCallHistory.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCallHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/calls`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallHistoryFromJSON(jsonValue));
    }

    /**
     * Get the Reservation Call History <p><strong>OperationId:</strong>getCallHistory</p>
     * Get the Reservation Call History
     */
    async getCallHistory(requestParameters: GetCallHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallHistory> {
        const response = await this.getCallHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get call statistics. <p><strong>OperationId:</strong>getCallStatistics</p>
     * Get call statistics
     */
    async getCallStatisticsRaw(requestParameters: GetCallStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CallStatistics>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCallStatistics.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCallStatistics.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCallStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        if (requestParameters.appUserName) {
            queryParameters['appUserName'] = requestParameters.appUserName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/calls/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CallStatisticsFromJSON(jsonValue));
    }

    /**
     * Use this API to get call statistics. <p><strong>OperationId:</strong>getCallStatistics</p>
     * Get call statistics
     */
    async getCallStatistics(requestParameters: GetCallStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CallStatistics> {
        const response = await this.getCallStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get cancellation history for a reservation. <p><strong>OperationId:</strong>getCancellationHistory</p>
     * Get cancellation history
     */
    async getCancellationHistoryRaw(requestParameters: GetCancellationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancellationHistory>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getCancellationHistory.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCancellationHistory.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCancellationHistory.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCancellationHistory.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCancellationHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelName !== undefined) {
            queryParameters['hotelName'] = requestParameters.hotelName;
        }

        if (requestParameters.roomStayStartDate !== undefined) {
            queryParameters['roomStayStartDate'] = (requestParameters.roomStayStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.roomStayEndDate !== undefined) {
            queryParameters['roomStayEndDate'] = (requestParameters.roomStayEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.roomStayDuration !== undefined) {
            queryParameters['roomStayDuration'] = requestParameters.roomStayDuration;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.numberOfRooms !== undefined) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.reservationBlockHotelId !== undefined) {
            queryParameters['reservationBlockHotelId'] = requestParameters.reservationBlockHotelId;
        }

        if (requestParameters.reservationBlockId) {
            queryParameters['reservationBlockId'] = requestParameters.reservationBlockId;
        }

        if (requestParameters.reservationBlockIdType) {
            queryParameters['reservationBlockIdType'] = requestParameters.reservationBlockIdType;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.linkCode !== undefined) {
            queryParameters['linkCode'] = requestParameters.linkCode;
        }

        if (requestParameters.onHold !== undefined) {
            queryParameters['onHold'] = requestParameters.onHold;
        }

        if (requestParameters.membershipAccountId !== undefined) {
            queryParameters['membershipAccountId'] = requestParameters.membershipAccountId;
        }

        if (requestParameters.membershipBonusCode !== undefined) {
            queryParameters['membershipBonusCode'] = requestParameters.membershipBonusCode;
        }

        if (requestParameters.membershipLevel !== undefined) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.lastStayDate !== undefined) {
            queryParameters['lastStayDate'] = (requestParameters.lastStayDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationHistory`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancellationHistoryFromJSON(jsonValue));
    }

    /**
     * Get cancellation history for a reservation. <p><strong>OperationId:</strong>getCancellationHistory</p>
     * Get cancellation history
     */
    async getCancellationHistory(requestParameters: GetCancellationHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancellationHistory> {
        const response = await this.getCancellationHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of Reservations for which confirmation letters need to be sent. <p><strong>OperationId:</strong>getConfirmationLetters</p>
     * Fetch Confirmation Letters
     */
    async getConfirmationLettersRaw(requestParameters: GetConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationConfirmationLetters>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getConfirmationLetters.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getConfirmationLetters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getConfirmationLetters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getConfirmationLetters.');
        }

        const queryParameters: any = {};

        if (requestParameters.notAttached !== undefined) {
            queryParameters['notAttached'] = requestParameters.notAttached;
        }

        if (requestParameters.pending !== undefined) {
            queryParameters['pending'] = requestParameters.pending;
        }

        if (requestParameters.sent !== undefined) {
            queryParameters['sent'] = requestParameters.sent;
        }

        if (requestParameters.createdOnEndDate !== undefined) {
            queryParameters['createdOnEndDate'] = (requestParameters.createdOnEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.createdOnStartDate !== undefined) {
            queryParameters['createdOnStartDate'] = (requestParameters.createdOnStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.letterStyleId) {
            queryParameters['letterStyleId'] = requestParameters.letterStyleId;
        }

        if (requestParameters.letterStyle) {
            queryParameters['letterStyle'] = requestParameters.letterStyle;
        }

        if (requestParameters.letterStyleIdType) {
            queryParameters['letterStyleIdType'] = requestParameters.letterStyleIdType;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.membershipLevelCode) {
            queryParameters['membershipLevelCode'] = requestParameters.membershipLevelCode;
        }

        if (requestParameters.membershipTypeCode) {
            queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.blockHotelId !== undefined) {
            queryParameters['blockHotelId'] = requestParameters.blockHotelId;
        }

        if (requestParameters.blockId) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdType) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/confirmationLetters`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationConfirmationLettersFromJSON(jsonValue));
    }

    /**
     * Get a list of Reservations for which confirmation letters need to be sent. <p><strong>OperationId:</strong>getConfirmationLetters</p>
     * Fetch Confirmation Letters
     */
    async getConfirmationLetters(requestParameters: GetConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationConfirmationLetters> {
        const response = await this.getConfirmationLettersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Reservation Ecoupons. <p><strong>OperationId:</strong>getECoupons</p>
     * Get Reservation Ecoupons
     */
    async getECouponsRaw(requestParameters: GetECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECoupons>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getECoupons.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getECoupons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getECoupons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getECoupons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getECoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECouponsFromJSON(jsonValue));
    }

    /**
     * Get the Reservation Ecoupons. <p><strong>OperationId:</strong>getECoupons</p>
     * Get Reservation Ecoupons
     */
    async getECoupons(requestParameters: GetECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECoupons> {
        const response = await this.getECouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get external system delivery history. <p><strong>OperationId:</strong>getExternalSystemDeliveryHistory</p>
     * Get External system delivery history
     */
    async getExternalSystemDeliveryHistoryRaw(requestParameters: GetExternalSystemDeliveryHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeliveryHistoryLog>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getExternalSystemDeliveryHistory.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getExternalSystemDeliveryHistory.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getExternalSystemDeliveryHistory.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getExternalSystemDeliveryHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fetchExternalSystemDeliveryHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeliveryHistoryLogFromJSON(jsonValue));
    }

    /**
     * Get external system delivery history. <p><strong>OperationId:</strong>getExternalSystemDeliveryHistory</p>
     * Get External system delivery history
     */
    async getExternalSystemDeliveryHistory(requestParameters: GetExternalSystemDeliveryHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeliveryHistoryLog> {
        const response = await this.getExternalSystemDeliveryHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    async getExternalSystemReservationsRaw(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>> {
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getExternalSystemReservations.');
        }

        if (requestParameters.externalReferenceList === null || requestParameters.externalReferenceList === undefined) {
            throw new runtime.RequiredError('externalReferenceList','Required parameter requestParameters.externalReferenceList was null or undefined when calling getExternalSystemReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getExternalSystemReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getExternalSystemReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getExternalSystemReservations.');
        }

        const queryParameters: any = {};

        if (requestParameters.externalReferenceList) {
            queryParameters['externalReferenceList'] = requestParameters.externalReferenceList;
        }

        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = (requestParameters.departureEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = (requestParameters.departureStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }

        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }

        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }

        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }

        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }

        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }

        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }

        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }

        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }

        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }

        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = (requestParameters.cancelledOn as any).toISOString().substring(0,10);
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }

        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }

        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }

        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }

        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }

        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }

        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }

        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }

        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }

        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }

        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }

        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }

        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }

        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }

        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }

        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }

        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }

        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }

        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }

        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }

        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }

        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }

        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }

        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }

        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }

        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }

        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }

        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }

        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }

        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }

        if (requestParameters.excludeRoomFeatures) {
            queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
        }

        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }

        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }

        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }

        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }

        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }

        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }

        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }

        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }

        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/reservations`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getExternalSystemReservations</p>
     * Get Reservations for a hotel
     */
    async getExternalSystemReservations(requestParameters: GetExternalSystemReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails> {
        const response = await this.getExternalSystemReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to identify whether there are future reservations or business block for the profile id. <p><strong>OperationId:</strong>getFutureReservationsOrBlocks</p>
     * Get Future Reservations on a profile
     */
    async getFutureReservationsOrBlocksRaw(requestParameters: GetFutureReservationsOrBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FutureReservationsOrBlocksDetails>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getFutureReservationsOrBlocks.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getFutureReservationsOrBlocks.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getFutureReservationsOrBlocks.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getFutureReservationsOrBlocks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/reservations`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FutureReservationsOrBlocksDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to identify whether there are future reservations or business block for the profile id. <p><strong>OperationId:</strong>getFutureReservationsOrBlocks</p>
     * Get Future Reservations on a profile
     */
    async getFutureReservationsOrBlocks(requestParameters: GetFutureReservationsOrBlocksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FutureReservationsOrBlocksDetails> {
        const response = await this.getFutureReservationsOrBlocksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get guest messages which exist on a reservation. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get guest messages
     */
    async getGuestMessagesRaw(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestMessages>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getGuestMessages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGuestMessages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGuestMessages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGuestMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.retrieveDeliveredMessages !== undefined) {
            queryParameters['retrieveDeliveredMessages'] = requestParameters.retrieveDeliveredMessages;
        }

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.travelAgent !== undefined) {
            queryParameters['travelAgent'] = requestParameters.travelAgent;
        }

        if (requestParameters.company !== undefined) {
            queryParameters['company'] = requestParameters.company;
        }

        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        if (requestParameters.reservationStatus !== undefined) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.retrieveUndeliveredMessages !== undefined) {
            queryParameters['retrieveUndeliveredMessages'] = requestParameters.retrieveUndeliveredMessages;
        }

        if (requestParameters.retrievePrintedMessages !== undefined) {
            queryParameters['retrievePrintedMessages'] = requestParameters.retrievePrintedMessages;
        }

        if (requestParameters.retrieveTextedMessages !== undefined) {
            queryParameters['retrieveTextedMessages'] = requestParameters.retrieveTextedMessages;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.recipientName !== undefined) {
            queryParameters['recipientName'] = requestParameters.recipientName;
        }

        if (requestParameters.confirmationNo !== undefined) {
            queryParameters['confirmationNo'] = requestParameters.confirmationNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestMessagesFromJSON(jsonValue));
    }

    /**
     * Get guest messages which exist on a reservation. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get guest messages
     */
    async getGuestMessages(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestMessages> {
        const response = await this.getGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    async getHotelReservationsRaw(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getHotelReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelReservations.');
        }

        const queryParameters: any = {};

        if (requestParameters.keyTrack2 !== undefined) {
            queryParameters['keyTrack2'] = requestParameters.keyTrack2;
        }

        if (requestParameters.discrepancy !== undefined) {
            queryParameters['discrepancy'] = requestParameters.discrepancy;
        }

        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.reservationIdList) {
            queryParameters['reservationIdList'] = requestParameters.reservationIdList;
        }

        if (requestParameters.confirmationNumberList) {
            queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
        }

        if (requestParameters.cancellationNumberList) {
            queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
        }

        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }

        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = (requestParameters.departureEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = (requestParameters.departureStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.stayOnStartDate !== undefined) {
            queryParameters['stayOnStartDate'] = (requestParameters.stayOnStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.createdOnStartDate !== undefined) {
            queryParameters['createdOnStartDate'] = (requestParameters.createdOnStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
        }

        if (requestParameters.depositDueEndDate !== undefined) {
            queryParameters['depositDueEndDate'] = (requestParameters.depositDueEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.depositDueStartDate !== undefined) {
            queryParameters['depositDueStartDate'] = (requestParameters.depositDueStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }

        if (requestParameters.sourceNames) {
            queryParameters['sourceNames'] = requestParameters.sourceNames;
        }

        if (requestParameters.travelAgentNames) {
            queryParameters['travelAgentNames'] = requestParameters.travelAgentNames;
        }

        if (requestParameters.groupNames) {
            queryParameters['groupNames'] = requestParameters.groupNames;
        }

        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }

        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }

        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }

        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }

        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.commissionPaid !== undefined) {
            queryParameters['commissionPaid'] = requestParameters.commissionPaid;
        }

        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }

        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.fromName !== undefined) {
            queryParameters['fromName'] = requestParameters.fromName;
        }

        if (requestParameters.toName !== undefined) {
            queryParameters['toName'] = requestParameters.toName;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }

        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }

        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = (requestParameters.cancelledOn as any).toISOString().substring(0,10);
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }

        if (requestParameters.blockCriteriaHotelCode !== undefined) {
            queryParameters['blockCriteriaHotelCode'] = requestParameters.blockCriteriaHotelCode;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }

        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }

        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }

        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }

        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }

        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }

        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedReservationActions) {
            queryParameters['allowedReservationActions'] = requestParameters.allowedReservationActions;
        }

        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }

        if (requestParameters.excludeNoPost !== undefined) {
            queryParameters['excludeNoPost'] = requestParameters.excludeNoPost;
        }

        if (requestParameters.excludePMRooms !== undefined) {
            queryParameters['excludePMRooms'] = requestParameters.excludePMRooms;
        }

        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }

        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }

        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }

        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }

        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }

        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }

        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }

        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }

        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }

        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }

        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }

        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }

        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }

        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }

        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }

        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }

        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }

        if (requestParameters.periodicFolio !== undefined) {
            queryParameters['periodicFolio'] = requestParameters.periodicFolio;
        }

        if (requestParameters.folioSettlementTypes !== undefined) {
            queryParameters['folioSettlementTypes'] = requestParameters.folioSettlementTypes;
        }

        if (requestParameters.defaultDays !== undefined) {
            queryParameters['defaultDays'] = requestParameters.defaultDays;
        }

        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }

        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }

        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }

        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }

        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }

        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }

        if (requestParameters.excludeRoomFeatures) {
            queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
        }

        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }

        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }

        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }

        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }

        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }

        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }

        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }

        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }

        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }

        if (requestParameters.swapShiftRoomReservationId !== undefined) {
            queryParameters['swapShiftRoomReservationId'] = requestParameters.swapShiftRoomReservationId;
        }

        if (requestParameters.roomSmokingPreferences) {
            queryParameters['roomSmokingPreferences'] = requestParameters.roomSmokingPreferences;
        }

        if (requestParameters.roomFeaturePreferences) {
            queryParameters['roomFeaturePreferences'] = requestParameters.roomFeaturePreferences;
        }

        if (requestParameters.roomsFloorPreferences) {
            queryParameters['roomsFloorPreferences'] = requestParameters.roomsFloorPreferences;
        }

        if (requestParameters.contactNames) {
            queryParameters['contactNames'] = requestParameters.contactNames;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to search reservations in a hotel, filtering by whether they are Day Use, Due In, Checked In, Due Out, Checked Out, Cancelled, No Show and Complimentary or any other of the large selection of search criteria. It also serves as an entry way for changing existing reservation information, canceling reservations, checking in guests, canceling check ins, etc. You can use further query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getHotelReservations</p>
     * Get and search for reservations in a hotel
     */
    async getHotelReservations(requestParameters: GetHotelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails> {
        const response = await this.getHotelReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get linked Reservations for given Reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked Reservations 
     */
    async getLinkedReservationsRaw(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedHotelReservations>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getLinkedReservations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getLinkedReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getLinkedReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getLinkedReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getLinkedReservations.');
        }

        const queryParameters: any = {};

        if (requestParameters.additionalReservationId) {
            queryParameters['additionalReservationId'] = requestParameters.additionalReservationId;
        }

        if (requestParameters.additionalReservationIdType) {
            queryParameters['additionalReservationIdType'] = requestParameters.additionalReservationIdType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/linked`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkedHotelReservationsFromJSON(jsonValue));
    }

    /**
     * Get linked Reservations for given Reservation. <p><strong>OperationId:</strong>getLinkedReservations</p>
     * Get linked Reservations 
     */
    async getLinkedReservations(requestParameters: GetLinkedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedHotelReservations> {
        const response = await this.getLinkedReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reservation summary for linked Reservation of given Reservation id. <p><strong>OperationId:</strong>getLinkedReservationsSummary</p>
     * Get Reservation summary for linked Reservation
     */
    async getLinkedReservationsSummaryRaw(requestParameters: GetLinkedReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedReservationsInfo>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getLinkedReservationsSummary.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getLinkedReservationsSummary.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getLinkedReservationsSummary.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getLinkedReservationsSummary.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getLinkedReservationsSummary.');
        }

        const queryParameters: any = {};

        if (requestParameters.additionalReservationId) {
            queryParameters['additionalReservationId'] = requestParameters.additionalReservationId;
        }

        if (requestParameters.additionalReservationIdType) {
            queryParameters['additionalReservationIdType'] = requestParameters.additionalReservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/linkedSummary`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkedReservationsInfoFromJSON(jsonValue));
    }

    /**
     * Get Reservation summary for linked Reservation of given Reservation id. <p><strong>OperationId:</strong>getLinkedReservationsSummary</p>
     * Get Reservation summary for linked Reservation
     */
    async getLinkedReservationsSummary(requestParameters: GetLinkedReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedReservationsInfo> {
        const response = await this.getLinkedReservationsSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the package availability for a hotel code and reservation id <p><strong>OperationId:</strong>getPackage</p>
     * Get Package
     */
    async getPackageRaw(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Packages>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getPackage.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPackage.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPackage.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPackage.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.postingRhythm !== undefined) {
            queryParameters['postingRhythm'] = requestParameters.postingRhythm;
        }

        if (requestParameters.productCode !== undefined) {
            queryParameters['productCode'] = requestParameters.productCode;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.reservationTimeSpanStartDate !== undefined) {
            queryParameters['reservationTimeSpanStartDate'] = (requestParameters.reservationTimeSpanStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.reservationTimeSpanEndDate !== undefined) {
            queryParameters['reservationTimeSpanEndDate'] = (requestParameters.reservationTimeSpanEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.packageTimeSpanStartDate !== undefined) {
            queryParameters['packageTimeSpanStartDate'] = (requestParameters.packageTimeSpanStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.packageTimeSpanEndDate !== undefined) {
            queryParameters['packageTimeSpanEndDate'] = (requestParameters.packageTimeSpanEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.packageQuantity !== undefined) {
            queryParameters['packageQuantity'] = requestParameters.packageQuantity;
        }

        if (requestParameters.packageExcludedQuantity !== undefined) {
            queryParameters['packageExcludedQuantity'] = requestParameters.packageExcludedQuantity;
        }

        if (requestParameters.reservationAdults !== undefined) {
            queryParameters['reservationAdults'] = requestParameters.reservationAdults;
        }

        if (requestParameters.reservationChildren !== undefined) {
            queryParameters['reservationChildren'] = requestParameters.reservationChildren;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackagesFromJSON(jsonValue));
    }

    /**
     * Get the package availability for a hotel code and reservation id <p><strong>OperationId:</strong>getPackage</p>
     * Get Package
     */
    async getPackage(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Packages> {
        const response = await this.getPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method 
     */
    async getPaymentMethodsRaw(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPaymentMethods>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getPaymentMethods.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPaymentMethods.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPaymentMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPaymentMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPaymentMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeAmounts !== undefined) {
            queryParameters['includeAmounts'] = requestParameters.includeAmounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPaymentMethodsFromJSON(jsonValue));
    }

    /**
     * This API will return the payment method(s) that exist on a reservation. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Get a payment method 
     */
    async getPaymentMethods(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPaymentMethods> {
        const response = await this.getPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get preArrival Member Reservations. <p><strong>OperationId:</strong>getPreArrivalMemberReservations</p>
     * Get preArrival Member Reservations
     */
    async getPreArrivalMemberReservationsRaw(requestParameters: GetPreArrivalMemberReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreArrivalMemberReservationsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPreArrivalMemberReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPreArrivalMemberReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPreArrivalMemberReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPreArrivalMemberReservations.');
        }

        const queryParameters: any = {};

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.externalReferenceType !== undefined) {
            queryParameters['externalReferenceType'] = requestParameters.externalReferenceType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/preArrivalMembersReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreArrivalMemberReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Get preArrival Member Reservations. <p><strong>OperationId:</strong>getPreArrivalMemberReservations</p>
     * Get preArrival Member Reservations
     */
    async getPreArrivalMemberReservations(requestParameters: GetPreArrivalMemberReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreArrivalMemberReservationsDetails> {
        const response = await this.getPreArrivalMemberReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get preConfigured Routing Instructions. <p><strong>OperationId:</strong>getPreConfiguredRoutingInstructions</p>
     * Get pre-Configured Routing Instructions
     */
    async getPreConfiguredRoutingInstructionsRaw(requestParameters: GetPreConfiguredRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreConfiguredRoutingInstructions>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPreConfiguredRoutingInstructions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPreConfiguredRoutingInstructions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPreConfiguredRoutingInstructions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPreConfiguredRoutingInstructions.');
        }

        const queryParameters: any = {};

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.promotionCodes) {
            queryParameters['promotionCodes'] = requestParameters.promotionCodes;
        }

        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }

        if (requestParameters.guestIds) {
            queryParameters['guestIds'] = requestParameters.guestIds;
        }

        if (requestParameters.companyName !== undefined) {
            queryParameters['companyName'] = requestParameters.companyName;
        }

        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }

        if (requestParameters.groupName !== undefined) {
            queryParameters['groupName'] = requestParameters.groupName;
        }

        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }

        if (requestParameters.travelAgentName !== undefined) {
            queryParameters['travelAgentName'] = requestParameters.travelAgentName;
        }

        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }

        if (requestParameters.sourceName !== undefined) {
            queryParameters['sourceName'] = requestParameters.sourceName;
        }

        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }

        if (requestParameters.contactName !== undefined) {
            queryParameters['contactName'] = requestParameters.contactName;
        }

        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.billingContactName !== undefined) {
            queryParameters['billingContactName'] = requestParameters.billingContactName;
        }

        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }

        if (requestParameters.addresseeName !== undefined) {
            queryParameters['addresseeName'] = requestParameters.addresseeName;
        }

        if (requestParameters.addresseeIds) {
            queryParameters['addresseeIds'] = requestParameters.addresseeIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/preConfiguredRoutingInstructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreConfiguredRoutingInstructionsFromJSON(jsonValue));
    }

    /**
     * Get preConfigured Routing Instructions. <p><strong>OperationId:</strong>getPreConfiguredRoutingInstructions</p>
     * Get pre-Configured Routing Instructions
     */
    async getPreConfiguredRoutingInstructions(requestParameters: GetPreConfiguredRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreConfiguredRoutingInstructions> {
        const response = await this.getPreConfiguredRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    async getRateInfoRaw(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRateInfo.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRateInfo.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRateInfo.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRateInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }

        if (requestParameters.criteriaStartDate !== undefined) {
            queryParameters['criteriaStartDate'] = (requestParameters.criteriaStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.criteriaEndDate !== undefined) {
            queryParameters['criteriaEndDate'] = (requestParameters.criteriaEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.detailDate !== undefined) {
            queryParameters['detailDate'] = (requestParameters.detailDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.effectiveRateEnd) {
            queryParameters['effectiveRateEnd'] = requestParameters.effectiveRateEnd;
        }

        if (requestParameters.effectiveRateStart) {
            queryParameters['effectiveRateStart'] = requestParameters.effectiveRateStart;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/rateInfo`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve rate plan information including a breakdown of packages and taxes.<p><strong>OperationId:</strong>getRateInfo</p>
     * Get rate information
     */
    async getRateInfo(requestParameters: GetRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateInfo> {
        const response = await this.getRateInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will return all recently accessed Reservations. <p><strong>OperationId:</strong>getRecentlyAccessedReservations</p>
     * Get recently accessed Reservations
     */
    async getRecentlyAccessedReservationsRaw(requestParameters: GetRecentlyAccessedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedReservations>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRecentlyAccessedReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRecentlyAccessedReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRecentlyAccessedReservations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/recentlyAccessedReservations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecentlyAccessedReservationsFromJSON(jsonValue));
    }

    /**
     * This API will return all recently accessed Reservations. <p><strong>OperationId:</strong>getRecentlyAccessedReservations</p>
     * Get recently accessed Reservations
     */
    async getRecentlyAccessedReservations(requestParameters: GetRecentlyAccessedReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedReservations> {
        const response = await this.getRecentlyAccessedReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reprint Reservation tickets. <p><strong>OperationId:</strong>getReprintTickets</p>
     * Reprints Reservation tickets
     */
    async getReprintTicketsRaw(requestParameters: GetReprintTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReprintTickets.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReprintTickets.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReprintTickets.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReprintTickets.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReprintTickets.');
        }

        const queryParameters: any = {};

        if (requestParameters.ticketId !== undefined) {
            queryParameters['ticketId'] = requestParameters.ticketId;
        }

        if (requestParameters.ticketIdType !== undefined) {
            queryParameters['ticketIdType'] = requestParameters.ticketIdType;
        }

        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.reservationProductId !== undefined) {
            queryParameters['reservationProductId'] = requestParameters.reservationProductId;
        }

        if (requestParameters.reservationProductIdType !== undefined) {
            queryParameters['reservationProductIdType'] = requestParameters.reservationProductIdType;
        }

        if (requestParameters.ticketNumberId !== undefined) {
            queryParameters['ticketNumberId'] = requestParameters.ticketNumberId;
        }

        if (requestParameters.ticketNumberIdType !== undefined) {
            queryParameters['ticketNumberIdType'] = requestParameters.ticketNumberIdType;
        }

        if (requestParameters.ticketIssueDate) {
            queryParameters['ticketIssueDate'] = requestParameters.ticketIssueDate;
        }

        if (requestParameters.ticketConsumptionDate) {
            queryParameters['ticketConsumptionDate'] = requestParameters.ticketConsumptionDate;
        }

        if (requestParameters.ticketRateCode) {
            queryParameters['ticketRateCode'] = requestParameters.ticketRateCode;
        }

        if (requestParameters.ticketStatus) {
            queryParameters['ticketStatus'] = requestParameters.ticketStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/reprint`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketsFromJSON(jsonValue));
    }

    /**
     * You can use this API to reprint Reservation tickets. <p><strong>OperationId:</strong>getReprintTickets</p>
     * Reprints Reservation tickets
     */
    async getReprintTickets(requestParameters: GetReprintTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets> {
        const response = await this.getReprintTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    async getReservationRaw(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservation.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedActions) {
            queryParameters['allowedActions'] = requestParameters.allowedActions;
        }

        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve a reservation&apos;s detail such as guest&apos;s stay, arrival and departure dates, transportation, room and rate information, preferences, packages, and more using OPERA&apos;s reservationId.<p><strong>OperationId:</strong>getReservation</p>
     * Get reservation by ID
     */
    async getReservation(requestParameters: GetReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.getReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    async getReservationActivityLogRaw(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationActivityLog.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationActivityLog.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationActivityLog.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationActivityLog.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userByIdsUserId) {
            queryParameters['userByIdsUserId'] = requestParameters.userByIdsUserId;
        }

        if (requestParameters.userForIdsUserId) {
            queryParameters['userForIdsUserId'] = requestParameters.userForIdsUserId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogFromJSON(jsonValue));
    }

    /**
     * Use this API to get the activity log data of reservations being created and managed.<p><strong>OperationId:</strong>getReservationActivityLog</p>
     * Fetch reservation activity log
     */
    async getReservationActivityLog(requestParameters: GetReservationActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog> {
        const response = await this.getReservationActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reservation attachments <p><strong>OperationId:</strong>getReservationAttachments</p>
     * Get Reservation attachments
     */
    async getReservationAttachmentsRaw(requestParameters: GetReservationAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationAttachments>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservationAttachments.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationAttachments.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationAttachments.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationAttachments.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationAttachments.');
        }

        const queryParameters: any = {};

        if (requestParameters.webRegistrationCard !== undefined) {
            queryParameters['webRegistrationCard'] = requestParameters.webRegistrationCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/attachments`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationAttachmentsFromJSON(jsonValue));
    }

    /**
     * Get Reservation attachments <p><strong>OperationId:</strong>getReservationAttachments</p>
     * Get Reservation attachments
     */
    async getReservationAttachments(requestParameters: GetReservationAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationAttachments> {
        const response = await this.getReservationAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    async getReservationByExtIdRaw(requestParameters: GetReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling getReservationByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling getReservationByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationByExtId.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedActions) {
            queryParameters['allowedActions'] = requestParameters.allowedActions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     * Use this API to get a reservation using the external reference ID associated with the reservation such as a Central Reservation System confirmation number or booking engine confirmation number.<p><strong>OperationId:</strong>getReservationByExtId</p>
     * Get reservation by external ID
     */
    async getReservationByExtId(requestParameters: GetReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.getReservationByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Reservation excluded preferences. <p><strong>OperationId:</strong>getReservationExcludedPreferences</p>
     * Fetch Reservation excluded preferences
     */
    async getReservationExcludedPreferencesRaw(requestParameters: GetReservationExcludedPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationExcludedPreferences>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservationExcludedPreferences.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationExcludedPreferences.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationExcludedPreferences.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationExcludedPreferences.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationExcludedPreferences.');
        }

        const queryParameters: any = {};

        if (requestParameters.preferenceType !== undefined) {
            queryParameters['preferenceType'] = requestParameters.preferenceType;
        }

        if (requestParameters.preferenceCode !== undefined) {
            queryParameters['preferenceCode'] = requestParameters.preferenceCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/excludedPreferences`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationExcludedPreferencesFromJSON(jsonValue));
    }

    /**
     * Get the Reservation excluded preferences. <p><strong>OperationId:</strong>getReservationExcludedPreferences</p>
     * Fetch Reservation excluded preferences
     */
    async getReservationExcludedPreferences(requestParameters: GetReservationExcludedPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationExcludedPreferences> {
        const response = await this.getReservationExcludedPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reservation indicators. <p><strong>OperationId:</strong>getReservationIndicators</p>
     * Get Reservation indicators
     */
    async getReservationIndicatorsRaw(requestParameters: GetReservationIndicatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckReservationsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationIndicators.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationIndicators.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationIndicators.');
        }

        const queryParameters: any = {};

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.checkInstructions) {
            queryParameters['checkInstructions'] = requestParameters.checkInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations/indicators`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Get Reservation indicators. <p><strong>OperationId:</strong>getReservationIndicators</p>
     * Get Reservation indicators
     */
    async getReservationIndicators(requestParameters: GetReservationIndicatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckReservationsDetails> {
        const response = await this.getReservationIndicatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Guest locater for a Reservation. <p><strong>OperationId:</strong>getReservationLocators</p>
     * Fetch Reservation Guest Locator
     */
    async getReservationLocatorsRaw(requestParameters: GetReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLocators>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservationLocators.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationLocators.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationLocators.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationLocators.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationLocators.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationLocatorsFromJSON(jsonValue));
    }

    /**
     * Get the Guest locater for a Reservation. <p><strong>OperationId:</strong>getReservationLocators</p>
     * Fetch Reservation Guest Locator
     */
    async getReservationLocators(requestParameters: GetReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLocators> {
        const response = await this.getReservationLocatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    async getReservationPoliciesRaw(requestParameters: GetReservationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPolicies>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservationPolicies.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationPolicies.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationPolicies.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationPolicies.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationPolicies.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchDepositPolicies !== undefined) {
            queryParameters['fetchDepositPolicies'] = requestParameters.fetchDepositPolicies;
        }

        if (requestParameters.fetchCancellationPolicies !== undefined) {
            queryParameters['fetchCancellationPolicies'] = requestParameters.fetchCancellationPolicies;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/policies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPoliciesFromJSON(jsonValue));
    }

    /**
     * Use this API to get cancelation and deposit policies for a given reservation.<p><strong>OperationId:</strong>getReservationPolicies</p>
     * Get reservation cancel and deposit policies
     */
    async getReservationPolicies(requestParameters: GetReservationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPolicies> {
        const response = await this.getReservationPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve the preferences that exist on a reservation. <p><strong>OperationId:</strong>getReservationPreference</p>
     * Get Reservation Preferences
     */
    async getReservationPreferenceRaw(requestParameters: GetReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPreference>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservationPreference.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationPreference.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationPreference.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationPreference.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationPreference.');
        }

        const queryParameters: any = {};

        if (requestParameters.preferenceTypeCode) {
            queryParameters['preferenceTypeCode'] = requestParameters.preferenceTypeCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preferences`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPreferenceFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve the preferences that exist on a reservation. <p><strong>OperationId:</strong>getReservationPreference</p>
     * Get Reservation Preferences
     */
    async getReservationPreference(requestParameters: GetReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPreference> {
        const response = await this.getReservationPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    async getReservationUpsellInfoRaw(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationUpsellInfo>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservationUpsellInfo.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationUpsellInfo.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationUpsellInfo.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationUpsellInfo.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationUpsellInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationUpsellInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve the available upsell offers for a specific reservation. If no upsell options are configured for this hotel or available for this reservation, an appropriate error will be returned. <p><strong>OperationId:</strong>getReservationUpsellInfo</p>
     * Get available Upsell offers
     */
    async getReservationUpsellInfo(requestParameters: GetReservationUpsellInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationUpsellInfo> {
        const response = await this.getReservationUpsellInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    async getReservationsRaw(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservations.');
        }

        const queryParameters: any = {};

        if (requestParameters.recentlyAccessed !== undefined) {
            queryParameters['recentlyAccessed'] = requestParameters.recentlyAccessed;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.reservationIdList) {
            queryParameters['reservationIdList'] = requestParameters.reservationIdList;
        }

        if (requestParameters.confirmationNumberList) {
            queryParameters['confirmationNumberList'] = requestParameters.confirmationNumberList;
        }

        if (requestParameters.cancellationNumberList) {
            queryParameters['cancellationNumberList'] = requestParameters.cancellationNumberList;
        }

        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }

        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureEndDate !== undefined) {
            queryParameters['departureEndDate'] = (requestParameters.departureEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureStartDate !== undefined) {
            queryParameters['departureStartDate'] = (requestParameters.departureStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.expectedArrivalStartTime !== undefined) {
            queryParameters['expectedArrivalStartTime'] = requestParameters.expectedArrivalStartTime;
        }

        if (requestParameters.expectedArrivalEndTime !== undefined) {
            queryParameters['expectedArrivalEndTime'] = requestParameters.expectedArrivalEndTime;
        }

        if (requestParameters.expectedReturnEndTime !== undefined) {
            queryParameters['expectedReturnEndTime'] = requestParameters.expectedReturnEndTime;
        }

        if (requestParameters.expectedReturnStartTime !== undefined) {
            queryParameters['expectedReturnStartTime'] = requestParameters.expectedReturnStartTime;
        }

        if (requestParameters.companyNames) {
            queryParameters['companyNames'] = requestParameters.companyNames;
        }

        if (requestParameters.sourceNames) {
            queryParameters['sourceNames'] = requestParameters.sourceNames;
        }

        if (requestParameters.travelAgentNames) {
            queryParameters['travelAgentNames'] = requestParameters.travelAgentNames;
        }

        if (requestParameters.groupNames) {
            queryParameters['groupNames'] = requestParameters.groupNames;
        }

        if (requestParameters.travelAgentIds) {
            queryParameters['travelAgentIds'] = requestParameters.travelAgentIds;
        }

        if (requestParameters.companyIds) {
            queryParameters['companyIds'] = requestParameters.companyIds;
        }

        if (requestParameters.sourceIds) {
            queryParameters['sourceIds'] = requestParameters.sourceIds;
        }

        if (requestParameters.contactIds) {
            queryParameters['contactIds'] = requestParameters.contactIds;
        }

        if (requestParameters.groupIds) {
            queryParameters['groupIds'] = requestParameters.groupIds;
        }

        if (requestParameters.billingContactIds) {
            queryParameters['billingContactIds'] = requestParameters.billingContactIds;
        }

        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }

        if (requestParameters.membershipCardNumber !== undefined) {
            queryParameters['membershipCardNumber'] = requestParameters.membershipCardNumber;
        }

        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.anyVIPStatus !== undefined) {
            queryParameters['anyVIPStatus'] = requestParameters.anyVIPStatus;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.discountApplied !== undefined) {
            queryParameters['discountApplied'] = requestParameters.discountApplied;
        }

        if (requestParameters.user) {
            queryParameters['user'] = requestParameters.user;
        }

        if (requestParameters.createdBy !== undefined) {
            queryParameters['createdBy'] = requestParameters.createdBy;
        }

        if (requestParameters.cancelledByList) {
            queryParameters['cancelledByList'] = requestParameters.cancelledByList;
        }

        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = (requestParameters.cancelledOn as any).toISOString().substring(0,10);
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.excludeBlockReservations !== undefined) {
            queryParameters['excludeBlockReservations'] = requestParameters.excludeBlockReservations;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockIds) {
            queryParameters['blockIds'] = requestParameters.blockIds;
        }

        if (requestParameters.blockCodes) {
            queryParameters['blockCodes'] = requestParameters.blockCodes;
        }

        if (requestParameters.customReference !== undefined) {
            queryParameters['customReference'] = requestParameters.customReference;
        }

        if (requestParameters.recordLocator !== undefined) {
            queryParameters['recordLocator'] = requestParameters.recordLocator;
        }

        if (requestParameters.orderBy) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.roomAssignedOnly !== undefined) {
            queryParameters['roomAssignedOnly'] = requestParameters.roomAssignedOnly;
        }

        if (requestParameters.roomUnassignedOnly !== undefined) {
            queryParameters['roomUnassignedOnly'] = requestParameters.roomUnassignedOnly;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.roomSpecials) {
            queryParameters['roomSpecials'] = requestParameters.roomSpecials;
        }

        if (requestParameters.roomSmokingPreference !== undefined) {
            queryParameters['roomSmokingPreference'] = requestParameters.roomSmokingPreference;
        }

        if (requestParameters.roomFloorPreferences) {
            queryParameters['roomFloorPreferences'] = requestParameters.roomFloorPreferences;
        }

        if (requestParameters.housekeepingRoomStatuses) {
            queryParameters['housekeepingRoomStatuses'] = requestParameters.housekeepingRoomStatuses;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomRangeFrom !== undefined) {
            queryParameters['roomRangeFrom'] = requestParameters.roomRangeFrom;
        }

        if (requestParameters.roomRangeTo !== undefined) {
            queryParameters['roomRangeTo'] = requestParameters.roomRangeTo;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedReservationActions) {
            queryParameters['allowedReservationActions'] = requestParameters.allowedReservationActions;
        }

        if (requestParameters.allowPreRegistration !== undefined) {
            queryParameters['allowPreRegistration'] = requestParameters.allowPreRegistration;
        }

        if (requestParameters.hasDepositBalance !== undefined) {
            queryParameters['hasDepositBalance'] = requestParameters.hasDepositBalance;
        }

        if (requestParameters.hasOpenBalance !== undefined) {
            queryParameters['hasOpenBalance'] = requestParameters.hasOpenBalance;
        }

        if (requestParameters.hasOpenFolio !== undefined) {
            queryParameters['hasOpenFolio'] = requestParameters.hasOpenFolio;
        }

        if (requestParameters.includeScheduledCheckOut !== undefined) {
            queryParameters['includeScheduledCheckOut'] = requestParameters.includeScheduledCheckOut;
        }

        if (requestParameters.linkedOnly !== undefined) {
            queryParameters['linkedOnly'] = requestParameters.linkedOnly;
        }

        if (requestParameters.unlinkedOnly !== undefined) {
            queryParameters['unlinkedOnly'] = requestParameters.unlinkedOnly;
        }

        if (requestParameters.actualArrivals !== undefined) {
            queryParameters['actualArrivals'] = requestParameters.actualArrivals;
        }

        if (requestParameters.actualDepartures !== undefined) {
            queryParameters['actualDepartures'] = requestParameters.actualDepartures;
        }

        if (requestParameters.complimentaryReservations !== undefined) {
            queryParameters['complimentaryReservations'] = requestParameters.complimentaryReservations;
        }

        if (requestParameters.dayOfArrivalCancels !== undefined) {
            queryParameters['dayOfArrivalCancels'] = requestParameters.dayOfArrivalCancels;
        }

        if (requestParameters.dayUse !== undefined) {
            queryParameters['dayUse'] = requestParameters.dayUse;
        }

        if (requestParameters.earlyDepartures !== undefined) {
            queryParameters['earlyDepartures'] = requestParameters.earlyDepartures;
        }

        if (requestParameters.expectedArrivals !== undefined) {
            queryParameters['expectedArrivals'] = requestParameters.expectedArrivals;
        }

        if (requestParameters.expectedDepartures !== undefined) {
            queryParameters['expectedDepartures'] = requestParameters.expectedDepartures;
        }

        if (requestParameters.extendedStays !== undefined) {
            queryParameters['extendedStays'] = requestParameters.extendedStays;
        }

        if (requestParameters.houseUseReservations !== undefined) {
            queryParameters['houseUseReservations'] = requestParameters.houseUseReservations;
        }

        if (requestParameters.stayovers !== undefined) {
            queryParameters['stayovers'] = requestParameters.stayovers;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.roomRoutingId !== undefined) {
            queryParameters['roomRoutingId'] = requestParameters.roomRoutingId;
        }

        if (requestParameters.excludePseudoRoomReservations !== undefined) {
            queryParameters['excludePseudoRoomReservations'] = requestParameters.excludePseudoRoomReservations;
        }

        if (requestParameters.excludeReservationIds) {
            queryParameters['excludeReservationIds'] = requestParameters.excludeReservationIds;
        }

        if (requestParameters.excludeVIPStatusCodes) {
            queryParameters['excludeVIPStatusCodes'] = requestParameters.excludeVIPStatusCodes;
        }

        if (requestParameters.excludeSpecials) {
            queryParameters['excludeSpecials'] = requestParameters.excludeSpecials;
        }

        if (requestParameters.excludeFloorPreferences) {
            queryParameters['excludeFloorPreferences'] = requestParameters.excludeFloorPreferences;
        }

        if (requestParameters.excludeAdvanceCheckedIn !== undefined) {
            queryParameters['excludeAdvanceCheckedIn'] = requestParameters.excludeAdvanceCheckedIn;
        }

        if (requestParameters.excludeRoomFeatures) {
            queryParameters['excludeRoomFeatures'] = requestParameters.excludeRoomFeatures;
        }

        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }

        if (requestParameters.gamingBalanceFrom !== undefined) {
            queryParameters['gamingBalanceFrom'] = requestParameters.gamingBalanceFrom;
        }

        if (requestParameters.gamingBalanceTo !== undefined) {
            queryParameters['gamingBalanceTo'] = requestParameters.gamingBalanceTo;
        }

        if (requestParameters.compAccountingBalanceFrom !== undefined) {
            queryParameters['compAccountingBalanceFrom'] = requestParameters.compAccountingBalanceFrom;
        }

        if (requestParameters.compAccountingBalanceTo !== undefined) {
            queryParameters['compAccountingBalanceTo'] = requestParameters.compAccountingBalanceTo;
        }

        if (requestParameters.searchTypes) {
            queryParameters['searchTypes'] = requestParameters.searchTypes;
        }

        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }

        if (requestParameters.transportationCodes) {
            queryParameters['transportationCodes'] = requestParameters.transportationCodes;
        }

        if (requestParameters.roomReadyStatuses) {
            queryParameters['roomReadyStatuses'] = requestParameters.roomReadyStatuses;
        }

        if (requestParameters.checkoutMessageReceived !== undefined) {
            queryParameters['checkoutMessageReceived'] = requestParameters.checkoutMessageReceived;
        }

        if (requestParameters.optedForCommunication !== undefined) {
            queryParameters['optedForCommunication'] = requestParameters.optedForCommunication;
        }

        if (requestParameters.createdOn !== undefined) {
            queryParameters['createdOn'] = (requestParameters.createdOn as any).toISOString().substring(0,10);
        }

        if (requestParameters.stayOn !== undefined) {
            queryParameters['stayOn'] = (requestParameters.stayOn as any).toISOString().substring(0,10);
        }

        if (requestParameters.contactNames) {
            queryParameters['contactNames'] = requestParameters.contactNames;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * This API will allow a user to retrieve a list of reservations based on the search criteria specified in the request body. For example you can search for reservations using query parameters like first name, last name, arrival/departure date, external confirmation number. <p><strong>OperationId:</strong>getReservations</p>
     * Get Reservations for a hotel
     */
    async getReservations(requestParameters: GetReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsDetails> {
        const response = await this.getReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * <p>This operation fetches brief summary for the reservations and also supports the Global Parameter <strong>MAX ROWS FETCH COUNT</strong>.<br>By default this parameter is configured to support an overall fetch of <strong>5000</strong> Records in total, with maximum number of records that can be fetched at a time being <strong>200</strong> (limit). However, this parameter can be updated to support an overall fetch value being a valid number between <strong>1</strong> and <strong>10000</strong> with maximum number of records that can be fetched at a time being same i.e. <strong>200</strong> (limit).</p><p>Requests with an <strong>offset</strong> and <strong>limit</strong> sum exceeding the <strong>MAX ROWS FETCH COUNT</strong> configured would fail the request.</p> <p><strong>OperationId:</strong>getReservationsSummary</p>
     * Get brief summary for Reservations
     */
    async getReservationsSummaryRaw(requestParameters: GetReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsSummary>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationsSummary.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationsSummary.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationsSummary.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationsSummary.');
        }

        const queryParameters: any = {};

        if (requestParameters.advancedCheckedIn !== undefined) {
            queryParameters['advancedCheckedIn'] = requestParameters.advancedCheckedIn;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.preRegistered !== undefined) {
            queryParameters['preRegistered'] = requestParameters.preRegistered;
        }

        if (requestParameters.arrivalDate !== undefined) {
            queryParameters['arrivalDate'] = (requestParameters.arrivalDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureDate !== undefined) {
            queryParameters['departureDate'] = (requestParameters.departureDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = (requestParameters.createDateTime as any).toISOString().substring(0,10);
        }

        if (requestParameters.cancelledOn !== undefined) {
            queryParameters['cancelledOn'] = (requestParameters.cancelledOn as any).toISOString().substring(0,10);
        }

        if (requestParameters.folioClosedOn !== undefined) {
            queryParameters['folioClosedOn'] = (requestParameters.folioClosedOn as any).toISOString().substring(0,10);
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['companyId'] = requestParameters.companyId;
        }

        if (requestParameters.guestNameId !== undefined) {
            queryParameters['guestNameId'] = requestParameters.guestNameId;
        }

        if (requestParameters.reservationStatus !== undefined) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.confirmationNumber !== undefined) {
            queryParameters['confirmationNumber'] = requestParameters.confirmationNumber;
        }

        if (requestParameters.externalReferenceNumber !== undefined) {
            queryParameters['externalReferenceNumber'] = requestParameters.externalReferenceNumber;
        }

        if (requestParameters.cancellationNumber !== undefined) {
            queryParameters['cancellationNumber'] = requestParameters.cancellationNumber;
        }

        if (requestParameters.membershipNumber !== undefined) {
            queryParameters['membershipNumber'] = requestParameters.membershipNumber;
        }

        if (requestParameters.registeredCardNumber !== undefined) {
            queryParameters['registeredCardNumber'] = requestParameters.registeredCardNumber;
        }

        if (requestParameters.balance !== undefined) {
            queryParameters['balance'] = requestParameters.balance;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/summary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsSummaryFromJSON(jsonValue));
    }

    /**
     * <p>This operation fetches brief summary for the reservations and also supports the Global Parameter <strong>MAX ROWS FETCH COUNT</strong>.<br>By default this parameter is configured to support an overall fetch of <strong>5000</strong> Records in total, with maximum number of records that can be fetched at a time being <strong>200</strong> (limit). However, this parameter can be updated to support an overall fetch value being a valid number between <strong>1</strong> and <strong>10000</strong> with maximum number of records that can be fetched at a time being same i.e. <strong>200</strong> (limit).</p><p>Requests with an <strong>offset</strong> and <strong>limit</strong> sum exceeding the <strong>MAX ROWS FETCH COUNT</strong> configured would fail the request.</p> <p><strong>OperationId:</strong>getReservationsSummary</p>
     * Get brief summary for Reservations
     */
    async getReservationsSummary(requestParameters: GetReservationsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsSummary> {
        const response = await this.getReservationsSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reservations to share by profile id. <p><strong>OperationId:</strong>getReservationsToShareByProfileId</p>
     * Get Reservations to share 
     */
    async getReservationsToShareByProfileIdRaw(requestParameters: GetReservationsToShareByProfileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchReservations>> {
        if (requestParameters.profileIdtoShare === null || requestParameters.profileIdtoShare === undefined) {
            throw new runtime.RequiredError('profileIdtoShare','Required parameter requestParameters.profileIdtoShare was null or undefined when calling getReservationsToShareByProfileId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationsToShareByProfileId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationsToShareByProfileId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationsToShareByProfileId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationsToShareByProfileId.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.superSearch !== undefined) {
            queryParameters['superSearch'] = requestParameters.superSearch;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.membershipLevel) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileIdtoShare}/share`.replace(`{${"profileIdtoShare"}}`, encodeURIComponent(String(requestParameters.profileIdtoShare))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchReservationsFromJSON(jsonValue));
    }

    /**
     * Get Reservations to share by profile id. <p><strong>OperationId:</strong>getReservationsToShareByProfileId</p>
     * Get Reservations to share 
     */
    async getReservationsToShareByProfileId(requestParameters: GetReservationsToShareByProfileIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchReservations> {
        const response = await this.getReservationsToShareByProfileIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the reservation that can be shared with an existing reservation. <p><strong>OperationId:</strong>getReservationsToShareByReservationId</p>
     * Get Reservations to share by Reservation id
     */
    async getReservationsToShareByReservationIdRaw(requestParameters: GetReservationsToShareByReservationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchReservations>> {
        if (requestParameters.reservationIdtoShare === null || requestParameters.reservationIdtoShare === undefined) {
            throw new runtime.RequiredError('reservationIdtoShare','Required parameter requestParameters.reservationIdtoShare was null or undefined when calling getReservationsToShareByReservationId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationsToShareByReservationId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationsToShareByReservationId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationsToShareByReservationId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationsToShareByReservationId.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.superSearch !== undefined) {
            queryParameters['superSearch'] = requestParameters.superSearch;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.membershipLevel) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationIdtoShare}/share`.replace(`{${"reservationIdtoShare"}}`, encodeURIComponent(String(requestParameters.reservationIdtoShare))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchReservationsFromJSON(jsonValue));
    }

    /**
     * Fetch the reservation that can be shared with an existing reservation. <p><strong>OperationId:</strong>getReservationsToShareByReservationId</p>
     * Get Reservations to share by Reservation id
     */
    async getReservationsToShareByReservationId(requestParameters: GetReservationsToShareByReservationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchReservations> {
        const response = await this.getReservationsToShareByReservationIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>getReservedInventoryItems</p>
     * Get Reserved Inventory Items 
     */
    async getReservedInventoryItemsRaw(requestParameters: GetReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItems>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getReservedInventoryItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservedInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservedInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservedInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservedInventoryItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryItemsFromJSON(jsonValue));
    }

    /**
     * Get the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>getReservedInventoryItems</p>
     * Get Reserved Inventory Items 
     */
    async getReservedInventoryItems(requestParameters: GetReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItems> {
        const response = await this.getReservedInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the room calendar for a hotel. It fetches inventory detail per rooms, the reservations assigned for a selected date range in the past or future, scheduled Out of Order or Out of Service status, room description, room attributes, room features, connecting room, etc.<p><strong>OperationId:</strong>getRoomCalendar</p>
     * Get the room calendar
     */
    async getRoomCalendarRaw(requestParameters: GetRoomCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomCalendar>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomCalendar.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRoomCalendar.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRoomCalendar.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRoomCalendar.');
        }

        const queryParameters: any = {};

        if (requestParameters.advanceCheckedIn !== undefined) {
            queryParameters['advanceCheckedIn'] = requestParameters.advanceCheckedIn;
        }

        if (requestParameters.assignedRooms !== undefined) {
            queryParameters['assignedRooms'] = requestParameters.assignedRooms;
        }

        if (requestParameters.componentRooms !== undefined) {
            queryParameters['componentRooms'] = requestParameters.componentRooms;
        }

        if (requestParameters.connectingRoomsOnly !== undefined) {
            queryParameters['connectingRoomsOnly'] = requestParameters.connectingRoomsOnly;
        }

        if (requestParameters.dueOut !== undefined) {
            queryParameters['dueOut'] = requestParameters.dueOut;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.isSortDescending !== undefined) {
            queryParameters['isSortDescending'] = requestParameters.isSortDescending;
        }

        if (requestParameters.pageIndex !== undefined) {
            queryParameters['pageIndex'] = requestParameters.pageIndex;
        }

        if (requestParameters.partiallyAssignedRooms !== undefined) {
            queryParameters['partiallyAssignedRooms'] = requestParameters.partiallyAssignedRooms;
        }

        if (requestParameters.recordsPerPage !== undefined) {
            queryParameters['recordsPerPage'] = requestParameters.recordsPerPage;
        }

        if (requestParameters.roomConditions !== undefined) {
            queryParameters['roomConditions'] = requestParameters.roomConditions;
        }

        if (requestParameters.ownerRoomsOnly !== undefined) {
            queryParameters['ownerRoomsOnly'] = requestParameters.ownerRoomsOnly;
        }

        if (requestParameters.ownerExclusiveOnly !== undefined) {
            queryParameters['ownerExclusiveOnly'] = requestParameters.ownerExclusiveOnly;
        }

        if (requestParameters.sortingBy !== undefined) {
            queryParameters['sortingBy'] = requestParameters.sortingBy;
        }

        if (requestParameters.includeRoomMoveHistory !== undefined) {
            queryParameters['includeRoomMoveHistory'] = requestParameters.includeRoomMoveHistory;
        }

        if (requestParameters.includeComponentRoomBlockOutDates !== undefined) {
            queryParameters['includeComponentRoomBlockOutDates'] = requestParameters.includeComponentRoomBlockOutDates;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.unassignedRooms !== undefined) {
            queryParameters['unassignedRooms'] = requestParameters.unassignedRooms;
        }

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.floor) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.roomFeature) {
            queryParameters['roomFeature'] = requestParameters.roomFeature;
        }

        if (requestParameters.roomStatus) {
            queryParameters['roomStatus'] = requestParameters.roomStatus;
        }

        if (requestParameters.smokingPreference) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }

        if (requestParameters.bedType) {
            queryParameters['bedType'] = requestParameters.bedType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomCalendar`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomCalendarFromJSON(jsonValue));
    }

    /**
     * Use this API to get the room calendar for a hotel. It fetches inventory detail per rooms, the reservations assigned for a selected date range in the past or future, scheduled Out of Order or Out of Service status, room description, room attributes, room features, connecting room, etc.<p><strong>OperationId:</strong>getRoomCalendar</p>
     * Get the room calendar
     */
    async getRoomCalendar(requestParameters: GetRoomCalendarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomCalendar> {
        const response = await this.getRoomCalendarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch a reservation\'s routing instructions. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructionsRaw(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingInstructions>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getRoutingInstructions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoutingInstructions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRoutingInstructions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRoutingInstructions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRoutingInstructions.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeWindowRouting !== undefined) {
            queryParameters['includeWindowRouting'] = requestParameters.includeWindowRouting;
        }

        if (requestParameters.includeRoomRouting !== undefined) {
            queryParameters['includeRoomRouting'] = requestParameters.includeRoomRouting;
        }

        if (requestParameters.includeCompRouting !== undefined) {
            queryParameters['includeCompRouting'] = requestParameters.includeCompRouting;
        }

        if (requestParameters.includeCompRoutingRequests !== undefined) {
            queryParameters['includeCompRoutingRequests'] = requestParameters.includeCompRoutingRequests;
        }

        if (requestParameters.effectiveOn !== undefined) {
            queryParameters['effectiveOn'] = (requestParameters.effectiveOn as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingInstructionsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch a reservation\'s routing instructions. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructions(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingInstructions> {
        const response = await this.getRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will get the script for your property. <p><strong>OperationId:</strong>getScript</p>
     * Get a script
     */
    async getScriptRaw(requestParameters: GetScriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Script>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getScript.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getScript.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getScript.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getScript.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.scriptType !== undefined) {
            queryParameters['scriptType'] = requestParameters.scriptType;
        }

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdType) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/script`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptFromJSON(jsonValue));
    }

    /**
     * This API will get the script for your property. <p><strong>OperationId:</strong>getScript</p>
     * Get a script
     */
    async getScript(requestParameters: GetScriptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Script> {
        const response = await this.getScriptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the existing sell message configuration for a property. <p><strong>OperationId:</strong>getSellMessageConfig</p>
     * Get sell messages 
     */
    async getSellMessageConfigRaw(requestParameters: GetSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchSellMessageConfig>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getSellMessageConfig.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSellMessageConfig.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSellMessageConfig.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSellMessageConfig.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.message !== undefined) {
            queryParameters['message'] = requestParameters.message;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.blockId) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdType) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.blockCode !== undefined) {
            queryParameters['blockCode'] = requestParameters.blockCode;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }

        if (requestParameters.displayDate !== undefined) {
            queryParameters['displayDate'] = (requestParameters.displayDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchSellMessageConfigFromJSON(jsonValue));
    }

    /**
     * Fetch the existing sell message configuration for a property. <p><strong>OperationId:</strong>getSellMessageConfig</p>
     * Get sell messages 
     */
    async getSellMessageConfig(requestParameters: GetSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchSellMessageConfig> {
        const response = await this.getSellMessageConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the existing sell message configuration. <p><strong>OperationId:</strong>getSellMessageConfigByChain</p>
     * Get sell messages by chain
     */
    async getSellMessageConfigByChainRaw(requestParameters: GetSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchSellMessageConfig>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSellMessageConfigByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSellMessageConfigByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSellMessageConfigByChain.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.message !== undefined) {
            queryParameters['message'] = requestParameters.message;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.blockId) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdType) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.blockCode !== undefined) {
            queryParameters['blockCode'] = requestParameters.blockCode;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.chainId !== undefined) {
            queryParameters['chainId'] = requestParameters.chainId;
        }

        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }

        if (requestParameters.displayDate !== undefined) {
            queryParameters['displayDate'] = (requestParameters.displayDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sellMessages/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchSellMessageConfigFromJSON(jsonValue));
    }

    /**
     * Fetch the existing sell message configuration. <p><strong>OperationId:</strong>getSellMessageConfigByChain</p>
     * Get sell messages by chain
     */
    async getSellMessageConfigByChain(requestParameters: GetSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchSellMessageConfig> {
        const response = await this.getSellMessageConfigByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the configured sell messages for a property. <p><strong>OperationId:</strong>getSellMessages</p>
     * Get sell messages
     */
    async getSellMessagesRaw(requestParameters: GetSellMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellMessages>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSellMessages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSellMessages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSellMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.criteriaId !== undefined) {
            queryParameters['criteriaId'] = requestParameters.criteriaId;
        }

        if (requestParameters.criteriaIdType !== undefined) {
            queryParameters['criteriaIdType'] = requestParameters.criteriaIdType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.stickyFlagYn !== undefined) {
            queryParameters['stickyFlagYn'] = requestParameters.stickyFlagYn;
        }

        if (requestParameters.criteriaType !== undefined) {
            queryParameters['criteriaType'] = requestParameters.criteriaType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.usedInModule !== undefined) {
            queryParameters['usedInModule'] = requestParameters.usedInModule;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sellMessages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellMessagesFromJSON(jsonValue));
    }

    /**
     * Fetch the configured sell messages for a property. <p><strong>OperationId:</strong>getSellMessages</p>
     * Get sell messages
     */
    async getSellMessages(requestParameters: GetSellMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellMessages> {
        const response = await this.getSellMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservations</p>
     * Get share Reservations
     */
    async getShareReservationsRaw(requestParameters: GetShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareReservations>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getShareReservations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getShareReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getShareReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getShareReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getShareReservations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareReservationsFromJSON(jsonValue));
    }

    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservations</p>
     * Get share Reservations
     */
    async getShareReservations(requestParameters: GetShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareReservations> {
        const response = await this.getShareReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservationsByExtId</p>
     * Get share Reservations
     */
    async getShareReservationsByExtIdRaw(requestParameters: GetShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareReservations>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling getShareReservationsByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling getShareReservationsByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getShareReservationsByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getShareReservationsByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getShareReservationsByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getShareReservationsByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareReservationsFromJSON(jsonValue));
    }

    /**
     * This API can be used to retrieve the share reservations that exist on a reservation. <p><strong>OperationId:</strong>getShareReservationsByExtId</p>
     * Get share Reservations
     */
    async getShareReservationsByExtId(requestParameters: GetShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareReservations> {
        const response = await this.getShareReservationsByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get tickets for a reservation. <p><strong>OperationId:</strong>getTickets</p>
     * Get tickets
     */
    async getTicketsRaw(requestParameters: GetTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getTickets.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTickets.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTickets.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTickets.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTickets.');
        }

        const queryParameters: any = {};

        if (requestParameters.packageCode !== undefined) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.retrieveIssuedOnly !== undefined) {
            queryParameters['retrieveIssuedOnly'] = requestParameters.retrieveIssuedOnly;
        }

        if (requestParameters.retrieveNotIssuedOnly !== undefined) {
            queryParameters['retrieveNotIssuedOnly'] = requestParameters.retrieveNotIssuedOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketsFromJSON(jsonValue));
    }

    /**
     * Get tickets for a reservation. <p><strong>OperationId:</strong>getTickets</p>
     * Get tickets
     */
    async getTickets(requestParameters: GetTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets> {
        const response = await this.getTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to perform a Inquiry for Reservation tickets. <p><strong>OperationId:</strong>getTicketsInquiry</p>
     * Inquiry for Reservation tickets
     */
    async getTicketsInquiryRaw(requestParameters: GetTicketsInquiryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getTicketsInquiry.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTicketsInquiry.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTicketsInquiry.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTicketsInquiry.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTicketsInquiry.');
        }

        const queryParameters: any = {};

        if (requestParameters.ticketId !== undefined) {
            queryParameters['ticketId'] = requestParameters.ticketId;
        }

        if (requestParameters.ticketIdType !== undefined) {
            queryParameters['ticketIdType'] = requestParameters.ticketIdType;
        }

        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.reservationProductId !== undefined) {
            queryParameters['reservationProductId'] = requestParameters.reservationProductId;
        }

        if (requestParameters.reservationProductIdType !== undefined) {
            queryParameters['reservationProductIdType'] = requestParameters.reservationProductIdType;
        }

        if (requestParameters.ticketNumberId !== undefined) {
            queryParameters['ticketNumberId'] = requestParameters.ticketNumberId;
        }

        if (requestParameters.ticketNumberIdType !== undefined) {
            queryParameters['ticketNumberIdType'] = requestParameters.ticketNumberIdType;
        }

        if (requestParameters.ticketIssueDate) {
            queryParameters['ticketIssueDate'] = requestParameters.ticketIssueDate;
        }

        if (requestParameters.ticketConsumptionDate) {
            queryParameters['ticketConsumptionDate'] = requestParameters.ticketConsumptionDate;
        }

        if (requestParameters.ticketRateCode) {
            queryParameters['ticketRateCode'] = requestParameters.ticketRateCode;
        }

        if (requestParameters.ticketStatus) {
            queryParameters['ticketStatus'] = requestParameters.ticketStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/inquiry`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketsFromJSON(jsonValue));
    }

    /**
     * You can use this API to perform a Inquiry for Reservation tickets. <p><strong>OperationId:</strong>getTicketsInquiry</p>
     * Inquiry for Reservation tickets
     */
    async getTicketsInquiry(requestParameters: GetTicketsInquiryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets> {
        const response = await this.getTicketsInquiryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get traces for a Reservation. <p><strong>OperationId:</strong>getTracesByReservation</p>
     * Get traces for a Reservation
     */
    async getTracesByReservationRaw(requestParameters: GetTracesByReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Traces>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getTracesByReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTracesByReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTracesByReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTracesByReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTracesByReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/traces`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TracesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get traces for a Reservation. <p><strong>OperationId:</strong>getTracesByReservation</p>
     * Get traces for a Reservation
     */
    async getTracesByReservation(requestParameters: GetTracesByReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Traces> {
        const response = await this.getTracesByReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will fetch the traces for a Room. <p><strong>OperationId:</strong>getTracesByRoom</p>
     * Get traces for a Room
     */
    async getTracesByRoomRaw(requestParameters: GetTracesByRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Traces>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling getTracesByRoom.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTracesByRoom.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTracesByRoom.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTracesByRoom.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTracesByRoom.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/traces`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TracesFromJSON(jsonValue));
    }

    /**
     * This API will fetch the traces for a Room. <p><strong>OperationId:</strong>getTracesByRoom</p>
     * Get traces for a Room
     */
    async getTracesByRoom(requestParameters: GetTracesByRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Traces> {
        const response = await this.getTracesByRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Transaction Diversions. <p><strong>OperationId:</strong>getTransactionDiversions</p>
     * Get Transaction Diversions 
     */
    async getTransactionDiversionsRaw(requestParameters: GetTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDiversions>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getTransactionDiversions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTransactionDiversions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTransactionDiversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTransactionDiversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTransactionDiversions.');
        }

        const queryParameters: any = {};

        if (requestParameters.transactionDiversionCodes) {
            queryParameters['transactionDiversionCodes'] = requestParameters.transactionDiversionCodes;
        }

        if (requestParameters.includeDailyDetails !== undefined) {
            queryParameters['includeDailyDetails'] = requestParameters.includeDailyDetails;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDiversionsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Transaction Diversions. <p><strong>OperationId:</strong>getTransactionDiversions</p>
     * Get Transaction Diversions 
     */
    async getTransactionDiversions(requestParameters: GetTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDiversions> {
        const response = await this.getTransactionDiversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch Reservations Eligible for an Upgrade. <p><strong>OperationId:</strong>getUpgradeEligibilityReservations</p>
     * Fetch Reservations Eligible for an Upgrade
     */
    async getUpgradeEligibilityReservationsRaw(requestParameters: GetUpgradeEligibilityReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpgradeEligibilityReservations>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getUpgradeEligibilityReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getUpgradeEligibilityReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getUpgradeEligibilityReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getUpgradeEligibilityReservations.');
        }

        const queryParameters: any = {};

        if (requestParameters.arrivalEndDate !== undefined) {
            queryParameters['arrivalEndDate'] = (requestParameters.arrivalEndDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalStartDate !== undefined) {
            queryParameters['arrivalStartDate'] = (requestParameters.arrivalStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.externalReferenceType !== undefined) {
            queryParameters['externalReferenceType'] = requestParameters.externalReferenceType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upgradeEligibleReservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpgradeEligibilityReservationsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch Reservations Eligible for an Upgrade. <p><strong>OperationId:</strong>getUpgradeEligibilityReservations</p>
     * Fetch Reservations Eligible for an Upgrade
     */
    async getUpgradeEligibilityReservations(requestParameters: GetUpgradeEligibilityReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpgradeEligibilityReservations> {
        const response = await this.getUpgradeEligibilityReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to merge multiple reservations. <p><strong>OperationId:</strong>mergeReservations</p>
     * Merge multiple Reservations
     */
    async mergeReservationsRaw(requestParameters: MergeReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergeReservationsStatus>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling mergeReservations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling mergeReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling mergeReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling mergeReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling mergeReservations.');
        }

        if (requestParameters.reservationsToMerge === null || requestParameters.reservationsToMerge === undefined) {
            throw new runtime.RequiredError('reservationsToMerge','Required parameter requestParameters.reservationsToMerge was null or undefined when calling mergeReservations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/mergeReservations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationsToMergeToJSON(requestParameters.reservationsToMerge),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MergeReservationsStatusFromJSON(jsonValue));
    }

    /**
     * Use this API to merge multiple reservations. <p><strong>OperationId:</strong>mergeReservations</p>
     * Merge multiple Reservations
     */
    async mergeReservations(requestParameters: MergeReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergeReservationsStatus> {
        const response = await this.mergeReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Break Reservation lock on a reservation. <p><strong>OperationId:</strong>postBreakReservationLock</p>
     * Break Reservation lock
     */
    async postBreakReservationLockRaw(requestParameters: PostBreakReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postBreakReservationLock.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postBreakReservationLock.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postBreakReservationLock.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postBreakReservationLock.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postBreakReservationLock.');
        }

        if (requestParameters.reservationLock === null || requestParameters.reservationLock === undefined) {
            throw new runtime.RequiredError('reservationLock','Required parameter requestParameters.reservationLock was null or undefined when calling postBreakReservationLock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/locks/break`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationLockToJSON(requestParameters.reservationLock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Break Reservation lock on a reservation. <p><strong>OperationId:</strong>postBreakReservationLock</p>
     * Break Reservation lock
     */
    async postBreakReservationLock(requestParameters: PostBreakReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBreakReservationLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or updates multiple alerts for multiple reservations in bulk. <p><strong>OperationId:</strong>postBulkReservationAlerts</p>
     * Create Bulk Reservation Alerts
     */
    async postBulkReservationAlertsRaw(requestParameters: PostBulkReservationAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postBulkReservationAlerts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postBulkReservationAlerts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postBulkReservationAlerts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postBulkReservationAlerts.');
        }

        if (requestParameters.reservationAlerts === null || requestParameters.reservationAlerts === undefined) {
            throw new runtime.RequiredError('reservationAlerts','Required parameter requestParameters.reservationAlerts was null or undefined when calling postBulkReservationAlerts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/alerts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationAlertsToJSON(requestParameters.reservationAlerts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create or updates multiple alerts for multiple reservations in bulk. <p><strong>OperationId:</strong>postBulkReservationAlerts</p>
     * Create Bulk Reservation Alerts
     */
    async postBulkReservationAlerts(requestParameters: PostBulkReservationAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBulkReservationAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    async postCallRaw(requestParameters: PostCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegisterCall>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCall.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCall.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCall.');
        }

        if (requestParameters.registerCall === null || requestParameters.registerCall === undefined) {
            throw new runtime.RequiredError('registerCall','Required parameter requestParameters.registerCall was null or undefined when calling postCall.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/calls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterCallToJSON(requestParameters.registerCall),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegisterCallFromJSON(jsonValue));
    }

    /**
     * Use this API to request a new call or make updates to an existing call.<p><strong>OperationId:</strong>postCall</p>
     * Register calls
     */
    async postCall(requestParameters: PostCallRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegisterCall> {
        const response = await this.postCallRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    async postCancelReservationRaw(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postCancelReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCancelReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCancelReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCancelReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCancelReservation.');
        }

        if (requestParameters.cancelReservation === null || requestParameters.cancelReservation === undefined) {
            throw new runtime.RequiredError('cancelReservation','Required parameter requestParameters.cancelReservation was null or undefined when calling postCancelReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCancelReservationRequestToJSON(requestParameters.cancelReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservation</p>
     * Cancel Reservation by ID
     */
    async postCancelReservation(requestParameters: PostCancelReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails> {
        const response = await this.postCancelReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservationByExtId</p>
     * Cancel Reservation by ID
     */
    async postCancelReservationByExtIdRaw(requestParameters: PostCancelReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling postCancelReservationByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling postCancelReservationByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCancelReservationByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCancelReservationByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCancelReservationByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCancelReservationByExtId.');
        }

        if (requestParameters.cancelReservation === null || requestParameters.cancelReservation === undefined) {
            throw new runtime.RequiredError('cancelReservation','Required parameter requestParameters.cancelReservation was null or undefined when calling postCancelReservationByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/cancellations`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelReservationToJSON(requestParameters.cancelReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this if a guest would like to cancel their reservation.  You will receive a cancellation number in the response. <p><strong>OperationId:</strong>postCancelReservationByExtId</p>
     * Cancel Reservation by ID
     */
    async postCancelReservationByExtId(requestParameters: PostCancelReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails> {
        const response = await this.postCancelReservationByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to  cancel multiple reservations. <p><strong>OperationId:</strong>postCancelReservations</p>
     * Cancel Reservations 
     */
    async postCancelReservationsRaw(requestParameters: PostCancelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCancelReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCancelReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCancelReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCancelReservations.');
        }

        if (requestParameters.cancelReservations === null || requestParameters.cancelReservations === undefined) {
            throw new runtime.RequiredError('cancelReservations','Required parameter requestParameters.cancelReservations was null or undefined when calling postCancelReservations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/cancellations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelReservationsToJSON(requestParameters.cancelReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to  cancel multiple reservations. <p><strong>OperationId:</strong>postCancelReservations</p>
     * Cancel Reservations 
     */
    async postCancelReservations(requestParameters: PostCancelReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCancelReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to cancel reservations including multiple share reservations with single request. You will receive cancellation numbers in the response. <p><strong>OperationId:</strong>postCancelShareReservation</p>
     * Cancel reservations
     */
    async postCancelShareReservationRaw(requestParameters: PostCancelShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelReservationDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCancelShareReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCancelShareReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCancelShareReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCancelShareReservation.');
        }

        if (requestParameters.cancelReservation === null || requestParameters.cancelReservation === undefined) {
            throw new runtime.RequiredError('cancelReservation','Required parameter requestParameters.cancelReservation was null or undefined when calling postCancelShareReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/reservationCancellations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelReservationToJSON(requestParameters.cancelReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to cancel reservations including multiple share reservations with single request. You will receive cancellation numbers in the response. <p><strong>OperationId:</strong>postCancelShareReservation</p>
     * Cancel reservations
     */
    async postCancelShareReservation(requestParameters: PostCancelShareReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelReservationDetails> {
        const response = await this.postCancelShareReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new cancellation policy for a property. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create a Cancellation policy
     */
    async postCancellationPolicyRaw(requestParameters: PostCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postCancellationPolicy.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCancellationPolicy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCancellationPolicy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCancellationPolicy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCancellationPolicy.');
        }

        if (requestParameters.reservationCancellationPolicyCriteria === null || requestParameters.reservationCancellationPolicyCriteria === undefined) {
            throw new runtime.RequiredError('reservationCancellationPolicyCriteria','Required parameter requestParameters.reservationCancellationPolicyCriteria was null or undefined when calling postCancellationPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationCancellationPolicyCriteriaToJSON(requestParameters.reservationCancellationPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new cancellation policy for a property. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create a Cancellation policy
     */
    async postCancellationPolicy(requestParameters: PostCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsRaw(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postCombineShareReservations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCombineShareReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCombineShareReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCombineShareReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCombineShareReservations.');
        }

        if (requestParameters.combineShareReservations === null || requestParameters.combineShareReservations === undefined) {
            throw new runtime.RequiredError('combineShareReservations','Required parameter requestParameters.combineShareReservations was null or undefined when calling postCombineShareReservations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/shares`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CombineShareReservationsToJSON(requestParameters.combineShareReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombineShareReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservations</p>
     * Combine Share Reservations
     */
    async postCombineShareReservations(requestParameters: PostCombineShareReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails> {
        const response = await this.postCombineShareReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsByExtIdRaw(requestParameters: PostCombineShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareReservationsDetails>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling postCombineShareReservationsByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling postCombineShareReservationsByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCombineShareReservationsByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCombineShareReservationsByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCombineShareReservationsByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCombineShareReservationsByExtId.');
        }

        if (requestParameters.combineShareReservations === null || requestParameters.combineShareReservations === undefined) {
            throw new runtime.RequiredError('combineShareReservations','Required parameter requestParameters.combineShareReservations was null or undefined when calling postCombineShareReservationsByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/shares`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CombineShareReservationsToJSON(requestParameters.combineShareReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombineShareReservationsDetailsFromJSON(jsonValue));
    }

    /**
     * Combine share reservation for a given reservation id <p><strong>OperationId:</strong>postCombineShareReservationsByExtId</p>
     * Combine Share Reservations
     */
    async postCombineShareReservationsByExtId(requestParameters: PostCombineShareReservationsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareReservationsDetails> {
        const response = await this.postCombineShareReservationsByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a confirmation letter for a property. <p><strong>OperationId:</strong>postConfirmationLetters</p>
     * Create the confirmation letters
     */
    async postConfirmationLettersRaw(requestParameters: PostConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfirmationLettersDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postConfirmationLetters.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postConfirmationLetters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postConfirmationLetters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postConfirmationLetters.');
        }

        if (requestParameters.confirmationLetters === null || requestParameters.confirmationLetters === undefined) {
            throw new runtime.RequiredError('confirmationLetters','Required parameter requestParameters.confirmationLetters was null or undefined when calling postConfirmationLetters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/confirmationLetters`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmationLettersToJSON(requestParameters.confirmationLetters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfirmationLettersDetailsFromJSON(jsonValue));
    }

    /**
     * Create a confirmation letter for a property. <p><strong>OperationId:</strong>postConfirmationLetters</p>
     * Create the confirmation letters
     */
    async postConfirmationLetters(requestParameters: PostConfirmationLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfirmationLettersDetails> {
        const response = await this.postConfirmationLettersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    async postDepositPolicyRaw(requestParameters: PostDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postDepositPolicy.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postDepositPolicy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postDepositPolicy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postDepositPolicy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postDepositPolicy.');
        }

        if (requestParameters.reservationDepositPolicyCriteria === null || requestParameters.reservationDepositPolicyCriteria === undefined) {
            throw new runtime.RequiredError('reservationDepositPolicyCriteria','Required parameter requestParameters.reservationDepositPolicyCriteria was null or undefined when calling postDepositPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationDepositPolicyCriteriaToJSON(requestParameters.reservationDepositPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create deposit policy for a property. This policy can then be used for reservations. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy
     */
    async postDepositPolicy(requestParameters: PostDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create the Reservation Ecoupons. <p><strong>OperationId:</strong>postECoupons</p>
     * Create Reservation ECoupon
     */
    async postECouponsRaw(requestParameters: PostECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postECoupons.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postECoupons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postECoupons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postECoupons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postECoupons.');
        }

        if (requestParameters.eCouponsInfo === null || requestParameters.eCouponsInfo === undefined) {
            throw new runtime.RequiredError('eCouponsInfo','Required parameter requestParameters.eCouponsInfo was null or undefined when calling postECoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECouponsInfoToJSON(requestParameters.eCouponsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create the Reservation Ecoupons. <p><strong>OperationId:</strong>postECoupons</p>
     * Create Reservation ECoupon
     */
    async postECoupons(requestParameters: PostECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postECouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create guest message for a guest reservation. <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create guest messages
     */
    async postGuestMessagesRaw(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestMessagesDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postGuestMessages.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postGuestMessages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postGuestMessages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postGuestMessages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postGuestMessages.');
        }

        if (requestParameters.createGuestMessages === null || requestParameters.createGuestMessages === undefined) {
            throw new runtime.RequiredError('createGuestMessages','Required parameter requestParameters.createGuestMessages was null or undefined when calling postGuestMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGuestMessagesToJSON(requestParameters.createGuestMessages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestMessagesDetailsFromJSON(jsonValue));
    }

    /**
     * Create guest message for a guest reservation. <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create guest messages
     */
    async postGuestMessages(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestMessagesDetails> {
        const response = await this.postGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to issue Reservation tickets. <p><strong>OperationId:</strong>postIssueTickets</p>
     * Issue Reservation tickets
     */
    async postIssueTicketsRaw(requestParameters: PostIssueTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postIssueTickets.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postIssueTickets.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postIssueTickets.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postIssueTickets.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postIssueTickets.');
        }

        if (requestParameters.ticketsInfo === null || requestParameters.ticketsInfo === undefined) {
            throw new runtime.RequiredError('ticketsInfo','Required parameter requestParameters.ticketsInfo was null or undefined when calling postIssueTickets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets/issue`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketsInfoToJSON(requestParameters.ticketsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to issue Reservation tickets. <p><strong>OperationId:</strong>postIssueTickets</p>
     * Issue Reservation tickets
     */
    async postIssueTickets(requestParameters: PostIssueTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postIssueTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a master account for a reservation. <p><strong>OperationId:</strong>postMasterAccount</p>
     * Create a Master Account
     */
    async postMasterAccountRaw(requestParameters: PostMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postMasterAccount.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postMasterAccount.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMasterAccount.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMasterAccount.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMasterAccount.');
        }

        if (requestParameters.masterAccount === null || requestParameters.masterAccount === undefined) {
            throw new runtime.RequiredError('masterAccount','Required parameter requestParameters.masterAccount was null or undefined when calling postMasterAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/masterAccount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MasterAccountToJSON(requestParameters.masterAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a master account for a reservation. <p><strong>OperationId:</strong>postMasterAccount</p>
     * Create a Master Account
     */
    async postMasterAccount(requestParameters: PostMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMasterAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add a payment method to a reservation. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Create a payment method 
     */
    async postPaymentMethodsRaw(requestParameters: PostPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postPaymentMethods.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPaymentMethods.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postPaymentMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postPaymentMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postPaymentMethods.');
        }

        if (requestParameters.reservationPaymentMethods === null || requestParameters.reservationPaymentMethods === undefined) {
            throw new runtime.RequiredError('reservationPaymentMethods','Required parameter requestParameters.reservationPaymentMethods was null or undefined when calling postPaymentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationPaymentMethodsToJSON(requestParameters.reservationPaymentMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add a payment method to a reservation. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Create a payment method 
     */
    async postPaymentMethods(requestParameters: PostPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    async postPreCheckInReservationRaw(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postPreCheckInReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPreCheckInReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postPreCheckInReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postPreCheckInReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postPreCheckInReservation.');
        }

        if (requestParameters.preCheckInReservation === null || requestParameters.preCheckInReservation === undefined) {
            throw new runtime.RequiredError('preCheckInReservation','Required parameter requestParameters.preCheckInReservation was null or undefined when calling postPreCheckInReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preCheckIn`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPreCheckInReservationRequestToJSON(requestParameters.preCheckInReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to set a reservation as a pre-registered guest.  The API request requires the guests confirmation number and you can optionally include arrival time.  The behavior of the API will be dependent upon the Pre-registration rules configured for the hotel in OPERA Cloud administration. <p><strong>OperationId:</strong>postPreCheckInReservation</p>
     * Pre-Checkin a Reservation
     */
    async postPreCheckInReservation(requestParameters: PostPreCheckInReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPreCheckInReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    async postReservationRaw(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateReservationType>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservation.');
        }

        if (requestParameters.createReservation === null || requestParameters.createReservation === undefined) {
            throw new runtime.RequiredError('createReservation','Required parameter requestParameters.createReservation was null or undefined when calling postReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReservationRequestToJSON(requestParameters.createReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateReservationTypeFromJSON(jsonValue));
    }

    /**
     * Use this to create a new reservation for a hA12:F24otel.  Generally, you would search for a hotel\'s availability and rates before proceeding to use postReservation.  There are many fields in postReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postReservation. <p><strong>OperationId:</strong>postReservation</p>
     * Create Reservation
     */
    async postReservation(requestParameters: PostReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateReservationType> {
        const response = await this.postReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    async postReservationByBlockRaw(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling postReservationByBlock.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationByBlock.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationByBlock.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationByBlock.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationByBlock.');
        }

        if (requestParameters.createReservation === null || requestParameters.createReservation === undefined) {
            throw new runtime.RequiredError('createReservation','Required parameter requestParameters.createReservation was null or undefined when calling postReservationByBlock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/reservations`.replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReservationByBlockRequestToJSON(requestParameters.createReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to create a new reservation for a block, you must know the block Code to create this reservation.  In order to post a successful block reservation, please ensure you use the ListOfValues API\'s to know the hotel\'s codes; such as Address Type, Country Code,  Titles, preferenceCodes etc. <p><strong>OperationId:</strong>postReservationByBlock</p>
     * Create Reservation for a Block
     */
    async postReservationByBlock(requestParameters: PostReservationByBlockOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationByBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attach a certificate to Reservation. <p><strong>OperationId:</strong>postReservationCertificate</p>
     * Attach Certificate
     */
    async postReservationCertificateRaw(requestParameters: PostReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationCertificate.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationCertificate.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationCertificate.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationCertificate.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationCertificate.');
        }

        if (requestParameters.attachCertificate === null || requestParameters.attachCertificate === undefined) {
            throw new runtime.RequiredError('attachCertificate','Required parameter requestParameters.attachCertificate was null or undefined when calling postReservationCertificate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/certificates`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AttachCertificateToJSON(requestParameters.attachCertificate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Attach a certificate to Reservation. <p><strong>OperationId:</strong>postReservationCertificate</p>
     * Attach Certificate
     */
    async postReservationCertificate(requestParameters: PostReservationCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy a Reservation. <p><strong>OperationId:</strong>postReservationCopy</p>
     * Copy a Reservation
     */
    async postReservationCopyRaw(requestParameters: PostReservationCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationCopy.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationCopy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationCopy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationCopy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationCopy.');
        }

        if (requestParameters.copyReservation === null || requestParameters.copyReservation === undefined) {
            throw new runtime.RequiredError('copyReservation','Required parameter requestParameters.copyReservation was null or undefined when calling postReservationCopy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/copy`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopyReservationToJSON(requestParameters.copyReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy a Reservation. <p><strong>OperationId:</strong>postReservationCopy</p>
     * Copy a Reservation
     */
    async postReservationCopy(requestParameters: PostReservationCopyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationCopyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    async postReservationLinksRaw(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationLinks.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationLinks.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationLinks.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationLinks.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationLinks.');
        }

        if (requestParameters.linkReservationsCriteria === null || requestParameters.linkReservationsCriteria === undefined) {
            throw new runtime.RequiredError('linkReservationsCriteria','Required parameter requestParameters.linkReservationsCriteria was null or undefined when calling postReservationLinks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostReservationLinksRequestToJSON(requestParameters.linkReservationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinks</p>
     * Link Reservations
     */
    async postReservationLinks(requestParameters: PostReservationLinksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    async postReservationLinksByChainRaw(requestParameters: PostReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationLinksByChain.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationLinksByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationLinksByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationLinksByChain.');
        }

        if (requestParameters.linkReservationsCriteria === null || requestParameters.linkReservationsCriteria === undefined) {
            throw new runtime.RequiredError('linkReservationsCriteria','Required parameter requestParameters.linkReservationsCriteria was null or undefined when calling postReservationLinksByChain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations/linkedReservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkReservationsCriteriaToJSON(requestParameters.linkReservationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByChain</p>
     * Link Reservations By Chain
     */
    async postReservationLinksByChain(requestParameters: PostReservationLinksByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationLinksByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByExtId</p>
     * Link Reservations
     */
    async postReservationLinksByExtIdRaw(requestParameters: PostReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling postReservationLinksByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling postReservationLinksByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationLinksByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationLinksByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationLinksByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationLinksByExtId.');
        }

        if (requestParameters.linkReservationsCriteria === null || requestParameters.linkReservationsCriteria === undefined) {
            throw new runtime.RequiredError('linkReservationsCriteria','Required parameter requestParameters.linkReservationsCriteria was null or undefined when calling postReservationLinksByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/linkedReservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkReservationsCriteriaToJSON(requestParameters.linkReservationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to link 1 or more reservations to an existing reservation.  <p><strong>OperationId:</strong>postReservationLinksByExtId</p>
     * Link Reservations
     */
    async postReservationLinksByExtId(requestParameters: PostReservationLinksByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationLinksByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Guest Locater for a list of Reservations. <p><strong>OperationId:</strong>postReservationLocators</p>
     * Create Reservation Guest Locator
     */
    async postReservationLocatorsRaw(requestParameters: PostReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLocatorsDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationLocators.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationLocators.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationLocators.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationLocators.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationLocators.');
        }

        if (requestParameters.reservationLocatorsDetailsInfo === null || requestParameters.reservationLocatorsDetailsInfo === undefined) {
            throw new runtime.RequiredError('reservationLocatorsDetailsInfo','Required parameter requestParameters.reservationLocatorsDetailsInfo was null or undefined when calling postReservationLocators.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestLocators`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationLocatorsDetailsInfoToJSON(requestParameters.reservationLocatorsDetailsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationLocatorsDetailsFromJSON(jsonValue));
    }

    /**
     * Create Guest Locater for a list of Reservations. <p><strong>OperationId:</strong>postReservationLocators</p>
     * Create Reservation Guest Locator
     */
    async postReservationLocators(requestParameters: PostReservationLocatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLocatorsDetails> {
        const response = await this.postReservationLocatorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a membership to an existing reservation. <p><strong>OperationId:</strong>postReservationMembership</p>
     * Create a Reservation membership
     */
    async postReservationMembershipRaw(requestParameters: PostReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationMembership.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationMembership.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationMembership.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationMembership.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationMembership.');
        }

        if (requestParameters.reservationMembership === null || requestParameters.reservationMembership === undefined) {
            throw new runtime.RequiredError('reservationMembership','Required parameter requestParameters.reservationMembership was null or undefined when calling postReservationMembership.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/memberships`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationMembershipToJSON(requestParameters.reservationMembership),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Add a membership to an existing reservation. <p><strong>OperationId:</strong>postReservationMembership</p>
     * Create a Reservation membership
     */
    async postReservationMembership(requestParameters: PostReservationMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to add packages to a reservation. <p><strong>OperationId:</strong>postReservationPackage</p>
     * Add a package to a Reservation
     */
    async postReservationPackageRaw(requestParameters: PostReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationPackage.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationPackage.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationPackage.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationPackage.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationPackage.');
        }

        if (requestParameters.reservationPackagesInfo === null || requestParameters.reservationPackagesInfo === undefined) {
            throw new runtime.RequiredError('reservationPackagesInfo','Required parameter requestParameters.reservationPackagesInfo was null or undefined when calling postReservationPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationPackagesInfoToJSON(requestParameters.reservationPackagesInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to add packages to a reservation. <p><strong>OperationId:</strong>postReservationPackage</p>
     * Add a package to a Reservation
     */
    async postReservationPackage(requestParameters: PostReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will add a preference to a Reservation.  <p><strong>OperationId:</strong>postReservationPreference</p>
     * Add a preference to a Reservation
     */
    async postReservationPreferenceRaw(requestParameters: PostReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReservationPreference.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReservationPreference.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReservationPreference.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReservationPreference.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReservationPreference.');
        }

        if (requestParameters.reservationPreferenceInfo === null || requestParameters.reservationPreferenceInfo === undefined) {
            throw new runtime.RequiredError('reservationPreferenceInfo','Required parameter requestParameters.reservationPreferenceInfo was null or undefined when calling postReservationPreference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preferences`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationPreferenceInfoToJSON(requestParameters.reservationPreferenceInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will add a preference to a Reservation.  <p><strong>OperationId:</strong>postReservationPreference</p>
     * Add a preference to a Reservation
     */
    async postReservationPreference(requestParameters: PostReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reserve Reservation inventory items. <p><strong>OperationId:</strong>postReserveInventoryItems</p>
     * Reserve Reservation inventory items
     */
    async postReserveInventoryItemsRaw(requestParameters: PostReserveInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReserveInventoryItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReserveInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReserveInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReserveInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReserveInventoryItems.');
        }

        if (requestParameters.reserveInventoryItems === null || requestParameters.reserveInventoryItems === undefined) {
            throw new runtime.RequiredError('reserveInventoryItems','Required parameter requestParameters.reserveInventoryItems was null or undefined when calling postReserveInventoryItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReserveInventoryItemsToJSON(requestParameters.reserveInventoryItems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Reserve Reservation inventory items. <p><strong>OperationId:</strong>postReserveInventoryItems</p>
     * Reserve Reservation inventory items
     */
    async postReserveInventoryItems(requestParameters: PostReserveInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReserveInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse a deposit policy on a specified reservation. <p><strong>OperationId:</strong>postReverseDepositPolicy</p>
     * Reverse a deposit policy
     */
    async postReverseDepositPolicyRaw(requestParameters: PostReverseDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyId === null || requestParameters.policyId === undefined) {
            throw new runtime.RequiredError('policyId','Required parameter requestParameters.policyId was null or undefined when calling postReverseDepositPolicy.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postReverseDepositPolicy.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postReverseDepositPolicy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postReverseDepositPolicy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postReverseDepositPolicy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postReverseDepositPolicy.');
        }

        if (requestParameters.reverseDepositPolicy === null || requestParameters.reverseDepositPolicy === undefined) {
            throw new runtime.RequiredError('reverseDepositPolicy','Required parameter requestParameters.reverseDepositPolicy was null or undefined when calling postReverseDepositPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/reverseDepositPolicy/{policyId}`.replace(`{${"policyId"}}`, encodeURIComponent(String(requestParameters.policyId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReverseDepositPolicyToJSON(requestParameters.reverseDepositPolicy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse a deposit policy on a specified reservation. <p><strong>OperationId:</strong>postReverseDepositPolicy</p>
     * Reverse a deposit policy
     */
    async postReverseDepositPolicy(requestParameters: PostReverseDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReverseDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create routing instructions on a reservation. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Create routing instructions for a reservation
     */
    async postRoutingInstructionsRaw(requestParameters: PostRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postRoutingInstructions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRoutingInstructions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRoutingInstructions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRoutingInstructions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRoutingInstructions.');
        }

        if (requestParameters.reservationRoutingCriteria === null || requestParameters.reservationRoutingCriteria === undefined) {
            throw new runtime.RequiredError('reservationRoutingCriteria','Required parameter requestParameters.reservationRoutingCriteria was null or undefined when calling postRoutingInstructions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationRoutingCriteriaToJSON(requestParameters.reservationRoutingCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create routing instructions on a reservation. It requires a reservation ID, which can be fetched using getReservations. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Create routing instructions for a reservation
     */
    async postRoutingInstructions(requestParameters: PostRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create routing instructions on a reservation. <p><strong>OperationId:</strong>postRoutingInstructionsByExtId</p>
     * Create routing instructions
     */
    async postRoutingInstructionsByExtIdRaw(requestParameters: PostRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling postRoutingInstructionsByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling postRoutingInstructionsByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRoutingInstructionsByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRoutingInstructionsByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRoutingInstructionsByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRoutingInstructionsByExtId.');
        }

        if (requestParameters.reservationRoutingCriteria === null || requestParameters.reservationRoutingCriteria === undefined) {
            throw new runtime.RequiredError('reservationRoutingCriteria','Required parameter requestParameters.reservationRoutingCriteria was null or undefined when calling postRoutingInstructionsByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/routingInstructions`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationRoutingCriteriaToJSON(requestParameters.reservationRoutingCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create routing instructions on a reservation. <p><strong>OperationId:</strong>postRoutingInstructionsByExtId</p>
     * Create routing instructions
     */
    async postRoutingInstructionsByExtId(requestParameters: PostRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoutingInstructionsByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create sell message configuration for a property. <p><strong>OperationId:</strong>postSellMessageConfig</p>
     * Create sell message
     */
    async postSellMessageConfigRaw(requestParameters: PostSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postSellMessageConfig.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postSellMessageConfig.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postSellMessageConfig.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postSellMessageConfig.');
        }

        if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
            throw new runtime.RequiredError('sellMessageConfig','Required parameter requestParameters.sellMessageConfig was null or undefined when calling postSellMessageConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SellMessageConfigToJSON(requestParameters.sellMessageConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create sell message configuration for a property. <p><strong>OperationId:</strong>postSellMessageConfig</p>
     * Create sell message
     */
    async postSellMessageConfig(requestParameters: PostSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSellMessageConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create sell message configuration. <p><strong>OperationId:</strong>postSellMessageConfigByChain</p>
     * Create sell message by chain
     */
    async postSellMessageConfigByChainRaw(requestParameters: PostSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postSellMessageConfigByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postSellMessageConfigByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postSellMessageConfigByChain.');
        }

        if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
            throw new runtime.RequiredError('sellMessageConfig','Required parameter requestParameters.sellMessageConfig was null or undefined when calling postSellMessageConfigByChain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sellMessages/config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SellMessageConfigToJSON(requestParameters.sellMessageConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create sell message configuration. <p><strong>OperationId:</strong>postSellMessageConfigByChain</p>
     * Create sell message by chain
     */
    async postSellMessageConfigByChain(requestParameters: PostSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSellMessageConfigByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create tickets on a reservation. <p><strong>OperationId:</strong>postTickets</p>
     * Create tickets
     */
    async postTicketsRaw(requestParameters: PostTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postTickets.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTickets.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTickets.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTickets.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTickets.');
        }

        if (requestParameters.ticketsInfo === null || requestParameters.ticketsInfo === undefined) {
            throw new runtime.RequiredError('ticketsInfo','Required parameter requestParameters.ticketsInfo was null or undefined when calling postTickets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketsInfoToJSON(requestParameters.ticketsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create tickets on a reservation. <p><strong>OperationId:</strong>postTickets</p>
     * Create tickets
     */
    async postTickets(requestParameters: PostTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Transaction Diversions. <p><strong>OperationId:</strong>postTransactionDiversions</p>
     * Create Transaction Diversions 
     */
    async postTransactionDiversionsRaw(requestParameters: PostTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postTransactionDiversions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTransactionDiversions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTransactionDiversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTransactionDiversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTransactionDiversions.');
        }

        if (requestParameters.transactionDiversionsInfo === null || requestParameters.transactionDiversionsInfo === undefined) {
            throw new runtime.RequiredError('transactionDiversionsInfo','Required parameter requestParameters.transactionDiversionsInfo was null or undefined when calling postTransactionDiversions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDiversionsInfoToJSON(requestParameters.transactionDiversionsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Transaction Diversions. <p><strong>OperationId:</strong>postTransactionDiversions</p>
     * Create Transaction Diversions 
     */
    async postTransactionDiversions(requestParameters: PostTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionDiversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Register turnaways for a property. <p><strong>OperationId:</strong>postTurnawayReservation</p>
     * Register Turnaway
     */
    async postTurnawayReservationRaw(requestParameters: PostTurnawayReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTurnawayReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTurnawayReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTurnawayReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTurnawayReservation.');
        }

        if (requestParameters.registerTurnaway === null || requestParameters.registerTurnaway === undefined) {
            throw new runtime.RequiredError('registerTurnaway','Required parameter requestParameters.registerTurnaway was null or undefined when calling postTurnawayReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnaways`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterTurnawayToJSON(requestParameters.registerTurnaway),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Register turnaways for a property. <p><strong>OperationId:</strong>postTurnawayReservation</p>
     * Register Turnaway
     */
    async postTurnawayReservation(requestParameters: PostTurnawayReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTurnawayReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    async postUpsellReservationRaw(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postUpsellReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postUpsellReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postUpsellReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postUpsellReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postUpsellReservation.');
        }

        if (requestParameters.upsellReservation === null || requestParameters.upsellReservation === undefined) {
            throw new runtime.RequiredError('upsellReservation','Required parameter requestParameters.upsellReservation was null or undefined when calling postUpsellReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upsell`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpsellReservationRequestToJSON(requestParameters.upsellReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to upsell a reservation in OPERA.  You would need to already know the upsell rules that are available for this reservation - you can do this by using the getUpsell API. <p><strong>OperationId:</strong>postUpsellReservation</p>
     * Upsell a Reservation
     */
    async postUpsellReservation(requestParameters: PostUpsellReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUpsellReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Acquire Reservation Lock. <p><strong>OperationId:</strong>putAcquireReservationLock</p>
     * Acquire Reservation Lock
     */
    async putAcquireReservationLockRaw(requestParameters: PutAcquireReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationLockDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putAcquireReservationLock.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putAcquireReservationLock.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putAcquireReservationLock.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putAcquireReservationLock.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putAcquireReservationLock.');
        }

        if (requestParameters.reservationLock === null || requestParameters.reservationLock === undefined) {
            throw new runtime.RequiredError('reservationLock','Required parameter requestParameters.reservationLock was null or undefined when calling putAcquireReservationLock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/locks`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationLockToJSON(requestParameters.reservationLock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationLockDetailsFromJSON(jsonValue));
    }

    /**
     * Acquire Reservation Lock. <p><strong>OperationId:</strong>putAcquireReservationLock</p>
     * Acquire Reservation Lock
     */
    async putAcquireReservationLock(requestParameters: PutAcquireReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationLockDetails> {
        const response = await this.putAcquireReservationLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API performs a validation before separating share reservations. <p><strong>OperationId:</strong>putBreakShareValidations</p>
     * Validate before breaking a share Reservation
     */
    async putBreakShareValidationsRaw(requestParameters: PutBreakShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreakShareValidationsDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putBreakShareValidations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putBreakShareValidations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putBreakShareValidations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putBreakShareValidations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putBreakShareValidations.');
        }

        if (requestParameters.breakShareValidations === null || requestParameters.breakShareValidations === undefined) {
            throw new runtime.RequiredError('breakShareValidations','Required parameter requestParameters.breakShareValidations was null or undefined when calling putBreakShareValidations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/breakshares/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BreakShareValidationsToJSON(requestParameters.breakShareValidations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreakShareValidationsDetailsFromJSON(jsonValue));
    }

    /**
     * This API performs a validation before separating share reservations. <p><strong>OperationId:</strong>putBreakShareValidations</p>
     * Validate before breaking a share Reservation
     */
    async putBreakShareValidations(requestParameters: PutBreakShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreakShareValidationsDetails> {
        const response = await this.putBreakShareValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change cancellation policy that is configured for a property. <p><strong>OperationId:</strong>putCancellationPolicy</p>
     * Change a Cancellation policy
     */
    async putCancellationPolicyRaw(requestParameters: PutCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationCancellationPolicyCriteria>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCancellationPolicy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCancellationPolicy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCancellationPolicy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCancellationPolicy.');
        }

        if (requestParameters.reservationCancellationPolicyCriteria === null || requestParameters.reservationCancellationPolicyCriteria === undefined) {
            throw new runtime.RequiredError('reservationCancellationPolicyCriteria','Required parameter requestParameters.reservationCancellationPolicyCriteria was null or undefined when calling putCancellationPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cancellationPolicies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationCancellationPolicyCriteriaToJSON(requestParameters.reservationCancellationPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationCancellationPolicyCriteriaFromJSON(jsonValue));
    }

    /**
     * Change cancellation policy that is configured for a property. <p><strong>OperationId:</strong>putCancellationPolicy</p>
     * Change a Cancellation policy
     */
    async putCancellationPolicy(requestParameters: PutCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationCancellationPolicyCriteria> {
        const response = await this.putCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate before combining Reservations for shares. <p><strong>OperationId:</strong>putCombineShareValidations</p>
     * Combine Share Validations
     */
    async putCombineShareValidationsRaw(requestParameters: PutCombineShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CombineShareValidationsDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putCombineShareValidations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCombineShareValidations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCombineShareValidations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCombineShareValidations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCombineShareValidations.');
        }

        if (requestParameters.combineShareValidations === null || requestParameters.combineShareValidations === undefined) {
            throw new runtime.RequiredError('combineShareValidations','Required parameter requestParameters.combineShareValidations was null or undefined when calling putCombineShareValidations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/combineshares/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CombineShareValidationsToJSON(requestParameters.combineShareValidations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CombineShareValidationsDetailsFromJSON(jsonValue));
    }

    /**
     * Validate before combining Reservations for shares. <p><strong>OperationId:</strong>putCombineShareValidations</p>
     * Combine Share Validations
     */
    async putCombineShareValidations(requestParameters: PutCombineShareValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CombineShareValidationsDetails> {
        const response = await this.putCombineShareValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Compute the cancellation policies for a reservation. <p><strong>OperationId:</strong>putComputeCancellationPolicies</p>
     * Compute the cancellation policies
     */
    async putComputeCancellationPoliciesRaw(requestParameters: PutComputeCancellationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeCancellationPoliciesDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putComputeCancellationPolicies.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putComputeCancellationPolicies.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putComputeCancellationPolicies.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putComputeCancellationPolicies.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putComputeCancellationPolicies.');
        }

        if (requestParameters.computeCancellationPolicies === null || requestParameters.computeCancellationPolicies === undefined) {
            throw new runtime.RequiredError('computeCancellationPolicies','Required parameter requestParameters.computeCancellationPolicies was null or undefined when calling putComputeCancellationPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellationPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComputeCancellationPoliciesToJSON(requestParameters.computeCancellationPolicies),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputeCancellationPoliciesDetailsFromJSON(jsonValue));
    }

    /**
     * Compute the cancellation policies for a reservation. <p><strong>OperationId:</strong>putComputeCancellationPolicies</p>
     * Compute the cancellation policies
     */
    async putComputeCancellationPolicies(requestParameters: PutComputeCancellationPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeCancellationPoliciesDetails> {
        const response = await this.putComputeCancellationPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Computes the deposit policies. <p><strong>OperationId:</strong>putComputeDepositPolicies</p>
     * Computes the deposit policies
     */
    async putComputeDepositPoliciesRaw(requestParameters: PutComputeDepositPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ComputeDepositPoliciesDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putComputeDepositPolicies.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putComputeDepositPolicies.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putComputeDepositPolicies.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putComputeDepositPolicies.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putComputeDepositPolicies.');
        }

        if (requestParameters.computeDepositPolicies === null || requestParameters.computeDepositPolicies === undefined) {
            throw new runtime.RequiredError('computeDepositPolicies','Required parameter requestParameters.computeDepositPolicies was null or undefined when calling putComputeDepositPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/depositPolicies`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ComputeDepositPoliciesToJSON(requestParameters.computeDepositPolicies),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ComputeDepositPoliciesDetailsFromJSON(jsonValue));
    }

    /**
     * Computes the deposit policies. <p><strong>OperationId:</strong>putComputeDepositPolicies</p>
     * Computes the deposit policies
     */
    async putComputeDepositPolicies(requestParameters: PutComputeDepositPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ComputeDepositPoliciesDetails> {
        const response = await this.putComputeDepositPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change deposit policy which already exists for a property. <p><strong>OperationId:</strong>putDepositPolicy</p>
     * Change deposit policy
     */
    async putDepositPolicyRaw(requestParameters: PutDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeDepositPolicyDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putDepositPolicy.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putDepositPolicy.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putDepositPolicy.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putDepositPolicy.');
        }

        if (requestParameters.reservationDepositPolicyCriteria === null || requestParameters.reservationDepositPolicyCriteria === undefined) {
            throw new runtime.RequiredError('reservationDepositPolicyCriteria','Required parameter requestParameters.reservationDepositPolicyCriteria was null or undefined when calling putDepositPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/depositPolicies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationDepositPolicyCriteriaToJSON(requestParameters.reservationDepositPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeDepositPolicyDetailsFromJSON(jsonValue));
    }

    /**
     * Change deposit policy which already exists for a property. <p><strong>OperationId:</strong>putDepositPolicy</p>
     * Change deposit policy
     */
    async putDepositPolicy(requestParameters: PutDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeDepositPolicyDetails> {
        const response = await this.putDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the Reservation Ecoupons. <p><strong>OperationId:</strong>putECoupons</p>
     * Change Reservation Ecoupon
     */
    async putECouponsRaw(requestParameters: PutECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECoupons>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putECoupons.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putECoupons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putECoupons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putECoupons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putECoupons.');
        }

        if (requestParameters.eCouponsInfo === null || requestParameters.eCouponsInfo === undefined) {
            throw new runtime.RequiredError('eCouponsInfo','Required parameter requestParameters.eCouponsInfo was null or undefined when calling putECoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/eCoupons`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ECouponsInfoToJSON(requestParameters.eCouponsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECouponsFromJSON(jsonValue));
    }

    /**
     * Change the Reservation Ecoupons. <p><strong>OperationId:</strong>putECoupons</p>
     * Change Reservation Ecoupon
     */
    async putECoupons(requestParameters: PutECouponsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECoupons> {
        const response = await this.putECouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change guest Message on a reservation. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change guest Message  
     */
    async putGuestMessagesRaw(requestParameters: PutGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeGuestMessages>> {
        if (requestParameters.guestMessageId === null || requestParameters.guestMessageId === undefined) {
            throw new runtime.RequiredError('guestMessageId','Required parameter requestParameters.guestMessageId was null or undefined when calling putGuestMessages.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putGuestMessages.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putGuestMessages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putGuestMessages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putGuestMessages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putGuestMessages.');
        }

        if (requestParameters.changeGuestMessages === null || requestParameters.changeGuestMessages === undefined) {
            throw new runtime.RequiredError('changeGuestMessages','Required parameter requestParameters.changeGuestMessages was null or undefined when calling putGuestMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages/{guestMessageId}`.replace(`{${"guestMessageId"}}`, encodeURIComponent(String(requestParameters.guestMessageId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeGuestMessagesToJSON(requestParameters.changeGuestMessages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeGuestMessagesFromJSON(jsonValue));
    }

    /**
     * Change guest Message on a reservation. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change guest Message  
     */
    async putGuestMessages(requestParameters: PutGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeGuestMessages> {
        const response = await this.putGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a master account on a reservation. <p><strong>OperationId:</strong>putMasterAccount</p>
     * Change a Master Account
     */
    async putMasterAccountRaw(requestParameters: PutMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MasterAccountSummary>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putMasterAccount.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putMasterAccount.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putMasterAccount.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putMasterAccount.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putMasterAccount.');
        }

        if (requestParameters.masterAccount === null || requestParameters.masterAccount === undefined) {
            throw new runtime.RequiredError('masterAccount','Required parameter requestParameters.masterAccount was null or undefined when calling putMasterAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/masterAccount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MasterAccountToJSON(requestParameters.masterAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MasterAccountSummaryFromJSON(jsonValue));
    }

    /**
     * Change a master account on a reservation. <p><strong>OperationId:</strong>putMasterAccount</p>
     * Change a Master Account
     */
    async putMasterAccount(requestParameters: PutMasterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MasterAccountSummary> {
        const response = await this.putMasterAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method 
     */
    async putPaymentMethodsRaw(requestParameters: PutPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPaymentMethods>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putPaymentMethods.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putPaymentMethods.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putPaymentMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putPaymentMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putPaymentMethods.');
        }

        if (requestParameters.reservationPaymentMethods === null || requestParameters.reservationPaymentMethods === undefined) {
            throw new runtime.RequiredError('reservationPaymentMethods','Required parameter requestParameters.reservationPaymentMethods was null or undefined when calling putPaymentMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/paymentMethods`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationPaymentMethodsToJSON(requestParameters.reservationPaymentMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPaymentMethodsFromJSON(jsonValue));
    }

    /**
     * This API will update an existing payment method on a reservation. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Change a payment method 
     */
    async putPaymentMethods(requestParameters: PutPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPaymentMethods> {
        const response = await this.putPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    async putReinstateReservationRaw(requestParameters: PutReinstateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinstateReservationDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReinstateReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReinstateReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReinstateReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReinstateReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReinstateReservation.');
        }

        if (requestParameters.reinstateReservation === null || requestParameters.reinstateReservation === undefined) {
            throw new runtime.RequiredError('reinstateReservation','Required parameter requestParameters.reinstateReservation was null or undefined when calling putReinstateReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/cancellations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReinstateReservationToJSON(requestParameters.reinstateReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReinstateReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservation</p>
     * Reinstate a Reservation
     */
    async putReinstateReservation(requestParameters: PutReinstateReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinstateReservationDetails> {
        const response = await this.putReinstateReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservationByExtId</p>
     * Reinstate a Reservation
     */
    async putReinstateReservationByExtIdRaw(requestParameters: PutReinstateReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReinstateReservationDetails>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling putReinstateReservationByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling putReinstateReservationByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReinstateReservationByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReinstateReservationByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReinstateReservationByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReinstateReservationByExtId.');
        }

        if (requestParameters.reinstateReservation === null || requestParameters.reinstateReservation === undefined) {
            throw new runtime.RequiredError('reinstateReservation','Required parameter requestParameters.reinstateReservation was null or undefined when calling putReinstateReservationByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/cancellations`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReinstateReservationToJSON(requestParameters.reinstateReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReinstateReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to reinstate a cancelled reservation. <p><strong>OperationId:</strong>putReinstateReservationByExtId</p>
     * Reinstate a Reservation
     */
    async putReinstateReservationByExtId(requestParameters: PutReinstateReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReinstateReservationDetails> {
        const response = await this.putReinstateReservationByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    async putReservationRaw(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeReservationDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservation.');
        }

        if (requestParameters.changeReservation === null || requestParameters.changeReservation === undefined) {
            throw new runtime.RequiredError('changeReservation','Required parameter requestParameters.changeReservation was null or undefined when calling putReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutReservationRequestToJSON(requestParameters.changeReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservation</p>
     * Update Reservation by ID
     */
    async putReservation(requestParameters: PutReservationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeReservationDetails> {
        const response = await this.putReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservationByExtId</p>
     * Update Reservation by ID
     */
    async putReservationByExtIdRaw(requestParameters: PutReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeReservationDetails>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling putReservationByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling putReservationByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationByExtId.');
        }

        if (requestParameters.changeReservation === null || requestParameters.changeReservation === undefined) {
            throw new runtime.RequiredError('changeReservation','Required parameter requestParameters.changeReservation was null or undefined when calling putReservationByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeReservationToJSON(requestParameters.changeReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeReservationDetailsFromJSON(jsonValue));
    }

    /**
     * Use this to update an existing reservation for a hotel, such as adding comments, changing the number of guests.   There are many fields in putReservation defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use putReservation. <p><strong>OperationId:</strong>putReservationByExtId</p>
     * Update Reservation by ID
     */
    async putReservationByExtId(requestParameters: PutReservationByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeReservationDetails> {
        const response = await this.putReservationByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate daily rate details change. <p><strong>OperationId:</strong>putReservationDailyRateDetailValidation</p>
     * Validate daily rate details change
     */
    async putReservationDailyRateDetailValidationRaw(requestParameters: PutReservationDailyRateDetailValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationDailyRateDetailDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservationDailyRateDetailValidation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationDailyRateDetailValidation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationDailyRateDetailValidation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationDailyRateDetailValidation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationDailyRateDetailValidation.');
        }

        if (requestParameters.reservationDailyRateDetail === null || requestParameters.reservationDailyRateDetail === undefined) {
            throw new runtime.RequiredError('reservationDailyRateDetail','Required parameter requestParameters.reservationDailyRateDetail was null or undefined when calling putReservationDailyRateDetailValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/dailyRates/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationDailyRateDetailToJSON(requestParameters.reservationDailyRateDetail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationDailyRateDetailDetailsFromJSON(jsonValue));
    }

    /**
     * Validate daily rate details change. <p><strong>OperationId:</strong>putReservationDailyRateDetailValidation</p>
     * Validate daily rate details change
     */
    async putReservationDailyRateDetailValidation(requestParameters: PutReservationDailyRateDetailValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationDailyRateDetailDetails> {
        const response = await this.putReservationDailyRateDetailValidationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate Reservation header change. <p><strong>OperationId:</strong>putReservationHeaderValidation</p>
     * Validate Reservation header change
     */
    async putReservationHeaderValidationRaw(requestParameters: PutReservationHeaderValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationDailyRateDetailDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservationHeaderValidation.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationHeaderValidation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationHeaderValidation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationHeaderValidation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationHeaderValidation.');
        }

        if (requestParameters.reservationDailyRateDetail === null || requestParameters.reservationDailyRateDetail === undefined) {
            throw new runtime.RequiredError('reservationDailyRateDetail','Required parameter requestParameters.reservationDailyRateDetail was null or undefined when calling putReservationHeaderValidation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/header/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationDailyRateDetailToJSON(requestParameters.reservationDailyRateDetail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationDailyRateDetailDetailsFromJSON(jsonValue));
    }

    /**
     * Validate Reservation header change. <p><strong>OperationId:</strong>putReservationHeaderValidation</p>
     * Validate Reservation header change
     */
    async putReservationHeaderValidation(requestParameters: PutReservationHeaderValidationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationDailyRateDetailDetails> {
        const response = await this.putReservationHeaderValidationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to move a reservation to a different hotel. <p><strong>OperationId:</strong>putReservationHotelMove</p>
     * Move the Reservation 
     */
    async putReservationHotelMoveRaw(requestParameters: PutReservationHotelMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveReservationHotelDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservationHotelMove.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationHotelMove.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationHotelMove.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationHotelMove.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationHotelMove.');
        }

        if (requestParameters.moveReservationHotel === null || requestParameters.moveReservationHotel === undefined) {
            throw new runtime.RequiredError('moveReservationHotel','Required parameter requestParameters.moveReservationHotel was null or undefined when calling putReservationHotelMove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/move`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveReservationHotelToJSON(requestParameters.moveReservationHotel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoveReservationHotelDetailsFromJSON(jsonValue));
    }

    /**
     * This API can be used to move a reservation to a different hotel. <p><strong>OperationId:</strong>putReservationHotelMove</p>
     * Move the Reservation 
     */
    async putReservationHotelMove(requestParameters: PutReservationHotelMoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveReservationHotelDetails> {
        const response = await this.putReservationHotelMoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Extend Reservation Lock. <p><strong>OperationId:</strong>putReservationLock</p>
     * Extend Reservation Lock
     */
    async putReservationLockRaw(requestParameters: PutReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtendReservationLockDetails>> {
        if (requestParameters.lockHandle === null || requestParameters.lockHandle === undefined) {
            throw new runtime.RequiredError('lockHandle','Required parameter requestParameters.lockHandle was null or undefined when calling putReservationLock.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationLock.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationLock.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationLock.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationLock.');
        }

        if (requestParameters.extendReservationLock === null || requestParameters.extendReservationLock === undefined) {
            throw new runtime.RequiredError('extendReservationLock','Required parameter requestParameters.extendReservationLock was null or undefined when calling putReservationLock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locks/{lockHandle}`.replace(`{${"lockHandle"}}`, encodeURIComponent(String(requestParameters.lockHandle))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExtendReservationLockToJSON(requestParameters.extendReservationLock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtendReservationLockDetailsFromJSON(jsonValue));
    }

    /**
     * Extend Reservation Lock. <p><strong>OperationId:</strong>putReservationLock</p>
     * Extend Reservation Lock
     */
    async putReservationLock(requestParameters: PutReservationLockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtendReservationLockDetails> {
        const response = await this.putReservationLockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to update existing packages on a reservation. <p><strong>OperationId:</strong>putReservationPackage</p>
     * Update a package on a Reservation
     */
    async putReservationPackageRaw(requestParameters: PutReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPackagesInfo>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservationPackage.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationPackage.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationPackage.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationPackage.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationPackage.');
        }

        if (requestParameters.reservationPackagesInfo === null || requestParameters.reservationPackagesInfo === undefined) {
            throw new runtime.RequiredError('reservationPackagesInfo','Required parameter requestParameters.reservationPackagesInfo was null or undefined when calling putReservationPackage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/packages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationPackagesInfoToJSON(requestParameters.reservationPackagesInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPackagesInfoFromJSON(jsonValue));
    }

    /**
     * This API will allow you to update existing packages on a reservation. <p><strong>OperationId:</strong>putReservationPackage</p>
     * Update a package on a Reservation
     */
    async putReservationPackage(requestParameters: PutReservationPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPackagesInfo> {
        const response = await this.putReservationPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to update the preferences that exist on a reservation. <p><strong>OperationId:</strong>putReservationPreference</p>
     * Change a Reservation Preference
     */
    async putReservationPreferenceRaw(requestParameters: PutReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationPreferenceDetails>> {
        if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
            throw new runtime.RequiredError('preferenceCode','Required parameter requestParameters.preferenceCode was null or undefined when calling putReservationPreference.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservationPreference.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationPreference.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationPreference.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationPreference.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationPreference.');
        }

        if (requestParameters.reservationPreferenceInfo === null || requestParameters.reservationPreferenceInfo === undefined) {
            throw new runtime.RequiredError('reservationPreferenceInfo','Required parameter requestParameters.reservationPreferenceInfo was null or undefined when calling putReservationPreference.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/preferences/{preferenceCode}`.replace(`{${"preferenceCode"}}`, encodeURIComponent(String(requestParameters.preferenceCode))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationPreferenceInfoToJSON(requestParameters.reservationPreferenceInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationPreferenceDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to update the preferences that exist on a reservation. <p><strong>OperationId:</strong>putReservationPreference</p>
     * Change a Reservation Preference
     */
    async putReservationPreference(requestParameters: PutReservationPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationPreferenceDetails> {
        const response = await this.putReservationPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to set Upgrade Eligibility for Reservations. <p><strong>OperationId:</strong>putReservationsUpgradeEligibility</p>
     * Set Upgrade Eligibility for Reservations
     */
    async putReservationsUpgradeEligibilityRaw(requestParameters: PutReservationsUpgradeEligibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationsUpgradeEligibilityDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservationsUpgradeEligibility.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationsUpgradeEligibility.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservationsUpgradeEligibility.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservationsUpgradeEligibility.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservationsUpgradeEligibility.');
        }

        if (requestParameters.reservationsUpgradeEligibility === null || requestParameters.reservationsUpgradeEligibility === undefined) {
            throw new runtime.RequiredError('reservationsUpgradeEligibility','Required parameter requestParameters.reservationsUpgradeEligibility was null or undefined when calling putReservationsUpgradeEligibility.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/upgradeEligibleReservations`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationsUpgradeEligibilityToJSON(requestParameters.reservationsUpgradeEligibility),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationsUpgradeEligibilityDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to set Upgrade Eligibility for Reservations. <p><strong>OperationId:</strong>putReservationsUpgradeEligibility</p>
     * Set Upgrade Eligibility for Reservations
     */
    async putReservationsUpgradeEligibility(requestParameters: PutReservationsUpgradeEligibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationsUpgradeEligibilityDetails> {
        const response = await this.putReservationsUpgradeEligibilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>putReservedInventoryItems</p>
     * Change reserved Inventory Items 
     */
    async putReservedInventoryItemsRaw(requestParameters: PutReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservedInventoryItemsInfo>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putReservedInventoryItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservedInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putReservedInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putReservedInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putReservedInventoryItems.');
        }

        if (requestParameters.reservedInventoryItemsInfo === null || requestParameters.reservedInventoryItemsInfo === undefined) {
            throw new runtime.RequiredError('reservedInventoryItemsInfo','Required parameter requestParameters.reservedInventoryItemsInfo was null or undefined when calling putReservedInventoryItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/inventoryItems`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservedInventoryItemsInfoToJSON(requestParameters.reservedInventoryItemsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservedInventoryItemsInfoFromJSON(jsonValue));
    }

    /**
     * Change the Inventory Items reserved for the Reservation. <p><strong>OperationId:</strong>putReservedInventoryItems</p>
     * Change reserved Inventory Items 
     */
    async putReservedInventoryItems(requestParameters: PutReservedInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservedInventoryItemsInfo> {
        const response = await this.putReservedInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change guest messages for Reservation. <p><strong>OperationId:</strong>putResvGuestMessages</p>
     * Change Reservation Guest Messages
     */
    async putResvGuestMessagesRaw(requestParameters: PutResvGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeResvGuestMessages>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putResvGuestMessages.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putResvGuestMessages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putResvGuestMessages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putResvGuestMessages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putResvGuestMessages.');
        }

        if (requestParameters.changeResvGuestMessages === null || requestParameters.changeResvGuestMessages === undefined) {
            throw new runtime.RequiredError('changeResvGuestMessages','Required parameter requestParameters.changeResvGuestMessages was null or undefined when calling putResvGuestMessages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/guestMessages`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeResvGuestMessagesToJSON(requestParameters.changeResvGuestMessages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeResvGuestMessagesFromJSON(jsonValue));
    }

    /**
     * Change guest messages for Reservation. <p><strong>OperationId:</strong>putResvGuestMessages</p>
     * Change Reservation Guest Messages
     */
    async putResvGuestMessages(requestParameters: PutResvGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeResvGuestMessages> {
        const response = await this.putResvGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Change routing instructions
     */
    async putRoutingInstructionsRaw(requestParameters: PutRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putRoutingInstructions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRoutingInstructions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRoutingInstructions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRoutingInstructions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRoutingInstructions.');
        }

        if (requestParameters.routingInstructionsInfo === null || requestParameters.routingInstructionsInfo === undefined) {
            throw new runtime.RequiredError('routingInstructionsInfo','Required parameter requestParameters.routingInstructionsInfo was null or undefined when calling putRoutingInstructions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/routingInstructions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingInstructionsInfoToJSON(requestParameters.routingInstructionsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Change routing instructions
     */
    async putRoutingInstructions(requestParameters: PutRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructionsByExtId</p>
     * Change routing instructions
     */
    async putRoutingInstructionsByExtIdRaw(requestParameters: PutRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationExternalId === null || requestParameters.reservationExternalId === undefined) {
            throw new runtime.RequiredError('reservationExternalId','Required parameter requestParameters.reservationExternalId was null or undefined when calling putRoutingInstructionsByExtId.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling putRoutingInstructionsByExtId.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRoutingInstructionsByExtId.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRoutingInstructionsByExtId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRoutingInstructionsByExtId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRoutingInstructionsByExtId.');
        }

        if (requestParameters.routingInstructionsInfo === null || requestParameters.routingInstructionsInfo === undefined) {
            throw new runtime.RequiredError('routingInstructionsInfo','Required parameter requestParameters.routingInstructionsInfo was null or undefined when calling putRoutingInstructionsByExtId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalSystems/{externalSystemCode}/reservations/{reservationExternalId}/routingInstructions`.replace(`{${"reservationExternalId"}}`, encodeURIComponent(String(requestParameters.reservationExternalId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingInstructionsInfoToJSON(requestParameters.routingInstructionsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change routing instructions on an existing reservation. <p><strong>OperationId:</strong>putRoutingInstructionsByExtId</p>
     * Change routing instructions
     */
    async putRoutingInstructionsByExtId(requestParameters: PutRoutingInstructionsByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoutingInstructionsByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the existing sell message configuration for a property. <p><strong>OperationId:</strong>putSellMessageConfig</p>
     * Change sell message
     */
    async putSellMessageConfigRaw(requestParameters: PutSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellMessageConfig>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putSellMessageConfig.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putSellMessageConfig.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putSellMessageConfig.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putSellMessageConfig.');
        }

        if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
            throw new runtime.RequiredError('sellMessageConfig','Required parameter requestParameters.sellMessageConfig was null or undefined when calling putSellMessageConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sellMessages/config`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SellMessageConfigToJSON(requestParameters.sellMessageConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellMessageConfigFromJSON(jsonValue));
    }

    /**
     * Update the existing sell message configuration for a property. <p><strong>OperationId:</strong>putSellMessageConfig</p>
     * Change sell message
     */
    async putSellMessageConfig(requestParameters: PutSellMessageConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellMessageConfig> {
        const response = await this.putSellMessageConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the existing sell message configuration. <p><strong>OperationId:</strong>putSellMessageConfigByChain</p>
     * Change sell message by chain
     */
    async putSellMessageConfigByChainRaw(requestParameters: PutSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SellMessageConfig>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putSellMessageConfigByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putSellMessageConfigByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putSellMessageConfigByChain.');
        }

        if (requestParameters.sellMessageConfig === null || requestParameters.sellMessageConfig === undefined) {
            throw new runtime.RequiredError('sellMessageConfig','Required parameter requestParameters.sellMessageConfig was null or undefined when calling putSellMessageConfigByChain.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sellMessages/config`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SellMessageConfigToJSON(requestParameters.sellMessageConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SellMessageConfigFromJSON(jsonValue));
    }

    /**
     * Update the existing sell message configuration. <p><strong>OperationId:</strong>putSellMessageConfigByChain</p>
     * Change sell message by chain
     */
    async putSellMessageConfigByChain(requestParameters: PutSellMessageConfigByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SellMessageConfig> {
        const response = await this.putSellMessageConfigByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the share amounts of a reservation <p><strong>OperationId:</strong>putShareRateAmount</p>
     * Change Share Rate Amount
     */
    async putShareRateAmountRaw(requestParameters: PutShareRateAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShareReservations>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putShareRateAmount.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putShareRateAmount.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putShareRateAmount.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putShareRateAmount.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putShareRateAmount.');
        }

        if (requestParameters.changeShareRateAmount === null || requestParameters.changeShareRateAmount === undefined) {
            throw new runtime.RequiredError('changeShareRateAmount','Required parameter requestParameters.changeShareRateAmount was null or undefined when calling putShareRateAmount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/shareRateAmount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeShareRateAmountToJSON(requestParameters.changeShareRateAmount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShareReservationsFromJSON(jsonValue));
    }

    /**
     * Change the share amounts of a reservation <p><strong>OperationId:</strong>putShareRateAmount</p>
     * Change Share Rate Amount
     */
    async putShareRateAmount(requestParameters: PutShareRateAmountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShareReservations> {
        const response = await this.putShareRateAmountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change the guest counts(adults or children) for a Sharing Reservation <p><strong>OperationId:</strong>putSharingGuests</p>
     * Change Sharing Guests
     */
    async putSharingGuestsRaw(requestParameters: PutSharingGuestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeSharingGuests>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putSharingGuests.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putSharingGuests.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putSharingGuests.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putSharingGuests.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putSharingGuests.');
        }

        if (requestParameters.changeSharingGuests === null || requestParameters.changeSharingGuests === undefined) {
            throw new runtime.RequiredError('changeSharingGuests','Required parameter requestParameters.changeSharingGuests was null or undefined when calling putSharingGuests.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/sharedGuestCount`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeSharingGuestsToJSON(requestParameters.changeSharingGuests),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeSharingGuestsFromJSON(jsonValue));
    }

    /**
     * Change the guest counts(adults or children) for a Sharing Reservation <p><strong>OperationId:</strong>putSharingGuests</p>
     * Change Sharing Guests
     */
    async putSharingGuests(requestParameters: PutSharingGuestsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeSharingGuests> {
        const response = await this.putSharingGuestsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to split a multi room reservation.  This will create a new confirmation number for the split reservation. <p><strong>OperationId:</strong>putSplitMultiRoomReservation</p>
     * Split multi room Reservation
     */
    async putSplitMultiRoomReservationRaw(requestParameters: PutSplitMultiRoomReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SplitMultiRoomReservationDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putSplitMultiRoomReservation.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putSplitMultiRoomReservation.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putSplitMultiRoomReservation.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putSplitMultiRoomReservation.');
        }

        if (requestParameters.splitMultiRoomReservation === null || requestParameters.splitMultiRoomReservation === undefined) {
            throw new runtime.RequiredError('splitMultiRoomReservation','Required parameter requestParameters.splitMultiRoomReservation was null or undefined when calling putSplitMultiRoomReservation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservations/{reservationId}/split`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SplitMultiRoomReservationToJSON(requestParameters.splitMultiRoomReservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SplitMultiRoomReservationDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to split a multi room reservation.  This will create a new confirmation number for the split reservation. <p><strong>OperationId:</strong>putSplitMultiRoomReservation</p>
     * Split multi room Reservation
     */
    async putSplitMultiRoomReservation(requestParameters: PutSplitMultiRoomReservationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SplitMultiRoomReservationDetails> {
        const response = await this.putSplitMultiRoomReservationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change tickets on a reservation. <p><strong>OperationId:</strong>putTickets</p>
     * Change tickets
     */
    async putTicketsRaw(requestParameters: PutTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Tickets>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putTickets.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putTickets.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putTickets.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putTickets.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putTickets.');
        }

        if (requestParameters.ticketsInfo === null || requestParameters.ticketsInfo === undefined) {
            throw new runtime.RequiredError('ticketsInfo','Required parameter requestParameters.ticketsInfo was null or undefined when calling putTickets.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/tickets`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TicketsInfoToJSON(requestParameters.ticketsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketsFromJSON(jsonValue));
    }

    /**
     * Use this API to change tickets on a reservation. <p><strong>OperationId:</strong>putTickets</p>
     * Change tickets
     */
    async putTickets(requestParameters: PutTicketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Tickets> {
        const response = await this.putTicketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Transaction Diversions. <p><strong>OperationId:</strong>putTransactionDiversions</p>
     * Change Transaction Diversions 
     */
    async putTransactionDiversionsRaw(requestParameters: PutTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDiversionsDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putTransactionDiversions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putTransactionDiversions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putTransactionDiversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putTransactionDiversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putTransactionDiversions.');
        }

        if (requestParameters.transactionDiversionsInfo === null || requestParameters.transactionDiversionsInfo === undefined) {
            throw new runtime.RequiredError('transactionDiversionsInfo','Required parameter requestParameters.transactionDiversionsInfo was null or undefined when calling putTransactionDiversions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/transactionDiversions`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDiversionsInfoToJSON(requestParameters.transactionDiversionsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDiversionsDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Transaction Diversions. <p><strong>OperationId:</strong>putTransactionDiversions</p>
     * Change Transaction Diversions 
     */
    async putTransactionDiversions(requestParameters: PutTransactionDiversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDiversionsDetails> {
        const response = await this.putTransactionDiversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate overlapping stay for a reservation <p><strong>OperationId:</strong>putValidateOverlappingStay</p>
     * Check overlapping stay
     */
    async putValidateOverlappingStayRaw(requestParameters: PutValidateOverlappingStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverlappingStayDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putValidateOverlappingStay.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putValidateOverlappingStay.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putValidateOverlappingStay.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putValidateOverlappingStay.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putValidateOverlappingStay.');
        }

        if (requestParameters.overlappingStay === null || requestParameters.overlappingStay === undefined) {
            throw new runtime.RequiredError('overlappingStay','Required parameter requestParameters.overlappingStay was null or undefined when calling putValidateOverlappingStay.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/stay/action/validate`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OverlappingStayToJSON(requestParameters.overlappingStay),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverlappingStayDetailsFromJSON(jsonValue));
    }

    /**
     * Validate overlapping stay for a reservation <p><strong>OperationId:</strong>putValidateOverlappingStay</p>
     * Check overlapping stay
     */
    async putValidateOverlappingStay(requestParameters: PutValidateOverlappingStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverlappingStayDetails> {
        const response = await this.putValidateOverlappingStayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate overlapping stays <p><strong>OperationId:</strong>putValidateOverlappingStays</p>
     * Check overlapping stay
     */
    async putValidateOverlappingStaysRaw(requestParameters: PutValidateOverlappingStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverlappingStayDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putValidateOverlappingStays.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putValidateOverlappingStays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putValidateOverlappingStays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putValidateOverlappingStays.');
        }

        if (requestParameters.overlappingStay === null || requestParameters.overlappingStay === undefined) {
            throw new runtime.RequiredError('overlappingStay','Required parameter requestParameters.overlappingStay was null or undefined when calling putValidateOverlappingStays.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/stay/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OverlappingStayToJSON(requestParameters.overlappingStay),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverlappingStayDetailsFromJSON(jsonValue));
    }

    /**
     * Validate overlapping stays <p><strong>OperationId:</strong>putValidateOverlappingStays</p>
     * Check overlapping stay
     */
    async putValidateOverlappingStays(requestParameters: PutValidateOverlappingStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverlappingStayDetails> {
        const response = await this.putValidateOverlappingStaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    async putValidateReservationChangesRaw(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateReservationChangesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putValidateReservationChanges.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putValidateReservationChanges.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putValidateReservationChanges.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putValidateReservationChanges.');
        }

        if (requestParameters.validateReservationChanges === null || requestParameters.validateReservationChanges === undefined) {
            throw new runtime.RequiredError('validateReservationChanges','Required parameter requestParameters.validateReservationChanges was null or undefined when calling putValidateReservationChanges.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/validations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutValidateReservationChangesRequestToJSON(requestParameters.validateReservationChanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateReservationChangesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to validate either the guarantee type or stay details of a reservation you are about to create. <p><strong>OperationId:</strong>putValidateReservationChanges</p>
     * Validate Reservation Change
     */
    async putValidateReservationChanges(requestParameters: PutValidateReservationChangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateReservationChangesDetails> {
        const response = await this.putValidateReservationChangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate the rate plan information for a reservation. <p><strong>OperationId:</strong>validateRateInfo</p>
     * Validate rate information
     */
    async validateRateInfoRaw(requestParameters: ValidateRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling validateRateInfo.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling validateRateInfo.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling validateRateInfo.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling validateRateInfo.');
        }

        if (requestParameters.validateRateInfo === null || requestParameters.validateRateInfo === undefined) {
            throw new runtime.RequiredError('validateRateInfo','Required parameter requestParameters.validateRateInfo was null or undefined when calling validateRateInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateInfoValidation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateRateInfoToJSON(requestParameters.validateRateInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateInfoFromJSON(jsonValue));
    }

    /**
     * Validate the rate plan information for a reservation. <p><strong>OperationId:</strong>validateRateInfo</p>
     * Validate rate information
     */
    async validateRateInfo(requestParameters: ValidateRateInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateInfo> {
        const response = await this.validateRateInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeletePreCheckInReservationCardOrTokenEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type DeletePreCheckInReservationCardOrTokenEnum = typeof DeletePreCheckInReservationCardOrTokenEnum[keyof typeof DeletePreCheckInReservationCardOrTokenEnum];
/**
 * @export
 */
export const DeletePreCheckInReservationCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type DeletePreCheckInReservationCardTypeEnum = typeof DeletePreCheckInReservationCardTypeEnum[keyof typeof DeletePreCheckInReservationCardTypeEnum];
/**
 * @export
 */
export const DeletePreCheckInReservationProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type DeletePreCheckInReservationProcessingEnum = typeof DeletePreCheckInReservationProcessingEnum[keyof typeof DeletePreCheckInReservationProcessingEnum];
/**
 * @export
 */
export const DeletePreCheckInReservationEmailFolioEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type DeletePreCheckInReservationEmailFolioEmailFormatEnum = typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum[keyof typeof DeletePreCheckInReservationEmailFolioEmailFormatEnum];
/**
 * @export
 */
export const GetAlertNoticesAlertAreaEnum = {
    CheckIn: 'CheckIn',
    CheckOut: 'CheckOut',
    Reservation: 'Reservation',
    Billing: 'Billing',
    InHouse: 'InHouse'
} as const;
export type GetAlertNoticesAlertAreaEnum = typeof GetAlertNoticesAlertAreaEnum[keyof typeof GetAlertNoticesAlertAreaEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetExternalSystemReservationsSearchTypeEnum = typeof GetExternalSystemReservationsSearchTypeEnum[keyof typeof GetExternalSystemReservationsSearchTypeEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
} as const;
export type GetExternalSystemReservationsOrderByEnum = typeof GetExternalSystemReservationsOrderByEnum[keyof typeof GetExternalSystemReservationsOrderByEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetExternalSystemReservationsSortOrderEnum = typeof GetExternalSystemReservationsSortOrderEnum[keyof typeof GetExternalSystemReservationsSortOrderEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetExternalSystemReservationsHousekeepingRoomStatusesEnum = typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum[keyof typeof GetExternalSystemReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetExternalSystemReservationsFetchInstructionsEnum = typeof GetExternalSystemReservationsFetchInstructionsEnum[keyof typeof GetExternalSystemReservationsFetchInstructionsEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetExternalSystemReservationsSearchTypesEnum = typeof GetExternalSystemReservationsSearchTypesEnum[keyof typeof GetExternalSystemReservationsSearchTypesEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetExternalSystemReservationsReservationStatusesEnum = typeof GetExternalSystemReservationsReservationStatusesEnum[keyof typeof GetExternalSystemReservationsReservationStatusesEnum];
/**
 * @export
 */
export const GetExternalSystemReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
} as const;
export type GetExternalSystemReservationsRoomReadyStatusesEnum = typeof GetExternalSystemReservationsRoomReadyStatusesEnum[keyof typeof GetExternalSystemReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export const GetGuestMessagesReservationStatusEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetGuestMessagesReservationStatusEnum = typeof GetGuestMessagesReservationStatusEnum[keyof typeof GetGuestMessagesReservationStatusEnum];
/**
 * @export
 */
export const GetHotelReservationsDiscrepancyEnum = {
    Skip: 'Skip',
    Sleep: 'Sleep'
} as const;
export type GetHotelReservationsDiscrepancyEnum = typeof GetHotelReservationsDiscrepancyEnum[keyof typeof GetHotelReservationsDiscrepancyEnum];
/**
 * @export
 */
export const GetHotelReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot',
    FiscalInfo: 'FiscalInfo'
} as const;
export type GetHotelReservationsSearchTypeEnum = typeof GetHotelReservationsSearchTypeEnum[keyof typeof GetHotelReservationsSearchTypeEnum];
/**
 * @export
 */
export const GetHotelReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType',
    QueuePriority: 'QueuePriority',
    QueueDurationTime: 'QueueDurationTime'
} as const;
export type GetHotelReservationsOrderByEnum = typeof GetHotelReservationsOrderByEnum[keyof typeof GetHotelReservationsOrderByEnum];
/**
 * @export
 */
export const GetHotelReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetHotelReservationsSortOrderEnum = typeof GetHotelReservationsSortOrderEnum[keyof typeof GetHotelReservationsSortOrderEnum];
/**
 * @export
 */
export const GetHotelReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHotelReservationsHousekeepingRoomStatusesEnum = typeof GetHotelReservationsHousekeepingRoomStatusesEnum[keyof typeof GetHotelReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export const GetHotelReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI',
    SwapShiftRooms: 'SwapShiftRooms',
    ReservationPreferences: 'ReservationPreferences',
    FiscalInfo: 'FiscalInfo',
    CommissionsInfo: 'CommissionsInfo'
} as const;
export type GetHotelReservationsFetchInstructionsEnum = typeof GetHotelReservationsFetchInstructionsEnum[keyof typeof GetHotelReservationsFetchInstructionsEnum];
/**
 * @export
 */
export const GetHotelReservationsAllowedReservationActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress',
    MemberAwardAttached: 'MemberAwardAttached'
} as const;
export type GetHotelReservationsAllowedReservationActionsEnum = typeof GetHotelReservationsAllowedReservationActionsEnum[keyof typeof GetHotelReservationsAllowedReservationActionsEnum];
/**
 * @export
 */
export const GetHotelReservationsPeriodicFolioEnum = {
    Weekly: 'Weekly',
    Monthly: 'Monthly',
    Days: 'Days'
} as const;
export type GetHotelReservationsPeriodicFolioEnum = typeof GetHotelReservationsPeriodicFolioEnum[keyof typeof GetHotelReservationsPeriodicFolioEnum];
/**
 * @export
 */
export const GetHotelReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetHotelReservationsSearchTypesEnum = typeof GetHotelReservationsSearchTypesEnum[keyof typeof GetHotelReservationsSearchTypesEnum];
/**
 * @export
 */
export const GetHotelReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetHotelReservationsReservationStatusesEnum = typeof GetHotelReservationsReservationStatusesEnum[keyof typeof GetHotelReservationsReservationStatusesEnum];
/**
 * @export
 */
export const GetHotelReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
} as const;
export type GetHotelReservationsRoomReadyStatusesEnum = typeof GetHotelReservationsRoomReadyStatusesEnum[keyof typeof GetHotelReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export const GetLinkedReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    TotalCostOfStay: 'TotalCostOfStay',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ServiceRequests: 'ServiceRequests',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    CustomNameValue: 'CustomNameValue',
    CustomChargeExemptions: 'CustomChargeExemptions'
} as const;
export type GetLinkedReservationsFetchInstructionsEnum = typeof GetLinkedReservationsFetchInstructionsEnum[keyof typeof GetLinkedReservationsFetchInstructionsEnum];
/**
 * @export
 */
export const GetPackageFetchInstructionsEnum = {
    Primary: 'Primary',
    Transaction: 'Transaction',
    Classification: 'Classification',
    Schedule: 'Schedule',
    InventoryItems: 'InventoryItems'
} as const;
export type GetPackageFetchInstructionsEnum = typeof GetPackageFetchInstructionsEnum[keyof typeof GetPackageFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    ReservationMembershipAwards: 'ReservationMembershipAwards',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    TotalCostOfStay: 'TotalCostOfStay',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    AutoCheckInRoomType: 'AutoCheckInRoomType'
} as const;
export type GetReservationFetchInstructionsEnum = typeof GetReservationFetchInstructionsEnum[keyof typeof GetReservationFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationAllowedActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress',
    MemberAwardAttached: 'MemberAwardAttached',
    UpgradeAwardAttached: 'UpgradeAwardAttached'
} as const;
export type GetReservationAllowedActionsEnum = typeof GetReservationAllowedActionsEnum[keyof typeof GetReservationAllowedActionsEnum];
/**
 * @export
 */
export const GetReservationByExtIdFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    TotalCostOfStay: 'TotalCostOfStay',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetReservationByExtIdFetchInstructionsEnum = typeof GetReservationByExtIdFetchInstructionsEnum[keyof typeof GetReservationByExtIdFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationByExtIdAllowedActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress'
} as const;
export type GetReservationByExtIdAllowedActionsEnum = typeof GetReservationByExtIdAllowedActionsEnum[keyof typeof GetReservationByExtIdAllowedActionsEnum];
/**
 * @export
 */
export const GetReservationIndicatorsCheckInstructionsEnum = {
    HasDepositPolicies: 'HasDepositPolicies',
    HasCancellationPolicies: 'HasCancellationPolicies'
} as const;
export type GetReservationIndicatorsCheckInstructionsEnum = typeof GetReservationIndicatorsCheckInstructionsEnum[keyof typeof GetReservationIndicatorsCheckInstructionsEnum];
/**
 * @export
 */
export const GetReservationsSearchTypeEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationsSearchTypeEnum = typeof GetReservationsSearchTypeEnum[keyof typeof GetReservationsSearchTypeEnum];
/**
 * @export
 */
export const GetReservationsOrderByEnum = {
    Nights: 'Nights',
    ArrivalDate: 'ArrivalDate',
    ArrivalDateEtr: 'ArrivalDateETR',
    DepartureDate: 'DepartureDate',
    GuestSurname: 'GuestSurname',
    RateAmount: 'RateAmount',
    RateCode: 'RateCode',
    Room: 'Room',
    RoomType: 'RoomType'
} as const;
export type GetReservationsOrderByEnum = typeof GetReservationsOrderByEnum[keyof typeof GetReservationsOrderByEnum];
/**
 * @export
 */
export const GetReservationsSortOrderEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetReservationsSortOrderEnum = typeof GetReservationsSortOrderEnum[keyof typeof GetReservationsSortOrderEnum];
/**
 * @export
 */
export const GetReservationsHousekeepingRoomStatusesEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetReservationsHousekeepingRoomStatusesEnum = typeof GetReservationsHousekeepingRoomStatusesEnum[keyof typeof GetReservationsHousekeepingRoomStatusesEnum];
/**
 * @export
 */
export const GetReservationsFetchInstructionsEnum = {
    Reservation: 'Reservation',
    ReservationId: 'ReservationID',
    Indicators: 'Indicators',
    Deposits: 'Deposits',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestServiceStatus: 'GuestServiceStatus',
    MasterInfo: 'MasterInfo',
    CancellationInfo: 'CancellationInfo',
    BlockReservations: 'BlockReservations',
    TaxType: 'TaxType',
    GuestDeviceNotification: 'GuestDeviceNotification',
    RoomAssignedByAi: 'RoomAssignedByAI'
} as const;
export type GetReservationsFetchInstructionsEnum = typeof GetReservationsFetchInstructionsEnum[keyof typeof GetReservationsFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationsAllowedReservationActionsEnum = {
    Cancel: 'Cancel',
    Move: 'Move',
    PreCharge: 'PreCharge',
    PostCharge: 'PostCharge',
    FacilitySchedule: 'FacilitySchedule',
    Upsell: 'Upsell',
    PreCheckIn: 'PreCheckIn',
    PostToNoShowCancel: 'PostToNoShowCancel',
    NoShow: 'NoShow',
    NameChange: 'NameChange',
    Discount: 'Discount',
    HouseKeeping: 'HouseKeeping',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership',
    EnrollInProgress: 'EnrollInProgress',
    MemberAwardAttached: 'MemberAwardAttached'
} as const;
export type GetReservationsAllowedReservationActionsEnum = typeof GetReservationsAllowedReservationActionsEnum[keyof typeof GetReservationsAllowedReservationActionsEnum];
/**
 * @export
 */
export const GetReservationsSearchTypesEnum = {
    Any: 'Any',
    DayUse: 'DayUse',
    Arrival: 'Arrival',
    Arrived: 'Arrived',
    Departure: 'Departure',
    WaitList: 'WaitList',
    Cancellation: 'Cancellation',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow',
    Complimentary: 'Complimentary',
    InHouse: 'InHouse',
    PostStayPendingBalance: 'PostStayPendingBalance',
    PreRegistered: 'PreRegistered',
    PostToRoom: 'PostToRoom',
    OpenFolio: 'OpenFolio',
    ScheduledCheckOut: 'ScheduledCheckOut',
    Queued: 'Queued',
    MobileCheckout: 'MobileCheckout',
    RegisteredAndInHouse: 'RegisteredAndInHouse',
    ResvBlockTraces: 'ResvBlockTraces',
    GuestMessages: 'GuestMessages',
    MassCancellation: 'MassCancellation',
    Operator: 'Operator',
    Turndown: 'Turndown',
    WalkIn: 'WalkIn',
    AdvanceCheckedIn: 'AdvanceCheckedIn',
    OpenBalance: 'OpenBalance',
    AutoFolioSettlement: 'AutoFolioSettlement',
    Routing: 'Routing',
    PlayerSnapshot: 'PlayerSnapshot'
} as const;
export type GetReservationsSearchTypesEnum = typeof GetReservationsSearchTypesEnum[keyof typeof GetReservationsSearchTypesEnum];
/**
 * @export
 */
export const GetReservationsReservationStatusesEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetReservationsReservationStatusesEnum = typeof GetReservationsReservationStatusesEnum[keyof typeof GetReservationsReservationStatusesEnum];
/**
 * @export
 */
export const GetReservationsRoomReadyStatusesEnum = {
    Pending: 'Pending',
    Completed: 'Completed',
    Failed: 'Failed',
    Sent: 'Sent',
    Received: 'Received',
    Cancelled: 'Cancelled',
    PendingAvailability: 'PendingAvailability'
} as const;
export type GetReservationsRoomReadyStatusesEnum = typeof GetReservationsRoomReadyStatusesEnum[keyof typeof GetReservationsRoomReadyStatusesEnum];
/**
 * @export
 */
export const GetReservationsSummaryReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    CheckedIn: 'CheckedIn',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    InHouse: 'InHouse',
    NoShow: 'NoShow',
    WaitList: 'WaitList'
} as const;
export type GetReservationsSummaryReservationStatusEnum = typeof GetReservationsSummaryReservationStatusEnum[keyof typeof GetReservationsSummaryReservationStatusEnum];
/**
 * @export
 */
export const GetReservationsToShareByProfileIdFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    TotalCostOfStay: 'TotalCostOfStay',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ServiceRequests: 'ServiceRequests',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    CustomNameValue: 'CustomNameValue',
    CustomChargeExemptions: 'CustomChargeExemptions'
} as const;
export type GetReservationsToShareByProfileIdFetchInstructionsEnum = typeof GetReservationsToShareByProfileIdFetchInstructionsEnum[keyof typeof GetReservationsToShareByProfileIdFetchInstructionsEnum];
/**
 * @export
 */
export const GetReservationsToShareByReservationIdFetchInstructionsEnum = {
    Reservation: 'Reservation',
    Comments: 'Comments',
    GuestComments: 'GuestComments',
    Packages: 'Packages',
    InventoryItems: 'InventoryItems',
    ReservationPaymentMethods: 'ReservationPaymentMethods',
    RoutingInstructions: 'RoutingInstructions',
    Preferences: 'Preferences',
    Memberships: 'Memberships',
    Alerts: 'Alerts',
    Traces: 'Traces',
    ConfirmationLetters: 'ConfirmationLetters',
    CallHistory: 'CallHistory',
    FixedCharges: 'FixedCharges',
    GuestMessages: 'GuestMessages',
    ReservationPolicies: 'ReservationPolicies',
    Indicators: 'Indicators',
    LinkedReservations: 'LinkedReservations',
    RevenuesAndBalances: 'RevenuesAndBalances',
    GuestLastStay: 'GuestLastStay',
    ECoupons: 'ECoupons',
    TrackItItems: 'TrackItItems',
    TotalCostOfStay: 'TotalCostOfStay',
    ReservationAwards: 'ReservationAwards',
    WebRegistrationCards: 'WebRegistrationCards',
    ServiceRequests: 'ServiceRequests',
    ReservationActivities: 'ReservationActivities',
    ScheduledActivities: 'ScheduledActivities',
    PrepaidCards: 'PrepaidCards',
    Shares: 'Shares',
    Attachments: 'Attachments',
    Locators: 'Locators',
    ProfileAwards: 'ProfileAwards',
    TransactionDiversions: 'TransactionDiversions',
    Tickets: 'Tickets',
    GuestMemberships: 'GuestMemberships',
    ECertificates: 'ECertificates',
    UpsellInfo: 'UpsellInfo',
    RoomAssignedByAi: 'RoomAssignedByAI',
    CustomNameValue: 'CustomNameValue',
    CustomChargeExemptions: 'CustomChargeExemptions'
} as const;
export type GetReservationsToShareByReservationIdFetchInstructionsEnum = typeof GetReservationsToShareByReservationIdFetchInstructionsEnum[keyof typeof GetReservationsToShareByReservationIdFetchInstructionsEnum];
/**
 * @export
 */
export const GetRoomCalendarSortingByEnum = {
    Default: 'Default',
    Room: 'Room',
    RoomType: 'RoomType',
    RoomStatus: 'RoomStatus'
} as const;
export type GetRoomCalendarSortingByEnum = typeof GetRoomCalendarSortingByEnum[keyof typeof GetRoomCalendarSortingByEnum];
/**
 * @export
 */
export const GetRoomCalendarRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetRoomCalendarRoomStatusEnum = typeof GetRoomCalendarRoomStatusEnum[keyof typeof GetRoomCalendarRoomStatusEnum];
/**
 * @export
 */
export const GetSellMessagesFetchInstructionsEnum = {
    RateCodes: 'RateCodes',
    RoomTypes: 'RoomTypes'
} as const;
export type GetSellMessagesFetchInstructionsEnum = typeof GetSellMessagesFetchInstructionsEnum[keyof typeof GetSellMessagesFetchInstructionsEnum];
/**
 * @export
 */
export const GetSellMessagesUsedInModuleEnum = {
    Blocks: 'Blocks',
    Reservations: 'Reservations',
    FunctionDiary: 'FunctionDiary',
    LookToBookSales: 'LookToBookSales',
    GroupRoomsControl: 'GroupRoomsControl'
} as const;
export type GetSellMessagesUsedInModuleEnum = typeof GetSellMessagesUsedInModuleEnum[keyof typeof GetSellMessagesUsedInModuleEnum];
