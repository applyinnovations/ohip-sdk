/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PostCompRedemptionsRSCompRedemptionsType } from './PostCompRedemptionsRSCompRedemptionsType';
import {
    PostCompRedemptionsRSCompRedemptionsTypeFromJSON,
    PostCompRedemptionsRSCompRedemptionsTypeFromJSONTyped,
    PostCompRedemptionsRSCompRedemptionsTypeToJSON,
} from './PostCompRedemptionsRSCompRedemptionsType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response type of Complimentary Redemptions for posting.
 * @export
 * @interface PostCompRedemptionsRS
 */
export interface PostCompRedemptionsRS {
    /**
     * 
     * @type {PostCompRedemptionsRSCompRedemptionsType}
     * @memberof PostCompRedemptionsRS
     */
    compRedemptions?: PostCompRedemptionsRSCompRedemptionsType;
    /**
     * 
     * @type {WarningsType}
     * @memberof PostCompRedemptionsRS
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the PostCompRedemptionsRS interface.
 */
export function instanceOfPostCompRedemptionsRS(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostCompRedemptionsRSFromJSON(json: any): PostCompRedemptionsRS {
    return PostCompRedemptionsRSFromJSONTyped(json, false);
}

export function PostCompRedemptionsRSFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCompRedemptionsRS {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compRedemptions': !exists(json, 'compRedemptions') ? undefined : PostCompRedemptionsRSCompRedemptionsTypeFromJSON(json['compRedemptions']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function PostCompRedemptionsRSToJSON(value?: PostCompRedemptionsRS | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compRedemptions': PostCompRedemptionsRSCompRedemptionsTypeToJSON(value.compRedemptions),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

