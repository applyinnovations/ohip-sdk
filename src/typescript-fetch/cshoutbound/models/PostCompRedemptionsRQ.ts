/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PostCompRedemptionsRQCompRedemptionsType } from './PostCompRedemptionsRQCompRedemptionsType';
import {
    PostCompRedemptionsRQCompRedemptionsTypeFromJSON,
    PostCompRedemptionsRQCompRedemptionsTypeFromJSONTyped,
    PostCompRedemptionsRQCompRedemptionsTypeToJSON,
} from './PostCompRedemptionsRQCompRedemptionsType';

/**
 * Request type of Complimentary Redemptions posting.
 * @export
 * @interface PostCompRedemptionsRQ
 */
export interface PostCompRedemptionsRQ {
    /**
     * 
     * @type {PostCompRedemptionsRQCompRedemptionsType}
     * @memberof PostCompRedemptionsRQ
     */
    compRedemptions?: PostCompRedemptionsRQCompRedemptionsType;
}

/**
 * Check if a given object implements the PostCompRedemptionsRQ interface.
 */
export function instanceOfPostCompRedemptionsRQ(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostCompRedemptionsRQFromJSON(json: any): PostCompRedemptionsRQ {
    return PostCompRedemptionsRQFromJSONTyped(json, false);
}

export function PostCompRedemptionsRQFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostCompRedemptionsRQ {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compRedemptions': !exists(json, 'compRedemptions') ? undefined : PostCompRedemptionsRQCompRedemptionsTypeFromJSON(json['compRedemptions']),
    };
}

export function PostCompRedemptionsRQToJSON(value?: PostCompRedemptionsRQ | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compRedemptions': PostCompRedemptionsRQCompRedemptionsTypeToJSON(value.compRedemptions),
    };
}

