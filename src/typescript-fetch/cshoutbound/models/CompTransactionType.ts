/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Contains the transaction to be submitted to the vendor
 * @export
 * @interface CompTransactionType
 */
export interface CompTransactionType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CompTransactionType
     */
    amount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CompTransactionType
     */
    postedAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CompTransactionType
     */
    debit?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CompTransactionType
     */
    credit?: CurrencyAmountType;
    /**
     * Family name, last name or Company Name.
     * @type {string}
     * @memberof CompTransactionType
     */
    name?: string;
    /**
     * Given name, first name or names.
     * @type {string}
     * @memberof CompTransactionType
     */
    firstName?: string;
    /**
     * Membership number.
     * @type {string}
     * @memberof CompTransactionType
     */
    membershipId?: string;
    /**
     * Membership number.
     * @type {string}
     * @memberof CompTransactionType
     */
    membershipType?: string;
    /**
     * Approval date of the posting.
     * @type {Date}
     * @memberof CompTransactionType
     */
    approvalDate?: Date;
    /**
     * Approval status of the posting.
     * @type {string}
     * @memberof CompTransactionType
     */
    approvalStatus?: string;
    /**
     * Approval code of the posting.
     * @type {string}
     * @memberof CompTransactionType
     */
    approvalCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CompTransactionType
     */
    authorizerId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CompTransactionType
     */
    guestNameId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CompTransactionType
     */
    resvNameId?: UniqueIDType;
    /**
     * Confirmation number associated with the transaction.
     * @type {string}
     * @memberof CompTransactionType
     */
    confirmationNo?: string;
    /**
     * Room number associated with the transaction.
     * @type {string}
     * @memberof CompTransactionType
     */
    roomId?: string;
    /**
     * Comp number associated with the transaction.
     * @type {string}
     * @memberof CompTransactionType
     */
    compId?: string;
    /**
     * Window number where the transaction is posted.
     * @type {number}
     * @memberof CompTransactionType
     */
    folioNo?: number;
    /**
     * Subgroup for the transaction.
     * @type {string}
     * @memberof CompTransactionType
     */
    subGroup?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CompTransactionType
     */
    transactionAmount?: CurrencyAmountType;
    /**
     * Transaction Number for which request is being submitted.
     * @type {number}
     * @memberof CompTransactionType
     */
    transactionId?: number;
    /**
     * Transaction code.
     * @type {string}
     * @memberof CompTransactionType
     */
    transactionCode?: string;
    /**
     * Transaction description.
     * @type {string}
     * @memberof CompTransactionType
     */
    transactionDescription?: string;
    /**
     * Transaction status.
     * @type {string}
     * @memberof CompTransactionType
     */
    transactionStatus?: string;
    /**
     * Transaction date of the posting.
     * @type {Date}
     * @memberof CompTransactionType
     */
    transactionDate?: Date;
    /**
     * User name.
     * @type {string}
     * @memberof CompTransactionType
     */
    userName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CompTransactionType
     */
    externalUserId?: UniqueIDType;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof CompTransactionType
     */
    cashierId?: number;
}

/**
 * Check if a given object implements the CompTransactionType interface.
 */
export function instanceOfCompTransactionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompTransactionTypeFromJSON(json: any): CompTransactionType {
    return CompTransactionTypeFromJSONTyped(json, false);
}

export function CompTransactionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompTransactionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'postedAmount': !exists(json, 'postedAmount') ? undefined : CurrencyAmountTypeFromJSON(json['postedAmount']),
        'debit': !exists(json, 'debit') ? undefined : CurrencyAmountTypeFromJSON(json['debit']),
        'credit': !exists(json, 'credit') ? undefined : CurrencyAmountTypeFromJSON(json['credit']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'membershipId': !exists(json, 'membershipId') ? undefined : json['membershipId'],
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'approvalDate': !exists(json, 'approvalDate') ? undefined : (new Date(json['approvalDate'])),
        'approvalStatus': !exists(json, 'approvalStatus') ? undefined : json['approvalStatus'],
        'approvalCode': !exists(json, 'approvalCode') ? undefined : json['approvalCode'],
        'authorizerId': !exists(json, 'authorizerId') ? undefined : UniqueIDTypeFromJSON(json['authorizerId']),
        'guestNameId': !exists(json, 'guestNameId') ? undefined : UniqueIDTypeFromJSON(json['guestNameId']),
        'resvNameId': !exists(json, 'resvNameId') ? undefined : UniqueIDTypeFromJSON(json['resvNameId']),
        'confirmationNo': !exists(json, 'confirmationNo') ? undefined : json['confirmationNo'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'compId': !exists(json, 'compId') ? undefined : json['compId'],
        'folioNo': !exists(json, 'folioNo') ? undefined : json['folioNo'],
        'subGroup': !exists(json, 'subGroup') ? undefined : json['subGroup'],
        'transactionAmount': !exists(json, 'transactionAmount') ? undefined : CurrencyAmountTypeFromJSON(json['transactionAmount']),
        'transactionId': !exists(json, 'transactionId') ? undefined : json['transactionId'],
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionDescription': !exists(json, 'transactionDescription') ? undefined : json['transactionDescription'],
        'transactionStatus': !exists(json, 'transactionStatus') ? undefined : json['transactionStatus'],
        'transactionDate': !exists(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'externalUserId': !exists(json, 'externalUserId') ? undefined : UniqueIDTypeFromJSON(json['externalUserId']),
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
    };
}

export function CompTransactionTypeToJSON(value?: CompTransactionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'postedAmount': CurrencyAmountTypeToJSON(value.postedAmount),
        'debit': CurrencyAmountTypeToJSON(value.debit),
        'credit': CurrencyAmountTypeToJSON(value.credit),
        'name': value.name,
        'firstName': value.firstName,
        'membershipId': value.membershipId,
        'membershipType': value.membershipType,
        'approvalDate': value.approvalDate === undefined ? undefined : (value.approvalDate.toISOString().substring(0,10)),
        'approvalStatus': value.approvalStatus,
        'approvalCode': value.approvalCode,
        'authorizerId': UniqueIDTypeToJSON(value.authorizerId),
        'guestNameId': UniqueIDTypeToJSON(value.guestNameId),
        'resvNameId': UniqueIDTypeToJSON(value.resvNameId),
        'confirmationNo': value.confirmationNo,
        'roomId': value.roomId,
        'compId': value.compId,
        'folioNo': value.folioNo,
        'subGroup': value.subGroup,
        'transactionAmount': CurrencyAmountTypeToJSON(value.transactionAmount),
        'transactionId': value.transactionId,
        'transactionCode': value.transactionCode,
        'transactionDescription': value.transactionDescription,
        'transactionStatus': value.transactionStatus,
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString().substring(0,10)),
        'userName': value.userName,
        'externalUserId': UniqueIDTypeToJSON(value.externalUserId),
        'cashierId': value.cashierId,
    };
}

