/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Information about a Complimentary Redemption for approval.
 * @export
 * @interface AuthorizeCompRedemptionsRQCompRedemptionType
 */
export interface AuthorizeCompRedemptionsRQCompRedemptionType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AuthorizeCompRedemptionsRQCompRedemptionType
     */
    amount?: CurrencyAmountType;
    /**
     * The associated redemption code.
     * @type {string}
     * @memberof AuthorizeCompRedemptionsRQCompRedemptionType
     */
    code?: string;
    /**
     * Description of the Complimentary Redemption code.
     * @type {string}
     * @memberof AuthorizeCompRedemptionsRQCompRedemptionType
     */
    description?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AuthorizeCompRedemptionsRQCompRedemptionType
     */
    availableAmount?: CurrencyAmountType;
}

/**
 * Check if a given object implements the AuthorizeCompRedemptionsRQCompRedemptionType interface.
 */
export function instanceOfAuthorizeCompRedemptionsRQCompRedemptionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthorizeCompRedemptionsRQCompRedemptionTypeFromJSON(json: any): AuthorizeCompRedemptionsRQCompRedemptionType {
    return AuthorizeCompRedemptionsRQCompRedemptionTypeFromJSONTyped(json, false);
}

export function AuthorizeCompRedemptionsRQCompRedemptionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizeCompRedemptionsRQCompRedemptionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'availableAmount': !exists(json, 'availableAmount') ? undefined : CurrencyAmountTypeFromJSON(json['availableAmount']),
    };
}

export function AuthorizeCompRedemptionsRQCompRedemptionTypeToJSON(value?: AuthorizeCompRedemptionsRQCompRedemptionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'code': value.code,
        'description': value.description,
        'availableAmount': CurrencyAmountTypeToJSON(value.availableAmount),
    };
}

