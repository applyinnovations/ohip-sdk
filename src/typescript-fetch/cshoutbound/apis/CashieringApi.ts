/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering Outbound API
 * APIs to cater for Cashiering related external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthorizeCompRedemptionsRQ,
  AuthorizeCompRedemptionsRS,
  CompTransactionsCriteriaType,
  ExceptionDetailType,
  FetchCompRedemptionsRS,
  PostCompRedemptionsRQ,
  PostCompRedemptionsRS,
  ReverseCompRedemptionsRQ,
  SendCompTransactionsStatus,
  Status,
} from '../models/index';
import {
    AuthorizeCompRedemptionsRQFromJSON,
    AuthorizeCompRedemptionsRQToJSON,
    AuthorizeCompRedemptionsRSFromJSON,
    AuthorizeCompRedemptionsRSToJSON,
    CompTransactionsCriteriaTypeFromJSON,
    CompTransactionsCriteriaTypeToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchCompRedemptionsRSFromJSON,
    FetchCompRedemptionsRSToJSON,
    PostCompRedemptionsRQFromJSON,
    PostCompRedemptionsRQToJSON,
    PostCompRedemptionsRSFromJSON,
    PostCompRedemptionsRSToJSON,
    ReverseCompRedemptionsRQFromJSON,
    ReverseCompRedemptionsRQToJSON,
    SendCompTransactionsStatusFromJSON,
    SendCompTransactionsStatusToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface ApproveCompPostingsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    postings: CompTransactionsCriteriaType;
    acceptLanguage?: string;
}

export interface AuthorizeCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    authorizeCompRedemptions: AuthorizeCompRedemptionsRQ;
    acceptLanguage?: string;
}

export interface GetCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    acceptLanguage?: string;
}

export interface PostCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    postCompRedemptions: PostCompRedemptionsRQ;
    acceptLanguage?: string;
}

export interface ReverseCompPostingsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    postings: CompTransactionsCriteriaType;
    acceptLanguage?: string;
}

export interface ReverseCompRedemptionsRequest {
    membershipId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    reverseCompRedemptions: ReverseCompRedemptionsRQ;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CashieringApi extends runtime.BaseAPI {

    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>approveCompPostings</p>
     * Operation to request for comp postings approval.
     */
    async approveCompPostingsRaw(requestParameters: ApproveCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendCompTransactionsStatus>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling approveCompPostings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling approveCompPostings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling approveCompPostings.');
        }

        if (requestParameters.postings === null || requestParameters.postings === undefined) {
            throw new runtime.RequiredError('postings','Required parameter requestParameters.postings was null or undefined when calling approveCompPostings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compPostingsApproval`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompTransactionsCriteriaTypeToJSON(requestParameters.postings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendCompTransactionsStatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to submit Comp Transactions. <p><strong>OperationId:</strong>approveCompPostings</p>
     * Operation to request for comp postings approval.
     */
    async approveCompPostings(requestParameters: ApproveCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendCompTransactionsStatus> {
        const response = await this.approveCompPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to authorize complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>authorizeCompRedemptions</p>
     * Operation to authorize complimentary redemptions for a guest having PTS Membership Type
     */
    async authorizeCompRedemptionsRaw(requestParameters: AuthorizeCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizeCompRedemptionsRS>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling authorizeCompRedemptions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling authorizeCompRedemptions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling authorizeCompRedemptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling authorizeCompRedemptions.');
        }

        if (requestParameters.authorizeCompRedemptions === null || requestParameters.authorizeCompRedemptions === undefined) {
            throw new runtime.RequiredError('authorizeCompRedemptions','Required parameter requestParameters.authorizeCompRedemptions was null or undefined when calling authorizeCompRedemptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptionAuthorizations`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizeCompRedemptionsRQToJSON(requestParameters.authorizeCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizeCompRedemptionsRSFromJSON(jsonValue));
    }

    /**
     * You can use this API to authorize complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>authorizeCompRedemptions</p>
     * Operation to authorize complimentary redemptions for a guest having PTS Membership Type
     */
    async authorizeCompRedemptions(requestParameters: AuthorizeCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizeCompRedemptionsRS> {
        const response = await this.authorizeCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>getCompRedemptions</p>
     * Operation to get complimentary redemptions for a guest having PTS Membership Type
     */
    async getCompRedemptionsRaw(requestParameters: GetCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchCompRedemptionsRS>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling getCompRedemptions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCompRedemptions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCompRedemptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCompRedemptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptions`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchCompRedemptionsRSFromJSON(jsonValue));
    }

    /**
     * You can use this API to get complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>getCompRedemptions</p>
     * Operation to get complimentary redemptions for a guest having PTS Membership Type
     */
    async getCompRedemptions(requestParameters: GetCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchCompRedemptionsRS> {
        const response = await this.getCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to post complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptionsRaw(requestParameters: PostCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostCompRedemptionsRS>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling postCompRedemptions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCompRedemptions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCompRedemptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCompRedemptions.');
        }

        if (requestParameters.postCompRedemptions === null || requestParameters.postCompRedemptions === undefined) {
            throw new runtime.RequiredError('postCompRedemptions','Required parameter requestParameters.postCompRedemptions was null or undefined when calling postCompRedemptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptionPostings`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCompRedemptionsRQToJSON(requestParameters.postCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostCompRedemptionsRSFromJSON(jsonValue));
    }

    /**
     * You can use this API to post complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>postCompRedemptions</p>
     * Operation to post complimentary redemptions for a guest having PTS Membership Type
     */
    async postCompRedemptions(requestParameters: PostCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostCompRedemptionsRS> {
        const response = await this.postCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse Comp Transactions. <p><strong>OperationId:</strong>reverseCompPostings</p>
     * Operation to request for comp postings reversal.
     */
    async reverseCompPostingsRaw(requestParameters: ReverseCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling reverseCompPostings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling reverseCompPostings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling reverseCompPostings.');
        }

        if (requestParameters.postings === null || requestParameters.postings === undefined) {
            throw new runtime.RequiredError('postings','Required parameter requestParameters.postings was null or undefined when calling reverseCompPostings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compPostingsReversal`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompTransactionsCriteriaTypeToJSON(requestParameters.postings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse Comp Transactions. <p><strong>OperationId:</strong>reverseCompPostings</p>
     * Operation to request for comp postings reversal.
     */
    async reverseCompPostings(requestParameters: ReverseCompPostingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseCompPostingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to reverse complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptionsRaw(requestParameters: ReverseCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling reverseCompRedemptions.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling reverseCompRedemptions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling reverseCompRedemptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling reverseCompRedemptions.');
        }

        if (requestParameters.reverseCompRedemptions === null || requestParameters.reverseCompRedemptions === undefined) {
            throw new runtime.RequiredError('reverseCompRedemptions','Required parameter requestParameters.reverseCompRedemptions was null or undefined when calling reverseCompRedemptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}/compRedemptionReversals`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReverseCompRedemptionsRQToJSON(requestParameters.reverseCompRedemptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to reverse complimentary redemptions for a guest having PTS Membership Type <p><strong>OperationId:</strong>reverseCompRedemptions</p>
     * Operation to reverse complimentary redemptions for a guest having PTS Membership Type
     */
    async reverseCompRedemptions(requestParameters: ReverseCompRedemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.reverseCompRedemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
