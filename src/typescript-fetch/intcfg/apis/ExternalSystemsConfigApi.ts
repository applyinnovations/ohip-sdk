/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeDeliveryMethods,
  ChangeExternalDeviceConfigurations,
  ChangeInterfaceAccount,
  ChangeInterfaceMachine,
  ChangeInterfaceRight,
  ChangeInterfaceRoom,
  ChangeInterfaceRoomStatus,
  ChangeInterfaceUnitCharges,
  ChangeUDFMapping,
  ChangedDeliveryMethods,
  ChangedExternalDeviceConfigurations,
  ChangedInterfaceAccount,
  ChangedInterfaceMachine,
  ChangedInterfaceRight,
  ChangedInterfaceRoom,
  ChangedInterfaceRoomStatus,
  ChangedInterfaceUnitCharges,
  ChangedUDFMapping,
  CreateDeliveryMethods,
  CreateInterfaceAccount,
  CreateInterfaceRoom,
  CreatePublishers,
  ExceptionDetailType,
  FetchedConfiguredExternalDevices,
  FetchedDeliveryMethods,
  FetchedExternalDatabaseAvailableProperties,
  FetchedExternalDeviceConfigurations,
  FetchedHotelInterfaceControllerRegistry,
  FetchedHotelInterfaceDetails,
  FetchedHotelInterfaceErrors,
  FetchedHotelInterfaceFailedMessages,
  FetchedHotelInterfaceSchemas,
  FetchedHotelInterfaces,
  FetchedInterfaceUnitCharges,
  FetchedPublishers,
  FetchedUDFMappings,
  HotelInterface,
  ImportInterfaceRooms,
  InterfaceMachineType,
  InterfaceRightType,
  InterfaceRoomStatusType,
  InterfaceRoomType,
  OperaVersion,
  Status,
} from '../models/index';
import {
    ChangeDeliveryMethodsFromJSON,
    ChangeDeliveryMethodsToJSON,
    ChangeExternalDeviceConfigurationsFromJSON,
    ChangeExternalDeviceConfigurationsToJSON,
    ChangeInterfaceAccountFromJSON,
    ChangeInterfaceAccountToJSON,
    ChangeInterfaceMachineFromJSON,
    ChangeInterfaceMachineToJSON,
    ChangeInterfaceRightFromJSON,
    ChangeInterfaceRightToJSON,
    ChangeInterfaceRoomFromJSON,
    ChangeInterfaceRoomToJSON,
    ChangeInterfaceRoomStatusFromJSON,
    ChangeInterfaceRoomStatusToJSON,
    ChangeInterfaceUnitChargesFromJSON,
    ChangeInterfaceUnitChargesToJSON,
    ChangeUDFMappingFromJSON,
    ChangeUDFMappingToJSON,
    ChangedDeliveryMethodsFromJSON,
    ChangedDeliveryMethodsToJSON,
    ChangedExternalDeviceConfigurationsFromJSON,
    ChangedExternalDeviceConfigurationsToJSON,
    ChangedInterfaceAccountFromJSON,
    ChangedInterfaceAccountToJSON,
    ChangedInterfaceMachineFromJSON,
    ChangedInterfaceMachineToJSON,
    ChangedInterfaceRightFromJSON,
    ChangedInterfaceRightToJSON,
    ChangedInterfaceRoomFromJSON,
    ChangedInterfaceRoomToJSON,
    ChangedInterfaceRoomStatusFromJSON,
    ChangedInterfaceRoomStatusToJSON,
    ChangedInterfaceUnitChargesFromJSON,
    ChangedInterfaceUnitChargesToJSON,
    ChangedUDFMappingFromJSON,
    ChangedUDFMappingToJSON,
    CreateDeliveryMethodsFromJSON,
    CreateDeliveryMethodsToJSON,
    CreateInterfaceAccountFromJSON,
    CreateInterfaceAccountToJSON,
    CreateInterfaceRoomFromJSON,
    CreateInterfaceRoomToJSON,
    CreatePublishersFromJSON,
    CreatePublishersToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchedConfiguredExternalDevicesFromJSON,
    FetchedConfiguredExternalDevicesToJSON,
    FetchedDeliveryMethodsFromJSON,
    FetchedDeliveryMethodsToJSON,
    FetchedExternalDatabaseAvailablePropertiesFromJSON,
    FetchedExternalDatabaseAvailablePropertiesToJSON,
    FetchedExternalDeviceConfigurationsFromJSON,
    FetchedExternalDeviceConfigurationsToJSON,
    FetchedHotelInterfaceControllerRegistryFromJSON,
    FetchedHotelInterfaceControllerRegistryToJSON,
    FetchedHotelInterfaceDetailsFromJSON,
    FetchedHotelInterfaceDetailsToJSON,
    FetchedHotelInterfaceErrorsFromJSON,
    FetchedHotelInterfaceErrorsToJSON,
    FetchedHotelInterfaceFailedMessagesFromJSON,
    FetchedHotelInterfaceFailedMessagesToJSON,
    FetchedHotelInterfaceSchemasFromJSON,
    FetchedHotelInterfaceSchemasToJSON,
    FetchedHotelInterfacesFromJSON,
    FetchedHotelInterfacesToJSON,
    FetchedInterfaceUnitChargesFromJSON,
    FetchedInterfaceUnitChargesToJSON,
    FetchedPublishersFromJSON,
    FetchedPublishersToJSON,
    FetchedUDFMappingsFromJSON,
    FetchedUDFMappingsToJSON,
    HotelInterfaceFromJSON,
    HotelInterfaceToJSON,
    ImportInterfaceRoomsFromJSON,
    ImportInterfaceRoomsToJSON,
    InterfaceMachineTypeFromJSON,
    InterfaceMachineTypeToJSON,
    InterfaceRightTypeFromJSON,
    InterfaceRightTypeToJSON,
    InterfaceRoomStatusTypeFromJSON,
    InterfaceRoomStatusTypeToJSON,
    InterfaceRoomTypeFromJSON,
    InterfaceRoomTypeToJSON,
    OperaVersionFromJSON,
    OperaVersionToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface ClearCacheRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    type?: DeleteDeliveryMethodsTypeEnum;
    options?: Set<DeleteDeliveryMethodsOptionsEnum>;
    configurationId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHotelInterfaceRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    logo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInterfaceAccountRequest {
    accountId: string;
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoBalance?: boolean;
    paymentMethod?: string;
    account?: string;
    accountDescription?: string;
    salesOutlet?: string;
    trxCode?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInterfaceMachineRequest {
    machineId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    machine?: string;
    program?: string;
    controllerPort?: number;
    vncPort?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInterfaceRightRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    right?: number;
    code?: string;
    description?: string;
    interfaceRightDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInterfaceRoomRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: string;
    roomNumber?: string;
    lineNumber?: string;
    oldLineNumber?: string;
    type?: string;
    dataLine?: DeleteInterfaceRoomDataLineEnum;
    dataLineId?: string;
    wakeUpCall?: boolean;
    doNotDisturb?: DeleteInterfaceRoomDoNotDisturbEnum;
    classOfService?: DeleteInterfaceRoomClassOfServiceEnum;
    directInwardDial?: DeleteInterfaceRoomDirectInwardDialEnum;
    messageWaiting?: DeleteInterfaceRoomMessageWaitingEnum;
    maskDialNumber?: DeleteInterfaceRoomMaskDialNumberEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInterfaceRoomStatusRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    entryCode?: string;
    status?: string;
    housekeepingStatus?: string;
    customRoomTranslation?: string;
    description?: string;
    interfaceRoomStatusId?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePublisherRequest {
    hotelId: string;
    externalSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subscriberHotelId?: string;
    code?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetConfiguredExternalDevicesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    active?: boolean;
    id?: string;
    idEditable?: boolean;
    label?: string;
    deviceType?: GetConfiguredExternalDevicesDeviceTypeEnum;
    deviceCode?: GetConfiguredExternalDevicesDeviceCodeEnum;
    deviceArea?: string;
    displayName?: string;
    mobileYN?: boolean;
    desktopYN?: boolean;
    registerAddress?: string;
    deviceValue?: string;
    parameterName?: string;
    parameterValue?: string;
    includeInactive?: boolean;
    fiscalPartnerCode?: string;
    partnerCode?: Array<string>;
    fetchInstruction?: GetConfiguredExternalDevicesFetchInstructionEnum;
    partnerPayloadType?: GetConfiguredExternalDevicesPartnerPayloadTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    croCode?: string;
    usages?: Set<GetDeliveryMethodsUsagesEnum>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalDatabaseAvailablePropertiesRequest {
    databaseId: string;
    interfaceId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    interfaceCodes?: Array<string>;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalDeviceConfigurationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    active?: boolean;
    id?: string;
    idEditable?: boolean;
    label?: string;
    deviceType?: GetExternalDeviceConfigurationsDeviceTypeEnum;
    deviceCode?: GetExternalDeviceConfigurationsDeviceCodeEnum;
    deviceArea?: string;
    displayName?: string;
    mobileYN?: boolean;
    desktopYN?: boolean;
    registerAddress?: string;
    deviceValue?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceControllerRegistryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    machine?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceDetailsRequest {
    logo: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetHotelInterfaceDetailsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceErrorsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceErrorsInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceFailedMessagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceFailedMessagesInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceSchemasRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceSchemasInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfacesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfacesInterfaceTypesEnum>;
    logosCodes?: Array<string>;
    includeInactive?: boolean;
    includeOutboundCode?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceMachinesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceRightsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceRoomStatusesRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceRoomsRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fromRoom?: string;
    toRoom?: string;
    fromLineType?: string;
    toLineType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceUnitChargesRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    logo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPublishersRequest {
    externalSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUDFMappingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    type?: string;
    uDFName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ImportInterfaceRoomsRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    importInterfaceRooms: ImportInterfaceRooms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createDeliveryMethods: CreateDeliveryMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelInterfaceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelInterface: HotelInterface;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostInterfaceAccountRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createInterfaceAccount: CreateInterfaceAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostInterfaceRoomRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createInterfaceRoom: CreateInterfaceRoom;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPublishersRequest {
    hotelId: string;
    externalSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createPublishers: CreatePublishers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeDeliveryMethods: ChangeDeliveryMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutExternalDeviceConfigurationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeExternalDeviceConfigurations: ChangeExternalDeviceConfigurations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutHotelInterfaceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelInterface: HotelInterface;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceAccountRequest {
    accountId: string;
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceAccount: ChangeInterfaceAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceMachineRequest {
    machineId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceMachine: ChangeInterfaceMachine;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceRightRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceRight: ChangeInterfaceRight;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceRoomRequest {
    roomId: string;
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceRoom: ChangeInterfaceRoom;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceRoomStatusRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceRoomStatus: ChangeInterfaceRoomStatus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceUnitChargesRequest {
    interfaceId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceUnitCharges: ChangeInterfaceUnitCharges;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutUDFMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeUDFMapping: ChangeUDFMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ExternalSystemsConfigApi extends runtime.BaseAPI {

    /**
     *  <p><strong>OperationId:</strong>clearCache</p>
     * Operation to clear cache.
     */
    async clearCacheRaw(requestParameters: ClearCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/config/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>clearCache</p>
     * Operation to clear cache.
     */
    async clearCache(requestParameters: ClearCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.clearCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    async deleteDeliveryMethodsRaw(requestParameters: DeleteDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.options) {
            queryParameters['options'] = requestParameters.options;
        }

        if (requestParameters.configurationId) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    async deleteDeliveryMethods(requestParameters: DeleteDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    async deleteHotelInterfaceRaw(requestParameters: DeleteHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteHotelInterface.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.logo !== undefined) {
            queryParameters['logo'] = requestParameters.logo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hotelInerface`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    async deleteHotelInterface(requestParameters: DeleteHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHotelInterfaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceAccount</p>
     * Operation to remove interface account.
     */
    async deleteInterfaceAccountRaw(requestParameters: DeleteInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling deleteInterfaceAccount.');
        }
        
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling deleteInterfaceAccount.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteInterfaceAccount.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.autoBalance !== undefined) {
            queryParameters['autoBalance'] = requestParameters.autoBalance;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.account !== undefined) {
            queryParameters['account'] = requestParameters.account;
        }

        if (requestParameters.accountDescription !== undefined) {
            queryParameters['accountDescription'] = requestParameters.accountDescription;
        }

        if (requestParameters.salesOutlet !== undefined) {
            queryParameters['salesOutlet'] = requestParameters.salesOutlet;
        }

        if (requestParameters.trxCode !== undefined) {
            queryParameters['trxCode'] = requestParameters.trxCode;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceAccount</p>
     * Operation to remove interface account.
     */
    async deleteInterfaceAccount(requestParameters: DeleteInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInterfaceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceMachine</p>
     * Operation to remove interface machine.
     */
    async deleteInterfaceMachineRaw(requestParameters: DeleteInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.machineId === null || requestParameters.machineId === undefined) {
            throw new runtime.RequiredError('machineId','Required parameter requestParameters.machineId was null or undefined when calling deleteInterfaceMachine.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.machine !== undefined) {
            queryParameters['machine'] = requestParameters.machine;
        }

        if (requestParameters.program !== undefined) {
            queryParameters['program'] = requestParameters.program;
        }

        if (requestParameters.controllerPort !== undefined) {
            queryParameters['controllerPort'] = requestParameters.controllerPort;
        }

        if (requestParameters.vncPort !== undefined) {
            queryParameters['vncPort'] = requestParameters.vncPort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/machines/{machineId}`.replace(`{${"machineId"}}`, encodeURIComponent(String(requestParameters.machineId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceMachine</p>
     * Operation to remove interface machine.
     */
    async deleteInterfaceMachine(requestParameters: DeleteInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInterfaceMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    async deleteInterfaceRightRaw(requestParameters: DeleteInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.right !== undefined) {
            queryParameters['right'] = requestParameters.right;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.interfaceRightDescription !== undefined) {
            queryParameters['interfaceRightDescription'] = requestParameters.interfaceRightDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceRights`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    async deleteInterfaceRight(requestParameters: DeleteInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInterfaceRightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoom</p>
     * Operation to remove interface room.
     */
    async deleteInterfaceRoomRaw(requestParameters: DeleteInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling deleteInterfaceRoom.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteInterfaceRoom.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomNumber !== undefined) {
            queryParameters['roomNumber'] = requestParameters.roomNumber;
        }

        if (requestParameters.lineNumber !== undefined) {
            queryParameters['lineNumber'] = requestParameters.lineNumber;
        }

        if (requestParameters.oldLineNumber !== undefined) {
            queryParameters['oldLineNumber'] = requestParameters.oldLineNumber;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.dataLine !== undefined) {
            queryParameters['dataLine'] = requestParameters.dataLine;
        }

        if (requestParameters.dataLineId !== undefined) {
            queryParameters['dataLineId'] = requestParameters.dataLineId;
        }

        if (requestParameters.wakeUpCall !== undefined) {
            queryParameters['wakeUpCall'] = requestParameters.wakeUpCall;
        }

        if (requestParameters.doNotDisturb !== undefined) {
            queryParameters['doNotDisturb'] = requestParameters.doNotDisturb;
        }

        if (requestParameters.classOfService !== undefined) {
            queryParameters['classOfService'] = requestParameters.classOfService;
        }

        if (requestParameters.directInwardDial !== undefined) {
            queryParameters['directInwardDial'] = requestParameters.directInwardDial;
        }

        if (requestParameters.messageWaiting !== undefined) {
            queryParameters['messageWaiting'] = requestParameters.messageWaiting;
        }

        if (requestParameters.maskDialNumber !== undefined) {
            queryParameters['maskDialNumber'] = requestParameters.maskDialNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/rooms`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoom</p>
     * Operation to remove interface room.
     */
    async deleteInterfaceRoom(requestParameters: DeleteInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInterfaceRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoomStatus</p>
     * Operation to remove interface room status.
     */
    async deleteInterfaceRoomStatusRaw(requestParameters: DeleteInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling deleteInterfaceRoomStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteInterfaceRoomStatus.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.entryCode !== undefined) {
            queryParameters['entryCode'] = requestParameters.entryCode;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.housekeepingStatus !== undefined) {
            queryParameters['housekeepingStatus'] = requestParameters.housekeepingStatus;
        }

        if (requestParameters.customRoomTranslation !== undefined) {
            queryParameters['customRoomTranslation'] = requestParameters.customRoomTranslation;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.interfaceRoomStatusId !== undefined) {
            queryParameters['interfaceRoomStatusId'] = requestParameters.interfaceRoomStatusId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/roomStatus`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRoomStatus</p>
     * Operation to remove interface room status.
     */
    async deleteInterfaceRoomStatus(requestParameters: DeleteInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInterfaceRoomStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    async deletePublisherRaw(requestParameters: DeletePublisherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePublisher.');
        }
        
        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling deletePublisher.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.subscriberHotelId !== undefined) {
            queryParameters['subscriberHotelId'] = requestParameters.subscriberHotelId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    async deletePublisher(requestParameters: DeletePublisherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePublisherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getConfiguredExternalDevices</p>
     * Operation to fetch configured external devices.
     */
    async getConfiguredExternalDevicesRaw(requestParameters: GetConfiguredExternalDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedConfiguredExternalDevices>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idEditable !== undefined) {
            queryParameters['idEditable'] = requestParameters.idEditable;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.deviceType !== undefined) {
            queryParameters['deviceType'] = requestParameters.deviceType;
        }

        if (requestParameters.deviceCode !== undefined) {
            queryParameters['deviceCode'] = requestParameters.deviceCode;
        }

        if (requestParameters.deviceArea !== undefined) {
            queryParameters['deviceArea'] = requestParameters.deviceArea;
        }

        if (requestParameters.displayName !== undefined) {
            queryParameters['displayName'] = requestParameters.displayName;
        }

        if (requestParameters.mobileYN !== undefined) {
            queryParameters['mobileYN'] = requestParameters.mobileYN;
        }

        if (requestParameters.desktopYN !== undefined) {
            queryParameters['desktopYN'] = requestParameters.desktopYN;
        }

        if (requestParameters.registerAddress !== undefined) {
            queryParameters['registerAddress'] = requestParameters.registerAddress;
        }

        if (requestParameters.deviceValue !== undefined) {
            queryParameters['deviceValue'] = requestParameters.deviceValue;
        }

        if (requestParameters.parameterName !== undefined) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue !== undefined) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.fiscalPartnerCode !== undefined) {
            queryParameters['fiscalPartnerCode'] = requestParameters.fiscalPartnerCode;
        }

        if (requestParameters.partnerCode) {
            queryParameters['partnerCode'] = requestParameters.partnerCode;
        }

        if (requestParameters.fetchInstruction !== undefined) {
            queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
        }

        if (requestParameters.partnerPayloadType !== undefined) {
            queryParameters['partnerPayloadType'] = requestParameters.partnerPayloadType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/configuredExternalDevices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedConfiguredExternalDevicesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getConfiguredExternalDevices</p>
     * Operation to fetch configured external devices.
     */
    async getConfiguredExternalDevices(requestParameters: GetConfiguredExternalDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedConfiguredExternalDevices> {
        const response = await this.getConfiguredExternalDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    async getDeliveryMethodsRaw(requestParameters: GetDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedDeliveryMethods>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }

        if (requestParameters.usages) {
            queryParameters['usages'] = requestParameters.usages;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedDeliveryMethodsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    async getDeliveryMethods(requestParameters: GetDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedDeliveryMethods> {
        const response = await this.getDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    async getExternalDatabaseAvailablePropertiesRaw(requestParameters: GetExternalDatabaseAvailablePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedExternalDatabaseAvailableProperties>> {
        if (requestParameters.databaseId === null || requestParameters.databaseId === undefined) {
            throw new runtime.RequiredError('databaseId','Required parameter requestParameters.databaseId was null or undefined when calling getExternalDatabaseAvailableProperties.');
        }
        
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling getExternalDatabaseAvailableProperties.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.interfaceCodes) {
            queryParameters['interfaceCodes'] = requestParameters.interfaceCodes;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaces/{interfaceId}/databases/{databaseId}/availableResorts`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedExternalDatabaseAvailablePropertiesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    async getExternalDatabaseAvailableProperties(requestParameters: GetExternalDatabaseAvailablePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedExternalDatabaseAvailableProperties> {
        const response = await this.getExternalDatabaseAvailablePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getExternalDeviceConfigurations</p>
     * Operation to fetch external device configurations.
     */
    async getExternalDeviceConfigurationsRaw(requestParameters: GetExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedExternalDeviceConfigurations>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idEditable !== undefined) {
            queryParameters['idEditable'] = requestParameters.idEditable;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.deviceType !== undefined) {
            queryParameters['deviceType'] = requestParameters.deviceType;
        }

        if (requestParameters.deviceCode !== undefined) {
            queryParameters['deviceCode'] = requestParameters.deviceCode;
        }

        if (requestParameters.deviceArea !== undefined) {
            queryParameters['deviceArea'] = requestParameters.deviceArea;
        }

        if (requestParameters.displayName !== undefined) {
            queryParameters['displayName'] = requestParameters.displayName;
        }

        if (requestParameters.mobileYN !== undefined) {
            queryParameters['mobileYN'] = requestParameters.mobileYN;
        }

        if (requestParameters.desktopYN !== undefined) {
            queryParameters['desktopYN'] = requestParameters.desktopYN;
        }

        if (requestParameters.registerAddress !== undefined) {
            queryParameters['registerAddress'] = requestParameters.registerAddress;
        }

        if (requestParameters.deviceValue !== undefined) {
            queryParameters['deviceValue'] = requestParameters.deviceValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalDevices/configurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedExternalDeviceConfigurationsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getExternalDeviceConfigurations</p>
     * Operation to fetch external device configurations.
     */
    async getExternalDeviceConfigurations(requestParameters: GetExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedExternalDeviceConfigurations> {
        const response = await this.getExternalDeviceConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    async getHotelInterfaceControllerRegistryRaw(requestParameters: GetHotelInterfaceControllerRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceControllerRegistry>> {
        const queryParameters: any = {};

        if (requestParameters.machine !== undefined) {
            queryParameters['machine'] = requestParameters.machine;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceControllerRegistry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceControllerRegistryFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    async getHotelInterfaceControllerRegistry(requestParameters: GetHotelInterfaceControllerRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceControllerRegistry> {
        const response = await this.getHotelInterfaceControllerRegistryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceDetails</p>
     * Operation to fetch hotel interface details.
     */
    async getHotelInterfaceDetailsRaw(requestParameters: GetHotelInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceDetails>> {
        if (requestParameters.logo === null || requestParameters.logo === undefined) {
            throw new runtime.RequiredError('logo','Required parameter requestParameters.logo was null or undefined when calling getHotelInterfaceDetails.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getHotelInterfaceDetails.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/logos/{logo}`.replace(`{${"logo"}}`, encodeURIComponent(String(requestParameters.logo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceDetails</p>
     * Operation to fetch hotel interface details.
     */
    async getHotelInterfaceDetails(requestParameters: GetHotelInterfaceDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceDetails> {
        const response = await this.getHotelInterfaceDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    async getHotelInterfaceErrorsRaw(requestParameters: GetHotelInterfaceErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceErrors>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceErrors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceErrorsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    async getHotelInterfaceErrors(requestParameters: GetHotelInterfaceErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceErrors> {
        const response = await this.getHotelInterfaceErrorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    async getHotelInterfaceFailedMessagesRaw(requestParameters: GetHotelInterfaceFailedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceFailedMessages>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceFailedMessages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceFailedMessagesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    async getHotelInterfaceFailedMessages(requestParameters: GetHotelInterfaceFailedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceFailedMessages> {
        const response = await this.getHotelInterfaceFailedMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    async getHotelInterfaceSchemasRaw(requestParameters: GetHotelInterfaceSchemasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceSchemas>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceSchemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceSchemasFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    async getHotelInterfaceSchemas(requestParameters: GetHotelInterfaceSchemasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceSchemas> {
        const response = await this.getHotelInterfaceSchemasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    async getHotelInterfacesRaw(requestParameters: GetHotelInterfacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaces>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logosCodes) {
            queryParameters['logosCodes'] = requestParameters.logosCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.includeOutboundCode !== undefined) {
            queryParameters['includeOutboundCode'] = requestParameters.includeOutboundCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelInterfaceTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfacesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    async getHotelInterfaces(requestParameters: GetHotelInterfacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaces> {
        const response = await this.getHotelInterfacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceMachines</p>
     * Operation to fetch interface machines.
     */
    async getInterfaceMachinesRaw(requestParameters: GetInterfaceMachinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceMachineType>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/machines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InterfaceMachineTypeFromJSON));
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceMachines</p>
     * Operation to fetch interface machines.
     */
    async getInterfaceMachines(requestParameters: GetInterfaceMachinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceMachineType>> {
        const response = await this.getInterfaceMachinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    async getInterfaceRightsRaw(requestParameters: GetInterfaceRightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceRightType>>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceRights`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InterfaceRightTypeFromJSON));
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    async getInterfaceRights(requestParameters: GetInterfaceRightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceRightType>> {
        const response = await this.getInterfaceRightsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRoomStatuses</p>
     * Operation to fetch interface room statuses.
     */
    async getInterfaceRoomStatusesRaw(requestParameters: GetInterfaceRoomStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceRoomStatusType>>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling getInterfaceRoomStatuses.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getInterfaceRoomStatuses.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/roomStatus`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InterfaceRoomStatusTypeFromJSON));
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRoomStatuses</p>
     * Operation to fetch interface room statuses.
     */
    async getInterfaceRoomStatuses(requestParameters: GetInterfaceRoomStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceRoomStatusType>> {
        const response = await this.getInterfaceRoomStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRooms</p>
     * Operation to fetch interface rooms.
     */
    async getInterfaceRoomsRaw(requestParameters: GetInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InterfaceRoomType>>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling getInterfaceRooms.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getInterfaceRooms.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fromRoom !== undefined) {
            queryParameters['fromRoom'] = requestParameters.fromRoom;
        }

        if (requestParameters.toRoom !== undefined) {
            queryParameters['toRoom'] = requestParameters.toRoom;
        }

        if (requestParameters.fromLineType !== undefined) {
            queryParameters['fromLineType'] = requestParameters.fromLineType;
        }

        if (requestParameters.toLineType !== undefined) {
            queryParameters['toLineType'] = requestParameters.toLineType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/rooms`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InterfaceRoomTypeFromJSON));
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRooms</p>
     * Operation to fetch interface rooms.
     */
    async getInterfaceRooms(requestParameters: GetInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InterfaceRoomType>> {
        const response = await this.getInterfaceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceUnitCharges</p>
     * Operation to fetch interface unit charges.
     */
    async getInterfaceUnitChargesRaw(requestParameters: GetInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedInterfaceUnitCharges>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling getInterfaceUnitCharges.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getInterfaceUnitCharges.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.logo !== undefined) {
            queryParameters['logo'] = requestParameters.logo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/unitCharges`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedInterfaceUnitChargesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceUnitCharges</p>
     * Operation to fetch interface unit charges.
     */
    async getInterfaceUnitCharges(requestParameters: GetInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedInterfaceUnitCharges> {
        const response = await this.getInterfaceUnitChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    async getPublishersRaw(requestParameters: GetPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedPublishers>> {
        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling getPublishers.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/publishers`.replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedPublishersFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    async getPublishers(requestParameters: GetPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedPublishers> {
        const response = await this.getPublishersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    async getUDFMappingsRaw(requestParameters: GetUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedUDFMappings>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.uDFName !== undefined) {
            queryParameters['uDFName'] = requestParameters.uDFName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/udfMappings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedUDFMappingsFromJSON(jsonValue));
    }

    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    async getUDFMappings(requestParameters: GetUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedUDFMappings> {
        const response = await this.getUDFMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>importInterfaceRooms</p>
     * Operation to import interface rooms.
     */
    async importInterfaceRoomsRaw(requestParameters: ImportInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling importInterfaceRooms.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling importInterfaceRooms.');
        }
        
        if (requestParameters.importInterfaceRooms === null || requestParameters.importInterfaceRooms === undefined) {
            throw new runtime.RequiredError('importInterfaceRooms','Required parameter requestParameters.importInterfaceRooms was null or undefined when calling importInterfaceRooms.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/rooms/import`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImportInterfaceRoomsToJSON(requestParameters.importInterfaceRooms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>importInterfaceRooms</p>
     * Operation to import interface rooms.
     */
    async importInterfaceRooms(requestParameters: ImportInterfaceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.importInterfaceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>ping</p>
     * Operation to ping.
     */
    async pingRaw(requestParameters: PingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/config/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaVersionFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>ping</p>
     * Operation to ping.
     */
    async ping(requestParameters: PingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion> {
        const response = await this.pingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    async postDeliveryMethodsRaw(requestParameters: PostDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.createDeliveryMethods === null || requestParameters.createDeliveryMethods === undefined) {
            throw new runtime.RequiredError('createDeliveryMethods','Required parameter requestParameters.createDeliveryMethods was null or undefined when calling postDeliveryMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeliveryMethodsToJSON(requestParameters.createDeliveryMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    async postDeliveryMethods(requestParameters: PostDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postHotelInterface</p>
     * Operation to create hotel interface.
     */
    async postHotelInterfaceRaw(requestParameters: PostHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelInterface === null || requestParameters.hotelInterface === undefined) {
            throw new runtime.RequiredError('hotelInterface','Required parameter requestParameters.hotelInterface was null or undefined when calling postHotelInterface.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelInerface`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelInterfaceToJSON(requestParameters.hotelInterface),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postHotelInterface</p>
     * Operation to create hotel interface.
     */
    async postHotelInterface(requestParameters: PostHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelInterfaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postInterfaceAccount</p>
     * Operation to create interface account.
     */
    async postInterfaceAccountRaw(requestParameters: PostInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling postInterfaceAccount.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postInterfaceAccount.');
        }
        
        if (requestParameters.createInterfaceAccount === null || requestParameters.createInterfaceAccount === undefined) {
            throw new runtime.RequiredError('createInterfaceAccount','Required parameter requestParameters.createInterfaceAccount was null or undefined when calling postInterfaceAccount.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/accounts`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInterfaceAccountToJSON(requestParameters.createInterfaceAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postInterfaceAccount</p>
     * Operation to create interface account.
     */
    async postInterfaceAccount(requestParameters: PostInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postInterfaceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postInterfaceRoom</p>
     * Operation to create interface room.
     */
    async postInterfaceRoomRaw(requestParameters: PostInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling postInterfaceRoom.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postInterfaceRoom.');
        }
        
        if (requestParameters.createInterfaceRoom === null || requestParameters.createInterfaceRoom === undefined) {
            throw new runtime.RequiredError('createInterfaceRoom','Required parameter requestParameters.createInterfaceRoom was null or undefined when calling postInterfaceRoom.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/rooms`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInterfaceRoomToJSON(requestParameters.createInterfaceRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postInterfaceRoom</p>
     * Operation to create interface room.
     */
    async postInterfaceRoom(requestParameters: PostInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postInterfaceRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    async postPublishersRaw(requestParameters: PostPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPublishers.');
        }
        
        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling postPublishers.');
        }
        
        if (requestParameters.createPublishers === null || requestParameters.createPublishers === undefined) {
            throw new runtime.RequiredError('createPublishers','Required parameter requestParameters.createPublishers was null or undefined when calling postPublishers.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePublishersToJSON(requestParameters.createPublishers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    async postPublishers(requestParameters: PostPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPublishersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    async putDeliveryMethodsRaw(requestParameters: PutDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedDeliveryMethods>> {
        if (requestParameters.changeDeliveryMethods === null || requestParameters.changeDeliveryMethods === undefined) {
            throw new runtime.RequiredError('changeDeliveryMethods','Required parameter requestParameters.changeDeliveryMethods was null or undefined when calling putDeliveryMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeDeliveryMethodsToJSON(requestParameters.changeDeliveryMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedDeliveryMethodsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    async putDeliveryMethods(requestParameters: PutDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedDeliveryMethods> {
        const response = await this.putDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putExternalDeviceConfigurations</p>
     * Operation to change external device configurations.
     */
    async putExternalDeviceConfigurationsRaw(requestParameters: PutExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedExternalDeviceConfigurations>> {
        if (requestParameters.changeExternalDeviceConfigurations === null || requestParameters.changeExternalDeviceConfigurations === undefined) {
            throw new runtime.RequiredError('changeExternalDeviceConfigurations','Required parameter requestParameters.changeExternalDeviceConfigurations was null or undefined when calling putExternalDeviceConfigurations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalDevices/configurations`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeExternalDeviceConfigurationsToJSON(requestParameters.changeExternalDeviceConfigurations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedExternalDeviceConfigurationsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putExternalDeviceConfigurations</p>
     * Operation to change external device configurations.
     */
    async putExternalDeviceConfigurations(requestParameters: PutExternalDeviceConfigurationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedExternalDeviceConfigurations> {
        const response = await this.putExternalDeviceConfigurationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putHotelInterface</p>
     * Operation to change hotel interface.
     */
    async putHotelInterfaceRaw(requestParameters: PutHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelInterface === null || requestParameters.hotelInterface === undefined) {
            throw new runtime.RequiredError('hotelInterface','Required parameter requestParameters.hotelInterface was null or undefined when calling putHotelInterface.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelInerface`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelInterfaceToJSON(requestParameters.hotelInterface),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putHotelInterface</p>
     * Operation to change hotel interface.
     */
    async putHotelInterface(requestParameters: PutHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putHotelInterfaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceAccount</p>
     * Operation to change interface account.
     */
    async putInterfaceAccountRaw(requestParameters: PutInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceAccount>> {
        if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
            throw new runtime.RequiredError('accountId','Required parameter requestParameters.accountId was null or undefined when calling putInterfaceAccount.');
        }
        
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling putInterfaceAccount.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putInterfaceAccount.');
        }
        
        if (requestParameters.changeInterfaceAccount === null || requestParameters.changeInterfaceAccount === undefined) {
            throw new runtime.RequiredError('changeInterfaceAccount','Required parameter requestParameters.changeInterfaceAccount was null or undefined when calling putInterfaceAccount.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/accounts/{accountId}`.replace(`{${"accountId"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeInterfaceAccountToJSON(requestParameters.changeInterfaceAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceAccountFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceAccount</p>
     * Operation to change interface account.
     */
    async putInterfaceAccount(requestParameters: PutInterfaceAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceAccount> {
        const response = await this.putInterfaceAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceMachine</p>
     * Operation to change interface machine.
     */
    async putInterfaceMachineRaw(requestParameters: PutInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceMachine>> {
        if (requestParameters.machineId === null || requestParameters.machineId === undefined) {
            throw new runtime.RequiredError('machineId','Required parameter requestParameters.machineId was null or undefined when calling putInterfaceMachine.');
        }
        
        if (requestParameters.changeInterfaceMachine === null || requestParameters.changeInterfaceMachine === undefined) {
            throw new runtime.RequiredError('changeInterfaceMachine','Required parameter requestParameters.changeInterfaceMachine was null or undefined when calling putInterfaceMachine.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/machines/{machineId}`.replace(`{${"machineId"}}`, encodeURIComponent(String(requestParameters.machineId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeInterfaceMachineToJSON(requestParameters.changeInterfaceMachine),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceMachineFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceMachine</p>
     * Operation to change interface machine.
     */
    async putInterfaceMachine(requestParameters: PutInterfaceMachineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceMachine> {
        const response = await this.putInterfaceMachineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    async putInterfaceRightRaw(requestParameters: PutInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceRight>> {
        if (requestParameters.changeInterfaceRight === null || requestParameters.changeInterfaceRight === undefined) {
            throw new runtime.RequiredError('changeInterfaceRight','Required parameter requestParameters.changeInterfaceRight was null or undefined when calling putInterfaceRight.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceRights`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeInterfaceRightToJSON(requestParameters.changeInterfaceRight),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceRightFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    async putInterfaceRight(requestParameters: PutInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceRight> {
        const response = await this.putInterfaceRightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoom</p>
     * Operation to change interface room.
     */
    async putInterfaceRoomRaw(requestParameters: PutInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceRoom>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling putInterfaceRoom.');
        }
        
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling putInterfaceRoom.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putInterfaceRoom.');
        }
        
        if (requestParameters.changeInterfaceRoom === null || requestParameters.changeInterfaceRoom === undefined) {
            throw new runtime.RequiredError('changeInterfaceRoom','Required parameter requestParameters.changeInterfaceRoom was null or undefined when calling putInterfaceRoom.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/rooms/{roomId}`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeInterfaceRoomToJSON(requestParameters.changeInterfaceRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceRoomFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoom</p>
     * Operation to change interface room.
     */
    async putInterfaceRoom(requestParameters: PutInterfaceRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceRoom> {
        const response = await this.putInterfaceRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoomStatus</p>
     * Operation to change interface room status.
     */
    async putInterfaceRoomStatusRaw(requestParameters: PutInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceRoomStatus>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling putInterfaceRoomStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putInterfaceRoomStatus.');
        }
        
        if (requestParameters.changeInterfaceRoomStatus === null || requestParameters.changeInterfaceRoomStatus === undefined) {
            throw new runtime.RequiredError('changeInterfaceRoomStatus','Required parameter requestParameters.changeInterfaceRoomStatus was null or undefined when calling putInterfaceRoomStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/roomStatus`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeInterfaceRoomStatusToJSON(requestParameters.changeInterfaceRoomStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceRoomStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRoomStatus</p>
     * Operation to change interface room status.
     */
    async putInterfaceRoomStatus(requestParameters: PutInterfaceRoomStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceRoomStatus> {
        const response = await this.putInterfaceRoomStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceUnitCharges</p>
     * Operation to change interface unit charges.
     */
    async putInterfaceUnitChargesRaw(requestParameters: PutInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceUnitCharges>> {
        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling putInterfaceUnitCharges.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putInterfaceUnitCharges.');
        }
        
        if (requestParameters.changeInterfaceUnitCharges === null || requestParameters.changeInterfaceUnitCharges === undefined) {
            throw new runtime.RequiredError('changeInterfaceUnitCharges','Required parameter requestParameters.changeInterfaceUnitCharges was null or undefined when calling putInterfaceUnitCharges.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceId}/unitCharges`.replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeInterfaceUnitChargesToJSON(requestParameters.changeInterfaceUnitCharges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceUnitChargesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceUnitCharges</p>
     * Operation to change interface unit charges.
     */
    async putInterfaceUnitCharges(requestParameters: PutInterfaceUnitChargesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceUnitCharges> {
        const response = await this.putInterfaceUnitChargesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    async putUDFMappingRaw(requestParameters: PutUDFMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedUDFMapping>> {
        if (requestParameters.changeUDFMapping === null || requestParameters.changeUDFMapping === undefined) {
            throw new runtime.RequiredError('changeUDFMapping','Required parameter requestParameters.changeUDFMapping was null or undefined when calling putUDFMapping.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/udfMappings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUDFMappingToJSON(requestParameters.changeUDFMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedUDFMappingFromJSON(jsonValue));
    }

    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    async putUDFMapping(requestParameters: PutUDFMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedUDFMapping> {
        const response = await this.putUDFMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteDeliveryMethodsTypeEnum = {
    General: 'General',
    QueueReservation: 'QueueReservation',
    Confirmation: 'Confirmation',
    GuestMessage: 'GuestMessage',
    BillingFolio: 'BillingFolio',
    QueueRush: 'QueueRush',
    Ar: 'AR',
    OtherFolio: 'OtherFolio'
} as const;
export type DeleteDeliveryMethodsTypeEnum = typeof DeleteDeliveryMethodsTypeEnum[keyof typeof DeleteDeliveryMethodsTypeEnum];
/**
 * @export
 */
export const DeleteDeliveryMethodsOptionsEnum = {
    Email: 'Email',
    Fax: 'Fax',
    TextMessage: 'TextMessage',
    Sftp: 'Sftp'
} as const;
export type DeleteDeliveryMethodsOptionsEnum = typeof DeleteDeliveryMethodsOptionsEnum[keyof typeof DeleteDeliveryMethodsOptionsEnum];
/**
 * @export
 */
export const DeleteInterfaceRoomDataLineEnum = {
    In: 'In',
    Out: 'Out'
} as const;
export type DeleteInterfaceRoomDataLineEnum = typeof DeleteInterfaceRoomDataLineEnum[keyof typeof DeleteInterfaceRoomDataLineEnum];
/**
 * @export
 */
export const DeleteInterfaceRoomDoNotDisturbEnum = {
    NotAvailable: 'NotAvailable',
    AlwaysOn: 'AlwaysOn',
    AlwaysOff: 'AlwaysOff',
    FreelySwitchable: 'FreelySwitchable'
} as const;
export type DeleteInterfaceRoomDoNotDisturbEnum = typeof DeleteInterfaceRoomDoNotDisturbEnum[keyof typeof DeleteInterfaceRoomDoNotDisturbEnum];
/**
 * @export
 */
export const DeleteInterfaceRoomClassOfServiceEnum = {
    NotAvailable: 'NotAvailable',
    AlwaysOn: 'AlwaysOn',
    AlwaysOff: 'AlwaysOff',
    FreelySwitchable: 'FreelySwitchable'
} as const;
export type DeleteInterfaceRoomClassOfServiceEnum = typeof DeleteInterfaceRoomClassOfServiceEnum[keyof typeof DeleteInterfaceRoomClassOfServiceEnum];
/**
 * @export
 */
export const DeleteInterfaceRoomDirectInwardDialEnum = {
    NotAvailable: 'NotAvailable',
    AlwaysOn: 'AlwaysOn',
    AlwaysOff: 'AlwaysOff',
    FreelySwitchable: 'FreelySwitchable'
} as const;
export type DeleteInterfaceRoomDirectInwardDialEnum = typeof DeleteInterfaceRoomDirectInwardDialEnum[keyof typeof DeleteInterfaceRoomDirectInwardDialEnum];
/**
 * @export
 */
export const DeleteInterfaceRoomMessageWaitingEnum = {
    NotAvailable: 'NotAvailable',
    AlwaysOn: 'AlwaysOn',
    AlwaysOff: 'AlwaysOff',
    FreelySwitchable: 'FreelySwitchable'
} as const;
export type DeleteInterfaceRoomMessageWaitingEnum = typeof DeleteInterfaceRoomMessageWaitingEnum[keyof typeof DeleteInterfaceRoomMessageWaitingEnum];
/**
 * @export
 */
export const DeleteInterfaceRoomMaskDialNumberEnum = {
    NoMasking: 'NoMasking',
    MaskLast2Digits: 'MaskLast2Digits',
    MaskLast4Digits: 'MaskLast4Digits',
    Mask4DigitsLeaveLast2Intact: 'Mask4DigitsLeaveLast2Intact',
    MaskAllExceptFirst2: 'MaskAllExceptFirst2',
    MaskAll: 'MaskAll',
    MaskingPerRoom: 'MaskingPerRoom'
} as const;
export type DeleteInterfaceRoomMaskDialNumberEnum = typeof DeleteInterfaceRoomMaskDialNumberEnum[keyof typeof DeleteInterfaceRoomMaskDialNumberEnum];
/**
 * @export
 */
export const GetConfiguredExternalDevicesDeviceTypeEnum = {
    Scanner: 'Scanner',
    CreditCard: 'CreditCard',
    Fiscal: 'Fiscal',
    Device: 'Device'
} as const;
export type GetConfiguredExternalDevicesDeviceTypeEnum = typeof GetConfiguredExternalDevicesDeviceTypeEnum[keyof typeof GetConfiguredExternalDevicesDeviceTypeEnum];
/**
 * @export
 */
export const GetConfiguredExternalDevicesDeviceCodeEnum = {
    TtiScannerMobile: 'TtiScannerMobile',
    TtiScannerDesktop: 'TtiScannerDesktop',
    SamsotechScanner: 'SamsotechScanner',
    GenScannerDesktop: 'GenScannerDesktop',
    GenScannerMobile: 'GenScannerMobile',
    ChipAndPin: 'ChipAndPin',
    FiscalTerminal: 'FiscalTerminal',
    Device: 'Device'
} as const;
export type GetConfiguredExternalDevicesDeviceCodeEnum = typeof GetConfiguredExternalDevicesDeviceCodeEnum[keyof typeof GetConfiguredExternalDevicesDeviceCodeEnum];
/**
 * @export
 */
export const GetConfiguredExternalDevicesFetchInstructionEnum = {
    Default: 'Default',
    Partner: 'Partner'
} as const;
export type GetConfiguredExternalDevicesFetchInstructionEnum = typeof GetConfiguredExternalDevicesFetchInstructionEnum[keyof typeof GetConfiguredExternalDevicesFetchInstructionEnum];
/**
 * @export
 */
export const GetConfiguredExternalDevicesPartnerPayloadTypeEnum = {
    CheckOut: 'CheckOut',
    FolioGeneration: 'FolioGeneration'
} as const;
export type GetConfiguredExternalDevicesPartnerPayloadTypeEnum = typeof GetConfiguredExternalDevicesPartnerPayloadTypeEnum[keyof typeof GetConfiguredExternalDevicesPartnerPayloadTypeEnum];
/**
 * @export
 */
export const GetDeliveryMethodsUsagesEnum = {
    General: 'General',
    QueueReservation: 'QueueReservation',
    Confirmation: 'Confirmation',
    GuestMessage: 'GuestMessage',
    BillingFolio: 'BillingFolio',
    QueueRush: 'QueueRush',
    Ar: 'AR',
    OtherFolio: 'OtherFolio'
} as const;
export type GetDeliveryMethodsUsagesEnum = typeof GetDeliveryMethodsUsagesEnum[keyof typeof GetDeliveryMethodsUsagesEnum];
/**
 * @export
 */
export const GetExternalDeviceConfigurationsDeviceTypeEnum = {
    Scanner: 'Scanner',
    CreditCard: 'CreditCard',
    Fiscal: 'Fiscal',
    Device: 'Device'
} as const;
export type GetExternalDeviceConfigurationsDeviceTypeEnum = typeof GetExternalDeviceConfigurationsDeviceTypeEnum[keyof typeof GetExternalDeviceConfigurationsDeviceTypeEnum];
/**
 * @export
 */
export const GetExternalDeviceConfigurationsDeviceCodeEnum = {
    TtiScannerMobile: 'TtiScannerMobile',
    TtiScannerDesktop: 'TtiScannerDesktop',
    SamsotechScanner: 'SamsotechScanner',
    GenScannerDesktop: 'GenScannerDesktop',
    GenScannerMobile: 'GenScannerMobile',
    ChipAndPin: 'ChipAndPin',
    FiscalTerminal: 'FiscalTerminal',
    Device: 'Device'
} as const;
export type GetExternalDeviceConfigurationsDeviceCodeEnum = typeof GetExternalDeviceConfigurationsDeviceCodeEnum[keyof typeof GetExternalDeviceConfigurationsDeviceCodeEnum];
/**
 * @export
 */
export const GetHotelInterfaceDetailsFetchInstructionsEnum = {
    PrimaryInfo: 'PrimaryInfo',
    AdditionalInfo: 'AdditionalInfo',
    GeneralInfo: 'GeneralInfo',
    CommunicationInfo: 'CommunicationInfo',
    IfcTranslation: 'IfcTranslation',
    IfcClassOfService: 'IfcClassOfService',
    IfcImportRooms: 'IfcImportRooms',
    WorkstationSetupInfo: 'WorkstationSetupInfo',
    PostingsInfo: 'PostingsInfo',
    CustomDataInfo: 'CustomDataInfo',
    ExportDataInfo: 'ExportDataInfo',
    TransactionCodesInfo: 'TransactionCodesInfo'
} as const;
export type GetHotelInterfaceDetailsFetchInstructionsEnum = typeof GetHotelInterfaceDetailsFetchInstructionsEnum[keyof typeof GetHotelInterfaceDetailsFetchInstructionsEnum];
/**
 * @export
 */
export const GetHotelInterfaceErrorsInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfaceErrorsInterfaceTypesEnum = typeof GetHotelInterfaceErrorsInterfaceTypesEnum[keyof typeof GetHotelInterfaceErrorsInterfaceTypesEnum];
/**
 * @export
 */
export const GetHotelInterfaceFailedMessagesInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfaceFailedMessagesInterfaceTypesEnum = typeof GetHotelInterfaceFailedMessagesInterfaceTypesEnum[keyof typeof GetHotelInterfaceFailedMessagesInterfaceTypesEnum];
/**
 * @export
 */
export const GetHotelInterfaceSchemasInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfaceSchemasInterfaceTypesEnum = typeof GetHotelInterfaceSchemasInterfaceTypesEnum[keyof typeof GetHotelInterfaceSchemasInterfaceTypesEnum];
/**
 * @export
 */
export const GetHotelInterfacesInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfacesInterfaceTypesEnum = typeof GetHotelInterfacesInterfaceTypesEnum[keyof typeof GetHotelInterfacesInterfaceTypesEnum];
