/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeDeliveryMethods,
  ChangeInterfaceRight,
  ChangeUDFMapping,
  ChangedDeliveryMethods,
  ChangedInterfaceRight,
  ChangedUDFMapping,
  CreateDeliveryMethods,
  CreatePublishers,
  ExceptionDetailType,
  FetchedDeliveryMethods,
  FetchedExternalDatabaseAvailableProperties,
  FetchedHotelInterfaceControllerRegistry,
  FetchedHotelInterfaceErrors,
  FetchedHotelInterfaceFailedMessages,
  FetchedHotelInterfaceSchemas,
  FetchedHotelInterfaces,
  FetchedInterfaceRights,
  FetchedPublishers,
  FetchedUDFMappings,
  Status,
} from '../models/index';
import {
    ChangeDeliveryMethodsFromJSON,
    ChangeDeliveryMethodsToJSON,
    ChangeInterfaceRightFromJSON,
    ChangeInterfaceRightToJSON,
    ChangeUDFMappingFromJSON,
    ChangeUDFMappingToJSON,
    ChangedDeliveryMethodsFromJSON,
    ChangedDeliveryMethodsToJSON,
    ChangedInterfaceRightFromJSON,
    ChangedInterfaceRightToJSON,
    ChangedUDFMappingFromJSON,
    ChangedUDFMappingToJSON,
    CreateDeliveryMethodsFromJSON,
    CreateDeliveryMethodsToJSON,
    CreatePublishersFromJSON,
    CreatePublishersToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchedDeliveryMethodsFromJSON,
    FetchedDeliveryMethodsToJSON,
    FetchedExternalDatabaseAvailablePropertiesFromJSON,
    FetchedExternalDatabaseAvailablePropertiesToJSON,
    FetchedHotelInterfaceControllerRegistryFromJSON,
    FetchedHotelInterfaceControllerRegistryToJSON,
    FetchedHotelInterfaceErrorsFromJSON,
    FetchedHotelInterfaceErrorsToJSON,
    FetchedHotelInterfaceFailedMessagesFromJSON,
    FetchedHotelInterfaceFailedMessagesToJSON,
    FetchedHotelInterfaceSchemasFromJSON,
    FetchedHotelInterfaceSchemasToJSON,
    FetchedHotelInterfacesFromJSON,
    FetchedHotelInterfacesToJSON,
    FetchedInterfaceRightsFromJSON,
    FetchedInterfaceRightsToJSON,
    FetchedPublishersFromJSON,
    FetchedPublishersToJSON,
    FetchedUDFMappingsFromJSON,
    FetchedUDFMappingsToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DeleteDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    type?: DeleteDeliveryMethodsTypeEnum;
    options?: Set<DeleteDeliveryMethodsOptionsEnum>;
    configurationId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHotelInterfaceRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    logo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInterfaceRightRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    right?: number;
    code?: string;
    description?: string;
    interfaceRightDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePublisherRequest {
    hotelId?: string;
    externalSystemCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subscriberHotelId?: string;
    code?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    croCode?: string;
    usages?: Set<GetDeliveryMethodsUsagesEnum>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExternalDatabaseAvailablePropertiesRequest {
    databaseId?: string;
    interfaceId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    interfaceCodes?: Array<string>;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceControllerRegistryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    machine?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceErrorsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceErrorsInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceFailedMessagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceFailedMessagesInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceSchemasRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfaceSchemasInterfaceTypesEnum>;
    logoCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfacesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    interfaceTypes?: Set<GetHotelInterfacesInterfaceTypesEnum>;
    logosCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInterfaceRightsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPublishersRequest {
    externalSystemCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUDFMappingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    type?: string;
    uDFName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createDeliveryMethods?: CreateDeliveryMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPublishersRequest {
    hotelId?: string;
    externalSystemCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createPublishers?: CreatePublishers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDeliveryMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeDeliveryMethods?: ChangeDeliveryMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInterfaceRightRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeInterfaceRight?: ChangeInterfaceRight;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutUDFMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeUDFMapping?: ChangeUDFMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ExternalSystemsConfigApi extends runtime.BaseAPI {

    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    async deleteDeliveryMethodsRaw(requestParameters: DeleteDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDeliveryMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteDeliveryMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteDeliveryMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.options) {
            queryParameters['options'] = requestParameters.options;
        }

        if (requestParameters.configurationId) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteDeliveryMethods</p>
     * Operation to remove delivery methods.
     */
    async deleteDeliveryMethods(requestParameters: DeleteDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    async deleteHotelInterfaceRaw(requestParameters: DeleteHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteHotelInterface.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteHotelInterface.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteHotelInterface.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteHotelInterface.');
        }

        const queryParameters: any = {};

        if (requestParameters.logo !== undefined) {
            queryParameters['logo'] = requestParameters.logo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hotelInerface`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteHotelInterface</p>
     * Operation to remove hotel interface.
     */
    async deleteHotelInterface(requestParameters: DeleteHotelInterfaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHotelInterfaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    async deleteInterfaceRightRaw(requestParameters: DeleteInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteInterfaceRight.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteInterfaceRight.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteInterfaceRight.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.right !== undefined) {
            queryParameters['right'] = requestParameters.right;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.interfaceRightDescription !== undefined) {
            queryParameters['interfaceRightDescription'] = requestParameters.interfaceRightDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceRights`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteInterfaceRight</p>
     * Operation to remove interface right.
     */
    async deleteInterfaceRight(requestParameters: DeleteInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInterfaceRightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    async deletePublisherRaw(requestParameters: DeletePublisherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePublisher.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling deletePublisher.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deletePublisher.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deletePublisher.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deletePublisher.');
        }

        const queryParameters: any = {};

        if (requestParameters.subscriberHotelId !== undefined) {
            queryParameters['subscriberHotelId'] = requestParameters.subscriberHotelId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deletePublisher</p>
     * Operation to remove publisher.
     */
    async deletePublisher(requestParameters: DeletePublisherRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePublisherRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    async getDeliveryMethodsRaw(requestParameters: GetDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedDeliveryMethods>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDeliveryMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getDeliveryMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getDeliveryMethods.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.croCode !== undefined) {
            queryParameters['croCode'] = requestParameters.croCode;
        }

        if (requestParameters.usages) {
            queryParameters['usages'] = requestParameters.usages;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedDeliveryMethodsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getDeliveryMethods</p>
     * Operation to fetch delivery methods.
     */
    async getDeliveryMethods(requestParameters: GetDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedDeliveryMethods> {
        const response = await this.getDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    async getExternalDatabaseAvailablePropertiesRaw(requestParameters: GetExternalDatabaseAvailablePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedExternalDatabaseAvailableProperties>> {
        if (requestParameters.databaseId === null || requestParameters.databaseId === undefined) {
            throw new runtime.RequiredError('databaseId','Required parameter requestParameters.databaseId was null or undefined when calling getExternalDatabaseAvailableProperties.');
        }

        if (requestParameters.interfaceId === null || requestParameters.interfaceId === undefined) {
            throw new runtime.RequiredError('interfaceId','Required parameter requestParameters.interfaceId was null or undefined when calling getExternalDatabaseAvailableProperties.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getExternalDatabaseAvailableProperties.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getExternalDatabaseAvailableProperties.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getExternalDatabaseAvailableProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.interfaceCodes) {
            queryParameters['interfaceCodes'] = requestParameters.interfaceCodes;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaces/{interfaceId}/databases/{databaseId}/availableResorts`.replace(`{${"databaseId"}}`, encodeURIComponent(String(requestParameters.databaseId))).replace(`{${"interfaceId"}}`, encodeURIComponent(String(requestParameters.interfaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedExternalDatabaseAvailablePropertiesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getExternalDatabaseAvailableProperties</p>
     * Operation to fetch external database available properties.
     */
    async getExternalDatabaseAvailableProperties(requestParameters: GetExternalDatabaseAvailablePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedExternalDatabaseAvailableProperties> {
        const response = await this.getExternalDatabaseAvailablePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    async getHotelInterfaceControllerRegistryRaw(requestParameters: GetHotelInterfaceControllerRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceControllerRegistry>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelInterfaceControllerRegistry.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelInterfaceControllerRegistry.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelInterfaceControllerRegistry.');
        }

        const queryParameters: any = {};

        if (requestParameters.machine !== undefined) {
            queryParameters['machine'] = requestParameters.machine;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceControllerRegistry`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceControllerRegistryFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceControllerRegistry</p>
     * Operation to fetch hotel interface controller registry.
     */
    async getHotelInterfaceControllerRegistry(requestParameters: GetHotelInterfaceControllerRegistryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceControllerRegistry> {
        const response = await this.getHotelInterfaceControllerRegistryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    async getHotelInterfaceErrorsRaw(requestParameters: GetHotelInterfaceErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceErrors>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelInterfaceErrors.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelInterfaceErrors.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelInterfaceErrors.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceErrors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceErrorsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceErrors</p>
     * Operation to fetch hotel interface errors.
     */
    async getHotelInterfaceErrors(requestParameters: GetHotelInterfaceErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceErrors> {
        const response = await this.getHotelInterfaceErrorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    async getHotelInterfaceFailedMessagesRaw(requestParameters: GetHotelInterfaceFailedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceFailedMessages>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelInterfaceFailedMessages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelInterfaceFailedMessages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelInterfaceFailedMessages.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceFailedMessages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceFailedMessagesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceFailedMessages</p>
     * Operation to fetch hotel interface failed messages.
     */
    async getHotelInterfaceFailedMessages(requestParameters: GetHotelInterfaceFailedMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceFailedMessages> {
        const response = await this.getHotelInterfaceFailedMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    async getHotelInterfaceSchemasRaw(requestParameters: GetHotelInterfaceSchemasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaceSchemas>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelInterfaceSchemas.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelInterfaceSchemas.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelInterfaceSchemas.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logoCodes) {
            queryParameters['logoCodes'] = requestParameters.logoCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceSchemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfaceSchemasFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaceSchemas</p>
     * Operation to fetch hotel interface schemas.
     */
    async getHotelInterfaceSchemas(requestParameters: GetHotelInterfaceSchemasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaceSchemas> {
        const response = await this.getHotelInterfaceSchemasRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    async getHotelInterfacesRaw(requestParameters: GetHotelInterfacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedHotelInterfaces>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelInterfaces.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelInterfaces.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelInterfaces.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.interfaceTypes) {
            queryParameters['interfaceTypes'] = requestParameters.interfaceTypes;
        }

        if (requestParameters.logosCodes) {
            queryParameters['logosCodes'] = requestParameters.logosCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelInterfaceTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedHotelInterfacesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getHotelInterfaces</p>
     * Operation to fetch hotel interfaces.
     */
    async getHotelInterfaces(requestParameters: GetHotelInterfacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedHotelInterfaces> {
        const response = await this.getHotelInterfacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    async getInterfaceRightsRaw(requestParameters: GetInterfaceRightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedInterfaceRights>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getInterfaceRights.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getInterfaceRights.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getInterfaceRights.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceRights`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedInterfaceRightsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getInterfaceRights</p>
     * Operation to fetch interface rights.
     */
    async getInterfaceRights(requestParameters: GetInterfaceRightsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedInterfaceRights> {
        const response = await this.getInterfaceRightsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    async getPublishersRaw(requestParameters: GetPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedPublishers>> {
        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling getPublishers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPublishers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPublishers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPublishers.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/publishers`.replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedPublishersFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getPublishers</p>
     * Operation to fetch publishers.
     */
    async getPublishers(requestParameters: GetPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedPublishers> {
        const response = await this.getPublishersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    async getUDFMappingsRaw(requestParameters: GetUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedUDFMappings>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getUDFMappings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getUDFMappings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getUDFMappings.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.uDFName !== undefined) {
            queryParameters['uDFName'] = requestParameters.uDFName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/udfMappings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedUDFMappingsFromJSON(jsonValue));
    }

    /**
     * Operation to send a response to the Look-up of UDFs. <p><strong>OperationId:</strong>getUDFMappings</p>
     * Operation to send a response to the Look up of UDFs.
     */
    async getUDFMappings(requestParameters: GetUDFMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedUDFMappings> {
        const response = await this.getUDFMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    async postDeliveryMethodsRaw(requestParameters: PostDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postDeliveryMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postDeliveryMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postDeliveryMethods.');
        }

        if (requestParameters.createDeliveryMethods === null || requestParameters.createDeliveryMethods === undefined) {
            throw new runtime.RequiredError('createDeliveryMethods','Required parameter requestParameters.createDeliveryMethods was null or undefined when calling postDeliveryMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeliveryMethodsToJSON(requestParameters.createDeliveryMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postDeliveryMethods</p>
     * Operation to create delivery methods.
     */
    async postDeliveryMethods(requestParameters: PostDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    async postPublishersRaw(requestParameters: PostPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPublishers.');
        }

        if (requestParameters.externalSystemCode === null || requestParameters.externalSystemCode === undefined) {
            throw new runtime.RequiredError('externalSystemCode','Required parameter requestParameters.externalSystemCode was null or undefined when calling postPublishers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postPublishers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postPublishers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postPublishers.');
        }

        if (requestParameters.createPublishers === null || requestParameters.createPublishers === undefined) {
            throw new runtime.RequiredError('createPublishers','Required parameter requestParameters.createPublishers was null or undefined when calling postPublishers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{externalSystemCode}/hotels/{hotelId}/publishers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"externalSystemCode"}}`, encodeURIComponent(String(requestParameters.externalSystemCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePublishersToJSON(requestParameters.createPublishers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postPublishers</p>
     * Operation to create publishers.
     */
    async postPublishers(requestParameters: PostPublishersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPublishersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    async putDeliveryMethodsRaw(requestParameters: PutDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedDeliveryMethods>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putDeliveryMethods.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putDeliveryMethods.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putDeliveryMethods.');
        }

        if (requestParameters.changeDeliveryMethods === null || requestParameters.changeDeliveryMethods === undefined) {
            throw new runtime.RequiredError('changeDeliveryMethods','Required parameter requestParameters.changeDeliveryMethods was null or undefined when calling putDeliveryMethods.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deliveryMethods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeDeliveryMethodsToJSON(requestParameters.changeDeliveryMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedDeliveryMethodsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putDeliveryMethods</p>
     * Operation to change delivery methods.
     */
    async putDeliveryMethods(requestParameters: PutDeliveryMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedDeliveryMethods> {
        const response = await this.putDeliveryMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    async putInterfaceRightRaw(requestParameters: PutInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedInterfaceRight>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putInterfaceRight.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putInterfaceRight.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putInterfaceRight.');
        }

        if (requestParameters.changeInterfaceRight === null || requestParameters.changeInterfaceRight === undefined) {
            throw new runtime.RequiredError('changeInterfaceRight','Required parameter requestParameters.changeInterfaceRight was null or undefined when calling putInterfaceRight.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/interfaceRights`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeInterfaceRightToJSON(requestParameters.changeInterfaceRight),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedInterfaceRightFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putInterfaceRight</p>
     * Operation to change interface right.
     */
    async putInterfaceRight(requestParameters: PutInterfaceRightRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedInterfaceRight> {
        const response = await this.putInterfaceRightRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    async putUDFMappingRaw(requestParameters: PutUDFMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedUDFMapping>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putUDFMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putUDFMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putUDFMapping.');
        }

        if (requestParameters.changeUDFMapping === null || requestParameters.changeUDFMapping === undefined) {
            throw new runtime.RequiredError('changeUDFMapping','Required parameter requestParameters.changeUDFMapping was null or undefined when calling putUDFMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/udfMappings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUDFMappingToJSON(requestParameters.changeUDFMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedUDFMappingFromJSON(jsonValue));
    }

    /**
     * Operation to send a response to the Change in UDF. <p><strong>OperationId:</strong>putUDFMapping</p>
     * Operation to send a response to the Change in UDF.
     */
    async putUDFMapping(requestParameters: PutUDFMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedUDFMapping> {
        const response = await this.putUDFMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteDeliveryMethodsTypeEnum = {
    General: 'General',
    QueueReservation: 'QueueReservation',
    Confirmation: 'Confirmation',
    GuestMessage: 'GuestMessage',
    BillingFolio: 'BillingFolio',
    QueueRush: 'QueueRush',
    Ar: 'AR',
    OtherFolio: 'OtherFolio'
} as const;
export type DeleteDeliveryMethodsTypeEnum = typeof DeleteDeliveryMethodsTypeEnum[keyof typeof DeleteDeliveryMethodsTypeEnum];
/**
 * @export
 */
export const DeleteDeliveryMethodsOptionsEnum = {
    Email: 'Email',
    Fax: 'Fax',
    TextMessage: 'TextMessage',
    Sftp: 'Sftp'
} as const;
export type DeleteDeliveryMethodsOptionsEnum = typeof DeleteDeliveryMethodsOptionsEnum[keyof typeof DeleteDeliveryMethodsOptionsEnum];
/**
 * @export
 */
export const GetDeliveryMethodsUsagesEnum = {
    General: 'General',
    QueueReservation: 'QueueReservation',
    Confirmation: 'Confirmation',
    GuestMessage: 'GuestMessage',
    BillingFolio: 'BillingFolio',
    QueueRush: 'QueueRush',
    Ar: 'AR',
    OtherFolio: 'OtherFolio'
} as const;
export type GetDeliveryMethodsUsagesEnum = typeof GetDeliveryMethodsUsagesEnum[keyof typeof GetDeliveryMethodsUsagesEnum];
/**
 * @export
 */
export const GetHotelInterfaceErrorsInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfaceErrorsInterfaceTypesEnum = typeof GetHotelInterfaceErrorsInterfaceTypesEnum[keyof typeof GetHotelInterfaceErrorsInterfaceTypesEnum];
/**
 * @export
 */
export const GetHotelInterfaceFailedMessagesInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfaceFailedMessagesInterfaceTypesEnum = typeof GetHotelInterfaceFailedMessagesInterfaceTypesEnum[keyof typeof GetHotelInterfaceFailedMessagesInterfaceTypesEnum];
/**
 * @export
 */
export const GetHotelInterfaceSchemasInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfaceSchemasInterfaceTypesEnum = typeof GetHotelInterfaceSchemasInterfaceTypesEnum[keyof typeof GetHotelInterfaceSchemasInterfaceTypesEnum];
/**
 * @export
 */
export const GetHotelInterfacesInterfaceTypesEnum = {
    Bms: 'Bms',
    Cas: 'Cas',
    Ccw: 'Ccw',
    Dls: 'Dls',
    Eft: 'Eft',
    Exp: 'Exp',
    Mak: 'Mak',
    Mbs: 'Mbs',
    Msc: 'Msc',
    Pbx: 'Pbx',
    Pos: 'Pos',
    Svs: 'Svs',
    Tik: 'Tik',
    Vid: 'Vid',
    Vms: 'Vms',
    Www: 'Www',
    Xml: 'Xml'
} as const;
export type GetHotelInterfacesInterfaceTypesEnum = typeof GetHotelInterfacesInterfaceTypesEnum[keyof typeof GetHotelInterfacesInterfaceTypesEnum];
