/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  Status,
  TemplateDeviceLocationsCriteria,
  TemplateDeviceLocationsDetails,
  TemplateDeviceLocationsToBeChanged,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateDeviceLocationsCriteriaFromJSON,
    TemplateDeviceLocationsCriteriaToJSON,
    TemplateDeviceLocationsDetailsFromJSON,
    TemplateDeviceLocationsDetailsToJSON,
    TemplateDeviceLocationsToBeChangedFromJSON,
    TemplateDeviceLocationsToBeChangedToJSON,
} from '../models/index';

export interface ChangeTemplateDeviceLocationsRequest {
    deviceLocationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateDeviceLocationsToBeChanged?: TemplateDeviceLocationsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateDeviceLocationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateDeviceLocationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateDeviceLocationsCriteria?: TemplateDeviceLocationsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateDeviceLocationsRequest {
    deviceLocationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update the template device locations. <p><strong>OperationId:</strong>changeTemplateDeviceLocations</p>
     * Change the template device locations
     */
    async changeTemplateDeviceLocationsRaw(requestParameters: ChangeTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.deviceLocationId === null || requestParameters.deviceLocationId === undefined) {
            throw new runtime.RequiredError('deviceLocationId','Required parameter requestParameters.deviceLocationId was null or undefined when calling changeTemplateDeviceLocations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeTemplateDeviceLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeTemplateDeviceLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeTemplateDeviceLocations.');
        }

        if (requestParameters.templateDeviceLocationsToBeChanged === null || requestParameters.templateDeviceLocationsToBeChanged === undefined) {
            throw new runtime.RequiredError('templateDeviceLocationsToBeChanged','Required parameter requestParameters.templateDeviceLocationsToBeChanged was null or undefined when calling changeTemplateDeviceLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deviceLocations/{deviceLocationId}`.replace(`{${"deviceLocationId"}}`, encodeURIComponent(String(requestParameters.deviceLocationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateDeviceLocationsToBeChangedToJSON(requestParameters.templateDeviceLocationsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update the template device locations. <p><strong>OperationId:</strong>changeTemplateDeviceLocations</p>
     * Change the template device locations
     */
    async changeTemplateDeviceLocations(requestParameters: ChangeTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateDeviceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the template device locations. <p><strong>OperationId:</strong>getTemplateDeviceLocations</p>
     * Get the template device locations
     */
    async getTemplateDeviceLocationsRaw(requestParameters: GetTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateDeviceLocationsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTemplateDeviceLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTemplateDeviceLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTemplateDeviceLocations.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deviceLocations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateDeviceLocationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get the template device locations. <p><strong>OperationId:</strong>getTemplateDeviceLocations</p>
     * Get the template device locations
     */
    async getTemplateDeviceLocations(requestParameters: GetTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateDeviceLocationsDetails> {
        const response = await this.getTemplateDeviceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create the template device locations. <p><strong>OperationId:</strong>postTemplateDeviceLocations</p>
     * Create the template device locations
     */
    async postTemplateDeviceLocationsRaw(requestParameters: PostTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTemplateDeviceLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTemplateDeviceLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTemplateDeviceLocations.');
        }

        if (requestParameters.templateDeviceLocationsCriteria === null || requestParameters.templateDeviceLocationsCriteria === undefined) {
            throw new runtime.RequiredError('templateDeviceLocationsCriteria','Required parameter requestParameters.templateDeviceLocationsCriteria was null or undefined when calling postTemplateDeviceLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deviceLocations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateDeviceLocationsCriteriaToJSON(requestParameters.templateDeviceLocationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create the template device locations. <p><strong>OperationId:</strong>postTemplateDeviceLocations</p>
     * Create the template device locations
     */
    async postTemplateDeviceLocations(requestParameters: PostTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateDeviceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete the template device locations. <p><strong>OperationId:</strong>removeTemplateDeviceLocations</p>
     * Delete the template device locations
     */
    async removeTemplateDeviceLocationsRaw(requestParameters: RemoveTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.deviceLocationId === null || requestParameters.deviceLocationId === undefined) {
            throw new runtime.RequiredError('deviceLocationId','Required parameter requestParameters.deviceLocationId was null or undefined when calling removeTemplateDeviceLocations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeTemplateDeviceLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeTemplateDeviceLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeTemplateDeviceLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/deviceLocations/{deviceLocationId}`.replace(`{${"deviceLocationId"}}`, encodeURIComponent(String(requestParameters.deviceLocationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete the template device locations. <p><strong>OperationId:</strong>removeTemplateDeviceLocations</p>
     * Delete the template device locations
     */
    async removeTemplateDeviceLocations(requestParameters: RemoveTemplateDeviceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateDeviceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
