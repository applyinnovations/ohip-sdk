/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface InterfaceRightType
 */
export interface InterfaceRightType {
    /**
     * Hotel Code to which the Interface Right belongs to.
     * @type {string}
     * @memberof InterfaceRightType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof InterfaceRightType
     */
    interfaceId?: UniqueIDType;
    /**
     * Internal code for each allowed right of a Hotel Interface record.
     * @type {number}
     * @memberof InterfaceRightType
     */
    right?: number;
    /**
     * User defined code for an Interface Right.
     * @type {string}
     * @memberof InterfaceRightType
     */
    code?: string;
    /**
     * User defined description for an Interface Right.
     * @type {string}
     * @memberof InterfaceRightType
     */
    description?: string;
    /**
     * System Description of an allowed Interface Right.
     * @type {string}
     * @memberof InterfaceRightType
     */
    interfaceRightDescription?: string;
}

/**
 * Check if a given object implements the InterfaceRightType interface.
 */
export function instanceOfInterfaceRightType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceRightTypeFromJSON(json: any): InterfaceRightType {
    return InterfaceRightTypeFromJSONTyped(json, false);
}

export function InterfaceRightTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceRightType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !exists(json, 'interfaceId') ? undefined : UniqueIDTypeFromJSON(json['interfaceId']),
        'right': !exists(json, 'right') ? undefined : json['right'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'interfaceRightDescription': !exists(json, 'interfaceRightDescription') ? undefined : json['interfaceRightDescription'],
    };
}

export function InterfaceRightTypeToJSON(value?: InterfaceRightType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'interfaceId': UniqueIDTypeToJSON(value.interfaceId),
        'right': value.right,
        'code': value.code,
        'description': value.description,
        'interfaceRightDescription': value.interfaceRightDescription,
    };
}

