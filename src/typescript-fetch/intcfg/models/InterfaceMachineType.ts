/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface InterfaceMachineType
 */
export interface InterfaceMachineType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof InterfaceMachineType
     */
    id?: UniqueIDType;
    /**
     * Unique Machine name of the running Interface.
     * @type {string}
     * @memberof InterfaceMachineType
     */
    machine?: string;
    /**
     * Path and name of the Interface program running on every Machine.
     * @type {string}
     * @memberof InterfaceMachineType
     */
    program?: string;
    /**
     * Opera Interface controller (server) port for the connecting clients.
     * @type {number}
     * @memberof InterfaceMachineType
     */
    controllerPort?: number;
    /**
     * VNC server port for connecting to the VNC server.
     * @type {number}
     * @memberof InterfaceMachineType
     */
    vncPort?: number;
}

/**
 * Check if a given object implements the InterfaceMachineType interface.
 */
export function instanceOfInterfaceMachineType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceMachineTypeFromJSON(json: any): InterfaceMachineType {
    return InterfaceMachineTypeFromJSONTyped(json, false);
}

export function InterfaceMachineTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceMachineType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : UniqueIDTypeFromJSON(json['id']),
        'machine': !exists(json, 'machine') ? undefined : json['machine'],
        'program': !exists(json, 'program') ? undefined : json['program'],
        'controllerPort': !exists(json, 'controllerPort') ? undefined : json['controllerPort'],
        'vncPort': !exists(json, 'vncPort') ? undefined : json['vncPort'],
    };
}

export function InterfaceMachineTypeToJSON(value?: InterfaceMachineType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': UniqueIDTypeToJSON(value.id),
        'machine': value.machine,
        'program': value.program,
        'controllerPort': value.controllerPort,
        'vncPort': value.vncPort,
    };
}

