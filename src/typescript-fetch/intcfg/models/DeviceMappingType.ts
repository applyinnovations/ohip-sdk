/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Type that contains the codes used in/provided by the external device and their counterpart in OPERA.
 * @export
 * @interface DeviceMappingType
 */
export interface DeviceMappingType {
    /**
     * Internal code type of the mapping entry.
     * @type {string}
     * @memberof DeviceMappingType
     */
    codeType?: string;
    /**
     * Code used/provided by the external device or application.
     * @type {string}
     * @memberof DeviceMappingType
     */
    externalCode?: string;
    /**
     * Display name of the code mapping.
     * @type {string}
     * @memberof DeviceMappingType
     */
    displayName?: string;
    /**
     * Corresponding code value in OPERA.
     * @type {string}
     * @memberof DeviceMappingType
     */
    operaCode?: string;
}

/**
 * Check if a given object implements the DeviceMappingType interface.
 */
export function instanceOfDeviceMappingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DeviceMappingTypeFromJSON(json: any): DeviceMappingType {
    return DeviceMappingTypeFromJSONTyped(json, false);
}

export function DeviceMappingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceMappingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'codeType': !exists(json, 'codeType') ? undefined : json['codeType'],
        'externalCode': !exists(json, 'externalCode') ? undefined : json['externalCode'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'operaCode': !exists(json, 'operaCode') ? undefined : json['operaCode'],
    };
}

export function DeviceMappingTypeToJSON(value?: DeviceMappingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'codeType': value.codeType,
        'externalCode': value.externalCode,
        'displayName': value.displayName,
        'operaCode': value.operaCode,
    };
}

