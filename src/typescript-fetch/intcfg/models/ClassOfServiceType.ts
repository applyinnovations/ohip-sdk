/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DefinedNameFormatType } from './DefinedNameFormatType';
import {
    DefinedNameFormatTypeFromJSON,
    DefinedNameFormatTypeFromJSONTyped,
    DefinedNameFormatTypeToJSON,
} from './DefinedNameFormatType';

/**
 * 
 * @export
 * @interface ClassOfServiceType
 */
export interface ClassOfServiceType {
    /**
     * 
     * @type {string}
     * @memberof ClassOfServiceType
     */
    cosMsgLmpRg?: string;
    /**
     * 
     * @type {string}
     * @memberof ClassOfServiceType
     */
    cosChkRg?: string;
    /**
     * 
     * @type {string}
     * @memberof ClassOfServiceType
     */
    cosMsgCmdRg?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    roomEquipCi?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    roomEquipCo?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    guestDataChangeCo?: boolean;
    /**
     * Standard name format in the class of service.
     * @type {string}
     * @memberof ClassOfServiceType
     */
    standardNameFormat?: string;
    /**
     * Defined name format in the class of service.
     * @type {Array<DefinedNameFormatType>}
     * @memberof ClassOfServiceType
     */
    definedNameFormat?: Array<DefinedNameFormatType>;
    /**
     * Indicates whethe a message will be triggered when a room/reservation is placed on QUEUE
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    resvInQueue?: boolean;
}

/**
 * Check if a given object implements the ClassOfServiceType interface.
 */
export function instanceOfClassOfServiceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClassOfServiceTypeFromJSON(json: any): ClassOfServiceType {
    return ClassOfServiceTypeFromJSONTyped(json, false);
}

export function ClassOfServiceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClassOfServiceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cosMsgLmpRg': !exists(json, 'cosMsgLmpRg') ? undefined : json['cosMsgLmpRg'],
        'cosChkRg': !exists(json, 'cosChkRg') ? undefined : json['cosChkRg'],
        'cosMsgCmdRg': !exists(json, 'cosMsgCmdRg') ? undefined : json['cosMsgCmdRg'],
        'roomEquipCi': !exists(json, 'roomEquipCi') ? undefined : json['roomEquipCi'],
        'roomEquipCo': !exists(json, 'roomEquipCo') ? undefined : json['roomEquipCo'],
        'guestDataChangeCo': !exists(json, 'guestDataChangeCo') ? undefined : json['guestDataChangeCo'],
        'standardNameFormat': !exists(json, 'standardNameFormat') ? undefined : json['standardNameFormat'],
        'definedNameFormat': !exists(json, 'definedNameFormat') ? undefined : ((json['definedNameFormat'] as Array<any>).map(DefinedNameFormatTypeFromJSON)),
        'resvInQueue': !exists(json, 'resvInQueue') ? undefined : json['resvInQueue'],
    };
}

export function ClassOfServiceTypeToJSON(value?: ClassOfServiceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cosMsgLmpRg': value.cosMsgLmpRg,
        'cosChkRg': value.cosChkRg,
        'cosMsgCmdRg': value.cosMsgCmdRg,
        'roomEquipCi': value.roomEquipCi,
        'roomEquipCo': value.roomEquipCo,
        'guestDataChangeCo': value.guestDataChangeCo,
        'standardNameFormat': value.standardNameFormat,
        'definedNameFormat': value.definedNameFormat === undefined ? undefined : ((value.definedNameFormat as Array<any>).map(DefinedNameFormatTypeToJSON)),
        'resvInQueue': value.resvInQueue,
    };
}

