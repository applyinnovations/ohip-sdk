/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelInterfaceSchemaType } from './HotelInterfaceSchemaType';
import {
    HotelInterfaceSchemaTypeFromJSON,
    HotelInterfaceSchemaTypeFromJSONTyped,
    HotelInterfaceSchemaTypeToJSON,
} from './HotelInterfaceSchemaType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object for retrieving Hotel Interface Schemas.
 * @export
 * @interface FetchedHotelInterfaceSchemas
 */
export interface FetchedHotelInterfaceSchemas {
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof FetchedHotelInterfaceSchemas
     */
    hasMore?: boolean;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof FetchedHotelInterfaceSchemas
     */
    limit?: number;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof FetchedHotelInterfaceSchemas
     */
    links?: Array<InstanceLink>;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof FetchedHotelInterfaceSchemas
     */
    offset?: number;
    /**
     * Collection of Hotel Interface Schemas.
     * @type {Array<HotelInterfaceSchemaType>}
     * @memberof FetchedHotelInterfaceSchemas
     */
    schemas?: Array<HotelInterfaceSchemaType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof FetchedHotelInterfaceSchemas
     */
    totalPages?: number;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof FetchedHotelInterfaceSchemas
     */
    totalResults?: number;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof FetchedHotelInterfaceSchemas
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the FetchedHotelInterfaceSchemas interface.
 */
export function instanceOfFetchedHotelInterfaceSchemas(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FetchedHotelInterfaceSchemasFromJSON(json: any): FetchedHotelInterfaceSchemas {
    return FetchedHotelInterfaceSchemasFromJSONTyped(json, false);
}

export function FetchedHotelInterfaceSchemasFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchedHotelInterfaceSchemas {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'schemas': !exists(json, 'schemas') ? undefined : ((json['schemas'] as Array<any>).map(HotelInterfaceSchemaTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function FetchedHotelInterfaceSchemasToJSON(value?: FetchedHotelInterfaceSchemas | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hasMore': value.hasMore,
        'limit': value.limit,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'offset': value.offset,
        'schemas': value.schemas === undefined ? undefined : ((value.schemas as Array<any>).map(HotelInterfaceSchemaTypeToJSON)),
        'totalPages': value.totalPages,
        'totalResults': value.totalResults,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

