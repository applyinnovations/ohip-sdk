/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelInterfacesType } from './HotelInterfacesType';
import {
    HotelInterfacesTypeFromJSON,
    HotelInterfacesTypeFromJSONTyped,
    HotelInterfacesTypeToJSON,
} from './HotelInterfacesType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response object for retrieving Hotel Interfaces.
 * @export
 * @interface FetchedHotelInterfaces
 */
export interface FetchedHotelInterfaces {
    /**
     * 
     * @type {HotelInterfacesType}
     * @memberof FetchedHotelInterfaces
     */
    hotelInterfaces?: HotelInterfacesType;
    /**
     * 
     * @type {Links}
     * @memberof FetchedHotelInterfaces
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof FetchedHotelInterfaces
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the FetchedHotelInterfaces interface.
 */
export function instanceOfFetchedHotelInterfaces(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FetchedHotelInterfacesFromJSON(json: any): FetchedHotelInterfaces {
    return FetchedHotelInterfacesFromJSONTyped(json, false);
}

export function FetchedHotelInterfacesFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchedHotelInterfaces {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelInterfaces': !exists(json, 'hotelInterfaces') ? undefined : HotelInterfacesTypeFromJSON(json['hotelInterfaces']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function FetchedHotelInterfacesToJSON(value?: FetchedHotelInterfaces | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelInterfaces': HotelInterfacesTypeToJSON(value.hotelInterfaces),
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

