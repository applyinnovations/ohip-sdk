/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DefinedNameFormatType
 */
export interface DefinedNameFormatType {
    /**
     * Hotel Code where the defined name format is associated.
     * @type {string}
     * @memberof DefinedNameFormatType
     */
    hotelId?: string;
    /**
     * ID of the defined name format.
     * @type {string}
     * @memberof DefinedNameFormatType
     */
    definedFormatId?: string;
    /**
     * Table from which the info will be retrieved.
     * @type {string}
     * @memberof DefinedNameFormatType
     */
    expressionTable?: string;
    /**
     * Expression of the defined name format It basically contains all formats that are being set.
     * @type {string}
     * @memberof DefinedNameFormatType
     */
    expression?: string;
    /**
     * Logo of the hotel interface.
     * @type {string}
     * @memberof DefinedNameFormatType
     */
    logo?: string;
}

/**
 * Check if a given object implements the DefinedNameFormatType interface.
 */
export function instanceOfDefinedNameFormatType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DefinedNameFormatTypeFromJSON(json: any): DefinedNameFormatType {
    return DefinedNameFormatTypeFromJSONTyped(json, false);
}

export function DefinedNameFormatTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DefinedNameFormatType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'definedFormatId': !exists(json, 'definedFormatId') ? undefined : json['definedFormatId'],
        'expressionTable': !exists(json, 'expressionTable') ? undefined : json['expressionTable'],
        'expression': !exists(json, 'expression') ? undefined : json['expression'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
    };
}

export function DefinedNameFormatTypeToJSON(value?: DefinedNameFormatType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'definedFormatId': value.definedFormatId,
        'expressionTable': value.expressionTable,
        'expression': value.expression,
        'logo': value.logo,
    };
}

