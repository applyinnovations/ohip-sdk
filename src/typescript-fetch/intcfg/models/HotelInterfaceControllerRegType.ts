/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface HotelInterfaceControllerRegType
 */
export interface HotelInterfaceControllerRegType {
    /**
     * Internal ID to reference the records.
     * @type {number}
     * @memberof HotelInterfaceControllerRegType
     */
    id?: number;
    /**
     * Machine Name
     * @type {string}
     * @memberof HotelInterfaceControllerRegType
     */
    machine?: string;
    /**
     * Controller Registry Setting
     * @type {string}
     * @memberof HotelInterfaceControllerRegType
     */
    cntrlRegSetting?: string;
    /**
     * Data
     * @type {string}
     * @memberof HotelInterfaceControllerRegType
     */
    data?: string;
    /**
     * Description
     * @type {string}
     * @memberof HotelInterfaceControllerRegType
     */
    description?: string;
}

/**
 * Check if a given object implements the HotelInterfaceControllerRegType interface.
 */
export function instanceOfHotelInterfaceControllerRegType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelInterfaceControllerRegTypeFromJSON(json: any): HotelInterfaceControllerRegType {
    return HotelInterfaceControllerRegTypeFromJSONTyped(json, false);
}

export function HotelInterfaceControllerRegTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelInterfaceControllerRegType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'machine': !exists(json, 'machine') ? undefined : json['machine'],
        'cntrlRegSetting': !exists(json, 'cntrlRegSetting') ? undefined : json['cntrlRegSetting'],
        'data': !exists(json, 'data') ? undefined : json['data'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function HotelInterfaceControllerRegTypeToJSON(value?: HotelInterfaceControllerRegType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'machine': value.machine,
        'cntrlRegSetting': value.cntrlRegSetting,
        'data': value.data,
        'description': value.description,
    };
}

