/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InterfaceWorkstationType
 */
export interface InterfaceWorkstationType {
    /**
     * Hotel Code of a workstation.
     * @type {string}
     * @memberof InterfaceWorkstationType
     */
    hotelId?: string;
    /**
     * Logo of a workstation.
     * @type {string}
     * @memberof InterfaceWorkstationType
     */
    logo?: string;
    /**
     * Internal code of a workstation.
     * @type {number}
     * @memberof InterfaceWorkstationType
     */
    internalCode?: number;
    /**
     * Workstation of a hotel interface.
     * @type {string}
     * @memberof InterfaceWorkstationType
     */
    workstation?: string;
    /**
     * IP of a workstation.
     * @type {string}
     * @memberof InterfaceWorkstationType
     */
    deviceIp?: string;
    /**
     * Location of a workstation.
     * @type {string}
     * @memberof InterfaceWorkstationType
     */
    location?: string;
    /**
     * Type of a workstation.
     * @type {string}
     * @memberof InterfaceWorkstationType
     */
    type?: string;
    /**
     * Device Group / Area.
     * @type {string}
     * @memberof InterfaceWorkstationType
     */
    deviceLocation?: string;
}

/**
 * Check if a given object implements the InterfaceWorkstationType interface.
 */
export function instanceOfInterfaceWorkstationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceWorkstationTypeFromJSON(json: any): InterfaceWorkstationType {
    return InterfaceWorkstationTypeFromJSONTyped(json, false);
}

export function InterfaceWorkstationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceWorkstationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
        'internalCode': !exists(json, 'internalCode') ? undefined : json['internalCode'],
        'workstation': !exists(json, 'workstation') ? undefined : json['workstation'],
        'deviceIp': !exists(json, 'deviceIp') ? undefined : json['deviceIp'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'deviceLocation': !exists(json, 'deviceLocation') ? undefined : json['deviceLocation'],
    };
}

export function InterfaceWorkstationTypeToJSON(value?: InterfaceWorkstationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'logo': value.logo,
        'internalCode': value.internalCode,
        'workstation': value.workstation,
        'deviceIp': value.deviceIp,
        'location': value.location,
        'type': value.type,
        'deviceLocation': value.deviceLocation,
    };
}

