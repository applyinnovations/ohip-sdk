/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelInterfaceTypeType } from './HotelInterfaceTypeType';
import {
    HotelInterfaceTypeTypeFromJSON,
    HotelInterfaceTypeTypeFromJSONTyped,
    HotelInterfaceTypeTypeToJSON,
} from './HotelInterfaceTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface InterfacePrimaryInfoType
 */
export interface InterfacePrimaryInfoType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceId?: UniqueIDType;
    /**
     * Hotel Code
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    hotelId?: string;
    /**
     * Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    logo?: string;
    /**
     * Name of the Hotel Interface
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceName?: string;
    /**
     * 
     * @type {HotelInterfaceTypeType}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceType?: HotelInterfaceTypeType;
    /**
     * Three letter code that uniquely identifies the external interface.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    productCode?: string;
    /**
     * Interface License code
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    licenseCode?: string;
    /**
     * The ID stored in IFC_MACHINES table.
     * @type {number}
     * @memberof InterfacePrimaryInfoType
     */
    machineId?: number;
    /**
     * Unique machine name of the running IFC.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    machineName?: string;
    /**
     * FKT Logo required for the external interface.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceProductCode?: string;
    /**
     * Stores the Outbound Code to identify the target system.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    outboundCode?: string;
}

/**
 * Check if a given object implements the InterfacePrimaryInfoType interface.
 */
export function instanceOfInterfacePrimaryInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfacePrimaryInfoTypeFromJSON(json: any): InterfacePrimaryInfoType {
    return InterfacePrimaryInfoTypeFromJSONTyped(json, false);
}

export function InterfacePrimaryInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfacePrimaryInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceId': !exists(json, 'interfaceId') ? undefined : UniqueIDTypeFromJSON(json['interfaceId']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
        'interfaceName': !exists(json, 'interfaceName') ? undefined : json['interfaceName'],
        'interfaceType': !exists(json, 'interfaceType') ? undefined : HotelInterfaceTypeTypeFromJSON(json['interfaceType']),
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
        'licenseCode': !exists(json, 'licenseCode') ? undefined : json['licenseCode'],
        'machineId': !exists(json, 'machineId') ? undefined : json['machineId'],
        'machineName': !exists(json, 'machineName') ? undefined : json['machineName'],
        'interfaceProductCode': !exists(json, 'interfaceProductCode') ? undefined : json['interfaceProductCode'],
        'outboundCode': !exists(json, 'outboundCode') ? undefined : json['outboundCode'],
    };
}

export function InterfacePrimaryInfoTypeToJSON(value?: InterfacePrimaryInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceId': UniqueIDTypeToJSON(value.interfaceId),
        'hotelId': value.hotelId,
        'logo': value.logo,
        'interfaceName': value.interfaceName,
        'interfaceType': HotelInterfaceTypeTypeToJSON(value.interfaceType),
        'productCode': value.productCode,
        'licenseCode': value.licenseCode,
        'machineId': value.machineId,
        'machineName': value.machineName,
        'interfaceProductCode': value.interfaceProductCode,
        'outboundCode': value.outboundCode,
    };
}

