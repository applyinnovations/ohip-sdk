/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DeviceConfigurationType } from './DeviceConfigurationType';
import {
    DeviceConfigurationTypeFromJSON,
    DeviceConfigurationTypeFromJSONTyped,
    DeviceConfigurationTypeToJSON,
} from './DeviceConfigurationType';
import type { DeviceMappingType } from './DeviceMappingType';
import {
    DeviceMappingTypeFromJSON,
    DeviceMappingTypeFromJSONTyped,
    DeviceMappingTypeToJSON,
} from './DeviceMappingType';
import type { SupportedExternalDeviceType } from './SupportedExternalDeviceType';
import {
    SupportedExternalDeviceTypeFromJSON,
    SupportedExternalDeviceTypeFromJSONTyped,
    SupportedExternalDeviceTypeToJSON,
} from './SupportedExternalDeviceType';

/**
 * Type for the configurations available to the device.
 * @export
 * @interface ExternalDeviceConfigurationType
 */
export interface ExternalDeviceConfigurationType {
    /**
     * Property for which the device is configured.
     * @type {string}
     * @memberof ExternalDeviceConfigurationType
     */
    hotelId?: string;
    /**
     * 
     * @type {SupportedExternalDeviceType}
     * @memberof ExternalDeviceConfigurationType
     */
    device?: SupportedExternalDeviceType;
    /**
     * 
     * @type {Array<DeviceConfigurationType>}
     * @memberof ExternalDeviceConfigurationType
     */
    deviceConfigurations?: Array<DeviceConfigurationType>;
    /**
     * Type that contains the mappings of the codes used in the external device to the code used in OPERA.
     * @type {Array<DeviceMappingType>}
     * @memberof ExternalDeviceConfigurationType
     */
    codeMappings?: Array<DeviceMappingType>;
}

/**
 * Check if a given object implements the ExternalDeviceConfigurationType interface.
 */
export function instanceOfExternalDeviceConfigurationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExternalDeviceConfigurationTypeFromJSON(json: any): ExternalDeviceConfigurationType {
    return ExternalDeviceConfigurationTypeFromJSONTyped(json, false);
}

export function ExternalDeviceConfigurationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalDeviceConfigurationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'device': !exists(json, 'device') ? undefined : SupportedExternalDeviceTypeFromJSON(json['device']),
        'deviceConfigurations': !exists(json, 'deviceConfigurations') ? undefined : ((json['deviceConfigurations'] as Array<any>).map(DeviceConfigurationTypeFromJSON)),
        'codeMappings': !exists(json, 'codeMappings') ? undefined : ((json['codeMappings'] as Array<any>).map(DeviceMappingTypeFromJSON)),
    };
}

export function ExternalDeviceConfigurationTypeToJSON(value?: ExternalDeviceConfigurationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'device': SupportedExternalDeviceTypeToJSON(value.device),
        'deviceConfigurations': value.deviceConfigurations === undefined ? undefined : ((value.deviceConfigurations as Array<any>).map(DeviceConfigurationTypeToJSON)),
        'codeMappings': value.codeMappings === undefined ? undefined : ((value.codeMappings as Array<any>).map(DeviceMappingTypeToJSON)),
    };
}

