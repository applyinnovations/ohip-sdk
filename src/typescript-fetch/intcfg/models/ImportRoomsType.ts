/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImportRoomsType
 */
export interface ImportRoomsType {
    /**
     * Indicator for Requires line number setup, from Import Rooms related information of a Hotel Interface.
     * @type {boolean}
     * @memberof ImportRoomsType
     */
    requiresLineNumberSetup?: boolean;
    /**
     * Indicator for Virtual number setup, from Import Rooms related information of a Hotel Interface.
     * @type {boolean}
     * @memberof ImportRoomsType
     */
    virtualNumberSetup?: boolean;
    /**
     * Indicator for support of Input/Output Lines for Hotel Room Categories.
     * @type {boolean}
     * @memberof ImportRoomsType
     */
    ioLines?: boolean;
    /**
     * Translation table for incoming messages.
     * @type {string}
     * @memberof ImportRoomsType
     */
    inXlatId?: string;
    /**
     * Translation table for outgoing messages.
     * @type {string}
     * @memberof ImportRoomsType
     */
    ouXlatId?: string;
    /**
     * Concatenated label of Hotel Room Categories for which SendToInterface flag should be set as true.
     * @type {string}
     * @memberof ImportRoomsType
     */
    selectedRoomTypes?: string;
}

/**
 * Check if a given object implements the ImportRoomsType interface.
 */
export function instanceOfImportRoomsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImportRoomsTypeFromJSON(json: any): ImportRoomsType {
    return ImportRoomsTypeFromJSONTyped(json, false);
}

export function ImportRoomsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportRoomsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'requiresLineNumberSetup': !exists(json, 'requiresLineNumberSetup') ? undefined : json['requiresLineNumberSetup'],
        'virtualNumberSetup': !exists(json, 'virtualNumberSetup') ? undefined : json['virtualNumberSetup'],
        'ioLines': !exists(json, 'ioLines') ? undefined : json['ioLines'],
        'inXlatId': !exists(json, 'inXlatId') ? undefined : json['inXlatId'],
        'ouXlatId': !exists(json, 'ouXlatId') ? undefined : json['ouXlatId'],
        'selectedRoomTypes': !exists(json, 'selectedRoomTypes') ? undefined : json['selectedRoomTypes'],
    };
}

export function ImportRoomsTypeToJSON(value?: ImportRoomsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'requiresLineNumberSetup': value.requiresLineNumberSetup,
        'virtualNumberSetup': value.virtualNumberSetup,
        'ioLines': value.ioLines,
        'inXlatId': value.inXlatId,
        'ouXlatId': value.ouXlatId,
        'selectedRoomTypes': value.selectedRoomTypes,
    };
}

