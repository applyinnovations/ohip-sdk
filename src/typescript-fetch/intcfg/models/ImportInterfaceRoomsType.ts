/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataLineType } from './DataLineType';
import {
    DataLineTypeFromJSON,
    DataLineTypeFromJSONTyped,
    DataLineTypeToJSON,
} from './DataLineType';
import type { RoomMaskSetupType } from './RoomMaskSetupType';
import {
    RoomMaskSetupTypeFromJSON,
    RoomMaskSetupTypeFromJSONTyped,
    RoomMaskSetupTypeToJSON,
} from './RoomMaskSetupType';

/**
 * 
 * @export
 * @interface ImportInterfaceRoomsType
 */
export interface ImportInterfaceRoomsType {
    /**
     * Hotel Code to which the Interface Room belongs to.
     * @type {string}
     * @memberof ImportInterfaceRoomsType
     */
    hotelId?: string;
    /**
     * Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
     * @type {string}
     * @memberof ImportInterfaceRoomsType
     */
    logo?: string;
    /**
     * 
     * @type {DataLineType}
     * @memberof ImportInterfaceRoomsType
     */
    dataLine?: DataLineType;
    /**
     * Number of lines to use for the import of a Hotel Interface Room.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    numberOfLines?: number;
    /**
     * Number of lines to use for the import of a Hotel Interface Room.
     * @type {boolean}
     * @memberof ImportInterfaceRoomsType
     */
    removeLeadingZeros?: boolean;
    /**
     * Prefix for the Hotel Interface Room number for Line 1.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line1Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 1.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line1AddTo?: number;
    /**
     * Prefix for the Hotel Interface Room number for Line 2.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line2Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 2.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line2AddTo?: number;
    /**
     * Prefix for the Hotel Interface Room number for Line 3.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line3Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 3.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line3AddTo?: number;
    /**
     * Prefix for the Hotel Interface Room number for Line 4.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line4Prefix?: number;
    /**
     * Numeric value to be summed with the Hotel Interface Room number for Line 4.
     * @type {number}
     * @memberof ImportInterfaceRoomsType
     */
    line4AddTo?: number;
    /**
     * Concatenated label of Hotel Room Categories, which will be imported to the Hotel Interface.
     * @type {string}
     * @memberof ImportInterfaceRoomsType
     */
    selectedRoomTypes?: string;
    /**
     * Mask configurations for different line types.
     * @type {Array<RoomMaskSetupType>}
     * @memberof ImportInterfaceRoomsType
     */
    maskLines?: Array<RoomMaskSetupType>;
}

/**
 * Check if a given object implements the ImportInterfaceRoomsType interface.
 */
export function instanceOfImportInterfaceRoomsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImportInterfaceRoomsTypeFromJSON(json: any): ImportInterfaceRoomsType {
    return ImportInterfaceRoomsTypeFromJSONTyped(json, false);
}

export function ImportInterfaceRoomsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportInterfaceRoomsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
        'dataLine': !exists(json, 'dataLine') ? undefined : DataLineTypeFromJSON(json['dataLine']),
        'numberOfLines': !exists(json, 'numberOfLines') ? undefined : json['numberOfLines'],
        'removeLeadingZeros': !exists(json, 'removeLeadingZeros') ? undefined : json['removeLeadingZeros'],
        'line1Prefix': !exists(json, 'line1Prefix') ? undefined : json['line1Prefix'],
        'line1AddTo': !exists(json, 'line1AddTo') ? undefined : json['line1AddTo'],
        'line2Prefix': !exists(json, 'line2Prefix') ? undefined : json['line2Prefix'],
        'line2AddTo': !exists(json, 'line2AddTo') ? undefined : json['line2AddTo'],
        'line3Prefix': !exists(json, 'line3Prefix') ? undefined : json['line3Prefix'],
        'line3AddTo': !exists(json, 'line3AddTo') ? undefined : json['line3AddTo'],
        'line4Prefix': !exists(json, 'line4Prefix') ? undefined : json['line4Prefix'],
        'line4AddTo': !exists(json, 'line4AddTo') ? undefined : json['line4AddTo'],
        'selectedRoomTypes': !exists(json, 'selectedRoomTypes') ? undefined : json['selectedRoomTypes'],
        'maskLines': !exists(json, 'maskLines') ? undefined : ((json['maskLines'] as Array<any>).map(RoomMaskSetupTypeFromJSON)),
    };
}

export function ImportInterfaceRoomsTypeToJSON(value?: ImportInterfaceRoomsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'logo': value.logo,
        'dataLine': DataLineTypeToJSON(value.dataLine),
        'numberOfLines': value.numberOfLines,
        'removeLeadingZeros': value.removeLeadingZeros,
        'line1Prefix': value.line1Prefix,
        'line1AddTo': value.line1AddTo,
        'line2Prefix': value.line2Prefix,
        'line2AddTo': value.line2AddTo,
        'line3Prefix': value.line3Prefix,
        'line3AddTo': value.line3AddTo,
        'line4Prefix': value.line4Prefix,
        'line4AddTo': value.line4AddTo,
        'selectedRoomTypes': value.selectedRoomTypes,
        'maskLines': value.maskLines === undefined ? undefined : ((value.maskLines as Array<any>).map(RoomMaskSetupTypeToJSON)),
    };
}

