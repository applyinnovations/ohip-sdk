/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Type that contains the parameters and configurations used by the device.
 * @export
 * @interface DeviceConfigurationType
 */
export interface DeviceConfigurationType {
    /**
     * Internal name of the configuration.
     * @type {string}
     * @memberof DeviceConfigurationType
     */
    name?: string;
    /**
     * Configuration display name.
     * @type {string}
     * @memberof DeviceConfigurationType
     */
    displayName?: string;
    /**
     * Value of the configuration.
     * @type {string}
     * @memberof DeviceConfigurationType
     */
    value?: string;
    /**
     * Flag that indicates whether the configuration is required or not.
     * @type {boolean}
     * @memberof DeviceConfigurationType
     */
    required?: boolean;
    /**
     * Flag that indicates whether the configuration value should be encrypted or not.
     * @type {boolean}
     * @memberof DeviceConfigurationType
     */
    encrypted?: boolean;
}

/**
 * Check if a given object implements the DeviceConfigurationType interface.
 */
export function instanceOfDeviceConfigurationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DeviceConfigurationTypeFromJSON(json: any): DeviceConfigurationType {
    return DeviceConfigurationTypeFromJSONTyped(json, false);
}

export function DeviceConfigurationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeviceConfigurationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'encrypted': !exists(json, 'encrypted') ? undefined : json['encrypted'],
    };
}

export function DeviceConfigurationTypeToJSON(value?: DeviceConfigurationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'displayName': value.displayName,
        'value': value.value,
        'required': value.required,
        'encrypted': value.encrypted,
    };
}

