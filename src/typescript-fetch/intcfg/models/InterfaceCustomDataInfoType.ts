/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InterfaceCustomDataDetailType } from './InterfaceCustomDataDetailType';
import {
    InterfaceCustomDataDetailTypeFromJSON,
    InterfaceCustomDataDetailTypeFromJSONTyped,
    InterfaceCustomDataDetailTypeToJSON,
} from './InterfaceCustomDataDetailType';

/**
 * This type holds the custom data of a hotel interface.
 * @export
 * @interface InterfaceCustomDataInfoType
 */
export interface InterfaceCustomDataInfoType {
    /**
     * Specifies whether the details have to be exported as XML. If true, then the details are exported as XML else details are exported as text.
     * @type {boolean}
     * @memberof InterfaceCustomDataInfoType
     */
    exportAsXml?: boolean;
    /**
     * Specifies whether the Doorcard field details have to be included in the XML Export. If true, Doorcard field details will be included in the XML Export else details will not be included. This field is available only when the Export as XML field is selected.
     * @type {boolean}
     * @memberof InterfaceCustomDataInfoType
     */
    includeDoorcardField?: boolean;
    /**
     * Collection of custom data details of a hotel interface.
     * @type {Array<InterfaceCustomDataDetailType>}
     * @memberof InterfaceCustomDataInfoType
     */
    interfaceCustomDataDetails?: Array<InterfaceCustomDataDetailType>;
}

/**
 * Check if a given object implements the InterfaceCustomDataInfoType interface.
 */
export function instanceOfInterfaceCustomDataInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceCustomDataInfoTypeFromJSON(json: any): InterfaceCustomDataInfoType {
    return InterfaceCustomDataInfoTypeFromJSONTyped(json, false);
}

export function InterfaceCustomDataInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceCustomDataInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exportAsXml': !exists(json, 'exportAsXml') ? undefined : json['exportAsXml'],
        'includeDoorcardField': !exists(json, 'includeDoorcardField') ? undefined : json['includeDoorcardField'],
        'interfaceCustomDataDetails': !exists(json, 'interfaceCustomDataDetails') ? undefined : ((json['interfaceCustomDataDetails'] as Array<any>).map(InterfaceCustomDataDetailTypeFromJSON)),
    };
}

export function InterfaceCustomDataInfoTypeToJSON(value?: InterfaceCustomDataInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exportAsXml': value.exportAsXml,
        'includeDoorcardField': value.includeDoorcardField,
        'interfaceCustomDataDetails': value.interfaceCustomDataDetails === undefined ? undefined : ((value.interfaceCustomDataDetails as Array<any>).map(InterfaceCustomDataDetailTypeToJSON)),
    };
}

