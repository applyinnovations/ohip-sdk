/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InterfaceUnitChargeType
 */
export interface InterfaceUnitChargeType {
    /**
     * Trunk ID of the CAS or PBX.
     * @type {string}
     * @memberof InterfaceUnitChargeType
     */
    trunkId?: string;
    /**
     * Line Types setup in IFC_ROOM table.
     * @type {string}
     * @memberof InterfaceUnitChargeType
     */
    lineType?: string;
    /**
     * Guest VIP Code.
     * @type {string}
     * @memberof InterfaceUnitChargeType
     */
    vipCode?: string;
    /**
     * Starting number of units for the unit range.
     * @type {number}
     * @memberof InterfaceUnitChargeType
     */
    startUnit?: number;
    /**
     * Ending number of units for the unit range.
     * @type {number}
     * @memberof InterfaceUnitChargeType
     */
    endUnit?: number;
    /**
     * Amount charged per unit.
     * @type {number}
     * @memberof InterfaceUnitChargeType
     */
    pricePerUnit?: number;
}

/**
 * Check if a given object implements the InterfaceUnitChargeType interface.
 */
export function instanceOfInterfaceUnitChargeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceUnitChargeTypeFromJSON(json: any): InterfaceUnitChargeType {
    return InterfaceUnitChargeTypeFromJSONTyped(json, false);
}

export function InterfaceUnitChargeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceUnitChargeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trunkId': !exists(json, 'trunkId') ? undefined : json['trunkId'],
        'lineType': !exists(json, 'lineType') ? undefined : json['lineType'],
        'vipCode': !exists(json, 'vipCode') ? undefined : json['vipCode'],
        'startUnit': !exists(json, 'startUnit') ? undefined : json['startUnit'],
        'endUnit': !exists(json, 'endUnit') ? undefined : json['endUnit'],
        'pricePerUnit': !exists(json, 'pricePerUnit') ? undefined : json['pricePerUnit'],
    };
}

export function InterfaceUnitChargeTypeToJSON(value?: InterfaceUnitChargeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trunkId': value.trunkId,
        'lineType': value.lineType,
        'vipCode': value.vipCode,
        'startUnit': value.startUnit,
        'endUnit': value.endUnit,
        'pricePerUnit': value.pricePerUnit,
    };
}

