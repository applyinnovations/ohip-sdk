/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Integration Configuration API
 * APIs catering to Integration Configuration in OPERA Cloud.  Operations such as get Hotel Interface Types, or get UDF mappings can be found in this module.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DeviceCode } from './DeviceCode';
import {
    DeviceCodeFromJSON,
    DeviceCodeFromJSONTyped,
    DeviceCodeToJSON,
} from './DeviceCode';
import type { DeviceType } from './DeviceType';
import {
    DeviceTypeFromJSON,
    DeviceTypeFromJSONTyped,
    DeviceTypeToJSON,
} from './DeviceType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * External device details.
 * @export
 * @interface SupportedExternalDeviceType
 */
export interface SupportedExternalDeviceType {
    /**
     * 
     * @type {DeviceType}
     * @memberof SupportedExternalDeviceType
     */
    deviceType?: DeviceType;
    /**
     * 
     * @type {DeviceCode}
     * @memberof SupportedExternalDeviceType
     */
    deviceCode?: DeviceCode;
    /**
     * The area where the device is installed
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    deviceArea?: string;
    /**
     * External device display name.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    displayName?: string;
    /**
     * Indicator if device type is mobile or desktop.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    mobileYN?: boolean;
    /**
     * Indicator if device type is mobile or desktop.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    desktopYN?: boolean;
    /**
     * The address which the Cash Register ID ( Device ID ) is associated with.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    registerAddress?: string;
    /**
     * External device Value.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    deviceValue?: string;
    /**
     * Used for fiscal partner codes. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    fiscalPartnerCode?: string;
    /**
     * Flag to designate the primary Fiscal Terminal.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    primary?: boolean;
    /**
     * Flag that indicates whether the device is active.
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SupportedExternalDeviceType
     */
    label?: string;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof SupportedExternalDeviceType
     */
    translatableLabel?: TranslationTextType2000;
    /**
     * 
     * @type {boolean}
     * @memberof SupportedExternalDeviceType
     */
    iDEditable?: boolean;
}

/**
 * Check if a given object implements the SupportedExternalDeviceType interface.
 */
export function instanceOfSupportedExternalDeviceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SupportedExternalDeviceTypeFromJSON(json: any): SupportedExternalDeviceType {
    return SupportedExternalDeviceTypeFromJSONTyped(json, false);
}

export function SupportedExternalDeviceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SupportedExternalDeviceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deviceType': !exists(json, 'deviceType') ? undefined : DeviceTypeFromJSON(json['deviceType']),
        'deviceCode': !exists(json, 'deviceCode') ? undefined : DeviceCodeFromJSON(json['deviceCode']),
        'deviceArea': !exists(json, 'deviceArea') ? undefined : json['deviceArea'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'mobileYN': !exists(json, 'mobileYN') ? undefined : json['mobileYN'],
        'desktopYN': !exists(json, 'desktopYN') ? undefined : json['desktopYN'],
        'registerAddress': !exists(json, 'registerAddress') ? undefined : json['registerAddress'],
        'deviceValue': !exists(json, 'deviceValue') ? undefined : json['deviceValue'],
        'fiscalPartnerCode': !exists(json, 'fiscalPartnerCode') ? undefined : json['fiscalPartnerCode'],
        'primary': !exists(json, 'primary') ? undefined : json['primary'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'translatableLabel': !exists(json, 'translatableLabel') ? undefined : TranslationTextType2000FromJSON(json['translatableLabel']),
        'iDEditable': !exists(json, 'iDEditable') ? undefined : json['iDEditable'],
    };
}

export function SupportedExternalDeviceTypeToJSON(value?: SupportedExternalDeviceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deviceType': DeviceTypeToJSON(value.deviceType),
        'deviceCode': DeviceCodeToJSON(value.deviceCode),
        'deviceArea': value.deviceArea,
        'displayName': value.displayName,
        'mobileYN': value.mobileYN,
        'desktopYN': value.desktopYN,
        'registerAddress': value.registerAddress,
        'deviceValue': value.deviceValue,
        'fiscalPartnerCode': value.fiscalPartnerCode,
        'primary': value.primary,
        'active': value.active,
        'id': value.id,
        'label': value.label,
        'translatableLabel': TranslationTextType2000ToJSON(value.translatableLabel),
        'iDEditable': value.iDEditable,
    };
}

