/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AwardKindType } from './AwardKindType';
import {
    AwardKindTypeFromJSON,
    AwardKindTypeFromJSONTyped,
    AwardKindTypeToJSON,
} from './AwardKindType';
import type { AwardStatusType } from './AwardStatusType';
import {
    AwardStatusTypeFromJSON,
    AwardStatusTypeFromJSONTyped,
    AwardStatusTypeToJSON,
} from './AwardStatusType';
import type { FBAInfoType } from './FBAInfoType';
import {
    FBAInfoTypeFromJSON,
    FBAInfoTypeFromJSONTyped,
    FBAInfoTypeToJSON,
} from './FBAInfoType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { ReservationCertificateType } from './ReservationCertificateType';
import {
    ReservationCertificateTypeFromJSON,
    ReservationCertificateTypeFromJSONTyped,
    ReservationCertificateTypeToJSON,
} from './ReservationCertificateType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { RewardCertificateType } from './RewardCertificateType';
import {
    RewardCertificateTypeFromJSON,
    RewardCertificateTypeFromJSONTyped,
    RewardCertificateTypeToJSON,
} from './RewardCertificateType';

/**
 * Detailed information of the awards.
 * @export
 * @interface AwardType
 */
export interface AwardType {
    /**
     * Award category.
     * @type {string}
     * @memberof AwardType
     */
    awardCode?: string;
    /**
     * 
     * @type {AwardKindType}
     * @memberof AwardType
     */
    awardType?: AwardKindType;
    /**
     * Description of the award/certificate.
     * @type {string}
     * @memberof AwardType
     */
    description?: string;
    /**
     * Certificate No.
     * @type {string}
     * @memberof AwardType
     */
    certificateNo?: string;
    /**
     * Master Certificate No.
     * @type {string}
     * @memberof AwardType
     */
    masterCertificiateNo?: string;
    /**
     * Membership No.
     * @type {string}
     * @memberof AwardType
     */
    membershipNo?: string;
    /**
     * Hotel Code for which the routing instructions are provided for a profile.
     * @type {string}
     * @memberof AwardType
     */
    hotelId?: string;
    /**
     * Indicates the lowest hotel category for which the certificate is valid.
     * @type {string}
     * @memberof AwardType
     */
    hotelCategory?: string;
    /**
     * Hotel Code of the CRS application that this certificate belongs to.
     * @type {string}
     * @memberof AwardType
     */
    externalHotelCode?: string;
    /**
     * Confirmation Number given by a CRS application for this reservation.
     * @type {string}
     * @memberof AwardType
     */
    externalConfirmationNo?: string;
    /**
     * Indicates whether the category of certificate is valid or not for this resort.
     * @type {boolean}
     * @memberof AwardType
     */
    categoryValid?: boolean;
    /**
     * 
     * @type {ReservationCertificateType}
     * @memberof AwardType
     */
    reservationCertificateType?: ReservationCertificateType;
    /**
     * 
     * @type {RewardCertificateType}
     * @memberof AwardType
     */
    rewardCertificateType?: RewardCertificateType;
    /**
     * 
     * @type {AwardStatusType}
     * @memberof AwardType
     */
    status?: AwardStatusType;
    /**
     * Expiration Date.
     * @type {string}
     * @memberof AwardType
     */
    expirationDate?: string;
    /**
     * Signifies whether award is gift or not.
     * @type {boolean}
     * @memberof AwardType
     */
    gift?: boolean;
    /**
     * Signifies whether upgrade award or not.
     * @type {boolean}
     * @memberof AwardType
     */
    upgrade?: boolean;
    /**
     * Signifies whether upgrade is package or not.
     * @type {boolean}
     * @memberof AwardType
     */
    _package?: boolean;
    /**
     * Indicates if the award is an Instant Redemption award.
     * @type {boolean}
     * @memberof AwardType
     */
    instantlyRedeemable?: boolean;
    /**
     * Indicates if this certificate was ordered using the "Paid Upgrade" option in the E-Certs screen.
     * @type {boolean}
     * @memberof AwardType
     */
    paidUpgrade?: boolean;
    /**
     * Indicates if this certificate is detailed or not.
     * @type {boolean}
     * @memberof AwardType
     */
    detailedCertificate?: boolean;
    /**
     * Award Nights.
     * @type {number}
     * @memberof AwardType
     */
    nights?: number;
    /**
     * MRW : From MRW MAN:Entered manually.
     * @type {string}
     * @memberof AwardType
     */
    sourceType?: string;
    /**
     * No. of points used to order this award.
     * @type {number}
     * @memberof AwardType
     */
    points?: number;
    /**
     * 
     * @type {FBAInfoType}
     * @memberof AwardType
     */
    fBAInfo?: FBAInfoType;
    /**
     * 
     * @type {ReservationId}
     * @memberof AwardType
     */
    reservationId?: ReservationId;
    /**
     * 
     * @type {ProfileId}
     * @memberof AwardType
     */
    profileId?: ProfileId;
    /**
     * Quantity of such awards needed to be ordered.
     * @type {number}
     * @memberof AwardType
     */
    quantity?: number;
    /**
     * Indicates the order in which the certificates received from MRW.
     * @type {number}
     * @memberof AwardType
     */
    displaySequence?: number;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof AwardType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof AwardType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof AwardType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof AwardType
     */
    lastModifierId?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {string}
     * @memberof AwardType
     */
    purgeDate?: string;
}

/**
 * Check if a given object implements the AwardType interface.
 */
export function instanceOfAwardType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AwardTypeFromJSON(json: any): AwardType {
    return AwardTypeFromJSONTyped(json, false);
}

export function AwardTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwardType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'awardCode': !exists(json, 'awardCode') ? undefined : json['awardCode'],
        'awardType': !exists(json, 'awardType') ? undefined : AwardKindTypeFromJSON(json['awardType']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'certificateNo': !exists(json, 'certificateNo') ? undefined : json['certificateNo'],
        'masterCertificiateNo': !exists(json, 'masterCertificiateNo') ? undefined : json['masterCertificiateNo'],
        'membershipNo': !exists(json, 'membershipNo') ? undefined : json['membershipNo'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelCategory': !exists(json, 'hotelCategory') ? undefined : json['hotelCategory'],
        'externalHotelCode': !exists(json, 'externalHotelCode') ? undefined : json['externalHotelCode'],
        'externalConfirmationNo': !exists(json, 'externalConfirmationNo') ? undefined : json['externalConfirmationNo'],
        'categoryValid': !exists(json, 'categoryValid') ? undefined : json['categoryValid'],
        'reservationCertificateType': !exists(json, 'reservationCertificateType') ? undefined : ReservationCertificateTypeFromJSON(json['reservationCertificateType']),
        'rewardCertificateType': !exists(json, 'rewardCertificateType') ? undefined : RewardCertificateTypeFromJSON(json['rewardCertificateType']),
        'status': !exists(json, 'status') ? undefined : AwardStatusTypeFromJSON(json['status']),
        'expirationDate': !exists(json, 'expirationDate') ? undefined : json['expirationDate'],
        'gift': !exists(json, 'gift') ? undefined : json['gift'],
        'upgrade': !exists(json, 'upgrade') ? undefined : json['upgrade'],
        '_package': !exists(json, 'package') ? undefined : json['package'],
        'instantlyRedeemable': !exists(json, 'instantlyRedeemable') ? undefined : json['instantlyRedeemable'],
        'paidUpgrade': !exists(json, 'paidUpgrade') ? undefined : json['paidUpgrade'],
        'detailedCertificate': !exists(json, 'detailedCertificate') ? undefined : json['detailedCertificate'],
        'nights': !exists(json, 'nights') ? undefined : json['nights'],
        'sourceType': !exists(json, 'sourceType') ? undefined : json['sourceType'],
        'points': !exists(json, 'points') ? undefined : json['points'],
        'fBAInfo': !exists(json, 'fBAInfo') ? undefined : FBAInfoTypeFromJSON(json['fBAInfo']),
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : json['purgeDate'],
    };
}

export function AwardTypeToJSON(value?: AwardType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'awardCode': value.awardCode,
        'awardType': AwardKindTypeToJSON(value.awardType),
        'description': value.description,
        'certificateNo': value.certificateNo,
        'masterCertificiateNo': value.masterCertificiateNo,
        'membershipNo': value.membershipNo,
        'hotelId': value.hotelId,
        'hotelCategory': value.hotelCategory,
        'externalHotelCode': value.externalHotelCode,
        'externalConfirmationNo': value.externalConfirmationNo,
        'categoryValid': value.categoryValid,
        'reservationCertificateType': ReservationCertificateTypeToJSON(value.reservationCertificateType),
        'rewardCertificateType': RewardCertificateTypeToJSON(value.rewardCertificateType),
        'status': AwardStatusTypeToJSON(value.status),
        'expirationDate': value.expirationDate,
        'gift': value.gift,
        'upgrade': value.upgrade,
        'package': value._package,
        'instantlyRedeemable': value.instantlyRedeemable,
        'paidUpgrade': value.paidUpgrade,
        'detailedCertificate': value.detailedCertificate,
        'nights': value.nights,
        'sourceType': value.sourceType,
        'points': value.points,
        'fBAInfo': FBAInfoTypeToJSON(value.fBAInfo),
        'reservationId': ReservationIdToJSON(value.reservationId),
        'profileId': ProfileIdToJSON(value.profileId),
        'quantity': value.quantity,
        'displaySequence': value.displaySequence,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
        'purgeDate': value.purgeDate,
    };
}

