/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityType } from './EntityType';
import {
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
} from './EntityType';
import type { ScopeType } from './ScopeType';
import {
    ScopeTypeFromJSON,
    ScopeTypeFromJSONTyped,
    ScopeTypeToJSON,
} from './ScopeType';

/**
 * Type for the threshold elements.
 * @export
 * @interface ThresholdDetailsType
 */
export interface ThresholdDetailsType {
    /**
     * 
     * @type {EntityType}
     * @memberof ThresholdDetailsType
     */
    entity?: EntityType;
    /**
     * 
     * @type {ScopeType}
     * @memberof ThresholdDetailsType
     */
    scope?: ScopeType;
    /**
     * Minimum required number of quantities, counts or minutes that must be posted.
     * @type {number}
     * @memberof ThresholdDetailsType
     */
    minRequired?: number;
    /**
     * The number of quantities, counts or minutes for which transaction diversion is allowed .
     * @type {number}
     * @memberof ThresholdDetailsType
     */
    complimentary?: number;
    /**
     * Configuring this flag to be TRUE will make the thresholds editable.
     * @type {boolean}
     * @memberof ThresholdDetailsType
     */
    isEditable?: boolean;
}

/**
 * Check if a given object implements the ThresholdDetailsType interface.
 */
export function instanceOfThresholdDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ThresholdDetailsTypeFromJSON(json: any): ThresholdDetailsType {
    return ThresholdDetailsTypeFromJSONTyped(json, false);
}

export function ThresholdDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThresholdDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entity': !exists(json, 'entity') ? undefined : EntityTypeFromJSON(json['entity']),
        'scope': !exists(json, 'scope') ? undefined : ScopeTypeFromJSON(json['scope']),
        'minRequired': !exists(json, 'minRequired') ? undefined : json['minRequired'],
        'complimentary': !exists(json, 'complimentary') ? undefined : json['complimentary'],
        'isEditable': !exists(json, 'isEditable') ? undefined : json['isEditable'],
    };
}

export function ThresholdDetailsTypeToJSON(value?: ThresholdDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entity': EntityTypeToJSON(value.entity),
        'scope': ScopeTypeToJSON(value.scope),
        'minRequired': value.minRequired,
        'complimentary': value.complimentary,
        'isEditable': value.isEditable,
    };
}

