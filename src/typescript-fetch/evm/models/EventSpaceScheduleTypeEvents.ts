/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CalendarEventInfoType } from './CalendarEventInfoType';
import {
    CalendarEventInfoTypeFromJSON,
    CalendarEventInfoTypeFromJSONTyped,
    CalendarEventInfoTypeToJSON,
} from './CalendarEventInfoType';

/**
 * Collection of the Events Booked/Scheduled for the function space/functionSpaceDetails for the particular time period.
 * @export
 * @interface EventSpaceScheduleTypeEvents
 */
export interface EventSpaceScheduleTypeEvents {
    /**
     * Collection of the Events Booked/Scheduled for the function space/functionSpaceDetails for the particular time period.
     * @type {Array<CalendarEventInfoType>}
     * @memberof EventSpaceScheduleTypeEvents
     */
    event?: Array<CalendarEventInfoType>;
    /**
     * Collection of the Refernced event ids for the Function Space
     * @type {string}
     * @memberof EventSpaceScheduleTypeEvents
     */
    relatedEvents?: string;
}

/**
 * Check if a given object implements the EventSpaceScheduleTypeEvents interface.
 */
export function instanceOfEventSpaceScheduleTypeEvents(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventSpaceScheduleTypeEventsFromJSON(json: any): EventSpaceScheduleTypeEvents {
    return EventSpaceScheduleTypeEventsFromJSONTyped(json, false);
}

export function EventSpaceScheduleTypeEventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventSpaceScheduleTypeEvents {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'event': !exists(json, 'event') ? undefined : ((json['event'] as Array<any>).map(CalendarEventInfoTypeFromJSON)),
        'relatedEvents': !exists(json, 'relatedEvents') ? undefined : json['relatedEvents'],
    };
}

export function EventSpaceScheduleTypeEventsToJSON(value?: EventSpaceScheduleTypeEvents | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'event': value.event === undefined ? undefined : ((value.event as Array<any>).map(CalendarEventInfoTypeToJSON)),
        'relatedEvents': value.relatedEvents,
    };
}

