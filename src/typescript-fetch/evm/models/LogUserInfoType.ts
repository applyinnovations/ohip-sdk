/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserInfoType } from './UserInfoType';
import {
    UserInfoTypeFromJSON,
    UserInfoTypeFromJSONTyped,
    UserInfoTypeToJSON,
} from './UserInfoType';

/**
 * 
 * @export
 * @interface LogUserInfoType
 */
export interface LogUserInfoType {
    /**
     * 
     * @type {UserInfoType}
     * @memberof LogUserInfoType
     */
    userInfo?: UserInfoType;
    /**
     * User Log Changes Time Stamp details
     * @type {string}
     * @memberof LogUserInfoType
     */
    logDateTime?: string;
}

/**
 * Check if a given object implements the LogUserInfoType interface.
 */
export function instanceOfLogUserInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LogUserInfoTypeFromJSON(json: any): LogUserInfoType {
    return LogUserInfoTypeFromJSONTyped(json, false);
}

export function LogUserInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogUserInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userInfo': !exists(json, 'userInfo') ? undefined : UserInfoTypeFromJSON(json['userInfo']),
        'logDateTime': !exists(json, 'logDateTime') ? undefined : json['logDateTime'],
    };
}

export function LogUserInfoTypeToJSON(value?: LogUserInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'userInfo': UserInfoTypeToJSON(value.userInfo),
        'logDateTime': value.logDateTime,
    };
}

