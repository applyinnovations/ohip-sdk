/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringEventChangeListType } from './CateringEventChangeListType';
import {
    CateringEventChangeListTypeFromJSON,
    CateringEventChangeListTypeFromJSONTyped,
    CateringEventChangeListTypeToJSON,
} from './CateringEventChangeListType';
import type { CateringEventRevenueChangeListType } from './CateringEventRevenueChangeListType';
import {
    CateringEventRevenueChangeListTypeFromJSON,
    CateringEventRevenueChangeListTypeFromJSONTyped,
    CateringEventRevenueChangeListTypeToJSON,
} from './CateringEventRevenueChangeListType';
import type { CateringEventStatusChangeListType } from './CateringEventStatusChangeListType';
import {
    CateringEventStatusChangeListTypeFromJSON,
    CateringEventStatusChangeListTypeFromJSONTyped,
    CateringEventStatusChangeListTypeToJSON,
} from './CateringEventStatusChangeListType';

/**
 * 
 * @export
 * @interface CateringEventChangeType
 */
export interface CateringEventChangeType {
    /**
     * 
     * @type {CateringEventChangeListType}
     * @memberof CateringEventChangeType
     */
    changeList?: CateringEventChangeListType;
    /**
     * 
     * @type {CateringEventRevenueChangeListType}
     * @memberof CateringEventChangeType
     */
    revenueChangeList?: CateringEventRevenueChangeListType;
    /**
     * 
     * @type {CateringEventStatusChangeListType}
     * @memberof CateringEventChangeType
     */
    statusChangeList?: CateringEventStatusChangeListType;
}

/**
 * Check if a given object implements the CateringEventChangeType interface.
 */
export function instanceOfCateringEventChangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringEventChangeTypeFromJSON(json: any): CateringEventChangeType {
    return CateringEventChangeTypeFromJSONTyped(json, false);
}

export function CateringEventChangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventChangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changeList': !exists(json, 'changeList') ? undefined : CateringEventChangeListTypeFromJSON(json['changeList']),
        'revenueChangeList': !exists(json, 'revenueChangeList') ? undefined : CateringEventRevenueChangeListTypeFromJSON(json['revenueChangeList']),
        'statusChangeList': !exists(json, 'statusChangeList') ? undefined : CateringEventStatusChangeListTypeFromJSON(json['statusChangeList']),
    };
}

export function CateringEventChangeTypeToJSON(value?: CateringEventChangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'changeList': CateringEventChangeListTypeToJSON(value.changeList),
        'revenueChangeList': CateringEventRevenueChangeListTypeToJSON(value.revenueChangeList),
        'statusChangeList': CateringEventStatusChangeListTypeToJSON(value.statusChangeList),
    };
}

