/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringEventChangeInfoType } from './CateringEventChangeInfoType';
import {
    CateringEventChangeInfoTypeFromJSON,
    CateringEventChangeInfoTypeFromJSONTyped,
    CateringEventChangeInfoTypeToJSON,
} from './CateringEventChangeInfoType';
import type { EventRevenueChangeType } from './EventRevenueChangeType';
import {
    EventRevenueChangeTypeFromJSON,
    EventRevenueChangeTypeFromJSONTyped,
    EventRevenueChangeTypeToJSON,
} from './EventRevenueChangeType';
import type { EventStatusChangeType } from './EventStatusChangeType';
import {
    EventStatusChangeTypeFromJSON,
    EventStatusChangeTypeFromJSONTyped,
    EventStatusChangeTypeToJSON,
} from './EventStatusChangeType';

/**
 * 
 * @export
 * @interface CateringEventChangeType
 */
export interface CateringEventChangeType {
    /**
     * 
     * @type {Array<CateringEventChangeInfoType>}
     * @memberof CateringEventChangeType
     */
    changeList?: Array<CateringEventChangeInfoType>;
    /**
     * Event Revenue Changes Details
     * @type {Array<EventRevenueChangeType>}
     * @memberof CateringEventChangeType
     */
    revenueChangeList?: Array<EventRevenueChangeType>;
    /**
     * Event Status Changes Details
     * @type {Array<EventStatusChangeType>}
     * @memberof CateringEventChangeType
     */
    statusChangeList?: Array<EventStatusChangeType>;
}

/**
 * Check if a given object implements the CateringEventChangeType interface.
 */
export function instanceOfCateringEventChangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringEventChangeTypeFromJSON(json: any): CateringEventChangeType {
    return CateringEventChangeTypeFromJSONTyped(json, false);
}

export function CateringEventChangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventChangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'changeList': !exists(json, 'changeList') ? undefined : ((json['changeList'] as Array<any>).map(CateringEventChangeInfoTypeFromJSON)),
        'revenueChangeList': !exists(json, 'revenueChangeList') ? undefined : ((json['revenueChangeList'] as Array<any>).map(EventRevenueChangeTypeFromJSON)),
        'statusChangeList': !exists(json, 'statusChangeList') ? undefined : ((json['statusChangeList'] as Array<any>).map(EventStatusChangeTypeFromJSON)),
    };
}

export function CateringEventChangeTypeToJSON(value?: CateringEventChangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'changeList': value.changeList === undefined ? undefined : ((value.changeList as Array<any>).map(CateringEventChangeInfoTypeToJSON)),
        'revenueChangeList': value.revenueChangeList === undefined ? undefined : ((value.revenueChangeList as Array<any>).map(EventRevenueChangeTypeToJSON)),
        'statusChangeList': value.statusChangeList === undefined ? undefined : ((value.statusChangeList as Array<any>).map(EventStatusChangeTypeToJSON)),
    };
}

