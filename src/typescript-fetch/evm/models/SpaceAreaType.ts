/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SpaceAreaUnitType } from './SpaceAreaUnitType';
import {
    SpaceAreaUnitTypeFromJSON,
    SpaceAreaUnitTypeFromJSONTyped,
    SpaceAreaUnitTypeToJSON,
} from './SpaceAreaUnitType';

/**
 * Collection of the Events Booked/Scheduled for the function spaces in the Hotel for the particular time period.
 * @export
 * @interface SpaceAreaType
 */
export interface SpaceAreaType {
    /**
     * Room Area in Square Feet.
     * @type {number}
     * @memberof SpaceAreaType
     */
    area?: number;
    /**
     * 
     * @type {SpaceAreaUnitType}
     * @memberof SpaceAreaType
     */
    unit?: SpaceAreaUnitType;
}

/**
 * Check if a given object implements the SpaceAreaType interface.
 */
export function instanceOfSpaceAreaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SpaceAreaTypeFromJSON(json: any): SpaceAreaType {
    return SpaceAreaTypeFromJSONTyped(json, false);
}

export function SpaceAreaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpaceAreaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'area': !exists(json, 'area') ? undefined : json['area'],
        'unit': !exists(json, 'unit') ? undefined : SpaceAreaUnitTypeFromJSON(json['unit']),
    };
}

export function SpaceAreaTypeToJSON(value?: SpaceAreaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'area': value.area,
        'unit': SpaceAreaUnitTypeToJSON(value.unit),
    };
}

