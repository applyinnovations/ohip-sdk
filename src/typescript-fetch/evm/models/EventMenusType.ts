/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventMenuInfoType } from './EventMenuInfoType';
import {
    EventMenuInfoTypeFromJSON,
    EventMenuInfoTypeFromJSONTyped,
    EventMenuInfoTypeToJSON,
} from './EventMenuInfoType';

/**
 * List of event menus.
 * @export
 * @interface EventMenusType
 */
export interface EventMenusType {
    /**
     * Flag to indicate all event menus are critical.
     * @type {boolean}
     * @memberof EventMenusType
     */
    critical?: boolean;
    /**
     * Collection of Detailed information about event menus.
     * @type {Array<EventMenuInfoType>}
     * @memberof EventMenusType
     */
    eventMenuInfo?: Array<EventMenuInfoType>;
    /**
     * Flag to indicate all event menus are part of a package.
     * @type {boolean}
     * @memberof EventMenusType
     */
    includedInPackage?: boolean;
}

/**
 * Check if a given object implements the EventMenusType interface.
 */
export function instanceOfEventMenusType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventMenusTypeFromJSON(json: any): EventMenusType {
    return EventMenusTypeFromJSONTyped(json, false);
}

export function EventMenusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventMenusType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'critical': !exists(json, 'critical') ? undefined : json['critical'],
        'eventMenuInfo': !exists(json, 'eventMenuInfo') ? undefined : ((json['eventMenuInfo'] as Array<any>).map(EventMenuInfoTypeFromJSON)),
        'includedInPackage': !exists(json, 'includedInPackage') ? undefined : json['includedInPackage'],
    };
}

export function EventMenusTypeToJSON(value?: EventMenusType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'critical': value.critical,
        'eventMenuInfo': value.eventMenuInfo === undefined ? undefined : ((value.eventMenuInfo as Array<any>).map(EventMenuInfoTypeToJSON)),
        'includedInPackage': value.includedInPackage,
    };
}

