/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Reservation Ticket Type Information.
 * @export
 * @interface TicketType
 */
export interface TicketType {
    /**
     * Tickets comsumption date.
     * @type {Date}
     * @memberof TicketType
     */
    consumptionDate?: Date;
    /**
     * Package description.
     * @type {string}
     * @memberof TicketType
     */
    description?: string;
    /**
     * Tickets issue date.
     * @type {Date}
     * @memberof TicketType
     */
    issueDate?: Date;
    /**
     * Package Code.
     * @type {string}
     * @memberof TicketType
     */
    packageCode?: string;
    /**
     * Tickets price.
     * @type {number}
     * @memberof TicketType
     */
    price?: number;
    /**
     * Number of tickets used to create multiple tickets.
     * @type {number}
     * @memberof TicketType
     */
    quantity?: number;
    /**
     * Free text field for reference information.
     * @type {string}
     * @memberof TicketType
     */
    reference?: string;
    /**
     * The Rate Code to which tickets belong to.
     * @type {string}
     * @memberof TicketType
     */
    rentalCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof TicketType
     */
    reservationProductId?: UniqueIDType;
    /**
     * The Status Code for outbound WS call.
     * @type {string}
     * @memberof TicketType
     */
    status?: string;
    /**
     * The Status Description for outbound WS call.
     * @type {string}
     * @memberof TicketType
     */
    statusDescription?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof TicketType
     */
    ticketId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof TicketType
     */
    ticketNumber?: UniqueIDType;
}

/**
 * Check if a given object implements the TicketType interface.
 */
export function instanceOfTicketType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TicketTypeFromJSON(json: any): TicketType {
    return TicketTypeFromJSONTyped(json, false);
}

export function TicketTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TicketType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'consumptionDate': !exists(json, 'consumptionDate') ? undefined : (new Date(json['consumptionDate'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'issueDate': !exists(json, 'issueDate') ? undefined : (new Date(json['issueDate'])),
        'packageCode': !exists(json, 'packageCode') ? undefined : json['packageCode'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'rentalCode': !exists(json, 'rentalCode') ? undefined : json['rentalCode'],
        'reservationProductId': !exists(json, 'reservationProductId') ? undefined : UniqueIDTypeFromJSON(json['reservationProductId']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'statusDescription': !exists(json, 'statusDescription') ? undefined : json['statusDescription'],
        'ticketId': !exists(json, 'ticketId') ? undefined : UniqueIDTypeFromJSON(json['ticketId']),
        'ticketNumber': !exists(json, 'ticketNumber') ? undefined : UniqueIDTypeFromJSON(json['ticketNumber']),
    };
}

export function TicketTypeToJSON(value?: TicketType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'consumptionDate': value.consumptionDate === undefined ? undefined : (value.consumptionDate.toISOString().substr(0,10)),
        'description': value.description,
        'issueDate': value.issueDate === undefined ? undefined : (value.issueDate.toISOString().substr(0,10)),
        'packageCode': value.packageCode,
        'price': value.price,
        'quantity': value.quantity,
        'reference': value.reference,
        'rentalCode': value.rentalCode,
        'reservationProductId': UniqueIDTypeToJSON(value.reservationProductId),
        'status': value.status,
        'statusDescription': value.statusDescription,
        'ticketId': UniqueIDTypeToJSON(value.ticketId),
        'ticketNumber': UniqueIDTypeToJSON(value.ticketNumber),
    };
}

