/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { CateringEventLinkType } from './CateringEventLinkType';
import {
    CateringEventLinkTypeFromJSON,
    CateringEventLinkTypeFromJSONTyped,
    CateringEventLinkTypeToJSON,
} from './CateringEventLinkType';
import type { CateringStatusTypeType } from './CateringStatusTypeType';
import {
    CateringStatusTypeTypeFromJSON,
    CateringStatusTypeTypeFromJSONTyped,
    CateringStatusTypeTypeToJSON,
} from './CateringStatusTypeType';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { EventId } from './EventId';
import {
    EventIdFromJSON,
    EventIdFromJSONTyped,
    EventIdToJSON,
} from './EventId';
import type { IndicatorType } from './IndicatorType';
import {
    IndicatorTypeFromJSON,
    IndicatorTypeFromJSONTyped,
    IndicatorTypeToJSON,
} from './IndicatorType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Contains information about an event.
 * @export
 * @interface EventSummaryInfoType
 */
export interface EventSummaryInfoType {
    /**
     * 
     * @type {EventId}
     * @memberof EventSummaryInfoType
     */
    eventId?: EventId;
    /**
     * 
     * @type {CateringEventLinkType}
     * @memberof EventSummaryInfoType
     */
    eventLink?: CateringEventLinkType;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof EventSummaryInfoType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * Name of the block.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    blockName?: string;
    /**
     * Number of event attendees.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    attendees?: number;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof EventSummaryInfoType
     */
    functionSpaceDetails?: CodeDescriptionType;
    /**
     * Rental amount for the event function space.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    rentalAmount?: number;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof EventSummaryInfoType
     */
    functionSpaceSetup?: CodeDescriptionType;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof EventSummaryInfoType
     */
    indicators?: Array<IndicatorType>;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof EventSummaryInfoType
     */
    eventStatus?: BookingStatusType;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof EventSummaryInfoType
     */
    waitlistReturnStatus?: BookingStatusType;
    /**
     * 
     * @type {CateringStatusTypeType}
     * @memberof EventSummaryInfoType
     */
    cateringStatusType?: CateringStatusTypeType;
    /**
     * Flag to indicate if the Catering event deducts resources from inventory.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    cateringStatusDeductInventory?: boolean;
    /**
     * Flag to indicate if the Catering event returns resources to inventory.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    cateringStatusReturnToInventory?: boolean;
    /**
     * Event space setupCode time in minutes.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    setupTime?: number;
    /**
     * Event space tear down time in minutes.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    tearDownTime?: number;
    /**
     * Flag to indicate if the event is a master event.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    masterEvent?: boolean;
    /**
     * Flag to indicate if the event is a sub event.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    subEvent?: boolean;
    /**
     * Flag to indicate if the event is part of a package.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    packageEvent?: boolean;
    /**
     * Flag to indicate if the event is booked as a backup for another event.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    alternateEvent?: boolean;
    /**
     * Flag to indicate if the doorcard has been selected to display on reports or external readerboard systems.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    displayDoorCard?: boolean;
    /**
     * The doorcard to be displayed on reports or external readerboard systems.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    doorCard?: string;
    /**
     * Flag to indicate if the event revenue should be excluded from the forecast.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    excludeFromForecast?: boolean;
    /**
     * Flag to indicate whether to only use the forecasted values when reporting, regardless of whether resources are booked on an event.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    useForecastRevenue?: boolean;
    /**
     * Setup style code.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    setupCode?: string;
    /**
     * Minimum Occupancy for the SetupCode of Catring Event.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    minimumOccupancy?: number;
    /**
     * Maximum Occupancy for the SetupCode of Catring Event.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    maximumOccupancy?: number;
    /**
     * Discount Percentage applied to Rent Amount.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    discountPercentage?: number;
    /**
     * Indicates whether the event is expected to be noisy and might possibly disturb other events.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    loudEvent?: boolean;
    /**
     * Rate Code for function space.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    rentalCode?: string;
    /**
     * Flag to indicate if the event is shareable with other events.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    eventShared?: boolean;
    /**
     * Flag to indicate if the event functionSpaceDetails is shareable.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    shareable?: boolean;
    /**
     * Inactivation date of the event.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    inactiveDate?: string;
    /**
     * Package Code of the Event if it has a Package Enabled in it.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    packageCode?: string;
    /**
     * Package Name of the Event.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    packageName?: string;
    /**
     * Package Id of the Event.
     * @type {number}
     * @memberof EventSummaryInfoType
     */
    packageId?: number;
    /**
     * Flag to indicate if the event space is associated from the Package.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    includeSpaceInPackage?: boolean;
    /**
     * Hotel where the event is booked.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    hotelId?: string;
    /**
     * Hotel where the Block is created for the event.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    blockHotelCode?: string;
    /**
     * Indicates whether the event has postings.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    hasPostings?: boolean;
    /**
     * Indicates whether any event in the block has postings.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    blockHasPostings?: boolean;
    /**
     * Indicates whether the event has posted some charges, but not all.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    hasPartialPostings?: boolean;
    /**
     * Indicates whether the event has posted all charges.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    allPosted?: boolean;
    /**
     * Indicates that none of the charges on the event have been posted.
     * @type {boolean}
     * @memberof EventSummaryInfoType
     */
    nothingPosted?: boolean;
    /**
     * The starting value of the time span.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    eventStartDate?: string;
    /**
     * The ending value of the time span.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    eventEndDate?: string;
    /**
     * Type of event. Examples are LUN, DIN, etc.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    type?: string;
    /**
     * Name of event. This is used to describe the event.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    eventName?: string;
    /**
     * Currency code when base currency of the property is different than the catering currency.
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    cateringCurrency?: string;
    /**
     * Currency code which is been quoted for Catering Events
     * @type {string}
     * @memberof EventSummaryInfoType
     */
    cateringQuotedCurrency?: string;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof EventSummaryInfoType
     */
    eventIndicators?: Array<IndicatorType>;
}

/**
 * Check if a given object implements the EventSummaryInfoType interface.
 */
export function instanceOfEventSummaryInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventSummaryInfoTypeFromJSON(json: any): EventSummaryInfoType {
    return EventSummaryInfoTypeFromJSONTyped(json, false);
}

export function EventSummaryInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventSummaryInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventId': !exists(json, 'eventId') ? undefined : EventIdFromJSON(json['eventId']),
        'eventLink': !exists(json, 'eventLink') ? undefined : CateringEventLinkTypeFromJSON(json['eventLink']),
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'attendees': !exists(json, 'attendees') ? undefined : json['attendees'],
        'functionSpaceDetails': !exists(json, 'functionSpaceDetails') ? undefined : CodeDescriptionTypeFromJSON(json['functionSpaceDetails']),
        'rentalAmount': !exists(json, 'rentalAmount') ? undefined : json['rentalAmount'],
        'functionSpaceSetup': !exists(json, 'functionSpaceSetup') ? undefined : CodeDescriptionTypeFromJSON(json['functionSpaceSetup']),
        'indicators': !exists(json, 'indicators') ? undefined : ((json['indicators'] as Array<any>).map(IndicatorTypeFromJSON)),
        'eventStatus': !exists(json, 'eventStatus') ? undefined : BookingStatusTypeFromJSON(json['eventStatus']),
        'waitlistReturnStatus': !exists(json, 'waitlistReturnStatus') ? undefined : BookingStatusTypeFromJSON(json['waitlistReturnStatus']),
        'cateringStatusType': !exists(json, 'cateringStatusType') ? undefined : CateringStatusTypeTypeFromJSON(json['cateringStatusType']),
        'cateringStatusDeductInventory': !exists(json, 'cateringStatusDeductInventory') ? undefined : json['cateringStatusDeductInventory'],
        'cateringStatusReturnToInventory': !exists(json, 'cateringStatusReturnToInventory') ? undefined : json['cateringStatusReturnToInventory'],
        'setupTime': !exists(json, 'setupTime') ? undefined : json['setupTime'],
        'tearDownTime': !exists(json, 'tearDownTime') ? undefined : json['tearDownTime'],
        'masterEvent': !exists(json, 'masterEvent') ? undefined : json['masterEvent'],
        'subEvent': !exists(json, 'subEvent') ? undefined : json['subEvent'],
        'packageEvent': !exists(json, 'packageEvent') ? undefined : json['packageEvent'],
        'alternateEvent': !exists(json, 'alternateEvent') ? undefined : json['alternateEvent'],
        'displayDoorCard': !exists(json, 'displayDoorCard') ? undefined : json['displayDoorCard'],
        'doorCard': !exists(json, 'doorCard') ? undefined : json['doorCard'],
        'excludeFromForecast': !exists(json, 'excludeFromForecast') ? undefined : json['excludeFromForecast'],
        'useForecastRevenue': !exists(json, 'useForecastRevenue') ? undefined : json['useForecastRevenue'],
        'setupCode': !exists(json, 'setupCode') ? undefined : json['setupCode'],
        'minimumOccupancy': !exists(json, 'minimumOccupancy') ? undefined : json['minimumOccupancy'],
        'maximumOccupancy': !exists(json, 'maximumOccupancy') ? undefined : json['maximumOccupancy'],
        'discountPercentage': !exists(json, 'discountPercentage') ? undefined : json['discountPercentage'],
        'loudEvent': !exists(json, 'loudEvent') ? undefined : json['loudEvent'],
        'rentalCode': !exists(json, 'rentalCode') ? undefined : json['rentalCode'],
        'eventShared': !exists(json, 'eventShared') ? undefined : json['eventShared'],
        'shareable': !exists(json, 'shareable') ? undefined : json['shareable'],
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : json['inactiveDate'],
        'packageCode': !exists(json, 'packageCode') ? undefined : json['packageCode'],
        'packageName': !exists(json, 'packageName') ? undefined : json['packageName'],
        'packageId': !exists(json, 'packageId') ? undefined : json['packageId'],
        'includeSpaceInPackage': !exists(json, 'includeSpaceInPackage') ? undefined : json['includeSpaceInPackage'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockHotelCode': !exists(json, 'blockHotelCode') ? undefined : json['blockHotelCode'],
        'hasPostings': !exists(json, 'hasPostings') ? undefined : json['hasPostings'],
        'blockHasPostings': !exists(json, 'blockHasPostings') ? undefined : json['blockHasPostings'],
        'hasPartialPostings': !exists(json, 'hasPartialPostings') ? undefined : json['hasPartialPostings'],
        'allPosted': !exists(json, 'allPosted') ? undefined : json['allPosted'],
        'nothingPosted': !exists(json, 'nothingPosted') ? undefined : json['nothingPosted'],
        'eventStartDate': !exists(json, 'eventStartDate') ? undefined : json['eventStartDate'],
        'eventEndDate': !exists(json, 'eventEndDate') ? undefined : json['eventEndDate'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'eventName': !exists(json, 'eventName') ? undefined : json['eventName'],
        'cateringCurrency': !exists(json, 'cateringCurrency') ? undefined : json['cateringCurrency'],
        'cateringQuotedCurrency': !exists(json, 'cateringQuotedCurrency') ? undefined : json['cateringQuotedCurrency'],
        'eventIndicators': !exists(json, 'eventIndicators') ? undefined : ((json['eventIndicators'] as Array<any>).map(IndicatorTypeFromJSON)),
    };
}

export function EventSummaryInfoTypeToJSON(value?: EventSummaryInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventId': EventIdToJSON(value.eventId),
        'eventLink': CateringEventLinkTypeToJSON(value.eventLink),
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'blockName': value.blockName,
        'attendees': value.attendees,
        'functionSpaceDetails': CodeDescriptionTypeToJSON(value.functionSpaceDetails),
        'rentalAmount': value.rentalAmount,
        'functionSpaceSetup': CodeDescriptionTypeToJSON(value.functionSpaceSetup),
        'indicators': value.indicators === undefined ? undefined : ((value.indicators as Array<any>).map(IndicatorTypeToJSON)),
        'eventStatus': BookingStatusTypeToJSON(value.eventStatus),
        'waitlistReturnStatus': BookingStatusTypeToJSON(value.waitlistReturnStatus),
        'cateringStatusType': CateringStatusTypeTypeToJSON(value.cateringStatusType),
        'cateringStatusDeductInventory': value.cateringStatusDeductInventory,
        'cateringStatusReturnToInventory': value.cateringStatusReturnToInventory,
        'setupTime': value.setupTime,
        'tearDownTime': value.tearDownTime,
        'masterEvent': value.masterEvent,
        'subEvent': value.subEvent,
        'packageEvent': value.packageEvent,
        'alternateEvent': value.alternateEvent,
        'displayDoorCard': value.displayDoorCard,
        'doorCard': value.doorCard,
        'excludeFromForecast': value.excludeFromForecast,
        'useForecastRevenue': value.useForecastRevenue,
        'setupCode': value.setupCode,
        'minimumOccupancy': value.minimumOccupancy,
        'maximumOccupancy': value.maximumOccupancy,
        'discountPercentage': value.discountPercentage,
        'loudEvent': value.loudEvent,
        'rentalCode': value.rentalCode,
        'eventShared': value.eventShared,
        'shareable': value.shareable,
        'inactiveDate': value.inactiveDate,
        'packageCode': value.packageCode,
        'packageName': value.packageName,
        'packageId': value.packageId,
        'includeSpaceInPackage': value.includeSpaceInPackage,
        'hotelId': value.hotelId,
        'blockHotelCode': value.blockHotelCode,
        'hasPostings': value.hasPostings,
        'blockHasPostings': value.blockHasPostings,
        'hasPartialPostings': value.hasPartialPostings,
        'allPosted': value.allPosted,
        'nothingPosted': value.nothingPosted,
        'eventStartDate': value.eventStartDate,
        'eventEndDate': value.eventEndDate,
        'type': value.type,
        'eventName': value.eventName,
        'cateringCurrency': value.cateringCurrency,
        'cateringQuotedCurrency': value.cateringQuotedCurrency,
        'eventIndicators': value.eventIndicators === undefined ? undefined : ((value.eventIndicators as Array<any>).map(IndicatorTypeToJSON)),
    };
}

