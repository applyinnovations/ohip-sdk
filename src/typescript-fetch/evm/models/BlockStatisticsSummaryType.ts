/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RevenueSummaryType } from './RevenueSummaryType';
import {
    RevenueSummaryTypeFromJSON,
    RevenueSummaryTypeFromJSONTyped,
    RevenueSummaryTypeToJSON,
} from './RevenueSummaryType';
import type { StatisticsSummaryType } from './StatisticsSummaryType';
import {
    StatisticsSummaryTypeFromJSON,
    StatisticsSummaryTypeFromJSONTyped,
    StatisticsSummaryTypeToJSON,
} from './StatisticsSummaryType';

/**
 * Type to store summary detail like rooms sold, average functionSpaceDetails rate and revenue for a statistic type.
 * @export
 * @interface BlockStatisticsSummaryType
 */
export interface BlockStatisticsSummaryType {
    /**
     * 
     * @type {number}
     * @memberof BlockStatisticsSummaryType
     */
    avgRoomRate?: number;
    /**
     * 
     * @type {RevenueSummaryType}
     * @memberof BlockStatisticsSummaryType
     */
    revenueSummary?: RevenueSummaryType;
    /**
     * Total Number of Rooms Picked Up.
     * @type {number}
     * @memberof BlockStatisticsSummaryType
     */
    roomsSold?: number;
    /**
     * 
     * @type {StatisticsSummaryType}
     * @memberof BlockStatisticsSummaryType
     */
    statisticType?: StatisticsSummaryType;
}

/**
 * Check if a given object implements the BlockStatisticsSummaryType interface.
 */
export function instanceOfBlockStatisticsSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockStatisticsSummaryTypeFromJSON(json: any): BlockStatisticsSummaryType {
    return BlockStatisticsSummaryTypeFromJSONTyped(json, false);
}

export function BlockStatisticsSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockStatisticsSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'avgRoomRate': !exists(json, 'avgRoomRate') ? undefined : json['avgRoomRate'],
        'revenueSummary': !exists(json, 'revenueSummary') ? undefined : RevenueSummaryTypeFromJSON(json['revenueSummary']),
        'roomsSold': !exists(json, 'roomsSold') ? undefined : json['roomsSold'],
        'statisticType': !exists(json, 'statisticType') ? undefined : StatisticsSummaryTypeFromJSON(json['statisticType']),
    };
}

export function BlockStatisticsSummaryTypeToJSON(value?: BlockStatisticsSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'avgRoomRate': value.avgRoomRate,
        'revenueSummary': RevenueSummaryTypeToJSON(value.revenueSummary),
        'roomsSold': value.roomsSold,
        'statisticType': StatisticsSummaryTypeToJSON(value.statisticType),
    };
}

