/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventMenuType } from './EventMenuType';
import {
    EventMenuTypeFromJSON,
    EventMenuTypeFromJSONTyped,
    EventMenuTypeToJSON,
} from './EventMenuType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information about event menu.
 * @export
 * @interface EventMenuInfoType
 */
export interface EventMenuInfoType {
    /**
     * 
     * @type {EventMenuType}
     * @memberof EventMenuInfoType
     */
    eventMenu?: EventMenuType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof EventMenuInfoType
     */
    eventMenuId?: UniqueIDType;
}

/**
 * Check if a given object implements the EventMenuInfoType interface.
 */
export function instanceOfEventMenuInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventMenuInfoTypeFromJSON(json: any): EventMenuInfoType {
    return EventMenuInfoTypeFromJSONTyped(json, false);
}

export function EventMenuInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventMenuInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventMenu': !exists(json, 'eventMenu') ? undefined : EventMenuTypeFromJSON(json['eventMenu']),
        'eventMenuId': !exists(json, 'eventMenuId') ? undefined : UniqueIDTypeFromJSON(json['eventMenuId']),
    };
}

export function EventMenuInfoTypeToJSON(value?: EventMenuInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventMenu': EventMenuTypeToJSON(value.eventMenu),
        'eventMenuId': UniqueIDTypeToJSON(value.eventMenuId),
    };
}

