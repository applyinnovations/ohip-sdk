/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { TranslationTextType60 } from './TranslationTextType60';
import {
    TranslationTextType60FromJSON,
    TranslationTextType60FromJSONTyped,
    TranslationTextType60ToJSON,
} from './TranslationTextType60';

/**
 * Catering Event detail type.
 * @export
 * @interface CateringEventBulkUpdateDetailType
 */
export interface CateringEventBulkUpdateDetailType {
    /**
     * 
     * @type {TranslationTextType60}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventName?: TranslationTextType60;
    /**
     * Type of event.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventType?: string;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventStatus?: BookingStatusType;
    /**
     * Number of expected attendees for the event.
     * @type {number}
     * @memberof CateringEventBulkUpdateDetailType
     */
    expectedAttendees?: number;
    /**
     * Number of guaranteed attendees for the event.
     * @type {number}
     * @memberof CateringEventBulkUpdateDetailType
     */
    guaranteedAttendees?: number;
    /**
     * Number of actual attendees attending the event.
     * @type {number}
     * @memberof CateringEventBulkUpdateDetailType
     */
    actualAttendees?: number;
    /**
     * Group details to display on the outside of a meeting functionSpaceDetails.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    doorcard?: string;
    /**
     * Event eventStartDate date.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventStartDate?: string;
    /**
     * Event eventStartDate time.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventStartTime?: string;
    /**
     * Event eventEndDate date.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventEndDate?: string;
    /**
     * Event eventEndDate time.
     * @type {string}
     * @memberof CateringEventBulkUpdateDetailType
     */
    eventEndTime?: string;
    /**
     * Indicates whether the doorcard information is displayed.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    displayDoorcard?: boolean;
    /**
     * Indicates whether event dates and functionSpaceDetails are move able.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    notMoveable?: boolean;
    /**
     * Indicates whether the event is expected to be noisy and might possibly disturb other events.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    loudEvent?: boolean;
    /**
     * Indicates whether the event is excluded from forecast reports.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    exclude?: boolean;
    /**
     * Indicates whether the event revenue has to be forecasted.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    useForecast?: boolean;
    /**
     * Flag that indicates if actual revenue can be manually edited.
     * @type {boolean}
     * @memberof CateringEventBulkUpdateDetailType
     */
    revenueActualization?: boolean;
}

/**
 * Check if a given object implements the CateringEventBulkUpdateDetailType interface.
 */
export function instanceOfCateringEventBulkUpdateDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringEventBulkUpdateDetailTypeFromJSON(json: any): CateringEventBulkUpdateDetailType {
    return CateringEventBulkUpdateDetailTypeFromJSONTyped(json, false);
}

export function CateringEventBulkUpdateDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventBulkUpdateDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventName': !exists(json, 'eventName') ? undefined : TranslationTextType60FromJSON(json['eventName']),
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'eventStatus': !exists(json, 'eventStatus') ? undefined : BookingStatusTypeFromJSON(json['eventStatus']),
        'expectedAttendees': !exists(json, 'expectedAttendees') ? undefined : json['expectedAttendees'],
        'guaranteedAttendees': !exists(json, 'guaranteedAttendees') ? undefined : json['guaranteedAttendees'],
        'actualAttendees': !exists(json, 'actualAttendees') ? undefined : json['actualAttendees'],
        'doorcard': !exists(json, 'doorcard') ? undefined : json['doorcard'],
        'eventStartDate': !exists(json, 'eventStartDate') ? undefined : json['eventStartDate'],
        'eventStartTime': !exists(json, 'eventStartTime') ? undefined : json['eventStartTime'],
        'eventEndDate': !exists(json, 'eventEndDate') ? undefined : json['eventEndDate'],
        'eventEndTime': !exists(json, 'eventEndTime') ? undefined : json['eventEndTime'],
        'displayDoorcard': !exists(json, 'displayDoorcard') ? undefined : json['displayDoorcard'],
        'notMoveable': !exists(json, 'notMoveable') ? undefined : json['notMoveable'],
        'loudEvent': !exists(json, 'loudEvent') ? undefined : json['loudEvent'],
        'exclude': !exists(json, 'exclude') ? undefined : json['exclude'],
        'useForecast': !exists(json, 'useForecast') ? undefined : json['useForecast'],
        'revenueActualization': !exists(json, 'revenueActualization') ? undefined : json['revenueActualization'],
    };
}

export function CateringEventBulkUpdateDetailTypeToJSON(value?: CateringEventBulkUpdateDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventName': TranslationTextType60ToJSON(value.eventName),
        'eventType': value.eventType,
        'eventStatus': BookingStatusTypeToJSON(value.eventStatus),
        'expectedAttendees': value.expectedAttendees,
        'guaranteedAttendees': value.guaranteedAttendees,
        'actualAttendees': value.actualAttendees,
        'doorcard': value.doorcard,
        'eventStartDate': value.eventStartDate,
        'eventStartTime': value.eventStartTime,
        'eventEndDate': value.eventEndDate,
        'eventEndTime': value.eventEndTime,
        'displayDoorcard': value.displayDoorcard,
        'notMoveable': value.notMoveable,
        'loudEvent': value.loudEvent,
        'exclude': value.exclude,
        'useForecast': value.useForecast,
        'revenueActualization': value.revenueActualization,
    };
}

