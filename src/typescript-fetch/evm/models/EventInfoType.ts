/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockType } from './BlockType';
import {
    BlockTypeFromJSON,
    BlockTypeFromJSONTyped,
    BlockTypeToJSON,
} from './BlockType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { EventDetailType } from './EventDetailType';
import {
    EventDetailTypeFromJSON,
    EventDetailTypeFromJSONTyped,
    EventDetailTypeToJSON,
} from './EventDetailType';
import type { EventFunctionSpaceType } from './EventFunctionSpaceType';
import {
    EventFunctionSpaceTypeFromJSON,
    EventFunctionSpaceTypeFromJSONTyped,
    EventFunctionSpaceTypeToJSON,
} from './EventFunctionSpaceType';
import type { EventNotesType } from './EventNotesType';
import {
    EventNotesTypeFromJSON,
    EventNotesTypeFromJSONTyped,
    EventNotesTypeToJSON,
} from './EventNotesType';
import type { EventPrimaryInfoType } from './EventPrimaryInfoType';
import {
    EventPrimaryInfoTypeFromJSON,
    EventPrimaryInfoTypeFromJSONTyped,
    EventPrimaryInfoTypeToJSON,
} from './EventPrimaryInfoType';
import type { EventProcessInstructionsType } from './EventProcessInstructionsType';
import {
    EventProcessInstructionsTypeFromJSON,
    EventProcessInstructionsTypeFromJSONTyped,
    EventProcessInstructionsTypeToJSON,
} from './EventProcessInstructionsType';
import type { EventResourcesListType } from './EventResourcesListType';
import {
    EventResourcesListTypeFromJSON,
    EventResourcesListTypeFromJSONTyped,
    EventResourcesListTypeToJSON,
} from './EventResourcesListType';
import type { EventRevenuesInformationType } from './EventRevenuesInformationType';
import {
    EventRevenuesInformationTypeFromJSON,
    EventRevenuesInformationTypeFromJSONTyped,
    EventRevenuesInformationTypeToJSON,
} from './EventRevenuesInformationType';
import type { IndicatorsType } from './IndicatorsType';
import {
    IndicatorsTypeFromJSON,
    IndicatorsTypeFromJSONTyped,
    IndicatorsTypeToJSON,
} from './IndicatorsType';
import type { LightEventDetailType } from './LightEventDetailType';
import {
    LightEventDetailTypeFromJSON,
    LightEventDetailTypeFromJSONTyped,
    LightEventDetailTypeToJSON,
} from './LightEventDetailType';
import type { LightEventsDetailType } from './LightEventsDetailType';
import {
    LightEventsDetailTypeFromJSON,
    LightEventsDetailTypeFromJSONTyped,
    LightEventsDetailTypeToJSON,
} from './LightEventsDetailType';

/**
 * Catering Event information.
 * @export
 * @interface EventInfoType
 */
export interface EventInfoType {
    /**
     * 
     * @type {LightEventsDetailType}
     * @memberof EventInfoType
     */
    altEventsDetail?: LightEventsDetailType;
    /**
     * 
     * @type {BlockType}
     * @memberof EventInfoType
     */
    eventBlockInfo?: BlockType;
    /**
     * 
     * @type {EventDetailType}
     * @memberof EventInfoType
     */
    eventDetail?: EventDetailType;
    /**
     * 
     * @type {IndicatorsType}
     * @memberof EventInfoType
     */
    eventIndicators?: IndicatorsType;
    /**
     * 
     * @type {EventNotesType}
     * @memberof EventInfoType
     */
    eventNotes?: EventNotesType;
    /**
     * 
     * @type {EventPrimaryInfoType}
     * @memberof EventInfoType
     */
    eventPrimaryInfo?: EventPrimaryInfoType;
    /**
     * 
     * @type {EventResourcesListType}
     * @memberof EventInfoType
     */
    eventResources?: EventResourcesListType;
    /**
     * 
     * @type {EventRevenuesInformationType}
     * @memberof EventInfoType
     */
    eventRevenues?: EventRevenuesInformationType;
    /**
     * 
     * @type {EventFunctionSpaceType}
     * @memberof EventInfoType
     */
    functionSpaceInformation?: EventFunctionSpaceType;
    /**
     * 
     * @type {LightEventDetailType}
     * @memberof EventInfoType
     */
    masterEventDetail?: LightEventDetailType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventInfoType
     */
    onTheBooksRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {EventProcessInstructionsType}
     * @memberof EventInfoType
     */
    processInstructions?: EventProcessInstructionsType;
    /**
     * 
     * @type {LightEventsDetailType}
     * @memberof EventInfoType
     */
    subEventsDetail?: LightEventsDetailType;
}

/**
 * Check if a given object implements the EventInfoType interface.
 */
export function instanceOfEventInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventInfoTypeFromJSON(json: any): EventInfoType {
    return EventInfoTypeFromJSONTyped(json, false);
}

export function EventInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'altEventsDetail': !exists(json, 'altEventsDetail') ? undefined : LightEventsDetailTypeFromJSON(json['altEventsDetail']),
        'eventBlockInfo': !exists(json, 'eventBlockInfo') ? undefined : BlockTypeFromJSON(json['eventBlockInfo']),
        'eventDetail': !exists(json, 'eventDetail') ? undefined : EventDetailTypeFromJSON(json['eventDetail']),
        'eventIndicators': !exists(json, 'eventIndicators') ? undefined : IndicatorsTypeFromJSON(json['eventIndicators']),
        'eventNotes': !exists(json, 'eventNotes') ? undefined : EventNotesTypeFromJSON(json['eventNotes']),
        'eventPrimaryInfo': !exists(json, 'eventPrimaryInfo') ? undefined : EventPrimaryInfoTypeFromJSON(json['eventPrimaryInfo']),
        'eventResources': !exists(json, 'eventResources') ? undefined : EventResourcesListTypeFromJSON(json['eventResources']),
        'eventRevenues': !exists(json, 'eventRevenues') ? undefined : EventRevenuesInformationTypeFromJSON(json['eventRevenues']),
        'functionSpaceInformation': !exists(json, 'functionSpaceInformation') ? undefined : EventFunctionSpaceTypeFromJSON(json['functionSpaceInformation']),
        'masterEventDetail': !exists(json, 'masterEventDetail') ? undefined : LightEventDetailTypeFromJSON(json['masterEventDetail']),
        'onTheBooksRevenue': !exists(json, 'onTheBooksRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['onTheBooksRevenue']),
        'processInstructions': !exists(json, 'processInstructions') ? undefined : EventProcessInstructionsTypeFromJSON(json['processInstructions']),
        'subEventsDetail': !exists(json, 'subEventsDetail') ? undefined : LightEventsDetailTypeFromJSON(json['subEventsDetail']),
    };
}

export function EventInfoTypeToJSON(value?: EventInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'altEventsDetail': LightEventsDetailTypeToJSON(value.altEventsDetail),
        'eventBlockInfo': BlockTypeToJSON(value.eventBlockInfo),
        'eventDetail': EventDetailTypeToJSON(value.eventDetail),
        'eventIndicators': IndicatorsTypeToJSON(value.eventIndicators),
        'eventNotes': EventNotesTypeToJSON(value.eventNotes),
        'eventPrimaryInfo': EventPrimaryInfoTypeToJSON(value.eventPrimaryInfo),
        'eventResources': EventResourcesListTypeToJSON(value.eventResources),
        'eventRevenues': EventRevenuesInformationTypeToJSON(value.eventRevenues),
        'functionSpaceInformation': EventFunctionSpaceTypeToJSON(value.functionSpaceInformation),
        'masterEventDetail': LightEventDetailTypeToJSON(value.masterEventDetail),
        'onTheBooksRevenue': CurrencyAmountTypeToJSON(value.onTheBooksRevenue),
        'processInstructions': EventProcessInstructionsTypeToJSON(value.processInstructions),
        'subEventsDetail': LightEventsDetailTypeToJSON(value.subEventsDetail),
    };
}

