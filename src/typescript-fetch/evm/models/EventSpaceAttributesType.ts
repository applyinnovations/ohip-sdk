/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SpaceAreaType } from './SpaceAreaType';
import {
    SpaceAreaTypeFromJSON,
    SpaceAreaTypeFromJSONTyped,
    SpaceAreaTypeToJSON,
} from './SpaceAreaType';

/**
 * Collection of the Events Booked/Scheduled for the function spaces in the Hotel for the particular time period.
 * @export
 * @interface EventSpaceAttributesType
 */
export interface EventSpaceAttributesType {
    /**
     * 
     * @type {SpaceAreaType}
     * @memberof EventSpaceAttributesType
     */
    spaceArea?: SpaceAreaType;
    /**
     * Flag that tells whether the functionSpaceDetails is Shareable or not.
     * @type {boolean}
     * @memberof EventSpaceAttributesType
     */
    shareable?: boolean;
    /**
     * Flag that tells whether the functionSpaceDetails is a Combo or not.
     * @type {boolean}
     * @memberof EventSpaceAttributesType
     */
    comboSpace?: boolean;
    /**
     * Flag that tells whether the functionSpaceDetails is an Alternate Room or not.
     * @type {boolean}
     * @memberof EventSpaceAttributesType
     */
    alternate?: boolean;
    /**
     * Specifies the maximum occupancy this functionSpaceDetails can handle.
     * @type {number}
     * @memberof EventSpaceAttributesType
     */
    maximumOccupancy?: number;
    /**
     * Flag that tells whether the functionSpaceDetails is a Combo Element or not.
     * @type {boolean}
     * @memberof EventSpaceAttributesType
     */
    comboElement?: boolean;
    /**
     * Combo Room Number if the functionSpaceDetails is a Combo Element.
     * @type {string}
     * @memberof EventSpaceAttributesType
     */
    comboRoom?: string;
}

/**
 * Check if a given object implements the EventSpaceAttributesType interface.
 */
export function instanceOfEventSpaceAttributesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventSpaceAttributesTypeFromJSON(json: any): EventSpaceAttributesType {
    return EventSpaceAttributesTypeFromJSONTyped(json, false);
}

export function EventSpaceAttributesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventSpaceAttributesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'spaceArea': !exists(json, 'spaceArea') ? undefined : SpaceAreaTypeFromJSON(json['spaceArea']),
        'shareable': !exists(json, 'shareable') ? undefined : json['shareable'],
        'comboSpace': !exists(json, 'comboSpace') ? undefined : json['comboSpace'],
        'alternate': !exists(json, 'alternate') ? undefined : json['alternate'],
        'maximumOccupancy': !exists(json, 'maximumOccupancy') ? undefined : json['maximumOccupancy'],
        'comboElement': !exists(json, 'comboElement') ? undefined : json['comboElement'],
        'comboRoom': !exists(json, 'comboRoom') ? undefined : json['comboRoom'],
    };
}

export function EventSpaceAttributesTypeToJSON(value?: EventSpaceAttributesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'spaceArea': SpaceAreaTypeToJSON(value.spaceArea),
        'shareable': value.shareable,
        'comboSpace': value.comboSpace,
        'alternate': value.alternate,
        'maximumOccupancy': value.maximumOccupancy,
        'comboElement': value.comboElement,
        'comboRoom': value.comboRoom,
    };
}

