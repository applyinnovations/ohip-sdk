/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { RevenueTypeType } from './RevenueTypeType';
import {
    RevenueTypeTypeFromJSON,
    RevenueTypeTypeFromJSONTyped,
    RevenueTypeTypeToJSON,
} from './RevenueTypeType';

/**
 * Pertain event's revenue information.
 * @export
 * @interface EventRevenueInformationType
 */
export interface EventRevenueInformationType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventRevenueInformationType
     */
    actualRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventRevenueInformationType
     */
    billedRevenue?: CurrencyAmountType;
    /**
     * Flag indicating revenues are from a custom revenue type.
     * @type {boolean}
     * @memberof EventRevenueInformationType
     */
    custom?: boolean;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventRevenueInformationType
     */
    expectedRevenue?: CurrencyAmountType;
    /**
     * Flag to indicate forecast revenue is a flat amount, therefore NOT per person.
     * @type {boolean}
     * @memberof EventRevenueInformationType
     */
    flatForecastRevenue?: boolean;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventRevenueInformationType
     */
    forecastRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventRevenueInformationType
     */
    guaranteedRevenue?: CurrencyAmountType;
    /**
     * Flag indicating to ignore forecast figures.
     * @type {boolean}
     * @memberof EventRevenueInformationType
     */
    ignoreForecast?: boolean;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventRevenueInformationType
     */
    onTheBooksRevenue?: CurrencyAmountType;
    /**
     * Sort order for revenues.
     * @type {number}
     * @memberof EventRevenueInformationType
     */
    orderBy?: number;
    /**
     * Flag indicating if the revenues are generated by a catering package.
     * @type {boolean}
     * @memberof EventRevenueInformationType
     */
    packaged?: boolean;
    /**
     * 
     * @type {RevenueTypeType}
     * @memberof EventRevenueInformationType
     */
    revenueType?: RevenueTypeType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof EventRevenueInformationType
     */
    totalCost?: CurrencyAmountType;
}

/**
 * Check if a given object implements the EventRevenueInformationType interface.
 */
export function instanceOfEventRevenueInformationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventRevenueInformationTypeFromJSON(json: any): EventRevenueInformationType {
    return EventRevenueInformationTypeFromJSONTyped(json, false);
}

export function EventRevenueInformationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventRevenueInformationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actualRevenue': !exists(json, 'actualRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['actualRevenue']),
        'billedRevenue': !exists(json, 'billedRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['billedRevenue']),
        'custom': !exists(json, 'custom') ? undefined : json['custom'],
        'expectedRevenue': !exists(json, 'expectedRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['expectedRevenue']),
        'flatForecastRevenue': !exists(json, 'flatForecastRevenue') ? undefined : json['flatForecastRevenue'],
        'forecastRevenue': !exists(json, 'forecastRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['forecastRevenue']),
        'guaranteedRevenue': !exists(json, 'guaranteedRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['guaranteedRevenue']),
        'ignoreForecast': !exists(json, 'ignoreForecast') ? undefined : json['ignoreForecast'],
        'onTheBooksRevenue': !exists(json, 'onTheBooksRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['onTheBooksRevenue']),
        'orderBy': !exists(json, 'orderBy') ? undefined : json['orderBy'],
        'packaged': !exists(json, 'packaged') ? undefined : json['packaged'],
        'revenueType': !exists(json, 'revenueType') ? undefined : RevenueTypeTypeFromJSON(json['revenueType']),
        'totalCost': !exists(json, 'totalCost') ? undefined : CurrencyAmountTypeFromJSON(json['totalCost']),
    };
}

export function EventRevenueInformationTypeToJSON(value?: EventRevenueInformationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actualRevenue': CurrencyAmountTypeToJSON(value.actualRevenue),
        'billedRevenue': CurrencyAmountTypeToJSON(value.billedRevenue),
        'custom': value.custom,
        'expectedRevenue': CurrencyAmountTypeToJSON(value.expectedRevenue),
        'flatForecastRevenue': value.flatForecastRevenue,
        'forecastRevenue': CurrencyAmountTypeToJSON(value.forecastRevenue),
        'guaranteedRevenue': CurrencyAmountTypeToJSON(value.guaranteedRevenue),
        'ignoreForecast': value.ignoreForecast,
        'onTheBooksRevenue': CurrencyAmountTypeToJSON(value.onTheBooksRevenue),
        'orderBy': value.orderBy,
        'packaged': value.packaged,
        'revenueType': RevenueTypeTypeToJSON(value.revenueType),
        'totalCost': CurrencyAmountTypeToJSON(value.totalCost),
    };
}

