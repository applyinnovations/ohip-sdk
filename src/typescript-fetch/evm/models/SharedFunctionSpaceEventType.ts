/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { EventId } from './EventId';
import {
    EventIdFromJSON,
    EventIdFromJSONTyped,
    EventIdToJSON,
} from './EventId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Pertain shared event Information.
 * @export
 * @interface SharedFunctionSpaceEventType
 */
export interface SharedFunctionSpaceEventType {
    /**
     * Block Name.
     * @type {string}
     * @memberof SharedFunctionSpaceEventType
     */
    blockName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof SharedFunctionSpaceEventType
     */
    blockId?: UniqueIDType;
    /**
     * Name of event.
     * @type {string}
     * @memberof SharedFunctionSpaceEventType
     */
    eventName?: string;
    /**
     * 
     * @type {EventId}
     * @memberof SharedFunctionSpaceEventType
     */
    eventId?: EventId;
    /**
     * Type of event.
     * @type {string}
     * @memberof SharedFunctionSpaceEventType
     */
    eventType?: string;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof SharedFunctionSpaceEventType
     */
    eventStatus?: BookingStatusType;
    /**
     * Indicates if catering event's spaces are deducted from inventory
     * @type {boolean}
     * @memberof SharedFunctionSpaceEventType
     */
    cateringDeductInventory?: boolean;
    /**
     * Function space of event.
     * @type {string}
     * @memberof SharedFunctionSpaceEventType
     */
    functionSpaceCode?: string;
    /**
     * Number of event attendees.
     * @type {number}
     * @memberof SharedFunctionSpaceEventType
     */
    attendees?: number;
    /**
     * Indicates if catering event is shared or not
     * @type {boolean}
     * @memberof SharedFunctionSpaceEventType
     */
    isShared?: boolean;
}

/**
 * Check if a given object implements the SharedFunctionSpaceEventType interface.
 */
export function instanceOfSharedFunctionSpaceEventType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SharedFunctionSpaceEventTypeFromJSON(json: any): SharedFunctionSpaceEventType {
    return SharedFunctionSpaceEventTypeFromJSONTyped(json, false);
}

export function SharedFunctionSpaceEventTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SharedFunctionSpaceEventType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'blockId': !exists(json, 'blockId') ? undefined : UniqueIDTypeFromJSON(json['blockId']),
        'eventName': !exists(json, 'eventName') ? undefined : json['eventName'],
        'eventId': !exists(json, 'eventId') ? undefined : EventIdFromJSON(json['eventId']),
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'eventStatus': !exists(json, 'eventStatus') ? undefined : BookingStatusTypeFromJSON(json['eventStatus']),
        'cateringDeductInventory': !exists(json, 'cateringDeductInventory') ? undefined : json['cateringDeductInventory'],
        'functionSpaceCode': !exists(json, 'functionSpaceCode') ? undefined : json['functionSpaceCode'],
        'attendees': !exists(json, 'attendees') ? undefined : json['attendees'],
        'isShared': !exists(json, 'isShared') ? undefined : json['isShared'],
    };
}

export function SharedFunctionSpaceEventTypeToJSON(value?: SharedFunctionSpaceEventType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockName': value.blockName,
        'blockId': UniqueIDTypeToJSON(value.blockId),
        'eventName': value.eventName,
        'eventId': EventIdToJSON(value.eventId),
        'eventType': value.eventType,
        'eventStatus': BookingStatusTypeToJSON(value.eventStatus),
        'cateringDeductInventory': value.cateringDeductInventory,
        'functionSpaceCode': value.functionSpaceCode,
        'attendees': value.attendees,
        'isShared': value.isShared,
    };
}

