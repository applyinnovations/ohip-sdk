/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { EventBookingInfoType } from './EventBookingInfoType';
import {
    EventBookingInfoTypeFromJSON,
    EventBookingInfoTypeFromJSONTyped,
    EventBookingInfoTypeToJSON,
} from './EventBookingInfoType';
import type { EventDisplayType } from './EventDisplayType';
import {
    EventDisplayTypeFromJSON,
    EventDisplayTypeFromJSONTyped,
    EventDisplayTypeToJSON,
} from './EventDisplayType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Contains Function Diary Events information.
 * @export
 * @interface CalendarEventInfoType
 */
export interface CalendarEventInfoType {
    /**
     * Number of event attendees.
     * @type {number}
     * @memberof CalendarEventInfoType
     */
    attendees?: number;
    /**
     * Date the event was created.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    createdOn?: string;
    /**
     * 
     * @type {EventBookingInfoType}
     * @memberof CalendarEventInfoType
     */
    eventBookingInfo?: EventBookingInfoType;
    /**
     * 
     * @type {EventDisplayType}
     * @memberof CalendarEventInfoType
     */
    eventDisplay?: EventDisplayType;
    /**
     * Name of event.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    eventName?: string;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof CalendarEventInfoType
     */
    eventTimeSpan?: DateTimeSpanType;
    /**
     * Type of event.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    eventType?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    idContext?: string;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    instance?: string;
    /**
     * Flag which is set to true when this Calendar Event Info is simply a copy of an event occurring in a Combo Element of this Room.
     * @type {boolean}
     * @memberof CalendarEventInfoType
     */
    isComboRoomEventRef?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CalendarEventInfoType
     */
    masterEventId?: UniqueIDType;
    /**
     * Evaluates total overbook events count for this event.
     * @type {number}
     * @memberof CalendarEventInfoType
     */
    overbookEventsCount?: number;
    /**
     * Evaluates total prospective events count for this event.
     * @type {number}
     * @memberof CalendarEventInfoType
     */
    prospectiveEventsCount?: number;
    /**
     * Setdown time in minutes.
     * @type {number}
     * @memberof CalendarEventInfoType
     */
    setdownTime?: number;
    /**
     * Setup Code.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    setupCode?: string;
    /**
     * Setup Description.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    setupDescription?: string;
    /**
     * Setup time in minutes.
     * @type {number}
     * @memberof CalendarEventInfoType
     */
    setupTime?: number;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof CalendarEventInfoType
     */
    space?: CodeDescriptionType;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof CalendarEventInfoType
     */
    spaceTimeSpan?: TimeSpanType;
    /**
     * A reference to the type of object defined by the UniqueID elementSpace. Refer to OpenTravel Code List Unique ID Type (UIT).
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    type?: string;
    /**
     * URL that identifies the location associated with the record identified by the UniqueID.
     * @type {string}
     * @memberof CalendarEventInfoType
     */
    url?: string;
    /**
     * Evaluates total waitlist events count for this event.
     * @type {number}
     * @memberof CalendarEventInfoType
     */
    waitListEventsCount?: number;
}

/**
 * Check if a given object implements the CalendarEventInfoType interface.
 */
export function instanceOfCalendarEventInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CalendarEventInfoTypeFromJSON(json: any): CalendarEventInfoType {
    return CalendarEventInfoTypeFromJSONTyped(json, false);
}

export function CalendarEventInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CalendarEventInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attendees': !exists(json, 'attendees') ? undefined : json['attendees'],
        'createdOn': !exists(json, 'createdOn') ? undefined : json['createdOn'],
        'eventBookingInfo': !exists(json, 'eventBookingInfo') ? undefined : EventBookingInfoTypeFromJSON(json['eventBookingInfo']),
        'eventDisplay': !exists(json, 'eventDisplay') ? undefined : EventDisplayTypeFromJSON(json['eventDisplay']),
        'eventName': !exists(json, 'eventName') ? undefined : json['eventName'],
        'eventTimeSpan': !exists(json, 'eventTimeSpan') ? undefined : DateTimeSpanTypeFromJSON(json['eventTimeSpan']),
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'isComboRoomEventRef': !exists(json, 'isComboRoomEventRef') ? undefined : json['isComboRoomEventRef'],
        'masterEventId': !exists(json, 'masterEventId') ? undefined : UniqueIDTypeFromJSON(json['masterEventId']),
        'overbookEventsCount': !exists(json, 'overbookEventsCount') ? undefined : json['overbookEventsCount'],
        'prospectiveEventsCount': !exists(json, 'prospectiveEventsCount') ? undefined : json['prospectiveEventsCount'],
        'setdownTime': !exists(json, 'setdownTime') ? undefined : json['setdownTime'],
        'setupCode': !exists(json, 'setupCode') ? undefined : json['setupCode'],
        'setupDescription': !exists(json, 'setupDescription') ? undefined : json['setupDescription'],
        'setupTime': !exists(json, 'setupTime') ? undefined : json['setupTime'],
        'space': !exists(json, 'space') ? undefined : CodeDescriptionTypeFromJSON(json['space']),
        'spaceTimeSpan': !exists(json, 'spaceTimeSpan') ? undefined : TimeSpanTypeFromJSON(json['spaceTimeSpan']),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'waitListEventsCount': !exists(json, 'waitListEventsCount') ? undefined : json['waitListEventsCount'],
    };
}

export function CalendarEventInfoTypeToJSON(value?: CalendarEventInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attendees': value.attendees,
        'createdOn': value.createdOn,
        'eventBookingInfo': EventBookingInfoTypeToJSON(value.eventBookingInfo),
        'eventDisplay': EventDisplayTypeToJSON(value.eventDisplay),
        'eventName': value.eventName,
        'eventTimeSpan': DateTimeSpanTypeToJSON(value.eventTimeSpan),
        'eventType': value.eventType,
        'id': value.id,
        'idContext': value.idContext,
        'instance': value.instance,
        'isComboRoomEventRef': value.isComboRoomEventRef,
        'masterEventId': UniqueIDTypeToJSON(value.masterEventId),
        'overbookEventsCount': value.overbookEventsCount,
        'prospectiveEventsCount': value.prospectiveEventsCount,
        'setdownTime': value.setdownTime,
        'setupCode': value.setupCode,
        'setupDescription': value.setupDescription,
        'setupTime': value.setupTime,
        'space': CodeDescriptionTypeToJSON(value.space),
        'spaceTimeSpan': TimeSpanTypeToJSON(value.spaceTimeSpan),
        'type': value.type,
        'url': value.url,
        'waitListEventsCount': value.waitListEventsCount,
    };
}

