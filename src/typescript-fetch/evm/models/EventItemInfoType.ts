/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventItemType } from './EventItemType';
import {
    EventItemTypeFromJSON,
    EventItemTypeFromJSONTyped,
    EventItemTypeToJSON,
} from './EventItemType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information about event item.
 * @export
 * @interface EventItemInfoType
 */
export interface EventItemInfoType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof EventItemInfoType
     */
    eventItemId?: UniqueIDType;
    /**
     * 
     * @type {EventItemType}
     * @memberof EventItemInfoType
     */
    eventItem?: EventItemType;
}

/**
 * Check if a given object implements the EventItemInfoType interface.
 */
export function instanceOfEventItemInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventItemInfoTypeFromJSON(json: any): EventItemInfoType {
    return EventItemInfoTypeFromJSONTyped(json, false);
}

export function EventItemInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventItemInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventItemId': !exists(json, 'eventItemId') ? undefined : UniqueIDTypeFromJSON(json['eventItemId']),
        'eventItem': !exists(json, 'eventItem') ? undefined : EventItemTypeFromJSON(json['eventItem']),
    };
}

export function EventItemInfoTypeToJSON(value?: EventItemInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventItemId': UniqueIDTypeToJSON(value.eventItemId),
        'eventItem': EventItemTypeToJSON(value.eventItem),
    };
}

