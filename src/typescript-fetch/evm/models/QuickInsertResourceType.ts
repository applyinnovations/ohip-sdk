/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Quick insert resource type.
 * @export
 * @interface QuickInsertResourceType
 */
export interface QuickInsertResourceType {
    /**
     * Flag to indicate if menu, item or item template is part of a package.
     * @type {boolean}
     * @memberof QuickInsertResourceType
     */
    includeInPackage?: boolean;
    /**
     * Quantity of the menu, item or item template.
     * @type {number}
     * @memberof QuickInsertResourceType
     */
    quantity?: number;
    /**
     * Text that represents quick insert number of menu, item or item template name.
     * @type {string}
     * @memberof QuickInsertResourceType
     */
    quickInsertText?: string;
}

/**
 * Check if a given object implements the QuickInsertResourceType interface.
 */
export function instanceOfQuickInsertResourceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QuickInsertResourceTypeFromJSON(json: any): QuickInsertResourceType {
    return QuickInsertResourceTypeFromJSONTyped(json, false);
}

export function QuickInsertResourceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuickInsertResourceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'includeInPackage': !exists(json, 'includeInPackage') ? undefined : json['includeInPackage'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'quickInsertText': !exists(json, 'quickInsertText') ? undefined : json['quickInsertText'],
    };
}

export function QuickInsertResourceTypeToJSON(value?: QuickInsertResourceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'includeInPackage': value.includeInPackage,
        'quantity': value.quantity,
        'quickInsertText': value.quickInsertText,
    };
}

