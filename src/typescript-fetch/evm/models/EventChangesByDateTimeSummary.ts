/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventChangesByDateTimeSummaryType } from './EventChangesByDateTimeSummaryType';
import {
    EventChangesByDateTimeSummaryTypeFromJSON,
    EventChangesByDateTimeSummaryTypeFromJSONTyped,
    EventChangesByDateTimeSummaryTypeToJSON,
} from './EventChangesByDateTimeSummaryType';

/**
 * 
 * @export
 * @interface EventChangesByDateTimeSummary
 */
export interface EventChangesByDateTimeSummary {
    /**
     * Collection of Catering Event changes by date and time.
     * @type {Array<EventChangesByDateTimeSummaryType>}
     * @memberof EventChangesByDateTimeSummary
     */
    eventList?: Array<EventChangesByDateTimeSummaryType>;
    /**
     * Indicates the index of the next applicable set(page).
     * @type {number}
     * @memberof EventChangesByDateTimeSummary
     */
    offset?: number;
    /**
     * Indicates number of records the API can return as per the API request limit sent. A maximum of 200 records can be only returned at a time.
     * @type {number}
     * @memberof EventChangesByDateTimeSummary
     */
    limit?: number;
    /**
     * Indicates number of records the API has returned actually as per the API request criteria.
     * @type {number}
     * @memberof EventChangesByDateTimeSummary
     */
    count?: number;
    /**
     * Indicates whether there are more records available to be returned as per the API request criteria or not.
     * @type {boolean}
     * @memberof EventChangesByDateTimeSummary
     */
    hasMore?: boolean;
    /**
     * Indicates total number of records available that can be returned as per the API request criteria.
     * @type {number}
     * @memberof EventChangesByDateTimeSummary
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the EventChangesByDateTimeSummary interface.
 */
export function instanceOfEventChangesByDateTimeSummary(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventChangesByDateTimeSummaryFromJSON(json: any): EventChangesByDateTimeSummary {
    return EventChangesByDateTimeSummaryFromJSONTyped(json, false);
}

export function EventChangesByDateTimeSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventChangesByDateTimeSummary {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventList': !exists(json, 'eventList') ? undefined : ((json['eventList'] as Array<any>).map(EventChangesByDateTimeSummaryTypeFromJSON)),
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function EventChangesByDateTimeSummaryToJSON(value?: EventChangesByDateTimeSummary | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventList': value.eventList === undefined ? undefined : ((value.eventList as Array<any>).map(EventChangesByDateTimeSummaryTypeToJSON)),
        'offset': value.offset,
        'limit': value.limit,
        'count': value.count,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
    };
}

