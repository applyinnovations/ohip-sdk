/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventNoteType } from './EventNoteType';
import {
    EventNoteTypeFromJSON,
    EventNoteTypeFromJSONTyped,
    EventNoteTypeToJSON,
} from './EventNoteType';
import type { OpportunityEventDetailType } from './OpportunityEventDetailType';
import {
    OpportunityEventDetailTypeFromJSON,
    OpportunityEventDetailTypeFromJSONTyped,
    OpportunityEventDetailTypeToJSON,
} from './OpportunityEventDetailType';

/**
 * Catering Event information.
 * @export
 * @interface OpportunityEventInfoType
 */
export interface OpportunityEventInfoType {
    /**
     * 
     * @type {OpportunityEventDetailType}
     * @memberof OpportunityEventInfoType
     */
    opportunityEventDetail?: OpportunityEventDetailType;
    /**
     * Pertain event information.
     * @type {Array<EventNoteType>}
     * @memberof OpportunityEventInfoType
     */
    eventNotes?: Array<EventNoteType>;
}

/**
 * Check if a given object implements the OpportunityEventInfoType interface.
 */
export function instanceOfOpportunityEventInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpportunityEventInfoTypeFromJSON(json: any): OpportunityEventInfoType {
    return OpportunityEventInfoTypeFromJSONTyped(json, false);
}

export function OpportunityEventInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpportunityEventInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'opportunityEventDetail': !exists(json, 'opportunityEventDetail') ? undefined : OpportunityEventDetailTypeFromJSON(json['opportunityEventDetail']),
        'eventNotes': !exists(json, 'eventNotes') ? undefined : ((json['eventNotes'] as Array<any>).map(EventNoteTypeFromJSON)),
    };
}

export function OpportunityEventInfoTypeToJSON(value?: OpportunityEventInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'opportunityEventDetail': OpportunityEventDetailTypeToJSON(value.opportunityEventDetail),
        'eventNotes': value.eventNotes === undefined ? undefined : ((value.eventNotes as Array<any>).map(EventNoteTypeToJSON)),
    };
}

