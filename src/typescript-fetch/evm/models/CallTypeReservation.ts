/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationIdList } from './ReservationIdList';
import {
    ReservationIdListFromJSON,
    ReservationIdListFromJSONTyped,
    ReservationIdListToJSON,
} from './ReservationIdList';

/**
 * Holds Reservation Id and Hotel Code.
 * @export
 * @interface CallTypeReservation
 */
export interface CallTypeReservation {
    /**
     * Holds Hotel Code.
     * @type {string}
     * @memberof CallTypeReservation
     */
    hotelId?: string;
    /**
     * 
     * @type {ReservationIdList}
     * @memberof CallTypeReservation
     */
    reservationIdList?: ReservationIdList;
}

/**
 * Check if a given object implements the CallTypeReservation interface.
 */
export function instanceOfCallTypeReservation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CallTypeReservationFromJSON(json: any): CallTypeReservation {
    return CallTypeReservationFromJSONTyped(json, false);
}

export function CallTypeReservationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CallTypeReservation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ReservationIdListFromJSON(json['reservationIdList']),
    };
}

export function CallTypeReservationToJSON(value?: CallTypeReservation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationIdList': ReservationIdListToJSON(value.reservationIdList),
    };
}

