/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Request object for retrieving waitlisted and current events holding the function space.
 * @export
 * @interface WaitlistedEventsSearchType
 */
export interface WaitlistedEventsSearchType {
    /**
     * Search a specific account's waitlisted events.
     * @type {string}
     * @memberof WaitlistedEventsSearchType
     */
    accountName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof WaitlistedEventsSearchType
     */
    blockId?: UniqueIDType;
    /**
     * Search a specific block's waitlisted events.
     * @type {string}
     * @memberof WaitlistedEventsSearchType
     */
    blockName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof WaitlistedEventsSearchType
     */
    functionSpaceCode?: Array<string>;
    /**
     * Hotel code of Function Space.
     * @type {string}
     * @memberof WaitlistedEventsSearchType
     */
    hotelId?: string;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof WaitlistedEventsSearchType
     */
    waitlistedTimeSpan?: DateTimeSpanType;
}

/**
 * Check if a given object implements the WaitlistedEventsSearchType interface.
 */
export function instanceOfWaitlistedEventsSearchType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WaitlistedEventsSearchTypeFromJSON(json: any): WaitlistedEventsSearchType {
    return WaitlistedEventsSearchTypeFromJSONTyped(json, false);
}

export function WaitlistedEventsSearchTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaitlistedEventsSearchType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountName': !exists(json, 'accountName') ? undefined : json['accountName'],
        'blockId': !exists(json, 'blockId') ? undefined : UniqueIDTypeFromJSON(json['blockId']),
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'functionSpaceCode': !exists(json, 'functionSpaceCode') ? undefined : json['functionSpaceCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'waitlistedTimeSpan': !exists(json, 'waitlistedTimeSpan') ? undefined : DateTimeSpanTypeFromJSON(json['waitlistedTimeSpan']),
    };
}

export function WaitlistedEventsSearchTypeToJSON(value?: WaitlistedEventsSearchType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountName': value.accountName,
        'blockId': UniqueIDTypeToJSON(value.blockId),
        'blockName': value.blockName,
        'functionSpaceCode': value.functionSpaceCode,
        'hotelId': value.hotelId,
        'waitlistedTimeSpan': DateTimeSpanTypeToJSON(value.waitlistedTimeSpan),
    };
}

