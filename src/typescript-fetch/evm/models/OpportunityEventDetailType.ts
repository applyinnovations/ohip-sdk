/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { CateringEventsAttendeesType } from './CateringEventsAttendeesType';
import {
    CateringEventsAttendeesTypeFromJSON,
    CateringEventsAttendeesTypeFromJSONTyped,
    CateringEventsAttendeesTypeToJSON,
} from './CateringEventsAttendeesType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { TranslationTextType60 } from './TranslationTextType60';
import {
    TranslationTextType60FromJSON,
    TranslationTextType60FromJSONTyped,
    TranslationTextType60ToJSON,
} from './TranslationTextType60';

/**
 * Information about the Catering Event which will be added to the Opportunity Block
 * @export
 * @interface OpportunityEventDetailType
 */
export interface OpportunityEventDetailType {
    /**
     * 
     * @type {TranslationTextType60}
     * @memberof OpportunityEventDetailType
     */
    eventName?: TranslationTextType60;
    /**
     * Type of event.
     * @type {string}
     * @memberof OpportunityEventDetailType
     */
    eventType?: string;
    /**
     * Identifies the days for which catering events will be added to the Opportunity Block.
     * @type {string}
     * @memberof OpportunityEventDetailType
     */
    day?: string;
    /**
     * Identifies the quantity of the event type needed for the particular day, time and space time.
     * @type {number}
     * @memberof OpportunityEventDetailType
     */
    quantity?: number;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof OpportunityEventDetailType
     */
    eventTimeSpan?: DateTimeSpanType;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof OpportunityEventDetailType
     */
    eventStatus?: BookingStatusType;
    /**
     * 
     * @type {CateringEventsAttendeesType}
     * @memberof OpportunityEventDetailType
     */
    attendees?: CateringEventsAttendeesType;
    /**
     * It is the group details to display on the outside of a meeting functionSpace Details.
     * @type {string}
     * @memberof OpportunityEventDetailType
     */
    doorcard?: string;
}

/**
 * Check if a given object implements the OpportunityEventDetailType interface.
 */
export function instanceOfOpportunityEventDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OpportunityEventDetailTypeFromJSON(json: any): OpportunityEventDetailType {
    return OpportunityEventDetailTypeFromJSONTyped(json, false);
}

export function OpportunityEventDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OpportunityEventDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventName': !exists(json, 'eventName') ? undefined : TranslationTextType60FromJSON(json['eventName']),
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'day': !exists(json, 'day') ? undefined : json['day'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'eventTimeSpan': !exists(json, 'eventTimeSpan') ? undefined : DateTimeSpanTypeFromJSON(json['eventTimeSpan']),
        'eventStatus': !exists(json, 'eventStatus') ? undefined : BookingStatusTypeFromJSON(json['eventStatus']),
        'attendees': !exists(json, 'attendees') ? undefined : CateringEventsAttendeesTypeFromJSON(json['attendees']),
        'doorcard': !exists(json, 'doorcard') ? undefined : json['doorcard'],
    };
}

export function OpportunityEventDetailTypeToJSON(value?: OpportunityEventDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventName': TranslationTextType60ToJSON(value.eventName),
        'eventType': value.eventType,
        'day': value.day,
        'quantity': value.quantity,
        'eventTimeSpan': DateTimeSpanTypeToJSON(value.eventTimeSpan),
        'eventStatus': BookingStatusTypeToJSON(value.eventStatus),
        'attendees': CateringEventsAttendeesTypeToJSON(value.attendees),
        'doorcard': value.doorcard,
    };
}

