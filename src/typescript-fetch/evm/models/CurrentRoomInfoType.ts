/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Room information of the reservation for the current day.
 * @export
 * @interface CurrentRoomInfoType
 */
export interface CurrentRoomInfoType {
    /**
     * Represents the functionSpaceDetails was assigned by AI Room Assignment.
     * @type {boolean}
     * @memberof CurrentRoomInfoType
     */
    assignedByAI?: boolean;
    /**
     * Current functionSpaceDetails description.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomDescription?: string;
    /**
     * Current functionSpaceDetails number.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomId?: string;
    /**
     * Current functionSpaceDetails type.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomType?: string;
    /**
     * Represents the functionSpaceDetails view code like City view, River view, Ocean view etc.
     * @type {string}
     * @memberof CurrentRoomInfoType
     */
    roomViewCode?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CurrentRoomInfoType
     */
    suggestedRoomNumbers?: Array<string>;
    /**
     * Represents the functionSpaceDetails was upgraded by AI Room Assignment.
     * @type {boolean}
     * @memberof CurrentRoomInfoType
     */
    upgradedByAI?: boolean;
}

/**
 * Check if a given object implements the CurrentRoomInfoType interface.
 */
export function instanceOfCurrentRoomInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrentRoomInfoTypeFromJSON(json: any): CurrentRoomInfoType {
    return CurrentRoomInfoTypeFromJSONTyped(json, false);
}

export function CurrentRoomInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrentRoomInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assignedByAI': !exists(json, 'assignedByAI') ? undefined : json['assignedByAI'],
        'roomDescription': !exists(json, 'roomDescription') ? undefined : json['roomDescription'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'roomViewCode': !exists(json, 'roomViewCode') ? undefined : json['roomViewCode'],
        'suggestedRoomNumbers': !exists(json, 'suggestedRoomNumbers') ? undefined : json['suggestedRoomNumbers'],
        'upgradedByAI': !exists(json, 'upgradedByAI') ? undefined : json['upgradedByAI'],
    };
}

export function CurrentRoomInfoTypeToJSON(value?: CurrentRoomInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assignedByAI': value.assignedByAI,
        'roomDescription': value.roomDescription,
        'roomId': value.roomId,
        'roomType': value.roomType,
        'roomViewCode': value.roomViewCode,
        'suggestedRoomNumbers': value.suggestedRoomNumbers,
        'upgradedByAI': value.upgradedByAI,
    };
}

