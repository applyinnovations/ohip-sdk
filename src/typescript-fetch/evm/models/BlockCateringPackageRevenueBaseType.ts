/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockCateringPackageRevenueType } from './BlockCateringPackageRevenueType';
import {
    BlockCateringPackageRevenueTypeFromJSON,
    BlockCateringPackageRevenueTypeFromJSONTyped,
    BlockCateringPackageRevenueTypeToJSON,
} from './BlockCateringPackageRevenueType';
import type { BlockType } from './BlockType';
import {
    BlockTypeFromJSON,
    BlockTypeFromJSONTyped,
    BlockTypeToJSON,
} from './BlockType';
import type { CateringPackageInfoType } from './CateringPackageInfoType';
import {
    CateringPackageInfoTypeFromJSON,
    CateringPackageInfoTypeFromJSONTyped,
    CateringPackageInfoTypeToJSON,
} from './CateringPackageInfoType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Pricing detail of associated catering package.
 * @export
 * @interface BlockCateringPackageRevenueBaseType
 */
export interface BlockCateringPackageRevenueBaseType {
    /**
     * 
     * @type {BlockType}
     * @memberof BlockCateringPackageRevenueBaseType
     */
    blockInfo?: BlockType;
    /**
     * Defines if Flat Rate is applicable for the package.
     * @type {boolean}
     * @memberof BlockCateringPackageRevenueBaseType
     */
    flatPrice?: boolean;
    /**
     * 
     * @type {CateringPackageInfoType}
     * @memberof BlockCateringPackageRevenueBaseType
     */
    packageDetail?: CateringPackageInfoType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockCateringPackageRevenueBaseType
     */
    packageId?: UniqueIDType;
    /**
     * Price Code of the associated package.
     * @type {string}
     * @memberof BlockCateringPackageRevenueBaseType
     */
    priceCode?: string;
    /**
     * Price Code description of the associated package.
     * @type {string}
     * @memberof BlockCateringPackageRevenueBaseType
     */
    priceDescription?: string;
    /**
     * Collection of revenues associated with packaged event.
     * @type {Array<BlockCateringPackageRevenueType>}
     * @memberof BlockCateringPackageRevenueBaseType
     */
    revenues?: Array<BlockCateringPackageRevenueType>;
}

/**
 * Check if a given object implements the BlockCateringPackageRevenueBaseType interface.
 */
export function instanceOfBlockCateringPackageRevenueBaseType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockCateringPackageRevenueBaseTypeFromJSON(json: any): BlockCateringPackageRevenueBaseType {
    return BlockCateringPackageRevenueBaseTypeFromJSONTyped(json, false);
}

export function BlockCateringPackageRevenueBaseTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockCateringPackageRevenueBaseType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockInfo': !exists(json, 'blockInfo') ? undefined : BlockTypeFromJSON(json['blockInfo']),
        'flatPrice': !exists(json, 'flatPrice') ? undefined : json['flatPrice'],
        'packageDetail': !exists(json, 'packageDetail') ? undefined : CateringPackageInfoTypeFromJSON(json['packageDetail']),
        'packageId': !exists(json, 'packageId') ? undefined : UniqueIDTypeFromJSON(json['packageId']),
        'priceCode': !exists(json, 'priceCode') ? undefined : json['priceCode'],
        'priceDescription': !exists(json, 'priceDescription') ? undefined : json['priceDescription'],
        'revenues': !exists(json, 'revenues') ? undefined : ((json['revenues'] as Array<any>).map(BlockCateringPackageRevenueTypeFromJSON)),
    };
}

export function BlockCateringPackageRevenueBaseTypeToJSON(value?: BlockCateringPackageRevenueBaseType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockInfo': BlockTypeToJSON(value.blockInfo),
        'flatPrice': value.flatPrice,
        'packageDetail': CateringPackageInfoTypeToJSON(value.packageDetail),
        'packageId': UniqueIDTypeToJSON(value.packageId),
        'priceCode': value.priceCode,
        'priceDescription': value.priceDescription,
        'revenues': value.revenues === undefined ? undefined : ((value.revenues as Array<any>).map(BlockCateringPackageRevenueTypeToJSON)),
    };
}

