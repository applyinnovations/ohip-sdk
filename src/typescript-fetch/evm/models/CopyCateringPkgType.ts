/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringPackageCopyInstructionType } from './CateringPackageCopyInstructionType';
import {
    CateringPackageCopyInstructionTypeFromJSON,
    CateringPackageCopyInstructionTypeFromJSONTyped,
    CateringPackageCopyInstructionTypeToJSON,
} from './CateringPackageCopyInstructionType';
import type { CopyStatusModeType } from './CopyStatusModeType';
import {
    CopyStatusModeTypeFromJSON,
    CopyStatusModeTypeFromJSONTyped,
    CopyStatusModeTypeToJSON,
} from './CopyStatusModeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria to copy catering packages
 * @export
 * @interface CopyCateringPkgType
 */
export interface CopyCateringPkgType {
    /**
     * Indicates wether to to continue upon getting error processing screen. If this is true, error processing screen won't be shown.
     * @type {boolean}
     * @memberof CopyCateringPkgType
     */
    _continue?: boolean;
    /**
     * Indicates wether to perform pre-cahnge or post-change snapshot of the copied events. By default, it is always considered as false and will provide post-change snapshot.
     * @type {boolean}
     * @memberof CopyCateringPkgType
     */
    copyAsSnapshot?: boolean;
    /**
     * Indicate weather to include Non Package resources, source status etc.
     * @type {Array<CateringPackageCopyInstructionType>}
     * @memberof CopyCateringPkgType
     */
    copyInstructions?: Array<CateringPackageCopyInstructionType>;
    /**
     * 
     * @type {CopyStatusModeType}
     * @memberof CopyCateringPkgType
     */
    copyStatusMode?: CopyStatusModeType;
    /**
     * Specifies a single date.
     * @type {Array<string>}
     * @memberof CopyCateringPkgType
     */
    copyToDates?: Array<string>;
    /**
     * Hotel code where the package will be copied.
     * @type {string}
     * @memberof CopyCateringPkgType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CopyCateringPkgType
     */
    packageId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CopyCateringPkgType
     */
    sourceBlockId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CopyCateringPkgType
     */
    targetBlockId?: UniqueIDType;
}

/**
 * Check if a given object implements the CopyCateringPkgType interface.
 */
export function instanceOfCopyCateringPkgType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyCateringPkgTypeFromJSON(json: any): CopyCateringPkgType {
    return CopyCateringPkgTypeFromJSONTyped(json, false);
}

export function CopyCateringPkgTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyCateringPkgType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '_continue': !exists(json, 'continue') ? undefined : json['continue'],
        'copyAsSnapshot': !exists(json, 'copyAsSnapshot') ? undefined : json['copyAsSnapshot'],
        'copyInstructions': !exists(json, 'copyInstructions') ? undefined : ((json['copyInstructions'] as Array<any>).map(CateringPackageCopyInstructionTypeFromJSON)),
        'copyStatusMode': !exists(json, 'copyStatusMode') ? undefined : CopyStatusModeTypeFromJSON(json['copyStatusMode']),
        'copyToDates': !exists(json, 'copyToDates') ? undefined : json['copyToDates'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'packageId': !exists(json, 'packageId') ? undefined : UniqueIDTypeFromJSON(json['packageId']),
        'sourceBlockId': !exists(json, 'sourceBlockId') ? undefined : UniqueIDTypeFromJSON(json['sourceBlockId']),
        'targetBlockId': !exists(json, 'targetBlockId') ? undefined : UniqueIDTypeFromJSON(json['targetBlockId']),
    };
}

export function CopyCateringPkgTypeToJSON(value?: CopyCateringPkgType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'continue': value._continue,
        'copyAsSnapshot': value.copyAsSnapshot,
        'copyInstructions': value.copyInstructions === undefined ? undefined : ((value.copyInstructions as Array<any>).map(CateringPackageCopyInstructionTypeToJSON)),
        'copyStatusMode': CopyStatusModeTypeToJSON(value.copyStatusMode),
        'copyToDates': value.copyToDates,
        'hotelId': value.hotelId,
        'packageId': UniqueIDTypeToJSON(value.packageId),
        'sourceBlockId': UniqueIDTypeToJSON(value.sourceBlockId),
        'targetBlockId': UniqueIDTypeToJSON(value.targetBlockId),
    };
}

