/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * The summary information for a function space.
 * @export
 * @interface FunctionSpaceAvailabilityType
 */
export interface FunctionSpaceAvailabilityType {
    /**
     * Hotel Code where function space belongs to.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    hotelId?: string;
    /**
     * Room Code of the Function Space.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    roomCode?: string;
    /**
     * Room Type of the Function Space.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    roomType?: string;
    /**
     * Indicates whether the functionSpaceDetails type is psuedo.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    psuedoRoomType?: boolean;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof FunctionSpaceAvailabilityType
     */
    spaceName?: TranslationTextType2000;
    /**
     * The Short Name of the Function Space.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    shortName?: string;
    /**
     * The floor on which the Function Space is located.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    floor?: string;
    /**
     * The Type which the Function Space belongs to.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    spaceType?: string;
    /**
     * The building on which the Function Space is located.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    location?: string;
    /**
     * Indicate if the function space is a combination functionSpaceDetails.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    comboSpace?: boolean;
    /**
     * Indicate if the function space will be shown in the Function Diary by default.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    elementSpace?: boolean;
    /**
     * Indicate if the function space is shareable.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    shareable?: boolean;
    /**
     * Indicate if the function space is forced to have alternate function spaces in case the function space becomes unvailable.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    forceAlternate?: boolean;
    /**
     * Indicates whether the Function Space is web bookable or not.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    webBookable?: boolean;
    /**
     * Indicates whether the Function Space is web viewable or not.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    webViewable?: boolean;
    /**
     * The time in minutes that the function space would be considered at 100% utilization.
     * @type {number}
     * @memberof FunctionSpaceAvailabilityType
     */
    fullUtilizationTime?: number;
    /**
     * Indicates whether the function space has handicap facilities.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    handicapFacilities?: boolean;
    /**
     * The first custom order for sorting the function space display.
     * @type {number}
     * @memberof FunctionSpaceAvailabilityType
     */
    orderBy1?: number;
    /**
     * The second custom order for sorting the function space display.
     * @type {number}
     * @memberof FunctionSpaceAvailabilityType
     */
    orderBy2?: number;
    /**
     * The third custom order for sorting the function space display.
     * @type {number}
     * @memberof FunctionSpaceAvailabilityType
     */
    orderBy3?: number;
    /**
     * Rate Code suggested to be used by function space.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    suggestedRateCode?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FunctionSpaceAvailabilityType
     */
    suggestedRateAmount?: CurrencyAmountType;
    /**
     * Setup Code suggested to be used by function space.
     * @type {string}
     * @memberof FunctionSpaceAvailabilityType
     */
    suggestedSetupCode?: string;
    /**
     * Flag that indicates if the function space can be reserved or not.
     * @type {boolean}
     * @memberof FunctionSpaceAvailabilityType
     */
    available?: boolean;
}

/**
 * Check if a given object implements the FunctionSpaceAvailabilityType interface.
 */
export function instanceOfFunctionSpaceAvailabilityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FunctionSpaceAvailabilityTypeFromJSON(json: any): FunctionSpaceAvailabilityType {
    return FunctionSpaceAvailabilityTypeFromJSONTyped(json, false);
}

export function FunctionSpaceAvailabilityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FunctionSpaceAvailabilityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'roomCode': !exists(json, 'roomCode') ? undefined : json['roomCode'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'psuedoRoomType': !exists(json, 'psuedoRoomType') ? undefined : json['psuedoRoomType'],
        'spaceName': !exists(json, 'spaceName') ? undefined : TranslationTextType2000FromJSON(json['spaceName']),
        'shortName': !exists(json, 'shortName') ? undefined : json['shortName'],
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'spaceType': !exists(json, 'spaceType') ? undefined : json['spaceType'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'comboSpace': !exists(json, 'comboSpace') ? undefined : json['comboSpace'],
        'elementSpace': !exists(json, 'elementSpace') ? undefined : json['elementSpace'],
        'shareable': !exists(json, 'shareable') ? undefined : json['shareable'],
        'forceAlternate': !exists(json, 'forceAlternate') ? undefined : json['forceAlternate'],
        'webBookable': !exists(json, 'webBookable') ? undefined : json['webBookable'],
        'webViewable': !exists(json, 'webViewable') ? undefined : json['webViewable'],
        'fullUtilizationTime': !exists(json, 'fullUtilizationTime') ? undefined : json['fullUtilizationTime'],
        'handicapFacilities': !exists(json, 'handicapFacilities') ? undefined : json['handicapFacilities'],
        'orderBy1': !exists(json, 'orderBy1') ? undefined : json['orderBy1'],
        'orderBy2': !exists(json, 'orderBy2') ? undefined : json['orderBy2'],
        'orderBy3': !exists(json, 'orderBy3') ? undefined : json['orderBy3'],
        'suggestedRateCode': !exists(json, 'suggestedRateCode') ? undefined : json['suggestedRateCode'],
        'suggestedRateAmount': !exists(json, 'suggestedRateAmount') ? undefined : CurrencyAmountTypeFromJSON(json['suggestedRateAmount']),
        'suggestedSetupCode': !exists(json, 'suggestedSetupCode') ? undefined : json['suggestedSetupCode'],
        'available': !exists(json, 'available') ? undefined : json['available'],
    };
}

export function FunctionSpaceAvailabilityTypeToJSON(value?: FunctionSpaceAvailabilityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'roomCode': value.roomCode,
        'roomType': value.roomType,
        'psuedoRoomType': value.psuedoRoomType,
        'spaceName': TranslationTextType2000ToJSON(value.spaceName),
        'shortName': value.shortName,
        'floor': value.floor,
        'spaceType': value.spaceType,
        'location': value.location,
        'comboSpace': value.comboSpace,
        'elementSpace': value.elementSpace,
        'shareable': value.shareable,
        'forceAlternate': value.forceAlternate,
        'webBookable': value.webBookable,
        'webViewable': value.webViewable,
        'fullUtilizationTime': value.fullUtilizationTime,
        'handicapFacilities': value.handicapFacilities,
        'orderBy1': value.orderBy1,
        'orderBy2': value.orderBy2,
        'orderBy3': value.orderBy3,
        'suggestedRateCode': value.suggestedRateCode,
        'suggestedRateAmount': CurrencyAmountTypeToJSON(value.suggestedRateAmount),
        'suggestedSetupCode': value.suggestedSetupCode,
        'available': value.available,
    };
}

