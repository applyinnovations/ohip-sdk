/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { TraceResolveType } from './TraceResolveType';
import {
    TraceResolveTypeFromJSON,
    TraceResolveTypeFromJSONTyped,
    TraceResolveTypeToJSON,
} from './TraceResolveType';
import type { TraceTimeInfoType } from './TraceTimeInfoType';
import {
    TraceTimeInfoTypeFromJSON,
    TraceTimeInfoTypeFromJSONTyped,
    TraceTimeInfoTypeToJSON,
} from './TraceTimeInfoType';

/**
 * Extended Trace object to hold information for a block.
 * @export
 * @interface BlockTraceType
 */
export interface BlockTraceType {
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof BlockTraceType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof BlockTraceType
     */
    creatorId?: string;
    /**
     * Indicates the Department code.
     * @type {string}
     * @memberof BlockTraceType
     */
    departmentId?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof BlockTraceType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof BlockTraceType
     */
    idContext?: string;
    /**
     * Additional identifying value assigned by the creating system.
     * @type {number}
     * @memberof BlockTraceType
     */
    idExtension?: number;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof BlockTraceType
     */
    instance?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof BlockTraceType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof BlockTraceType
     */
    lastModifyDateTime?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof BlockTraceType
     */
    purgeDate?: Date;
    /**
     * 
     * @type {ReservationId}
     * @memberof BlockTraceType
     */
    reservationId?: ReservationId;
    /**
     * 
     * @type {TraceResolveType}
     * @memberof BlockTraceType
     */
    resolveInfo?: TraceResolveType;
    /**
     * 
     * @type {TraceTimeInfoType}
     * @memberof BlockTraceType
     */
    timeInfo?: TraceTimeInfoType;
    /**
     * The information this trace contains.
     * @type {string}
     * @memberof BlockTraceType
     */
    traceText?: string;
    /**
     * A reference to the type of object defined by the UniqueID elementSpace. Refer to OpenTravel Code List Unique ID Type (UIT).
     * @type {string}
     * @memberof BlockTraceType
     */
    type?: string;
    /**
     * URL that identifies the location associated with the record identified by the UniqueID.
     * @type {string}
     * @memberof BlockTraceType
     */
    url?: string;
}

/**
 * Check if a given object implements the BlockTraceType interface.
 */
export function instanceOfBlockTraceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockTraceTypeFromJSON(json: any): BlockTraceType {
    return BlockTraceTypeFromJSONTyped(json, false);
}

export function BlockTraceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockTraceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'departmentId': !exists(json, 'departmentId') ? undefined : json['departmentId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'resolveInfo': !exists(json, 'resolveInfo') ? undefined : TraceResolveTypeFromJSON(json['resolveInfo']),
        'timeInfo': !exists(json, 'timeInfo') ? undefined : TraceTimeInfoTypeFromJSON(json['timeInfo']),
        'traceText': !exists(json, 'traceText') ? undefined : json['traceText'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function BlockTraceTypeToJSON(value?: BlockTraceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'departmentId': value.departmentId,
        'id': value.id,
        'idContext': value.idContext,
        'idExtension': value.idExtension,
        'instance': value.instance,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substring(0,10)),
        'reservationId': ReservationIdToJSON(value.reservationId),
        'resolveInfo': TraceResolveTypeToJSON(value.resolveInfo),
        'timeInfo': TraceTimeInfoTypeToJSON(value.timeInfo),
        'traceText': value.traceText,
        'type': value.type,
        'url': value.url,
    };
}

