/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Display Information for the Function Diary Event.
 * @export
 * @interface EventDisplayType
 */
export interface EventDisplayType {
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    bookingName?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    cateringOnlyYn?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    sharedYn?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    masterYn?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    loudEventYn?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    waitlistedYn?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    exclusiveYn?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    alternateMasterYn?: string;
    /**
     * 
     * @type {string}
     * @memberof EventDisplayType
     */
    dontMoveYn?: string;
}

/**
 * Check if a given object implements the EventDisplayType interface.
 */
export function instanceOfEventDisplayType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventDisplayTypeFromJSON(json: any): EventDisplayType {
    return EventDisplayTypeFromJSONTyped(json, false);
}

export function EventDisplayTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventDisplayType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingName': !exists(json, 'bookingName') ? undefined : json['bookingName'],
        'cateringOnlyYn': !exists(json, 'cateringOnlyYn') ? undefined : json['cateringOnlyYn'],
        'sharedYn': !exists(json, 'sharedYn') ? undefined : json['sharedYn'],
        'masterYn': !exists(json, 'masterYn') ? undefined : json['masterYn'],
        'loudEventYn': !exists(json, 'loudEventYn') ? undefined : json['loudEventYn'],
        'waitlistedYn': !exists(json, 'waitlistedYn') ? undefined : json['waitlistedYn'],
        'exclusiveYn': !exists(json, 'exclusiveYn') ? undefined : json['exclusiveYn'],
        'alternateMasterYn': !exists(json, 'alternateMasterYn') ? undefined : json['alternateMasterYn'],
        'dontMoveYn': !exists(json, 'dontMoveYn') ? undefined : json['dontMoveYn'],
    };
}

export function EventDisplayTypeToJSON(value?: EventDisplayType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingName': value.bookingName,
        'cateringOnlyYn': value.cateringOnlyYn,
        'sharedYn': value.sharedYn,
        'masterYn': value.masterYn,
        'loudEventYn': value.loudEventYn,
        'waitlistedYn': value.waitlistedYn,
        'exclusiveYn': value.exclusiveYn,
        'alternateMasterYn': value.alternateMasterYn,
        'dontMoveYn': value.dontMoveYn,
    };
}

