/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventCodeDetailType } from './EventCodeDetailType';
import {
    EventCodeDetailTypeFromJSON,
    EventCodeDetailTypeFromJSONTyped,
    EventCodeDetailTypeToJSON,
} from './EventCodeDetailType';
import type { EventSpaceScheduleType } from './EventSpaceScheduleType';
import {
    EventSpaceScheduleTypeFromJSON,
    EventSpaceScheduleTypeFromJSONTyped,
    EventSpaceScheduleTypeToJSON,
} from './EventSpaceScheduleType';
import type { SellMessagesType } from './SellMessagesType';
import {
    SellMessagesTypeFromJSON,
    SellMessagesTypeFromJSONTyped,
    SellMessagesTypeToJSON,
} from './SellMessagesType';

/**
 * Collection of the Events Booked/Scheduled for the function spaces in the Hotel for the particular time period.
 * @export
 * @interface EventCalendarType
 */
export interface EventCalendarType {
    /**
     * Collection of the Event Codes in a Property for a particular time period.
     * @type {Array<EventCodeDetailType>}
     * @memberof EventCalendarType
     */
    eventCodes?: Array<EventCodeDetailType>;
    /**
     * Collection of the Events Booked/Scheduled for the function space/functionSpaceDetails for the particular time period.
     * @type {Array<EventSpaceScheduleType>}
     * @memberof EventCalendarType
     */
    eventSpace?: Array<EventSpaceScheduleType>;
    /**
     * Current Page the group of Rooms is included in.
     * @type {number}
     * @memberof EventCalendarType
     */
    pageIndex?: number;
    /**
     * Number of records per page.
     * @type {number}
     * @memberof EventCalendarType
     */
    recordsPerPage?: number;
    /**
     * 
     * @type {SellMessagesType}
     * @memberof EventCalendarType
     */
    sellMessages?: SellMessagesType;
    /**
     * Total Number of Rooms.
     * @type {number}
     * @memberof EventCalendarType
     */
    totalRooms?: number;
}

/**
 * Check if a given object implements the EventCalendarType interface.
 */
export function instanceOfEventCalendarType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventCalendarTypeFromJSON(json: any): EventCalendarType {
    return EventCalendarTypeFromJSONTyped(json, false);
}

export function EventCalendarTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventCalendarType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventCodes': !exists(json, 'eventCodes') ? undefined : ((json['eventCodes'] as Array<any>).map(EventCodeDetailTypeFromJSON)),
        'eventSpace': !exists(json, 'eventSpace') ? undefined : ((json['eventSpace'] as Array<any>).map(EventSpaceScheduleTypeFromJSON)),
        'pageIndex': !exists(json, 'pageIndex') ? undefined : json['pageIndex'],
        'recordsPerPage': !exists(json, 'recordsPerPage') ? undefined : json['recordsPerPage'],
        'sellMessages': !exists(json, 'sellMessages') ? undefined : SellMessagesTypeFromJSON(json['sellMessages']),
        'totalRooms': !exists(json, 'totalRooms') ? undefined : json['totalRooms'],
    };
}

export function EventCalendarTypeToJSON(value?: EventCalendarType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventCodes': value.eventCodes === undefined ? undefined : ((value.eventCodes as Array<any>).map(EventCodeDetailTypeToJSON)),
        'eventSpace': value.eventSpace === undefined ? undefined : ((value.eventSpace as Array<any>).map(EventSpaceScheduleTypeToJSON)),
        'pageIndex': value.pageIndex,
        'recordsPerPage': value.recordsPerPage,
        'sellMessages': SellMessagesTypeToJSON(value.sellMessages),
        'totalRooms': value.totalRooms,
    };
}

