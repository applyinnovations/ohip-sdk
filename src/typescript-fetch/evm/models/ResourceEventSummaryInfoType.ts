/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { EventId } from './EventId';
import {
    EventIdFromJSON,
    EventIdFromJSONTyped,
    EventIdToJSON,
} from './EventId';
import type { TranslationTextType60 } from './TranslationTextType60';
import {
    TranslationTextType60FromJSON,
    TranslationTextType60FromJSONTyped,
    TranslationTextType60ToJSON,
} from './TranslationTextType60';

/**
 * Contains information about an event.
 * @export
 * @interface ResourceEventSummaryInfoType
 */
export interface ResourceEventSummaryInfoType {
    /**
     * 
     * @type {EventId}
     * @memberof ResourceEventSummaryInfoType
     */
    eventId?: EventId;
    /**
     * 
     * @type {TranslationTextType60}
     * @memberof ResourceEventSummaryInfoType
     */
    eventName?: TranslationTextType60;
    /**
     * Type of event.
     * @type {string}
     * @memberof ResourceEventSummaryInfoType
     */
    eventType?: string;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof ResourceEventSummaryInfoType
     */
    eventTimeSpan?: DateTimeSpanType;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof ResourceEventSummaryInfoType
     */
    eventStatus?: BookingStatusType;
    /**
     * Package Id of the Event.
     * @type {number}
     * @memberof ResourceEventSummaryInfoType
     */
    packageId?: number;
    /**
     * Indicates whether event is master event.
     * @type {boolean}
     * @memberof ResourceEventSummaryInfoType
     */
    masterEvent?: boolean;
    /**
     * Flag to indicate if the event is a sub event.
     * @type {boolean}
     * @memberof ResourceEventSummaryInfoType
     */
    subEvent?: boolean;
    /**
     * Flag to indicate if the event is an alternate event.
     * @type {boolean}
     * @memberof ResourceEventSummaryInfoType
     */
    alternateEvent?: boolean;
    /**
     * Room code of the function space.
     * @type {string}
     * @memberof ResourceEventSummaryInfoType
     */
    room?: string;
}

/**
 * Check if a given object implements the ResourceEventSummaryInfoType interface.
 */
export function instanceOfResourceEventSummaryInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResourceEventSummaryInfoTypeFromJSON(json: any): ResourceEventSummaryInfoType {
    return ResourceEventSummaryInfoTypeFromJSONTyped(json, false);
}

export function ResourceEventSummaryInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceEventSummaryInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventId': !exists(json, 'eventId') ? undefined : EventIdFromJSON(json['eventId']),
        'eventName': !exists(json, 'eventName') ? undefined : TranslationTextType60FromJSON(json['eventName']),
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'eventTimeSpan': !exists(json, 'eventTimeSpan') ? undefined : DateTimeSpanTypeFromJSON(json['eventTimeSpan']),
        'eventStatus': !exists(json, 'eventStatus') ? undefined : BookingStatusTypeFromJSON(json['eventStatus']),
        'packageId': !exists(json, 'packageId') ? undefined : json['packageId'],
        'masterEvent': !exists(json, 'masterEvent') ? undefined : json['masterEvent'],
        'subEvent': !exists(json, 'subEvent') ? undefined : json['subEvent'],
        'alternateEvent': !exists(json, 'alternateEvent') ? undefined : json['alternateEvent'],
        'room': !exists(json, 'room') ? undefined : json['room'],
    };
}

export function ResourceEventSummaryInfoTypeToJSON(value?: ResourceEventSummaryInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventId': EventIdToJSON(value.eventId),
        'eventName': TranslationTextType60ToJSON(value.eventName),
        'eventType': value.eventType,
        'eventTimeSpan': DateTimeSpanTypeToJSON(value.eventTimeSpan),
        'eventStatus': BookingStatusTypeToJSON(value.eventStatus),
        'packageId': value.packageId,
        'masterEvent': value.masterEvent,
        'subEvent': value.subEvent,
        'alternateEvent': value.alternateEvent,
        'room': value.room,
    };
}

