/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventItemInfoType } from './EventItemInfoType';
import {
    EventItemInfoTypeFromJSON,
    EventItemInfoTypeFromJSONTyped,
    EventItemInfoTypeToJSON,
} from './EventItemInfoType';

/**
 * List of event items
 * @export
 * @interface EventItemsType
 */
export interface EventItemsType {
    /**
     * Flag to indicate all inventory items are critical.
     * @type {boolean}
     * @memberof EventItemsType
     */
    critical?: boolean;
    /**
     * Collection of Detailed information about event items.
     * @type {Array<EventItemInfoType>}
     * @memberof EventItemsType
     */
    eventItemInfo?: Array<EventItemInfoType>;
    /**
     * Flag to indicate all inventory items are part of a package.
     * @type {boolean}
     * @memberof EventItemsType
     */
    includedInPackage?: boolean;
}

/**
 * Check if a given object implements the EventItemsType interface.
 */
export function instanceOfEventItemsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventItemsTypeFromJSON(json: any): EventItemsType {
    return EventItemsTypeFromJSONTyped(json, false);
}

export function EventItemsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventItemsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'critical': !exists(json, 'critical') ? undefined : json['critical'],
        'eventItemInfo': !exists(json, 'eventItemInfo') ? undefined : ((json['eventItemInfo'] as Array<any>).map(EventItemInfoTypeFromJSON)),
        'includedInPackage': !exists(json, 'includedInPackage') ? undefined : json['includedInPackage'],
    };
}

export function EventItemsTypeToJSON(value?: EventItemsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'critical': value.critical,
        'eventItemInfo': value.eventItemInfo === undefined ? undefined : ((value.eventItemInfo as Array<any>).map(EventItemInfoTypeToJSON)),
        'includedInPackage': value.includedInPackage,
    };
}

