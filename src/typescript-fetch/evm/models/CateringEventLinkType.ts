/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringEventLinkTypeType } from './CateringEventLinkTypeType';
import {
    CateringEventLinkTypeTypeFromJSON,
    CateringEventLinkTypeTypeFromJSONTyped,
    CateringEventLinkTypeTypeToJSON,
} from './CateringEventLinkTypeType';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface CateringEventLinkType
 */
export interface CateringEventLinkType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CateringEventLinkType
     */
    id?: UniqueIDType;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof CateringEventLinkType
     */
    masterEventDates?: DateTimeSpanType;
    /**
     * 
     * @type {CateringEventLinkTypeType}
     * @memberof CateringEventLinkType
     */
    type?: CateringEventLinkTypeType;
}

/**
 * Check if a given object implements the CateringEventLinkType interface.
 */
export function instanceOfCateringEventLinkType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringEventLinkTypeFromJSON(json: any): CateringEventLinkType {
    return CateringEventLinkTypeFromJSONTyped(json, false);
}

export function CateringEventLinkTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventLinkType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : UniqueIDTypeFromJSON(json['id']),
        'masterEventDates': !exists(json, 'masterEventDates') ? undefined : DateTimeSpanTypeFromJSON(json['masterEventDates']),
        'type': !exists(json, 'type') ? undefined : CateringEventLinkTypeTypeFromJSON(json['type']),
    };
}

export function CateringEventLinkTypeToJSON(value?: CateringEventLinkType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': UniqueIDTypeToJSON(value.id),
        'masterEventDates': DateTimeSpanTypeToJSON(value.masterEventDates),
        'type': CateringEventLinkTypeTypeToJSON(value.type),
    };
}

