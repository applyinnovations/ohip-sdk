/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Function Space info type.
 * @export
 * @interface CateringEventBulkUpdateFunctionSpaceType
 */
export interface CateringEventBulkUpdateFunctionSpaceType {
    /**
     * Discount Percentage applied to Rent Amount.
     * @type {number}
     * @memberof CateringEventBulkUpdateFunctionSpaceType
     */
    discountPercentage?: number;
    /**
     * Function Space code.
     * @type {string}
     * @memberof CateringEventBulkUpdateFunctionSpaceType
     */
    functionSpaceCode?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CateringEventBulkUpdateFunctionSpaceType
     */
    rentalAmount?: CurrencyAmountType;
    /**
     * Rate Code for function space.
     * @type {string}
     * @memberof CateringEventBulkUpdateFunctionSpaceType
     */
    rentalCode?: string;
    /**
     * Setdown time in minutes.
     * @type {number}
     * @memberof CateringEventBulkUpdateFunctionSpaceType
     */
    setdownTime?: number;
    /**
     * Setup style code.
     * @type {string}
     * @memberof CateringEventBulkUpdateFunctionSpaceType
     */
    setupCode?: string;
    /**
     * Setup time in minutes.
     * @type {number}
     * @memberof CateringEventBulkUpdateFunctionSpaceType
     */
    setupTime?: number;
}

/**
 * Check if a given object implements the CateringEventBulkUpdateFunctionSpaceType interface.
 */
export function instanceOfCateringEventBulkUpdateFunctionSpaceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringEventBulkUpdateFunctionSpaceTypeFromJSON(json: any): CateringEventBulkUpdateFunctionSpaceType {
    return CateringEventBulkUpdateFunctionSpaceTypeFromJSONTyped(json, false);
}

export function CateringEventBulkUpdateFunctionSpaceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventBulkUpdateFunctionSpaceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'discountPercentage': !exists(json, 'discountPercentage') ? undefined : json['discountPercentage'],
        'functionSpaceCode': !exists(json, 'functionSpaceCode') ? undefined : json['functionSpaceCode'],
        'rentalAmount': !exists(json, 'rentalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['rentalAmount']),
        'rentalCode': !exists(json, 'rentalCode') ? undefined : json['rentalCode'],
        'setdownTime': !exists(json, 'setdownTime') ? undefined : json['setdownTime'],
        'setupCode': !exists(json, 'setupCode') ? undefined : json['setupCode'],
        'setupTime': !exists(json, 'setupTime') ? undefined : json['setupTime'],
    };
}

export function CateringEventBulkUpdateFunctionSpaceTypeToJSON(value?: CateringEventBulkUpdateFunctionSpaceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'discountPercentage': value.discountPercentage,
        'functionSpaceCode': value.functionSpaceCode,
        'rentalAmount': CurrencyAmountTypeToJSON(value.rentalAmount),
        'rentalCode': value.rentalCode,
        'setdownTime': value.setdownTime,
        'setupCode': value.setupCode,
        'setupTime': value.setupTime,
    };
}

