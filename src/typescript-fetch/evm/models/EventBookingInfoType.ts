/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { ResGuaranteeType } from './ResGuaranteeType';
import {
    ResGuaranteeTypeFromJSON,
    ResGuaranteeTypeFromJSONTyped,
    ResGuaranteeTypeToJSON,
} from './ResGuaranteeType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { VIPStatusType } from './VIPStatusType';
import {
    VIPStatusTypeFromJSON,
    VIPStatusTypeFromJSONTyped,
    VIPStatusTypeToJSON,
} from './VIPStatusType';

/**
 * Booking information about the Function Diary Event.
 * @export
 * @interface EventBookingInfoType
 */
export interface EventBookingInfoType {
    /**
     * The Time Span(Arrival, Departure) which covers the Block Span.
     * @type {Array<TimeSpanType>}
     * @memberof EventBookingInfoType
     */
    blockDates?: Array<TimeSpanType>;
    /**
     * Hotel code of the Block.
     * @type {string}
     * @memberof EventBookingInfoType
     */
    bookHotelCode?: string;
    /**
     * Business Block ID.
     * @type {number}
     * @memberof EventBookingInfoType
     */
    bookId?: number;
    /**
     * Catering Sales Manager ID.
     * @type {number}
     * @memberof EventBookingInfoType
     */
    catOwner?: number;
    /**
     * Catering Sales Manager Name.
     * @type {string}
     * @memberof EventBookingInfoType
     */
    catOwnerName?: string;
    /**
     * Company Name ID.
     * @type {number}
     * @memberof EventBookingInfoType
     */
    companyNameId?: number;
    /**
     * Flag to indicate Deduct Inventory.
     * @type {string}
     * @memberof EventBookingInfoType
     */
    deductInvYn?: string;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof EventBookingInfoType
     */
    eventStatus?: BookingStatusType;
    /**
     * 
     * @type {ResGuaranteeType}
     * @memberof EventBookingInfoType
     */
    guarantee?: ResGuaranteeType;
    /**
     * Master Name ID.
     * @type {number}
     * @memberof EventBookingInfoType
     */
    masterNameId?: number;
    /**
     * Flag to indicate block is non-compete protected.
     * @type {boolean}
     * @memberof EventBookingInfoType
     */
    nonCompete?: boolean;
    /**
     * Holds the industry code if non-compete is enabled.
     * @type {string}
     * @memberof EventBookingInfoType
     */
    nonCompeteCode?: string;
    /**
     * Holds the industry description.
     * @type {string}
     * @memberof EventBookingInfoType
     */
    nonCompeteIndustry?: string;
    /**
     * Flag to indicate block is rate protected.
     * @type {boolean}
     * @memberof EventBookingInfoType
     */
    rateProtect?: boolean;
    /**
     * Reservation Name ID.
     * @type {number}
     * @memberof EventBookingInfoType
     */
    resvNameId?: number;
    /**
     * Room Manager ID.
     * @type {number}
     * @memberof EventBookingInfoType
     */
    salesOwner?: number;
    /**
     * Room Manager Name.
     * @type {string}
     * @memberof EventBookingInfoType
     */
    salesOwnerName?: string;
    /**
     * 
     * @type {VIPStatusType}
     * @memberof EventBookingInfoType
     */
    vipStatus?: VIPStatusType;
}

/**
 * Check if a given object implements the EventBookingInfoType interface.
 */
export function instanceOfEventBookingInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventBookingInfoTypeFromJSON(json: any): EventBookingInfoType {
    return EventBookingInfoTypeFromJSONTyped(json, false);
}

export function EventBookingInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventBookingInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockDates': !exists(json, 'blockDates') ? undefined : ((json['blockDates'] as Array<any>).map(TimeSpanTypeFromJSON)),
        'bookHotelCode': !exists(json, 'bookHotelCode') ? undefined : json['bookHotelCode'],
        'bookId': !exists(json, 'bookId') ? undefined : json['bookId'],
        'catOwner': !exists(json, 'catOwner') ? undefined : json['catOwner'],
        'catOwnerName': !exists(json, 'catOwnerName') ? undefined : json['catOwnerName'],
        'companyNameId': !exists(json, 'companyNameId') ? undefined : json['companyNameId'],
        'deductInvYn': !exists(json, 'deductInvYn') ? undefined : json['deductInvYn'],
        'eventStatus': !exists(json, 'eventStatus') ? undefined : BookingStatusTypeFromJSON(json['eventStatus']),
        'guarantee': !exists(json, 'guarantee') ? undefined : ResGuaranteeTypeFromJSON(json['guarantee']),
        'masterNameId': !exists(json, 'masterNameId') ? undefined : json['masterNameId'],
        'nonCompete': !exists(json, 'nonCompete') ? undefined : json['nonCompete'],
        'nonCompeteCode': !exists(json, 'nonCompeteCode') ? undefined : json['nonCompeteCode'],
        'nonCompeteIndustry': !exists(json, 'nonCompeteIndustry') ? undefined : json['nonCompeteIndustry'],
        'rateProtect': !exists(json, 'rateProtect') ? undefined : json['rateProtect'],
        'resvNameId': !exists(json, 'resvNameId') ? undefined : json['resvNameId'],
        'salesOwner': !exists(json, 'salesOwner') ? undefined : json['salesOwner'],
        'salesOwnerName': !exists(json, 'salesOwnerName') ? undefined : json['salesOwnerName'],
        'vipStatus': !exists(json, 'vipStatus') ? undefined : VIPStatusTypeFromJSON(json['vipStatus']),
    };
}

export function EventBookingInfoTypeToJSON(value?: EventBookingInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockDates': value.blockDates === undefined ? undefined : ((value.blockDates as Array<any>).map(TimeSpanTypeToJSON)),
        'bookHotelCode': value.bookHotelCode,
        'bookId': value.bookId,
        'catOwner': value.catOwner,
        'catOwnerName': value.catOwnerName,
        'companyNameId': value.companyNameId,
        'deductInvYn': value.deductInvYn,
        'eventStatus': BookingStatusTypeToJSON(value.eventStatus),
        'guarantee': ResGuaranteeTypeToJSON(value.guarantee),
        'masterNameId': value.masterNameId,
        'nonCompete': value.nonCompete,
        'nonCompeteCode': value.nonCompeteCode,
        'nonCompeteIndustry': value.nonCompeteIndustry,
        'rateProtect': value.rateProtect,
        'resvNameId': value.resvNameId,
        'salesOwner': value.salesOwner,
        'salesOwnerName': value.salesOwnerName,
        'vipStatus': VIPStatusTypeToJSON(value.vipStatus),
    };
}

