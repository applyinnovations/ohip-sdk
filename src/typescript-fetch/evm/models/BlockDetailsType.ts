/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockClassificationType } from './BlockClassificationType';
import {
    BlockClassificationTypeFromJSON,
    BlockClassificationTypeFromJSONTyped,
    BlockClassificationTypeToJSON,
} from './BlockClassificationType';
import type { BlockDetailsTypePrimaryOwners } from './BlockDetailsTypePrimaryOwners';
import {
    BlockDetailsTypePrimaryOwnersFromJSON,
    BlockDetailsTypePrimaryOwnersFromJSONTyped,
    BlockDetailsTypePrimaryOwnersToJSON,
} from './BlockDetailsTypePrimaryOwners';
import type { BlockDetailsTypePrimaryProfiles } from './BlockDetailsTypePrimaryProfiles';
import {
    BlockDetailsTypePrimaryProfilesFromJSON,
    BlockDetailsTypePrimaryProfilesFromJSONTyped,
    BlockDetailsTypePrimaryProfilesToJSON,
} from './BlockDetailsTypePrimaryProfiles';
import type { BlockNonCompeteType } from './BlockNonCompeteType';
import {
    BlockNonCompeteTypeFromJSON,
    BlockNonCompeteTypeFromJSONTyped,
    BlockNonCompeteTypeToJSON,
} from './BlockNonCompeteType';
import type { BlockRateProtectionType } from './BlockRateProtectionType';
import {
    BlockRateProtectionTypeFromJSON,
    BlockRateProtectionTypeFromJSONTyped,
    BlockRateProtectionTypeToJSON,
} from './BlockRateProtectionType';
import type { BlockSourceOfSaleType } from './BlockSourceOfSaleType';
import {
    BlockSourceOfSaleTypeFromJSON,
    BlockSourceOfSaleTypeFromJSONTyped,
    BlockSourceOfSaleTypeToJSON,
} from './BlockSourceOfSaleType';
import type { BookingStatusDetailType } from './BookingStatusDetailType';
import {
    BookingStatusDetailTypeFromJSON,
    BookingStatusDetailTypeFromJSONTyped,
    BookingStatusDetailTypeToJSON,
} from './BookingStatusDetailType';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { MarketCodeInfoType } from './MarketCodeInfoType';
import {
    MarketCodeInfoTypeFromJSON,
    MarketCodeInfoTypeFromJSONTyped,
    MarketCodeInfoTypeToJSON,
} from './MarketCodeInfoType';
import type { ReservationTypeInfoType } from './ReservationTypeInfoType';
import {
    ReservationTypeInfoTypeFromJSON,
    ReservationTypeInfoTypeFromJSONTyped,
    ReservationTypeInfoTypeToJSON,
} from './ReservationTypeInfoType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';

/**
 * Information about the Block Details
 * @export
 * @interface BlockDetailsType
 */
export interface BlockDetailsType {
    /**
     * Block code for the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    blockCode?: string;
    /**
     * Name of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    blockName?: string;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof BlockDetailsType
     */
    blockDates?: TimeSpanType;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof BlockDetailsType
     */
    shoulderDates?: TimeSpanType;
    /**
     * 
     * @type {BookingStatusDetailType}
     * @memberof BlockDetailsType
     */
    blockStatus?: BookingStatusDetailType;
    /**
     * 
     * @type {ReservationTypeInfoType}
     * @memberof BlockDetailsType
     */
    reservationType?: ReservationTypeInfoType;
    /**
     * 
     * @type {MarketCodeInfoType}
     * @memberof BlockDetailsType
     */
    marketCode?: MarketCodeInfoType;
    /**
     * 
     * @type {BlockSourceOfSaleType}
     * @memberof BlockDetailsType
     */
    sourceOfSale?: BlockSourceOfSaleType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BlockDetailsType
     */
    bookingType?: CodeDescriptionType;
    /**
     * Internal status for the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    status?: string;
    /**
     * Internal type of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    blockType?: string;
    /**
     * Indicates the likelihood description of the block moving to the next active block status.
     * @type {string}
     * @memberof BlockDetailsType
     */
    conversionCode?: string;
    /**
     * Indicates the likelihood of the block moving to the next active block status.
     * @type {string}
     * @memberof BlockDetailsType
     */
    conversionCodeDescription?: string;
    /**
     * 
     * @type {BlockRateProtectionType}
     * @memberof BlockDetailsType
     */
    rateProtectionDetails?: BlockRateProtectionType;
    /**
     * 
     * @type {BlockNonCompeteType}
     * @memberof BlockDetailsType
     */
    nonCompeteDetails?: BlockNonCompeteType;
    /**
     * Indicates the ranking of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    rankingCode?: string;
    /**
     * Indicates the ranking description of the block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    rankingCodeDescription?: string;
    /**
     * Currency Code attached to the business block.
     * @type {string}
     * @memberof BlockDetailsType
     */
    currencyCode?: string;
    /**
     * A text field used to communicate the proper name of the hotel.
     * @type {string}
     * @memberof BlockDetailsType
     */
    hotelName?: string;
    /**
     * 
     * @type {BlockClassificationType}
     * @memberof BlockDetailsType
     */
    blockClassification?: BlockClassificationType;
    /**
     * 
     * @type {BlockDetailsTypePrimaryOwners}
     * @memberof BlockDetailsType
     */
    primaryOwners?: BlockDetailsTypePrimaryOwners;
    /**
     * 
     * @type {BlockDetailsTypePrimaryProfiles}
     * @memberof BlockDetailsType
     */
    primaryProfiles?: BlockDetailsTypePrimaryProfiles;
    /**
     * Indicates if this is a catering only block.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    cateringOnlyBlock?: boolean;
    /**
     * Indicates if alternate dates are allowed for the booking.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    flexibleDates?: boolean;
    /**
     * Indicates if the block is locked by an external system.
     * @type {boolean}
     * @memberof BlockDetailsType
     */
    externalLocked?: boolean;
}

/**
 * Check if a given object implements the BlockDetailsType interface.
 */
export function instanceOfBlockDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockDetailsTypeFromJSON(json: any): BlockDetailsType {
    return BlockDetailsTypeFromJSONTyped(json, false);
}

export function BlockDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'blockDates': !exists(json, 'blockDates') ? undefined : TimeSpanTypeFromJSON(json['blockDates']),
        'shoulderDates': !exists(json, 'shoulderDates') ? undefined : TimeSpanTypeFromJSON(json['shoulderDates']),
        'blockStatus': !exists(json, 'blockStatus') ? undefined : BookingStatusDetailTypeFromJSON(json['blockStatus']),
        'reservationType': !exists(json, 'reservationType') ? undefined : ReservationTypeInfoTypeFromJSON(json['reservationType']),
        'marketCode': !exists(json, 'marketCode') ? undefined : MarketCodeInfoTypeFromJSON(json['marketCode']),
        'sourceOfSale': !exists(json, 'sourceOfSale') ? undefined : BlockSourceOfSaleTypeFromJSON(json['sourceOfSale']),
        'bookingType': !exists(json, 'bookingType') ? undefined : CodeDescriptionTypeFromJSON(json['bookingType']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'blockType': !exists(json, 'blockType') ? undefined : json['blockType'],
        'conversionCode': !exists(json, 'conversionCode') ? undefined : json['conversionCode'],
        'conversionCodeDescription': !exists(json, 'conversionCodeDescription') ? undefined : json['conversionCodeDescription'],
        'rateProtectionDetails': !exists(json, 'rateProtectionDetails') ? undefined : BlockRateProtectionTypeFromJSON(json['rateProtectionDetails']),
        'nonCompeteDetails': !exists(json, 'nonCompeteDetails') ? undefined : BlockNonCompeteTypeFromJSON(json['nonCompeteDetails']),
        'rankingCode': !exists(json, 'rankingCode') ? undefined : json['rankingCode'],
        'rankingCodeDescription': !exists(json, 'rankingCodeDescription') ? undefined : json['rankingCodeDescription'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'blockClassification': !exists(json, 'blockClassification') ? undefined : BlockClassificationTypeFromJSON(json['blockClassification']),
        'primaryOwners': !exists(json, 'primaryOwners') ? undefined : BlockDetailsTypePrimaryOwnersFromJSON(json['primaryOwners']),
        'primaryProfiles': !exists(json, 'primaryProfiles') ? undefined : BlockDetailsTypePrimaryProfilesFromJSON(json['primaryProfiles']),
        'cateringOnlyBlock': !exists(json, 'cateringOnlyBlock') ? undefined : json['cateringOnlyBlock'],
        'flexibleDates': !exists(json, 'flexibleDates') ? undefined : json['flexibleDates'],
        'externalLocked': !exists(json, 'externalLocked') ? undefined : json['externalLocked'],
    };
}

export function BlockDetailsTypeToJSON(value?: BlockDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockCode': value.blockCode,
        'blockName': value.blockName,
        'blockDates': TimeSpanTypeToJSON(value.blockDates),
        'shoulderDates': TimeSpanTypeToJSON(value.shoulderDates),
        'blockStatus': BookingStatusDetailTypeToJSON(value.blockStatus),
        'reservationType': ReservationTypeInfoTypeToJSON(value.reservationType),
        'marketCode': MarketCodeInfoTypeToJSON(value.marketCode),
        'sourceOfSale': BlockSourceOfSaleTypeToJSON(value.sourceOfSale),
        'bookingType': CodeDescriptionTypeToJSON(value.bookingType),
        'status': value.status,
        'blockType': value.blockType,
        'conversionCode': value.conversionCode,
        'conversionCodeDescription': value.conversionCodeDescription,
        'rateProtectionDetails': BlockRateProtectionTypeToJSON(value.rateProtectionDetails),
        'nonCompeteDetails': BlockNonCompeteTypeToJSON(value.nonCompeteDetails),
        'rankingCode': value.rankingCode,
        'rankingCodeDescription': value.rankingCodeDescription,
        'currencyCode': value.currencyCode,
        'hotelName': value.hotelName,
        'blockClassification': BlockClassificationTypeToJSON(value.blockClassification),
        'primaryOwners': BlockDetailsTypePrimaryOwnersToJSON(value.primaryOwners),
        'primaryProfiles': BlockDetailsTypePrimaryProfilesToJSON(value.primaryProfiles),
        'cateringOnlyBlock': value.cateringOnlyBlock,
        'flexibleDates': value.flexibleDates,
        'externalLocked': value.externalLocked,
    };
}

