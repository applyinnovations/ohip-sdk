/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CopyCateringPkgType } from './CopyCateringPkgType';
import {
    CopyCateringPkgTypeFromJSON,
    CopyCateringPkgTypeFromJSONTyped,
    CopyCateringPkgTypeToJSON,
} from './CopyCateringPkgType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for Copying Catering Package/Template to another block.
 * @export
 * @interface CopyCateringPackage
 */
export interface CopyCateringPackage {
    /**
     * 
     * @type {CopyCateringPkgType}
     * @memberof CopyCateringPackage
     */
    criteria?: CopyCateringPkgType;
    /**
     * Used in conjunction with the Success elementSpace to define a business error.
     * @type {Array<WarningType>}
     * @memberof CopyCateringPackage
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the CopyCateringPackage interface.
 */
export function instanceOfCopyCateringPackage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyCateringPackageFromJSON(json: any): CopyCateringPackage {
    return CopyCateringPackageFromJSONTyped(json, false);
}

export function CopyCateringPackageFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyCateringPackage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'criteria': !exists(json, 'criteria') ? undefined : CopyCateringPkgTypeFromJSON(json['criteria']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CopyCateringPackageToJSON(value?: CopyCateringPackage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'criteria': CopyCateringPkgTypeToJSON(value.criteria),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

