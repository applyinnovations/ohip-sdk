/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventMenuBasicInfoType } from './EventMenuBasicInfoType';
import {
    EventMenuBasicInfoTypeFromJSON,
    EventMenuBasicInfoTypeFromJSONTyped,
    EventMenuBasicInfoTypeToJSON,
} from './EventMenuBasicInfoType';
import type { EventMenuItemType } from './EventMenuItemType';
import {
    EventMenuItemTypeFromJSON,
    EventMenuItemTypeFromJSONTyped,
    EventMenuItemTypeToJSON,
} from './EventMenuItemType';
import type { EventMenuRevenueType } from './EventMenuRevenueType';
import {
    EventMenuRevenueTypeFromJSON,
    EventMenuRevenueTypeFromJSONTyped,
    EventMenuRevenueTypeToJSON,
} from './EventMenuRevenueType';

/**
 * Information about event menu.
 * @export
 * @interface EventMenuType
 */
export interface EventMenuType {
    /**
     * 
     * @type {EventMenuBasicInfoType}
     * @memberof EventMenuType
     */
    basicInfo?: EventMenuBasicInfoType;
    /**
     * Hotel code of the Resource.
     * @type {string}
     * @memberof EventMenuType
     */
    hotelId?: string;
    /**
     * 
     * @type {Array<EventMenuItemType>}
     * @memberof EventMenuType
     */
    menuItems?: Array<EventMenuItemType>;
    /**
     * 
     * @type {Array<EventMenuRevenueType>}
     * @memberof EventMenuType
     */
    revenues?: Array<EventMenuRevenueType>;
}

/**
 * Check if a given object implements the EventMenuType interface.
 */
export function instanceOfEventMenuType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventMenuTypeFromJSON(json: any): EventMenuType {
    return EventMenuTypeFromJSONTyped(json, false);
}

export function EventMenuTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventMenuType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'basicInfo': !exists(json, 'basicInfo') ? undefined : EventMenuBasicInfoTypeFromJSON(json['basicInfo']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'menuItems': !exists(json, 'menuItems') ? undefined : ((json['menuItems'] as Array<any>).map(EventMenuItemTypeFromJSON)),
        'revenues': !exists(json, 'revenues') ? undefined : ((json['revenues'] as Array<any>).map(EventMenuRevenueTypeFromJSON)),
    };
}

export function EventMenuTypeToJSON(value?: EventMenuType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'basicInfo': EventMenuBasicInfoTypeToJSON(value.basicInfo),
        'hotelId': value.hotelId,
        'menuItems': value.menuItems === undefined ? undefined : ((value.menuItems as Array<any>).map(EventMenuItemTypeToJSON)),
        'revenues': value.revenues === undefined ? undefined : ((value.revenues as Array<any>).map(EventMenuRevenueTypeToJSON)),
    };
}

