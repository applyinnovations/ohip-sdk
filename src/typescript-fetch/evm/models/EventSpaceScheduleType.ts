/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventSpaceAttributesType } from './EventSpaceAttributesType';
import {
    EventSpaceAttributesTypeFromJSON,
    EventSpaceAttributesTypeFromJSONTyped,
    EventSpaceAttributesTypeToJSON,
} from './EventSpaceAttributesType';
import type { EventSpaceScheduleTypeEvents } from './EventSpaceScheduleTypeEvents';
import {
    EventSpaceScheduleTypeEventsFromJSON,
    EventSpaceScheduleTypeEventsFromJSONTyped,
    EventSpaceScheduleTypeEventsToJSON,
} from './EventSpaceScheduleTypeEvents';

/**
 * Collection of the Events Booked/Scheduled for the function spaces in the Hotel for the particular time period.
 * @export
 * @interface EventSpaceScheduleType
 */
export interface EventSpaceScheduleType {
    /**
     * Description for the Function Room.
     * @type {string}
     * @memberof EventSpaceScheduleType
     */
    description?: string;
    /**
     * 
     * @type {EventSpaceAttributesType}
     * @memberof EventSpaceScheduleType
     */
    eventSpaceAttributes?: EventSpaceAttributesType;
    /**
     * 
     * @type {EventSpaceScheduleTypeEvents}
     * @memberof EventSpaceScheduleType
     */
    events?: EventSpaceScheduleTypeEvents;
    /**
     * Hotel Code associated with the Function Space.
     * @type {string}
     * @memberof EventSpaceScheduleType
     */
    hotelId?: string;
    /**
     * Function Room Number.
     * @type {string}
     * @memberof EventSpaceScheduleType
     */
    roomId?: string;
    /**
     * Name of the Function Room.
     * @type {string}
     * @memberof EventSpaceScheduleType
     */
    name?: string;
    /**
     * Building name where this Room is.
     * @type {string}
     * @memberof EventSpaceScheduleType
     */
    building?: string;
    /**
     * Order the Room is displayed based on the settings selected by the user.
     * @type {number}
     * @memberof EventSpaceScheduleType
     */
    roomOrder?: number;
}

/**
 * Check if a given object implements the EventSpaceScheduleType interface.
 */
export function instanceOfEventSpaceScheduleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventSpaceScheduleTypeFromJSON(json: any): EventSpaceScheduleType {
    return EventSpaceScheduleTypeFromJSONTyped(json, false);
}

export function EventSpaceScheduleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventSpaceScheduleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'eventSpaceAttributes': !exists(json, 'eventSpaceAttributes') ? undefined : EventSpaceAttributesTypeFromJSON(json['eventSpaceAttributes']),
        'events': !exists(json, 'events') ? undefined : EventSpaceScheduleTypeEventsFromJSON(json['events']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'building': !exists(json, 'building') ? undefined : json['building'],
        'roomOrder': !exists(json, 'roomOrder') ? undefined : json['roomOrder'],
    };
}

export function EventSpaceScheduleTypeToJSON(value?: EventSpaceScheduleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'eventSpaceAttributes': EventSpaceAttributesTypeToJSON(value.eventSpaceAttributes),
        'events': EventSpaceScheduleTypeEventsToJSON(value.events),
        'hotelId': value.hotelId,
        'roomId': value.roomId,
        'name': value.name,
        'building': value.building,
        'roomOrder': value.roomOrder,
    };
}

