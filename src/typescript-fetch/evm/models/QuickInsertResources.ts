/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { QuickInsertResourceListType } from './QuickInsertResourceListType';
import {
    QuickInsertResourceListTypeFromJSON,
    QuickInsertResourceListTypeFromJSONTyped,
    QuickInsertResourceListTypeToJSON,
} from './QuickInsertResourceListType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object to add resource on an event in a hotel.
 * @export
 * @interface QuickInsertResources
 */
export interface QuickInsertResources {
    /**
     * 
     * @type {Array<QuickInsertResourceListType>}
     * @memberof QuickInsertResources
     */
    quickInsertResourceListInfo?: Array<QuickInsertResourceListType>;
    /**
     * Used in conjunction with the Success elementSpace to define a business error.
     * @type {Array<WarningType>}
     * @memberof QuickInsertResources
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the QuickInsertResources interface.
 */
export function instanceOfQuickInsertResources(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function QuickInsertResourcesFromJSON(json: any): QuickInsertResources {
    return QuickInsertResourcesFromJSONTyped(json, false);
}

export function QuickInsertResourcesFromJSONTyped(json: any, ignoreDiscriminator: boolean): QuickInsertResources {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'quickInsertResourceListInfo': !exists(json, 'quickInsertResourceListInfo') ? undefined : ((json['quickInsertResourceListInfo'] as Array<any>).map(QuickInsertResourceListTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function QuickInsertResourcesToJSON(value?: QuickInsertResources | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'quickInsertResourceListInfo': value.quickInsertResourceListInfo === undefined ? undefined : ((value.quickInsertResourceListInfo as Array<any>).map(QuickInsertResourceListTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

