/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventRevenueInformationType } from './EventRevenueInformationType';
import {
    EventRevenueInformationTypeFromJSON,
    EventRevenueInformationTypeFromJSONTyped,
    EventRevenueInformationTypeToJSON,
} from './EventRevenueInformationType';

/**
 * Collection of revenue information about a catering event.
 * @export
 * @interface EventRevenuesInformationType
 */
export interface EventRevenuesInformationType {
    /**
     * Currency code when base currency of the property is different than the catering currency.
     * @type {string}
     * @memberof EventRevenuesInformationType
     */
    currencyCode?: string;
    /**
     * Flag that indicates if actual revenue can be manually edited.
     * @type {boolean}
     * @memberof EventRevenuesInformationType
     */
    eventLevelRevenueActualization?: boolean;
    /**
     * Revenue information about a catering event.
     * @type {Array<EventRevenueInformationType>}
     * @memberof EventRevenuesInformationType
     */
    eventRevenueInformation?: Array<EventRevenueInformationType>;
    /**
     * Flag to indicate if the event revenue should be excluded from the forecast.
     * @type {boolean}
     * @memberof EventRevenuesInformationType
     */
    excludeFromForecast?: boolean;
    /**
     * Flag to indicate whether to only use the forecasted values when reporting, regardless of whether resources are booked on an event.
     * @type {boolean}
     * @memberof EventRevenuesInformationType
     */
    useForecastRevenue?: boolean;
}

/**
 * Check if a given object implements the EventRevenuesInformationType interface.
 */
export function instanceOfEventRevenuesInformationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventRevenuesInformationTypeFromJSON(json: any): EventRevenuesInformationType {
    return EventRevenuesInformationTypeFromJSONTyped(json, false);
}

export function EventRevenuesInformationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventRevenuesInformationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'eventLevelRevenueActualization': !exists(json, 'eventLevelRevenueActualization') ? undefined : json['eventLevelRevenueActualization'],
        'eventRevenueInformation': !exists(json, 'eventRevenueInformation') ? undefined : ((json['eventRevenueInformation'] as Array<any>).map(EventRevenueInformationTypeFromJSON)),
        'excludeFromForecast': !exists(json, 'excludeFromForecast') ? undefined : json['excludeFromForecast'],
        'useForecastRevenue': !exists(json, 'useForecastRevenue') ? undefined : json['useForecastRevenue'],
    };
}

export function EventRevenuesInformationTypeToJSON(value?: EventRevenuesInformationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currencyCode': value.currencyCode,
        'eventLevelRevenueActualization': value.eventLevelRevenueActualization,
        'eventRevenueInformation': value.eventRevenueInformation === undefined ? undefined : ((value.eventRevenueInformation as Array<any>).map(EventRevenueInformationTypeToJSON)),
        'excludeFromForecast': value.excludeFromForecast,
        'useForecastRevenue': value.useForecastRevenue,
    };
}

