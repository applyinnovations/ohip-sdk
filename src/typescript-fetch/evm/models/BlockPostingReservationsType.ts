/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingStatusType } from './BookingStatusType';
import {
    BookingStatusTypeFromJSON,
    BookingStatusTypeFromJSONTyped,
    BookingStatusTypeToJSON,
} from './BookingStatusType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Contains the block's posting account reservation information.
 * @export
 * @interface BlockPostingReservationsType
 */
export interface BlockPostingReservationsType {
    /**
     * Hotel Code of the Block.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    hotelId?: string;
    /**
     * Confirmation Number of the Posting Account Reservation.
     * @type {number}
     * @memberof BlockPostingReservationsType
     */
    confirmationNumber?: number;
    /**
     * Posting Account guest name.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    guestName?: string;
    /**
     * Arrival date.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    arrivalDate?: string;
    /**
     * Departure date.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    departureDate?: string;
    /**
     * 
     * @type {BookingStatusType}
     * @memberof BlockPostingReservationsType
     */
    reservationStatus?: BookingStatusType;
    /**
     * Hotel Code of the Room.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    roomHotelCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    reservationNameId?: UniqueIDType;
    /**
     * Posting Account guest's first name..
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    guestFirstName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    eventId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    blockId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof BlockPostingReservationsType
     */
    defaultPostingAccount?: UniqueIDType;
    /**
     * Number of Posting account reservations per block.
     * @type {number}
     * @memberof BlockPostingReservationsType
     */
    size?: number;
    /**
     * Room Number.
     * @type {string}
     * @memberof BlockPostingReservationsType
     */
    roomId?: string;
    /**
     * Flag to indicate whether posting charges is allowed.
     * @type {boolean}
     * @memberof BlockPostingReservationsType
     */
    noPost?: boolean;
}

/**
 * Check if a given object implements the BlockPostingReservationsType interface.
 */
export function instanceOfBlockPostingReservationsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockPostingReservationsTypeFromJSON(json: any): BlockPostingReservationsType {
    return BlockPostingReservationsTypeFromJSONTyped(json, false);
}

export function BlockPostingReservationsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockPostingReservationsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'confirmationNumber': !exists(json, 'confirmationNumber') ? undefined : json['confirmationNumber'],
        'guestName': !exists(json, 'guestName') ? undefined : json['guestName'],
        'arrivalDate': !exists(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'departureDate': !exists(json, 'departureDate') ? undefined : json['departureDate'],
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : BookingStatusTypeFromJSON(json['reservationStatus']),
        'roomHotelCode': !exists(json, 'roomHotelCode') ? undefined : json['roomHotelCode'],
        'reservationNameId': !exists(json, 'reservationNameId') ? undefined : UniqueIDTypeFromJSON(json['reservationNameId']),
        'guestFirstName': !exists(json, 'guestFirstName') ? undefined : json['guestFirstName'],
        'eventId': !exists(json, 'eventId') ? undefined : UniqueIDTypeFromJSON(json['eventId']),
        'blockId': !exists(json, 'blockId') ? undefined : UniqueIDTypeFromJSON(json['blockId']),
        'defaultPostingAccount': !exists(json, 'defaultPostingAccount') ? undefined : UniqueIDTypeFromJSON(json['defaultPostingAccount']),
        'size': !exists(json, 'size') ? undefined : json['size'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'noPost': !exists(json, 'noPost') ? undefined : json['noPost'],
    };
}

export function BlockPostingReservationsTypeToJSON(value?: BlockPostingReservationsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'confirmationNumber': value.confirmationNumber,
        'guestName': value.guestName,
        'arrivalDate': value.arrivalDate,
        'departureDate': value.departureDate,
        'reservationStatus': BookingStatusTypeToJSON(value.reservationStatus),
        'roomHotelCode': value.roomHotelCode,
        'reservationNameId': UniqueIDTypeToJSON(value.reservationNameId),
        'guestFirstName': value.guestFirstName,
        'eventId': UniqueIDTypeToJSON(value.eventId),
        'blockId': UniqueIDTypeToJSON(value.blockId),
        'defaultPostingAccount': UniqueIDTypeToJSON(value.defaultPostingAccount),
        'size': value.size,
        'roomId': value.roomId,
        'noPost': value.noPost,
    };
}

