/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { EventCodeTypeType } from './EventCodeTypeType';
import {
    EventCodeTypeTypeFromJSON,
    EventCodeTypeTypeFromJSONTyped,
    EventCodeTypeTypeToJSON,
} from './EventCodeTypeType';
import type { StatusColorType } from './StatusColorType';
import {
    StatusColorTypeFromJSON,
    StatusColorTypeFromJSONTyped,
    StatusColorTypeToJSON,
} from './StatusColorType';

/**
 * Event Code details for a given date.
 * @export
 * @interface EventCodeDetailType
 */
export interface EventCodeDetailType {
    /**
     * Block Name.
     * @type {string}
     * @memberof EventCodeDetailType
     */
    blockName?: string;
    /**
     * Status of the catering block
     * @type {string}
     * @memberof EventCodeDetailType
     */
    blockStatus?: string;
    /**
     * 
     * @type {StatusColorType}
     * @memberof EventCodeDetailType
     */
    color?: StatusColorType;
    /**
     * Date for which the event code is applicable.
     * @type {string}
     * @memberof EventCodeDetailType
     */
    date?: string;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof EventCodeDetailType
     */
    event?: CodeDescriptionType;
    /**
     * 
     * @type {EventCodeTypeType}
     * @memberof EventCodeDetailType
     */
    eventCodeType?: EventCodeTypeType;
    /**
     * Hotel Code associated with the Event Code.
     * @type {string}
     * @memberof EventCodeDetailType
     */
    hotelId?: string;
    /**
     * Holds the industry description.
     * @type {string}
     * @memberof EventCodeDetailType
     */
    nonCompeteIndustry?: string;
}

/**
 * Check if a given object implements the EventCodeDetailType interface.
 */
export function instanceOfEventCodeDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventCodeDetailTypeFromJSON(json: any): EventCodeDetailType {
    return EventCodeDetailTypeFromJSONTyped(json, false);
}

export function EventCodeDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventCodeDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'blockStatus': !exists(json, 'blockStatus') ? undefined : json['blockStatus'],
        'color': !exists(json, 'color') ? undefined : StatusColorTypeFromJSON(json['color']),
        'date': !exists(json, 'date') ? undefined : json['date'],
        'event': !exists(json, 'event') ? undefined : CodeDescriptionTypeFromJSON(json['event']),
        'eventCodeType': !exists(json, 'eventCodeType') ? undefined : EventCodeTypeTypeFromJSON(json['eventCodeType']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'nonCompeteIndustry': !exists(json, 'nonCompeteIndustry') ? undefined : json['nonCompeteIndustry'],
    };
}

export function EventCodeDetailTypeToJSON(value?: EventCodeDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockName': value.blockName,
        'blockStatus': value.blockStatus,
        'color': StatusColorTypeToJSON(value.color),
        'date': value.date,
        'event': CodeDescriptionTypeToJSON(value.event),
        'eventCodeType': EventCodeTypeTypeToJSON(value.eventCodeType),
        'hotelId': value.hotelId,
        'nonCompeteIndustry': value.nonCompeteIndustry,
    };
}

