/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationTextType200 } from './TranslationTextType200';
import {
    TranslationTextType200FromJSON,
    TranslationTextType200FromJSONTyped,
    TranslationTextType200ToJSON,
} from './TranslationTextType200';

/**
 * Catering Package details.
 * @export
 * @interface CateringPackageInfoType
 */
export interface CateringPackageInfoType {
    /**
     * Package Code associated with the Catering Package.
     * @type {string}
     * @memberof CateringPackageInfoType
     */
    pkgCode?: string;
    /**
     * 
     * @type {TranslationTextType200}
     * @memberof CateringPackageInfoType
     */
    description?: TranslationTextType200;
    /**
     * Duration (in days) of the Catering Package.
     * @type {number}
     * @memberof CateringPackageInfoType
     */
    duration?: number;
    /**
     * Defines if web booking is allowed.
     * @type {boolean}
     * @memberof CateringPackageInfoType
     */
    webBookable?: boolean;
    /**
     * Defines if Catering Package is a Template or not.
     * @type {boolean}
     * @memberof CateringPackageInfoType
     */
    isTemplate?: boolean;
}

/**
 * Check if a given object implements the CateringPackageInfoType interface.
 */
export function instanceOfCateringPackageInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringPackageInfoTypeFromJSON(json: any): CateringPackageInfoType {
    return CateringPackageInfoTypeFromJSONTyped(json, false);
}

export function CateringPackageInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringPackageInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pkgCode': !exists(json, 'pkgCode') ? undefined : json['pkgCode'],
        'description': !exists(json, 'description') ? undefined : TranslationTextType200FromJSON(json['description']),
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'webBookable': !exists(json, 'webBookable') ? undefined : json['webBookable'],
        'isTemplate': !exists(json, 'isTemplate') ? undefined : json['isTemplate'],
    };
}

export function CateringPackageInfoTypeToJSON(value?: CateringPackageInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'pkgCode': value.pkgCode,
        'description': TranslationTextType200ToJSON(value.description),
        'duration': value.duration,
        'webBookable': value.webBookable,
        'isTemplate': value.isTemplate,
    };
}

