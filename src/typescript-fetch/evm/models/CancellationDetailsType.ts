/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * This type holds information regarding booking status change to Cancel/ Lost.
 * @export
 * @interface CancellationDetailsType
 */
export interface CancellationDetailsType {
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof CancellationDetailsType
     */
    cancellationCode?: CodeDescriptionType;
    /**
     * Date on which block was canceled.
     * @type {Date}
     * @memberof CancellationDetailsType
     */
    cancellationDate?: Date;
    /**
     * Cancellation information provided by the customer.
     * @type {string}
     * @memberof CancellationDetailsType
     */
    cancellationInfo?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CancellationDetailsType
     */
    cancellationNumber?: UniqueIDType;
    /**
     * Alternate destination where the business is being taken.
     * @type {string}
     * @memberof CancellationDetailsType
     */
    destination?: string;
    /**
     * Holds the name of the property or competitor brand business was lost to.
     * @type {string}
     * @memberof CancellationDetailsType
     */
    lostToProperty?: string;
}

/**
 * Check if a given object implements the CancellationDetailsType interface.
 */
export function instanceOfCancellationDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CancellationDetailsTypeFromJSON(json: any): CancellationDetailsType {
    return CancellationDetailsTypeFromJSONTyped(json, false);
}

export function CancellationDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CancellationDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cancellationCode': !exists(json, 'cancellationCode') ? undefined : CodeDescriptionTypeFromJSON(json['cancellationCode']),
        'cancellationDate': !exists(json, 'cancellationDate') ? undefined : (new Date(json['cancellationDate'])),
        'cancellationInfo': !exists(json, 'cancellationInfo') ? undefined : json['cancellationInfo'],
        'cancellationNumber': !exists(json, 'cancellationNumber') ? undefined : UniqueIDTypeFromJSON(json['cancellationNumber']),
        'destination': !exists(json, 'destination') ? undefined : json['destination'],
        'lostToProperty': !exists(json, 'lostToProperty') ? undefined : json['lostToProperty'],
    };
}

export function CancellationDetailsTypeToJSON(value?: CancellationDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cancellationCode': CodeDescriptionTypeToJSON(value.cancellationCode),
        'cancellationDate': value.cancellationDate === undefined ? undefined : (value.cancellationDate.toISOString().substring(0,10)),
        'cancellationInfo': value.cancellationInfo,
        'cancellationNumber': UniqueIDTypeToJSON(value.cancellationNumber),
        'destination': value.destination,
        'lostToProperty': value.lostToProperty,
    };
}

