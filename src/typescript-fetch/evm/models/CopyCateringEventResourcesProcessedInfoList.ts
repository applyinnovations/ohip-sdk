/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringEventItemsProcessedInfoType } from './CateringEventItemsProcessedInfoType';
import {
    CateringEventItemsProcessedInfoTypeFromJSON,
    CateringEventItemsProcessedInfoTypeFromJSONTyped,
    CateringEventItemsProcessedInfoTypeToJSON,
} from './CateringEventItemsProcessedInfoType';
import type { CateringEventsProcessedInfoType } from './CateringEventsProcessedInfoType';
import {
    CateringEventsProcessedInfoTypeFromJSON,
    CateringEventsProcessedInfoTypeFromJSONTyped,
    CateringEventsProcessedInfoTypeToJSON,
} from './CateringEventsProcessedInfoType';

/**
 * Status/Info list of the processed event resources.
 * @export
 * @interface CopyCateringEventResourcesProcessedInfoList
 */
export interface CopyCateringEventResourcesProcessedInfoList {
    /**
     * Status/Info of the processed event items.
     * @type {Array<CateringEventItemsProcessedInfoType>}
     * @memberof CopyCateringEventResourcesProcessedInfoList
     */
    itemsProcessedInfo?: Array<CateringEventItemsProcessedInfoType>;
    /**
     * Status/Info of the processed event menus.
     * @type {Array<CateringEventsProcessedInfoType>}
     * @memberof CopyCateringEventResourcesProcessedInfoList
     */
    menusProcessedInfo?: Array<CateringEventsProcessedInfoType>;
}

/**
 * Check if a given object implements the CopyCateringEventResourcesProcessedInfoList interface.
 */
export function instanceOfCopyCateringEventResourcesProcessedInfoList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyCateringEventResourcesProcessedInfoListFromJSON(json: any): CopyCateringEventResourcesProcessedInfoList {
    return CopyCateringEventResourcesProcessedInfoListFromJSONTyped(json, false);
}

export function CopyCateringEventResourcesProcessedInfoListFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyCateringEventResourcesProcessedInfoList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'itemsProcessedInfo': !exists(json, 'itemsProcessedInfo') ? undefined : ((json['itemsProcessedInfo'] as Array<any>).map(CateringEventItemsProcessedInfoTypeFromJSON)),
        'menusProcessedInfo': !exists(json, 'menusProcessedInfo') ? undefined : ((json['menusProcessedInfo'] as Array<any>).map(CateringEventsProcessedInfoTypeFromJSON)),
    };
}

export function CopyCateringEventResourcesProcessedInfoListToJSON(value?: CopyCateringEventResourcesProcessedInfoList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'itemsProcessedInfo': value.itemsProcessedInfo === undefined ? undefined : ((value.itemsProcessedInfo as Array<any>).map(CateringEventItemsProcessedInfoTypeToJSON)),
        'menusProcessedInfo': value.menusProcessedInfo === undefined ? undefined : ((value.menusProcessedInfo as Array<any>).map(CateringEventsProcessedInfoTypeToJSON)),
    };
}

