/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttachmentType } from './AttachmentType';
import {
    AttachmentTypeFromJSON,
    AttachmentTypeFromJSONTyped,
    AttachmentTypeToJSON,
} from './AttachmentType';
import type { BlockDetailsType } from './BlockDetailsType';
import {
    BlockDetailsTypeFromJSON,
    BlockDetailsTypeFromJSONTyped,
    BlockDetailsTypeToJSON,
} from './BlockDetailsType';
import type { BlockInventoryItemType } from './BlockInventoryItemType';
import {
    BlockInventoryItemTypeFromJSON,
    BlockInventoryItemTypeFromJSONTyped,
    BlockInventoryItemTypeToJSON,
} from './BlockInventoryItemType';
import type { BlockOwnersType } from './BlockOwnersType';
import {
    BlockOwnersTypeFromJSON,
    BlockOwnersTypeFromJSONTyped,
    BlockOwnersTypeToJSON,
} from './BlockOwnersType';
import type { BlockRestrictionsType } from './BlockRestrictionsType';
import {
    BlockRestrictionsTypeFromJSON,
    BlockRestrictionsTypeFromJSONTyped,
    BlockRestrictionsTypeToJSON,
} from './BlockRestrictionsType';
import type { BlockStatisticsSummaryType } from './BlockStatisticsSummaryType';
import {
    BlockStatisticsSummaryTypeFromJSON,
    BlockStatisticsSummaryTypeFromJSONTyped,
    BlockStatisticsSummaryTypeToJSON,
} from './BlockStatisticsSummaryType';
import type { BlockStatisticsType } from './BlockStatisticsType';
import {
    BlockStatisticsTypeFromJSON,
    BlockStatisticsTypeFromJSONTyped,
    BlockStatisticsTypeToJSON,
} from './BlockStatisticsType';
import type { BlockTraceType } from './BlockTraceType';
import {
    BlockTraceTypeFromJSON,
    BlockTraceTypeFromJSONTyped,
    BlockTraceTypeToJSON,
} from './BlockTraceType';
import type { BlockTypeBlockProfiles } from './BlockTypeBlockProfiles';
import {
    BlockTypeBlockProfilesFromJSON,
    BlockTypeBlockProfilesFromJSONTyped,
    BlockTypeBlockProfilesToJSON,
} from './BlockTypeBlockProfiles';
import type { BlockTypeBlockSecurity } from './BlockTypeBlockSecurity';
import {
    BlockTypeBlockSecurityFromJSON,
    BlockTypeBlockSecurityFromJSONTyped,
    BlockTypeBlockSecurityToJSON,
} from './BlockTypeBlockSecurity';
import type { BlockTypeComments } from './BlockTypeComments';
import {
    BlockTypeCommentsFromJSON,
    BlockTypeCommentsFromJSONTyped,
    BlockTypeCommentsToJSON,
} from './BlockTypeComments';
import type { BlockWashScheduleType } from './BlockWashScheduleType';
import {
    BlockWashScheduleTypeFromJSON,
    BlockWashScheduleTypeFromJSONTyped,
    BlockWashScheduleTypeToJSON,
} from './BlockWashScheduleType';
import type { CateringType } from './CateringType';
import {
    CateringTypeFromJSON,
    CateringTypeFromJSONTyped,
    CateringTypeToJSON,
} from './CateringType';
import type { ExternalReferenceType } from './ExternalReferenceType';
import {
    ExternalReferenceTypeFromJSON,
    ExternalReferenceTypeFromJSONTyped,
    ExternalReferenceTypeToJSON,
} from './ExternalReferenceType';
import type { IndicatorType } from './IndicatorType';
import {
    IndicatorTypeFromJSON,
    IndicatorTypeFromJSONTyped,
    IndicatorTypeToJSON,
} from './IndicatorType';
import type { SellMessageConfigsType } from './SellMessageConfigsType';
import {
    SellMessageConfigsTypeFromJSON,
    SellMessageConfigsTypeFromJSONTyped,
    SellMessageConfigsTypeToJSON,
} from './SellMessageConfigsType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface BlockType
 */
export interface BlockType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof BlockType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * This type contains unique information of external reference.
     * @type {Array<ExternalReferenceType>}
     * @memberof BlockType
     */
    externalReferences?: Array<ExternalReferenceType>;
    /**
     * 
     * @type {BlockDetailsType}
     * @memberof BlockType
     */
    blockDetails?: BlockDetailsType;
    /**
     * 
     * @type {BlockOwnersType}
     * @memberof BlockType
     */
    blockOwners?: BlockOwnersType;
    /**
     * 
     * @type {CateringType}
     * @memberof BlockType
     */
    catering?: CateringType;
    /**
     * 
     * @type {BlockTypeBlockProfiles}
     * @memberof BlockType
     */
    blockProfiles?: BlockTypeBlockProfiles;
    /**
     * Inventory item attached to a block.
     * @type {Array<BlockInventoryItemType>}
     * @memberof BlockType
     */
    inventoryItems?: Array<BlockInventoryItemType>;
    /**
     * 
     * @type {BlockStatisticsType}
     * @memberof BlockType
     */
    blockStatistics?: BlockStatisticsType;
    /**
     * 
     * @type {BlockTypeComments}
     * @memberof BlockType
     */
    comments?: BlockTypeComments;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof BlockType
     */
    blockIndicators?: Array<IndicatorType>;
    /**
     * List of Block traces.
     * @type {Array<BlockTraceType>}
     * @memberof BlockType
     */
    traces?: Array<BlockTraceType>;
    /**
     * Statistics summary information including Rooms Sold, Room Revenue, Food and Beverage Revenue, Average Room Rate,etc.
     * @type {Array<BlockStatisticsSummaryType>}
     * @memberof BlockType
     */
    statistics?: Array<BlockStatisticsSummaryType>;
    /**
     * 
     * @type {BlockTypeBlockSecurity}
     * @memberof BlockType
     */
    blockSecurity?: BlockTypeBlockSecurity;
    /**
     * 
     * @type {SellMessageConfigsType}
     * @memberof BlockType
     */
    sellMessages?: SellMessageConfigsType;
    /**
     * Attachment List.
     * @type {Array<AttachmentType>}
     * @memberof BlockType
     */
    attachments?: Array<AttachmentType>;
    /**
     * Wash Schedule attached to the block, which allows to release inventory based on selected wash schedule type.
     * @type {Array<BlockWashScheduleType>}
     * @memberof BlockType
     */
    washSchedules?: Array<BlockWashScheduleType>;
    /**
     * 
     * @type {BlockRestrictionsType}
     * @memberof BlockType
     */
    restrictions?: BlockRestrictionsType;
    /**
     * 
     * @type {string}
     * @memberof BlockType
     */
    hotelId?: string;
    /**
     * Mark this block as recently accessed.
     * @type {boolean}
     * @memberof BlockType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof BlockType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof BlockType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof BlockType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof BlockType
     */
    lastModifierId?: string;
}

/**
 * Check if a given object implements the BlockType interface.
 */
export function instanceOfBlockType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockTypeFromJSON(json: any): BlockType {
    return BlockTypeFromJSONTyped(json, false);
}

export function BlockTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'externalReferences': !exists(json, 'externalReferences') ? undefined : ((json['externalReferences'] as Array<any>).map(ExternalReferenceTypeFromJSON)),
        'blockDetails': !exists(json, 'blockDetails') ? undefined : BlockDetailsTypeFromJSON(json['blockDetails']),
        'blockOwners': !exists(json, 'blockOwners') ? undefined : BlockOwnersTypeFromJSON(json['blockOwners']),
        'catering': !exists(json, 'catering') ? undefined : CateringTypeFromJSON(json['catering']),
        'blockProfiles': !exists(json, 'blockProfiles') ? undefined : BlockTypeBlockProfilesFromJSON(json['blockProfiles']),
        'inventoryItems': !exists(json, 'inventoryItems') ? undefined : ((json['inventoryItems'] as Array<any>).map(BlockInventoryItemTypeFromJSON)),
        'blockStatistics': !exists(json, 'blockStatistics') ? undefined : BlockStatisticsTypeFromJSON(json['blockStatistics']),
        'comments': !exists(json, 'comments') ? undefined : BlockTypeCommentsFromJSON(json['comments']),
        'blockIndicators': !exists(json, 'blockIndicators') ? undefined : ((json['blockIndicators'] as Array<any>).map(IndicatorTypeFromJSON)),
        'traces': !exists(json, 'traces') ? undefined : ((json['traces'] as Array<any>).map(BlockTraceTypeFromJSON)),
        'statistics': !exists(json, 'statistics') ? undefined : ((json['statistics'] as Array<any>).map(BlockStatisticsSummaryTypeFromJSON)),
        'blockSecurity': !exists(json, 'blockSecurity') ? undefined : BlockTypeBlockSecurityFromJSON(json['blockSecurity']),
        'sellMessages': !exists(json, 'sellMessages') ? undefined : SellMessageConfigsTypeFromJSON(json['sellMessages']),
        'attachments': !exists(json, 'attachments') ? undefined : ((json['attachments'] as Array<any>).map(AttachmentTypeFromJSON)),
        'washSchedules': !exists(json, 'washSchedules') ? undefined : ((json['washSchedules'] as Array<any>).map(BlockWashScheduleTypeFromJSON)),
        'restrictions': !exists(json, 'restrictions') ? undefined : BlockRestrictionsTypeFromJSON(json['restrictions']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'markAsRecentlyAccessed': !exists(json, 'markAsRecentlyAccessed') ? undefined : json['markAsRecentlyAccessed'],
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
    };
}

export function BlockTypeToJSON(value?: BlockType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'externalReferences': value.externalReferences === undefined ? undefined : ((value.externalReferences as Array<any>).map(ExternalReferenceTypeToJSON)),
        'blockDetails': BlockDetailsTypeToJSON(value.blockDetails),
        'blockOwners': BlockOwnersTypeToJSON(value.blockOwners),
        'catering': CateringTypeToJSON(value.catering),
        'blockProfiles': BlockTypeBlockProfilesToJSON(value.blockProfiles),
        'inventoryItems': value.inventoryItems === undefined ? undefined : ((value.inventoryItems as Array<any>).map(BlockInventoryItemTypeToJSON)),
        'blockStatistics': BlockStatisticsTypeToJSON(value.blockStatistics),
        'comments': BlockTypeCommentsToJSON(value.comments),
        'blockIndicators': value.blockIndicators === undefined ? undefined : ((value.blockIndicators as Array<any>).map(IndicatorTypeToJSON)),
        'traces': value.traces === undefined ? undefined : ((value.traces as Array<any>).map(BlockTraceTypeToJSON)),
        'statistics': value.statistics === undefined ? undefined : ((value.statistics as Array<any>).map(BlockStatisticsSummaryTypeToJSON)),
        'blockSecurity': BlockTypeBlockSecurityToJSON(value.blockSecurity),
        'sellMessages': SellMessageConfigsTypeToJSON(value.sellMessages),
        'attachments': value.attachments === undefined ? undefined : ((value.attachments as Array<any>).map(AttachmentTypeToJSON)),
        'washSchedules': value.washSchedules === undefined ? undefined : ((value.washSchedules as Array<any>).map(BlockWashScheduleTypeToJSON)),
        'restrictions': BlockRestrictionsTypeToJSON(value.restrictions),
        'hotelId': value.hotelId,
        'markAsRecentlyAccessed': value.markAsRecentlyAccessed,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
    };
}

