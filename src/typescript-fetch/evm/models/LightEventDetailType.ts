/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventDetailType } from './EventDetailType';
import {
    EventDetailTypeFromJSON,
    EventDetailTypeFromJSONTyped,
    EventDetailTypeToJSON,
} from './EventDetailType';
import type { EventFunctionSpaceType } from './EventFunctionSpaceType';
import {
    EventFunctionSpaceTypeFromJSON,
    EventFunctionSpaceTypeFromJSONTyped,
    EventFunctionSpaceTypeToJSON,
} from './EventFunctionSpaceType';
import type { EventPrimaryInfoType } from './EventPrimaryInfoType';
import {
    EventPrimaryInfoTypeFromJSON,
    EventPrimaryInfoTypeFromJSONTyped,
    EventPrimaryInfoTypeToJSON,
} from './EventPrimaryInfoType';

/**
 * Light Event Details.
 * @export
 * @interface LightEventDetailType
 */
export interface LightEventDetailType {
    /**
     * 
     * @type {EventDetailType}
     * @memberof LightEventDetailType
     */
    eventDetail?: EventDetailType;
    /**
     * 
     * @type {EventPrimaryInfoType}
     * @memberof LightEventDetailType
     */
    eventPrimaryInfo?: EventPrimaryInfoType;
    /**
     * 
     * @type {EventFunctionSpaceType}
     * @memberof LightEventDetailType
     */
    functionSpaceInformation?: EventFunctionSpaceType;
}

/**
 * Check if a given object implements the LightEventDetailType interface.
 */
export function instanceOfLightEventDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LightEventDetailTypeFromJSON(json: any): LightEventDetailType {
    return LightEventDetailTypeFromJSONTyped(json, false);
}

export function LightEventDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LightEventDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'eventDetail': !exists(json, 'eventDetail') ? undefined : EventDetailTypeFromJSON(json['eventDetail']),
        'eventPrimaryInfo': !exists(json, 'eventPrimaryInfo') ? undefined : EventPrimaryInfoTypeFromJSON(json['eventPrimaryInfo']),
        'functionSpaceInformation': !exists(json, 'functionSpaceInformation') ? undefined : EventFunctionSpaceTypeFromJSON(json['functionSpaceInformation']),
    };
}

export function LightEventDetailTypeToJSON(value?: LightEventDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventDetail': EventDetailTypeToJSON(value.eventDetail),
        'eventPrimaryInfo': EventPrimaryInfoTypeToJSON(value.eventPrimaryInfo),
        'functionSpaceInformation': EventFunctionSpaceTypeToJSON(value.functionSpaceInformation),
    };
}

