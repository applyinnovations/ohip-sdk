/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Sales Event Management API
 * APIs to cater for Event Management functionality in OPERA Cloud. <br /><br />The Events feature in OPERA Cloud is designed to manage any kind of catering activity. Events can be as simple as a one-hour reception or more complex, such as a three-day business meeting with meals, breaks, and specific meeting functionSpaceDetails with setupCode and resource requirements. Any group function can be an Event.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { StatusColorType } from './StatusColorType';
import {
    StatusColorTypeFromJSON,
    StatusColorTypeFromJSONTyped,
    StatusColorTypeToJSON,
} from './StatusColorType';

/**
 * Booking status code, description and configured color of the status. This will be used for block and event statuses.
 * @export
 * @interface BookingStatusType
 */
export interface BookingStatusType {
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof BookingStatusType
     */
    status?: CodeDescriptionType;
    /**
     * 
     * @type {StatusColorType}
     * @memberof BookingStatusType
     */
    color?: StatusColorType;
}

/**
 * Check if a given object implements the BookingStatusType interface.
 */
export function instanceOfBookingStatusType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BookingStatusTypeFromJSON(json: any): BookingStatusType {
    return BookingStatusTypeFromJSONTyped(json, false);
}

export function BookingStatusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookingStatusType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : CodeDescriptionTypeFromJSON(json['status']),
        'color': !exists(json, 'color') ? undefined : StatusColorTypeFromJSON(json['color']),
    };
}

export function BookingStatusTypeToJSON(value?: BookingStatusType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': CodeDescriptionTypeToJSON(value.status),
        'color': StatusColorTypeToJSON(value.color),
    };
}

