/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Asynchronous API
 * APIs to insert Stay Records related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  InstanceLink,
  StayRecordStatus,
  StayRecords,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    InstanceLinkFromJSON,
    InstanceLinkToJSON,
    StayRecordStatusFromJSON,
    StayRecordStatusToJSON,
    StayRecordsFromJSON,
    StayRecordsToJSON,
} from '../models/index';

export interface GetStayRecordsProcessRequest {
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetStayRecordsProcessStatusRequest {
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface StayRecordsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: StayRecords;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CRMAsyncApi extends runtime.BaseAPI {

    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcess</p>
     * This API facilitates fetching the status for stay records uploaded.
     */
    async getStayRecordsProcessRaw(requestParameters: GetStayRecordsProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StayRecordStatus>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getStayRecordsProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stayRecords/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StayRecordStatusFromJSON(jsonValue));
    }

    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcess</p>
     * This API facilitates fetching the status for stay records uploaded.
     */
    async getStayRecordsProcess(requestParameters: GetStayRecordsProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StayRecordStatus> {
        const response = await this.getStayRecordsProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getStayRecordsProcessStatusRaw(requestParameters: GetStayRecordsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getStayRecordsProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stayRecords/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Use this to check whether the request sent have been processed. <p><strong>OperationId:</strong>getStayRecordsProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getStayRecordsProcessStatus(requestParameters: GetStayRecordsProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getStayRecordsProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * A user can upload various stay records to OPERA by specifying stay record column details in the request.<p><strong>OperationId:</strong>stayRecords</p>
     * This API facilitates uploading stage records to LCS.
     */
    async stayRecordsRaw(requestParameters: StayRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLink>>> {
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling stayRecords.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stayRecords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StayRecordsToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstanceLinkFromJSON));
    }

    /**
     * A user can upload various stay records to OPERA by specifying stay record column details in the request.<p><strong>OperationId:</strong>stayRecords</p>
     * This API facilitates uploading stage records to LCS.
     */
    async stayRecords(requestParameters: StayRecordsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLink>> {
        const response = await this.stayRecordsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
