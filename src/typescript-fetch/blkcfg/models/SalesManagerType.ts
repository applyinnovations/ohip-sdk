/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Sales Manager's information.
 * @export
 * @interface SalesManagerType
 */
export interface SalesManagerType {
    /**
     * Indicates if the Sales manager has Activity Goal
     * @type {boolean}
     * @memberof SalesManagerType
     */
    activity?: boolean;
    /**
     * Indicates if the Sales manager has Group Room with Catering Goal
     * @type {boolean}
     * @memberof SalesManagerType
     */
    groupRoomWithCatering?: boolean;
    /**
     * Hotel Code of the Sales Manager
     * @type {string}
     * @memberof SalesManagerType
     */
    hotelId?: string;
    /**
     * Sales Manager's name
     * @type {string}
     * @memberof SalesManagerType
     */
    name?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof SalesManagerType
     */
    nameId?: UniqueIDType;
    /**
     * Sales Manager's code
     * @type {string}
     * @memberof SalesManagerType
     */
    salesManagerCode?: string;
    /**
     * Indicates if the Sales manager has Transient Room Goal
     * @type {boolean}
     * @memberof SalesManagerType
     */
    transientRoom?: boolean;
}

/**
 * Check if a given object implements the SalesManagerType interface.
 */
export function instanceOfSalesManagerType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SalesManagerTypeFromJSON(json: any): SalesManagerType {
    return SalesManagerTypeFromJSONTyped(json, false);
}

export function SalesManagerTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesManagerType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activity': !exists(json, 'activity') ? undefined : json['activity'],
        'groupRoomWithCatering': !exists(json, 'groupRoomWithCatering') ? undefined : json['groupRoomWithCatering'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nameId': !exists(json, 'nameId') ? undefined : UniqueIDTypeFromJSON(json['nameId']),
        'salesManagerCode': !exists(json, 'salesManagerCode') ? undefined : json['salesManagerCode'],
        'transientRoom': !exists(json, 'transientRoom') ? undefined : json['transientRoom'],
    };
}

export function SalesManagerTypeToJSON(value?: SalesManagerType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activity': value.activity,
        'groupRoomWithCatering': value.groupRoomWithCatering,
        'hotelId': value.hotelId,
        'name': value.name,
        'nameId': UniqueIDTypeToJSON(value.nameId),
        'salesManagerCode': value.salesManagerCode,
        'transientRoom': value.transientRoom,
    };
}

