/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Detail Information about Sales Manager's goal.
 * @export
 * @interface SalesManagerGoalType
 */
export interface SalesManagerGoalType {
    /**
     * Hotel Code of the Sales Manager
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof SalesManagerGoalType
     */
    nameId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof SalesManagerGoalType
     */
    goalID?: UniqueIDType;
    /**
     * Specifies the Goal Type
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    goalType?: string;
    /**
     * Specifies if this is a Arrival or a Production Goal
     * @type {boolean}
     * @memberof SalesManagerGoalType
     */
    arrivalGoal?: boolean;
    /**
     * Specifies the Production Start Date
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    productionStartDate?: string;
    /**
     * Specifies the Production End Date
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    productionEndDate?: string;
    /**
     * Specifies the Production Period Code
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    productionPeriodCode?: string;
    /**
     * Specifies the Arrival Start Date
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    arrivalStartDate?: string;
    /**
     * Specifies the Arrival End Date
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    arrivalEndDate?: string;
    /**
     * Specifies the Arrival Period Code
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    arrivalPeriodCode?: string;
    /**
     * Market Code assigned for the goal
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    marketCode?: string;
    /**
     * Room Nights assigned for the goal
     * @type {number}
     * @memberof SalesManagerGoalType
     */
    roomNights?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof SalesManagerGoalType
     */
    roomRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof SalesManagerGoalType
     */
    averageRate?: CurrencyAmountType;
    /**
     * Number of meals or covers assigned for the Goal
     * @type {number}
     * @memberof SalesManagerGoalType
     */
    cateringCovers?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof SalesManagerGoalType
     */
    fBRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof SalesManagerGoalType
     */
    averageFBCheck?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof SalesManagerGoalType
     */
    otherRevenue?: CurrencyAmountType;
    /**
     * Specifies the type of activity being set as a goal
     * @type {string}
     * @memberof SalesManagerGoalType
     */
    activityType?: string;
    /**
     * Specifies the number of activities of Activity Type being set as a goal
     * @type {number}
     * @memberof SalesManagerGoalType
     */
    activitiesCount?: number;
    /**
     * Goal type used to fetch goals related to Group Rooms and Catering business
     * @type {boolean}
     * @memberof SalesManagerGoalType
     */
    groupRoomsWithCatering?: boolean;
    /**
     * Goal type used to fetch non group goals related to Rooms business
     * @type {boolean}
     * @memberof SalesManagerGoalType
     */
    transientRoom?: boolean;
    /**
     * Indicates if the Sales manager has Activity Goal
     * @type {boolean}
     * @memberof SalesManagerGoalType
     */
    activity?: boolean;
    /**
     * Use this indicator to fetch goal's having Production From or Arrival From dates later than the current business date or quarter
     * @type {boolean}
     * @memberof SalesManagerGoalType
     */
    future?: boolean;
}

/**
 * Check if a given object implements the SalesManagerGoalType interface.
 */
export function instanceOfSalesManagerGoalType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SalesManagerGoalTypeFromJSON(json: any): SalesManagerGoalType {
    return SalesManagerGoalTypeFromJSONTyped(json, false);
}

export function SalesManagerGoalTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SalesManagerGoalType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'nameId': !exists(json, 'nameId') ? undefined : UniqueIDTypeFromJSON(json['nameId']),
        'goalID': !exists(json, 'goalID') ? undefined : UniqueIDTypeFromJSON(json['goalID']),
        'goalType': !exists(json, 'goalType') ? undefined : json['goalType'],
        'arrivalGoal': !exists(json, 'arrivalGoal') ? undefined : json['arrivalGoal'],
        'productionStartDate': !exists(json, 'productionStartDate') ? undefined : json['productionStartDate'],
        'productionEndDate': !exists(json, 'productionEndDate') ? undefined : json['productionEndDate'],
        'productionPeriodCode': !exists(json, 'productionPeriodCode') ? undefined : json['productionPeriodCode'],
        'arrivalStartDate': !exists(json, 'arrivalStartDate') ? undefined : json['arrivalStartDate'],
        'arrivalEndDate': !exists(json, 'arrivalEndDate') ? undefined : json['arrivalEndDate'],
        'arrivalPeriodCode': !exists(json, 'arrivalPeriodCode') ? undefined : json['arrivalPeriodCode'],
        'marketCode': !exists(json, 'marketCode') ? undefined : json['marketCode'],
        'roomNights': !exists(json, 'roomNights') ? undefined : json['roomNights'],
        'roomRevenue': !exists(json, 'roomRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['roomRevenue']),
        'averageRate': !exists(json, 'averageRate') ? undefined : CurrencyAmountTypeFromJSON(json['averageRate']),
        'cateringCovers': !exists(json, 'cateringCovers') ? undefined : json['cateringCovers'],
        'fBRevenue': !exists(json, 'fBRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['fBRevenue']),
        'averageFBCheck': !exists(json, 'averageFBCheck') ? undefined : CurrencyAmountTypeFromJSON(json['averageFBCheck']),
        'otherRevenue': !exists(json, 'otherRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['otherRevenue']),
        'activityType': !exists(json, 'activityType') ? undefined : json['activityType'],
        'activitiesCount': !exists(json, 'activitiesCount') ? undefined : json['activitiesCount'],
        'groupRoomsWithCatering': !exists(json, 'groupRoomsWithCatering') ? undefined : json['groupRoomsWithCatering'],
        'transientRoom': !exists(json, 'transientRoom') ? undefined : json['transientRoom'],
        'activity': !exists(json, 'activity') ? undefined : json['activity'],
        'future': !exists(json, 'future') ? undefined : json['future'],
    };
}

export function SalesManagerGoalTypeToJSON(value?: SalesManagerGoalType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'nameId': UniqueIDTypeToJSON(value.nameId),
        'goalID': UniqueIDTypeToJSON(value.goalID),
        'goalType': value.goalType,
        'arrivalGoal': value.arrivalGoal,
        'productionStartDate': value.productionStartDate,
        'productionEndDate': value.productionEndDate,
        'productionPeriodCode': value.productionPeriodCode,
        'arrivalStartDate': value.arrivalStartDate,
        'arrivalEndDate': value.arrivalEndDate,
        'arrivalPeriodCode': value.arrivalPeriodCode,
        'marketCode': value.marketCode,
        'roomNights': value.roomNights,
        'roomRevenue': CurrencyAmountTypeToJSON(value.roomRevenue),
        'averageRate': CurrencyAmountTypeToJSON(value.averageRate),
        'cateringCovers': value.cateringCovers,
        'fBRevenue': CurrencyAmountTypeToJSON(value.fBRevenue),
        'averageFBCheck': CurrencyAmountTypeToJSON(value.averageFBCheck),
        'otherRevenue': CurrencyAmountTypeToJSON(value.otherRevenue),
        'activityType': value.activityType,
        'activitiesCount': value.activitiesCount,
        'groupRoomsWithCatering': value.groupRoomsWithCatering,
        'transientRoom': value.transientRoom,
        'activity': value.activity,
        'future': value.future,
    };
}

