/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockSalesAllowanceActivityLogType } from './BlockSalesAllowanceActivityLogType';
import {
    BlockSalesAllowanceActivityLogTypeFromJSON,
    BlockSalesAllowanceActivityLogTypeFromJSONTyped,
    BlockSalesAllowanceActivityLogTypeToJSON,
} from './BlockSalesAllowanceActivityLogType';

/**
 * 
 * @export
 * @interface BlockSalesAllowanceActivityLogListType
 */
export interface BlockSalesAllowanceActivityLogListType {
    /**
     * 
     * @type {Array<BlockSalesAllowanceActivityLogType>}
     * @memberof BlockSalesAllowanceActivityLogListType
     */
    activityLog?: Array<BlockSalesAllowanceActivityLogType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof BlockSalesAllowanceActivityLogListType
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof BlockSalesAllowanceActivityLogListType
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof BlockSalesAllowanceActivityLogListType
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof BlockSalesAllowanceActivityLogListType
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof BlockSalesAllowanceActivityLogListType
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof BlockSalesAllowanceActivityLogListType
     */
    count?: number;
}

/**
 * Check if a given object implements the BlockSalesAllowanceActivityLogListType interface.
 */
export function instanceOfBlockSalesAllowanceActivityLogListType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockSalesAllowanceActivityLogListTypeFromJSON(json: any): BlockSalesAllowanceActivityLogListType {
    return BlockSalesAllowanceActivityLogListTypeFromJSONTyped(json, false);
}

export function BlockSalesAllowanceActivityLogListTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockSalesAllowanceActivityLogListType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityLog': !exists(json, 'activityLog') ? undefined : ((json['activityLog'] as Array<any>).map(BlockSalesAllowanceActivityLogTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
    };
}

export function BlockSalesAllowanceActivityLogListTypeToJSON(value?: BlockSalesAllowanceActivityLogListType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityLog': value.activityLog === undefined ? undefined : ((value.activityLog as Array<any>).map(BlockSalesAllowanceActivityLogTypeToJSON)),
        'totalPages': value.totalPages,
        'offset': value.offset,
        'limit': value.limit,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
    };
}

