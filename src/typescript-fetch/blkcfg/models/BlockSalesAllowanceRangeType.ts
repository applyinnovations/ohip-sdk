/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Indicates the block sales allowance for a date range.
 * @export
 * @interface BlockSalesAllowanceRangeType
 */
export interface BlockSalesAllowanceRangeType {
    /**
     * Number of days before sales allowance date, after which unused quantity should set to 0.
     * @type {number}
     * @memberof BlockSalesAllowanceRangeType
     */
    cutoffDays?: number;
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof BlockSalesAllowanceRangeType
     */
    end?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    friday?: boolean;
    /**
     * Contains Hotel Code.
     * @type {string}
     * @memberof BlockSalesAllowanceRangeType
     */
    hotelId?: string;
    /**
     * Flag to indicate if the sales allowance update is absolute or relative to the current value.
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    incrementFlag?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    monday?: boolean;
    /**
     * Flag to indicate if the sales allowance already exists for criteria then overwrite the records.
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    overwriteExistingSalesAllowance?: boolean;
    /**
     * Contains quantity for sales allowance.
     * @type {number}
     * @memberof BlockSalesAllowanceRangeType
     */
    quantity?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    saturday?: boolean;
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof BlockSalesAllowanceRangeType
     */
    start?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    sunday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    thursday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    tuesday?: boolean;
    /**
     * Flag to validate existing sales allowance records within criteria.
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    validateExistingSalesAllowance?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockSalesAllowanceRangeType
     */
    wednesday?: boolean;
}

/**
 * Check if a given object implements the BlockSalesAllowanceRangeType interface.
 */
export function instanceOfBlockSalesAllowanceRangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockSalesAllowanceRangeTypeFromJSON(json: any): BlockSalesAllowanceRangeType {
    return BlockSalesAllowanceRangeTypeFromJSONTyped(json, false);
}

export function BlockSalesAllowanceRangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockSalesAllowanceRangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cutoffDays': !exists(json, 'cutoffDays') ? undefined : json['cutoffDays'],
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
        'friday': !exists(json, 'friday') ? undefined : json['friday'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'incrementFlag': !exists(json, 'incrementFlag') ? undefined : json['incrementFlag'],
        'monday': !exists(json, 'monday') ? undefined : json['monday'],
        'overwriteExistingSalesAllowance': !exists(json, 'overwriteExistingSalesAllowance') ? undefined : json['overwriteExistingSalesAllowance'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'saturday': !exists(json, 'saturday') ? undefined : json['saturday'],
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
        'sunday': !exists(json, 'sunday') ? undefined : json['sunday'],
        'thursday': !exists(json, 'thursday') ? undefined : json['thursday'],
        'tuesday': !exists(json, 'tuesday') ? undefined : json['tuesday'],
        'validateExistingSalesAllowance': !exists(json, 'validateExistingSalesAllowance') ? undefined : json['validateExistingSalesAllowance'],
        'wednesday': !exists(json, 'wednesday') ? undefined : json['wednesday'],
    };
}

export function BlockSalesAllowanceRangeTypeToJSON(value?: BlockSalesAllowanceRangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cutoffDays': value.cutoffDays,
        'end': value.end === undefined ? undefined : (value.end.toISOString().substring(0,10)),
        'friday': value.friday,
        'hotelId': value.hotelId,
        'incrementFlag': value.incrementFlag,
        'monday': value.monday,
        'overwriteExistingSalesAllowance': value.overwriteExistingSalesAllowance,
        'quantity': value.quantity,
        'saturday': value.saturday,
        'start': value.start === undefined ? undefined : (value.start.toISOString().substring(0,10)),
        'sunday': value.sunday,
        'thursday': value.thursday,
        'tuesday': value.tuesday,
        'validateExistingSalesAllowance': value.validateExistingSalesAllowance,
        'wednesday': value.wednesday,
    };
}

