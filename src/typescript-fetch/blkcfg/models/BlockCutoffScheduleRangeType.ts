/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Object to create block cutoff schedule details by providing date range, room type, days of week and cutoff days.
 * @export
 * @interface BlockCutoffScheduleRangeType
 */
export interface BlockCutoffScheduleRangeType {
    /**
     * Contains Hotel Code.
     * @type {string}
     * @memberof BlockCutoffScheduleRangeType
     */
    hotelId?: string;
    /**
     * Contains Cutoff Schedule Code Id.
     * @type {number}
     * @memberof BlockCutoffScheduleRangeType
     */
    cutoffCodeId?: number;
    /**
     * Contains Room Types.
     * @type {Array<string>}
     * @memberof BlockCutoffScheduleRangeType
     */
    roomTypes?: Array<string>;
    /**
     * Number of cutoff Days.
     * @type {number}
     * @memberof BlockCutoffScheduleRangeType
     */
    cutoffDays?: number;
    /**
     * Flag to indicate if the cutoff schedule already exists for criteria then overwrite the records.
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    overwriteExistingcutoffschedule?: boolean;
    /**
     * The starting value of the date range.
     * @type {string}
     * @memberof BlockCutoffScheduleRangeType
     */
    stayDateFrom?: string;
    /**
     * The ending value of the date range.
     * @type {string}
     * @memberof BlockCutoffScheduleRangeType
     */
    stayDateTo?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    sunday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    monday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    tuesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    wednesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    thursday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    friday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BlockCutoffScheduleRangeType
     */
    saturday?: boolean;
}

/**
 * Check if a given object implements the BlockCutoffScheduleRangeType interface.
 */
export function instanceOfBlockCutoffScheduleRangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockCutoffScheduleRangeTypeFromJSON(json: any): BlockCutoffScheduleRangeType {
    return BlockCutoffScheduleRangeTypeFromJSONTyped(json, false);
}

export function BlockCutoffScheduleRangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockCutoffScheduleRangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'cutoffCodeId': !exists(json, 'cutoffCodeId') ? undefined : json['cutoffCodeId'],
        'roomTypes': !exists(json, 'roomTypes') ? undefined : json['roomTypes'],
        'cutoffDays': !exists(json, 'cutoffDays') ? undefined : json['cutoffDays'],
        'overwriteExistingcutoffschedule': !exists(json, 'overwriteExistingcutoffschedule') ? undefined : json['overwriteExistingcutoffschedule'],
        'stayDateFrom': !exists(json, 'stayDateFrom') ? undefined : json['stayDateFrom'],
        'stayDateTo': !exists(json, 'stayDateTo') ? undefined : json['stayDateTo'],
        'sunday': !exists(json, 'sunday') ? undefined : json['sunday'],
        'monday': !exists(json, 'monday') ? undefined : json['monday'],
        'tuesday': !exists(json, 'tuesday') ? undefined : json['tuesday'],
        'wednesday': !exists(json, 'wednesday') ? undefined : json['wednesday'],
        'thursday': !exists(json, 'thursday') ? undefined : json['thursday'],
        'friday': !exists(json, 'friday') ? undefined : json['friday'],
        'saturday': !exists(json, 'saturday') ? undefined : json['saturday'],
    };
}

export function BlockCutoffScheduleRangeTypeToJSON(value?: BlockCutoffScheduleRangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'cutoffCodeId': value.cutoffCodeId,
        'roomTypes': value.roomTypes,
        'cutoffDays': value.cutoffDays,
        'overwriteExistingcutoffschedule': value.overwriteExistingcutoffschedule,
        'stayDateFrom': value.stayDateFrom,
        'stayDateTo': value.stayDateTo,
        'sunday': value.sunday,
        'monday': value.monday,
        'tuesday': value.tuesday,
        'wednesday': value.wednesday,
        'thursday': value.thursday,
        'friday': value.friday,
        'saturday': value.saturday,
    };
}

