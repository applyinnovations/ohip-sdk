/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CutoffCodeType } from './CutoffCodeType';
import {
    CutoffCodeTypeFromJSON,
    CutoffCodeTypeFromJSONTyped,
    CutoffCodeTypeToJSON,
} from './CutoffCodeType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Object which will contain all the information of 'CutoffCodes'. 
 * @export
 * @interface CutoffScheduleDetails
 */
export interface CutoffScheduleDetails {
    /**
     * Cutoff Code, which will allow the user to define standard cutoff schedules. Cutoff schedule codes can be applied to blocks, to default number of cutoff days per stay date and room type. A default number number of cutoff days can be set on cutoff scheduler header level, and will be applied when no specific number of days has been defined for a date / room type combination within the cutoff schedule dates.
     * @type {Array<CutoffCodeType>}
     * @memberof CutoffScheduleDetails
     */
    cutoffCodes?: Array<CutoffCodeType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof CutoffScheduleDetails
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof CutoffScheduleDetails
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof CutoffScheduleDetails
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof CutoffScheduleDetails
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof CutoffScheduleDetails
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof CutoffScheduleDetails
     */
    count?: number;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof CutoffScheduleDetails
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof CutoffScheduleDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the CutoffScheduleDetails interface.
 */
export function instanceOfCutoffScheduleDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CutoffScheduleDetailsFromJSON(json: any): CutoffScheduleDetails {
    return CutoffScheduleDetailsFromJSONTyped(json, false);
}

export function CutoffScheduleDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CutoffScheduleDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cutoffCodes': !exists(json, 'cutoffCodes') ? undefined : ((json['cutoffCodes'] as Array<any>).map(CutoffCodeTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CutoffScheduleDetailsToJSON(value?: CutoffScheduleDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cutoffCodes': value.cutoffCodes === undefined ? undefined : ((value.cutoffCodes as Array<any>).map(CutoffCodeTypeToJSON)),
        'totalPages': value.totalPages,
        'offset': value.offset,
        'limit': value.limit,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

