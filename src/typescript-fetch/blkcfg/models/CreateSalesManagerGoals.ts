/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SalesManagerGoalType } from './SalesManagerGoalType';
import {
    SalesManagerGoalTypeFromJSON,
    SalesManagerGoalTypeFromJSONTyped,
    SalesManagerGoalTypeToJSON,
} from './SalesManagerGoalType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for Creating Sales Manager Goal(s).
 * @export
 * @interface CreateSalesManagerGoals
 */
export interface CreateSalesManagerGoals {
    /**
     * Detail Information about Sales Manager's goal.
     * @type {Array<SalesManagerGoalType>}
     * @memberof CreateSalesManagerGoals
     */
    salesManagerGoals?: Array<SalesManagerGoalType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof CreateSalesManagerGoals
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the CreateSalesManagerGoals interface.
 */
export function instanceOfCreateSalesManagerGoals(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreateSalesManagerGoalsFromJSON(json: any): CreateSalesManagerGoals {
    return CreateSalesManagerGoalsFromJSONTyped(json, false);
}

export function CreateSalesManagerGoalsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSalesManagerGoals {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'salesManagerGoals': !exists(json, 'salesManagerGoals') ? undefined : ((json['salesManagerGoals'] as Array<any>).map(SalesManagerGoalTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function CreateSalesManagerGoalsToJSON(value?: CreateSalesManagerGoals | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'salesManagerGoals': value.salesManagerGoals === undefined ? undefined : ((value.salesManagerGoals as Array<any>).map(SalesManagerGoalTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

