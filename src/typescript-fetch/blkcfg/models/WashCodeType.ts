/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WashCodeDetailType } from './WashCodeDetailType';
import {
    WashCodeDetailTypeFromJSON,
    WashCodeDetailTypeFromJSONTyped,
    WashCodeDetailTypeToJSON,
} from './WashCodeDetailType';

/**
 * A representation of the information contained by a Wash Code.
 * @export
 * @interface WashCodeType
 */
export interface WashCodeType {
    /**
     * Description of the Wash Code.
     * @type {string}
     * @memberof WashCodeType
     */
    description?: string;
    /**
     * Wash Code Detail for a single entry.
     * @type {Array<WashCodeDetailType>}
     * @memberof WashCodeType
     */
    washCodeDetails?: Array<WashCodeDetailType>;
    /**
     * Hotel Code to which the Wash Code belongs to.
     * @type {string}
     * @memberof WashCodeType
     */
    hotelId?: string;
    /**
     * Wash Code.
     * @type {string}
     * @memberof WashCodeType
     */
    code?: string;
}

/**
 * Check if a given object implements the WashCodeType interface.
 */
export function instanceOfWashCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WashCodeTypeFromJSON(json: any): WashCodeType {
    return WashCodeTypeFromJSONTyped(json, false);
}

export function WashCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WashCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'washCodeDetails': !exists(json, 'washCodeDetails') ? undefined : ((json['washCodeDetails'] as Array<any>).map(WashCodeDetailTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
    };
}

export function WashCodeTypeToJSON(value?: WashCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'washCodeDetails': value.washCodeDetails === undefined ? undefined : ((value.washCodeDetails as Array<any>).map(WashCodeDetailTypeToJSON)),
        'hotelId': value.hotelId,
        'code': value.code,
    };
}

