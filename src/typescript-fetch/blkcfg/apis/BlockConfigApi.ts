/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockSalesAllowance,
  BlockSalesAllowanceRange,
  BlockStatusCodeDetails,
  CreateSalesManagerGoals,
  ExceptionDetailType,
  NextBlockStatusCode,
  NextBlockStatusCodeDetails,
  SalesManagerGoalsInfo,
  SalesManagersInfo,
  Status,
  StatusCodeDetails,
  WashScheduleCriteria,
  WashScheduleDetails,
} from '../models/index';
import {
    BlockSalesAllowanceFromJSON,
    BlockSalesAllowanceToJSON,
    BlockSalesAllowanceRangeFromJSON,
    BlockSalesAllowanceRangeToJSON,
    BlockStatusCodeDetailsFromJSON,
    BlockStatusCodeDetailsToJSON,
    CreateSalesManagerGoalsFromJSON,
    CreateSalesManagerGoalsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    NextBlockStatusCodeFromJSON,
    NextBlockStatusCodeToJSON,
    NextBlockStatusCodeDetailsFromJSON,
    NextBlockStatusCodeDetailsToJSON,
    SalesManagerGoalsInfoFromJSON,
    SalesManagerGoalsInfoToJSON,
    SalesManagersInfoFromJSON,
    SalesManagersInfoToJSON,
    StatusFromJSON,
    StatusToJSON,
    StatusCodeDetailsFromJSON,
    StatusCodeDetailsToJSON,
    WashScheduleCriteriaFromJSON,
    WashScheduleCriteriaToJSON,
    WashScheduleDetailsFromJSON,
    WashScheduleDetailsToJSON,
} from '../models/index';

export interface DeleteBlockSalesAllowanceRangeRequest {
    hotelId?: string;
    endDate?: Date;
    startDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBlockStatusCodeRequest {
    blockStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteWashScheduleRequest {
    washScheduleCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockSalesAllowanceRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    endDateRange?: Date;
    startDateRange?: Date;
    includeRestricted?: boolean;
    roomTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockStatusCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNextBlockStatusCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    configuredOnly?: boolean;
    blockStatusCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSalesManagerGoalsRequest {
    salesManagerId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    future?: boolean;
    fetchInstructions?: Set<GetSalesManagerGoalsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSalesManagerGoalsMultipleHotelIdsRequest {
    salesManagerId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    future?: boolean;
    fetchInstructions?: Set<GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSalesManagersRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    ownerCodes?: Array<string>;
    firstName?: string;
    lastName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSalesManagersMultipleHotelIdsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    ownerCodes?: Array<string>;
    firstName?: string;
    lastName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetWashScheduleRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    washCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockStatusCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusCodeDetails?: BlockStatusCodeDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSalesManagerGoalsRequest {
    salesManagerId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createSalesManagerGoals?: CreateSalesManagerGoals;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostWashScheduleRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    washScheduleCriteria?: WashScheduleCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBlockStatusCodeRequest {
    blockStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockStatusCodeDetails?: BlockStatusCodeDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutNextBlockStatusCodesRequest {
    srcBlockStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    nextBlockStatusCode?: NextBlockStatusCode;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSalesManagerGoalsRequest {
    salesGoalId?: string;
    salesManagerId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    salesManagerGoalsInfo?: SalesManagerGoalsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutWashScheduleRequest {
    washScheduleCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    washScheduleCriteria?: WashScheduleCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveSalesManagerGoalRequest {
    salesGoalId?: string;
    salesManagerId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveSalesManagerGoalsRequest {
    salesManagerId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    salesGoalId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetBlockSalesAllowanceRangeRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockSalesAllowanceRange?: BlockSalesAllowanceRange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class BlockConfigApi extends runtime.BaseAPI {

    /**
     * You can use this API to delete block sales allowance range. <p><strong>OperationId:</strong>deleteBlockSalesAllowanceRange</p>
     * Delete block sales allowance range
     */
    async deleteBlockSalesAllowanceRangeRaw(requestParameters: DeleteBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteBlockSalesAllowanceRange.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling deleteBlockSalesAllowanceRange.');
        }

        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling deleteBlockSalesAllowanceRange.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteBlockSalesAllowanceRange.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteBlockSalesAllowanceRange.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteBlockSalesAllowanceRange.');
        }

        const queryParameters: any = {};

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blockSalesAllowanceRange`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete block sales allowance range. <p><strong>OperationId:</strong>deleteBlockSalesAllowanceRange</p>
     * Delete block sales allowance range
     */
    async deleteBlockSalesAllowanceRange(requestParameters: DeleteBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBlockSalesAllowanceRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete block status code. <p><strong>OperationId:</strong>deleteBlockStatusCode</p>
     * Delete block status code
     */
    async deleteBlockStatusCodeRaw(requestParameters: DeleteBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockStatusCode === null || requestParameters.blockStatusCode === undefined) {
            throw new runtime.RequiredError('blockStatusCode','Required parameter requestParameters.blockStatusCode was null or undefined when calling deleteBlockStatusCode.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteBlockStatusCode.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteBlockStatusCode.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteBlockStatusCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockStatusCodes/{blockStatusCode}`.replace(`{${"blockStatusCode"}}`, encodeURIComponent(String(requestParameters.blockStatusCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete block status code. <p><strong>OperationId:</strong>deleteBlockStatusCode</p>
     * Delete block status code
     */
    async deleteBlockStatusCode(requestParameters: DeleteBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBlockStatusCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a block wash schedule. <p><strong>OperationId:</strong>deleteWashSchedule</p>
     * Delete block wash schedule
     */
    async deleteWashScheduleRaw(requestParameters: DeleteWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.washScheduleCode === null || requestParameters.washScheduleCode === undefined) {
            throw new runtime.RequiredError('washScheduleCode','Required parameter requestParameters.washScheduleCode was null or undefined when calling deleteWashSchedule.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteWashSchedule.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteWashSchedule.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteWashSchedule.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteWashSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/washSchedules/{washScheduleCode}`.replace(`{${"washScheduleCode"}}`, encodeURIComponent(String(requestParameters.washScheduleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a block wash schedule. <p><strong>OperationId:</strong>deleteWashSchedule</p>
     * Delete block wash schedule
     */
    async deleteWashSchedule(requestParameters: DeleteWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteWashScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Block Sales Allowance. <p><strong>OperationId:</strong>getBlockSalesAllowance</p>
     * Get Block Sales Allowance
     */
    async getBlockSalesAllowanceRaw(requestParameters: GetBlockSalesAllowanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockSalesAllowance>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBlockSalesAllowance.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getBlockSalesAllowance.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getBlockSalesAllowance.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getBlockSalesAllowance.');
        }

        const queryParameters: any = {};

        if (requestParameters.endDateRange !== undefined) {
            queryParameters['endDateRange'] = (requestParameters.endDateRange as any).toISOString().substring(0,10);
        }

        if (requestParameters.startDateRange !== undefined) {
            queryParameters['startDateRange'] = (requestParameters.startDateRange as any).toISOString().substring(0,10);
        }

        if (requestParameters.includeRestricted !== undefined) {
            queryParameters['includeRestricted'] = requestParameters.includeRestricted;
        }

        if (requestParameters.roomTypesCodes) {
            queryParameters['roomTypesCodes'] = requestParameters.roomTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blockSalesAllowance`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockSalesAllowanceFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Block Sales Allowance. <p><strong>OperationId:</strong>getBlockSalesAllowance</p>
     * Get Block Sales Allowance
     */
    async getBlockSalesAllowance(requestParameters: GetBlockSalesAllowanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockSalesAllowance> {
        const response = await this.getBlockSalesAllowanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API fetches a list of configured status codes for the chain. It returns status code, description, and status type such as non-deduct, deduct, cancel, waitlist, inquiry, and actual. Status attributes, such as starting status, function diary visibility, allows pickup, and log catering changes are also returned in the response. Please note, that status codes are configured in a strict sequence that must be followed. In order to find available next statuses for the current block status, please use operation getNextBlockStatusCodes. <p><strong>OperationId:</strong>getBlockStatusCodes</p>
     * Get block status codes
     */
    async getBlockStatusCodesRaw(requestParameters: GetBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusCodeDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getBlockStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getBlockStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getBlockStatusCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.blockStatusCodes) {
            queryParameters['blockStatusCodes'] = requestParameters.blockStatusCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockStatusCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusCodeDetailsFromJSON(jsonValue));
    }

    /**
     * This API fetches a list of configured status codes for the chain. It returns status code, description, and status type such as non-deduct, deduct, cancel, waitlist, inquiry, and actual. Status attributes, such as starting status, function diary visibility, allows pickup, and log catering changes are also returned in the response. Please note, that status codes are configured in a strict sequence that must be followed. In order to find available next statuses for the current block status, please use operation getNextBlockStatusCodes. <p><strong>OperationId:</strong>getBlockStatusCodes</p>
     * Get block status codes
     */
    async getBlockStatusCodes(requestParameters: GetBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusCodeDetails> {
        const response = await this.getBlockStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the next block Status Codes for a property. <p><strong>OperationId:</strong>getNextBlockStatusCodes</p>
     * Get next block status codes
     */
    async getNextBlockStatusCodesRaw(requestParameters: GetNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NextBlockStatusCodeDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getNextBlockStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getNextBlockStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getNextBlockStatusCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.configuredOnly !== undefined) {
            queryParameters['configuredOnly'] = requestParameters.configuredOnly;
        }

        if (requestParameters.blockStatusCodes) {
            queryParameters['blockStatusCodes'] = requestParameters.blockStatusCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockStatusCodes/nextStatusCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NextBlockStatusCodeDetailsFromJSON(jsonValue));
    }

    /**
     * Retrieve the next block Status Codes for a property. <p><strong>OperationId:</strong>getNextBlockStatusCodes</p>
     * Get next block status codes
     */
    async getNextBlockStatusCodes(requestParameters: GetNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NextBlockStatusCodeDetails> {
        const response = await this.getNextBlockStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve individual Sales Manager Goals for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoals</p>
     * Get Sales Manager Goals by Hotel
     */
    async getSalesManagerGoalsRaw(requestParameters: GetSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagerGoalsInfo>> {
        if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
            throw new runtime.RequiredError('salesManagerId','Required parameter requestParameters.salesManagerId was null or undefined when calling getSalesManagerGoals.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getSalesManagerGoals.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSalesManagerGoals.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSalesManagerGoals.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSalesManagerGoals.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.future !== undefined) {
            queryParameters['future'] = requestParameters.future;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesManagerGoalsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve individual Sales Manager Goals for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoals</p>
     * Get Sales Manager Goals by Hotel
     */
    async getSalesManagerGoals(requestParameters: GetSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagerGoalsInfo> {
        const response = await this.getSalesManagerGoalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve individual Sales Manager Goals, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoalsMultipleHotelIds</p>
     * Get Sales Manager Goals
     */
    async getSalesManagerGoalsMultipleHotelIdsRaw(requestParameters: GetSalesManagerGoalsMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagerGoalsInfo>> {
        if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
            throw new runtime.RequiredError('salesManagerId','Required parameter requestParameters.salesManagerId was null or undefined when calling getSalesManagerGoalsMultipleHotelIds.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSalesManagerGoalsMultipleHotelIds.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSalesManagerGoalsMultipleHotelIds.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSalesManagerGoalsMultipleHotelIds.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.future !== undefined) {
            queryParameters['future'] = requestParameters.future;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesManagerGoalsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve individual Sales Manager Goals, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagerGoalsMultipleHotelIds</p>
     * Get Sales Manager Goals
     */
    async getSalesManagerGoalsMultipleHotelIds(requestParameters: GetSalesManagerGoalsMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagerGoalsInfo> {
        const response = await this.getSalesManagerGoalsMultipleHotelIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve multiple Sales Managers for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagers</p>
     * Get Sales Managers by Hotel.
     */
    async getSalesManagersRaw(requestParameters: GetSalesManagersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagersInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getSalesManagers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSalesManagers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSalesManagers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSalesManagers.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ownerCodes) {
            queryParameters['ownerCodes'] = requestParameters.ownerCodes;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/salesManagers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesManagersInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve multiple Sales Managers for a hotel, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagers</p>
     * Get Sales Managers by Hotel.
     */
    async getSalesManagers(requestParameters: GetSalesManagersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagersInfo> {
        const response = await this.getSalesManagersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve multiple Sales Managers, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagersMultipleHotelIds</p>
     * Get Sales Managers.
     */
    async getSalesManagersMultipleHotelIdsRaw(requestParameters: GetSalesManagersMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SalesManagersInfo>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getSalesManagersMultipleHotelIds.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSalesManagersMultipleHotelIds.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSalesManagersMultipleHotelIds.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSalesManagersMultipleHotelIds.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ownerCodes) {
            queryParameters['ownerCodes'] = requestParameters.ownerCodes;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/salesManagers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SalesManagersInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve multiple Sales Managers, you can narrow the results using different search criteria. <p><strong>OperationId:</strong>getSalesManagersMultipleHotelIds</p>
     * Get Sales Managers.
     */
    async getSalesManagersMultipleHotelIds(requestParameters: GetSalesManagersMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SalesManagersInfo> {
        const response = await this.getSalesManagersMultipleHotelIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get block wash schedules. <p><strong>OperationId:</strong>getWashSchedule</p>
     * Get block wash schedule
     */
    async getWashScheduleRaw(requestParameters: GetWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WashScheduleDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getWashSchedule.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getWashSchedule.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getWashSchedule.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.washCodes) {
            queryParameters['washCodes'] = requestParameters.washCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/washSchedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WashScheduleDetailsFromJSON(jsonValue));
    }

    /**
     * Get block wash schedules. <p><strong>OperationId:</strong>getWashSchedule</p>
     * Get block wash schedule
     */
    async getWashSchedule(requestParameters: GetWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WashScheduleDetails> {
        const response = await this.getWashScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new block status code. <p><strong>OperationId:</strong>postBlockStatusCode</p>
     * Create a block status code
     */
    async postBlockStatusCodeRaw(requestParameters: PostBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postBlockStatusCode.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postBlockStatusCode.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postBlockStatusCode.');
        }

        if (requestParameters.blockStatusCodeDetails === null || requestParameters.blockStatusCodeDetails === undefined) {
            throw new runtime.RequiredError('blockStatusCodeDetails','Required parameter requestParameters.blockStatusCodeDetails was null or undefined when calling postBlockStatusCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockStatusCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockStatusCodeDetailsToJSON(requestParameters.blockStatusCodeDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new block status code. <p><strong>OperationId:</strong>postBlockStatusCode</p>
     * Create a block status code
     */
    async postBlockStatusCode(requestParameters: PostBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockStatusCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Create Sales Manager Goals for a Sales Manager ID.You must know the OPERA Sales Manager ID for this API. <p><strong>OperationId:</strong>postSalesManagerGoals</p>
     * Create Sales Manager Goals
     */
    async postSalesManagerGoalsRaw(requestParameters: PostSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
            throw new runtime.RequiredError('salesManagerId','Required parameter requestParameters.salesManagerId was null or undefined when calling postSalesManagerGoals.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postSalesManagerGoals.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postSalesManagerGoals.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postSalesManagerGoals.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postSalesManagerGoals.');
        }

        if (requestParameters.createSalesManagerGoals === null || requestParameters.createSalesManagerGoals === undefined) {
            throw new runtime.RequiredError('createSalesManagerGoals','Required parameter requestParameters.createSalesManagerGoals was null or undefined when calling postSalesManagerGoals.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSalesManagerGoalsToJSON(requestParameters.createSalesManagerGoals),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to Create Sales Manager Goals for a Sales Manager ID.You must know the OPERA Sales Manager ID for this API. <p><strong>OperationId:</strong>postSalesManagerGoals</p>
     * Create Sales Manager Goals
     */
    async postSalesManagerGoals(requestParameters: PostSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSalesManagerGoalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a block wash schedule. <p><strong>OperationId:</strong>postWashSchedule</p>
     * Create block wash schedule
     */
    async postWashScheduleRaw(requestParameters: PostWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postWashSchedule.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postWashSchedule.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postWashSchedule.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postWashSchedule.');
        }

        if (requestParameters.washScheduleCriteria === null || requestParameters.washScheduleCriteria === undefined) {
            throw new runtime.RequiredError('washScheduleCriteria','Required parameter requestParameters.washScheduleCriteria was null or undefined when calling postWashSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/washSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WashScheduleCriteriaToJSON(requestParameters.washScheduleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a block wash schedule. <p><strong>OperationId:</strong>postWashSchedule</p>
     * Create block wash schedule
     */
    async postWashSchedule(requestParameters: PostWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postWashScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change block status code. <p><strong>OperationId:</strong>putBlockStatusCode</p>
     * Change block status code
     */
    async putBlockStatusCodeRaw(requestParameters: PutBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockStatusCode === null || requestParameters.blockStatusCode === undefined) {
            throw new runtime.RequiredError('blockStatusCode','Required parameter requestParameters.blockStatusCode was null or undefined when calling putBlockStatusCode.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putBlockStatusCode.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putBlockStatusCode.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putBlockStatusCode.');
        }

        if (requestParameters.blockStatusCodeDetails === null || requestParameters.blockStatusCodeDetails === undefined) {
            throw new runtime.RequiredError('blockStatusCodeDetails','Required parameter requestParameters.blockStatusCodeDetails was null or undefined when calling putBlockStatusCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockStatusCodes/{blockStatusCode}`.replace(`{${"blockStatusCode"}}`, encodeURIComponent(String(requestParameters.blockStatusCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockStatusCodeDetailsToJSON(requestParameters.blockStatusCodeDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change block status code. <p><strong>OperationId:</strong>putBlockStatusCode</p>
     * Change block status code
     */
    async putBlockStatusCode(requestParameters: PutBlockStatusCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBlockStatusCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the next Block status. <p><strong>OperationId:</strong>putNextBlockStatusCodes</p>
     * Change next block status codes
     */
    async putNextBlockStatusCodesRaw(requestParameters: PutNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.srcBlockStatusCode === null || requestParameters.srcBlockStatusCode === undefined) {
            throw new runtime.RequiredError('srcBlockStatusCode','Required parameter requestParameters.srcBlockStatusCode was null or undefined when calling putNextBlockStatusCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putNextBlockStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putNextBlockStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putNextBlockStatusCodes.');
        }

        if (requestParameters.nextBlockStatusCode === null || requestParameters.nextBlockStatusCode === undefined) {
            throw new runtime.RequiredError('nextBlockStatusCode','Required parameter requestParameters.nextBlockStatusCode was null or undefined when calling putNextBlockStatusCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockStatusCodes/{srcBlockStatusCode}/nextStatusCodes`.replace(`{${"srcBlockStatusCode"}}`, encodeURIComponent(String(requestParameters.srcBlockStatusCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NextBlockStatusCodeToJSON(requestParameters.nextBlockStatusCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update the next Block status. <p><strong>OperationId:</strong>putNextBlockStatusCodes</p>
     * Change next block status codes
     */
    async putNextBlockStatusCodes(requestParameters: PutNextBlockStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putNextBlockStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Sales Manager Goal.You must know the OPERA Sales Manager ID and Goal ID for this API. <p><strong>OperationId:</strong>putSalesManagerGoals</p>
     * Update Sales Manager Goal in a hotel by ID
     */
    async putSalesManagerGoalsRaw(requestParameters: PutSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.salesGoalId === null || requestParameters.salesGoalId === undefined) {
            throw new runtime.RequiredError('salesGoalId','Required parameter requestParameters.salesGoalId was null or undefined when calling putSalesManagerGoals.');
        }

        if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
            throw new runtime.RequiredError('salesManagerId','Required parameter requestParameters.salesManagerId was null or undefined when calling putSalesManagerGoals.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putSalesManagerGoals.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putSalesManagerGoals.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putSalesManagerGoals.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putSalesManagerGoals.');
        }

        if (requestParameters.salesManagerGoalsInfo === null || requestParameters.salesManagerGoalsInfo === undefined) {
            throw new runtime.RequiredError('salesManagerGoalsInfo','Required parameter requestParameters.salesManagerGoalsInfo was null or undefined when calling putSalesManagerGoals.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/salesManagers/{salesManagerId}/salesManagerGoals/{salesGoalId}`.replace(`{${"salesGoalId"}}`, encodeURIComponent(String(requestParameters.salesGoalId))).replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SalesManagerGoalsInfoToJSON(requestParameters.salesManagerGoalsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Sales Manager Goal.You must know the OPERA Sales Manager ID and Goal ID for this API. <p><strong>OperationId:</strong>putSalesManagerGoals</p>
     * Update Sales Manager Goal in a hotel by ID
     */
    async putSalesManagerGoals(requestParameters: PutSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putSalesManagerGoalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change a block wash schedule. <p><strong>OperationId:</strong>putWashSchedule</p>
     * Change block wash schedule
     */
    async putWashScheduleRaw(requestParameters: PutWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.washScheduleCode === null || requestParameters.washScheduleCode === undefined) {
            throw new runtime.RequiredError('washScheduleCode','Required parameter requestParameters.washScheduleCode was null or undefined when calling putWashSchedule.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putWashSchedule.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putWashSchedule.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putWashSchedule.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putWashSchedule.');
        }

        if (requestParameters.washScheduleCriteria === null || requestParameters.washScheduleCriteria === undefined) {
            throw new runtime.RequiredError('washScheduleCriteria','Required parameter requestParameters.washScheduleCriteria was null or undefined when calling putWashSchedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/washSchedules/{washScheduleCode}`.replace(`{${"washScheduleCode"}}`, encodeURIComponent(String(requestParameters.washScheduleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WashScheduleCriteriaToJSON(requestParameters.washScheduleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change a block wash schedule. <p><strong>OperationId:</strong>putWashSchedule</p>
     * Change block wash schedule
     */
    async putWashSchedule(requestParameters: PutWashScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putWashScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Sales Manager Goal. <p><strong>OperationId:</strong>removeSalesManagerGoal</p>
     * Delete Sale Manager Goal
     */
    async removeSalesManagerGoalRaw(requestParameters: RemoveSalesManagerGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.salesGoalId === null || requestParameters.salesGoalId === undefined) {
            throw new runtime.RequiredError('salesGoalId','Required parameter requestParameters.salesGoalId was null or undefined when calling removeSalesManagerGoal.');
        }

        if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
            throw new runtime.RequiredError('salesManagerId','Required parameter requestParameters.salesManagerId was null or undefined when calling removeSalesManagerGoal.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeSalesManagerGoal.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeSalesManagerGoal.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeSalesManagerGoal.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/salesManagers/{salesManagerId}/salesManagerGoals/{salesGoalId}`.replace(`{${"salesGoalId"}}`, encodeURIComponent(String(requestParameters.salesGoalId))).replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Sales Manager Goal. <p><strong>OperationId:</strong>removeSalesManagerGoal</p>
     * Delete Sale Manager Goal
     */
    async removeSalesManagerGoal(requestParameters: RemoveSalesManagerGoalRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeSalesManagerGoalRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Sales Manager Goals. <p><strong>OperationId:</strong>removeSalesManagerGoals</p>
     * Delete Sale Manager Goals
     */
    async removeSalesManagerGoalsRaw(requestParameters: RemoveSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.salesManagerId === null || requestParameters.salesManagerId === undefined) {
            throw new runtime.RequiredError('salesManagerId','Required parameter requestParameters.salesManagerId was null or undefined when calling removeSalesManagerGoals.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeSalesManagerGoals.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeSalesManagerGoals.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeSalesManagerGoals.');
        }

        const queryParameters: any = {};

        if (requestParameters.salesGoalId) {
            queryParameters['salesGoalId'] = requestParameters.salesGoalId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/salesManagers/{salesManagerId}/salesManagerGoals`.replace(`{${"salesManagerId"}}`, encodeURIComponent(String(requestParameters.salesManagerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Sales Manager Goals. <p><strong>OperationId:</strong>removeSalesManagerGoals</p>
     * Delete Sale Manager Goals
     */
    async removeSalesManagerGoals(requestParameters: RemoveSalesManagerGoalsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeSalesManagerGoalsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to set block sales allowance range. <p><strong>OperationId:</strong>setBlockSalesAllowanceRange</p>
     * Set block sales allowance range
     */
    async setBlockSalesAllowanceRangeRaw(requestParameters: SetBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling setBlockSalesAllowanceRange.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling setBlockSalesAllowanceRange.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling setBlockSalesAllowanceRange.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling setBlockSalesAllowanceRange.');
        }

        if (requestParameters.blockSalesAllowanceRange === null || requestParameters.blockSalesAllowanceRange === undefined) {
            throw new runtime.RequiredError('blockSalesAllowanceRange','Required parameter requestParameters.blockSalesAllowanceRange was null or undefined when calling setBlockSalesAllowanceRange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blockSalesAllowanceRange`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockSalesAllowanceRangeToJSON(requestParameters.blockSalesAllowanceRange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to set block sales allowance range. <p><strong>OperationId:</strong>setBlockSalesAllowanceRange</p>
     * Set block sales allowance range
     */
    async setBlockSalesAllowanceRange(requestParameters: SetBlockSalesAllowanceRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setBlockSalesAllowanceRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetSalesManagerGoalsFetchInstructionsEnum = {
    GroupRoomsWithCatering: 'GroupRoomsWithCatering',
    TransientRoom: 'TransientRoom',
    Activity: 'Activity'
} as const;
export type GetSalesManagerGoalsFetchInstructionsEnum = typeof GetSalesManagerGoalsFetchInstructionsEnum[keyof typeof GetSalesManagerGoalsFetchInstructionsEnum];
/**
 * @export
 */
export const GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum = {
    GroupRoomsWithCatering: 'GroupRoomsWithCatering',
    TransientRoom: 'TransientRoom',
    Activity: 'Activity'
} as const;
export type GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum = typeof GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum[keyof typeof GetSalesManagerGoalsMultipleHotelIdsFetchInstructionsEnum];
