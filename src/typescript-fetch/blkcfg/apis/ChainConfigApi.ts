/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Configuration API
 * APIs for Block configuration, such as creating, updating, fetching and removing codes related to blocks. <br />< This might include fetching the block cancellation reasons, or creating new block refused reasons.  Wash schedules can be create, or new reservation methods could be added for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockCancellationReasonsCriteria,
  BlockCancellationReasonsDetails,
  BlockCancellationReasonsToBeChanged,
  BlockLostBookingCodesCriteria,
  BlockLostBookingCodesDetails,
  BlockLostBookingCodesToBeChanged,
  BlockRateOverrideReasonsCriteria,
  BlockRateOverrideReasonsDetails,
  BlockRateOverrideReasonsToBeChanged,
  BlockRefusedReasonsCriteria,
  BlockRefusedReasonsDetails,
  BlockRefusedReasonsToBeChanged,
  DestinationCodesCriteria,
  DestinationCodesDetails,
  DestinationCodesToBeChanged,
  ExceptionDetailType,
  ReservationMethodsCriteria,
  ReservationMethodsDetails,
  ReservationMethodsToBeChanged,
  Status,
} from '../models/index';
import {
    BlockCancellationReasonsCriteriaFromJSON,
    BlockCancellationReasonsCriteriaToJSON,
    BlockCancellationReasonsDetailsFromJSON,
    BlockCancellationReasonsDetailsToJSON,
    BlockCancellationReasonsToBeChangedFromJSON,
    BlockCancellationReasonsToBeChangedToJSON,
    BlockLostBookingCodesCriteriaFromJSON,
    BlockLostBookingCodesCriteriaToJSON,
    BlockLostBookingCodesDetailsFromJSON,
    BlockLostBookingCodesDetailsToJSON,
    BlockLostBookingCodesToBeChangedFromJSON,
    BlockLostBookingCodesToBeChangedToJSON,
    BlockRateOverrideReasonsCriteriaFromJSON,
    BlockRateOverrideReasonsCriteriaToJSON,
    BlockRateOverrideReasonsDetailsFromJSON,
    BlockRateOverrideReasonsDetailsToJSON,
    BlockRateOverrideReasonsToBeChangedFromJSON,
    BlockRateOverrideReasonsToBeChangedToJSON,
    BlockRefusedReasonsCriteriaFromJSON,
    BlockRefusedReasonsCriteriaToJSON,
    BlockRefusedReasonsDetailsFromJSON,
    BlockRefusedReasonsDetailsToJSON,
    BlockRefusedReasonsToBeChangedFromJSON,
    BlockRefusedReasonsToBeChangedToJSON,
    DestinationCodesCriteriaFromJSON,
    DestinationCodesCriteriaToJSON,
    DestinationCodesDetailsFromJSON,
    DestinationCodesDetailsToJSON,
    DestinationCodesToBeChangedFromJSON,
    DestinationCodesToBeChangedToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ReservationMethodsCriteriaFromJSON,
    ReservationMethodsCriteriaToJSON,
    ReservationMethodsDetailsFromJSON,
    ReservationMethodsDetailsToJSON,
    ReservationMethodsToBeChangedFromJSON,
    ReservationMethodsToBeChangedToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DeleteBlockCancellationReasonsRequest {
    blockCancellationReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockCancellationReasonsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBlockLostBookingCodesRequest {
    blockLostBookingCodesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockLostBookingCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBlockRateOverrideReasonsRequest {
    blockRateOverrideReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockRateOverrideReasonsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBlockRefusedReasonsRequest {
    blockRefusedReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockRefusedReasonsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDestinationCodesRequest {
    destinationCodesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    destinationCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationMethodsRequest {
    reservationMethodsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationMethodsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockCancellationReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockLostBookingCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockRateOverrideReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockRefusedReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDestinationCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockCancellationReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockCancellationReasonsCriteria: BlockCancellationReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockLostBookingCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockLostBookingCodesCriteria: BlockLostBookingCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockRateOverrideReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockRateOverrideReasonsCriteria: BlockRateOverrideReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockRefusedReasonspostBloRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockRefusedReasonsCriteria: BlockRefusedReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDestinationCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    destinationCodesCriteria: DestinationCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationMethodsCriteria: ReservationMethodsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBlockCancellationReasonsRequest {
    blockCancellationReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockCancellationReasonsToBeChanged: BlockCancellationReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBlockLostBookingCodesRequest {
    blockLostBookingCodesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockLostBookingCodesToBeChanged: BlockLostBookingCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBlockRateOverrideReasonsRequest {
    blockRateOverrideReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockRateOverrideReasonsToBeChanged: BlockRateOverrideReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBlockRefusedReasonsRequest {
    blockRefusedReasonsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockRefusedReasonsToBeChanged: BlockRefusedReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDestinationCodesRequest {
    destinationCodesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    destinationCodesToBeChanged: DestinationCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationMethodsRequest {
    reservationMethodsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationMethodsToBeChanged: ReservationMethodsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to delete Block Cancellation Reason. <p><strong>OperationId:</strong>deleteBlockCancellationReasons</p>
     * Delete Block Cancellation Reason
     */
    async deleteBlockCancellationReasonsRaw(requestParameters: DeleteBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockCancellationReasonsId === null || requestParameters.blockCancellationReasonsId === undefined) {
            throw new runtime.RequiredError('blockCancellationReasonsId','Required parameter requestParameters.blockCancellationReasonsId was null or undefined when calling deleteBlockCancellationReasons.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.blockCancellationReasonsCodes) {
            queryParameters['blockCancellationReasonsCodes'] = requestParameters.blockCancellationReasonsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockCancellationReasons/{blockCancellationReasonsId}`.replace(`{${"blockCancellationReasonsId"}}`, encodeURIComponent(String(requestParameters.blockCancellationReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Block Cancellation Reason. <p><strong>OperationId:</strong>deleteBlockCancellationReasons</p>
     * Delete Block Cancellation Reason
     */
    async deleteBlockCancellationReasons(requestParameters: DeleteBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBlockCancellationReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Block Lost Booking Code. <p><strong>OperationId:</strong>deleteBlockLostBookingCodes</p>
     * Delete Block Lost Booking Code
     */
    async deleteBlockLostBookingCodesRaw(requestParameters: DeleteBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockLostBookingCodesId === null || requestParameters.blockLostBookingCodesId === undefined) {
            throw new runtime.RequiredError('blockLostBookingCodesId','Required parameter requestParameters.blockLostBookingCodesId was null or undefined when calling deleteBlockLostBookingCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.blockLostBookingCodes) {
            queryParameters['blockLostBookingCodes'] = requestParameters.blockLostBookingCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockLostBookingCodes/{blockLostBookingCodesId}`.replace(`{${"blockLostBookingCodesId"}}`, encodeURIComponent(String(requestParameters.blockLostBookingCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Block Lost Booking Code. <p><strong>OperationId:</strong>deleteBlockLostBookingCodes</p>
     * Delete Block Lost Booking Code
     */
    async deleteBlockLostBookingCodes(requestParameters: DeleteBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBlockLostBookingCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Block Rate Override Reason. <p><strong>OperationId:</strong>deleteBlockRateOverrideReasons</p>
     * Delete Block Rate Override Reason
     */
    async deleteBlockRateOverrideReasonsRaw(requestParameters: DeleteBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRateOverrideReasonsId === null || requestParameters.blockRateOverrideReasonsId === undefined) {
            throw new runtime.RequiredError('blockRateOverrideReasonsId','Required parameter requestParameters.blockRateOverrideReasonsId was null or undefined when calling deleteBlockRateOverrideReasons.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.blockRateOverrideReasonsCodes) {
            queryParameters['blockRateOverrideReasonsCodes'] = requestParameters.blockRateOverrideReasonsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRateOverrideReasons/{blockRateOverrideReasonsId}`.replace(`{${"blockRateOverrideReasonsId"}}`, encodeURIComponent(String(requestParameters.blockRateOverrideReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Block Rate Override Reason. <p><strong>OperationId:</strong>deleteBlockRateOverrideReasons</p>
     * Delete Block Rate Override Reason
     */
    async deleteBlockRateOverrideReasons(requestParameters: DeleteBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBlockRateOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Block Refused Reason. <p><strong>OperationId:</strong>deleteBlockRefusedReasons</p>
     * Delete Block Refused Reason
     */
    async deleteBlockRefusedReasonsRaw(requestParameters: DeleteBlockRefusedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRefusedReasonsId === null || requestParameters.blockRefusedReasonsId === undefined) {
            throw new runtime.RequiredError('blockRefusedReasonsId','Required parameter requestParameters.blockRefusedReasonsId was null or undefined when calling deleteBlockRefusedReasons.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.blockRefusedReasonsCodes) {
            queryParameters['blockRefusedReasonsCodes'] = requestParameters.blockRefusedReasonsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRefusedReasons/{blockRefusedReasonsId}`.replace(`{${"blockRefusedReasonsId"}}`, encodeURIComponent(String(requestParameters.blockRefusedReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Block Refused Reason. <p><strong>OperationId:</strong>deleteBlockRefusedReasons</p>
     * Delete Block Refused Reason
     */
    async deleteBlockRefusedReasons(requestParameters: DeleteBlockRefusedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBlockRefusedReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Destination Codes. <p><strong>OperationId:</strong>deleteDestinationCodes</p>
     * Delete Destination Codes
     */
    async deleteDestinationCodesRaw(requestParameters: DeleteDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.destinationCodesId === null || requestParameters.destinationCodesId === undefined) {
            throw new runtime.RequiredError('destinationCodesId','Required parameter requestParameters.destinationCodesId was null or undefined when calling deleteDestinationCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.destinationCodes) {
            queryParameters['destinationCodes'] = requestParameters.destinationCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/destinationCodes/{destinationCodesId}`.replace(`{${"destinationCodesId"}}`, encodeURIComponent(String(requestParameters.destinationCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Destination Codes. <p><strong>OperationId:</strong>deleteDestinationCodes</p>
     * Delete Destination Codes
     */
    async deleteDestinationCodes(requestParameters: DeleteDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDestinationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Reservation Methods. <p><strong>OperationId:</strong>deleteReservationMethods</p>
     * Delete Reservation Methods
     */
    async deleteReservationMethodsRaw(requestParameters: DeleteReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationMethodsId === null || requestParameters.reservationMethodsId === undefined) {
            throw new runtime.RequiredError('reservationMethodsId','Required parameter requestParameters.reservationMethodsId was null or undefined when calling deleteReservationMethods.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.reservationMethodsCodes) {
            queryParameters['reservationMethodsCodes'] = requestParameters.reservationMethodsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservationMethods/{reservationMethodsId}`.replace(`{${"reservationMethodsId"}}`, encodeURIComponent(String(requestParameters.reservationMethodsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Reservation Methods. <p><strong>OperationId:</strong>deleteReservationMethods</p>
     * Delete Reservation Methods
     */
    async deleteReservationMethods(requestParameters: DeleteReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Block Cancellation Reasons. <p><strong>OperationId:</strong>getBlockCancellationReasons</p>
     * Get Block Cancellation Reasons
     */
    async getBlockCancellationReasonsRaw(requestParameters: GetBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockCancellationReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockCancellationReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockCancellationReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Block Cancellation Reasons. <p><strong>OperationId:</strong>getBlockCancellationReasons</p>
     * Get Block Cancellation Reasons
     */
    async getBlockCancellationReasons(requestParameters: GetBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockCancellationReasonsDetails> {
        const response = await this.getBlockCancellationReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Block Lost Booking Codes. <p><strong>OperationId:</strong>getBlockLostBookingCodes</p>
     * Get Block Lost Booking Codes
     */
    async getBlockLostBookingCodesRaw(requestParameters: GetBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockLostBookingCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockLostBookingCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockLostBookingCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Block Lost Booking Codes. <p><strong>OperationId:</strong>getBlockLostBookingCodes</p>
     * Get Block Lost Booking Codes
     */
    async getBlockLostBookingCodes(requestParameters: GetBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockLostBookingCodesDetails> {
        const response = await this.getBlockLostBookingCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Block Rate Override Reasons. <p><strong>OperationId:</strong>getBlockRateOverrideReasons</p>
     * Get Block Rate Override Reasons
     */
    async getBlockRateOverrideReasonsRaw(requestParameters: GetBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRateOverrideReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRateOverrideReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockRateOverrideReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Block Rate Override Reasons. <p><strong>OperationId:</strong>getBlockRateOverrideReasons</p>
     * Get Block Rate Override Reasons
     */
    async getBlockRateOverrideReasons(requestParameters: GetBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRateOverrideReasonsDetails> {
        const response = await this.getBlockRateOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Block Refused Reasons. <p><strong>OperationId:</strong>getBlockRefusedReasons</p>
     * Get Block Refused Reasons
     */
    async getBlockRefusedReasonsRaw(requestParameters: GetBlockRefusedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRefusedReasonsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRefusedReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockRefusedReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Block Refused Reasons. <p><strong>OperationId:</strong>getBlockRefusedReasons</p>
     * Get Block Refused Reasons
     */
    async getBlockRefusedReasons(requestParameters: GetBlockRefusedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRefusedReasonsDetails> {
        const response = await this.getBlockRefusedReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Destination Codes. <p><strong>OperationId:</strong>getDestinationCodes</p>
     * Get Destination Codes
     */
    async getDestinationCodesRaw(requestParameters: GetDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DestinationCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/destinationCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DestinationCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Destination Codes. <p><strong>OperationId:</strong>getDestinationCodes</p>
     * Get Destination Codes
     */
    async getDestinationCodes(requestParameters: GetDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DestinationCodesDetails> {
        const response = await this.getDestinationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Reservation Methods. <p><strong>OperationId:</strong>getReservationMethods</p>
     * Get Reservation Methods
     */
    async getReservationMethodsRaw(requestParameters: GetReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationMethodsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservationMethods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationMethodsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Reservation Methods. <p><strong>OperationId:</strong>getReservationMethods</p>
     * Get Reservation Methods
     */
    async getReservationMethods(requestParameters: GetReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationMethodsDetails> {
        const response = await this.getReservationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Block Cancellation Reasons. <p><strong>OperationId:</strong>postBlockCancellationReasons</p>
     * Create Block Cancellation Reasons
     */
    async postBlockCancellationReasonsRaw(requestParameters: PostBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockCancellationReasonsCriteria === null || requestParameters.blockCancellationReasonsCriteria === undefined) {
            throw new runtime.RequiredError('blockCancellationReasonsCriteria','Required parameter requestParameters.blockCancellationReasonsCriteria was null or undefined when calling postBlockCancellationReasons.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockCancellationReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockCancellationReasonsCriteriaToJSON(requestParameters.blockCancellationReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Block Cancellation Reasons. <p><strong>OperationId:</strong>postBlockCancellationReasons</p>
     * Create Block Cancellation Reasons
     */
    async postBlockCancellationReasons(requestParameters: PostBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockCancellationReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Block Lost Booking Codes. <p><strong>OperationId:</strong>postBlockLostBookingCodes</p>
     * Create Block Lost Booking Codes
     */
    async postBlockLostBookingCodesRaw(requestParameters: PostBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockLostBookingCodesCriteria === null || requestParameters.blockLostBookingCodesCriteria === undefined) {
            throw new runtime.RequiredError('blockLostBookingCodesCriteria','Required parameter requestParameters.blockLostBookingCodesCriteria was null or undefined when calling postBlockLostBookingCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockLostBookingCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockLostBookingCodesCriteriaToJSON(requestParameters.blockLostBookingCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Block Lost Booking Codes. <p><strong>OperationId:</strong>postBlockLostBookingCodes</p>
     * Create Block Lost Booking Codes
     */
    async postBlockLostBookingCodes(requestParameters: PostBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockLostBookingCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Block Rate Override Reasons. <p><strong>OperationId:</strong>postBlockRateOverrideReasons</p>
     * Create Block Rate Override Reasons
     */
    async postBlockRateOverrideReasonsRaw(requestParameters: PostBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRateOverrideReasonsCriteria === null || requestParameters.blockRateOverrideReasonsCriteria === undefined) {
            throw new runtime.RequiredError('blockRateOverrideReasonsCriteria','Required parameter requestParameters.blockRateOverrideReasonsCriteria was null or undefined when calling postBlockRateOverrideReasons.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRateOverrideReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockRateOverrideReasonsCriteriaToJSON(requestParameters.blockRateOverrideReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Block Rate Override Reasons. <p><strong>OperationId:</strong>postBlockRateOverrideReasons</p>
     * Create Block Rate Override Reasons
     */
    async postBlockRateOverrideReasons(requestParameters: PostBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockRateOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Block Refused Reasons. <p><strong>OperationId:</strong>postBlockRefusedReasonspostBlo</p>
     * Create Block Refused Reasons
     */
    async postBlockRefusedReasonspostBloRaw(requestParameters: PostBlockRefusedReasonspostBloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRefusedReasonsCriteria === null || requestParameters.blockRefusedReasonsCriteria === undefined) {
            throw new runtime.RequiredError('blockRefusedReasonsCriteria','Required parameter requestParameters.blockRefusedReasonsCriteria was null or undefined when calling postBlockRefusedReasonspostBlo.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRefusedReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockRefusedReasonsCriteriaToJSON(requestParameters.blockRefusedReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Block Refused Reasons. <p><strong>OperationId:</strong>postBlockRefusedReasonspostBlo</p>
     * Create Block Refused Reasons
     */
    async postBlockRefusedReasonspostBlo(requestParameters: PostBlockRefusedReasonspostBloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockRefusedReasonspostBloRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows creation on Destination Codes. Destination Codes are used in OPERA Cloud during the block cancellation process, and they usually represent either a competitor hotel / chain, or a geographic destination that a specific block has been lost to.  <p><strong>OperationId:</strong>postDestinationCodes</p>
     * Create Destination Codes
     */
    async postDestinationCodesRaw(requestParameters: PostDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.destinationCodesCriteria === null || requestParameters.destinationCodesCriteria === undefined) {
            throw new runtime.RequiredError('destinationCodesCriteria','Required parameter requestParameters.destinationCodesCriteria was null or undefined when calling postDestinationCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/destinationCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationCodesCriteriaToJSON(requestParameters.destinationCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows creation on Destination Codes. Destination Codes are used in OPERA Cloud during the block cancellation process, and they usually represent either a competitor hotel / chain, or a geographic destination that a specific block has been lost to.  <p><strong>OperationId:</strong>postDestinationCodes</p>
     * Create Destination Codes
     */
    async postDestinationCodes(requestParameters: PostDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDestinationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Reservation Methods. <p><strong>OperationId:</strong>postReservationMethods</p>
     * Create Reservation Methods
     */
    async postReservationMethodsRaw(requestParameters: PostReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationMethodsCriteria === null || requestParameters.reservationMethodsCriteria === undefined) {
            throw new runtime.RequiredError('reservationMethodsCriteria','Required parameter requestParameters.reservationMethodsCriteria was null or undefined when calling postReservationMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservationMethods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationMethodsCriteriaToJSON(requestParameters.reservationMethodsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Reservation Methods. <p><strong>OperationId:</strong>postReservationMethods</p>
     * Create Reservation Methods
     */
    async postReservationMethods(requestParameters: PostReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Block Cancellation Reason. <p><strong>OperationId:</strong>putBlockCancellationReasons</p>
     * Change Block Cancellation Reason
     */
    async putBlockCancellationReasonsRaw(requestParameters: PutBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockCancellationReasonsId === null || requestParameters.blockCancellationReasonsId === undefined) {
            throw new runtime.RequiredError('blockCancellationReasonsId','Required parameter requestParameters.blockCancellationReasonsId was null or undefined when calling putBlockCancellationReasons.');
        }
        
        if (requestParameters.blockCancellationReasonsToBeChanged === null || requestParameters.blockCancellationReasonsToBeChanged === undefined) {
            throw new runtime.RequiredError('blockCancellationReasonsToBeChanged','Required parameter requestParameters.blockCancellationReasonsToBeChanged was null or undefined when calling putBlockCancellationReasons.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockCancellationReasons/{blockCancellationReasonsId}`.replace(`{${"blockCancellationReasonsId"}}`, encodeURIComponent(String(requestParameters.blockCancellationReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockCancellationReasonsToBeChangedToJSON(requestParameters.blockCancellationReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Block Cancellation Reason. <p><strong>OperationId:</strong>putBlockCancellationReasons</p>
     * Change Block Cancellation Reason
     */
    async putBlockCancellationReasons(requestParameters: PutBlockCancellationReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBlockCancellationReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Block Lost Booking Code. <p><strong>OperationId:</strong>putBlockLostBookingCodes</p>
     * Change Block Lost Booking Code
     */
    async putBlockLostBookingCodesRaw(requestParameters: PutBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockLostBookingCodesId === null || requestParameters.blockLostBookingCodesId === undefined) {
            throw new runtime.RequiredError('blockLostBookingCodesId','Required parameter requestParameters.blockLostBookingCodesId was null or undefined when calling putBlockLostBookingCodes.');
        }
        
        if (requestParameters.blockLostBookingCodesToBeChanged === null || requestParameters.blockLostBookingCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('blockLostBookingCodesToBeChanged','Required parameter requestParameters.blockLostBookingCodesToBeChanged was null or undefined when calling putBlockLostBookingCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockLostBookingCodes/{blockLostBookingCodesId}`.replace(`{${"blockLostBookingCodesId"}}`, encodeURIComponent(String(requestParameters.blockLostBookingCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockLostBookingCodesToBeChangedToJSON(requestParameters.blockLostBookingCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Block Lost Booking Code. <p><strong>OperationId:</strong>putBlockLostBookingCodes</p>
     * Change Block Lost Booking Code
     */
    async putBlockLostBookingCodes(requestParameters: PutBlockLostBookingCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBlockLostBookingCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Block Rate Override Reason. <p><strong>OperationId:</strong>putBlockRateOverrideReasons</p>
     * Change Block Rate Override Reason
     */
    async putBlockRateOverrideReasonsRaw(requestParameters: PutBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRateOverrideReasonsId === null || requestParameters.blockRateOverrideReasonsId === undefined) {
            throw new runtime.RequiredError('blockRateOverrideReasonsId','Required parameter requestParameters.blockRateOverrideReasonsId was null or undefined when calling putBlockRateOverrideReasons.');
        }
        
        if (requestParameters.blockRateOverrideReasonsToBeChanged === null || requestParameters.blockRateOverrideReasonsToBeChanged === undefined) {
            throw new runtime.RequiredError('blockRateOverrideReasonsToBeChanged','Required parameter requestParameters.blockRateOverrideReasonsToBeChanged was null or undefined when calling putBlockRateOverrideReasons.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRateOverrideReasons/{blockRateOverrideReasonsId}`.replace(`{${"blockRateOverrideReasonsId"}}`, encodeURIComponent(String(requestParameters.blockRateOverrideReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockRateOverrideReasonsToBeChangedToJSON(requestParameters.blockRateOverrideReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Block Rate Override Reason. <p><strong>OperationId:</strong>putBlockRateOverrideReasons</p>
     * Change Block Rate Override Reason
     */
    async putBlockRateOverrideReasons(requestParameters: PutBlockRateOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBlockRateOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Block Refused Reason. <p><strong>OperationId:</strong>putBlockRefusedReasons</p>
     * Change Block Refused Reason
     */
    async putBlockRefusedReasonsRaw(requestParameters: PutBlockRefusedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRefusedReasonsId === null || requestParameters.blockRefusedReasonsId === undefined) {
            throw new runtime.RequiredError('blockRefusedReasonsId','Required parameter requestParameters.blockRefusedReasonsId was null or undefined when calling putBlockRefusedReasons.');
        }
        
        if (requestParameters.blockRefusedReasonsToBeChanged === null || requestParameters.blockRefusedReasonsToBeChanged === undefined) {
            throw new runtime.RequiredError('blockRefusedReasonsToBeChanged','Required parameter requestParameters.blockRefusedReasonsToBeChanged was null or undefined when calling putBlockRefusedReasons.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRefusedReasons/{blockRefusedReasonsId}`.replace(`{${"blockRefusedReasonsId"}}`, encodeURIComponent(String(requestParameters.blockRefusedReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockRefusedReasonsToBeChangedToJSON(requestParameters.blockRefusedReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Block Refused Reason. <p><strong>OperationId:</strong>putBlockRefusedReasons</p>
     * Change Block Refused Reason
     */
    async putBlockRefusedReasons(requestParameters: PutBlockRefusedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBlockRefusedReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Destination Codes. <p><strong>OperationId:</strong>putDestinationCodes</p>
     * Change Destination Codes
     */
    async putDestinationCodesRaw(requestParameters: PutDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.destinationCodesId === null || requestParameters.destinationCodesId === undefined) {
            throw new runtime.RequiredError('destinationCodesId','Required parameter requestParameters.destinationCodesId was null or undefined when calling putDestinationCodes.');
        }
        
        if (requestParameters.destinationCodesToBeChanged === null || requestParameters.destinationCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('destinationCodesToBeChanged','Required parameter requestParameters.destinationCodesToBeChanged was null or undefined when calling putDestinationCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/destinationCodes/{destinationCodesId}`.replace(`{${"destinationCodesId"}}`, encodeURIComponent(String(requestParameters.destinationCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DestinationCodesToBeChangedToJSON(requestParameters.destinationCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Destination Codes. <p><strong>OperationId:</strong>putDestinationCodes</p>
     * Change Destination Codes
     */
    async putDestinationCodes(requestParameters: PutDestinationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDestinationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Reservation Methods. <p><strong>OperationId:</strong>putReservationMethods</p>
     * Change Reservation Methods
     */
    async putReservationMethodsRaw(requestParameters: PutReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationMethodsId === null || requestParameters.reservationMethodsId === undefined) {
            throw new runtime.RequiredError('reservationMethodsId','Required parameter requestParameters.reservationMethodsId was null or undefined when calling putReservationMethods.');
        }
        
        if (requestParameters.reservationMethodsToBeChanged === null || requestParameters.reservationMethodsToBeChanged === undefined) {
            throw new runtime.RequiredError('reservationMethodsToBeChanged','Required parameter requestParameters.reservationMethodsToBeChanged was null or undefined when calling putReservationMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reservationMethods/{reservationMethodsId}`.replace(`{${"reservationMethodsId"}}`, encodeURIComponent(String(requestParameters.reservationMethodsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationMethodsToBeChangedToJSON(requestParameters.reservationMethodsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Reservation Methods. <p><strong>OperationId:</strong>putReservationMethods</p>
     * Change Reservation Methods
     */
    async putReservationMethods(requestParameters: PutReservationMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putReservationMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
