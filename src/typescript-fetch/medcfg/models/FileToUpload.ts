/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Content Service
 * Opera Content Service offers capability to manage large content such as images and files.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request to upload a file attachment.
 * @export
 * @interface FileToUpload
 */
export interface FileToUpload {
    /**
     * Used for Character Strings, length 0 to 200.
     * @type {string}
     * @memberof FileToUpload
     */
    linkId?: string;
    /**
     * Used for Character Strings, length 0 to 200.
     * @type {string}
     * @memberof FileToUpload
     */
    linkType?: string;
    /**
     * Used for Character Strings, length 0 to 1000.
     * @type {string}
     * @memberof FileToUpload
     */
    fileName?: string;
    /**
     * Used for Character Strings, length 0 to 2000.
     * @type {string}
     * @memberof FileToUpload
     */
    description?: string;
    /**
     * Used for Character Strings, length 0 to 200.
     * @type {string}
     * @memberof FileToUpload
     */
    userName?: string;
    /**
     * Used for Character Strings, length 0 to 200.
     * @type {string}
     * @memberof FileToUpload
     */
    hotelId?: string;
    /**
     * Used for Character Strings, length 0 to 10.
     * @type {string}
     * @memberof FileToUpload
     */
    globalYN?: string;
    /**
     * Attachment file in base64 binary format.
     * @type {string}
     * @memberof FileToUpload
     */
    fileAttachment?: string;
    /**
     * Used for Character Strings, length 0 to 10.
     * @type {string}
     * @memberof FileToUpload
     */
    overwriteExistingFileYN?: string;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof FileToUpload
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof FileToUpload
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the FileToUpload interface.
 */
export function instanceOfFileToUpload(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FileToUploadFromJSON(json: any): FileToUpload {
    return FileToUploadFromJSONTyped(json, false);
}

export function FileToUploadFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileToUpload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'linkId': !exists(json, 'linkId') ? undefined : json['linkId'],
        'linkType': !exists(json, 'linkType') ? undefined : json['linkType'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'globalYN': !exists(json, 'globalYN') ? undefined : json['globalYN'],
        'fileAttachment': !exists(json, 'fileAttachment') ? undefined : json['fileAttachment'],
        'overwriteExistingFileYN': !exists(json, 'overwriteExistingFileYN') ? undefined : json['overwriteExistingFileYN'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function FileToUploadToJSON(value?: FileToUpload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'linkId': value.linkId,
        'linkType': value.linkType,
        'fileName': value.fileName,
        'description': value.description,
        'userName': value.userName,
        'hotelId': value.hotelId,
        'globalYN': value.globalYN,
        'fileAttachment': value.fileAttachment,
        'overwriteExistingFileYN': value.overwriteExistingFileYN,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

