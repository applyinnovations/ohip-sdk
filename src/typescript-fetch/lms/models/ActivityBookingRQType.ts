/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityListInner } from './ActivityListInner';
import {
    ActivityListInnerFromJSON,
    ActivityListInnerFromJSONTyped,
    ActivityListInnerToJSON,
} from './ActivityListInner';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * The choice between a reservation header or a profile ID. One or the other is required.
 * @export
 * @interface ActivityBookingRQType
 */
export interface ActivityBookingRQType {
    /**
     * A collection of Activity objects.
     * @type {Array<ActivityListInner>}
     * @memberof ActivityBookingRQType
     */
    activities?: Array<ActivityListInner>;
    /**
     * This is not required if a Reservation Id is provided
     * @type {string}
     * @memberof ActivityBookingRQType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ActivityBookingRQType
     */
    profileId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ActivityBookingRQType
     */
    reservationId?: UniqueIDType;
}

/**
 * Check if a given object implements the ActivityBookingRQType interface.
 */
export function instanceOfActivityBookingRQType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityBookingRQTypeFromJSON(json: any): ActivityBookingRQType {
    return ActivityBookingRQTypeFromJSONTyped(json, false);
}

export function ActivityBookingRQTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityBookingRQType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activities': !exists(json, 'activities') ? undefined : ((json['activities'] as Array<any>).map(ActivityListInnerFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'reservationId': !exists(json, 'reservationId') ? undefined : UniqueIDTypeFromJSON(json['reservationId']),
    };
}

export function ActivityBookingRQTypeToJSON(value?: ActivityBookingRQType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activities': value.activities === undefined ? undefined : ((value.activities as Array<any>).map(ActivityListInnerToJSON)),
        'hotelId': value.hotelId,
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'reservationId': UniqueIDTypeToJSON(value.reservationId),
    };
}

