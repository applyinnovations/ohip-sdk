/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateTimeSpanType } from './DateTimeSpanType';
import {
    DateTimeSpanTypeFromJSON,
    DateTimeSpanTypeFromJSONTyped,
    DateTimeSpanTypeToJSON,
} from './DateTimeSpanType';
import type { FormattedTextTextType } from './FormattedTextTextType';
import {
    FormattedTextTextTypeFromJSON,
    FormattedTextTextTypeFromJSONTyped,
    FormattedTextTextTypeToJSON,
} from './FormattedTextTextType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { LocationNotificationStatus } from './LocationNotificationStatus';
import {
    LocationNotificationStatusFromJSON,
    LocationNotificationStatusFromJSONTyped,
    LocationNotificationStatusToJSON,
} from './LocationNotificationStatus';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface LocationNotificationToBeCreated
 */
export interface LocationNotificationToBeCreated {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof LocationNotificationToBeCreated
     */
    reservationId?: UniqueIDType;
    /**
     * 
     * @type {DateTimeSpanType}
     * @memberof LocationNotificationToBeCreated
     */
    activityTime?: DateTimeSpanType;
    /**
     * 
     * @type {FormattedTextTextType}
     * @memberof LocationNotificationToBeCreated
     */
    locationText?: FormattedTextTextType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof LocationNotificationToBeCreated
     */
    profileId?: UniqueIDType;
    /**
     * 
     * @type {FormattedTextTextType}
     * @memberof LocationNotificationToBeCreated
     */
    description?: FormattedTextTextType;
    /**
     * 
     * @type {LocationNotificationStatus}
     * @memberof LocationNotificationToBeCreated
     */
    locationNotificationStatus?: LocationNotificationStatus;
    /**
     * 
     * @type {string}
     * @memberof LocationNotificationToBeCreated
     */
    otherLocationNotificationStatus?: string;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof LocationNotificationToBeCreated
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof LocationNotificationToBeCreated
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the LocationNotificationToBeCreated interface.
 */
export function instanceOfLocationNotificationToBeCreated(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationNotificationToBeCreatedFromJSON(json: any): LocationNotificationToBeCreated {
    return LocationNotificationToBeCreatedFromJSONTyped(json, false);
}

export function LocationNotificationToBeCreatedFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationNotificationToBeCreated {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationId': !exists(json, 'reservationId') ? undefined : UniqueIDTypeFromJSON(json['reservationId']),
        'activityTime': !exists(json, 'activityTime') ? undefined : DateTimeSpanTypeFromJSON(json['activityTime']),
        'locationText': !exists(json, 'locationText') ? undefined : FormattedTextTextTypeFromJSON(json['locationText']),
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'description': !exists(json, 'description') ? undefined : FormattedTextTextTypeFromJSON(json['description']),
        'locationNotificationStatus': !exists(json, 'locationNotificationStatus') ? undefined : LocationNotificationStatusFromJSON(json['locationNotificationStatus']),
        'otherLocationNotificationStatus': !exists(json, 'otherLocationNotificationStatus') ? undefined : json['otherLocationNotificationStatus'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function LocationNotificationToBeCreatedToJSON(value?: LocationNotificationToBeCreated | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationId': UniqueIDTypeToJSON(value.reservationId),
        'activityTime': DateTimeSpanTypeToJSON(value.activityTime),
        'locationText': FormattedTextTextTypeToJSON(value.locationText),
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'description': FormattedTextTextTypeToJSON(value.description),
        'locationNotificationStatus': LocationNotificationStatusToJSON(value.locationNotificationStatus),
        'otherLocationNotificationStatus': value.otherLocationNotificationStatus,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

