/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeActivityLocations,
  ChangeActivityLocationsRS,
  ChangeActivityStatusCodes,
  ChangeActivityStatusCodesRS,
  ChangeActivityTypes,
  ChangeActivityTypesRS,
  CopyActivityLocations,
  CopyActivityLocationsRS,
  CopyActivityTypes,
  CopyActivityTypesRS,
  CreateActivityLocations,
  CreateActivityStatusCodes,
  CreateActivityTypes,
  ExceptionDetailType,
  FetchActivityLocations,
  FetchActivityStatusCodes,
  FetchActivityTypes,
  Status,
} from '../models/index';
import {
    ChangeActivityLocationsFromJSON,
    ChangeActivityLocationsToJSON,
    ChangeActivityLocationsRSFromJSON,
    ChangeActivityLocationsRSToJSON,
    ChangeActivityStatusCodesFromJSON,
    ChangeActivityStatusCodesToJSON,
    ChangeActivityStatusCodesRSFromJSON,
    ChangeActivityStatusCodesRSToJSON,
    ChangeActivityTypesFromJSON,
    ChangeActivityTypesToJSON,
    ChangeActivityTypesRSFromJSON,
    ChangeActivityTypesRSToJSON,
    CopyActivityLocationsFromJSON,
    CopyActivityLocationsToJSON,
    CopyActivityLocationsRSFromJSON,
    CopyActivityLocationsRSToJSON,
    CopyActivityTypesFromJSON,
    CopyActivityTypesToJSON,
    CopyActivityTypesRSFromJSON,
    CopyActivityTypesRSToJSON,
    CreateActivityLocationsFromJSON,
    CreateActivityLocationsToJSON,
    CreateActivityStatusCodesFromJSON,
    CreateActivityStatusCodesToJSON,
    CreateActivityTypesFromJSON,
    CreateActivityTypesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchActivityLocationsFromJSON,
    FetchActivityLocationsToJSON,
    FetchActivityStatusCodesFromJSON,
    FetchActivityStatusCodesToJSON,
    FetchActivityTypesFromJSON,
    FetchActivityTypesToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface CopyActivityLocationsRequest {
    activityLocationsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    copyActivityLocations: CopyActivityLocations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyActivityTypesRequest {
    activityTypesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    copyActivityTypes: CopyActivityTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteActivityLocationsRequest {
    activityLocationsId: string;
    hotelIds: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteActivityStatusCodesRequest {
    activityStatusCodesId: string;
    hotelIds: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteActivityTypesRequest {
    activityTypesId: string;
    hotelIds: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityLocationsRequest {
    hotelIds: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    criteriaCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityStatusCodesRequest {
    hotelIds: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    criteriaCodes?: Array<string>;
    applicationCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityTypesRequest {
    hotelIds: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    typeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostActivityLocationsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createActivityLocations: CreateActivityLocations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostActivityStatusCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createActivityStatusCodes: CreateActivityStatusCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostActivityTypesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createActivityTypes: CreateActivityTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutActivityLocationsRequest {
    activityLocationsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeActivityLocations: ChangeActivityLocations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutActivityStatusCodesRequest {
    activityStatusCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeActivityStatusCodes: ChangeActivityStatusCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutActivityTypesRequest {
    activityTypesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeActivityTypes: ChangeActivityTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class LeisureManagementConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to copy an Activity location for a property. <p><strong>OperationId:</strong>copyActivityLocations</p>
     * Copy Activity Locations
     */
    async copyActivityLocationsRaw(requestParameters: CopyActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CopyActivityLocationsRS>> {
        if (requestParameters.activityLocationsId === null || requestParameters.activityLocationsId === undefined) {
            throw new runtime.RequiredError('activityLocationsId','Required parameter requestParameters.activityLocationsId was null or undefined when calling copyActivityLocations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyActivityLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyActivityLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyActivityLocations.');
        }

        if (requestParameters.copyActivityLocations === null || requestParameters.copyActivityLocations === undefined) {
            throw new runtime.RequiredError('copyActivityLocations','Required parameter requestParameters.copyActivityLocations was null or undefined when calling copyActivityLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityLocations/{activityLocationsId}/copy`.replace(`{${"activityLocationsId"}}`, encodeURIComponent(String(requestParameters.activityLocationsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyActivityLocationsToJSON(requestParameters.copyActivityLocations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CopyActivityLocationsRSFromJSON(jsonValue));
    }

    /**
     * Use this API to copy an Activity location for a property. <p><strong>OperationId:</strong>copyActivityLocations</p>
     * Copy Activity Locations
     */
    async copyActivityLocations(requestParameters: CopyActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CopyActivityLocationsRS> {
        const response = await this.copyActivityLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy existing Activity Types from source property to target properties. <p><strong>OperationId:</strong>copyActivityTypes</p>
     * Copy Activity Types
     */
    async copyActivityTypesRaw(requestParameters: CopyActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CopyActivityTypesRS>> {
        if (requestParameters.activityTypesId === null || requestParameters.activityTypesId === undefined) {
            throw new runtime.RequiredError('activityTypesId','Required parameter requestParameters.activityTypesId was null or undefined when calling copyActivityTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyActivityTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyActivityTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyActivityTypes.');
        }

        if (requestParameters.copyActivityTypes === null || requestParameters.copyActivityTypes === undefined) {
            throw new runtime.RequiredError('copyActivityTypes','Required parameter requestParameters.copyActivityTypes was null or undefined when calling copyActivityTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityTypes/{activityTypesId}/copy`.replace(`{${"activityTypesId"}}`, encodeURIComponent(String(requestParameters.activityTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyActivityTypesToJSON(requestParameters.copyActivityTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CopyActivityTypesRSFromJSON(jsonValue));
    }

    /**
     * Copy existing Activity Types from source property to target properties. <p><strong>OperationId:</strong>copyActivityTypes</p>
     * Copy Activity Types
     */
    async copyActivityTypes(requestParameters: CopyActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CopyActivityTypesRS> {
        const response = await this.copyActivityTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an Activity location for a property. <p><strong>OperationId:</strong>deleteActivityLocations</p>
     * Remove Activity Locations
     */
    async deleteActivityLocationsRaw(requestParameters: DeleteActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityLocationsId === null || requestParameters.activityLocationsId === undefined) {
            throw new runtime.RequiredError('activityLocationsId','Required parameter requestParameters.activityLocationsId was null or undefined when calling deleteActivityLocations.');
        }

        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling deleteActivityLocations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteActivityLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteActivityLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteActivityLocations.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds !== undefined) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityLocations/{activityLocationsId}`.replace(`{${"activityLocationsId"}}`, encodeURIComponent(String(requestParameters.activityLocationsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an Activity location for a property. <p><strong>OperationId:</strong>deleteActivityLocations</p>
     * Remove Activity Locations
     */
    async deleteActivityLocations(requestParameters: DeleteActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivityLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>deleteActivityStatusCodes</p>
     * Remove Activity Status Code
     */
    async deleteActivityStatusCodesRaw(requestParameters: DeleteActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityStatusCodesId === null || requestParameters.activityStatusCodesId === undefined) {
            throw new runtime.RequiredError('activityStatusCodesId','Required parameter requestParameters.activityStatusCodesId was null or undefined when calling deleteActivityStatusCodes.');
        }

        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling deleteActivityStatusCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteActivityStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteActivityStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteActivityStatusCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds !== undefined) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityStatusCodes/{activityStatusCodesId}`.replace(`{${"activityStatusCodesId"}}`, encodeURIComponent(String(requestParameters.activityStatusCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Remove an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>deleteActivityStatusCodes</p>
     * Remove Activity Status Code
     */
    async deleteActivityStatusCodes(requestParameters: DeleteActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivityStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>deleteActivityTypes</p>
     * Remove Activity Types
     */
    async deleteActivityTypesRaw(requestParameters: DeleteActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityTypesId === null || requestParameters.activityTypesId === undefined) {
            throw new runtime.RequiredError('activityTypesId','Required parameter requestParameters.activityTypesId was null or undefined when calling deleteActivityTypes.');
        }

        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling deleteActivityTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteActivityTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteActivityTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteActivityTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds !== undefined) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityTypes/{activityTypesId}`.replace(`{${"activityTypesId"}}`, encodeURIComponent(String(requestParameters.activityTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>deleteActivityTypes</p>
     * Remove Activity Types
     */
    async deleteActivityTypes(requestParameters: DeleteActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivityTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch Activity location codes for a property. <p><strong>OperationId:</strong>getActivityLocations</p>
     * Look up of Activity Locations
     */
    async getActivityLocationsRaw(requestParameters: GetActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchActivityLocations>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getActivityLocations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getActivityLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getActivityLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getActivityLocations.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.criteriaCodes) {
            queryParameters['criteriaCodes'] = requestParameters.criteriaCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityLocations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchActivityLocationsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch Activity location codes for a property. <p><strong>OperationId:</strong>getActivityLocations</p>
     * Look up of Activity Locations
     */
    async getActivityLocations(requestParameters: GetActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchActivityLocations> {
        const response = await this.getActivityLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch Activity Status Codes that are configured for a property.  <p><strong>OperationId:</strong>getActivityStatusCodes</p>
     * Get Activity Status Codes
     */
    async getActivityStatusCodesRaw(requestParameters: GetActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchActivityStatusCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getActivityStatusCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getActivityStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getActivityStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getActivityStatusCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.criteriaCodes) {
            queryParameters['criteriaCodes'] = requestParameters.criteriaCodes;
        }

        if (requestParameters.applicationCodes) {
            queryParameters['applicationCodes'] = requestParameters.applicationCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityStatusCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchActivityStatusCodesFromJSON(jsonValue));
    }

    /**
     * Fetch Activity Status Codes that are configured for a property.  <p><strong>OperationId:</strong>getActivityStatusCodes</p>
     * Get Activity Status Codes
     */
    async getActivityStatusCodes(requestParameters: GetActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchActivityStatusCodes> {
        const response = await this.getActivityStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve Activity Types that are configured for a property.  Activity Types are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>getActivityTypes</p>
     * Fetch Activity Types
     */
    async getActivityTypesRaw(requestParameters: GetActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchActivityTypes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getActivityTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getActivityTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getActivityTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getActivityTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.typeCodes) {
            queryParameters['typeCodes'] = requestParameters.typeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchActivityTypesFromJSON(jsonValue));
    }

    /**
     * Retrieve Activity Types that are configured for a property.  Activity Types are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>getActivityTypes</p>
     * Fetch Activity Types
     */
    async getActivityTypes(requestParameters: GetActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchActivityTypes> {
        const response = await this.getActivityTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Activity location for a property. <p><strong>OperationId:</strong>postActivityLocations</p>
     * Create an Activity Locations
     */
    async postActivityLocationsRaw(requestParameters: PostActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postActivityLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postActivityLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postActivityLocations.');
        }

        if (requestParameters.createActivityLocations === null || requestParameters.createActivityLocations === undefined) {
            throw new runtime.RequiredError('createActivityLocations','Required parameter requestParameters.createActivityLocations was null or undefined when calling postActivityLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityLocations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateActivityLocationsToJSON(requestParameters.createActivityLocations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Activity location for a property. <p><strong>OperationId:</strong>postActivityLocations</p>
     * Create an Activity Locations
     */
    async postActivityLocations(requestParameters: PostActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postActivityLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve Activity Status Code that are configured for a property.  Activity Status Codes are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>postActivityStatusCodes</p>
     * Create Activity Status Code
     */
    async postActivityStatusCodesRaw(requestParameters: PostActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postActivityStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postActivityStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postActivityStatusCodes.');
        }

        if (requestParameters.createActivityStatusCodes === null || requestParameters.createActivityStatusCodes === undefined) {
            throw new runtime.RequiredError('createActivityStatusCodes','Required parameter requestParameters.createActivityStatusCodes was null or undefined when calling postActivityStatusCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityStatusCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateActivityStatusCodesToJSON(requestParameters.createActivityStatusCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Retrieve Activity Status Code that are configured for a property.  Activity Status Codes are typically used when an EAS (External Activities Scheduler system) interface is connected to OPERA.   <p><strong>OperationId:</strong>postActivityStatusCodes</p>
     * Create Activity Status Code
     */
    async postActivityStatusCodes(requestParameters: PostActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postActivityStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Activity Type Code for a specific property. <p><strong>OperationId:</strong>postActivityTypes</p>
     * Create Activity Types
     */
    async postActivityTypesRaw(requestParameters: PostActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postActivityTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postActivityTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postActivityTypes.');
        }

        if (requestParameters.createActivityTypes === null || requestParameters.createActivityTypes === undefined) {
            throw new runtime.RequiredError('createActivityTypes','Required parameter requestParameters.createActivityTypes was null or undefined when calling postActivityTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateActivityTypesToJSON(requestParameters.createActivityTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Activity Type Code for a specific property. <p><strong>OperationId:</strong>postActivityTypes</p>
     * Create Activity Types
     */
    async postActivityTypes(requestParameters: PostActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postActivityTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing Activity location Code for a property. <p><strong>OperationId:</strong>putActivityLocations</p>
     * Change in Activity Locations
     */
    async putActivityLocationsRaw(requestParameters: PutActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeActivityLocationsRS>> {
        if (requestParameters.activityLocationsId === null || requestParameters.activityLocationsId === undefined) {
            throw new runtime.RequiredError('activityLocationsId','Required parameter requestParameters.activityLocationsId was null or undefined when calling putActivityLocations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putActivityLocations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putActivityLocations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putActivityLocations.');
        }

        if (requestParameters.changeActivityLocations === null || requestParameters.changeActivityLocations === undefined) {
            throw new runtime.RequiredError('changeActivityLocations','Required parameter requestParameters.changeActivityLocations was null or undefined when calling putActivityLocations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityLocations/{activityLocationsId}`.replace(`{${"activityLocationsId"}}`, encodeURIComponent(String(requestParameters.activityLocationsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeActivityLocationsToJSON(requestParameters.changeActivityLocations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeActivityLocationsRSFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing Activity location Code for a property. <p><strong>OperationId:</strong>putActivityLocations</p>
     * Change in Activity Locations
     */
    async putActivityLocations(requestParameters: PutActivityLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeActivityLocationsRS> {
        const response = await this.putActivityLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>putActivityStatusCodes</p>
     * Change Activity Status Code
     */
    async putActivityStatusCodesRaw(requestParameters: PutActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeActivityStatusCodesRS>> {
        if (requestParameters.activityStatusCodesId === null || requestParameters.activityStatusCodesId === undefined) {
            throw new runtime.RequiredError('activityStatusCodesId','Required parameter requestParameters.activityStatusCodesId was null or undefined when calling putActivityStatusCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putActivityStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putActivityStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putActivityStatusCodes.');
        }

        if (requestParameters.changeActivityStatusCodes === null || requestParameters.changeActivityStatusCodes === undefined) {
            throw new runtime.RequiredError('changeActivityStatusCodes','Required parameter requestParameters.changeActivityStatusCodes was null or undefined when calling putActivityStatusCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityStatusCodes/{activityStatusCodesId}`.replace(`{${"activityStatusCodesId"}}`, encodeURIComponent(String(requestParameters.activityStatusCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeActivityStatusCodesToJSON(requestParameters.changeActivityStatusCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeActivityStatusCodesRSFromJSON(jsonValue));
    }

    /**
     * Modify an Activity Status Code that is configured for a property.  <p><strong>OperationId:</strong>putActivityStatusCodes</p>
     * Change Activity Status Code
     */
    async putActivityStatusCodes(requestParameters: PutActivityStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeActivityStatusCodesRS> {
        const response = await this.putActivityStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>putActivityTypes</p>
     * Change Activity Types
     */
    async putActivityTypesRaw(requestParameters: PutActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeActivityTypesRS>> {
        if (requestParameters.activityTypesId === null || requestParameters.activityTypesId === undefined) {
            throw new runtime.RequiredError('activityTypesId','Required parameter requestParameters.activityTypesId was null or undefined when calling putActivityTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putActivityTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putActivityTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putActivityTypes.');
        }

        if (requestParameters.changeActivityTypes === null || requestParameters.changeActivityTypes === undefined) {
            throw new runtime.RequiredError('changeActivityTypes','Required parameter requestParameters.changeActivityTypes was null or undefined when calling putActivityTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activityTypes/{activityTypesId}`.replace(`{${"activityTypesId"}}`, encodeURIComponent(String(requestParameters.activityTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeActivityTypesToJSON(requestParameters.changeActivityTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeActivityTypesRSFromJSON(jsonValue));
    }

    /**
     * Modify an Activity Type Code that is configured for a property. <p><strong>OperationId:</strong>putActivityTypes</p>
     * Change Activity Types
     */
    async putActivityTypes(requestParameters: PutActivityTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeActivityTypesRS> {
        const response = await this.putActivityTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
