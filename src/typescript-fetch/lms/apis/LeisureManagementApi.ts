/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Leisure Management API
 * APIs to cater for external Leisure Management functionality integrated with OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivityBookingModified,
  ActivityBookingsDetails,
  ChangeActivityBooking,
  CreateActivityBooking,
  ExceptionDetailType,
  LocationNotificationToBeCreated,
  Status,
} from '../models/index';
import {
    ActivityBookingModifiedFromJSON,
    ActivityBookingModifiedToJSON,
    ActivityBookingsDetailsFromJSON,
    ActivityBookingsDetailsToJSON,
    ChangeActivityBookingFromJSON,
    ChangeActivityBookingToJSON,
    CreateActivityBookingFromJSON,
    CreateActivityBookingToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    LocationNotificationToBeCreatedFromJSON,
    LocationNotificationToBeCreatedToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DeleteActivityBookingRequest {
    reservationId: string;
    hotelId: string;
    activityId: string;
    activityIdType: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityBookingsRequest {
    hotelId: string;
    profileIds: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    profileIdContext?: Array<string>;
    profileIdsType?: Array<string>;
    reservationIds?: Array<string>;
    reservationIdContext?: Array<string>;
    reservationIdsType?: Array<string>;
    activityIds?: Array<string>;
    activityIdContext?: Array<string>;
    activityIdsType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostActivityBookingRequest {
    reservationId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createActivityBooking: CreateActivityBooking;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostLocationNotificationRequest {
    reservationId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    locationNotificationToBeCreated: LocationNotificationToBeCreated;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutActivityBookingRequest {
    reservationId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeActivityBooking: ChangeActivityBooking;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class LeisureManagementApi extends runtime.BaseAPI {

    /**
     * This API will send a response to Cancellation of an Activity Booking. <p><strong>OperationId:</strong>deleteActivityBooking</p>
     * Send a response to Cancellation of an Activity Booking
     */
    async deleteActivityBookingRaw(requestParameters: DeleteActivityBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling deleteActivityBooking.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteActivityBooking.');
        }

        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling deleteActivityBooking.');
        }

        if (requestParameters.activityIdType === null || requestParameters.activityIdType === undefined) {
            throw new runtime.RequiredError('activityIdType','Required parameter requestParameters.activityIdType was null or undefined when calling deleteActivityBooking.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteActivityBooking.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteActivityBooking.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteActivityBooking.');
        }

        const queryParameters: any = {};

        if (requestParameters.activityId !== undefined) {
            queryParameters['activityId'] = requestParameters.activityId;
        }

        if (requestParameters.activityIdType !== undefined) {
            queryParameters['activityIdType'] = requestParameters.activityIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/activityBookings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will send a response to Cancellation of an Activity Booking. <p><strong>OperationId:</strong>deleteActivityBooking</p>
     * Send a response to Cancellation of an Activity Booking
     */
    async deleteActivityBooking(requestParameters: DeleteActivityBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivityBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will send a response to Look-up of Activity Bookings. <p><strong>OperationId:</strong>getActivityBookings</p>
     * Send a response to Look-up of Activity Bookings
     */
    async getActivityBookingsRaw(requestParameters: GetActivityBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityBookingsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getActivityBookings.');
        }

        if (requestParameters.profileIds === null || requestParameters.profileIds === undefined) {
            throw new runtime.RequiredError('profileIds','Required parameter requestParameters.profileIds was null or undefined when calling getActivityBookings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getActivityBookings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getActivityBookings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getActivityBookings.');
        }

        const queryParameters: any = {};

        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }

        if (requestParameters.profileIdContext) {
            queryParameters['profileIdContext'] = requestParameters.profileIdContext;
        }

        if (requestParameters.profileIdsType) {
            queryParameters['profileIdsType'] = requestParameters.profileIdsType;
        }

        if (requestParameters.reservationIds) {
            queryParameters['reservationIds'] = requestParameters.reservationIds;
        }

        if (requestParameters.reservationIdContext) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdsType) {
            queryParameters['reservationIdsType'] = requestParameters.reservationIdsType;
        }

        if (requestParameters.activityIds) {
            queryParameters['activityIds'] = requestParameters.activityIds;
        }

        if (requestParameters.activityIdContext) {
            queryParameters['activityIdContext'] = requestParameters.activityIdContext;
        }

        if (requestParameters.activityIdsType) {
            queryParameters['activityIdsType'] = requestParameters.activityIdsType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activityBookings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityBookingsDetailsFromJSON(jsonValue));
    }

    /**
     * This API will send a response to Look-up of Activity Bookings. <p><strong>OperationId:</strong>getActivityBookings</p>
     * Send a response to Look-up of Activity Bookings
     */
    async getActivityBookings(requestParameters: GetActivityBookingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityBookingsDetails> {
        const response = await this.getActivityBookingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will send a response to Creation of Activity Booking. <p><strong>OperationId:</strong>postActivityBooking</p>
     * Send a response to Creation of Activity Booking
     */
    async postActivityBookingRaw(requestParameters: PostActivityBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postActivityBooking.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postActivityBooking.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postActivityBooking.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postActivityBooking.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postActivityBooking.');
        }

        if (requestParameters.createActivityBooking === null || requestParameters.createActivityBooking === undefined) {
            throw new runtime.RequiredError('createActivityBooking','Required parameter requestParameters.createActivityBooking was null or undefined when calling postActivityBooking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/activityBookings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateActivityBookingToJSON(requestParameters.createActivityBooking),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will send a response to Creation of Activity Booking. <p><strong>OperationId:</strong>postActivityBooking</p>
     * Send a response to Creation of Activity Booking
     */
    async postActivityBooking(requestParameters: PostActivityBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postActivityBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will send a response to a Location Notification. <p><strong>OperationId:</strong>postLocationNotification</p>
     * Send a response to Location Notification
     */
    async postLocationNotificationRaw(requestParameters: PostLocationNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling postLocationNotification.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postLocationNotification.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postLocationNotification.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postLocationNotification.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postLocationNotification.');
        }

        if (requestParameters.locationNotificationToBeCreated === null || requestParameters.locationNotificationToBeCreated === undefined) {
            throw new runtime.RequiredError('locationNotificationToBeCreated','Required parameter requestParameters.locationNotificationToBeCreated was null or undefined when calling postLocationNotification.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/locationNotifications`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationNotificationToBeCreatedToJSON(requestParameters.locationNotificationToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will send a response to a Location Notification. <p><strong>OperationId:</strong>postLocationNotification</p>
     * Send a response to Location Notification
     */
    async postLocationNotification(requestParameters: PostLocationNotificationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postLocationNotificationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will send a response to a  Change in Activity Booking request from external Activity Scheduler system. <p><strong>OperationId:</strong>putActivityBooking</p>
     * Send a response to Change in Activity Booking
     */
    async putActivityBookingRaw(requestParameters: PutActivityBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityBookingModified>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling putActivityBooking.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putActivityBooking.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putActivityBooking.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putActivityBooking.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putActivityBooking.');
        }

        if (requestParameters.changeActivityBooking === null || requestParameters.changeActivityBooking === undefined) {
            throw new runtime.RequiredError('changeActivityBooking','Required parameter requestParameters.changeActivityBooking was null or undefined when calling putActivityBooking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/activityBookings`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeActivityBookingToJSON(requestParameters.changeActivityBooking),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityBookingModifiedFromJSON(jsonValue));
    }

    /**
     * This API will send a response to a  Change in Activity Booking request from external Activity Scheduler system. <p><strong>OperationId:</strong>putActivityBooking</p>
     * Send a response to Change in Activity Booking
     */
    async putActivityBooking(requestParameters: PutActivityBookingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityBookingModified> {
        const response = await this.putActivityBookingRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
