/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Provisioning Service API
 * APIs to cater to provisioning and deprovisioning of new properties and chains in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Currencies,
  ExceptionDetailType,
} from '../models/index';
import {
    CurrenciesFromJSON,
    CurrenciesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
} from '../models/index';

export interface GetCurrenciesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ProvisioningApi extends runtime.BaseAPI {

    /**
     * Operation to fetch all currencies that are valid in the Environment. <p><strong>OperationId:</strong>getShells</p>
     * Operation to fetch all currencies that are valid in the Environment.
     */
    async getCurrenciesRaw(requestParameters: GetCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Currencies>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/listofvalues/currencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrenciesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch all currencies that are valid in the Environment. <p><strong>OperationId:</strong>getShells</p>
     * Operation to fetch all currencies that are valid in the Environment.
     */
    async getCurrencies(requestParameters: GetCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Currencies> {
        const response = await this.getCurrenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
