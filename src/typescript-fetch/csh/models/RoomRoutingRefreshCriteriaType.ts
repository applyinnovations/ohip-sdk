/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoutingInstructionStatusType } from './RoutingInstructionStatusType';
import {
    RoutingInstructionStatusTypeFromJSON,
    RoutingInstructionStatusTypeFromJSONTyped,
    RoutingInstructionStatusTypeToJSON,
} from './RoutingInstructionStatusType';
import type { RoutingInstructionType } from './RoutingInstructionType';
import {
    RoutingInstructionTypeFromJSON,
    RoutingInstructionTypeFromJSONTyped,
    RoutingInstructionTypeToJSON,
} from './RoutingInstructionType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria for refreshing the routing instruction set.
 * @export
 * @interface RoomRoutingRefreshCriteriaType
 */
export interface RoomRoutingRefreshCriteriaType {
    /**
     * Flag to indicate whether to fetch transaction from both reservations.
     * @type {boolean}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    fromBothResvs?: boolean;
    /**
     * Property code where the routing instruction set exists.
     * @type {string}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    hotelId?: string;
    /**
     * 
     * @type {RoutingInstructionType}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    instructions?: RoutingInstructionType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    originalTargetResvNameId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    resvNameId?: UniqueIDType;
    /**
     * 
     * @type {RoutingInstructionStatusType}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    status?: RoutingInstructionStatusType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    targetResvNameId?: UniqueIDType;
    /**
     * Unique Transaction Number of the transaction(posting) which need to be transferred.
     * @type {Array<number>}
     * @memberof RoomRoutingRefreshCriteriaType
     */
    transactions?: Array<number>;
}

/**
 * Check if a given object implements the RoomRoutingRefreshCriteriaType interface.
 */
export function instanceOfRoomRoutingRefreshCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomRoutingRefreshCriteriaTypeFromJSON(json: any): RoomRoutingRefreshCriteriaType {
    return RoomRoutingRefreshCriteriaTypeFromJSONTyped(json, false);
}

export function RoomRoutingRefreshCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomRoutingRefreshCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fromBothResvs': !exists(json, 'fromBothResvs') ? undefined : json['fromBothResvs'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'instructions': !exists(json, 'instructions') ? undefined : RoutingInstructionTypeFromJSON(json['instructions']),
        'originalTargetResvNameId': !exists(json, 'originalTargetResvNameId') ? undefined : UniqueIDTypeFromJSON(json['originalTargetResvNameId']),
        'resvNameId': !exists(json, 'resvNameId') ? undefined : UniqueIDTypeFromJSON(json['resvNameId']),
        'status': !exists(json, 'status') ? undefined : RoutingInstructionStatusTypeFromJSON(json['status']),
        'targetResvNameId': !exists(json, 'targetResvNameId') ? undefined : UniqueIDTypeFromJSON(json['targetResvNameId']),
        'transactions': !exists(json, 'transactions') ? undefined : json['transactions'],
    };
}

export function RoomRoutingRefreshCriteriaTypeToJSON(value?: RoomRoutingRefreshCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fromBothResvs': value.fromBothResvs,
        'hotelId': value.hotelId,
        'instructions': RoutingInstructionTypeToJSON(value.instructions),
        'originalTargetResvNameId': UniqueIDTypeToJSON(value.originalTargetResvNameId),
        'resvNameId': UniqueIDTypeToJSON(value.resvNameId),
        'status': RoutingInstructionStatusTypeToJSON(value.status),
        'targetResvNameId': UniqueIDTypeToJSON(value.targetResvNameId),
        'transactions': value.transactions,
    };
}

