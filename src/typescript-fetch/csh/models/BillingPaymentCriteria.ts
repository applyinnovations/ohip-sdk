/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashieringPaymentMethodType } from './CashieringPaymentMethodType';
import {
    CashieringPaymentMethodTypeFromJSON,
    CashieringPaymentMethodTypeFromJSONTyped,
    CashieringPaymentMethodTypeToJSON,
} from './CashieringPaymentMethodType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { PaymentTaxType } from './PaymentTaxType';
import {
    PaymentTaxTypeFromJSON,
    PaymentTaxTypeFromJSONTyped,
    PaymentTaxTypeToJSON,
} from './PaymentTaxType';
import type { PostPaymentActionType } from './PostPaymentActionType';
import {
    PostPaymentActionTypeFromJSON,
    PostPaymentActionTypeFromJSONTyped,
    PostPaymentActionTypeToJSON,
} from './PostPaymentActionType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';

/**
 * Criteria for the payment information to be posted.
 * @export
 * @interface BillingPaymentCriteria
 */
export interface BillingPaymentCriteria {
    /**
     * Property code.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    hotelId?: string;
    /**
     * 
     * @type {CashieringPaymentMethodType}
     * @memberof BillingPaymentCriteria
     */
    paymentMethod?: CashieringPaymentMethodType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof BillingPaymentCriteria
     */
    postingAmount?: CurrencyAmountType;
    /**
     * User-defined posting reference.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    postingReference?: string;
    /**
     * User-defined posting remark.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    postingRemark?: string;
    /**
     * User Defined Comments. Used for Deposit Payment postings.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    comments?: string;
    /**
     * Flag to indicate if Credit Card Surcharge has to be applied to this payment, when the functionality for Credit Card Surcharge is available.
     * @type {boolean}
     * @memberof BillingPaymentCriteria
     */
    applyCCSurcharge?: boolean;
    /**
     * 
     * @type {PaymentTaxType}
     * @memberof BillingPaymentCriteria
     */
    manualPaymentTaxInfo?: PaymentTaxType;
    /**
     * Payment Tax record.
     * @type {Array<PaymentTaxType>}
     * @memberof BillingPaymentCriteria
     */
    creditablePaymentTaxes?: Array<PaymentTaxType>;
    /**
     * Applicable for chip and pin. The ID of the terminal where the chip and pin device is connected and where the payment is made.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    terminalId?: string;
    /**
     * Flag to allow a rebate by Credit Card
     * @type {boolean}
     * @memberof BillingPaymentCriteria
     */
    overrideInsufficientCC?: boolean;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof BillingPaymentCriteria
     */
    changeDueAmount?: CurrencyAmountType;
    /**
     * Flag to override account receivable credit limit
     * @type {boolean}
     * @memberof BillingPaymentCriteria
     */
    overrideARCreditLimit?: boolean;
    /**
     * Flag to indicate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest.
     * @type {boolean}
     * @memberof BillingPaymentCriteria
     */
    applyCurrencyTaxes?: boolean;
    /**
     * Flag to indicate if currency taxes need to be applied or not. For ex, in case of Chile, it depends upon nationality of the guest.
     * @type {boolean}
     * @memberof BillingPaymentCriteria
     */
    vATOffset?: boolean;
    /**
     * 
     * @type {PostPaymentActionType}
     * @memberof BillingPaymentCriteria
     */
    action?: PostPaymentActionType;
    /**
     * 
     * @type {number}
     * @memberof BillingPaymentCriteria
     */
    folioWindowNo?: number;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof BillingPaymentCriteria
     */
    cashierId?: number;
    /**
     * 
     * @type {ReservationId}
     * @memberof BillingPaymentCriteria
     */
    reservationId?: ReservationId;
    /**
     * Flag to indicate if a fiscal payload should be generated for the Payment.
     * @type {boolean}
     * @memberof BillingPaymentCriteria
     */
    generateFiscalPayload?: boolean;
    /**
     * Applicable for Fiscal Terminal. The ID of the terminal where the fiscal device is connected.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    fiscalTerminalId?: string;
    /**
     * User-defined original invoice number.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    originalInvoice?: string;
    /**
     * Type of invoice specified in the originalInvoice field.
     * @type {string}
     * @memberof BillingPaymentCriteria
     */
    invoiceType?: string;
}

/**
 * Check if a given object implements the BillingPaymentCriteria interface.
 */
export function instanceOfBillingPaymentCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BillingPaymentCriteriaFromJSON(json: any): BillingPaymentCriteria {
    return BillingPaymentCriteriaFromJSONTyped(json, false);
}

export function BillingPaymentCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingPaymentCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : CashieringPaymentMethodTypeFromJSON(json['paymentMethod']),
        'postingAmount': !exists(json, 'postingAmount') ? undefined : CurrencyAmountTypeFromJSON(json['postingAmount']),
        'postingReference': !exists(json, 'postingReference') ? undefined : json['postingReference'],
        'postingRemark': !exists(json, 'postingRemark') ? undefined : json['postingRemark'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'applyCCSurcharge': !exists(json, 'applyCCSurcharge') ? undefined : json['applyCCSurcharge'],
        'manualPaymentTaxInfo': !exists(json, 'manualPaymentTaxInfo') ? undefined : PaymentTaxTypeFromJSON(json['manualPaymentTaxInfo']),
        'creditablePaymentTaxes': !exists(json, 'creditablePaymentTaxes') ? undefined : ((json['creditablePaymentTaxes'] as Array<any>).map(PaymentTaxTypeFromJSON)),
        'terminalId': !exists(json, 'terminalId') ? undefined : json['terminalId'],
        'overrideInsufficientCC': !exists(json, 'overrideInsufficientCC') ? undefined : json['overrideInsufficientCC'],
        'changeDueAmount': !exists(json, 'changeDueAmount') ? undefined : CurrencyAmountTypeFromJSON(json['changeDueAmount']),
        'overrideARCreditLimit': !exists(json, 'overrideARCreditLimit') ? undefined : json['overrideARCreditLimit'],
        'applyCurrencyTaxes': !exists(json, 'applyCurrencyTaxes') ? undefined : json['applyCurrencyTaxes'],
        'vATOffset': !exists(json, 'vATOffset') ? undefined : json['vATOffset'],
        'action': !exists(json, 'action') ? undefined : PostPaymentActionTypeFromJSON(json['action']),
        'folioWindowNo': !exists(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'generateFiscalPayload': !exists(json, 'generateFiscalPayload') ? undefined : json['generateFiscalPayload'],
        'fiscalTerminalId': !exists(json, 'fiscalTerminalId') ? undefined : json['fiscalTerminalId'],
        'originalInvoice': !exists(json, 'originalInvoice') ? undefined : json['originalInvoice'],
        'invoiceType': !exists(json, 'invoiceType') ? undefined : json['invoiceType'],
    };
}

export function BillingPaymentCriteriaToJSON(value?: BillingPaymentCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'paymentMethod': CashieringPaymentMethodTypeToJSON(value.paymentMethod),
        'postingAmount': CurrencyAmountTypeToJSON(value.postingAmount),
        'postingReference': value.postingReference,
        'postingRemark': value.postingRemark,
        'comments': value.comments,
        'applyCCSurcharge': value.applyCCSurcharge,
        'manualPaymentTaxInfo': PaymentTaxTypeToJSON(value.manualPaymentTaxInfo),
        'creditablePaymentTaxes': value.creditablePaymentTaxes === undefined ? undefined : ((value.creditablePaymentTaxes as Array<any>).map(PaymentTaxTypeToJSON)),
        'terminalId': value.terminalId,
        'overrideInsufficientCC': value.overrideInsufficientCC,
        'changeDueAmount': CurrencyAmountTypeToJSON(value.changeDueAmount),
        'overrideARCreditLimit': value.overrideARCreditLimit,
        'applyCurrencyTaxes': value.applyCurrencyTaxes,
        'vATOffset': value.vATOffset,
        'action': PostPaymentActionTypeToJSON(value.action),
        'folioWindowNo': value.folioWindowNo,
        'cashierId': value.cashierId,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'generateFiscalPayload': value.generateFiscalPayload,
        'fiscalTerminalId': value.fiscalTerminalId,
        'originalInvoice': value.originalInvoice,
        'invoiceType': value.invoiceType,
    };
}

