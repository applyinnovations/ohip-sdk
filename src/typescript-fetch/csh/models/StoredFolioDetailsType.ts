/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatusType } from './StatusType';
import {
    StatusTypeFromJSON,
    StatusTypeFromJSONTyped,
    StatusTypeToJSON,
} from './StatusType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Stored Folio Details type.Folio can be printed/viewed without re-generation.
 * @export
 * @interface StoredFolioDetailsType
 */
export interface StoredFolioDetailsType {
    /**
     * Folio Report URL.
     * @type {string}
     * @memberof StoredFolioDetailsType
     */
    folioReportURL?: string;
    /**
     * Hotel code.
     * @type {string}
     * @memberof StoredFolioDetailsType
     */
    hotelId?: string;
    /**
     * 
     * @type {StatusType}
     * @memberof StoredFolioDetailsType
     */
    reportStatus?: StatusType;
    /**
     * Name of the Stored Folio file.
     * @type {string}
     * @memberof StoredFolioDetailsType
     */
    storedFolioFileName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof StoredFolioDetailsType
     */
    storedFolioId?: UniqueIDType;
}

/**
 * Check if a given object implements the StoredFolioDetailsType interface.
 */
export function instanceOfStoredFolioDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StoredFolioDetailsTypeFromJSON(json: any): StoredFolioDetailsType {
    return StoredFolioDetailsTypeFromJSONTyped(json, false);
}

export function StoredFolioDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoredFolioDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'folioReportURL': !exists(json, 'folioReportURL') ? undefined : json['folioReportURL'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reportStatus': !exists(json, 'reportStatus') ? undefined : StatusTypeFromJSON(json['reportStatus']),
        'storedFolioFileName': !exists(json, 'storedFolioFileName') ? undefined : json['storedFolioFileName'],
        'storedFolioId': !exists(json, 'storedFolioId') ? undefined : UniqueIDTypeFromJSON(json['storedFolioId']),
    };
}

export function StoredFolioDetailsTypeToJSON(value?: StoredFolioDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'folioReportURL': value.folioReportURL,
        'hotelId': value.hotelId,
        'reportStatus': StatusTypeToJSON(value.reportStatus),
        'storedFolioFileName': value.storedFolioFileName,
        'storedFolioId': UniqueIDTypeToJSON(value.storedFolioId),
    };
}

