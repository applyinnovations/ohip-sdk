/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CardTypeType } from './CardTypeType';
import {
    CardTypeTypeFromJSON,
    CardTypeTypeFromJSONTyped,
    CardTypeTypeToJSON,
} from './CardTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information on a credit card for the customer.
 * @export
 * @interface CreditCardInfo
 */
export interface CreditCardInfo {
    /**
     * 
     * @type {string}
     * @memberof CreditCardInfo
     */
    cardHolderName?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CreditCardInfo
     */
    cardId?: UniqueIDType;
    /**
     * 
     * @type {string}
     * @memberof CreditCardInfo
     */
    cardNumberLast4Digits?: string;
    /**
     * 
     * @type {string}
     * @memberof CreditCardInfo
     */
    cardNumberMasked?: string;
    /**
     * 
     * @type {CardTypeType}
     * @memberof CreditCardInfo
     */
    cardType?: CardTypeType;
    /**
     * Masked Expiration date of the credit card
     * @type {string}
     * @memberof CreditCardInfo
     */
    expirationDateMasked?: string;
    /**
     * Expiration date in string representation.
     * @type {string}
     * @memberof CreditCardInfo
     */
    expirationDateString?: string;
}

/**
 * Check if a given object implements the CreditCardInfo interface.
 */
export function instanceOfCreditCardInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreditCardInfoFromJSON(json: any): CreditCardInfo {
    return CreditCardInfoFromJSONTyped(json, false);
}

export function CreditCardInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditCardInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cardHolderName': !exists(json, 'cardHolderName') ? undefined : json['cardHolderName'],
        'cardId': !exists(json, 'cardId') ? undefined : UniqueIDTypeFromJSON(json['cardId']),
        'cardNumberLast4Digits': !exists(json, 'cardNumberLast4Digits') ? undefined : json['cardNumberLast4Digits'],
        'cardNumberMasked': !exists(json, 'cardNumberMasked') ? undefined : json['cardNumberMasked'],
        'cardType': !exists(json, 'cardType') ? undefined : CardTypeTypeFromJSON(json['cardType']),
        'expirationDateMasked': !exists(json, 'expirationDateMasked') ? undefined : json['expirationDateMasked'],
        'expirationDateString': !exists(json, 'expirationDateString') ? undefined : json['expirationDateString'],
    };
}

export function CreditCardInfoToJSON(value?: CreditCardInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cardHolderName': value.cardHolderName,
        'cardId': UniqueIDTypeToJSON(value.cardId),
        'cardNumberLast4Digits': value.cardNumberLast4Digits,
        'cardNumberMasked': value.cardNumberMasked,
        'cardType': CardTypeTypeToJSON(value.cardType),
        'expirationDateMasked': value.expirationDateMasked,
        'expirationDateString': value.expirationDateString,
    };
}

