/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChargeCriteriaType } from './ChargeCriteriaType';
import {
    ChargeCriteriaTypeFromJSON,
    ChargeCriteriaTypeFromJSONTyped,
    ChargeCriteriaTypeToJSON,
} from './ChargeCriteriaType';
import type { PaymentCriteriaType } from './PaymentCriteriaType';
import {
    PaymentCriteriaTypeFromJSON,
    PaymentCriteriaTypeFromJSONTyped,
    PaymentCriteriaTypeToJSON,
} from './PaymentCriteriaType';

/**
 * Request to post charges and payments on a reservation.
 * @export
 * @interface ChargesAndPaymentsCriteria
 */
export interface ChargesAndPaymentsCriteria {
    /**
     * Information regarding the charges which have to be posted.
     * @type {Array<ChargeCriteriaType>}
     * @memberof ChargesAndPaymentsCriteria
     */
    charges?: Array<ChargeCriteriaType>;
    /**
     * The payment information to be posted.
     * @type {Array<PaymentCriteriaType>}
     * @memberof ChargesAndPaymentsCriteria
     */
    payments?: Array<PaymentCriteriaType>;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof ChargesAndPaymentsCriteria
     */
    cashierId?: number;
}

/**
 * Check if a given object implements the ChargesAndPaymentsCriteria interface.
 */
export function instanceOfChargesAndPaymentsCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChargesAndPaymentsCriteriaFromJSON(json: any): ChargesAndPaymentsCriteria {
    return ChargesAndPaymentsCriteriaFromJSONTyped(json, false);
}

export function ChargesAndPaymentsCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargesAndPaymentsCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'charges': !exists(json, 'charges') ? undefined : ((json['charges'] as Array<any>).map(ChargeCriteriaTypeFromJSON)),
        'payments': !exists(json, 'payments') ? undefined : ((json['payments'] as Array<any>).map(PaymentCriteriaTypeFromJSON)),
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
    };
}

export function ChargesAndPaymentsCriteriaToJSON(value?: ChargesAndPaymentsCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'charges': value.charges === undefined ? undefined : ((value.charges as Array<any>).map(ChargeCriteriaTypeToJSON)),
        'payments': value.payments === undefined ? undefined : ((value.payments as Array<any>).map(PaymentCriteriaTypeToJSON)),
        'cashierId': value.cashierId,
    };
}

