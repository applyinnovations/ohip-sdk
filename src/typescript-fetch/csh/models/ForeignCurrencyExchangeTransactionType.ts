/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FolioType } from './FolioType';
import {
    FolioTypeFromJSON,
    FolioTypeFromJSONTyped,
    FolioTypeToJSON,
} from './FolioType';
import type { SummaryPostingType } from './SummaryPostingType';
import {
    SummaryPostingTypeFromJSON,
    SummaryPostingTypeFromJSONTyped,
    SummaryPostingTypeToJSON,
} from './SummaryPostingType';

/**
 * Details about posting and generated folio on currency exchange.
 * @export
 * @interface ForeignCurrencyExchangeTransactionType
 */
export interface ForeignCurrencyExchangeTransactionType {
    /**
     * 
     * @type {SummaryPostingType}
     * @memberof ForeignCurrencyExchangeTransactionType
     */
    posting?: SummaryPostingType;
    /**
     * 
     * @type {FolioType}
     * @memberof ForeignCurrencyExchangeTransactionType
     */
    folio?: FolioType;
}

/**
 * Check if a given object implements the ForeignCurrencyExchangeTransactionType interface.
 */
export function instanceOfForeignCurrencyExchangeTransactionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ForeignCurrencyExchangeTransactionTypeFromJSON(json: any): ForeignCurrencyExchangeTransactionType {
    return ForeignCurrencyExchangeTransactionTypeFromJSONTyped(json, false);
}

export function ForeignCurrencyExchangeTransactionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ForeignCurrencyExchangeTransactionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'posting': !exists(json, 'posting') ? undefined : SummaryPostingTypeFromJSON(json['posting']),
        'folio': !exists(json, 'folio') ? undefined : FolioTypeFromJSON(json['folio']),
    };
}

export function ForeignCurrencyExchangeTransactionTypeToJSON(value?: ForeignCurrencyExchangeTransactionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'posting': SummaryPostingTypeToJSON(value.posting),
        'folio': FolioTypeToJSON(value.folio),
    };
}

