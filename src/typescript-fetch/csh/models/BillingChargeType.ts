/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * 
 * @export
 * @interface BillingChargeType
 */
export interface BillingChargeType {
    /**
     * Approval code of the posting.
     * @type {string}
     * @memberof BillingChargeType
     */
    approvalCode?: string;
    /**
     * Approval date of the posting.
     * @type {Date}
     * @memberof BillingChargeType
     */
    approvalDate?: Date;
    /**
     * Approval status of the posting.
     * @type {string}
     * @memberof BillingChargeType
     */
    approvalStatus?: string;
    /**
     * Corrected arrangement code from the package associated to this transaction.
     * @type {string}
     * @memberof BillingChargeType
     */
    arrangementCode?: string;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof BillingChargeType
     */
    cashierId?: number;
    /**
     * Corrected Cheque number.
     * @type {string}
     * @memberof BillingChargeType
     */
    checkNumber?: string;
    /**
     * Corrected POS covers - number of copies of receipts that got printed for that particular receipt.
     * @type {string}
     * @memberof BillingChargeType
     */
    covers?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof BillingChargeType
     */
    price?: CurrencyAmountType;
    /**
     * Corrected posting quantity.
     * @type {number}
     * @memberof BillingChargeType
     */
    quantity?: number;
    /**
     * Corrected user-defined posting reference.
     * @type {string}
     * @memberof BillingChargeType
     */
    reference?: string;
    /**
     * Corrected user-defined posting remark.
     * @type {string}
     * @memberof BillingChargeType
     */
    remark?: string;
    /**
     * Corrected Revenue Date.
     * @type {Date}
     * @memberof BillingChargeType
     */
    revenueDate?: Date;
    /**
     * Transaction number of the posting being corrected.
     * @type {number}
     * @memberof BillingChargeType
     */
    transactionNo?: number;
}

/**
 * Check if a given object implements the BillingChargeType interface.
 */
export function instanceOfBillingChargeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BillingChargeTypeFromJSON(json: any): BillingChargeType {
    return BillingChargeTypeFromJSONTyped(json, false);
}

export function BillingChargeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingChargeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'approvalCode': !exists(json, 'approvalCode') ? undefined : json['approvalCode'],
        'approvalDate': !exists(json, 'approvalDate') ? undefined : (new Date(json['approvalDate'])),
        'approvalStatus': !exists(json, 'approvalStatus') ? undefined : json['approvalStatus'],
        'arrangementCode': !exists(json, 'arrangementCode') ? undefined : json['arrangementCode'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'checkNumber': !exists(json, 'checkNumber') ? undefined : json['checkNumber'],
        'covers': !exists(json, 'covers') ? undefined : json['covers'],
        'price': !exists(json, 'price') ? undefined : CurrencyAmountTypeFromJSON(json['price']),
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'remark': !exists(json, 'remark') ? undefined : json['remark'],
        'revenueDate': !exists(json, 'revenueDate') ? undefined : (new Date(json['revenueDate'])),
        'transactionNo': !exists(json, 'transactionNo') ? undefined : json['transactionNo'],
    };
}

export function BillingChargeTypeToJSON(value?: BillingChargeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'approvalCode': value.approvalCode,
        'approvalDate': value.approvalDate === undefined ? undefined : (value.approvalDate.toISOString().substring(0,10)),
        'approvalStatus': value.approvalStatus,
        'arrangementCode': value.arrangementCode,
        'cashierId': value.cashierId,
        'checkNumber': value.checkNumber,
        'covers': value.covers,
        'price': CurrencyAmountTypeToJSON(value.price),
        'quantity': value.quantity,
        'reference': value.reference,
        'remark': value.remark,
        'revenueDate': value.revenueDate === undefined ? undefined : (value.revenueDate.toISOString().substring(0,10)),
        'transactionNo': value.transactionNo,
    };
}

