/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FiscalSupportingDocumentCategory } from './FiscalSupportingDocumentCategory';
import {
    FiscalSupportingDocumentCategoryFromJSON,
    FiscalSupportingDocumentCategoryFromJSONTyped,
    FiscalSupportingDocumentCategoryToJSON,
} from './FiscalSupportingDocumentCategory';
import type { FiscalSupportingDocumentType } from './FiscalSupportingDocumentType';
import {
    FiscalSupportingDocumentTypeFromJSON,
    FiscalSupportingDocumentTypeFromJSONTyped,
    FiscalSupportingDocumentTypeToJSON,
} from './FiscalSupportingDocumentType';

/**
 * Supporting document details.
 * @export
 * @interface SupportingDocumentType
 */
export interface SupportingDocumentType {
    /**
     * Confirmation number of the reservation.
     * @type {string}
     * @memberof SupportingDocumentType
     */
    confirmationNo?: string;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof SupportingDocumentType
     */
    createDateTime?: string;
    /**
     * 
     * @type {FiscalSupportingDocumentCategory}
     * @memberof SupportingDocumentType
     */
    documentCategory?: FiscalSupportingDocumentCategory;
    /**
     * Supporting document creation date.
     * @type {Date}
     * @memberof SupportingDocumentType
     */
    documentDate?: Date;
    /**
     * Supporting document number.
     * @type {number}
     * @memberof SupportingDocumentType
     */
    documentNo?: number;
    /**
     * 
     * @type {FiscalSupportingDocumentType}
     * @memberof SupportingDocumentType
     */
    documentType?: FiscalSupportingDocumentType;
    /**
     * OPERA Fiscal status.
     * @type {string}
     * @memberof SupportingDocumentType
     */
    fiscalStatus?: string;
    /**
     * String representation of the full name
     * @type {string}
     * @memberof SupportingDocumentType
     */
    fullName?: string;
    /**
     * Unique ID of the hotel
     * @type {string}
     * @memberof SupportingDocumentType
     */
    hotelId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof SupportingDocumentType
     */
    lastModifyDateTime?: string;
    /**
     * Room number of the reservation.
     * @type {string}
     * @memberof SupportingDocumentType
     */
    roomId?: string;
}

/**
 * Check if a given object implements the SupportingDocumentType interface.
 */
export function instanceOfSupportingDocumentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SupportingDocumentTypeFromJSON(json: any): SupportingDocumentType {
    return SupportingDocumentTypeFromJSONTyped(json, false);
}

export function SupportingDocumentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SupportingDocumentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'confirmationNo': !exists(json, 'confirmationNo') ? undefined : json['confirmationNo'],
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'documentCategory': !exists(json, 'documentCategory') ? undefined : FiscalSupportingDocumentCategoryFromJSON(json['documentCategory']),
        'documentDate': !exists(json, 'documentDate') ? undefined : (new Date(json['documentDate'])),
        'documentNo': !exists(json, 'documentNo') ? undefined : json['documentNo'],
        'documentType': !exists(json, 'documentType') ? undefined : FiscalSupportingDocumentTypeFromJSON(json['documentType']),
        'fiscalStatus': !exists(json, 'fiscalStatus') ? undefined : json['fiscalStatus'],
        'fullName': !exists(json, 'fullName') ? undefined : json['fullName'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
    };
}

export function SupportingDocumentTypeToJSON(value?: SupportingDocumentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'confirmationNo': value.confirmationNo,
        'createDateTime': value.createDateTime,
        'documentCategory': FiscalSupportingDocumentCategoryToJSON(value.documentCategory),
        'documentDate': value.documentDate === undefined ? undefined : (value.documentDate.toISOString().substring(0,10)),
        'documentNo': value.documentNo,
        'documentType': FiscalSupportingDocumentTypeToJSON(value.documentType),
        'fiscalStatus': value.fiscalStatus,
        'fullName': value.fullName,
        'hotelId': value.hotelId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'roomId': value.roomId,
    };
}

