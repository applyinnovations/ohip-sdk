/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationIdList } from './ReservationIdList';
import {
    ReservationIdListFromJSON,
    ReservationIdListFromJSONTyped,
    ReservationIdListToJSON,
} from './ReservationIdList';
import type { UniqueIDListType } from './UniqueIDListType';
import {
    UniqueIDListTypeFromJSON,
    UniqueIDListTypeFromJSONTyped,
    UniqueIDListTypeToJSON,
} from './UniqueIDListType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Transactions can be transferred to either a FolioWindow Number of the same reservation or to another Inhouse Reservation.
 * @export
 * @interface TrxTransferCriteriaType
 */
export interface TrxTransferCriteriaType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof TrxTransferCriteriaType
     */
    authorizerId?: UniqueIDType;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof TrxTransferCriteriaType
     */
    cashierId?: number;
    /**
     * Property code.
     * @type {string}
     * @memberof TrxTransferCriteriaType
     */
    hotelId?: string;
    /**
     * Unique ID of Membership.
     * @type {number}
     * @memberof TrxTransferCriteriaType
     */
    membershipIdNo?: number;
    /**
     * 
     * @type {ReservationIdList}
     * @memberof TrxTransferCriteriaType
     */
    reservationIdList?: ReservationIdList;
    /**
     * Folio Window Number to where transactions will be transfered.
     * @type {number}
     * @memberof TrxTransferCriteriaType
     */
    targetFolioWindowNo?: number;
    /**
     * 
     * @type {UniqueIDListType}
     * @memberof TrxTransferCriteriaType
     */
    targetReservationIdList?: UniqueIDListType;
    /**
     * List of transactions to be transfered.
     * @type {Array<number>}
     * @memberof TrxTransferCriteriaType
     */
    transactionList?: Array<number>;
}

/**
 * Check if a given object implements the TrxTransferCriteriaType interface.
 */
export function instanceOfTrxTransferCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrxTransferCriteriaTypeFromJSON(json: any): TrxTransferCriteriaType {
    return TrxTransferCriteriaTypeFromJSONTyped(json, false);
}

export function TrxTransferCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrxTransferCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizerId': !exists(json, 'authorizerId') ? undefined : UniqueIDTypeFromJSON(json['authorizerId']),
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'membershipIdNo': !exists(json, 'membershipIdNo') ? undefined : json['membershipIdNo'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ReservationIdListFromJSON(json['reservationIdList']),
        'targetFolioWindowNo': !exists(json, 'targetFolioWindowNo') ? undefined : json['targetFolioWindowNo'],
        'targetReservationIdList': !exists(json, 'targetReservationIdList') ? undefined : UniqueIDListTypeFromJSON(json['targetReservationIdList']),
        'transactionList': !exists(json, 'transactionList') ? undefined : json['transactionList'],
    };
}

export function TrxTransferCriteriaTypeToJSON(value?: TrxTransferCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizerId': UniqueIDTypeToJSON(value.authorizerId),
        'cashierId': value.cashierId,
        'hotelId': value.hotelId,
        'membershipIdNo': value.membershipIdNo,
        'reservationIdList': ReservationIdListToJSON(value.reservationIdList),
        'targetFolioWindowNo': value.targetFolioWindowNo,
        'targetReservationIdList': UniqueIDListTypeToJSON(value.targetReservationIdList),
        'transactionList': value.transactionList,
    };
}

