/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Type used in cashier closure to specify a cashier's shift.
 * @export
 * @interface CashierClosureNoType
 */
export interface CashierClosureNoType {
    /**
     * Cashier closure shift drop location code.
     * @type {string}
     * @memberof CashierClosureNoType
     */
    shiftDropLocationCode?: string;
    /**
     * Cashier closure shift drop others payment method type bag number.
     * @type {string}
     * @memberof CashierClosureNoType
     */
    bagNumberForOthers?: string;
    /**
     * Cashier closure shift drop cash payment method type bag number.
     * @type {string}
     * @memberof CashierClosureNoType
     */
    bagNumberForCash?: string;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof CashierClosureNoType
     */
    cashierId?: number;
    /**
     * The Cashier Shift Number.
     * @type {number}
     * @memberof CashierClosureNoType
     */
    closureNo?: number;
}

/**
 * Check if a given object implements the CashierClosureNoType interface.
 */
export function instanceOfCashierClosureNoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CashierClosureNoTypeFromJSON(json: any): CashierClosureNoType {
    return CashierClosureNoTypeFromJSONTyped(json, false);
}

export function CashierClosureNoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CashierClosureNoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shiftDropLocationCode': !exists(json, 'shiftDropLocationCode') ? undefined : json['shiftDropLocationCode'],
        'bagNumberForOthers': !exists(json, 'bagNumberForOthers') ? undefined : json['bagNumberForOthers'],
        'bagNumberForCash': !exists(json, 'bagNumberForCash') ? undefined : json['bagNumberForCash'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'closureNo': !exists(json, 'closureNo') ? undefined : json['closureNo'],
    };
}

export function CashierClosureNoTypeToJSON(value?: CashierClosureNoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shiftDropLocationCode': value.shiftDropLocationCode,
        'bagNumberForOthers': value.bagNumberForOthers,
        'bagNumberForCash': value.bagNumberForCash,
        'cashierId': value.cashierId,
        'closureNo': value.closureNo,
    };
}

