/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Request to reinstate checkout reservation in order to post additional transactions, etc.
 * @export
 * @interface ReinstateCheckedOutReservation
 */
export interface ReinstateCheckedOutReservation {
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof ReinstateCheckedOutReservation
     */
    cashierId?: number;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof ReinstateCheckedOutReservation
     */
    hotelId?: string;
    /**
     * 
     * @type {Links}
     * @memberof ReinstateCheckedOutReservation
     */
    links?: Links;
    /**
     * Indicates whether interfaces should be notified.
     * @type {boolean}
     * @memberof ReinstateCheckedOutReservation
     */
    notifyInterfaces?: boolean;
    /**
     * Indicate whether user wants to reinstate even if some other guest already checked in into same room.
     * @type {boolean}
     * @memberof ReinstateCheckedOutReservation
     */
    overrideFlag?: boolean;
    /**
     * 
     * @type {ReservationId}
     * @memberof ReinstateCheckedOutReservation
     */
    reservationId?: ReservationId;
    /**
     * 
     * @type {WarningsType}
     * @memberof ReinstateCheckedOutReservation
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the ReinstateCheckedOutReservation interface.
 */
export function instanceOfReinstateCheckedOutReservation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReinstateCheckedOutReservationFromJSON(json: any): ReinstateCheckedOutReservation {
    return ReinstateCheckedOutReservationFromJSONTyped(json, false);
}

export function ReinstateCheckedOutReservationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReinstateCheckedOutReservation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'notifyInterfaces': !exists(json, 'notifyInterfaces') ? undefined : json['notifyInterfaces'],
        'overrideFlag': !exists(json, 'overrideFlag') ? undefined : json['overrideFlag'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function ReinstateCheckedOutReservationToJSON(value?: ReinstateCheckedOutReservation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cashierId': value.cashierId,
        'hotelId': value.hotelId,
        'links': LinksToJSON(value.links),
        'notifyInterfaces': value.notifyInterfaces,
        'overrideFlag': value.overrideFlag,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

