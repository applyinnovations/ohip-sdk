/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for fetching a membership transaction.
 * @export
 * @interface AwardPaymentDetails
 */
export interface AwardPaymentDetails {
    /**
     * Type of award that is used to redeem points.
     * @type {string}
     * @memberof AwardPaymentDetails
     */
    awardType?: string;
    /**
     * A monetary amount representing the outstanding balance.
     * @type {number}
     * @memberof AwardPaymentDetails
     */
    billAmount?: number;
    /**
     * Folio Window.
     * @type {number}
     * @memberof AwardPaymentDetails
     */
    folioView?: number;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof AwardPaymentDetails
     */
    links?: Array<InstanceLink>;
    /**
     * The number of points that are redeemed for this award.
     * @type {number}
     * @memberof AwardPaymentDetails
     */
    pointsRequired?: number;
    /**
     * The value of amount or points that is being redeemed.
     * @type {number}
     * @memberof AwardPaymentDetails
     */
    redeemAmount?: number;
    /**
     * Voucher number of redeemed award.
     * @type {string}
     * @memberof AwardPaymentDetails
     */
    voucherNo?: string;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof AwardPaymentDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the AwardPaymentDetails interface.
 */
export function instanceOfAwardPaymentDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AwardPaymentDetailsFromJSON(json: any): AwardPaymentDetails {
    return AwardPaymentDetailsFromJSONTyped(json, false);
}

export function AwardPaymentDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AwardPaymentDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'awardType': !exists(json, 'awardType') ? undefined : json['awardType'],
        'billAmount': !exists(json, 'billAmount') ? undefined : json['billAmount'],
        'folioView': !exists(json, 'folioView') ? undefined : json['folioView'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'pointsRequired': !exists(json, 'pointsRequired') ? undefined : json['pointsRequired'],
        'redeemAmount': !exists(json, 'redeemAmount') ? undefined : json['redeemAmount'],
        'voucherNo': !exists(json, 'voucherNo') ? undefined : json['voucherNo'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function AwardPaymentDetailsToJSON(value?: AwardPaymentDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'awardType': value.awardType,
        'billAmount': value.billAmount,
        'folioView': value.folioView,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'pointsRequired': value.pointsRequired,
        'redeemAmount': value.redeemAmount,
        'voucherNo': value.voucherNo,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

