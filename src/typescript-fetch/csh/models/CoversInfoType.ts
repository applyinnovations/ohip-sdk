/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Type to provide the information related to covers based on the transaction code and date.
 * @export
 * @interface CoversInfoType
 */
export interface CoversInfoType {
    /**
     * Unique transaction code.
     * @type {string}
     * @memberof CoversInfoType
     */
    transactionCode?: string;
    /**
     * Transaction description.
     * @type {string}
     * @memberof CoversInfoType
     */
    transactionDescription?: string;
    /**
     * Date on which needs to be searched for covers.
     * @type {string}
     * @memberof CoversInfoType
     */
    coversDate?: string;
    /**
     * Total revenue for the transaction code today
     * @type {number}
     * @memberof CoversInfoType
     */
    revenueToday?: number;
    /**
     * Covers for current date i.e., Today.
     * @type {number}
     * @memberof CoversInfoType
     */
    coversToday?: number;
    /**
     * Journal of the covers posted.
     * @type {number}
     * @memberof CoversInfoType
     */
    coversJournal?: number;
    /**
     * Covers posted from Month to Date.
     * @type {number}
     * @memberof CoversInfoType
     */
    coversMtd?: number;
    /**
     * Covers posted from Year to Date.
     * @type {number}
     * @memberof CoversInfoType
     */
    coversYtd?: number;
}

/**
 * Check if a given object implements the CoversInfoType interface.
 */
export function instanceOfCoversInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CoversInfoTypeFromJSON(json: any): CoversInfoType {
    return CoversInfoTypeFromJSONTyped(json, false);
}

export function CoversInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoversInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionDescription': !exists(json, 'transactionDescription') ? undefined : json['transactionDescription'],
        'coversDate': !exists(json, 'coversDate') ? undefined : json['coversDate'],
        'revenueToday': !exists(json, 'revenueToday') ? undefined : json['revenueToday'],
        'coversToday': !exists(json, 'coversToday') ? undefined : json['coversToday'],
        'coversJournal': !exists(json, 'coversJournal') ? undefined : json['coversJournal'],
        'coversMtd': !exists(json, 'coversMtd') ? undefined : json['coversMtd'],
        'coversYtd': !exists(json, 'coversYtd') ? undefined : json['coversYtd'],
    };
}

export function CoversInfoTypeToJSON(value?: CoversInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactionCode': value.transactionCode,
        'transactionDescription': value.transactionDescription,
        'coversDate': value.coversDate,
        'revenueToday': value.revenueToday,
        'coversToday': value.coversToday,
        'coversJournal': value.coversJournal,
        'coversMtd': value.coversMtd,
        'coversYtd': value.coversYtd,
    };
}

