/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { DetailPostingsType } from './DetailPostingsType';
import {
    DetailPostingsTypeFromJSON,
    DetailPostingsTypeFromJSONTyped,
    DetailPostingsTypeToJSON,
} from './DetailPostingsType';
import type { TrxCodesInfoType } from './TrxCodesInfoType';
import {
    TrxCodesInfoTypeFromJSON,
    TrxCodesInfoTypeFromJSONTyped,
    TrxCodesInfoTypeToJSON,
} from './TrxCodesInfoType';

/**
 * Collection of Reservations and their information.
 * @export
 * @interface FinancialPostingsType
 */
export interface FinancialPostingsType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    overallTotal?: CurrencyAmountType;
    /**
     * 
     * @type {DetailPostingsType}
     * @memberof FinancialPostingsType
     */
    postings?: DetailPostingsType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    totalCredit?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    totalDebit?: CurrencyAmountType;
    /**
     * Indicates the number of journal entries.
     * @type {number}
     * @memberof FinancialPostingsType
     */
    totalEntriesCount?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FinancialPostingsType
     */
    totalForAllPages?: CurrencyAmountType;
    /**
     * 
     * @type {TrxCodesInfoType}
     * @memberof FinancialPostingsType
     */
    transactionCodes?: TrxCodesInfoType;
}

/**
 * Check if a given object implements the FinancialPostingsType interface.
 */
export function instanceOfFinancialPostingsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FinancialPostingsTypeFromJSON(json: any): FinancialPostingsType {
    return FinancialPostingsTypeFromJSONTyped(json, false);
}

export function FinancialPostingsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FinancialPostingsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'overallTotal': !exists(json, 'overallTotal') ? undefined : CurrencyAmountTypeFromJSON(json['overallTotal']),
        'postings': !exists(json, 'postings') ? undefined : DetailPostingsTypeFromJSON(json['postings']),
        'totalCredit': !exists(json, 'totalCredit') ? undefined : CurrencyAmountTypeFromJSON(json['totalCredit']),
        'totalDebit': !exists(json, 'totalDebit') ? undefined : CurrencyAmountTypeFromJSON(json['totalDebit']),
        'totalEntriesCount': !exists(json, 'totalEntriesCount') ? undefined : json['totalEntriesCount'],
        'totalForAllPages': !exists(json, 'totalForAllPages') ? undefined : CurrencyAmountTypeFromJSON(json['totalForAllPages']),
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : TrxCodesInfoTypeFromJSON(json['transactionCodes']),
    };
}

export function FinancialPostingsTypeToJSON(value?: FinancialPostingsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'overallTotal': CurrencyAmountTypeToJSON(value.overallTotal),
        'postings': DetailPostingsTypeToJSON(value.postings),
        'totalCredit': CurrencyAmountTypeToJSON(value.totalCredit),
        'totalDebit': CurrencyAmountTypeToJSON(value.totalDebit),
        'totalEntriesCount': value.totalEntriesCount,
        'totalForAllPages': CurrencyAmountTypeToJSON(value.totalForAllPages),
        'transactionCodes': TrxCodesInfoTypeToJSON(value.transactionCodes),
    };
}

