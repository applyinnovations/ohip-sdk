/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Point of Sale of reservation. Identifies the entity/channel who made the reservation.
 * @export
 * @interface SourceOfSaleType
 */
export interface SourceOfSaleType {
    /**
     * Type of entity/channel who made the reservation..
     * @type {string}
     * @memberof SourceOfSaleType
     */
    sourceType?: string;
    /**
     * The entity/channel who made the reservation.
     * @type {string}
     * @memberof SourceOfSaleType
     */
    sourceCode?: string;
}

/**
 * Check if a given object implements the SourceOfSaleType interface.
 */
export function instanceOfSourceOfSaleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SourceOfSaleTypeFromJSON(json: any): SourceOfSaleType {
    return SourceOfSaleTypeFromJSONTyped(json, false);
}

export function SourceOfSaleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SourceOfSaleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceType': !exists(json, 'sourceType') ? undefined : json['sourceType'],
        'sourceCode': !exists(json, 'sourceCode') ? undefined : json['sourceCode'],
    };
}

export function SourceOfSaleTypeToJSON(value?: SourceOfSaleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceType': value.sourceType,
        'sourceCode': value.sourceCode,
    };
}

