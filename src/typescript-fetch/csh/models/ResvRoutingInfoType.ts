/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationInfoType } from './ReservationInfoType';
import {
    ReservationInfoTypeFromJSON,
    ReservationInfoTypeFromJSONTyped,
    ReservationInfoTypeToJSON,
} from './ReservationInfoType';
import type { ResvRoutingInfoTypeComp } from './ResvRoutingInfoTypeComp';
import {
    ResvRoutingInfoTypeCompFromJSON,
    ResvRoutingInfoTypeCompFromJSONTyped,
    ResvRoutingInfoTypeCompToJSON,
} from './ResvRoutingInfoTypeComp';
import type { ResvRoutingInfoTypeFolio } from './ResvRoutingInfoTypeFolio';
import {
    ResvRoutingInfoTypeFolioFromJSON,
    ResvRoutingInfoTypeFolioFromJSONTyped,
    ResvRoutingInfoTypeFolioToJSON,
} from './ResvRoutingInfoTypeFolio';
import type { ResvRoutingInfoTypeRequest } from './ResvRoutingInfoTypeRequest';
import {
    ResvRoutingInfoTypeRequestFromJSON,
    ResvRoutingInfoTypeRequestFromJSONTyped,
    ResvRoutingInfoTypeRequestToJSON,
} from './ResvRoutingInfoTypeRequest';
import type { ResvRoutingInfoTypeRoom } from './ResvRoutingInfoTypeRoom';
import {
    ResvRoutingInfoTypeRoomFromJSON,
    ResvRoutingInfoTypeRoomFromJSONTyped,
    ResvRoutingInfoTypeRoomToJSON,
} from './ResvRoutingInfoTypeRoom';

/**
 * A routing info object can either be of type Folio OR of type Room with its corresponding object.
 * @export
 * @interface ResvRoutingInfoType
 */
export interface ResvRoutingInfoType {
    /**
     * 
     * @type {ResvRoutingInfoTypeFolio}
     * @memberof ResvRoutingInfoType
     */
    folio?: ResvRoutingInfoTypeFolio;
    /**
     * 
     * @type {ResvRoutingInfoTypeRoom}
     * @memberof ResvRoutingInfoType
     */
    room?: ResvRoutingInfoTypeRoom;
    /**
     * 
     * @type {ResvRoutingInfoTypeComp}
     * @memberof ResvRoutingInfoType
     */
    comp?: ResvRoutingInfoTypeComp;
    /**
     * 
     * @type {ResvRoutingInfoTypeRequest}
     * @memberof ResvRoutingInfoType
     */
    request?: ResvRoutingInfoTypeRequest;
    /**
     * On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions.
     * @type {boolean}
     * @memberof ResvRoutingInfoType
     */
    refreshFolio?: boolean;
    /**
     * 
     * @type {ReservationInfoType}
     * @memberof ResvRoutingInfoType
     */
    reservationInfo?: ReservationInfoType;
}

/**
 * Check if a given object implements the ResvRoutingInfoType interface.
 */
export function instanceOfResvRoutingInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResvRoutingInfoTypeFromJSON(json: any): ResvRoutingInfoType {
    return ResvRoutingInfoTypeFromJSONTyped(json, false);
}

export function ResvRoutingInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResvRoutingInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'folio': !exists(json, 'folio') ? undefined : ResvRoutingInfoTypeFolioFromJSON(json['folio']),
        'room': !exists(json, 'room') ? undefined : ResvRoutingInfoTypeRoomFromJSON(json['room']),
        'comp': !exists(json, 'comp') ? undefined : ResvRoutingInfoTypeCompFromJSON(json['comp']),
        'request': !exists(json, 'request') ? undefined : ResvRoutingInfoTypeRequestFromJSON(json['request']),
        'refreshFolio': !exists(json, 'refreshFolio') ? undefined : json['refreshFolio'],
        'reservationInfo': !exists(json, 'reservationInfo') ? undefined : ReservationInfoTypeFromJSON(json['reservationInfo']),
    };
}

export function ResvRoutingInfoTypeToJSON(value?: ResvRoutingInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'folio': ResvRoutingInfoTypeFolioToJSON(value.folio),
        'room': ResvRoutingInfoTypeRoomToJSON(value.room),
        'comp': ResvRoutingInfoTypeCompToJSON(value.comp),
        'request': ResvRoutingInfoTypeRequestToJSON(value.request),
        'refreshFolio': value.refreshFolio,
        'reservationInfo': ReservationInfoTypeToJSON(value.reservationInfo),
    };
}

