/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria to validate and change payee tax number.
 * @export
 * @interface ChangePayeeTaxNumberCriteriaType
 */
export interface ChangePayeeTaxNumberCriteriaType {
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof ChangePayeeTaxNumberCriteriaType
     */
    cashierId?: number;
    /**
     * Property code.
     * @type {string}
     * @memberof ChangePayeeTaxNumberCriteriaType
     */
    hotelId?: string;
    /**
     * Flag to ignore warnings while updating a payee folio tax number.
     * @type {boolean}
     * @memberof ChangePayeeTaxNumberCriteriaType
     */
    ignoreWarnings?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChangePayeeTaxNumberCriteriaType
     */
    payeeId?: UniqueIDType;
    /**
     * Payee Tax Number.
     * @type {string}
     * @memberof ChangePayeeTaxNumberCriteriaType
     */
    taxNumber?: string;
}

/**
 * Check if a given object implements the ChangePayeeTaxNumberCriteriaType interface.
 */
export function instanceOfChangePayeeTaxNumberCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangePayeeTaxNumberCriteriaTypeFromJSON(json: any): ChangePayeeTaxNumberCriteriaType {
    return ChangePayeeTaxNumberCriteriaTypeFromJSONTyped(json, false);
}

export function ChangePayeeTaxNumberCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangePayeeTaxNumberCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'ignoreWarnings': !exists(json, 'ignoreWarnings') ? undefined : json['ignoreWarnings'],
        'payeeId': !exists(json, 'payeeId') ? undefined : UniqueIDTypeFromJSON(json['payeeId']),
        'taxNumber': !exists(json, 'taxNumber') ? undefined : json['taxNumber'],
    };
}

export function ChangePayeeTaxNumberCriteriaTypeToJSON(value?: ChangePayeeTaxNumberCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cashierId': value.cashierId,
        'hotelId': value.hotelId,
        'ignoreWarnings': value.ignoreWarnings,
        'payeeId': UniqueIDTypeToJSON(value.payeeId),
        'taxNumber': value.taxNumber,
    };
}

