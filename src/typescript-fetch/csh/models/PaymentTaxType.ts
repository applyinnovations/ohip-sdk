/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { PaymentTax } from './PaymentTax';
import {
    PaymentTaxFromJSON,
    PaymentTaxFromJSONTyped,
    PaymentTaxToJSON,
} from './PaymentTax';

/**
 * Information regarding payments made which have Payment Tax.
 * @export
 * @interface PaymentTaxType
 */
export interface PaymentTaxType {
    /**
     * The Tax Invoice for this payment.
     * @type {string}
     * @memberof PaymentTaxType
     */
    taxInvoiceNo?: string;
    /**
     * 
     * @type {PaymentTax}
     * @memberof PaymentTaxType
     */
    paymentType?: PaymentTax;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PaymentTaxType
     */
    amount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PaymentTaxType
     */
    taxableAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PaymentTaxType
     */
    nonTaxableAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PaymentTaxType
     */
    availableCredit?: CurrencyAmountType;
    /**
     * The Payment Invoice date
     * @type {string}
     * @memberof PaymentTaxType
     */
    paymentDate?: string;
    /**
     * Unique Transaction Identifier.
     * @type {number}
     * @memberof PaymentTaxType
     */
    transactionNo?: number;
    /**
     * Transaction Date of the Payment.
     * @type {string}
     * @memberof PaymentTaxType
     */
    transactionDate?: string;
    /**
     * Billing Transaction Code of the Payment.
     * @type {string}
     * @memberof PaymentTaxType
     */
    transactionCode?: string;
    /**
     * Billing Transaction Description.
     * @type {string}
     * @memberof PaymentTaxType
     */
    transactionDescription?: string;
    /**
     * 
     * @type {number}
     * @memberof PaymentTaxType
     */
    folioWindowNo?: number;
}

/**
 * Check if a given object implements the PaymentTaxType interface.
 */
export function instanceOfPaymentTaxType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentTaxTypeFromJSON(json: any): PaymentTaxType {
    return PaymentTaxTypeFromJSONTyped(json, false);
}

export function PaymentTaxTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentTaxType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taxInvoiceNo': !exists(json, 'taxInvoiceNo') ? undefined : json['taxInvoiceNo'],
        'paymentType': !exists(json, 'paymentType') ? undefined : PaymentTaxFromJSON(json['paymentType']),
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'taxableAmount': !exists(json, 'taxableAmount') ? undefined : CurrencyAmountTypeFromJSON(json['taxableAmount']),
        'nonTaxableAmount': !exists(json, 'nonTaxableAmount') ? undefined : CurrencyAmountTypeFromJSON(json['nonTaxableAmount']),
        'availableCredit': !exists(json, 'availableCredit') ? undefined : CurrencyAmountTypeFromJSON(json['availableCredit']),
        'paymentDate': !exists(json, 'paymentDate') ? undefined : json['paymentDate'],
        'transactionNo': !exists(json, 'transactionNo') ? undefined : json['transactionNo'],
        'transactionDate': !exists(json, 'transactionDate') ? undefined : json['transactionDate'],
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionDescription': !exists(json, 'transactionDescription') ? undefined : json['transactionDescription'],
        'folioWindowNo': !exists(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
    };
}

export function PaymentTaxTypeToJSON(value?: PaymentTaxType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taxInvoiceNo': value.taxInvoiceNo,
        'paymentType': PaymentTaxToJSON(value.paymentType),
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'taxableAmount': CurrencyAmountTypeToJSON(value.taxableAmount),
        'nonTaxableAmount': CurrencyAmountTypeToJSON(value.nonTaxableAmount),
        'availableCredit': CurrencyAmountTypeToJSON(value.availableCredit),
        'paymentDate': value.paymentDate,
        'transactionNo': value.transactionNo,
        'transactionDate': value.transactionDate,
        'transactionCode': value.transactionCode,
        'transactionDescription': value.transactionDescription,
        'folioWindowNo': value.folioWindowNo,
    };
}

