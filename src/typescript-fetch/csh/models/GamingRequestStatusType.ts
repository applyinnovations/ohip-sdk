/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Type that holds guest request status details.
 * @export
 * @interface GamingRequestStatusType
 */
export interface GamingRequestStatusType {
    /**
     * Hotel code corresponding to the transaction.
     * @type {string}
     * @memberof GamingRequestStatusType
     */
    hotelId?: string;
    /**
     * Message Id from the External System.
     * @type {number}
     * @memberof GamingRequestStatusType
     */
    messageId?: number;
    /**
     * Message sent from the External System regarding the status of this request.
     * @type {string}
     * @memberof GamingRequestStatusType
     */
    messageText?: string;
    /**
     * Date the request was sent.
     * @type {Date}
     * @memberof GamingRequestStatusType
     */
    requestDate?: Date;
    /**
     * Status of the request.
     * @type {string}
     * @memberof GamingRequestStatusType
     */
    status?: string;
    /**
     * Status code from the External System..
     * @type {string}
     * @memberof GamingRequestStatusType
     */
    statusCode?: string;
}

/**
 * Check if a given object implements the GamingRequestStatusType interface.
 */
export function instanceOfGamingRequestStatusType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GamingRequestStatusTypeFromJSON(json: any): GamingRequestStatusType {
    return GamingRequestStatusTypeFromJSONTyped(json, false);
}

export function GamingRequestStatusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GamingRequestStatusType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'messageId': !exists(json, 'messageId') ? undefined : json['messageId'],
        'messageText': !exists(json, 'messageText') ? undefined : json['messageText'],
        'requestDate': !exists(json, 'requestDate') ? undefined : (new Date(json['requestDate'])),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
    };
}

export function GamingRequestStatusTypeToJSON(value?: GamingRequestStatusType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'messageId': value.messageId,
        'messageText': value.messageText,
        'requestDate': value.requestDate === undefined ? undefined : (value.requestDate.toISOString().substr(0,10)),
        'status': value.status,
        'statusCode': value.statusCode,
    };
}

