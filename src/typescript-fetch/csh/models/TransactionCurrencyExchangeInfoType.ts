/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Details of the Exchange Information for this transaction, if the posting was made in a currency different from the default currency.
 * @export
 * @interface TransactionCurrencyExchangeInfoType
 */
export interface TransactionCurrencyExchangeInfoType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof TransactionCurrencyExchangeInfoType
     */
    amount?: CurrencyAmountType;
    /**
     * Foreign Currency Code of the currency which was used to post this transaction.
     * @type {string}
     * @memberof TransactionCurrencyExchangeInfoType
     */
    code?: string;
    /**
     * Percentage for commission used for the currency conversion.
     * @type {number}
     * @memberof TransactionCurrencyExchangeInfoType
     */
    commissionPercent?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof TransactionCurrencyExchangeInfoType
     */
    currencyAmount?: CurrencyAmountType;
    /**
     * Description or reference for this exchange.
     * @type {string}
     * @memberof TransactionCurrencyExchangeInfoType
     */
    description?: string;
    /**
     * The date when this exchange rate was set.
     * @type {string}
     * @memberof TransactionCurrencyExchangeInfoType
     */
    exchangeDate?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof TransactionCurrencyExchangeInfoType
     */
    exchangeRate?: CurrencyAmountType;
}

/**
 * Check if a given object implements the TransactionCurrencyExchangeInfoType interface.
 */
export function instanceOfTransactionCurrencyExchangeInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionCurrencyExchangeInfoTypeFromJSON(json: any): TransactionCurrencyExchangeInfoType {
    return TransactionCurrencyExchangeInfoTypeFromJSONTyped(json, false);
}

export function TransactionCurrencyExchangeInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionCurrencyExchangeInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'commissionPercent': !exists(json, 'commissionPercent') ? undefined : json['commissionPercent'],
        'currencyAmount': !exists(json, 'currencyAmount') ? undefined : CurrencyAmountTypeFromJSON(json['currencyAmount']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'exchangeDate': !exists(json, 'exchangeDate') ? undefined : json['exchangeDate'],
        'exchangeRate': !exists(json, 'exchangeRate') ? undefined : CurrencyAmountTypeFromJSON(json['exchangeRate']),
    };
}

export function TransactionCurrencyExchangeInfoTypeToJSON(value?: TransactionCurrencyExchangeInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'code': value.code,
        'commissionPercent': value.commissionPercent,
        'currencyAmount': CurrencyAmountTypeToJSON(value.currencyAmount),
        'description': value.description,
        'exchangeDate': value.exchangeDate,
        'exchangeRate': CurrencyAmountTypeToJSON(value.exchangeRate),
    };
}

