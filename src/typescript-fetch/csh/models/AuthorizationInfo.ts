/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthorizationInfoType } from './AuthorizationInfoType';
import {
    AuthorizationInfoTypeFromJSON,
    AuthorizationInfoTypeFromJSONTyped,
    AuthorizationInfoTypeToJSON,
} from './AuthorizationInfoType';
import type { CashieringPaymentMethodType } from './CashieringPaymentMethodType';
import {
    CashieringPaymentMethodTypeFromJSON,
    CashieringPaymentMethodTypeFromJSONTyped,
    CashieringPaymentMethodTypeToJSON,
} from './CashieringPaymentMethodType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response to the credit card authorization request.
 * @export
 * @interface AuthorizationInfo
 */
export interface AuthorizationInfo {
    /**
     * 
     * @type {AuthorizationInfoType}
     * @memberof AuthorizationInfo
     */
    authInfo?: AuthorizationInfoType;
    /**
     * 
     * @type {CashieringPaymentMethodType}
     * @memberof AuthorizationInfo
     */
    payment?: CashieringPaymentMethodType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof AuthorizationInfo
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof AuthorizationInfo
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the AuthorizationInfo interface.
 */
export function instanceOfAuthorizationInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthorizationInfoFromJSON(json: any): AuthorizationInfo {
    return AuthorizationInfoFromJSONTyped(json, false);
}

export function AuthorizationInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthorizationInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authInfo': !exists(json, 'authInfo') ? undefined : AuthorizationInfoTypeFromJSON(json['authInfo']),
        'payment': !exists(json, 'payment') ? undefined : CashieringPaymentMethodTypeFromJSON(json['payment']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function AuthorizationInfoToJSON(value?: AuthorizationInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authInfo': AuthorizationInfoTypeToJSON(value.authInfo),
        'payment': CashieringPaymentMethodTypeToJSON(value.payment),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

