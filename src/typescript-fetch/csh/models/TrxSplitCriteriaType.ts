/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TrxSplitCriteriaTypeSplitDetails } from './TrxSplitCriteriaTypeSplitDetails';
import {
    TrxSplitCriteriaTypeSplitDetailsFromJSON,
    TrxSplitCriteriaTypeSplitDetailsFromJSONTyped,
    TrxSplitCriteriaTypeSplitDetailsToJSON,
} from './TrxSplitCriteriaTypeSplitDetails';

/**
 * Criteria which should be used for Splitting a financial transaction which belongs to a reservation.
 * @export
 * @interface TrxSplitCriteriaType
 */
export interface TrxSplitCriteriaType {
    /**
     * Property code where the reservation transaction exists.
     * @type {string}
     * @memberof TrxSplitCriteriaType
     */
    hotelId?: string;
    /**
     * The unique transaction number of this transaction.
     * @type {Array<number>}
     * @memberof TrxSplitCriteriaType
     */
    transactionList?: Array<number>;
    /**
     * 
     * @type {TrxSplitCriteriaTypeSplitDetails}
     * @memberof TrxSplitCriteriaType
     */
    splitDetails?: TrxSplitCriteriaTypeSplitDetails;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof TrxSplitCriteriaType
     */
    cashierId?: number;
}

/**
 * Check if a given object implements the TrxSplitCriteriaType interface.
 */
export function instanceOfTrxSplitCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrxSplitCriteriaTypeFromJSON(json: any): TrxSplitCriteriaType {
    return TrxSplitCriteriaTypeFromJSONTyped(json, false);
}

export function TrxSplitCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrxSplitCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'transactionList': !exists(json, 'transactionList') ? undefined : json['transactionList'],
        'splitDetails': !exists(json, 'splitDetails') ? undefined : TrxSplitCriteriaTypeSplitDetailsFromJSON(json['splitDetails']),
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
    };
}

export function TrxSplitCriteriaTypeToJSON(value?: TrxSplitCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'transactionList': value.transactionList,
        'splitDetails': TrxSplitCriteriaTypeSplitDetailsToJSON(value.splitDetails),
        'cashierId': value.cashierId,
    };
}

