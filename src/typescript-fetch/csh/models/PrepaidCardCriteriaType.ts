/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { PrepaidCardDetailsType } from './PrepaidCardDetailsType';
import {
    PrepaidCardDetailsTypeFromJSON,
    PrepaidCardDetailsTypeFromJSONTyped,
    PrepaidCardDetailsTypeToJSON,
} from './PrepaidCardDetailsType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { SaleCriteriaType } from './SaleCriteriaType';
import {
    SaleCriteriaTypeFromJSON,
    SaleCriteriaTypeFromJSONTyped,
    SaleCriteriaTypeToJSON,
} from './SaleCriteriaType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Holds fixed charge information.
 * @export
 * @interface PrepaidCardCriteriaType
 */
export interface PrepaidCardCriteriaType {
    /**
     * Hotel context for the Reservations.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    hotelId?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof PrepaidCardCriteriaType
     */
    reservationId?: ReservationId;
    /**
     * Family name, last name or Company Name.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    name?: string;
    /**
     * Given name, first name or names.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    firstName?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof PrepaidCardCriteriaType
     */
    profileId?: ProfileId;
    /**
     * Prepaid card / account number.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    cardNo?: string;
    /**
     * Masked Prepaid card / account number.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    cardNumberMasked?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardCriteriaType
     */
    amount?: CurrencyAmountType;
    /**
     * Prepaid card pin code.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    pinCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof PrepaidCardCriteriaType
     */
    interfaceId?: UniqueIDType;
    /**
     * 
     * @type {PrepaidCardDetailsType}
     * @memberof PrepaidCardCriteriaType
     */
    cardDetails?: PrepaidCardDetailsType;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    lastModifierId?: string;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {string}
     * @memberof PrepaidCardCriteriaType
     */
    purgeDate?: string;
    /**
     * Indicates a gift card type.
     * @type {boolean}
     * @memberof PrepaidCardCriteriaType
     */
    giftCard?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PrepaidCardCriteriaType
     */
    postChargeToRoom?: boolean;
    /**
     * 
     * @type {SaleCriteriaType}
     * @memberof PrepaidCardCriteriaType
     */
    saleCriteria?: SaleCriteriaType;
    /**
     * 
     * @type {number}
     * @memberof PrepaidCardCriteriaType
     */
    vendorInterfaceID?: number;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof PrepaidCardCriteriaType
     */
    cashierId?: number;
}

/**
 * Check if a given object implements the PrepaidCardCriteriaType interface.
 */
export function instanceOfPrepaidCardCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PrepaidCardCriteriaTypeFromJSON(json: any): PrepaidCardCriteriaType {
    return PrepaidCardCriteriaTypeFromJSONTyped(json, false);
}

export function PrepaidCardCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrepaidCardCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'cardNo': !exists(json, 'cardNo') ? undefined : json['cardNo'],
        'cardNumberMasked': !exists(json, 'cardNumberMasked') ? undefined : json['cardNumberMasked'],
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'pinCode': !exists(json, 'pinCode') ? undefined : json['pinCode'],
        'interfaceId': !exists(json, 'interfaceId') ? undefined : UniqueIDTypeFromJSON(json['interfaceId']),
        'cardDetails': !exists(json, 'cardDetails') ? undefined : PrepaidCardDetailsTypeFromJSON(json['cardDetails']),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : json['purgeDate'],
        'giftCard': !exists(json, 'giftCard') ? undefined : json['giftCard'],
        'postChargeToRoom': !exists(json, 'postChargeToRoom') ? undefined : json['postChargeToRoom'],
        'saleCriteria': !exists(json, 'saleCriteria') ? undefined : SaleCriteriaTypeFromJSON(json['saleCriteria']),
        'vendorInterfaceID': !exists(json, 'vendorInterfaceID') ? undefined : json['vendorInterfaceID'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
    };
}

export function PrepaidCardCriteriaTypeToJSON(value?: PrepaidCardCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'name': value.name,
        'firstName': value.firstName,
        'profileId': ProfileIdToJSON(value.profileId),
        'cardNo': value.cardNo,
        'cardNumberMasked': value.cardNumberMasked,
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'pinCode': value.pinCode,
        'interfaceId': UniqueIDTypeToJSON(value.interfaceId),
        'cardDetails': PrepaidCardDetailsTypeToJSON(value.cardDetails),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
        'purgeDate': value.purgeDate,
        'giftCard': value.giftCard,
        'postChargeToRoom': value.postChargeToRoom,
        'saleCriteria': SaleCriteriaTypeToJSON(value.saleCriteria),
        'vendorInterfaceID': value.vendorInterfaceID,
        'cashierId': value.cashierId,
    };
}

