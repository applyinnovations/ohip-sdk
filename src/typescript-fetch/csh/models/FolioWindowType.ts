/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompAccountingType } from './CompAccountingType';
import {
    CompAccountingTypeFromJSON,
    CompAccountingTypeFromJSONTyped,
    CompAccountingTypeToJSON,
} from './CompAccountingType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { FiscalFolioInstruction } from './FiscalFolioInstruction';
import {
    FiscalFolioInstructionFromJSON,
    FiscalFolioInstructionFromJSONTyped,
    FiscalFolioInstructionToJSON,
} from './FiscalFolioInstruction';
import type { FiscalResponseType } from './FiscalResponseType';
import {
    FiscalResponseTypeFromJSON,
    FiscalResponseTypeFromJSONTyped,
    FiscalResponseTypeToJSON,
} from './FiscalResponseType';
import type { FolioSplitInfoType } from './FolioSplitInfoType';
import {
    FolioSplitInfoTypeFromJSON,
    FolioSplitInfoTypeFromJSONTyped,
    FolioSplitInfoTypeToJSON,
} from './FolioSplitInfoType';
import type { FolioType } from './FolioType';
import {
    FolioTypeFromJSON,
    FolioTypeFromJSONTyped,
    FolioTypeToJSON,
} from './FolioType';
import type { FolioWindowExchangeAmounts } from './FolioWindowExchangeAmounts';
import {
    FolioWindowExchangeAmountsFromJSON,
    FolioWindowExchangeAmountsFromJSONTyped,
    FolioWindowExchangeAmountsToJSON,
} from './FolioWindowExchangeAmounts';
import type { PayeeInfoType } from './PayeeInfoType';
import {
    PayeeInfoTypeFromJSON,
    PayeeInfoTypeFromJSONTyped,
    PayeeInfoTypeToJSON,
} from './PayeeInfoType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { TransactionServiceTypeType } from './TransactionServiceTypeType';
import {
    TransactionServiceTypeTypeFromJSON,
    TransactionServiceTypeTypeFromJSONTyped,
    TransactionServiceTypeTypeToJSON,
} from './TransactionServiceTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * A folio window view which holds the set of folios for a reservation.
 * @export
 * @interface FolioWindowType
 */
export interface FolioWindowType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    revenue?: CurrencyAmountType;
    /**
     * Contains the folio split posting information.
     * @type {Array<FolioSplitInfoType>}
     * @memberof FolioWindowType
     */
    folioSplitInfo?: Array<FolioSplitInfoType>;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    payment?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    balance?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    debitRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    debitPayment?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    debitBalance?: CurrencyAmountType;
    /**
     * 
     * @type {FolioWindowExchangeAmounts}
     * @memberof FolioWindowType
     */
    exchange?: FolioWindowExchangeAmounts;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof FolioWindowType
     */
    paymentMethod?: ReservationPaymentMethodType;
    /**
     * 
     * @type {PayeeInfoType}
     * @memberof FolioWindowType
     */
    payeeInfo?: PayeeInfoType;
    /**
     * 
     * @type {CompAccountingType}
     * @memberof FolioWindowType
     */
    compAccountingInfo?: CompAccountingType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof FolioWindowType
     */
    storedFolioId?: UniqueIDType;
    /**
     * Name of the Stored Folio.
     * @type {string}
     * @memberof FolioWindowType
     */
    storedFolioName?: string;
    /**
     * 
     * @type {FiscalResponseType}
     * @memberof FolioWindowType
     */
    fiscalResponseType?: FiscalResponseType;
    /**
     * 
     * @type {FiscalFolioInstruction}
     * @memberof FolioWindowType
     */
    fiscalFolioInstruction?: FiscalFolioInstruction;
    /**
     * 
     * @type {Array<FolioType>}
     * @memberof FolioWindowType
     */
    folios?: Array<FolioType>;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof FolioWindowType
     */
    vATOffsetAmount?: CurrencyAmountType;
    /**
     * Details about service type postings.
     * @type {Array<TransactionServiceTypeType>}
     * @memberof FolioWindowType
     */
    serviceTypeInfo?: Array<TransactionServiceTypeType>;
    /**
     * 
     * @type {number}
     * @memberof FolioWindowType
     */
    folioWindowNo?: number;
    /**
     * Internal window ID which is unique to the reservation. This ID can only be used for reference.
     * @type {string}
     * @memberof FolioWindowType
     */
    internalFolioWindowID?: string;
    /**
     * Flag to notify if the current folio has any postings.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    emptyFolio?: boolean;
    /**
     * Flag to notify if the entire window has any postings.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    emptyWindow?: boolean;
    /**
     * Flag to indicate if an Official Receipt is generated for the folio window. Applicable only in the Philippines.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    officialBIRReceiptExists?: boolean;
    /**
     * This flag signifies that generated Folio is Normal or Simple Folio. Certain countries of the World mandate a simple folio when the invoice amount is less than defined threshold.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    simpleFolio?: boolean;
    /**
     * Flag to indicate the window has only payment transactions
     * @type {boolean}
     * @memberof FolioWindowType
     */
    paymentsOnly?: boolean;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof FolioWindowType
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof FolioWindowType
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof FolioWindowType
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof FolioWindowType
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof FolioWindowType
     */
    count?: number;
    /**
     * Flag to indicate if an Acknowledgement Receipt is generated for the folio window. Applicable only in the Philippines.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    ackBIRReceiptExists?: boolean;
    /**
     * The receipt number of the transaction, if there is a receipt generated.
     * @type {number}
     * @memberof FolioWindowType
     */
    receiptNo?: number;
    /**
     * Unique Transaction Identifier.
     * @type {number}
     * @memberof FolioWindowType
     */
    transactionNo?: number;
    /**
     * Indicates whether a folio window has Tax Folio transaction codes or not.
     * @type {boolean}
     * @memberof FolioWindowType
     */
    taxFolioPostingExists?: boolean;
}

/**
 * Check if a given object implements the FolioWindowType interface.
 */
export function instanceOfFolioWindowType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FolioWindowTypeFromJSON(json: any): FolioWindowType {
    return FolioWindowTypeFromJSONTyped(json, false);
}

export function FolioWindowTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolioWindowType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'revenue': !exists(json, 'revenue') ? undefined : CurrencyAmountTypeFromJSON(json['revenue']),
        'folioSplitInfo': !exists(json, 'folioSplitInfo') ? undefined : ((json['folioSplitInfo'] as Array<any>).map(FolioSplitInfoTypeFromJSON)),
        'payment': !exists(json, 'payment') ? undefined : CurrencyAmountTypeFromJSON(json['payment']),
        'balance': !exists(json, 'balance') ? undefined : CurrencyAmountTypeFromJSON(json['balance']),
        'debitRevenue': !exists(json, 'debitRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['debitRevenue']),
        'debitPayment': !exists(json, 'debitPayment') ? undefined : CurrencyAmountTypeFromJSON(json['debitPayment']),
        'debitBalance': !exists(json, 'debitBalance') ? undefined : CurrencyAmountTypeFromJSON(json['debitBalance']),
        'exchange': !exists(json, 'exchange') ? undefined : FolioWindowExchangeAmountsFromJSON(json['exchange']),
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : ReservationPaymentMethodTypeFromJSON(json['paymentMethod']),
        'payeeInfo': !exists(json, 'payeeInfo') ? undefined : PayeeInfoTypeFromJSON(json['payeeInfo']),
        'compAccountingInfo': !exists(json, 'compAccountingInfo') ? undefined : CompAccountingTypeFromJSON(json['compAccountingInfo']),
        'storedFolioId': !exists(json, 'storedFolioId') ? undefined : UniqueIDTypeFromJSON(json['storedFolioId']),
        'storedFolioName': !exists(json, 'storedFolioName') ? undefined : json['storedFolioName'],
        'fiscalResponseType': !exists(json, 'fiscalResponseType') ? undefined : FiscalResponseTypeFromJSON(json['fiscalResponseType']),
        'fiscalFolioInstruction': !exists(json, 'fiscalFolioInstruction') ? undefined : FiscalFolioInstructionFromJSON(json['fiscalFolioInstruction']),
        'folios': !exists(json, 'folios') ? undefined : ((json['folios'] as Array<any>).map(FolioTypeFromJSON)),
        'vATOffsetAmount': !exists(json, 'vATOffsetAmount') ? undefined : CurrencyAmountTypeFromJSON(json['vATOffsetAmount']),
        'serviceTypeInfo': !exists(json, 'serviceTypeInfo') ? undefined : ((json['serviceTypeInfo'] as Array<any>).map(TransactionServiceTypeTypeFromJSON)),
        'folioWindowNo': !exists(json, 'folioWindowNo') ? undefined : json['folioWindowNo'],
        'internalFolioWindowID': !exists(json, 'internalFolioWindowID') ? undefined : json['internalFolioWindowID'],
        'emptyFolio': !exists(json, 'emptyFolio') ? undefined : json['emptyFolio'],
        'emptyWindow': !exists(json, 'emptyWindow') ? undefined : json['emptyWindow'],
        'officialBIRReceiptExists': !exists(json, 'officialBIRReceiptExists') ? undefined : json['officialBIRReceiptExists'],
        'simpleFolio': !exists(json, 'simpleFolio') ? undefined : json['simpleFolio'],
        'paymentsOnly': !exists(json, 'paymentsOnly') ? undefined : json['paymentsOnly'],
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'ackBIRReceiptExists': !exists(json, 'ackBIRReceiptExists') ? undefined : json['ackBIRReceiptExists'],
        'receiptNo': !exists(json, 'receiptNo') ? undefined : json['receiptNo'],
        'transactionNo': !exists(json, 'transactionNo') ? undefined : json['transactionNo'],
        'taxFolioPostingExists': !exists(json, 'taxFolioPostingExists') ? undefined : json['taxFolioPostingExists'],
    };
}

export function FolioWindowTypeToJSON(value?: FolioWindowType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'revenue': CurrencyAmountTypeToJSON(value.revenue),
        'folioSplitInfo': value.folioSplitInfo === undefined ? undefined : ((value.folioSplitInfo as Array<any>).map(FolioSplitInfoTypeToJSON)),
        'payment': CurrencyAmountTypeToJSON(value.payment),
        'balance': CurrencyAmountTypeToJSON(value.balance),
        'debitRevenue': CurrencyAmountTypeToJSON(value.debitRevenue),
        'debitPayment': CurrencyAmountTypeToJSON(value.debitPayment),
        'debitBalance': CurrencyAmountTypeToJSON(value.debitBalance),
        'exchange': FolioWindowExchangeAmountsToJSON(value.exchange),
        'paymentMethod': ReservationPaymentMethodTypeToJSON(value.paymentMethod),
        'payeeInfo': PayeeInfoTypeToJSON(value.payeeInfo),
        'compAccountingInfo': CompAccountingTypeToJSON(value.compAccountingInfo),
        'storedFolioId': UniqueIDTypeToJSON(value.storedFolioId),
        'storedFolioName': value.storedFolioName,
        'fiscalResponseType': FiscalResponseTypeToJSON(value.fiscalResponseType),
        'fiscalFolioInstruction': FiscalFolioInstructionToJSON(value.fiscalFolioInstruction),
        'folios': value.folios === undefined ? undefined : ((value.folios as Array<any>).map(FolioTypeToJSON)),
        'vATOffsetAmount': CurrencyAmountTypeToJSON(value.vATOffsetAmount),
        'serviceTypeInfo': value.serviceTypeInfo === undefined ? undefined : ((value.serviceTypeInfo as Array<any>).map(TransactionServiceTypeTypeToJSON)),
        'folioWindowNo': value.folioWindowNo,
        'internalFolioWindowID': value.internalFolioWindowID,
        'emptyFolio': value.emptyFolio,
        'emptyWindow': value.emptyWindow,
        'officialBIRReceiptExists': value.officialBIRReceiptExists,
        'simpleFolio': value.simpleFolio,
        'paymentsOnly': value.paymentsOnly,
        'totalPages': value.totalPages,
        'offset': value.offset,
        'limit': value.limit,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
        'ackBIRReceiptExists': value.ackBIRReceiptExists,
        'receiptNo': value.receiptNo,
        'transactionNo': value.transactionNo,
        'taxFolioPostingExists': value.taxFolioPostingExists,
    };
}

