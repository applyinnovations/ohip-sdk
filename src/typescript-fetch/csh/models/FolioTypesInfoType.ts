/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Folio Types details.
 * @export
 * @interface FolioTypesInfoType
 */
export interface FolioTypesInfoType {
    /**
     * Indicates folio to be use for compress bills.
     * @type {boolean}
     * @memberof FolioTypesInfoType
     */
    compress?: boolean;
    /**
     * Indicates folio type can be used for Credit bills.
     * @type {boolean}
     * @memberof FolioTypesInfoType
     */
    credit?: boolean;
    /**
     * Fiscal Folio indicator.
     * @type {boolean}
     * @memberof FolioTypesInfoType
     */
    fiscal?: boolean;
    /**
     * Folio Type.
     * @type {string}
     * @memberof FolioTypesInfoType
     */
    folioType?: string;
    /**
     * Adding this flag at folio type level would decide to send fiscal folio (generate payload) or not.
     * @type {boolean}
     * @memberof FolioTypesInfoType
     */
    sendFiscalFolio?: boolean;
}

/**
 * Check if a given object implements the FolioTypesInfoType interface.
 */
export function instanceOfFolioTypesInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FolioTypesInfoTypeFromJSON(json: any): FolioTypesInfoType {
    return FolioTypesInfoTypeFromJSONTyped(json, false);
}

export function FolioTypesInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolioTypesInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'compress': !exists(json, 'compress') ? undefined : json['compress'],
        'credit': !exists(json, 'credit') ? undefined : json['credit'],
        'fiscal': !exists(json, 'fiscal') ? undefined : json['fiscal'],
        'folioType': !exists(json, 'folioType') ? undefined : json['folioType'],
        'sendFiscalFolio': !exists(json, 'sendFiscalFolio') ? undefined : json['sendFiscalFolio'],
    };
}

export function FolioTypesInfoTypeToJSON(value?: FolioTypesInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'compress': value.compress,
        'credit': value.credit,
        'fiscal': value.fiscal,
        'folioType': value.folioType,
        'sendFiscalFolio': value.sendFiscalFolio,
    };
}

