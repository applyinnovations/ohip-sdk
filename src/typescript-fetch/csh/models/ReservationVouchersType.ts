/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationVoucherType } from './ReservationVoucherType';
import {
    ReservationVoucherTypeFromJSON,
    ReservationVoucherTypeFromJSONTyped,
    ReservationVoucherTypeToJSON,
} from './ReservationVoucherType';

/**
 * Vouchers information of a reservation.
 * @export
 * @interface ReservationVouchersType
 */
export interface ReservationVouchersType {
    /**
     * List of vouchers associated with the reservation.
     * @type {Array<ReservationVoucherType>}
     * @memberof ReservationVouchersType
     */
    vouchers?: Array<ReservationVoucherType>;
}

/**
 * Check if a given object implements the ReservationVouchersType interface.
 */
export function instanceOfReservationVouchersType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationVouchersTypeFromJSON(json: any): ReservationVouchersType {
    return ReservationVouchersTypeFromJSONTyped(json, false);
}

export function ReservationVouchersTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationVouchersType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'vouchers': !exists(json, 'vouchers') ? undefined : ((json['vouchers'] as Array<any>).map(ReservationVoucherTypeFromJSON)),
    };
}

export function ReservationVouchersTypeToJSON(value?: ReservationVouchersType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'vouchers': value.vouchers === undefined ? undefined : ((value.vouchers as Array<any>).map(ReservationVoucherTypeToJSON)),
    };
}

