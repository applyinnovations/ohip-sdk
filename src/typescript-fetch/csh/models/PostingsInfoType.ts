/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DetailPostingsType } from './DetailPostingsType';
import {
    DetailPostingsTypeFromJSON,
    DetailPostingsTypeFromJSONTyped,
    DetailPostingsTypeToJSON,
} from './DetailPostingsType';
import type { TrxCodesInfoType } from './TrxCodesInfoType';
import {
    TrxCodesInfoTypeFromJSON,
    TrxCodesInfoTypeFromJSONTyped,
    TrxCodesInfoTypeToJSON,
} from './TrxCodesInfoType';

/**
 * This type is useful to hold the transaction details along the transaction code information.
 * @export
 * @interface PostingsInfoType
 */
export interface PostingsInfoType {
    /**
     * 
     * @type {DetailPostingsType}
     * @memberof PostingsInfoType
     */
    transactions?: DetailPostingsType;
    /**
     * 
     * @type {TrxCodesInfoType}
     * @memberof PostingsInfoType
     */
    trxCodesInfo?: TrxCodesInfoType;
}

/**
 * Check if a given object implements the PostingsInfoType interface.
 */
export function instanceOfPostingsInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PostingsInfoTypeFromJSON(json: any): PostingsInfoType {
    return PostingsInfoTypeFromJSONTyped(json, false);
}

export function PostingsInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostingsInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactions': !exists(json, 'transactions') ? undefined : DetailPostingsTypeFromJSON(json['transactions']),
        'trxCodesInfo': !exists(json, 'trxCodesInfo') ? undefined : TrxCodesInfoTypeFromJSON(json['trxCodesInfo']),
    };
}

export function PostingsInfoTypeToJSON(value?: PostingsInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactions': DetailPostingsTypeToJSON(value.transactions),
        'trxCodesInfo': TrxCodesInfoTypeToJSON(value.trxCodesInfo),
    };
}

