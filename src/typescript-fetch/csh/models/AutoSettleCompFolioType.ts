/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FolioStatusType } from './FolioStatusType';
import {
    FolioStatusTypeFromJSON,
    FolioStatusTypeFromJSONTyped,
    FolioStatusTypeToJSON,
} from './FolioStatusType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information about comp folio that was auto settled.
 * @export
 * @interface AutoSettleCompFolioType
 */
export interface AutoSettleCompFolioType {
    /**
     * The Fiscal Bill number of this posting
     * @type {string}
     * @memberof AutoSettleCompFolioType
     */
    fiscalBillNo?: string;
    /**
     * Date of Folio Generation.
     * @type {Date}
     * @memberof AutoSettleCompFolioType
     */
    folioDate?: Date;
    /**
     * Folio Number.
     * @type {number}
     * @memberof AutoSettleCompFolioType
     */
    folioNo?: number;
    /**
     * The folio number with prefix value.
     * @type {string}
     * @memberof AutoSettleCompFolioType
     */
    folioNoWithPrefix?: string;
    /**
     * Unique sequence number. Used to identify the current folio tax record.
     * @type {number}
     * @memberof AutoSettleCompFolioType
     */
    folioSeqNo?: number;
    /**
     * 
     * @type {FolioStatusType}
     * @memberof AutoSettleCompFolioType
     */
    folioStatus?: FolioStatusType;
    /**
     * The name of the Folio Type used for the Folio Number sequence.
     * @type {string}
     * @memberof AutoSettleCompFolioType
     */
    folioTypeName?: string;
    /**
     * Comp folio window that was attempted to be auto settled.
     * @type {number}
     * @memberof AutoSettleCompFolioType
     */
    folioView?: number;
    /**
     * Internal window ID which is unique to the reservation. This ID can only be used for reference.
     * @type {string}
     * @memberof AutoSettleCompFolioType
     */
    internalFolioWindowID?: string;
    /**
     * Invoice No after the folio is generated. Same invoice number may be referred in multiple folios
     * @type {number}
     * @memberof AutoSettleCompFolioType
     */
    invoiceNo?: number;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof AutoSettleCompFolioType
     */
    payeeId?: UniqueIDType;
    /**
     * Name of the payee.
     * @type {string}
     * @memberof AutoSettleCompFolioType
     */
    payeeName?: string;
}

/**
 * Check if a given object implements the AutoSettleCompFolioType interface.
 */
export function instanceOfAutoSettleCompFolioType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutoSettleCompFolioTypeFromJSON(json: any): AutoSettleCompFolioType {
    return AutoSettleCompFolioTypeFromJSONTyped(json, false);
}

export function AutoSettleCompFolioTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoSettleCompFolioType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fiscalBillNo': !exists(json, 'fiscalBillNo') ? undefined : json['fiscalBillNo'],
        'folioDate': !exists(json, 'folioDate') ? undefined : (new Date(json['folioDate'])),
        'folioNo': !exists(json, 'folioNo') ? undefined : json['folioNo'],
        'folioNoWithPrefix': !exists(json, 'folioNoWithPrefix') ? undefined : json['folioNoWithPrefix'],
        'folioSeqNo': !exists(json, 'folioSeqNo') ? undefined : json['folioSeqNo'],
        'folioStatus': !exists(json, 'folioStatus') ? undefined : FolioStatusTypeFromJSON(json['folioStatus']),
        'folioTypeName': !exists(json, 'folioTypeName') ? undefined : json['folioTypeName'],
        'folioView': !exists(json, 'folioView') ? undefined : json['folioView'],
        'internalFolioWindowID': !exists(json, 'internalFolioWindowID') ? undefined : json['internalFolioWindowID'],
        'invoiceNo': !exists(json, 'invoiceNo') ? undefined : json['invoiceNo'],
        'payeeId': !exists(json, 'payeeId') ? undefined : UniqueIDTypeFromJSON(json['payeeId']),
        'payeeName': !exists(json, 'payeeName') ? undefined : json['payeeName'],
    };
}

export function AutoSettleCompFolioTypeToJSON(value?: AutoSettleCompFolioType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fiscalBillNo': value.fiscalBillNo,
        'folioDate': value.folioDate === undefined ? undefined : (value.folioDate.toISOString().substring(0,10)),
        'folioNo': value.folioNo,
        'folioNoWithPrefix': value.folioNoWithPrefix,
        'folioSeqNo': value.folioSeqNo,
        'folioStatus': FolioStatusTypeToJSON(value.folioStatus),
        'folioTypeName': value.folioTypeName,
        'folioView': value.folioView,
        'internalFolioWindowID': value.internalFolioWindowID,
        'invoiceNo': value.invoiceNo,
        'payeeId': UniqueIDTypeToJSON(value.payeeId),
        'payeeName': value.payeeName,
    };
}

