/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdjustmentDetailsType } from './AdjustmentDetailsType';
import {
    AdjustmentDetailsTypeFromJSON,
    AdjustmentDetailsTypeFromJSONTyped,
    AdjustmentDetailsTypeToJSON,
} from './AdjustmentDetailsType';
import type { CustomChargeExemptionType } from './CustomChargeExemptionType';
import {
    CustomChargeExemptionTypeFromJSON,
    CustomChargeExemptionTypeFromJSONTyped,
    CustomChargeExemptionTypeToJSON,
} from './CustomChargeExemptionType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';

/**
 * 
 * @export
 * @interface TrxAdjustCriteriaType
 */
export interface TrxAdjustCriteriaType {
    /**
     * The AR Account Number for the Account.
     * @type {string}
     * @memberof TrxAdjustCriteriaType
     */
    aRAccountNo?: string;
    /**
     * The AR Invoice Number for the Account.
     * @type {number}
     * @memberof TrxAdjustCriteriaType
     */
    aRInvoiceNo?: number;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof TrxAdjustCriteriaType
     */
    cashierId?: number;
    /**
     * List of Custom Charge Exemptions.
     * @type {Array<CustomChargeExemptionType>}
     * @memberof TrxAdjustCriteriaType
     */
    customChargeExemptionDetails?: Array<CustomChargeExemptionType>;
    /**
     * 
     * @type {AdjustmentDetailsType}
     * @memberof TrxAdjustCriteriaType
     */
    details?: AdjustmentDetailsType;
    /**
     * Property code where the reservation transaction exists.
     * @type {string}
     * @memberof TrxAdjustCriteriaType
     */
    hotelId?: string;
    /**
     * Date of the Audit. This is used when postings are being created using the Income Audit functionality.
     * @type {string}
     * @memberof TrxAdjustCriteriaType
     */
    incomeAuditDate?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof TrxAdjustCriteriaType
     */
    reservationId?: ReservationId;
    /**
     * The unique transaction number of this transaction.
     * @type {Array<number>}
     * @memberof TrxAdjustCriteriaType
     */
    transactionList?: Array<number>;
}

/**
 * Check if a given object implements the TrxAdjustCriteriaType interface.
 */
export function instanceOfTrxAdjustCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrxAdjustCriteriaTypeFromJSON(json: any): TrxAdjustCriteriaType {
    return TrxAdjustCriteriaTypeFromJSONTyped(json, false);
}

export function TrxAdjustCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrxAdjustCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aRAccountNo': !exists(json, 'aRAccountNo') ? undefined : json['aRAccountNo'],
        'aRInvoiceNo': !exists(json, 'aRInvoiceNo') ? undefined : json['aRInvoiceNo'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'customChargeExemptionDetails': !exists(json, 'customChargeExemptionDetails') ? undefined : ((json['customChargeExemptionDetails'] as Array<any>).map(CustomChargeExemptionTypeFromJSON)),
        'details': !exists(json, 'details') ? undefined : AdjustmentDetailsTypeFromJSON(json['details']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'incomeAuditDate': !exists(json, 'incomeAuditDate') ? undefined : json['incomeAuditDate'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'transactionList': !exists(json, 'transactionList') ? undefined : json['transactionList'],
    };
}

export function TrxAdjustCriteriaTypeToJSON(value?: TrxAdjustCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aRAccountNo': value.aRAccountNo,
        'aRInvoiceNo': value.aRInvoiceNo,
        'cashierId': value.cashierId,
        'customChargeExemptionDetails': value.customChargeExemptionDetails === undefined ? undefined : ((value.customChargeExemptionDetails as Array<any>).map(CustomChargeExemptionTypeToJSON)),
        'details': AdjustmentDetailsTypeToJSON(value.details),
        'hotelId': value.hotelId,
        'incomeAuditDate': value.incomeAuditDate,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'transactionList': value.transactionList,
    };
}

