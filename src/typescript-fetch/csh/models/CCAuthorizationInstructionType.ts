/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CCAuthorizationInstructionTypeAuthorizationSetup } from './CCAuthorizationInstructionTypeAuthorizationSetup';
import {
    CCAuthorizationInstructionTypeAuthorizationSetupFromJSON,
    CCAuthorizationInstructionTypeAuthorizationSetupFromJSONTyped,
    CCAuthorizationInstructionTypeAuthorizationSetupToJSON,
} from './CCAuthorizationInstructionTypeAuthorizationSetup';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ReservationInfoType } from './ReservationInfoType';
import {
    ReservationInfoTypeFromJSON,
    ReservationInfoTypeFromJSONTyped,
    ReservationInfoTypeToJSON,
} from './ReservationInfoType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';

/**
 * Contains the details to use for a credit card authorization.
 * @export
 * @interface CCAuthorizationInstructionType
 */
export interface CCAuthorizationInstructionType {
    /**
     * 
     * @type {CCAuthorizationInstructionTypeAuthorizationSetup}
     * @memberof CCAuthorizationInstructionType
     */
    authorizationSetup?: CCAuthorizationInstructionTypeAuthorizationSetup;
    /**
     * The current date of the Property.
     * @type {string}
     * @memberof CCAuthorizationInstructionType
     */
    businessDate?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CCAuthorizationInstructionType
     */
    currentApprovalAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CCAuthorizationInstructionType
     */
    incidentalAmount?: CurrencyAmountType;
    /**
     * Flag to indicate if initial authorization required.
     * @type {boolean}
     * @memberof CCAuthorizationInstructionType
     */
    initialAuthorizationRequired?: boolean;
    /**
     * Unique Authorization Sequence for the authorization and settlement.
     * @type {number}
     * @memberof CCAuthorizationInstructionType
     */
    originalAuthSequence?: number;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof CCAuthorizationInstructionType
     */
    paymentMethodInfo?: ReservationPaymentMethodType;
    /**
     * 
     * @type {ReservationInfoType}
     * @memberof CCAuthorizationInstructionType
     */
    reservationDetail?: ReservationInfoType;
    /**
     * Unique sequence for this authorization.
     * @type {string}
     * @memberof CCAuthorizationInstructionType
     */
    sequenceNumber?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CCAuthorizationInstructionType
     */
    totalApprovalAmount?: CurrencyAmountType;
    /**
     * Transaction type of the authorization(INIT or SUPP).
     * @type {string}
     * @memberof CCAuthorizationInstructionType
     */
    transactionType?: string;
    /**
     * Usage type used.
     * @type {string}
     * @memberof CCAuthorizationInstructionType
     */
    usageType?: string;
    /**
     * Vendor transaction id for the authorization.
     * @type {string}
     * @memberof CCAuthorizationInstructionType
     */
    vendorTranId?: string;
}

/**
 * Check if a given object implements the CCAuthorizationInstructionType interface.
 */
export function instanceOfCCAuthorizationInstructionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CCAuthorizationInstructionTypeFromJSON(json: any): CCAuthorizationInstructionType {
    return CCAuthorizationInstructionTypeFromJSONTyped(json, false);
}

export function CCAuthorizationInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CCAuthorizationInstructionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'authorizationSetup': !exists(json, 'authorizationSetup') ? undefined : CCAuthorizationInstructionTypeAuthorizationSetupFromJSON(json['authorizationSetup']),
        'businessDate': !exists(json, 'businessDate') ? undefined : json['businessDate'],
        'currentApprovalAmount': !exists(json, 'currentApprovalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['currentApprovalAmount']),
        'incidentalAmount': !exists(json, 'incidentalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['incidentalAmount']),
        'initialAuthorizationRequired': !exists(json, 'initialAuthorizationRequired') ? undefined : json['initialAuthorizationRequired'],
        'originalAuthSequence': !exists(json, 'originalAuthSequence') ? undefined : json['originalAuthSequence'],
        'paymentMethodInfo': !exists(json, 'paymentMethodInfo') ? undefined : ReservationPaymentMethodTypeFromJSON(json['paymentMethodInfo']),
        'reservationDetail': !exists(json, 'reservationDetail') ? undefined : ReservationInfoTypeFromJSON(json['reservationDetail']),
        'sequenceNumber': !exists(json, 'sequenceNumber') ? undefined : json['sequenceNumber'],
        'totalApprovalAmount': !exists(json, 'totalApprovalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['totalApprovalAmount']),
        'transactionType': !exists(json, 'transactionType') ? undefined : json['transactionType'],
        'usageType': !exists(json, 'usageType') ? undefined : json['usageType'],
        'vendorTranId': !exists(json, 'vendorTranId') ? undefined : json['vendorTranId'],
    };
}

export function CCAuthorizationInstructionTypeToJSON(value?: CCAuthorizationInstructionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'authorizationSetup': CCAuthorizationInstructionTypeAuthorizationSetupToJSON(value.authorizationSetup),
        'businessDate': value.businessDate,
        'currentApprovalAmount': CurrencyAmountTypeToJSON(value.currentApprovalAmount),
        'incidentalAmount': CurrencyAmountTypeToJSON(value.incidentalAmount),
        'initialAuthorizationRequired': value.initialAuthorizationRequired,
        'originalAuthSequence': value.originalAuthSequence,
        'paymentMethodInfo': ReservationPaymentMethodTypeToJSON(value.paymentMethodInfo),
        'reservationDetail': ReservationInfoTypeToJSON(value.reservationDetail),
        'sequenceNumber': value.sequenceNumber,
        'totalApprovalAmount': CurrencyAmountTypeToJSON(value.totalApprovalAmount),
        'transactionType': value.transactionType,
        'usageType': value.usageType,
        'vendorTranId': value.vendorTranId,
    };
}

