/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ArticleInfoType } from './ArticleInfoType';
import {
    ArticleInfoTypeFromJSON,
    ArticleInfoTypeFromJSONTyped,
    ArticleInfoTypeToJSON,
} from './ArticleInfoType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Transaction codes info.
 * @export
 * @interface TrxPostingInfoType
 */
export interface TrxPostingInfoType {
    /**
     * The List of Articles defined for this transaction code, when using the Articles functionality.
     * @type {Array<ArticleInfoType>}
     * @memberof TrxPostingInfoType
     */
    articles?: Array<ArticleInfoType>;
    /**
     * Transaction codes info.
     * @type {string}
     * @memberof TrxPostingInfoType
     */
    description?: string;
    /**
     * Hotel context of the Transaction code.
     * @type {string}
     * @memberof TrxPostingInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof TrxPostingInfoType
     */
    maximumPrice?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof TrxPostingInfoType
     */
    minimumPrice?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof TrxPostingInfoType
     */
    price?: CurrencyAmountType;
    /**
     * Print receipt flag that tells whether the transaction receipt is to be printed or not. This is based on the transaction code.
     * @type {boolean}
     * @memberof TrxPostingInfoType
     */
    printTrxReceipt?: boolean;
    /**
     * This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer.
     * @type {number}
     * @memberof TrxPostingInfoType
     */
    routingInstructionsId?: number;
    /**
     * Unique identifier for the Transaction code.
     * @type {string}
     * @memberof TrxPostingInfoType
     */
    transactionCode?: string;
    /**
     * Category of the transaction code.
     * @type {string}
     * @memberof TrxPostingInfoType
     */
    transactionGroup?: string;
    /**
     * Sub category of the transaction code.
     * @type {string}
     * @memberof TrxPostingInfoType
     */
    transactionSubGroup?: string;
    /**
     * Contains service type for transaction code.
     * @type {string}
     * @memberof TrxPostingInfoType
     */
    trxServiceType?: string;
    /**
     * Unique Universal product code of the transaction code.
     * @type {string}
     * @memberof TrxPostingInfoType
     */
    universalProductCode?: string;
}

/**
 * Check if a given object implements the TrxPostingInfoType interface.
 */
export function instanceOfTrxPostingInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrxPostingInfoTypeFromJSON(json: any): TrxPostingInfoType {
    return TrxPostingInfoTypeFromJSONTyped(json, false);
}

export function TrxPostingInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrxPostingInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'articles': !exists(json, 'articles') ? undefined : ((json['articles'] as Array<any>).map(ArticleInfoTypeFromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'maximumPrice': !exists(json, 'maximumPrice') ? undefined : CurrencyAmountTypeFromJSON(json['maximumPrice']),
        'minimumPrice': !exists(json, 'minimumPrice') ? undefined : CurrencyAmountTypeFromJSON(json['minimumPrice']),
        'price': !exists(json, 'price') ? undefined : CurrencyAmountTypeFromJSON(json['price']),
        'printTrxReceipt': !exists(json, 'printTrxReceipt') ? undefined : json['printTrxReceipt'],
        'routingInstructionsId': !exists(json, 'routingInstructionsId') ? undefined : json['routingInstructionsId'],
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionGroup': !exists(json, 'transactionGroup') ? undefined : json['transactionGroup'],
        'transactionSubGroup': !exists(json, 'transactionSubGroup') ? undefined : json['transactionSubGroup'],
        'trxServiceType': !exists(json, 'trxServiceType') ? undefined : json['trxServiceType'],
        'universalProductCode': !exists(json, 'universalProductCode') ? undefined : json['universalProductCode'],
    };
}

export function TrxPostingInfoTypeToJSON(value?: TrxPostingInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'articles': value.articles === undefined ? undefined : ((value.articles as Array<any>).map(ArticleInfoTypeToJSON)),
        'description': value.description,
        'hotelId': value.hotelId,
        'maximumPrice': CurrencyAmountTypeToJSON(value.maximumPrice),
        'minimumPrice': CurrencyAmountTypeToJSON(value.minimumPrice),
        'price': CurrencyAmountTypeToJSON(value.price),
        'printTrxReceipt': value.printTrxReceipt,
        'routingInstructionsId': value.routingInstructionsId,
        'transactionCode': value.transactionCode,
        'transactionGroup': value.transactionGroup,
        'transactionSubGroup': value.transactionSubGroup,
        'trxServiceType': value.trxServiceType,
        'universalProductCode': value.universalProductCode,
    };
}

