/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationIdList } from './ReservationIdList';
import {
    ReservationIdListFromJSON,
    ReservationIdListFromJSONTyped,
    ReservationIdListToJSON,
} from './ReservationIdList';

/**
 * Criteria type for verifying or changing an Early Departure reservation.
 * @export
 * @interface EarlyDepartureCriteriaType
 */
export interface EarlyDepartureCriteriaType {
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof EarlyDepartureCriteriaType
     */
    cashierId?: number;
    /**
     * Property code.
     * @type {string}
     * @memberof EarlyDepartureCriteriaType
     */
    hotelId?: string;
    /**
     * Indicates if check has to be done for Rate Tiers.
     * @type {boolean}
     * @memberof EarlyDepartureCriteriaType
     */
    ignoreCheckOnTieredRate?: boolean;
    /**
     * Indicates if Rate Restriction check should be overridden.
     * @type {boolean}
     * @memberof EarlyDepartureCriteriaType
     */
    ignoreRateRestriction?: boolean;
    /**
     * Indicates if any allowance consumed by the guest for today can be posted to the Guest Folio. If this cannot be done then the Early Departure cannot proceed.
     * @type {boolean}
     * @memberof EarlyDepartureCriteriaType
     */
    postConsumedAllowanceToGuest?: boolean;
    /**
     * Indicates if the early departure penalty should be posted .
     * @type {boolean}
     * @memberof EarlyDepartureCriteriaType
     */
    postEarlyDeparturePenalty?: boolean;
    /**
     * 
     * @type {ReservationIdList}
     * @memberof EarlyDepartureCriteriaType
     */
    reservationIdList?: ReservationIdList;
}

/**
 * Check if a given object implements the EarlyDepartureCriteriaType interface.
 */
export function instanceOfEarlyDepartureCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EarlyDepartureCriteriaTypeFromJSON(json: any): EarlyDepartureCriteriaType {
    return EarlyDepartureCriteriaTypeFromJSONTyped(json, false);
}

export function EarlyDepartureCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EarlyDepartureCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'ignoreCheckOnTieredRate': !exists(json, 'ignoreCheckOnTieredRate') ? undefined : json['ignoreCheckOnTieredRate'],
        'ignoreRateRestriction': !exists(json, 'ignoreRateRestriction') ? undefined : json['ignoreRateRestriction'],
        'postConsumedAllowanceToGuest': !exists(json, 'postConsumedAllowanceToGuest') ? undefined : json['postConsumedAllowanceToGuest'],
        'postEarlyDeparturePenalty': !exists(json, 'postEarlyDeparturePenalty') ? undefined : json['postEarlyDeparturePenalty'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ReservationIdListFromJSON(json['reservationIdList']),
    };
}

export function EarlyDepartureCriteriaTypeToJSON(value?: EarlyDepartureCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cashierId': value.cashierId,
        'hotelId': value.hotelId,
        'ignoreCheckOnTieredRate': value.ignoreCheckOnTieredRate,
        'ignoreRateRestriction': value.ignoreRateRestriction,
        'postConsumedAllowanceToGuest': value.postConsumedAllowanceToGuest,
        'postEarlyDeparturePenalty': value.postEarlyDeparturePenalty,
        'reservationIdList': ReservationIdListToJSON(value.reservationIdList),
    };
}

