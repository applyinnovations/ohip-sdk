/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';

/**
 * Reservation voucher detail.
 * @export
 * @interface ReservationVoucherType
 */
export interface ReservationVoucherType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ReservationVoucherType
     */
    amount?: CurrencyAmountType;
    /**
     * Reflect the current status of the voucher.
     * @type {string}
     * @memberof ReservationVoucherType
     */
    status?: ReservationVoucherTypeStatusEnum;
    /**
     * Voucher no of the voucher
     * @type {number}
     * @memberof ReservationVoucherType
     */
    voucherNo?: number;
    /**
     * Date of the voucher
     * @type {string}
     * @memberof ReservationVoucherType
     */
    voucherDate?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof ReservationVoucherType
     */
    reservationId?: ReservationId;
}


/**
 * @export
 */
export const ReservationVoucherTypeStatusEnum = {
    Print: 'Print',
    Reprint: 'Reprint',
    New: 'New',
    Void: 'Void'
} as const;
export type ReservationVoucherTypeStatusEnum = typeof ReservationVoucherTypeStatusEnum[keyof typeof ReservationVoucherTypeStatusEnum];


/**
 * Check if a given object implements the ReservationVoucherType interface.
 */
export function instanceOfReservationVoucherType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationVoucherTypeFromJSON(json: any): ReservationVoucherType {
    return ReservationVoucherTypeFromJSONTyped(json, false);
}

export function ReservationVoucherTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationVoucherType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'voucherNo': !exists(json, 'voucherNo') ? undefined : json['voucherNo'],
        'voucherDate': !exists(json, 'voucherDate') ? undefined : json['voucherDate'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
    };
}

export function ReservationVoucherTypeToJSON(value?: ReservationVoucherType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'status': value.status,
        'voucherNo': value.voucherNo,
        'voucherDate': value.voucherDate,
        'reservationId': ReservationIdToJSON(value.reservationId),
    };
}

