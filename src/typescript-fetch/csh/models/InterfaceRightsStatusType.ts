/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InterfaceRightsStatusType
 */
export interface InterfaceRightsStatusType {
    /**
     * Internal code for each allowed right of a Hotel Interface record.
     * @type {number}
     * @memberof InterfaceRightsStatusType
     */
    right?: number;
    /**
     * User defined code for an Interface Right.
     * @type {string}
     * @memberof InterfaceRightsStatusType
     */
    statusCode?: string;
    /**
     * User defined description for an Interface Right.
     * @type {string}
     * @memberof InterfaceRightsStatusType
     */
    description?: string;
    /**
     * Category code of this interface right.
     * @type {string}
     * @memberof InterfaceRightsStatusType
     */
    category?: string;
}

/**
 * Check if a given object implements the InterfaceRightsStatusType interface.
 */
export function instanceOfInterfaceRightsStatusType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceRightsStatusTypeFromJSON(json: any): InterfaceRightsStatusType {
    return InterfaceRightsStatusTypeFromJSONTyped(json, false);
}

export function InterfaceRightsStatusTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceRightsStatusType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'right': !exists(json, 'right') ? undefined : json['right'],
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'category': !exists(json, 'category') ? undefined : json['category'],
    };
}

export function InterfaceRightsStatusTypeToJSON(value?: InterfaceRightsStatusType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'right': value.right,
        'statusCode': value.statusCode,
        'description': value.description,
        'category': value.category,
    };
}

