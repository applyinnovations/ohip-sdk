/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CardAuthorizationTransactionType } from './CardAuthorizationTransactionType';
import {
    CardAuthorizationTransactionTypeFromJSON,
    CardAuthorizationTransactionTypeFromJSONTyped,
    CardAuthorizationTransactionTypeToJSON,
} from './CardAuthorizationTransactionType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Authorization approval record.
 * @export
 * @interface VaultHTTPTransactionMessageTypeAuthorizationApproval
 */
export interface VaultHTTPTransactionMessageTypeAuthorizationApproval {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    approvalAmount?: CurrencyAmountType;
    /**
     * The approval code authenticates the authorization.
     * @type {string}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    approvalCode?: string;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    authorizedPaymentRecord?: ReservationPaymentMethodType;
    /**
     * 
     * @type {boolean}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    cardSwiped?: boolean;
    /**
     * Unique Authorization Sequence for the authorization and settlement.
     * @type {number}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    originalAuthSequence?: number;
    /**
     * 
     * @type {ProfileId}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    profileId?: ProfileId;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {CardAuthorizationTransactionType}
     * @memberof VaultHTTPTransactionMessageTypeAuthorizationApproval
     */
    sourceOfAuthorization?: CardAuthorizationTransactionType;
}

/**
 * Check if a given object implements the VaultHTTPTransactionMessageTypeAuthorizationApproval interface.
 */
export function instanceOfVaultHTTPTransactionMessageTypeAuthorizationApproval(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSON(json: any): VaultHTTPTransactionMessageTypeAuthorizationApproval {
    return VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped(json, false);
}

export function VaultHTTPTransactionMessageTypeAuthorizationApprovalFromJSONTyped(json: any, ignoreDiscriminator: boolean): VaultHTTPTransactionMessageTypeAuthorizationApproval {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'approvalAmount': !exists(json, 'approvalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['approvalAmount']),
        'approvalCode': !exists(json, 'approvalCode') ? undefined : json['approvalCode'],
        'authorizedPaymentRecord': !exists(json, 'authorizedPaymentRecord') ? undefined : ReservationPaymentMethodTypeFromJSON(json['authorizedPaymentRecord']),
        'cardSwiped': !exists(json, 'cardSwiped') ? undefined : json['cardSwiped'],
        'originalAuthSequence': !exists(json, 'originalAuthSequence') ? undefined : json['originalAuthSequence'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'sourceOfAuthorization': !exists(json, 'sourceOfAuthorization') ? undefined : CardAuthorizationTransactionTypeFromJSON(json['sourceOfAuthorization']),
    };
}

export function VaultHTTPTransactionMessageTypeAuthorizationApprovalToJSON(value?: VaultHTTPTransactionMessageTypeAuthorizationApproval | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'approvalAmount': CurrencyAmountTypeToJSON(value.approvalAmount),
        'approvalCode': value.approvalCode,
        'authorizedPaymentRecord': ReservationPaymentMethodTypeToJSON(value.authorizedPaymentRecord),
        'cardSwiped': value.cardSwiped,
        'originalAuthSequence': value.originalAuthSequence,
        'profileId': ProfileIdToJSON(value.profileId),
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'sourceOfAuthorization': CardAuthorizationTransactionTypeToJSON(value.sourceOfAuthorization),
    };
}

