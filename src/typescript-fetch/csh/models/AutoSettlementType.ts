/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AutoFolioSettlementCriteriaType } from './AutoFolioSettlementCriteriaType';
import {
    AutoFolioSettlementCriteriaTypeFromJSON,
    AutoFolioSettlementCriteriaTypeFromJSONTyped,
    AutoFolioSettlementCriteriaTypeToJSON,
} from './AutoFolioSettlementCriteriaType';
import type { CashieringEventType } from './CashieringEventType';
import {
    CashieringEventTypeFromJSON,
    CashieringEventTypeFromJSONTyped,
    CashieringEventTypeToJSON,
} from './CashieringEventType';
import type { PaymentMethodSearchType } from './PaymentMethodSearchType';
import {
    PaymentMethodSearchTypeFromJSON,
    PaymentMethodSearchTypeFromJSONTyped,
    PaymentMethodSearchTypeToJSON,
} from './PaymentMethodSearchType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface AutoSettlementType
 */
export interface AutoSettlementType {
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof AutoSettlementType
     */
    cashierId?: number;
    /**
     * 
     * @type {CashieringEventType}
     * @memberof AutoSettlementType
     */
    eventType?: CashieringEventType;
    /**
     * Folio windows to do auto auto settlement.
     * @type {Array<string>}
     * @memberof AutoSettlementType
     */
    folioWindowsToSettle?: Array<string>;
    /**
     * Folio windows to transfer.
     * @type {Array<string>}
     * @memberof AutoSettlementType
     */
    folioWindowsToTransfer?: Array<string>;
    /**
     * Property code.
     * @type {string}
     * @memberof AutoSettlementType
     */
    hotelId?: string;
    /**
     * Dictates whether to include negative postings for auto settlement.
     * @type {boolean}
     * @memberof AutoSettlementType
     */
    includeCreditCardBalance?: boolean;
    /**
     * Indicates the minimum window balance to do auto settlement.
     * @type {number}
     * @memberof AutoSettlementType
     */
    minimumWindowBalance?: number;
    /**
     * Defines the payment method to search reservations.
     * @type {Array<PaymentMethodSearchType>}
     * @memberof AutoSettlementType
     */
    paymentMethods?: Array<PaymentMethodSearchType>;
    /**
     * 
     * @type {AutoFolioSettlementCriteriaType}
     * @memberof AutoSettlementType
     */
    reservationCriteria?: AutoFolioSettlementCriteriaType;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof AutoSettlementType
     */
    reservationIdList?: Array<UniqueIDType>;
}

/**
 * Check if a given object implements the AutoSettlementType interface.
 */
export function instanceOfAutoSettlementType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutoSettlementTypeFromJSON(json: any): AutoSettlementType {
    return AutoSettlementTypeFromJSONTyped(json, false);
}

export function AutoSettlementTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoSettlementType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'eventType': !exists(json, 'eventType') ? undefined : CashieringEventTypeFromJSON(json['eventType']),
        'folioWindowsToSettle': !exists(json, 'folioWindowsToSettle') ? undefined : json['folioWindowsToSettle'],
        'folioWindowsToTransfer': !exists(json, 'folioWindowsToTransfer') ? undefined : json['folioWindowsToTransfer'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'includeCreditCardBalance': !exists(json, 'includeCreditCardBalance') ? undefined : json['includeCreditCardBalance'],
        'minimumWindowBalance': !exists(json, 'minimumWindowBalance') ? undefined : json['minimumWindowBalance'],
        'paymentMethods': !exists(json, 'paymentMethods') ? undefined : ((json['paymentMethods'] as Array<any>).map(PaymentMethodSearchTypeFromJSON)),
        'reservationCriteria': !exists(json, 'reservationCriteria') ? undefined : AutoFolioSettlementCriteriaTypeFromJSON(json['reservationCriteria']),
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
    };
}

export function AutoSettlementTypeToJSON(value?: AutoSettlementType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cashierId': value.cashierId,
        'eventType': CashieringEventTypeToJSON(value.eventType),
        'folioWindowsToSettle': value.folioWindowsToSettle,
        'folioWindowsToTransfer': value.folioWindowsToTransfer,
        'hotelId': value.hotelId,
        'includeCreditCardBalance': value.includeCreditCardBalance,
        'minimumWindowBalance': value.minimumWindowBalance,
        'paymentMethods': value.paymentMethods === undefined ? undefined : ((value.paymentMethods as Array<any>).map(PaymentMethodSearchTypeToJSON)),
        'reservationCriteria': AutoFolioSettlementCriteriaTypeToJSON(value.reservationCriteria),
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
    };
}

