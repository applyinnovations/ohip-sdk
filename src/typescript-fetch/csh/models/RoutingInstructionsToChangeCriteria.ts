/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { RoutingInfoType } from './RoutingInfoType';
import {
    RoutingInfoTypeFromJSON,
    RoutingInfoTypeFromJSONTyped,
    RoutingInfoTypeToJSON,
} from './RoutingInfoType';
import type { RoutingInstructionsToChangeCriteriaComp } from './RoutingInstructionsToChangeCriteriaComp';
import {
    RoutingInstructionsToChangeCriteriaCompFromJSON,
    RoutingInstructionsToChangeCriteriaCompFromJSONTyped,
    RoutingInstructionsToChangeCriteriaCompToJSON,
} from './RoutingInstructionsToChangeCriteriaComp';
import type { RoutingInstructionsToChangeCriteriaFolio } from './RoutingInstructionsToChangeCriteriaFolio';
import {
    RoutingInstructionsToChangeCriteriaFolioFromJSON,
    RoutingInstructionsToChangeCriteriaFolioFromJSONTyped,
    RoutingInstructionsToChangeCriteriaFolioToJSON,
} from './RoutingInstructionsToChangeCriteriaFolio';
import type { RoutingInstructionsToChangeCriteriaRequest } from './RoutingInstructionsToChangeCriteriaRequest';
import {
    RoutingInstructionsToChangeCriteriaRequestFromJSON,
    RoutingInstructionsToChangeCriteriaRequestFromJSONTyped,
    RoutingInstructionsToChangeCriteriaRequestToJSON,
} from './RoutingInstructionsToChangeCriteriaRequest';
import type { RoutingInstructionsToChangeCriteriaRoom } from './RoutingInstructionsToChangeCriteriaRoom';
import {
    RoutingInstructionsToChangeCriteriaRoomFromJSON,
    RoutingInstructionsToChangeCriteriaRoomFromJSONTyped,
    RoutingInstructionsToChangeCriteriaRoomToJSON,
} from './RoutingInstructionsToChangeCriteriaRoom';

/**
 * Transactions and scheduled instructions included in this routing element will be replaced with the new element.
 * @export
 * @interface RoutingInstructionsToChangeCriteria
 */
export interface RoutingInstructionsToChangeCriteria {
    /**
     * 
     * @type {RoutingInstructionsToChangeCriteriaComp}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    comp?: RoutingInstructionsToChangeCriteriaComp;
    /**
     * 
     * @type {RoutingInstructionsToChangeCriteriaFolio}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    folio?: RoutingInstructionsToChangeCriteriaFolio;
    /**
     * Hotel context of the reservation.
     * @type {string}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    hotelId?: string;
    /**
     * 
     * @type {RoutingInfoType}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    newRoutingInfo?: RoutingInfoType;
    /**
     * On a successful update, the transactions that are already posted in the guest's folio will be re-organized based on the configured instructions.
     * @type {boolean}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    refreshFolio?: boolean;
    /**
     * 
     * @type {RoutingInstructionsToChangeCriteriaRequest}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    request?: RoutingInstructionsToChangeCriteriaRequest;
    /**
     * 
     * @type {ReservationId}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    reservationId?: ReservationId;
    /**
     * This flag indicates if postings that can be refreshed need to be part of the response when a routing instruction is created, updated or deleted.
     * @type {boolean}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    retrievePostingsForRoomRouting?: boolean;
    /**
     * 
     * @type {RoutingInstructionsToChangeCriteriaRoom}
     * @memberof RoutingInstructionsToChangeCriteria
     */
    room?: RoutingInstructionsToChangeCriteriaRoom;
}

/**
 * Check if a given object implements the RoutingInstructionsToChangeCriteria interface.
 */
export function instanceOfRoutingInstructionsToChangeCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoutingInstructionsToChangeCriteriaFromJSON(json: any): RoutingInstructionsToChangeCriteria {
    return RoutingInstructionsToChangeCriteriaFromJSONTyped(json, false);
}

export function RoutingInstructionsToChangeCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoutingInstructionsToChangeCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'comp': !exists(json, 'comp') ? undefined : RoutingInstructionsToChangeCriteriaCompFromJSON(json['comp']),
        'folio': !exists(json, 'folio') ? undefined : RoutingInstructionsToChangeCriteriaFolioFromJSON(json['folio']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'newRoutingInfo': !exists(json, 'newRoutingInfo') ? undefined : RoutingInfoTypeFromJSON(json['newRoutingInfo']),
        'refreshFolio': !exists(json, 'refreshFolio') ? undefined : json['refreshFolio'],
        'request': !exists(json, 'request') ? undefined : RoutingInstructionsToChangeCriteriaRequestFromJSON(json['request']),
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'retrievePostingsForRoomRouting': !exists(json, 'retrievePostingsForRoomRouting') ? undefined : json['retrievePostingsForRoomRouting'],
        'room': !exists(json, 'room') ? undefined : RoutingInstructionsToChangeCriteriaRoomFromJSON(json['room']),
    };
}

export function RoutingInstructionsToChangeCriteriaToJSON(value?: RoutingInstructionsToChangeCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comp': RoutingInstructionsToChangeCriteriaCompToJSON(value.comp),
        'folio': RoutingInstructionsToChangeCriteriaFolioToJSON(value.folio),
        'hotelId': value.hotelId,
        'newRoutingInfo': RoutingInfoTypeToJSON(value.newRoutingInfo),
        'refreshFolio': value.refreshFolio,
        'request': RoutingInstructionsToChangeCriteriaRequestToJSON(value.request),
        'reservationId': ReservationIdToJSON(value.reservationId),
        'retrievePostingsForRoomRouting': value.retrievePostingsForRoomRouting,
        'room': RoutingInstructionsToChangeCriteriaRoomToJSON(value.room),
    };
}

