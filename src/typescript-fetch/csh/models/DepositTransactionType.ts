/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Deposit transaction of a reservation.
 * @export
 * @interface DepositTransactionType
 */
export interface DepositTransactionType {
    /**
     * Property code where the reservation transaction exists.
     * @type {string}
     * @memberof DepositTransactionType
     */
    hotelId?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof DepositTransactionType
     */
    originalAmount?: CurrencyAmountType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof DepositTransactionType
     */
    reservationId?: UniqueIDType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof DepositTransactionType
     */
    splitAmount?: CurrencyAmountType;
    /**
     * The unique transaction number associated with transaction group.
     * @type {number}
     * @memberof DepositTransactionType
     */
    transactionNo?: number;
}

/**
 * Check if a given object implements the DepositTransactionType interface.
 */
export function instanceOfDepositTransactionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DepositTransactionTypeFromJSON(json: any): DepositTransactionType {
    return DepositTransactionTypeFromJSONTyped(json, false);
}

export function DepositTransactionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DepositTransactionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'originalAmount': !exists(json, 'originalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['originalAmount']),
        'reservationId': !exists(json, 'reservationId') ? undefined : UniqueIDTypeFromJSON(json['reservationId']),
        'splitAmount': !exists(json, 'splitAmount') ? undefined : CurrencyAmountTypeFromJSON(json['splitAmount']),
        'transactionNo': !exists(json, 'transactionNo') ? undefined : json['transactionNo'],
    };
}

export function DepositTransactionTypeToJSON(value?: DepositTransactionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'originalAmount': CurrencyAmountTypeToJSON(value.originalAmount),
        'reservationId': UniqueIDTypeToJSON(value.reservationId),
        'splitAmount': CurrencyAmountTypeToJSON(value.splitAmount),
        'transactionNo': value.transactionNo,
    };
}

