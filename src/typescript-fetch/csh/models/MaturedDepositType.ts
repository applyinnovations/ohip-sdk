/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashierInfoType } from './CashierInfoType';
import {
    CashierInfoTypeFromJSON,
    CashierInfoTypeFromJSONTyped,
    CashierInfoTypeToJSON,
} from './CashierInfoType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { TransactionType } from './TransactionType';
import {
    TransactionTypeFromJSON,
    TransactionTypeFromJSONTyped,
    TransactionTypeToJSON,
} from './TransactionType';

/**
 * Matured Deposits detail.
 * @export
 * @interface MaturedDepositType
 */
export interface MaturedDepositType {
    /**
     * 
     * @type {TransactionType}
     * @memberof MaturedDepositType
     */
    transaction?: TransactionType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof MaturedDepositType
     */
    guestCreditAmount?: CurrencyAmountType;
    /**
     * The folio window where this authorization is applied.
     * @type {number}
     * @memberof MaturedDepositType
     */
    folioView?: number;
    /**
     * 
     * @type {CashierInfoType}
     * @memberof MaturedDepositType
     */
    cashierInfo?: CashierInfoType;
    /**
     * User defined remarks of the matured deposit.
     * @type {string}
     * @memberof MaturedDepositType
     */
    remark?: string;
    /**
     * User defined reference of the matured deposit.
     * @type {string}
     * @memberof MaturedDepositType
     */
    reference?: string;
}

/**
 * Check if a given object implements the MaturedDepositType interface.
 */
export function instanceOfMaturedDepositType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MaturedDepositTypeFromJSON(json: any): MaturedDepositType {
    return MaturedDepositTypeFromJSONTyped(json, false);
}

export function MaturedDepositTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MaturedDepositType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transaction': !exists(json, 'transaction') ? undefined : TransactionTypeFromJSON(json['transaction']),
        'guestCreditAmount': !exists(json, 'guestCreditAmount') ? undefined : CurrencyAmountTypeFromJSON(json['guestCreditAmount']),
        'folioView': !exists(json, 'folioView') ? undefined : json['folioView'],
        'cashierInfo': !exists(json, 'cashierInfo') ? undefined : CashierInfoTypeFromJSON(json['cashierInfo']),
        'remark': !exists(json, 'remark') ? undefined : json['remark'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
    };
}

export function MaturedDepositTypeToJSON(value?: MaturedDepositType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transaction': TransactionTypeToJSON(value.transaction),
        'guestCreditAmount': CurrencyAmountTypeToJSON(value.guestCreditAmount),
        'folioView': value.folioView,
        'cashierInfo': CashierInfoTypeToJSON(value.cashierInfo),
        'remark': value.remark,
        'reference': value.reference,
    };
}

