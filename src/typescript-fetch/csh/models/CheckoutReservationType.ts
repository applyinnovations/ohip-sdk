/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashieringEventType } from './CashieringEventType';
import {
    CashieringEventTypeFromJSON,
    CashieringEventTypeFromJSONTyped,
    CashieringEventTypeToJSON,
} from './CashieringEventType';
import type { CheckoutInstructionsType } from './CheckoutInstructionsType';
import {
    CheckoutInstructionsTypeFromJSON,
    CheckoutInstructionsTypeFromJSONTyped,
    CheckoutInstructionsTypeToJSON,
} from './CheckoutInstructionsType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface CheckoutReservationType
 */
export interface CheckoutReservationType {
    /**
     * Property code.
     * @type {string}
     * @memberof CheckoutReservationType
     */
    hotelId?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof CheckoutReservationType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {CashieringEventType}
     * @memberof CheckoutReservationType
     */
    eventType?: CashieringEventType;
    /**
     * 
     * @type {CheckoutInstructionsType}
     * @memberof CheckoutReservationType
     */
    checkoutInstr?: CheckoutInstructionsType;
    /**
     * Email address
     * @type {string}
     * @memberof CheckoutReservationType
     */
    mobileCheckoutFolioEmail?: string;
    /**
     * If the Property works with Open Folios and the reservation has the privileges for Post Stay Charging, this flag could be set to True which would checkout the guest without requiring the guest to settle his balances.
     * @type {boolean}
     * @memberof CheckoutReservationType
     */
    checkoutWithOpenFolio?: boolean;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof CheckoutReservationType
     */
    cashierId?: number;
    /**
     * This flag will be set to true if the reservation is checked out via mobility service. When the reservation is checked out through UI, this would be false.
     * @type {boolean}
     * @memberof CheckoutReservationType
     */
    mobileCheckout?: boolean;
    /**
     * This flag will be set to true if the reservation is checked out via mobility service. When the reservation is checked out through UI, this would be false.
     * @type {boolean}
     * @memberof CheckoutReservationType
     */
    autoCheckout?: boolean;
    /**
     * Indicates Stop Checkout reservation Global Alert flag.
     * @type {boolean}
     * @memberof CheckoutReservationType
     */
    stopCheckout?: boolean;
}

/**
 * Check if a given object implements the CheckoutReservationType interface.
 */
export function instanceOfCheckoutReservationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CheckoutReservationTypeFromJSON(json: any): CheckoutReservationType {
    return CheckoutReservationTypeFromJSONTyped(json, false);
}

export function CheckoutReservationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutReservationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'eventType': !exists(json, 'eventType') ? undefined : CashieringEventTypeFromJSON(json['eventType']),
        'checkoutInstr': !exists(json, 'checkoutInstr') ? undefined : CheckoutInstructionsTypeFromJSON(json['checkoutInstr']),
        'mobileCheckoutFolioEmail': !exists(json, 'mobileCheckoutFolioEmail') ? undefined : json['mobileCheckoutFolioEmail'],
        'checkoutWithOpenFolio': !exists(json, 'checkoutWithOpenFolio') ? undefined : json['checkoutWithOpenFolio'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'mobileCheckout': !exists(json, 'mobileCheckout') ? undefined : json['mobileCheckout'],
        'autoCheckout': !exists(json, 'autoCheckout') ? undefined : json['autoCheckout'],
        'stopCheckout': !exists(json, 'stopCheckout') ? undefined : json['stopCheckout'],
    };
}

export function CheckoutReservationTypeToJSON(value?: CheckoutReservationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'eventType': CashieringEventTypeToJSON(value.eventType),
        'checkoutInstr': CheckoutInstructionsTypeToJSON(value.checkoutInstr),
        'mobileCheckoutFolioEmail': value.mobileCheckoutFolioEmail,
        'checkoutWithOpenFolio': value.checkoutWithOpenFolio,
        'cashierId': value.cashierId,
        'mobileCheckout': value.mobileCheckout,
        'autoCheckout': value.autoCheckout,
        'stopCheckout': value.stopCheckout,
    };
}

