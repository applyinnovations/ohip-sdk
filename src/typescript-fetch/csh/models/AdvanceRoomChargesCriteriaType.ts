/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashieringEventType } from './CashieringEventType';
import {
    CashieringEventTypeFromJSON,
    CashieringEventTypeFromJSONTyped,
    CashieringEventTypeToJSON,
} from './CashieringEventType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type to set the criteria for generation of advance folios. This will post the room and tax transactions for the nights requested.
 * @export
 * @interface AdvanceRoomChargesCriteriaType
 */
export interface AdvanceRoomChargesCriteriaType {
    /**
     * Property code.
     * @type {string}
     * @memberof AdvanceRoomChargesCriteriaType
     */
    hotelId?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof AdvanceRoomChargesCriteriaType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Indicates if the posting of room charges have to be done for the entire stay.
     * @type {boolean}
     * @memberof AdvanceRoomChargesCriteriaType
     */
    postForEntireStay?: boolean;
    /**
     * Indicates the last date until which the Advance Room Charges have to be posted.
     * @type {string}
     * @memberof AdvanceRoomChargesCriteriaType
     */
    endDateToCharge?: string;
    /**
     * Flag to indicate if only a verification is required. This checks if advance bills have been generated for this reservation and returns the last date in the response. Setting this flag to true, will return the information for the below elements in the response: AvailablePostingDates, GeneratedForEntireStay, LastRoomAndTaxPostedDate and the Reservation Information. No posting will be done. In order for the actual posting to occur this flag should be false.
     * @type {boolean}
     * @memberof AdvanceRoomChargesCriteriaType
     */
    verifyOnly?: boolean;
    /**
     * The Cashier ID of the Cashier who is currently processing the transaction(s).
     * @type {number}
     * @memberof AdvanceRoomChargesCriteriaType
     */
    cashierId?: number;
    /**
     * 
     * @type {CashieringEventType}
     * @memberof AdvanceRoomChargesCriteriaType
     */
    eventType?: CashieringEventType;
}

/**
 * Check if a given object implements the AdvanceRoomChargesCriteriaType interface.
 */
export function instanceOfAdvanceRoomChargesCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AdvanceRoomChargesCriteriaTypeFromJSON(json: any): AdvanceRoomChargesCriteriaType {
    return AdvanceRoomChargesCriteriaTypeFromJSONTyped(json, false);
}

export function AdvanceRoomChargesCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdvanceRoomChargesCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'postForEntireStay': !exists(json, 'postForEntireStay') ? undefined : json['postForEntireStay'],
        'endDateToCharge': !exists(json, 'endDateToCharge') ? undefined : json['endDateToCharge'],
        'verifyOnly': !exists(json, 'verifyOnly') ? undefined : json['verifyOnly'],
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'eventType': !exists(json, 'eventType') ? undefined : CashieringEventTypeFromJSON(json['eventType']),
    };
}

export function AdvanceRoomChargesCriteriaTypeToJSON(value?: AdvanceRoomChargesCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'postForEntireStay': value.postForEntireStay,
        'endDateToCharge': value.endDateToCharge,
        'verifyOnly': value.verifyOnly,
        'cashierId': value.cashierId,
        'eventType': CashieringEventTypeToJSON(value.eventType),
    };
}

