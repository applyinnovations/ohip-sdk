/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CardTypeType } from './CardTypeType';
import {
    CardTypeTypeFromJSON,
    CardTypeTypeFromJSONTyped,
    CardTypeTypeToJSON,
} from './CardTypeType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details of the reservation with the folio balance equal or higher to the credit limit
 * @export
 * @interface ReservationOveragePaymentType
 */
export interface ReservationOveragePaymentType {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ReservationOveragePaymentType
     */
    balance?: CurrencyAmountType;
    /**
     * Expiration date of the credit card (mask based on PCI compliance)
     * @type {string}
     * @memberof ReservationOveragePaymentType
     */
    cardExpirationDate?: string;
    /**
     * 
     * @type {CardTypeType}
     * @memberof ReservationOveragePaymentType
     */
    cardType?: CardTypeType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReservationOveragePaymentType
     */
    creditCardId?: UniqueIDType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ReservationOveragePaymentType
     */
    creditCardLimit?: CurrencyAmountType;
    /**
     * Credit Card number / token (mask based on PCI compliance).
     * @type {string}
     * @memberof ReservationOveragePaymentType
     */
    creditCardNo?: string;
    /**
     * Guest name of the listed reservation.
     * @type {string}
     * @memberof ReservationOveragePaymentType
     */
    guestName?: string;
    /**
     * Defines the unique identifier for this payment method.
     * @type {string}
     * @memberof ReservationOveragePaymentType
     */
    paymentMethod?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof ReservationOveragePaymentType
     */
    reservationId?: ReservationId;
    /**
     * Room number on the reservation.
     * @type {string}
     * @memberof ReservationOveragePaymentType
     */
    roomId?: string;
    /**
     * Identifies the user defined credit card type if credit card type from a defined list is not provided.
     * @type {string}
     * @memberof ReservationOveragePaymentType
     */
    userDefinedCardType?: string;
    /**
     * Window number associated where the balance is equal or higher to the credit limit on the method of payment.
     * @type {number}
     * @memberof ReservationOveragePaymentType
     */
    windowNo?: number;
}

/**
 * Check if a given object implements the ReservationOveragePaymentType interface.
 */
export function instanceOfReservationOveragePaymentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationOveragePaymentTypeFromJSON(json: any): ReservationOveragePaymentType {
    return ReservationOveragePaymentTypeFromJSONTyped(json, false);
}

export function ReservationOveragePaymentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationOveragePaymentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'balance': !exists(json, 'balance') ? undefined : CurrencyAmountTypeFromJSON(json['balance']),
        'cardExpirationDate': !exists(json, 'cardExpirationDate') ? undefined : json['cardExpirationDate'],
        'cardType': !exists(json, 'cardType') ? undefined : CardTypeTypeFromJSON(json['cardType']),
        'creditCardId': !exists(json, 'creditCardId') ? undefined : UniqueIDTypeFromJSON(json['creditCardId']),
        'creditCardLimit': !exists(json, 'creditCardLimit') ? undefined : CurrencyAmountTypeFromJSON(json['creditCardLimit']),
        'creditCardNo': !exists(json, 'creditCardNo') ? undefined : json['creditCardNo'],
        'guestName': !exists(json, 'guestName') ? undefined : json['guestName'],
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : json['paymentMethod'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'userDefinedCardType': !exists(json, 'userDefinedCardType') ? undefined : json['userDefinedCardType'],
        'windowNo': !exists(json, 'windowNo') ? undefined : json['windowNo'],
    };
}

export function ReservationOveragePaymentTypeToJSON(value?: ReservationOveragePaymentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'balance': CurrencyAmountTypeToJSON(value.balance),
        'cardExpirationDate': value.cardExpirationDate,
        'cardType': CardTypeTypeToJSON(value.cardType),
        'creditCardId': UniqueIDTypeToJSON(value.creditCardId),
        'creditCardLimit': CurrencyAmountTypeToJSON(value.creditCardLimit),
        'creditCardNo': value.creditCardNo,
        'guestName': value.guestName,
        'paymentMethod': value.paymentMethod,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'roomId': value.roomId,
        'userDefinedCardType': value.userDefinedCardType,
        'windowNo': value.windowNo,
    };
}

