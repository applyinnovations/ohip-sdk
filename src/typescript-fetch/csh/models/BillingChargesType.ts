/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BillingChargeType } from './BillingChargeType';
import {
    BillingChargeTypeFromJSON,
    BillingChargeTypeFromJSONTyped,
    BillingChargeTypeToJSON,
} from './BillingChargeType';

/**
 * Criteria for the charge information list to be edited.
 * @export
 * @interface BillingChargesType
 */
export interface BillingChargesType {
    /**
     * Request to edit a billing charge information
     * @type {Array<BillingChargeType>}
     * @memberof BillingChargesType
     */
    billingCharges?: Array<BillingChargeType>;
    /**
     * 
     * @type {string}
     * @memberof BillingChargesType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the BillingChargesType interface.
 */
export function instanceOfBillingChargesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BillingChargesTypeFromJSON(json: any): BillingChargesType {
    return BillingChargesTypeFromJSONTyped(json, false);
}

export function BillingChargesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingChargesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'billingCharges': !exists(json, 'billingCharges') ? undefined : ((json['billingCharges'] as Array<any>).map(BillingChargeTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function BillingChargesTypeToJSON(value?: BillingChargesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'billingCharges': value.billingCharges === undefined ? undefined : ((value.billingCharges as Array<any>).map(BillingChargeTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

