/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmailInfoType } from './EmailInfoType';
import {
    EmailInfoTypeFromJSON,
    EmailInfoTypeFromJSONTyped,
    EmailInfoTypeToJSON,
} from './EmailInfoType';

/**
 * List of email address for the customer.
 * @export
 * @interface ResCommunicationTypeEmails
 */
export interface ResCommunicationTypeEmails {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof ResCommunicationTypeEmails
     */
    count?: number;
    /**
     * Collection of Detailed information on an eMail address for the customer.
     * @type {Array<EmailInfoType>}
     * @memberof ResCommunicationTypeEmails
     */
    emailInfo?: Array<EmailInfoType>;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof ResCommunicationTypeEmails
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof ResCommunicationTypeEmails
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the ResCommunicationTypeEmails interface.
 */
export function instanceOfResCommunicationTypeEmails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResCommunicationTypeEmailsFromJSON(json: any): ResCommunicationTypeEmails {
    return ResCommunicationTypeEmailsFromJSONTyped(json, false);
}

export function ResCommunicationTypeEmailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResCommunicationTypeEmails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'emailInfo': !exists(json, 'emailInfo') ? undefined : ((json['emailInfo'] as Array<any>).map(EmailInfoTypeFromJSON)),
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function ResCommunicationTypeEmailsToJSON(value?: ResCommunicationTypeEmails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'emailInfo': value.emailInfo === undefined ? undefined : ((value.emailInfo as Array<any>).map(EmailInfoTypeToJSON)),
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
    };
}

