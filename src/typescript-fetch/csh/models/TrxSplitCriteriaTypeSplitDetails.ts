/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * The criteria required for the transaction splitting. Splitting can be done either by an amount or by a percentage. Atleast one should be defined.
 * @export
 * @interface TrxSplitCriteriaTypeSplitDetails
 */
export interface TrxSplitCriteriaTypeSplitDetails {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof TrxSplitCriteriaTypeSplitDetails
     */
    amount?: CurrencyAmountType;
    /**
     * The percentage by which the transaction has to be split.
     * @type {number}
     * @memberof TrxSplitCriteriaTypeSplitDetails
     */
    percentage?: number;
    /**
     * The quantity to split. This can be used only if the original quantity of the transaction(s) was > 1.
     * @type {number}
     * @memberof TrxSplitCriteriaTypeSplitDetails
     */
    quantity?: number;
}

/**
 * Check if a given object implements the TrxSplitCriteriaTypeSplitDetails interface.
 */
export function instanceOfTrxSplitCriteriaTypeSplitDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrxSplitCriteriaTypeSplitDetailsFromJSON(json: any): TrxSplitCriteriaTypeSplitDetails {
    return TrxSplitCriteriaTypeSplitDetailsFromJSONTyped(json, false);
}

export function TrxSplitCriteriaTypeSplitDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrxSplitCriteriaTypeSplitDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : CurrencyAmountTypeFromJSON(json['amount']),
        'percentage': !exists(json, 'percentage') ? undefined : json['percentage'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
    };
}

export function TrxSplitCriteriaTypeSplitDetailsToJSON(value?: TrxSplitCriteriaTypeSplitDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': CurrencyAmountTypeToJSON(value.amount),
        'percentage': value.percentage,
        'quantity': value.quantity,
    };
}

