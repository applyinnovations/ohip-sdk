/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Cashiering API
 * APIs to cater for Cashiering related functionality in OPERA Cloud.<br /><br /> Cashiering provides access to a guest folio, posting journals, receipt histories, currency calculations, credit card settlements, and check a guest out.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * Converted values for the Exchange Currency requested.
 * @export
 * @interface ExchangeAmounts
 */
export interface ExchangeAmounts {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ExchangeAmounts
     */
    creditAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ExchangeAmounts
     */
    debitAmount?: CurrencyAmountType;
}

/**
 * Check if a given object implements the ExchangeAmounts interface.
 */
export function instanceOfExchangeAmounts(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExchangeAmountsFromJSON(json: any): ExchangeAmounts {
    return ExchangeAmountsFromJSONTyped(json, false);
}

export function ExchangeAmountsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExchangeAmounts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'creditAmount': !exists(json, 'creditAmount') ? undefined : CurrencyAmountTypeFromJSON(json['creditAmount']),
        'debitAmount': !exists(json, 'debitAmount') ? undefined : CurrencyAmountTypeFromJSON(json['debitAmount']),
    };
}

export function ExchangeAmountsToJSON(value?: ExchangeAmounts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'creditAmount': CurrencyAmountTypeToJSON(value.creditAmount),
        'debitAmount': CurrencyAmountTypeToJSON(value.debitAmount),
    };
}

