/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdjustmentReasonsDetailsUpdated,
  ChangeAdjustmentReasonsDetails,
  ChangeRevenueTransactionCodesCriteria,
  ChangeRevenueTransactionCodesDetails,
  ChangeRoomOwnerDetails,
  ChangeRoomOwnerReferralDetails,
  ChangeRotationPeriodDetails,
  ChangeUnitGradesDetails,
  CreateAdjustmentReasonsDetails,
  CreateRoomOwnerDetails,
  CreateRoomOwnerReferralDetails,
  CreateUnitGradesDetails,
  ExceptionDetailType,
  FetchAdjustmentReasonsDetails,
  FetchRevenueTransactionCodesDetails,
  FetchRotationPeriod,
  FetchRotationRules,
  FetchUnitGradesDetails,
  OverrideReasonsCriteria,
  OverrideReasonsDetails,
  OverrideReasonsToBeChanged,
  RoomOwnerReferralDetails,
  RoomOwnershipDetails,
  RoomRotationRules,
  RotationPeriod,
  RotationRules,
  Status,
  UnitGradesDetailsUpdated,
} from '../models/index';
import {
    AdjustmentReasonsDetailsUpdatedFromJSON,
    AdjustmentReasonsDetailsUpdatedToJSON,
    ChangeAdjustmentReasonsDetailsFromJSON,
    ChangeAdjustmentReasonsDetailsToJSON,
    ChangeRevenueTransactionCodesCriteriaFromJSON,
    ChangeRevenueTransactionCodesCriteriaToJSON,
    ChangeRevenueTransactionCodesDetailsFromJSON,
    ChangeRevenueTransactionCodesDetailsToJSON,
    ChangeRoomOwnerDetailsFromJSON,
    ChangeRoomOwnerDetailsToJSON,
    ChangeRoomOwnerReferralDetailsFromJSON,
    ChangeRoomOwnerReferralDetailsToJSON,
    ChangeRotationPeriodDetailsFromJSON,
    ChangeRotationPeriodDetailsToJSON,
    ChangeUnitGradesDetailsFromJSON,
    ChangeUnitGradesDetailsToJSON,
    CreateAdjustmentReasonsDetailsFromJSON,
    CreateAdjustmentReasonsDetailsToJSON,
    CreateRoomOwnerDetailsFromJSON,
    CreateRoomOwnerDetailsToJSON,
    CreateRoomOwnerReferralDetailsFromJSON,
    CreateRoomOwnerReferralDetailsToJSON,
    CreateUnitGradesDetailsFromJSON,
    CreateUnitGradesDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchAdjustmentReasonsDetailsFromJSON,
    FetchAdjustmentReasonsDetailsToJSON,
    FetchRevenueTransactionCodesDetailsFromJSON,
    FetchRevenueTransactionCodesDetailsToJSON,
    FetchRotationPeriodFromJSON,
    FetchRotationPeriodToJSON,
    FetchRotationRulesFromJSON,
    FetchRotationRulesToJSON,
    FetchUnitGradesDetailsFromJSON,
    FetchUnitGradesDetailsToJSON,
    OverrideReasonsCriteriaFromJSON,
    OverrideReasonsCriteriaToJSON,
    OverrideReasonsDetailsFromJSON,
    OverrideReasonsDetailsToJSON,
    OverrideReasonsToBeChangedFromJSON,
    OverrideReasonsToBeChangedToJSON,
    RoomOwnerReferralDetailsFromJSON,
    RoomOwnerReferralDetailsToJSON,
    RoomOwnershipDetailsFromJSON,
    RoomOwnershipDetailsToJSON,
    RoomRotationRulesFromJSON,
    RoomRotationRulesToJSON,
    RotationPeriodFromJSON,
    RotationPeriodToJSON,
    RotationRulesFromJSON,
    RotationRulesToJSON,
    StatusFromJSON,
    StatusToJSON,
    UnitGradesDetailsUpdatedFromJSON,
    UnitGradesDetailsUpdatedToJSON,
} from '../models/index';

export interface DeleteAdjustmentReasonsRequest {
    adjustmentReasonsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteOverrideReasonsRequest {
    overrideReasonsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomOwnerRequest {
    roomOwnershipId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    overrideReferralCheck?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomOwnerReferralRequest {
    profileId: string;
    roomOwnerReferralId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRotationRulesRequest {
    ruleId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteUnitGradesRequest {
    unitGradeCode: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAdjustmentReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOverrideReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileRoomOwnersRequest {
    profileId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    showInactiveRoomOwners?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueTransactionCodesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    rotationRevenue?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomOwnerReferralsRequest {
    profileId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRotationPeriodRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRotationRulesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    setupType?: GetRotationRulesSetupTypeEnum;
    inactiveRules?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUnitGradesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelIds?: Array<string>;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdjustmentReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createAdjustmentReasonsDetails: CreateAdjustmentReasonsDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOverrideReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    overrideReasonsCriteria: OverrideReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomOwnerRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createRoomOwnerDetails: CreateRoomOwnerDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomOwnerReferralsRequest {
    profileId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createRoomOwnerReferralDetails: CreateRoomOwnerReferralDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomRotationRulesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    rotationRules: RoomRotationRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRotationRulesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    rotationRules: RotationRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUnitGradesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    createUnitGradesDetails: CreateUnitGradesDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAdjustmentReasonsRequest {
    adjustmentReasonsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeAdjustmentReasonsDetails: ChangeAdjustmentReasonsDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutOverrideReasonsRequest {
    overrideReasonsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    overrideReasonsToBeChanged: OverrideReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueTransactionCodesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeRevenueTransactionCodesCriteria: ChangeRevenueTransactionCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomOwnerRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeRoomOwnerDetails: ChangeRoomOwnerDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomOwnerReferralRequest {
    profileId: string;
    roomOwnerReferralId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeRoomOwnerReferralDetails: ChangeRoomOwnerReferralDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRotationPeriodRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    rotationPeriod: RotationPeriod;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRotationRulesRequest {
    ruleId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    rotationRules: RotationRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutUnitGradesRequest {
    unitGradeCode: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    changeUnitGradesDetails: ChangeUnitGradesDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class RoomRotationConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to delete Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    async deleteAdjustmentReasonsRaw(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.adjustmentReasonsId === null || requestParameters.adjustmentReasonsId === undefined) {
            throw new runtime.RequiredError('adjustmentReasonsId','Required parameter requestParameters.adjustmentReasonsId was null or undefined when calling deleteAdjustmentReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteAdjustmentReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteAdjustmentReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteAdjustmentReasons.');
        }

        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons/{adjustmentReasonsId}`.replace(`{${"adjustmentReasonsId"}}`, encodeURIComponent(String(requestParameters.adjustmentReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>deleteAdjustmentReasons</p>
     * Delete Room Rotation Adjustment Reasons
     */
    async deleteAdjustmentReasons(requestParameters: DeleteAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    async deleteOverrideReasonsRaw(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.overrideReasonsId === null || requestParameters.overrideReasonsId === undefined) {
            throw new runtime.RequiredError('overrideReasonsId','Required parameter requestParameters.overrideReasonsId was null or undefined when calling deleteOverrideReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteOverrideReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteOverrideReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteOverrideReasons.');
        }

        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons/{overrideReasonsId}`.replace(`{${"overrideReasonsId"}}`, encodeURIComponent(String(requestParameters.overrideReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>deleteOverrideReasons</p>
     * Delete an existing Room Rotation Override Reason
     */
    async deleteOverrideReasons(requestParameters: DeleteOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Ownership Record. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Ownership Record
     */
    async deleteRoomOwnerRaw(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.roomOwnershipId === null || requestParameters.roomOwnershipId === undefined) {
            throw new runtime.RequiredError('roomOwnershipId','Required parameter requestParameters.roomOwnershipId was null or undefined when calling deleteRoomOwner.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRoomOwner.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteRoomOwner.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteRoomOwner.');
        }

        const queryParameters: any = {};

        if (requestParameters.overrideReferralCheck !== undefined) {
            queryParameters['overrideReferralCheck'] = requestParameters.overrideReferralCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomOwners/{roomOwnershipId}`.replace(`{${"roomOwnershipId"}}`, encodeURIComponent(String(requestParameters.roomOwnershipId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Ownership Record. <p><strong>OperationId:</strong>deleteRoomOwner</p>
     * Delete Room Ownership Record
     */
    async deleteRoomOwner(requestParameters: DeleteRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Room Owner Referral Record. <p><strong>OperationId:</strong>deleteRoomOwnerReferral</p>
     * Delete Room Owner Referral Record
     */
    async deleteRoomOwnerReferralRaw(requestParameters: DeleteRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteRoomOwnerReferral.');
        }

        if (requestParameters.roomOwnerReferralId === null || requestParameters.roomOwnerReferralId === undefined) {
            throw new runtime.RequiredError('roomOwnerReferralId','Required parameter requestParameters.roomOwnerReferralId was null or undefined when calling deleteRoomOwnerReferral.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRoomOwnerReferral.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteRoomOwnerReferral.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteRoomOwnerReferral.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals/{roomOwnerReferralId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"roomOwnerReferralId"}}`, encodeURIComponent(String(requestParameters.roomOwnerReferralId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Room Owner Referral Record. <p><strong>OperationId:</strong>deleteRoomOwnerReferral</p>
     * Delete Room Owner Referral Record
     */
    async deleteRoomOwnerReferral(requestParameters: DeleteRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomOwnerReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Delete an existing Room Rotation Rule
     * @deprecated
     */
    async deleteRotationRulesRaw(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling deleteRotationRules.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRotationRules.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRotationRules.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteRotationRules.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteRotationRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Delete an existing Room Rotation Rule
     * @deprecated
     */
    async deleteRotationRules(requestParameters: DeleteRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Room Rotation Owner Room Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Owner Room Unit Grade
     */
    async deleteUnitGradesRaw(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.unitGradeCode === null || requestParameters.unitGradeCode === undefined) {
            throw new runtime.RequiredError('unitGradeCode','Required parameter requestParameters.unitGradeCode was null or undefined when calling deleteUnitGrades.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteUnitGrades.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteUnitGrades.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteUnitGrades.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteUnitGrades.');
        }

        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades/{unitGradeCode}`.replace(`{${"unitGradeCode"}}`, encodeURIComponent(String(requestParameters.unitGradeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Room Rotation Owner Room Unit Grade. <p><strong>OperationId:</strong>deleteUnitGrades</p>
     * Delete an existing Room Rotation Owner Room Unit Grade
     */
    async deleteUnitGrades(requestParameters: DeleteUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get configured Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    async getAdjustmentReasonsRaw(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchAdjustmentReasonsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAdjustmentReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAdjustmentReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAdjustmentReasons.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchAdjustmentReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get configured Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>getAdjustmentReasons</p>
     * Get Room Rotation Adjustment Reasons
     */
    async getAdjustmentReasons(requestParameters: GetAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchAdjustmentReasonsDetails> {
        const response = await this.getAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get configured Room Rotation Override Reasons <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    async getOverrideReasonsRaw(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OverrideReasonsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getOverrideReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getOverrideReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getOverrideReasons.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OverrideReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get configured Room Rotation Override Reasons <p><strong>OperationId:</strong>getOverrideReasons</p>
     * Get Room Rotation Override Reasons
     */
    async getOverrideReasons(requestParameters: GetOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OverrideReasonsDetails> {
        const response = await this.getOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch profile Room Ownership Records. <p><strong>OperationId:</strong>getProfileRoomOwners</p>
     * Get Profile Room Ownership Records
     */
    async getProfileRoomOwnersRaw(requestParameters: GetProfileRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileRoomOwners.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getProfileRoomOwners.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getProfileRoomOwners.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getProfileRoomOwners.');
        }

        const queryParameters: any = {};

        if (requestParameters.showInactiveRoomOwners !== undefined) {
            queryParameters['showInactiveRoomOwners'] = requestParameters.showInactiveRoomOwners;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwners`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnershipDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch profile Room Ownership Records. <p><strong>OperationId:</strong>getProfileRoomOwners</p>
     * Get Profile Room Ownership Records
     */
    async getProfileRoomOwners(requestParameters: GetProfileRoomOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails> {
        const response = await this.getProfileRoomOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes for a given hotel. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    async getRevenueTransactionCodesRaw(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRevenueTransactionCodesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRevenueTransactionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRevenueTransactionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRevenueTransactionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRevenueTransactionCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.rotationRevenue !== undefined) {
            queryParameters['rotationRevenue'] = requestParameters.rotationRevenue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/revenueTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRevenueTransactionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all existing Room Rotation Revenue Transaction Codes for a given hotel. <p><strong>OperationId:</strong>getRevenueTransactionCodes</p>
     * Retrieve all Room Rotation Revenue Transaction Codes
     */
    async getRevenueTransactionCodes(requestParameters: GetRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRevenueTransactionCodesDetails> {
        const response = await this.getRevenueTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch profile Owner Referral Records. <p><strong>OperationId:</strong>getRoomOwnerReferrals</p>
     * Get Profile Owner Referral Records.
     */
    async getRoomOwnerReferralsRaw(requestParameters: GetRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnerReferralDetails>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getRoomOwnerReferrals.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRoomOwnerReferrals.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRoomOwnerReferrals.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRoomOwnerReferrals.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnerReferralDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch profile Owner Referral Records. <p><strong>OperationId:</strong>getRoomOwnerReferrals</p>
     * Get Profile Owner Referral Records.
     */
    async getRoomOwnerReferrals(requestParameters: GetRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnerReferralDetails> {
        const response = await this.getRoomOwnerReferralsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    async getRotationPeriodRaw(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationPeriod>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRotationPeriod.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRotationPeriod.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRotationPeriod.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRotationPeriod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationPeriod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRotationPeriodFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch Room Rotation Period based on criteria. <p><strong>OperationId:</strong>getRotationPeriod</p>
     * Fetch Room Rotation Period
     */
    async getRotationPeriod(requestParameters: GetRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationPeriod> {
        const response = await this.getRotationPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all existing Room Rotation Setup Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Setup Rules
     */
    async getRotationRulesRaw(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchRotationRules>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRotationRules.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRotationRules.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRotationRules.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRotationRules.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.setupType !== undefined) {
            queryParameters['setupType'] = requestParameters.setupType;
        }

        if (requestParameters.inactiveRules !== undefined) {
            queryParameters['inactiveRules'] = requestParameters.inactiveRules;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchRotationRulesFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all existing Room Rotation Setup Rules based on criteria. <p><strong>OperationId:</strong>getRotationRules</p>
     * Retrieve all Room Rotation Setup Rules
     */
    async getRotationRules(requestParameters: GetRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchRotationRules> {
        const response = await this.getRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Get Room Rotation Owner Room Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Owner Room Grades
     */
    async getUnitGradesRaw(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchUnitGradesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getUnitGrades.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getUnitGrades.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getUnitGrades.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getUnitGrades.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchUnitGradesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to Get Room Rotation Owner Room Grades. <p><strong>OperationId:</strong>getUnitGrades</p>
     * Get Room Rotation Owner Room Grades
     */
    async getUnitGrades(requestParameters: GetUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchUnitGradesDetails> {
        const response = await this.getUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    async postAdjustmentReasonsRaw(requestParameters: PostAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postAdjustmentReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postAdjustmentReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postAdjustmentReasons.');
        }

        if (requestParameters.createAdjustmentReasonsDetails === null || requestParameters.createAdjustmentReasonsDetails === undefined) {
            throw new runtime.RequiredError('createAdjustmentReasonsDetails','Required parameter requestParameters.createAdjustmentReasonsDetails was null or undefined when calling postAdjustmentReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAdjustmentReasonsDetailsToJSON(requestParameters.createAdjustmentReasonsDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to post Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>postAdjustmentReasons</p>
     * Post Room Rotation Adjustment Reasons
     */
    async postAdjustmentReasons(requestParameters: PostAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    async postOverrideReasonsRaw(requestParameters: PostOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postOverrideReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postOverrideReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postOverrideReasons.');
        }

        if (requestParameters.overrideReasonsCriteria === null || requestParameters.overrideReasonsCriteria === undefined) {
            throw new runtime.RequiredError('overrideReasonsCriteria','Required parameter requestParameters.overrideReasonsCriteria was null or undefined when calling postOverrideReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OverrideReasonsCriteriaToJSON(requestParameters.overrideReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Room Rotation Override Reason. <p><strong>OperationId:</strong>postOverrideReasons</p>
     * Create a new Room Rotation Override Reason
     */
    async postOverrideReasons(requestParameters: PostOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Create Room Ownership Record. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Ownership Record
     */
    async postRoomOwnerRaw(requestParameters: PostRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRoomOwner.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRoomOwner.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRoomOwner.');
        }

        if (requestParameters.createRoomOwnerDetails === null || requestParameters.createRoomOwnerDetails === undefined) {
            throw new runtime.RequiredError('createRoomOwnerDetails','Required parameter requestParameters.createRoomOwnerDetails was null or undefined when calling postRoomOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomOwners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoomOwnerDetailsToJSON(requestParameters.createRoomOwnerDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnershipDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to create Create Room Ownership Record. <p><strong>OperationId:</strong>postRoomOwner</p>
     * Create Room Ownership Record
     */
    async postRoomOwner(requestParameters: PostRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails> {
        const response = await this.postRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create multiple Room Owner Referral Records. <p><strong>OperationId:</strong>postRoomOwnerReferrals</p>
     * Create Room Owner Referrals
     */
    async postRoomOwnerReferralsRaw(requestParameters: PostRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling postRoomOwnerReferrals.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRoomOwnerReferrals.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRoomOwnerReferrals.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRoomOwnerReferrals.');
        }

        if (requestParameters.createRoomOwnerReferralDetails === null || requestParameters.createRoomOwnerReferralDetails === undefined) {
            throw new runtime.RequiredError('createRoomOwnerReferralDetails','Required parameter requestParameters.createRoomOwnerReferralDetails was null or undefined when calling postRoomOwnerReferrals.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRoomOwnerReferralDetailsToJSON(requestParameters.createRoomOwnerReferralDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create multiple Room Owner Referral Records. <p><strong>OperationId:</strong>postRoomOwnerReferrals</p>
     * Create Room Owner Referrals
     */
    async postRoomOwnerReferrals(requestParameters: PostRoomOwnerReferralsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomOwnerReferralsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This operation will create/update/delete Rotation Setup Rules sent in the request and then recalculate rotation points.  <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Save changes to Rotation Setup Rules and recalculate Rotation Points
     */
    async postRoomRotationRulesRaw(requestParameters: PostRoomRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRoomRotationRules.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRoomRotationRules.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRoomRotationRules.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRoomRotationRules.');
        }

        if (requestParameters.rotationRules === null || requestParameters.rotationRules === undefined) {
            throw new runtime.RequiredError('rotationRules','Required parameter requestParameters.rotationRules was null or undefined when calling postRoomRotationRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoomRotationRulesToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This operation will create/update/delete Rotation Setup Rules sent in the request and then recalculate rotation points.  <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Save changes to Rotation Setup Rules and recalculate Rotation Points
     */
    async postRoomRotationRules(requestParameters: PostRoomRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Create Room Rotation Rules
     * @deprecated
     */
    async postRotationRulesRaw(requestParameters: PostRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRotationRules.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRotationRules.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRotationRules.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRotationRules.');
        }

        if (requestParameters.rotationRules === null || requestParameters.rotationRules === undefined) {
            throw new runtime.RequiredError('rotationRules','Required parameter requestParameters.rotationRules was null or undefined when calling postRotationRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RotationRulesToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Create Room Rotation Rules
     * @deprecated
     */
    async postRotationRules(requestParameters: PostRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Room Rotation Owner Room Grade Code. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Owner Room Grade Code
     */
    async postUnitGradesRaw(requestParameters: PostUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postUnitGrades.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postUnitGrades.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postUnitGrades.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postUnitGrades.');
        }

        if (requestParameters.createUnitGradesDetails === null || requestParameters.createUnitGradesDetails === undefined) {
            throw new runtime.RequiredError('createUnitGradesDetails','Required parameter requestParameters.createUnitGradesDetails was null or undefined when calling postUnitGrades.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUnitGradesDetailsToJSON(requestParameters.createUnitGradesDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Room Rotation Owner Room Grade Code. <p><strong>OperationId:</strong>postUnitGrades</p>
     * Create a new Room Rotation Owner Room Grade Code
     */
    async postUnitGrades(requestParameters: PostUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    async putAdjustmentReasonsRaw(requestParameters: PutAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentReasonsDetailsUpdated>> {
        if (requestParameters.adjustmentReasonsId === null || requestParameters.adjustmentReasonsId === undefined) {
            throw new runtime.RequiredError('adjustmentReasonsId','Required parameter requestParameters.adjustmentReasonsId was null or undefined when calling putAdjustmentReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putAdjustmentReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putAdjustmentReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putAdjustmentReasons.');
        }

        if (requestParameters.changeAdjustmentReasonsDetails === null || requestParameters.changeAdjustmentReasonsDetails === undefined) {
            throw new runtime.RequiredError('changeAdjustmentReasonsDetails','Required parameter requestParameters.changeAdjustmentReasonsDetails was null or undefined when calling putAdjustmentReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/adjustmentReasons/{adjustmentReasonsId}`.replace(`{${"adjustmentReasonsId"}}`, encodeURIComponent(String(requestParameters.adjustmentReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeAdjustmentReasonsDetailsToJSON(requestParameters.changeAdjustmentReasonsDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentReasonsDetailsUpdatedFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Adjustment Reasons. <p><strong>OperationId:</strong>putAdjustmentReasons</p>
     * Update Room Rotation Adjustment Reasons
     */
    async putAdjustmentReasons(requestParameters: PutAdjustmentReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentReasonsDetailsUpdated> {
        const response = await this.putAdjustmentReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    async putOverrideReasonsRaw(requestParameters: PutOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.overrideReasonsId === null || requestParameters.overrideReasonsId === undefined) {
            throw new runtime.RequiredError('overrideReasonsId','Required parameter requestParameters.overrideReasonsId was null or undefined when calling putOverrideReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putOverrideReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putOverrideReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putOverrideReasons.');
        }

        if (requestParameters.overrideReasonsToBeChanged === null || requestParameters.overrideReasonsToBeChanged === undefined) {
            throw new runtime.RequiredError('overrideReasonsToBeChanged','Required parameter requestParameters.overrideReasonsToBeChanged was null or undefined when calling putOverrideReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/overrideReasons/{overrideReasonsId}`.replace(`{${"overrideReasonsId"}}`, encodeURIComponent(String(requestParameters.overrideReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OverrideReasonsToBeChangedToJSON(requestParameters.overrideReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing Room Rotation Override Reason. <p><strong>OperationId:</strong>putOverrideReasons</p>
     * Change an existing Room Rotation Override Reason
     */
    async putOverrideReasons(requestParameters: PutOverrideReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putOverrideReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    async putRevenueTransactionCodesRaw(requestParameters: PutRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRevenueTransactionCodesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRevenueTransactionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRevenueTransactionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRevenueTransactionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRevenueTransactionCodes.');
        }

        if (requestParameters.changeRevenueTransactionCodesCriteria === null || requestParameters.changeRevenueTransactionCodesCriteria === undefined) {
            throw new runtime.RequiredError('changeRevenueTransactionCodesCriteria','Required parameter requestParameters.changeRevenueTransactionCodesCriteria was null or undefined when calling putRevenueTransactionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/revenueTransactionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRevenueTransactionCodesCriteriaToJSON(requestParameters.changeRevenueTransactionCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeRevenueTransactionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to update the room rotation revenue status of a set of transaction codes. <p><strong>OperationId:</strong>putRevenueTransactionCodes</p>
     * Update the room rotation revenue status of a set of transaction codes
     */
    async putRevenueTransactionCodes(requestParameters: PutRevenueTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRevenueTransactionCodesDetails> {
        const response = await this.putRevenueTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Multiple Room Ownership Records across properties. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Ownership Records
     */
    async putRoomOwnerRaw(requestParameters: PutRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomOwnershipDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRoomOwner.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRoomOwner.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRoomOwner.');
        }

        if (requestParameters.changeRoomOwnerDetails === null || requestParameters.changeRoomOwnerDetails === undefined) {
            throw new runtime.RequiredError('changeRoomOwnerDetails','Required parameter requestParameters.changeRoomOwnerDetails was null or undefined when calling putRoomOwner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/roomOwners`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRoomOwnerDetailsToJSON(requestParameters.changeRoomOwnerDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomOwnershipDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to update Multiple Room Ownership Records across properties. <p><strong>OperationId:</strong>putRoomOwner</p>
     * Change Room Ownership Records
     */
    async putRoomOwner(requestParameters: PutRoomOwnerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomOwnershipDetails> {
        const response = await this.putRoomOwnerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Owner Referral Record. <p><strong>OperationId:</strong>putRoomOwnerReferral</p>
     * Change Room Owner Referral Record
     */
    async putRoomOwnerReferralRaw(requestParameters: PutRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling putRoomOwnerReferral.');
        }

        if (requestParameters.roomOwnerReferralId === null || requestParameters.roomOwnerReferralId === undefined) {
            throw new runtime.RequiredError('roomOwnerReferralId','Required parameter requestParameters.roomOwnerReferralId was null or undefined when calling putRoomOwnerReferral.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRoomOwnerReferral.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRoomOwnerReferral.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRoomOwnerReferral.');
        }

        if (requestParameters.changeRoomOwnerReferralDetails === null || requestParameters.changeRoomOwnerReferralDetails === undefined) {
            throw new runtime.RequiredError('changeRoomOwnerReferralDetails','Required parameter requestParameters.changeRoomOwnerReferralDetails was null or undefined when calling putRoomOwnerReferral.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/roomOwnerReferrals/{roomOwnerReferralId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"roomOwnerReferralId"}}`, encodeURIComponent(String(requestParameters.roomOwnerReferralId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeRoomOwnerReferralDetailsToJSON(requestParameters.changeRoomOwnerReferralDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Owner Referral Record. <p><strong>OperationId:</strong>putRoomOwnerReferral</p>
     * Change Room Owner Referral Record
     */
    async putRoomOwnerReferral(requestParameters: PutRoomOwnerReferralRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomOwnerReferralRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    async putRotationPeriodRaw(requestParameters: PutRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeRotationPeriodDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRotationPeriod.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRotationPeriod.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRotationPeriod.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRotationPeriod.');
        }

        if (requestParameters.rotationPeriod === null || requestParameters.rotationPeriod === undefined) {
            throw new runtime.RequiredError('rotationPeriod','Required parameter requestParameters.rotationPeriod was null or undefined when calling putRotationPeriod.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rotationPeriod`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RotationPeriodToJSON(requestParameters.rotationPeriod),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeRotationPeriodDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to change Room Rotation Period. <p><strong>OperationId:</strong>putRotationPeriod</p>
     * Change Room Rotation Period
     */
    async putRotationPeriod(requestParameters: PutRotationPeriodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeRotationPeriodDetails> {
        const response = await this.putRotationPeriodRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Change Room Rotation Rules
     * @deprecated
     */
    async putRotationRulesRaw(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling putRotationRules.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRotationRules.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRotationRules.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRotationRules.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRotationRules.');
        }

        if (requestParameters.rotationRules === null || requestParameters.rotationRules === undefined) {
            throw new runtime.RequiredError('rotationRules','Required parameter requestParameters.rotationRules was null or undefined when calling putRotationRules.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rules/{ruleId}`.replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RotationRulesToJSON(requestParameters.rotationRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API has been deprecated and will be replaced by <p><strong>OperationId:</strong>postRoomRotationRules</p>
     * Change Room Rotation Rules
     * @deprecated
     */
    async putRotationRules(requestParameters: PutRotationRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRotationRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Rotation Owner Room Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Owner Room Unit Grade
     */
    async putUnitGradesRaw(requestParameters: PutUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnitGradesDetailsUpdated>> {
        if (requestParameters.unitGradeCode === null || requestParameters.unitGradeCode === undefined) {
            throw new runtime.RequiredError('unitGradeCode','Required parameter requestParameters.unitGradeCode was null or undefined when calling putUnitGrades.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putUnitGrades.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putUnitGrades.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putUnitGrades.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putUnitGrades.');
        }

        if (requestParameters.changeUnitGradesDetails === null || requestParameters.changeUnitGradesDetails === undefined) {
            throw new runtime.RequiredError('changeUnitGradesDetails','Required parameter requestParameters.changeUnitGradesDetails was null or undefined when calling putUnitGrades.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/unitGrades/{unitGradeCode}`.replace(`{${"unitGradeCode"}}`, encodeURIComponent(String(requestParameters.unitGradeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeUnitGradesDetailsToJSON(requestParameters.changeUnitGradesDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitGradesDetailsUpdatedFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Rotation Owner Room Unit Grades. <p><strong>OperationId:</strong>putUnitGrades</p>
     * Change an existing Room Rotation Owner Room Unit Grade
     */
    async putUnitGrades(requestParameters: PutUnitGradesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnitGradesDetailsUpdated> {
        const response = await this.putUnitGradesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRotationRulesSetupTypeEnum = {
    Points: 'Points',
    OwnerMultiplier: 'OwnerMultiplier',
    RoomStatusMultiplier: 'RoomStatusMultiplier'
} as const;
export type GetRotationRulesSetupTypeEnum = typeof GetRotationRulesSetupTypeEnum[keyof typeof GetRotationRulesSetupTypeEnum];
