/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DaysOfWeekAttrType } from './DaysOfWeekAttrType';
import {
    DaysOfWeekAttrTypeFromJSON,
    DaysOfWeekAttrTypeFromJSONTyped,
    DaysOfWeekAttrTypeToJSON,
} from './DaysOfWeekAttrType';
import type { RotationRuleCalculationRuleType } from './RotationRuleCalculationRuleType';
import {
    RotationRuleCalculationRuleTypeFromJSON,
    RotationRuleCalculationRuleTypeFromJSONTyped,
    RotationRuleCalculationRuleTypeToJSON,
} from './RotationRuleCalculationRuleType';
import type { RotationRuleSetupType } from './RotationRuleSetupType';
import {
    RotationRuleSetupTypeFromJSON,
    RotationRuleSetupTypeFromJSONTyped,
    RotationRuleSetupTypeToJSON,
} from './RotationRuleSetupType';
import type { RotationRuleStatusType } from './RotationRuleStatusType';
import {
    RotationRuleStatusTypeFromJSON,
    RotationRuleStatusTypeFromJSONTyped,
    RotationRuleStatusTypeToJSON,
} from './RotationRuleStatusType';

/**
 * 
 * @export
 * @interface RotationRuleType
 */
export interface RotationRuleType {
    /**
     * 
     * @type {RotationRuleStatusType}
     * @memberof RotationRuleType
     */
    status?: RotationRuleStatusType;
    /**
     * 
     * @type {RotationRuleSetupType}
     * @memberof RotationRuleType
     */
    setupType?: RotationRuleSetupType;
    /**
     * Unique ID for Room Rotation Setup Rule.
     * @type {number}
     * @memberof RotationRuleType
     */
    ruleId?: number;
    /**
     * Represents start date for Room Rotation Setup Rule.
     * @type {string}
     * @memberof RotationRuleType
     */
    startDate?: string;
    /**
     * Represents end date for Room Rotation Setup Rule.
     * @type {string}
     * @memberof RotationRuleType
     */
    endDate?: string;
    /**
     * 
     * @type {DaysOfWeekAttrType}
     * @memberof RotationRuleType
     */
    daysOfWeek?: DaysOfWeekAttrType;
    /**
     * 
     * @type {RotationRuleCalculationRuleType}
     * @memberof RotationRuleType
     */
    calculationRule?: RotationRuleCalculationRuleType;
    /**
     * Indicates that this Rotation Setup Rule is to be used for Owner Referral Reservations.
     * @type {boolean}
     * @memberof RotationRuleType
     */
    referral?: boolean;
    /**
     * Represents total points for a Rotation Setup Rule. (To be used with Rotation Point Rules)
     * @type {number}
     * @memberof RotationRuleType
     */
    points?: number;
    /**
     * Represents multiplier value to be used for an Owner Multiplier Rule or an Out of Order / Service Multiplier rule.
     * @type {number}
     * @memberof RotationRuleType
     */
    multiplier?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof RotationRuleType
     */
    reasons?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RotationRuleType
     */
    rateCodes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RotationRuleType
     */
    roomTypes?: Array<string>;
}

/**
 * Check if a given object implements the RotationRuleType interface.
 */
export function instanceOfRotationRuleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RotationRuleTypeFromJSON(json: any): RotationRuleType {
    return RotationRuleTypeFromJSONTyped(json, false);
}

export function RotationRuleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RotationRuleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : RotationRuleStatusTypeFromJSON(json['status']),
        'setupType': !exists(json, 'setupType') ? undefined : RotationRuleSetupTypeFromJSON(json['setupType']),
        'ruleId': !exists(json, 'ruleId') ? undefined : json['ruleId'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'daysOfWeek': !exists(json, 'daysOfWeek') ? undefined : DaysOfWeekAttrTypeFromJSON(json['daysOfWeek']),
        'calculationRule': !exists(json, 'calculationRule') ? undefined : RotationRuleCalculationRuleTypeFromJSON(json['calculationRule']),
        'referral': !exists(json, 'referral') ? undefined : json['referral'],
        'points': !exists(json, 'points') ? undefined : json['points'],
        'multiplier': !exists(json, 'multiplier') ? undefined : json['multiplier'],
        'reasons': !exists(json, 'reasons') ? undefined : json['reasons'],
        'rateCodes': !exists(json, 'rateCodes') ? undefined : json['rateCodes'],
        'roomTypes': !exists(json, 'roomTypes') ? undefined : json['roomTypes'],
    };
}

export function RotationRuleTypeToJSON(value?: RotationRuleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': RotationRuleStatusTypeToJSON(value.status),
        'setupType': RotationRuleSetupTypeToJSON(value.setupType),
        'ruleId': value.ruleId,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'daysOfWeek': DaysOfWeekAttrTypeToJSON(value.daysOfWeek),
        'calculationRule': RotationRuleCalculationRuleTypeToJSON(value.calculationRule),
        'referral': value.referral,
        'points': value.points,
        'multiplier': value.multiplier,
        'reasons': value.reasons,
        'rateCodes': value.rateCodes,
        'roomTypes': value.roomTypes,
    };
}

