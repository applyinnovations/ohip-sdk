/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MasterInfoType } from './MasterInfoType';
import {
    MasterInfoTypeFromJSON,
    MasterInfoTypeFromJSONTyped,
    MasterInfoTypeToJSON,
} from './MasterInfoType';
import type { RotationRulesType } from './RotationRulesType';
import {
    RotationRulesTypeFromJSON,
    RotationRulesTypeFromJSONTyped,
    RotationRulesTypeToJSON,
} from './RotationRulesType';

/**
 * Collection of Room Rotation Setup Rules Results.
 * @export
 * @interface RotationRulesResultType
 */
export interface RotationRulesResultType {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof RotationRulesResultType
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof RotationRulesResultType
     */
    hasMore?: boolean;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof RotationRulesResultType
     */
    limit?: number;
    /**
     * Collection of RateCodes, RoomTypes, Out of Order Reasons
     * @type {Array<MasterInfoType>}
     * @memberof RotationRulesResultType
     */
    masterInfo?: Array<MasterInfoType>;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof RotationRulesResultType
     */
    offset?: number;
    /**
     * 
     * @type {RotationRulesType}
     * @memberof RotationRulesResultType
     */
    rotationRules?: RotationRulesType;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof RotationRulesResultType
     */
    totalPages?: number;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof RotationRulesResultType
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the RotationRulesResultType interface.
 */
export function instanceOfRotationRulesResultType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RotationRulesResultTypeFromJSON(json: any): RotationRulesResultType {
    return RotationRulesResultTypeFromJSONTyped(json, false);
}

export function RotationRulesResultTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RotationRulesResultType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'masterInfo': !exists(json, 'masterInfo') ? undefined : ((json['masterInfo'] as Array<any>).map(MasterInfoTypeFromJSON)),
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'rotationRules': !exists(json, 'rotationRules') ? undefined : RotationRulesTypeFromJSON(json['rotationRules']),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function RotationRulesResultTypeToJSON(value?: RotationRulesResultType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'limit': value.limit,
        'masterInfo': value.masterInfo === undefined ? undefined : ((value.masterInfo as Array<any>).map(MasterInfoTypeToJSON)),
        'offset': value.offset,
        'rotationRules': RotationRulesTypeToJSON(value.rotationRules),
        'totalPages': value.totalPages,
        'totalResults': value.totalResults,
    };
}

