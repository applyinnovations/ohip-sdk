/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RotationPeriodFrequencyType } from './RotationPeriodFrequencyType';
import {
    RotationPeriodFrequencyTypeFromJSON,
    RotationPeriodFrequencyTypeFromJSONTyped,
    RotationPeriodFrequencyTypeToJSON,
} from './RotationPeriodFrequencyType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response Object for Fetch Rotation Period
 * @export
 * @interface FetchRotationPeriod
 */
export interface FetchRotationPeriod {
    /**
     * The start date for the property's current Rotation Period.
     * @type {string}
     * @memberof FetchRotationPeriod
     */
    currentPeriodStartDate?: string;
    /**
     * Property code for Room Rotation Period.
     * @type {string}
     * @memberof FetchRotationPeriod
     */
    hotelId?: string;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof FetchRotationPeriod
     */
    links?: Array<InstanceLink>;
    /**
     * 
     * @type {RotationPeriodFrequencyType}
     * @memberof FetchRotationPeriod
     */
    periodFrequency?: RotationPeriodFrequencyType;
    /**
     * Represents Effective start date for the Room Rotation Period Setup.
     * @type {string}
     * @memberof FetchRotationPeriod
     */
    startDate?: string;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof FetchRotationPeriod
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the FetchRotationPeriod interface.
 */
export function instanceOfFetchRotationPeriod(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FetchRotationPeriodFromJSON(json: any): FetchRotationPeriod {
    return FetchRotationPeriodFromJSONTyped(json, false);
}

export function FetchRotationPeriodFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchRotationPeriod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currentPeriodStartDate': !exists(json, 'currentPeriodStartDate') ? undefined : json['currentPeriodStartDate'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'periodFrequency': !exists(json, 'periodFrequency') ? undefined : RotationPeriodFrequencyTypeFromJSON(json['periodFrequency']),
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function FetchRotationPeriodToJSON(value?: FetchRotationPeriod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currentPeriodStartDate': value.currentPeriodStartDate,
        'hotelId': value.hotelId,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'periodFrequency': RotationPeriodFrequencyTypeToJSON(value.periodFrequency),
        'startDate': value.startDate,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

