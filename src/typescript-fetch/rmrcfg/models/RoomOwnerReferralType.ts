/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddressType } from './AddressType';
import {
    AddressTypeFromJSON,
    AddressTypeFromJSONTyped,
    AddressTypeToJSON,
} from './AddressType';
import type { ProfileNameType } from './ProfileNameType';
import {
    ProfileNameTypeFromJSON,
    ProfileNameTypeFromJSONTyped,
    ProfileNameTypeToJSON,
} from './ProfileNameType';
import type { ReferralType } from './ReferralType';
import {
    ReferralTypeFromJSON,
    ReferralTypeFromJSONTyped,
    ReferralTypeToJSON,
} from './ReferralType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Define the search criteria for retrieving Room Owner Referral records
 * @export
 * @interface RoomOwnerReferralType
 */
export interface RoomOwnerReferralType {
    /**
     * Hotel Code of Room Owner Referral record.
     * @type {string}
     * @memberof RoomOwnerReferralType
     */
    hotelId?: string;
    /**
     * Unique Id for Room Ownership record.
     * @type {number}
     * @memberof RoomOwnerReferralType
     */
    roomOwnerId?: number;
    /**
     * Unique Id for Room Owner Referral record.
     * @type {number}
     * @memberof RoomOwnerReferralType
     */
    roomOwnerReferralId?: number;
    /**
     * 
     * @type {ReferralType}
     * @memberof RoomOwnerReferralType
     */
    referral?: ReferralType;
    /**
     * Start Date of the Room Owner Referral record.
     * @type {string}
     * @memberof RoomOwnerReferralType
     */
    startDate?: string;
    /**
     * End Date of the Room Owner Referral record.
     * @type {string}
     * @memberof RoomOwnerReferralType
     */
    endDate?: string;
    /**
     * Room Id of Room Owner Referral record.
     * @type {string}
     * @memberof RoomOwnerReferralType
     */
    roomId?: string;
    /**
     * 
     * @type {ProfileNameType}
     * @memberof RoomOwnerReferralType
     */
    profileName?: ProfileNameType;
    /**
     * 
     * @type {AddressType}
     * @memberof RoomOwnerReferralType
     */
    profileAddress?: AddressType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomOwnerReferralType
     */
    profileId?: UniqueIDType;
    /**
     * Status of the Room Owner Referral record.
     * @type {boolean}
     * @memberof RoomOwnerReferralType
     */
    inactive?: boolean;
    /**
     * Date in which the room owner referral record was marked as inactive.
     * @type {string}
     * @memberof RoomOwnerReferralType
     */
    inactiveDate?: string;
}

/**
 * Check if a given object implements the RoomOwnerReferralType interface.
 */
export function instanceOfRoomOwnerReferralType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomOwnerReferralTypeFromJSON(json: any): RoomOwnerReferralType {
    return RoomOwnerReferralTypeFromJSONTyped(json, false);
}

export function RoomOwnerReferralTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomOwnerReferralType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'roomOwnerId': !exists(json, 'roomOwnerId') ? undefined : json['roomOwnerId'],
        'roomOwnerReferralId': !exists(json, 'roomOwnerReferralId') ? undefined : json['roomOwnerReferralId'],
        'referral': !exists(json, 'referral') ? undefined : ReferralTypeFromJSON(json['referral']),
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'profileName': !exists(json, 'profileName') ? undefined : ProfileNameTypeFromJSON(json['profileName']),
        'profileAddress': !exists(json, 'profileAddress') ? undefined : AddressTypeFromJSON(json['profileAddress']),
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : json['inactiveDate'],
    };
}

export function RoomOwnerReferralTypeToJSON(value?: RoomOwnerReferralType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'roomOwnerId': value.roomOwnerId,
        'roomOwnerReferralId': value.roomOwnerReferralId,
        'referral': ReferralTypeToJSON(value.referral),
        'startDate': value.startDate,
        'endDate': value.endDate,
        'roomId': value.roomId,
        'profileName': ProfileNameTypeToJSON(value.profileName),
        'profileAddress': AddressTypeToJSON(value.profileAddress),
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'inactive': value.inactive,
        'inactiveDate': value.inactiveDate,
    };
}

