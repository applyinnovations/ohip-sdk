/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RotationPeriodType } from './RotationPeriodType';
import {
    RotationPeriodTypeFromJSON,
    RotationPeriodTypeFromJSONTyped,
    RotationPeriodTypeToJSON,
} from './RotationPeriodType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request Object for changing Rotation Period.
 * @export
 * @interface RotationPeriod
 */
export interface RotationPeriod {
    /**
     * 
     * @type {RotationPeriodType}
     * @memberof RotationPeriod
     */
    rotationPeriod?: RotationPeriodType;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RotationPeriod
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the RotationPeriod interface.
 */
export function instanceOfRotationPeriod(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RotationPeriodFromJSON(json: any): RotationPeriod {
    return RotationPeriodFromJSONTyped(json, false);
}

export function RotationPeriodFromJSONTyped(json: any, ignoreDiscriminator: boolean): RotationPeriod {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rotationPeriod': !exists(json, 'rotationPeriod') ? undefined : RotationPeriodTypeFromJSON(json['rotationPeriod']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function RotationPeriodToJSON(value?: RotationPeriod | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rotationPeriod': RotationPeriodTypeToJSON(value.rotationPeriod),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

