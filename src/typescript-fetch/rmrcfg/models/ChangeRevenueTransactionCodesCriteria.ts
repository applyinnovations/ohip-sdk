/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RotationRevenueTransactionCodesChangeType } from './RotationRevenueTransactionCodesChangeType';
import {
    RotationRevenueTransactionCodesChangeTypeFromJSON,
    RotationRevenueTransactionCodesChangeTypeFromJSONTyped,
    RotationRevenueTransactionCodesChangeTypeToJSON,
} from './RotationRevenueTransactionCodesChangeType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for updating the rotation revenue status of a transaction code for a given property.
 * @export
 * @interface ChangeRevenueTransactionCodesCriteria
 */
export interface ChangeRevenueTransactionCodesCriteria {
    /**
     * 
     * @type {RotationRevenueTransactionCodesChangeType}
     * @memberof ChangeRevenueTransactionCodesCriteria
     */
    revenueTransactionCodes?: RotationRevenueTransactionCodesChangeType;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ChangeRevenueTransactionCodesCriteria
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ChangeRevenueTransactionCodesCriteria interface.
 */
export function instanceOfChangeRevenueTransactionCodesCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeRevenueTransactionCodesCriteriaFromJSON(json: any): ChangeRevenueTransactionCodesCriteria {
    return ChangeRevenueTransactionCodesCriteriaFromJSONTyped(json, false);
}

export function ChangeRevenueTransactionCodesCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeRevenueTransactionCodesCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'revenueTransactionCodes': !exists(json, 'revenueTransactionCodes') ? undefined : RotationRevenueTransactionCodesChangeTypeFromJSON(json['revenueTransactionCodes']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ChangeRevenueTransactionCodesCriteriaToJSON(value?: ChangeRevenueTransactionCodesCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'revenueTransactionCodes': RotationRevenueTransactionCodesChangeTypeToJSON(value.revenueTransactionCodes),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

