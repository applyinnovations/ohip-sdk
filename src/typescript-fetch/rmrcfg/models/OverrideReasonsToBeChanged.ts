/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Configuration Service API
 * APIs to cater for Room Rotation Configuration functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomRotationOverrideReasonType } from './RoomRotationOverrideReasonType';
import {
    RoomRotationOverrideReasonTypeFromJSON,
    RoomRotationOverrideReasonTypeFromJSONTyped,
    RoomRotationOverrideReasonTypeToJSON,
} from './RoomRotationOverrideReasonType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for changing an existing Room Rotation Override Reason.
 * @export
 * @interface OverrideReasonsToBeChanged
 */
export interface OverrideReasonsToBeChanged {
    /**
     * Room Rotation Override Reason Enumeration element.
     * @type {Array<RoomRotationOverrideReasonType>}
     * @memberof OverrideReasonsToBeChanged
     */
    overrideReasons?: Array<RoomRotationOverrideReasonType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof OverrideReasonsToBeChanged
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the OverrideReasonsToBeChanged interface.
 */
export function instanceOfOverrideReasonsToBeChanged(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OverrideReasonsToBeChangedFromJSON(json: any): OverrideReasonsToBeChanged {
    return OverrideReasonsToBeChangedFromJSONTyped(json, false);
}

export function OverrideReasonsToBeChangedFromJSONTyped(json: any, ignoreDiscriminator: boolean): OverrideReasonsToBeChanged {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'overrideReasons': !exists(json, 'overrideReasons') ? undefined : ((json['overrideReasons'] as Array<any>).map(RoomRotationOverrideReasonTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function OverrideReasonsToBeChangedToJSON(value?: OverrideReasonsToBeChanged | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'overrideReasons': value.overrideReasons === undefined ? undefined : ((value.overrideReasons as Array<any>).map(RoomRotationOverrideReasonTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

