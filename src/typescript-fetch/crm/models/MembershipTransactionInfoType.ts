/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationIdList } from './ReservationIdList';
import {
    ReservationIdListFromJSON,
    ReservationIdListFromJSONTyped,
    ReservationIdListToJSON,
} from './ReservationIdList';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';

/**
 * Specific details regarding the transaction.
 * @export
 * @interface MembershipTransactionInfoType
 */
export interface MembershipTransactionInfoType {
    /**
     * Code type of the type of currency.
     * @type {string}
     * @memberof MembershipTransactionInfoType
     */
    currencyCode?: string;
    /**
     * Resort of the transaction.
     * @type {string}
     * @memberof MembershipTransactionInfoType
     */
    hotelId?: string;
    /**
     * Total nights.
     * @type {number}
     * @memberof MembershipTransactionInfoType
     */
    nights?: number;
    /**
     * 
     * @type {ReservationIdList}
     * @memberof MembershipTransactionInfoType
     */
    reservationIdList?: ReservationIdList;
    /**
     * Total stay.
     * @type {number}
     * @memberof MembershipTransactionInfoType
     */
    stay?: number;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof MembershipTransactionInfoType
     */
    stayTimeSpan?: TimeSpanType;
    /**
     * Membership Transaction Date.
     * @type {Date}
     * @memberof MembershipTransactionInfoType
     */
    transactionDate?: Date;
    /**
     * Membership Transaction Type.
     * @type {string}
     * @memberof MembershipTransactionInfoType
     */
    transactionType?: string;
}

/**
 * Check if a given object implements the MembershipTransactionInfoType interface.
 */
export function instanceOfMembershipTransactionInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTransactionInfoTypeFromJSON(json: any): MembershipTransactionInfoType {
    return MembershipTransactionInfoTypeFromJSONTyped(json, false);
}

export function MembershipTransactionInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTransactionInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'nights': !exists(json, 'nights') ? undefined : json['nights'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ReservationIdListFromJSON(json['reservationIdList']),
        'stay': !exists(json, 'stay') ? undefined : json['stay'],
        'stayTimeSpan': !exists(json, 'stayTimeSpan') ? undefined : TimeSpanTypeFromJSON(json['stayTimeSpan']),
        'transactionDate': !exists(json, 'transactionDate') ? undefined : (new Date(json['transactionDate'])),
        'transactionType': !exists(json, 'transactionType') ? undefined : json['transactionType'],
    };
}

export function MembershipTransactionInfoTypeToJSON(value?: MembershipTransactionInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currencyCode': value.currencyCode,
        'hotelId': value.hotelId,
        'nights': value.nights,
        'reservationIdList': ReservationIdListToJSON(value.reservationIdList),
        'stay': value.stay,
        'stayTimeSpan': TimeSpanTypeToJSON(value.stayTimeSpan),
        'transactionDate': value.transactionDate === undefined ? undefined : (value.transactionDate.toISOString().substr(0,10)),
        'transactionType': value.transactionType,
    };
}

