/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Indicates membership base information like CurrentBalance,association and Owned card.
 * @export
 * @interface RewardsInfoType
 */
export interface RewardsInfoType {
    /**
     * Indicates if the member is an MVCI owner.
     * @type {string}
     * @memberof RewardsInfoType
     */
    mVCIOwner?: string;
    /**
     * Indicates if guest owns a visa card.
     * @type {boolean}
     * @memberof RewardsInfoType
     */
    ownsVisaCard?: boolean;
    /**
     * Indicates if meeting planner is requested.
     * @type {boolean}
     * @memberof RewardsInfoType
     */
    meetingPlanner?: boolean;
    /**
     * Indicates guest association.
     * @type {string}
     * @memberof RewardsInfoType
     */
    association?: string;
    /**
     * Current membership points.
     * @type {number}
     * @memberof RewardsInfoType
     */
    currentBalance?: number;
    /**
     * Indicates membership id of the guest.
     * @type {number}
     * @memberof RewardsInfoType
     */
    membershipId?: number;
    /**
     * Indicates membership number of the guest
     * @type {string}
     * @memberof RewardsInfoType
     */
    membershipNo?: string;
    /**
     * Indicates membership level of the guest
     * @type {string}
     * @memberof RewardsInfoType
     */
    membershipLevel?: string;
    /**
     * Indicates membership date of the guest
     * @type {string}
     * @memberof RewardsInfoType
     */
    membershipDate?: string;
}

/**
 * Check if a given object implements the RewardsInfoType interface.
 */
export function instanceOfRewardsInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RewardsInfoTypeFromJSON(json: any): RewardsInfoType {
    return RewardsInfoTypeFromJSONTyped(json, false);
}

export function RewardsInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RewardsInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mVCIOwner': !exists(json, 'mVCIOwner') ? undefined : json['mVCIOwner'],
        'ownsVisaCard': !exists(json, 'ownsVisaCard') ? undefined : json['ownsVisaCard'],
        'meetingPlanner': !exists(json, 'meetingPlanner') ? undefined : json['meetingPlanner'],
        'association': !exists(json, 'association') ? undefined : json['association'],
        'currentBalance': !exists(json, 'currentBalance') ? undefined : json['currentBalance'],
        'membershipId': !exists(json, 'membershipId') ? undefined : json['membershipId'],
        'membershipNo': !exists(json, 'membershipNo') ? undefined : json['membershipNo'],
        'membershipLevel': !exists(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'membershipDate': !exists(json, 'membershipDate') ? undefined : json['membershipDate'],
    };
}

export function RewardsInfoTypeToJSON(value?: RewardsInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mVCIOwner': value.mVCIOwner,
        'ownsVisaCard': value.ownsVisaCard,
        'meetingPlanner': value.meetingPlanner,
        'association': value.association,
        'currentBalance': value.currentBalance,
        'membershipId': value.membershipId,
        'membershipNo': value.membershipNo,
        'membershipLevel': value.membershipLevel,
        'membershipDate': value.membershipDate,
    };
}

