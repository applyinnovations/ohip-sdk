/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PersonNameTypeType } from './PersonNameTypeType';
import {
    PersonNameTypeTypeFromJSON,
    PersonNameTypeTypeFromJSONTyped,
    PersonNameTypeTypeToJSON,
} from './PersonNameTypeType';

/**
 * This provides name information for a person.
 * @export
 * @interface ProfileSummaryTypeFormerName
 */
export interface ProfileSummaryTypeFormerName {
    /**
     * Family name, last name or Company Name.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    name?: string;
    /**
     * Full display Name.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    fullName?: string;
    /**
     * Salutation of honorific (e.g. Mr., Mrs., Ms., Miss, Dr.)
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    namePrefix?: string;
    /**
     * Given name, first name or names.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    givenName?: string;
    /**
     * The middle name of the person name.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    middleName?: string;
    /**
     * Hold various name suffixes and letters (e.g. Jr., Sr., III, Ret., Esq.)
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    nameSuffix?: string;
    /**
     * Degree or honors (e.g., Ph.D., M.D.)
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    nameTitle?: string;
    /**
     * 
     * @type {PersonNameTypeType}
     * @memberof ProfileSummaryTypeFormerName
     */
    nameType?: PersonNameTypeType;
    /**
     * Identifies the profile gender code selected from Gender types List of values. Gender types LOV provides the values configured at gender configuration.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    gender?: string;
    /**
     * Indicates the date of birth as indicated in the document, in ISO 8601 prescribed format.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    birthDate?: string;
    /**
     * Indicates the date of birth as masked.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    birthDateMasked?: string;
    /**
     * The code specifying a monetary unit. Use ISO 4217, three alpha code.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    currencyCode?: string;
    /**
     * The symbol for the currency, e.g, for currencyCode USD the symbol is $.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    currencySymbol?: string;
    /**
     * Indicates the number of decimal places for a particular currency. This is equivalent to the ISO 4217 standard "minor unit". Typically used when the amount provided includes the minor unit of currency without a decimal point (e.g., USD 8500 needs DecimalPlaces="2" to represent $85).
     * @type {number}
     * @memberof ProfileSummaryTypeFormerName
     */
    decimalPlaces?: number;
    /**
     * Language identification.
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    language?: string;
    /**
     * The supplier's ranking of the customer (e.g., VIP, numerical ranking).
     * @type {string}
     * @memberof ProfileSummaryTypeFormerName
     */
    customerValue?: string;
}

/**
 * Check if a given object implements the ProfileSummaryTypeFormerName interface.
 */
export function instanceOfProfileSummaryTypeFormerName(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileSummaryTypeFormerNameFromJSON(json: any): ProfileSummaryTypeFormerName {
    return ProfileSummaryTypeFormerNameFromJSONTyped(json, false);
}

export function ProfileSummaryTypeFormerNameFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileSummaryTypeFormerName {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'fullName': !exists(json, 'fullName') ? undefined : json['fullName'],
        'namePrefix': !exists(json, 'namePrefix') ? undefined : json['namePrefix'],
        'givenName': !exists(json, 'givenName') ? undefined : json['givenName'],
        'middleName': !exists(json, 'middleName') ? undefined : json['middleName'],
        'nameSuffix': !exists(json, 'nameSuffix') ? undefined : json['nameSuffix'],
        'nameTitle': !exists(json, 'nameTitle') ? undefined : json['nameTitle'],
        'nameType': !exists(json, 'nameType') ? undefined : PersonNameTypeTypeFromJSON(json['nameType']),
        'gender': !exists(json, 'gender') ? undefined : json['gender'],
        'birthDate': !exists(json, 'birthDate') ? undefined : json['birthDate'],
        'birthDateMasked': !exists(json, 'birthDateMasked') ? undefined : json['birthDateMasked'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'currencySymbol': !exists(json, 'currencySymbol') ? undefined : json['currencySymbol'],
        'decimalPlaces': !exists(json, 'decimalPlaces') ? undefined : json['decimalPlaces'],
        'language': !exists(json, 'language') ? undefined : json['language'],
        'customerValue': !exists(json, 'customerValue') ? undefined : json['customerValue'],
    };
}

export function ProfileSummaryTypeFormerNameToJSON(value?: ProfileSummaryTypeFormerName | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'fullName': value.fullName,
        'namePrefix': value.namePrefix,
        'givenName': value.givenName,
        'middleName': value.middleName,
        'nameSuffix': value.nameSuffix,
        'nameTitle': value.nameTitle,
        'nameType': PersonNameTypeTypeToJSON(value.nameType),
        'gender': value.gender,
        'birthDate': value.birthDate,
        'birthDateMasked': value.birthDateMasked,
        'currencyCode': value.currencyCode,
        'currencySymbol': value.currencySymbol,
        'decimalPlaces': value.decimalPlaces,
        'language': value.language,
        'customerValue': value.customerValue,
    };
}

