/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Options to compute award and tier points for membership transaction exception.
 * @export
 * @interface MembershipTransactionExceptionComputePointsType
 */
export interface MembershipTransactionExceptionComputePointsType {
    /**
     * Indicates if membership transaction exception should be created for base award points.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    awardBasePoints?: boolean;
    /**
     * Indicates if membership transaction exception should be created for bonus award points.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    awardBonusPoints?: boolean;
    /**
     * Indicates if membership transaction exception should be created for base tier points for the stay.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    tierPointsBaseStay?: boolean;
    /**
     * Indicates if membership transaction exception should be created for tier bonus points for the stay.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    tierPointsBonusStay?: boolean;
    /**
     * Indicates if membership transaction exception should be created for base tier points for the night.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    tierPointsBaseNights?: boolean;
    /**
     * Indicates if membership transaction exception should be created for tier bonus points for the night.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    tierPointsBonusNights?: boolean;
    /**
     * Indicates if membership transaction exception should be created for base tier points for the revenue.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    tierPointsBaseRevenue?: boolean;
    /**
     * Indicates if membership transaction exception should be created for tier bonus points for the revenue.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionComputePointsType
     */
    tierPointsBonusRevenue?: boolean;
}

/**
 * Check if a given object implements the MembershipTransactionExceptionComputePointsType interface.
 */
export function instanceOfMembershipTransactionExceptionComputePointsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTransactionExceptionComputePointsTypeFromJSON(json: any): MembershipTransactionExceptionComputePointsType {
    return MembershipTransactionExceptionComputePointsTypeFromJSONTyped(json, false);
}

export function MembershipTransactionExceptionComputePointsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTransactionExceptionComputePointsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'awardBasePoints': !exists(json, 'awardBasePoints') ? undefined : json['awardBasePoints'],
        'awardBonusPoints': !exists(json, 'awardBonusPoints') ? undefined : json['awardBonusPoints'],
        'tierPointsBaseStay': !exists(json, 'tierPointsBaseStay') ? undefined : json['tierPointsBaseStay'],
        'tierPointsBonusStay': !exists(json, 'tierPointsBonusStay') ? undefined : json['tierPointsBonusStay'],
        'tierPointsBaseNights': !exists(json, 'tierPointsBaseNights') ? undefined : json['tierPointsBaseNights'],
        'tierPointsBonusNights': !exists(json, 'tierPointsBonusNights') ? undefined : json['tierPointsBonusNights'],
        'tierPointsBaseRevenue': !exists(json, 'tierPointsBaseRevenue') ? undefined : json['tierPointsBaseRevenue'],
        'tierPointsBonusRevenue': !exists(json, 'tierPointsBonusRevenue') ? undefined : json['tierPointsBonusRevenue'],
    };
}

export function MembershipTransactionExceptionComputePointsTypeToJSON(value?: MembershipTransactionExceptionComputePointsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'awardBasePoints': value.awardBasePoints,
        'awardBonusPoints': value.awardBonusPoints,
        'tierPointsBaseStay': value.tierPointsBaseStay,
        'tierPointsBonusStay': value.tierPointsBonusStay,
        'tierPointsBaseNights': value.tierPointsBaseNights,
        'tierPointsBonusNights': value.tierPointsBonusNights,
        'tierPointsBaseRevenue': value.tierPointsBaseRevenue,
        'tierPointsBonusRevenue': value.tierPointsBonusRevenue,
    };
}

