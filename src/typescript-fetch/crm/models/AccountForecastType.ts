/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { OverrideForecastTypeType } from './OverrideForecastTypeType';
import {
    OverrideForecastTypeTypeFromJSON,
    OverrideForecastTypeTypeFromJSONTyped,
    OverrideForecastTypeTypeToJSON,
} from './OverrideForecastTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Detail Information about Account Forecast.
 * @export
 * @interface AccountForecastType
 */
export interface AccountForecastType {
    /**
     * Hotel Code
     * @type {string}
     * @memberof AccountForecastType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof AccountForecastType
     */
    accountId?: UniqueIDType;
    /**
     * Specifies the Fiscal or Calendar Period Code for the forecast
     * @type {string}
     * @memberof AccountForecastType
     */
    periodCode?: string;
    /**
     * Specifies the Fiscal or Calendar Period Description for the forecast.
     * @type {string}
     * @memberof AccountForecastType
     */
    periodDescription?: string;
    /**
     * Specifies the Period Start Date
     * @type {string}
     * @memberof AccountForecastType
     */
    periodStartDate?: string;
    /**
     * Specifies the Period End Date
     * @type {string}
     * @memberof AccountForecastType
     */
    periodEndDate?: string;
    /**
     * Room Nights for the forecast
     * @type {number}
     * @memberof AccountForecastType
     */
    roomNights?: number;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AccountForecastType
     */
    averageRate?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AccountForecastType
     */
    roomRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AccountForecastType
     */
    foodAndBeverageRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AccountForecastType
     */
    otherRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AccountForecastType
     */
    totalRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {OverrideForecastTypeType}
     * @memberof AccountForecastType
     */
    overrideForecast?: OverrideForecastTypeType;
}

/**
 * Check if a given object implements the AccountForecastType interface.
 */
export function instanceOfAccountForecastType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccountForecastTypeFromJSON(json: any): AccountForecastType {
    return AccountForecastTypeFromJSONTyped(json, false);
}

export function AccountForecastTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountForecastType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'accountId': !exists(json, 'accountId') ? undefined : UniqueIDTypeFromJSON(json['accountId']),
        'periodCode': !exists(json, 'periodCode') ? undefined : json['periodCode'],
        'periodDescription': !exists(json, 'periodDescription') ? undefined : json['periodDescription'],
        'periodStartDate': !exists(json, 'periodStartDate') ? undefined : json['periodStartDate'],
        'periodEndDate': !exists(json, 'periodEndDate') ? undefined : json['periodEndDate'],
        'roomNights': !exists(json, 'roomNights') ? undefined : json['roomNights'],
        'averageRate': !exists(json, 'averageRate') ? undefined : CurrencyAmountTypeFromJSON(json['averageRate']),
        'roomRevenue': !exists(json, 'roomRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['roomRevenue']),
        'foodAndBeverageRevenue': !exists(json, 'foodAndBeverageRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['foodAndBeverageRevenue']),
        'otherRevenue': !exists(json, 'otherRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['otherRevenue']),
        'totalRevenue': !exists(json, 'totalRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['totalRevenue']),
        'overrideForecast': !exists(json, 'overrideForecast') ? undefined : OverrideForecastTypeTypeFromJSON(json['overrideForecast']),
    };
}

export function AccountForecastTypeToJSON(value?: AccountForecastType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'accountId': UniqueIDTypeToJSON(value.accountId),
        'periodCode': value.periodCode,
        'periodDescription': value.periodDescription,
        'periodStartDate': value.periodStartDate,
        'periodEndDate': value.periodEndDate,
        'roomNights': value.roomNights,
        'averageRate': CurrencyAmountTypeToJSON(value.averageRate),
        'roomRevenue': CurrencyAmountTypeToJSON(value.roomRevenue),
        'foodAndBeverageRevenue': CurrencyAmountTypeToJSON(value.foodAndBeverageRevenue),
        'otherRevenue': CurrencyAmountTypeToJSON(value.otherRevenue),
        'totalRevenue': CurrencyAmountTypeToJSON(value.totalRevenue),
        'overrideForecast': OverrideForecastTypeTypeToJSON(value.overrideForecast),
    };
}

