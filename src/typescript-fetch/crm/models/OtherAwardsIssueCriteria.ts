/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { MembershipOtherAwardInfoType } from './MembershipOtherAwardInfoType';
import {
    MembershipOtherAwardInfoTypeFromJSON,
    MembershipOtherAwardInfoTypeFromJSONTyped,
    MembershipOtherAwardInfoTypeToJSON,
} from './MembershipOtherAwardInfoType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object to issue an OTHER type award to a member's profile.
 * @export
 * @interface OtherAwardsIssueCriteria
 */
export interface OtherAwardsIssueCriteria {
    /**
     * List of OTHER type awards information.
     * @type {Array<MembershipOtherAwardInfoType>}
     * @memberof OtherAwardsIssueCriteria
     */
    issueAwardsInfo?: Array<MembershipOtherAwardInfoType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof OtherAwardsIssueCriteria
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof OtherAwardsIssueCriteria
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the OtherAwardsIssueCriteria interface.
 */
export function instanceOfOtherAwardsIssueCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OtherAwardsIssueCriteriaFromJSON(json: any): OtherAwardsIssueCriteria {
    return OtherAwardsIssueCriteriaFromJSONTyped(json, false);
}

export function OtherAwardsIssueCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): OtherAwardsIssueCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'issueAwardsInfo': !exists(json, 'issueAwardsInfo') ? undefined : ((json['issueAwardsInfo'] as Array<any>).map(MembershipOtherAwardInfoTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function OtherAwardsIssueCriteriaToJSON(value?: OtherAwardsIssueCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'issueAwardsInfo': value.issueAwardsInfo === undefined ? undefined : ((value.issueAwardsInfo as Array<any>).map(MembershipOtherAwardInfoTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

