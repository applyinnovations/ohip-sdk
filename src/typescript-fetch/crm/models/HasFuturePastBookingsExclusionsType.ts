/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Search type for excluding list of business blocks and/or reservations.
 * @export
 * @interface HasFuturePastBookingsExclusionsType
 */
export interface HasFuturePastBookingsExclusionsType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof HasFuturePastBookingsExclusionsType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof HasFuturePastBookingsExclusionsType
     */
    blockIdList?: Array<UniqueIDType>;
}

/**
 * Check if a given object implements the HasFuturePastBookingsExclusionsType interface.
 */
export function instanceOfHasFuturePastBookingsExclusionsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HasFuturePastBookingsExclusionsTypeFromJSON(json: any): HasFuturePastBookingsExclusionsType {
    return HasFuturePastBookingsExclusionsTypeFromJSONTyped(json, false);
}

export function HasFuturePastBookingsExclusionsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HasFuturePastBookingsExclusionsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
    };
}

export function HasFuturePastBookingsExclusionsTypeToJSON(value?: HasFuturePastBookingsExclusionsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
    };
}

