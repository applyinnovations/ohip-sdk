/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HasFuturePastBookingsExclusionsType } from './HasFuturePastBookingsExclusionsType';
import {
    HasFuturePastBookingsExclusionsTypeFromJSON,
    HasFuturePastBookingsExclusionsTypeFromJSONTyped,
    HasFuturePastBookingsExclusionsTypeToJSON,
} from './HasFuturePastBookingsExclusionsType';
import type { ProfileIdList } from './ProfileIdList';
import {
    ProfileIdListFromJSON,
    ProfileIdListFromJSONTyped,
    ProfileIdListToJSON,
} from './ProfileIdList';

/**
 * Search type for verifying whether there are future and/or past business blocks and/or reservations exist for a Profile.
 * @export
 * @interface HasFuturePastBookingsSearchType
 */
export interface HasFuturePastBookingsSearchType {
    /**
     * 
     * @type {HasFuturePastBookingsExclusionsType}
     * @memberof HasFuturePastBookingsSearchType
     */
    exclusions?: HasFuturePastBookingsExclusionsType;
    /**
     * 
     * @type {ProfileIdList}
     * @memberof HasFuturePastBookingsSearchType
     */
    profileIdList?: ProfileIdList;
    /**
     * Unique identifier of the rate code of business block or reservation.
     * @type {string}
     * @memberof HasFuturePastBookingsSearchType
     */
    rateCode?: string;
    /**
     * Search for active or past.
     * @type {string}
     * @memberof HasFuturePastBookingsSearchType
     */
    searchFor?: HasFuturePastBookingsSearchTypeSearchForEnum;
    /**
     * Search in business blocks or reservations.
     * @type {string}
     * @memberof HasFuturePastBookingsSearchType
     */
    searchIn?: HasFuturePastBookingsSearchTypeSearchInEnum;
}


/**
 * @export
 */
export const HasFuturePastBookingsSearchTypeSearchForEnum = {
    Active: 'Active',
    Past: 'Past'
} as const;
export type HasFuturePastBookingsSearchTypeSearchForEnum = typeof HasFuturePastBookingsSearchTypeSearchForEnum[keyof typeof HasFuturePastBookingsSearchTypeSearchForEnum];

/**
 * @export
 */
export const HasFuturePastBookingsSearchTypeSearchInEnum = {
    Block: 'Block',
    Reservation: 'Reservation'
} as const;
export type HasFuturePastBookingsSearchTypeSearchInEnum = typeof HasFuturePastBookingsSearchTypeSearchInEnum[keyof typeof HasFuturePastBookingsSearchTypeSearchInEnum];


/**
 * Check if a given object implements the HasFuturePastBookingsSearchType interface.
 */
export function instanceOfHasFuturePastBookingsSearchType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HasFuturePastBookingsSearchTypeFromJSON(json: any): HasFuturePastBookingsSearchType {
    return HasFuturePastBookingsSearchTypeFromJSONTyped(json, false);
}

export function HasFuturePastBookingsSearchTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HasFuturePastBookingsSearchType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exclusions': !exists(json, 'exclusions') ? undefined : HasFuturePastBookingsExclusionsTypeFromJSON(json['exclusions']),
        'profileIdList': !exists(json, 'profileIdList') ? undefined : ProfileIdListFromJSON(json['profileIdList']),
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
        'searchFor': !exists(json, 'searchFor') ? undefined : json['searchFor'],
        'searchIn': !exists(json, 'searchIn') ? undefined : json['searchIn'],
    };
}

export function HasFuturePastBookingsSearchTypeToJSON(value?: HasFuturePastBookingsSearchType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exclusions': HasFuturePastBookingsExclusionsTypeToJSON(value.exclusions),
        'profileIdList': ProfileIdListToJSON(value.profileIdList),
        'rateCode': value.rateCode,
        'searchFor': value.searchFor,
        'searchIn': value.searchIn,
    };
}

