/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MemberAwardDetailType } from './MemberAwardDetailType';
import {
    MemberAwardDetailTypeFromJSON,
    MemberAwardDetailTypeFromJSONTyped,
    MemberAwardDetailTypeToJSON,
} from './MemberAwardDetailType';
import type { MemberAwardProcessType } from './MemberAwardProcessType';
import {
    MemberAwardProcessTypeFromJSON,
    MemberAwardProcessTypeFromJSONTyped,
    MemberAwardProcessTypeToJSON,
} from './MemberAwardProcessType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface MemberAwardType
 */
export interface MemberAwardType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof MemberAwardType
     */
    profileIdList?: Array<UniqueIDType>;
    /**
     * The type of the membership.
     * @type {string}
     * @memberof MemberAwardType
     */
    membershipType?: string;
    /**
     * The card number associated with this membership.
     * @type {string}
     * @memberof MemberAwardType
     */
    membershipCardNo?: string;
    /**
     * The current level of the membership.
     * @type {string}
     * @memberof MemberAwardType
     */
    membershipLevel?: string;
    /**
     * To specify where the business came from e.g. radio, newspaper ad, etc.
     * @type {string}
     * @memberof MemberAwardType
     */
    sourceCode?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof MemberAwardType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Number of adults associated with the reservation.
     * @type {number}
     * @memberof MemberAwardType
     */
    adults?: number;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof MemberAwardType
     */
    reservationTimeSpan?: TimeSpanType;
    /**
     * Member points before award transaction.
     * @type {number}
     * @memberof MemberAwardType
     */
    memberPointsBefore?: number;
    /**
     * Member points after award transaction.
     * @type {number}
     * @memberof MemberAwardType
     */
    memberPointsAfter?: number;
    /**
     * Points associated with the award.
     * @type {number}
     * @memberof MemberAwardType
     */
    awardPoints?: number;
    /**
     * Number of cancel points returned.
     * @type {number}
     * @memberof MemberAwardType
     */
    cancelPointsReturn?: number;
    /**
     * Actual number of cancel points.
     * @type {number}
     * @memberof MemberAwardType
     */
    actualCancelPoints?: number;
    /**
     * Points that will expire.
     * @type {number}
     * @memberof MemberAwardType
     */
    expiryPoints?: number;
    /**
     * 
     * @type {MemberAwardProcessType}
     * @memberof MemberAwardType
     */
    awardProcessType?: MemberAwardProcessType;
    /**
     * Details related to member award per stay date.
     * @type {Array<MemberAwardDetailType>}
     * @memberof MemberAwardType
     */
    memberAwardDetails?: Array<MemberAwardDetailType>;
    /**
     * Property associated with the reservation.
     * @type {string}
     * @memberof MemberAwardType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the MemberAwardType interface.
 */
export function instanceOfMemberAwardType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MemberAwardTypeFromJSON(json: any): MemberAwardType {
    return MemberAwardTypeFromJSONTyped(json, false);
}

export function MemberAwardTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MemberAwardType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profileIdList': !exists(json, 'profileIdList') ? undefined : ((json['profileIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'membershipCardNo': !exists(json, 'membershipCardNo') ? undefined : json['membershipCardNo'],
        'membershipLevel': !exists(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'sourceCode': !exists(json, 'sourceCode') ? undefined : json['sourceCode'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'adults': !exists(json, 'adults') ? undefined : json['adults'],
        'reservationTimeSpan': !exists(json, 'reservationTimeSpan') ? undefined : TimeSpanTypeFromJSON(json['reservationTimeSpan']),
        'memberPointsBefore': !exists(json, 'memberPointsBefore') ? undefined : json['memberPointsBefore'],
        'memberPointsAfter': !exists(json, 'memberPointsAfter') ? undefined : json['memberPointsAfter'],
        'awardPoints': !exists(json, 'awardPoints') ? undefined : json['awardPoints'],
        'cancelPointsReturn': !exists(json, 'cancelPointsReturn') ? undefined : json['cancelPointsReturn'],
        'actualCancelPoints': !exists(json, 'actualCancelPoints') ? undefined : json['actualCancelPoints'],
        'expiryPoints': !exists(json, 'expiryPoints') ? undefined : json['expiryPoints'],
        'awardProcessType': !exists(json, 'awardProcessType') ? undefined : MemberAwardProcessTypeFromJSON(json['awardProcessType']),
        'memberAwardDetails': !exists(json, 'memberAwardDetails') ? undefined : ((json['memberAwardDetails'] as Array<any>).map(MemberAwardDetailTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function MemberAwardTypeToJSON(value?: MemberAwardType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profileIdList': value.profileIdList === undefined ? undefined : ((value.profileIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'membershipType': value.membershipType,
        'membershipCardNo': value.membershipCardNo,
        'membershipLevel': value.membershipLevel,
        'sourceCode': value.sourceCode,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'adults': value.adults,
        'reservationTimeSpan': TimeSpanTypeToJSON(value.reservationTimeSpan),
        'memberPointsBefore': value.memberPointsBefore,
        'memberPointsAfter': value.memberPointsAfter,
        'awardPoints': value.awardPoints,
        'cancelPointsReturn': value.cancelPointsReturn,
        'actualCancelPoints': value.actualCancelPoints,
        'expiryPoints': value.expiryPoints,
        'awardProcessType': MemberAwardProcessTypeToJSON(value.awardProcessType),
        'memberAwardDetails': value.memberAwardDetails === undefined ? undefined : ((value.memberAwardDetails as Array<any>).map(MemberAwardDetailTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

