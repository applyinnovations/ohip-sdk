/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Guest Preference details for the profile.
 * @export
 * @interface StagedProfilePreferenceType
 */
export interface StagedProfilePreferenceType {
    /**
     * Preference value for display purposes.
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    preferenceValue?: string;
    /**
     * Preference Description for display purposes.
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    description?: string;
    /**
     * Whether this preference is property specific or not.
     * @type {boolean}
     * @memberof StagedProfilePreferenceType
     */
    global?: boolean;
    /**
     * Source of the preference.
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    source?: string;
    /**
     * If specified preference belongs to the Hotels listed, otherwise it is a global preference.
     * @type {Array<string>}
     * @memberof StagedProfilePreferenceType
     */
    hotels?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    preferenceCode?: string;
    /**
     * Specifies the count of preferences excluded for the attached reservation preference.
     * @type {number}
     * @memberof StagedProfilePreferenceType
     */
    excludedPreferencesCount?: number;
    /**
     * Specifies whether to copy the reservation preference to the profile or not.
     * @type {boolean}
     * @memberof StagedProfilePreferenceType
     */
    copyToProfile?: boolean;
    /**
     * The error in Preference information in a staged profile with an invalid status
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    errorDescription?: string;
    /**
     * Inactivation date of the record.
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    inactiveDate?: string;
    /**
     * Prefernce resort.
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    resortPrefernce?: string;
    /**
     * Indicated whether the preference information is valid.
     * @type {boolean}
     * @memberof StagedProfilePreferenceType
     */
    valid?: boolean;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    id?: string;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof StagedProfilePreferenceType
     */
    type?: string;
}

/**
 * Check if a given object implements the StagedProfilePreferenceType interface.
 */
export function instanceOfStagedProfilePreferenceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StagedProfilePreferenceTypeFromJSON(json: any): StagedProfilePreferenceType {
    return StagedProfilePreferenceTypeFromJSONTyped(json, false);
}

export function StagedProfilePreferenceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StagedProfilePreferenceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'preferenceValue': !exists(json, 'preferenceValue') ? undefined : json['preferenceValue'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'global': !exists(json, 'global') ? undefined : json['global'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'hotels': !exists(json, 'hotels') ? undefined : json['hotels'],
        'preferenceCode': !exists(json, 'preferenceCode') ? undefined : json['preferenceCode'],
        'excludedPreferencesCount': !exists(json, 'excludedPreferencesCount') ? undefined : json['excludedPreferencesCount'],
        'copyToProfile': !exists(json, 'copyToProfile') ? undefined : json['copyToProfile'],
        'errorDescription': !exists(json, 'errorDescription') ? undefined : json['errorDescription'],
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : json['inactiveDate'],
        'resortPrefernce': !exists(json, 'resortPrefernce') ? undefined : json['resortPrefernce'],
        'valid': !exists(json, 'valid') ? undefined : json['valid'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function StagedProfilePreferenceTypeToJSON(value?: StagedProfilePreferenceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'preferenceValue': value.preferenceValue,
        'description': value.description,
        'global': value.global,
        'source': value.source,
        'hotels': value.hotels,
        'preferenceCode': value.preferenceCode,
        'excludedPreferencesCount': value.excludedPreferencesCount,
        'copyToProfile': value.copyToProfile,
        'errorDescription': value.errorDescription,
        'inactiveDate': value.inactiveDate,
        'resortPrefernce': value.resortPrefernce,
        'valid': value.valid,
        'id': value.id,
        'type': value.type,
    };
}

