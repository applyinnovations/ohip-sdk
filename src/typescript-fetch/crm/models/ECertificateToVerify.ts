/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object to Verify an E-Certificate Number.
 * @export
 * @interface ECertificateToVerify
 */
export interface ECertificateToVerify {
    /**
     * Indicates if certificate is to be used against reservation or not.
     * @type {boolean}
     * @memberof ECertificateToVerify
     */
    allowReservation?: boolean;
    /**
     * System generated unique certificate id.
     * @type {number}
     * @memberof ECertificateToVerify
     */
    certificateId?: number;
    /**
     * Used for Character Strings, length 0 to 40.
     * @type {string}
     * @memberof ECertificateToVerify
     */
    certificateNo?: string;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof ECertificateToVerify
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ECertificateToVerify
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ECertificateToVerify interface.
 */
export function instanceOfECertificateToVerify(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ECertificateToVerifyFromJSON(json: any): ECertificateToVerify {
    return ECertificateToVerifyFromJSONTyped(json, false);
}

export function ECertificateToVerifyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ECertificateToVerify {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowReservation': !exists(json, 'allowReservation') ? undefined : json['allowReservation'],
        'certificateId': !exists(json, 'certificateId') ? undefined : json['certificateId'],
        'certificateNo': !exists(json, 'certificateNo') ? undefined : json['certificateNo'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ECertificateToVerifyToJSON(value?: ECertificateToVerify | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowReservation': value.allowReservation,
        'certificateId': value.certificateId,
        'certificateNo': value.certificateNo,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

