/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Member Award availability details based on chosen award types as Product,Rate,Upgrade,FT Payment and Other.
 * @export
 * @interface UpgradeAvailabilityType
 */
export interface UpgradeAvailabilityType {
    /**
     * Unique code that identifies this award.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    awardType?: string;
    /**
     * HotelCode where the award will be consumed.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    hotelId?: string;
    /**
     * Total award points available for redemption.
     * @type {number}
     * @memberof UpgradeAvailabilityType
     */
    totalAvailablePoints?: number;
    /**
     * The number of points that must be redeemed for this award.
     * @type {number}
     * @memberof UpgradeAvailabilityType
     */
    pointsRequired?: number;
    /**
     * The award points that will be forfeited if the cancel penalty charge is applied.
     * @type {number}
     * @memberof UpgradeAvailabilityType
     */
    cancelPenaltyPoints?: number;
    /**
     * Number of days before arrival when a reservation may be cancelled without an award points penalty.
     * @type {number}
     * @memberof UpgradeAvailabilityType
     */
    cancelPenaltyDays?: number;
    /**
     * The cancel penalty charge.
     * @type {number}
     * @memberof UpgradeAvailabilityType
     */
    cancelPenaltyCharge?: number;
    /**
     * The penalty charge is either a percentage or a flat number of points.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    cancelPenaltyType?: string;
    /**
     * Issue key in format of Raw data.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    rawIssueKey?: string;
    /**
     * An identifying number of the award, assigned by the system when the award was issued.
     * @type {number}
     * @memberof UpgradeAvailabilityType
     */
    awardNumber?: number;
    /**
     * Indicates room type code for the room prior to the upgrade.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    fromRoomCategory?: string;
    /**
     * Indicates room type code of the upgrade room.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    toRoomCategory?: string;
    /**
     * Indicates room type Description for the room prior to the upgrade.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    fromRoomDescription?: string;
    /**
     * Indicates room type Description of the upgrade room.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    toRoomDescription?: string;
    /**
     * Indicates room type code for the room prior to the upgrade.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    fromRoom?: string;
    /**
     * Indicates room type code of the upgrade room.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    toRoom?: string;
    /**
     * The date of the reservation associated with the award. There may be more than one date (multiple nights) associated with award.
     * @type {string}
     * @memberof UpgradeAvailabilityType
     */
    stayDate?: string;
}

/**
 * Check if a given object implements the UpgradeAvailabilityType interface.
 */
export function instanceOfUpgradeAvailabilityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpgradeAvailabilityTypeFromJSON(json: any): UpgradeAvailabilityType {
    return UpgradeAvailabilityTypeFromJSONTyped(json, false);
}

export function UpgradeAvailabilityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpgradeAvailabilityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'awardType': !exists(json, 'awardType') ? undefined : json['awardType'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'totalAvailablePoints': !exists(json, 'totalAvailablePoints') ? undefined : json['totalAvailablePoints'],
        'pointsRequired': !exists(json, 'pointsRequired') ? undefined : json['pointsRequired'],
        'cancelPenaltyPoints': !exists(json, 'cancelPenaltyPoints') ? undefined : json['cancelPenaltyPoints'],
        'cancelPenaltyDays': !exists(json, 'cancelPenaltyDays') ? undefined : json['cancelPenaltyDays'],
        'cancelPenaltyCharge': !exists(json, 'cancelPenaltyCharge') ? undefined : json['cancelPenaltyCharge'],
        'cancelPenaltyType': !exists(json, 'cancelPenaltyType') ? undefined : json['cancelPenaltyType'],
        'rawIssueKey': !exists(json, 'rawIssueKey') ? undefined : json['rawIssueKey'],
        'awardNumber': !exists(json, 'awardNumber') ? undefined : json['awardNumber'],
        'fromRoomCategory': !exists(json, 'fromRoomCategory') ? undefined : json['fromRoomCategory'],
        'toRoomCategory': !exists(json, 'toRoomCategory') ? undefined : json['toRoomCategory'],
        'fromRoomDescription': !exists(json, 'fromRoomDescription') ? undefined : json['fromRoomDescription'],
        'toRoomDescription': !exists(json, 'toRoomDescription') ? undefined : json['toRoomDescription'],
        'fromRoom': !exists(json, 'fromRoom') ? undefined : json['fromRoom'],
        'toRoom': !exists(json, 'toRoom') ? undefined : json['toRoom'],
        'stayDate': !exists(json, 'stayDate') ? undefined : json['stayDate'],
    };
}

export function UpgradeAvailabilityTypeToJSON(value?: UpgradeAvailabilityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'awardType': value.awardType,
        'hotelId': value.hotelId,
        'totalAvailablePoints': value.totalAvailablePoints,
        'pointsRequired': value.pointsRequired,
        'cancelPenaltyPoints': value.cancelPenaltyPoints,
        'cancelPenaltyDays': value.cancelPenaltyDays,
        'cancelPenaltyCharge': value.cancelPenaltyCharge,
        'cancelPenaltyType': value.cancelPenaltyType,
        'rawIssueKey': value.rawIssueKey,
        'awardNumber': value.awardNumber,
        'fromRoomCategory': value.fromRoomCategory,
        'toRoomCategory': value.toRoomCategory,
        'fromRoomDescription': value.fromRoomDescription,
        'toRoomDescription': value.toRoomDescription,
        'fromRoom': value.fromRoom,
        'toRoom': value.toRoom,
        'stayDate': value.stayDate,
    };
}

