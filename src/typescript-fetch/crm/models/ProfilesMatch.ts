/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { ProfilesMatchType } from './ProfilesMatchType';
import {
    ProfilesMatchTypeFromJSON,
    ProfilesMatchTypeFromJSONTyped,
    ProfilesMatchTypeToJSON,
} from './ProfilesMatchType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object for fetching the profiles match.
 * @export
 * @interface ProfilesMatch
 */
export interface ProfilesMatch {
    /**
     * List of profiles matches. The values are ordered by default using main profile first name.
     * @type {Array<ProfilesMatchType>}
     * @memberof ProfilesMatch
     */
    profilesMatchList?: Array<ProfilesMatchType>;
    /**
     * Indicates the index of the next applicable set(page).
     * @type {number}
     * @memberof ProfilesMatch
     */
    offset?: number;
    /**
     * Indicates number of records the API can return as per the API request limit sent. A maximum of 200 records can be only returned at a time.
     * @type {number}
     * @memberof ProfilesMatch
     */
    limit?: number;
    /**
     * Indicates number of records the API has returned actually as per the API request criteria.
     * @type {number}
     * @memberof ProfilesMatch
     */
    count?: number;
    /**
     * Indicates whether there are more records available to be returned as per the API request criteria or not.
     * @type {boolean}
     * @memberof ProfilesMatch
     */
    hasMore?: boolean;
    /**
     * Indicates total number of records available that can be returned as per the API request criteria.
     * @type {number}
     * @memberof ProfilesMatch
     */
    totalResults?: number;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof ProfilesMatch
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ProfilesMatch
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ProfilesMatch interface.
 */
export function instanceOfProfilesMatch(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfilesMatchFromJSON(json: any): ProfilesMatch {
    return ProfilesMatchFromJSONTyped(json, false);
}

export function ProfilesMatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfilesMatch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profilesMatchList': !exists(json, 'profilesMatchList') ? undefined : ((json['profilesMatchList'] as Array<any>).map(ProfilesMatchTypeFromJSON)),
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ProfilesMatchToJSON(value?: ProfilesMatch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profilesMatchList': value.profilesMatchList === undefined ? undefined : ((value.profilesMatchList as Array<any>).map(ProfilesMatchTypeToJSON)),
        'offset': value.offset,
        'limit': value.limit,
        'count': value.count,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

