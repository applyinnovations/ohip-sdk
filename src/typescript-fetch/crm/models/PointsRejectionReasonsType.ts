/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PointsRejectionReasonType } from './PointsRejectionReasonType';
import {
    PointsRejectionReasonTypeFromJSON,
    PointsRejectionReasonTypeFromJSONTyped,
    PointsRejectionReasonTypeToJSON,
} from './PointsRejectionReasonType';

/**
 * Summary of reason points were not awarded for a given points transaction.
 * @export
 * @interface PointsRejectionReasonsType
 */
export interface PointsRejectionReasonsType {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof PointsRejectionReasonsType
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof PointsRejectionReasonsType
     */
    hasMore?: boolean;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof PointsRejectionReasonsType
     */
    limit?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof PointsRejectionReasonsType
     */
    offset?: number;
    /**
     * Details on rule and reason the points were not awarded for a given point transaction.
     * @type {Array<PointsRejectionReasonType>}
     * @memberof PointsRejectionReasonsType
     */
    pointsRejectionReason?: Array<PointsRejectionReasonType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof PointsRejectionReasonsType
     */
    totalPages?: number;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof PointsRejectionReasonsType
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the PointsRejectionReasonsType interface.
 */
export function instanceOfPointsRejectionReasonsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PointsRejectionReasonsTypeFromJSON(json: any): PointsRejectionReasonsType {
    return PointsRejectionReasonsTypeFromJSONTyped(json, false);
}

export function PointsRejectionReasonsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PointsRejectionReasonsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'pointsRejectionReason': !exists(json, 'pointsRejectionReason') ? undefined : ((json['pointsRejectionReason'] as Array<any>).map(PointsRejectionReasonTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function PointsRejectionReasonsTypeToJSON(value?: PointsRejectionReasonsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'limit': value.limit,
        'offset': value.offset,
        'pointsRejectionReason': value.pointsRejectionReason === undefined ? undefined : ((value.pointsRejectionReason as Array<any>).map(PointsRejectionReasonTypeToJSON)),
        'totalPages': value.totalPages,
        'totalResults': value.totalResults,
    };
}

