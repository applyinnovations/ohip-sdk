/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { WebUserHistoryType } from './WebUserHistoryType';
import {
    WebUserHistoryTypeFromJSON,
    WebUserHistoryTypeFromJSONTyped,
    WebUserHistoryTypeToJSON,
} from './WebUserHistoryType';

/**
 * Web User Account of the guest.
 * @export
 * @interface WebUserAccountType
 */
export interface WebUserAccountType {
    /**
     * A flag which determines if the password is auto generated.
     * @type {boolean}
     * @memberof WebUserAccountType
     */
    autoGeneratePassword?: boolean;
    /**
     * Comments.
     * @type {string}
     * @memberof WebUserAccountType
     */
    comments?: string;
    /**
     * Domain code.
     * @type {string}
     * @memberof WebUserAccountType
     */
    domainCode?: string;
    /**
     * 
     * @type {WebUserHistoryType}
     * @memberof WebUserAccountType
     */
    history?: WebUserHistoryType;
    /**
     * Boolean flag that indicates whether the web account is inactive or not.
     * @type {boolean}
     * @memberof WebUserAccountType
     */
    inactive?: boolean;
    /**
     * Boolean flag that indicates whether the web account is locked or not.
     * @type {boolean}
     * @memberof WebUserAccountType
     */
    locked?: boolean;
    /**
     * Login Name of the guest.
     * @type {string}
     * @memberof WebUserAccountType
     */
    loginName?: string;
    /**
     * New Login Name of the guest.
     * @type {string}
     * @memberof WebUserAccountType
     */
    newLoginName?: string;
    /**
     * Login Password.
     * @type {string}
     * @memberof WebUserAccountType
     */
    newPassword?: string;
    /**
     * Answer to the Security Question.
     * @type {string}
     * @memberof WebUserAccountType
     */
    securityAnswer?: string;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof WebUserAccountType
     */
    securityQuestion?: CodeDescriptionType;
}

/**
 * Check if a given object implements the WebUserAccountType interface.
 */
export function instanceOfWebUserAccountType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WebUserAccountTypeFromJSON(json: any): WebUserAccountType {
    return WebUserAccountTypeFromJSONTyped(json, false);
}

export function WebUserAccountTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebUserAccountType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'autoGeneratePassword': !exists(json, 'autoGeneratePassword') ? undefined : json['autoGeneratePassword'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'domainCode': !exists(json, 'domainCode') ? undefined : json['domainCode'],
        'history': !exists(json, 'history') ? undefined : WebUserHistoryTypeFromJSON(json['history']),
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'locked': !exists(json, 'locked') ? undefined : json['locked'],
        'loginName': !exists(json, 'loginName') ? undefined : json['loginName'],
        'newLoginName': !exists(json, 'newLoginName') ? undefined : json['newLoginName'],
        'newPassword': !exists(json, 'newPassword') ? undefined : json['newPassword'],
        'securityAnswer': !exists(json, 'securityAnswer') ? undefined : json['securityAnswer'],
        'securityQuestion': !exists(json, 'securityQuestion') ? undefined : CodeDescriptionTypeFromJSON(json['securityQuestion']),
    };
}

export function WebUserAccountTypeToJSON(value?: WebUserAccountType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'autoGeneratePassword': value.autoGeneratePassword,
        'comments': value.comments,
        'domainCode': value.domainCode,
        'history': WebUserHistoryTypeToJSON(value.history),
        'inactive': value.inactive,
        'locked': value.locked,
        'loginName': value.loginName,
        'newLoginName': value.newLoginName,
        'newPassword': value.newPassword,
        'securityAnswer': value.securityAnswer,
        'securityQuestion': CodeDescriptionTypeToJSON(value.securityQuestion),
    };
}

