/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MembershipTransactionId } from './MembershipTransactionId';
import {
    MembershipTransactionIdFromJSON,
    MembershipTransactionIdFromJSONTyped,
    MembershipTransactionIdToJSON,
} from './MembershipTransactionId';

/**
 * Contains Membership points exception information.
 * @export
 * @interface MembershipPointsExceptionsType
 */
export interface MembershipPointsExceptionsType {
    /**
     * Unique identifier associated with the membership transaction.
     * @type {Array<MembershipTransactionId>}
     * @memberof MembershipPointsExceptionsType
     */
    membershipTransactionIds?: Array<MembershipTransactionId>;
    /**
     * Indicates if the membership points exception are to be accepted or rejected.
     * @type {boolean}
     * @memberof MembershipPointsExceptionsType
     */
    acceptPoints?: boolean;
    /**
     * Notes regarding the resolution of the membership transaction exception or for any other reason.
     * @type {string}
     * @memberof MembershipPointsExceptionsType
     */
    userNotes?: string;
}

/**
 * Check if a given object implements the MembershipPointsExceptionsType interface.
 */
export function instanceOfMembershipPointsExceptionsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipPointsExceptionsTypeFromJSON(json: any): MembershipPointsExceptionsType {
    return MembershipPointsExceptionsTypeFromJSONTyped(json, false);
}

export function MembershipPointsExceptionsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipPointsExceptionsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'membershipTransactionIds': !exists(json, 'membershipTransactionIds') ? undefined : ((json['membershipTransactionIds'] as Array<any>).map(MembershipTransactionIdFromJSON)),
        'acceptPoints': !exists(json, 'acceptPoints') ? undefined : json['acceptPoints'],
        'userNotes': !exists(json, 'userNotes') ? undefined : json['userNotes'],
    };
}

export function MembershipPointsExceptionsTypeToJSON(value?: MembershipPointsExceptionsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'membershipTransactionIds': value.membershipTransactionIds === undefined ? undefined : ((value.membershipTransactionIds as Array<any>).map(MembershipTransactionIdToJSON)),
        'acceptPoints': value.acceptPoints,
        'userNotes': value.userNotes,
    };
}

