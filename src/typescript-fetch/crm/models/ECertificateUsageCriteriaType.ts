/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * E-Certificates details.
 * @export
 * @interface ECertificateUsageCriteriaType
 */
export interface ECertificateUsageCriteriaType {
    /**
     * Indicates to attach a rate code to the e-certificate as a benefit.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    benefit?: boolean;
    /**
     * Identify if cancel is allowed or not.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    cancelAllowed?: boolean;
    /**
     * Identify if in lieu of certificate can be generated or not.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    generateInLieuCertificate?: boolean;
    /**
     * Indicates if web certificate can be consumed in hotel.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    hotel?: boolean;
    /**
     * Indicates if certificate is to be used against reservation or not.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    reservation?: boolean;
    /**
     * Specify if the certificate number verification is required at time of consumption or not.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    verifyCertificateNo?: boolean;
    /**
     * Indicates if web certificate can be consumed in OWS.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    web?: boolean;
    /**
     * Indicates if certificate consumption allowable on the web.
     * @type {boolean}
     * @memberof ECertificateUsageCriteriaType
     */
    webAllowed?: boolean;
}

/**
 * Check if a given object implements the ECertificateUsageCriteriaType interface.
 */
export function instanceOfECertificateUsageCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ECertificateUsageCriteriaTypeFromJSON(json: any): ECertificateUsageCriteriaType {
    return ECertificateUsageCriteriaTypeFromJSONTyped(json, false);
}

export function ECertificateUsageCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ECertificateUsageCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'benefit': !exists(json, 'benefit') ? undefined : json['benefit'],
        'cancelAllowed': !exists(json, 'cancelAllowed') ? undefined : json['cancelAllowed'],
        'generateInLieuCertificate': !exists(json, 'generateInLieuCertificate') ? undefined : json['generateInLieuCertificate'],
        'hotel': !exists(json, 'hotel') ? undefined : json['hotel'],
        'reservation': !exists(json, 'reservation') ? undefined : json['reservation'],
        'verifyCertificateNo': !exists(json, 'verifyCertificateNo') ? undefined : json['verifyCertificateNo'],
        'web': !exists(json, 'web') ? undefined : json['web'],
        'webAllowed': !exists(json, 'webAllowed') ? undefined : json['webAllowed'],
    };
}

export function ECertificateUsageCriteriaTypeToJSON(value?: ECertificateUsageCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'benefit': value.benefit,
        'cancelAllowed': value.cancelAllowed,
        'generateInLieuCertificate': value.generateInLieuCertificate,
        'hotel': value.hotel,
        'reservation': value.reservation,
        'verifyCertificateNo': value.verifyCertificateNo,
        'web': value.web,
        'webAllowed': value.webAllowed,
    };
}

