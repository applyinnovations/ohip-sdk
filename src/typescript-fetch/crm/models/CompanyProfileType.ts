/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompanyProfileTypeAddresses } from './CompanyProfileTypeAddresses';
import {
    CompanyProfileTypeAddressesFromJSON,
    CompanyProfileTypeAddressesFromJSONTyped,
    CompanyProfileTypeAddressesToJSON,
} from './CompanyProfileTypeAddresses';
import type { CompanyProfileTypeComments } from './CompanyProfileTypeComments';
import {
    CompanyProfileTypeCommentsFromJSON,
    CompanyProfileTypeCommentsFromJSONTyped,
    CompanyProfileTypeCommentsToJSON,
} from './CompanyProfileTypeComments';
import type { CompanyProfileTypeEmails } from './CompanyProfileTypeEmails';
import {
    CompanyProfileTypeEmailsFromJSON,
    CompanyProfileTypeEmailsFromJSONTyped,
    CompanyProfileTypeEmailsToJSON,
} from './CompanyProfileTypeEmails';
import type { CompanyProfileTypeGdsNegotiatedRates } from './CompanyProfileTypeGdsNegotiatedRates';
import {
    CompanyProfileTypeGdsNegotiatedRatesFromJSON,
    CompanyProfileTypeGdsNegotiatedRatesFromJSONTyped,
    CompanyProfileTypeGdsNegotiatedRatesToJSON,
} from './CompanyProfileTypeGdsNegotiatedRates';
import type { CompanyProfileTypeKeywords } from './CompanyProfileTypeKeywords';
import {
    CompanyProfileTypeKeywordsFromJSON,
    CompanyProfileTypeKeywordsFromJSONTyped,
    CompanyProfileTypeKeywordsToJSON,
} from './CompanyProfileTypeKeywords';
import type { CompanyProfileTypeNegotiatedRates } from './CompanyProfileTypeNegotiatedRates';
import {
    CompanyProfileTypeNegotiatedRatesFromJSON,
    CompanyProfileTypeNegotiatedRatesFromJSONTyped,
    CompanyProfileTypeNegotiatedRatesToJSON,
} from './CompanyProfileTypeNegotiatedRates';
import type { CompanyProfileTypePreferenceCollection } from './CompanyProfileTypePreferenceCollection';
import {
    CompanyProfileTypePreferenceCollectionFromJSON,
    CompanyProfileTypePreferenceCollectionFromJSONTyped,
    CompanyProfileTypePreferenceCollectionToJSON,
} from './CompanyProfileTypePreferenceCollection';
import type { CompanyProfileTypeProfileMemberships } from './CompanyProfileTypeProfileMemberships';
import {
    CompanyProfileTypeProfileMembershipsFromJSON,
    CompanyProfileTypeProfileMembershipsFromJSONTyped,
    CompanyProfileTypeProfileMembershipsToJSON,
} from './CompanyProfileTypeProfileMemberships';
import type { CompanyProfileTypeRelationships } from './CompanyProfileTypeRelationships';
import {
    CompanyProfileTypeRelationshipsFromJSON,
    CompanyProfileTypeRelationshipsFromJSONTyped,
    CompanyProfileTypeRelationshipsToJSON,
} from './CompanyProfileTypeRelationships';
import type { CompanyProfileTypeTelephones } from './CompanyProfileTypeTelephones';
import {
    CompanyProfileTypeTelephonesFromJSON,
    CompanyProfileTypeTelephonesFromJSONTyped,
    CompanyProfileTypeTelephonesToJSON,
} from './CompanyProfileTypeTelephones';
import type { CompanyProfileTypeType } from './CompanyProfileTypeType';
import {
    CompanyProfileTypeTypeFromJSON,
    CompanyProfileTypeTypeFromJSONTyped,
    CompanyProfileTypeTypeToJSON,
} from './CompanyProfileTypeType';
import type { CompanyProfileTypeURLs } from './CompanyProfileTypeURLs';
import {
    CompanyProfileTypeURLsFromJSON,
    CompanyProfileTypeURLsFromJSONTyped,
    CompanyProfileTypeURLsToJSON,
} from './CompanyProfileTypeURLs';
import type { CompanyType } from './CompanyType';
import {
    CompanyTypeFromJSON,
    CompanyTypeFromJSONTyped,
    CompanyTypeToJSON,
} from './CompanyType';
import type { ECertificatesType } from './ECertificatesType';
import {
    ECertificatesTypeFromJSON,
    ECertificatesTypeFromJSONTyped,
    ECertificatesTypeToJSON,
} from './ECertificatesType';
import type { ImageSetType } from './ImageSetType';
import {
    ImageSetTypeFromJSON,
    ImageSetTypeFromJSONTyped,
    ImageSetTypeToJSON,
} from './ImageSetType';
import type { IndicatorsType } from './IndicatorsType';
import {
    IndicatorsTypeFromJSON,
    IndicatorsTypeFromJSONTyped,
    IndicatorsTypeToJSON,
} from './IndicatorsType';
import type { LastStayInfoType } from './LastStayInfoType';
import {
    LastStayInfoTypeFromJSON,
    LastStayInfoTypeFromJSONTyped,
    LastStayInfoTypeToJSON,
} from './LastStayInfoType';
import type { MailingActionsType } from './MailingActionsType';
import {
    MailingActionsTypeFromJSON,
    MailingActionsTypeFromJSONTyped,
    MailingActionsTypeToJSON,
} from './MailingActionsType';
import type { PrivacyInfoType } from './PrivacyInfoType';
import {
    PrivacyInfoTypeFromJSON,
    PrivacyInfoTypeFromJSONTyped,
    PrivacyInfoTypeToJSON,
} from './PrivacyInfoType';
import type { ProfileAccessType } from './ProfileAccessType';
import {
    ProfileAccessTypeFromJSON,
    ProfileAccessTypeFromJSONTyped,
    ProfileAccessTypeToJSON,
} from './ProfileAccessType';
import type { ProfileCashieringType } from './ProfileCashieringType';
import {
    ProfileCashieringTypeFromJSON,
    ProfileCashieringTypeFromJSONTyped,
    ProfileCashieringTypeToJSON,
} from './ProfileCashieringType';
import type { ProfileCommissionType } from './ProfileCommissionType';
import {
    ProfileCommissionTypeFromJSON,
    ProfileCommissionTypeFromJSONTyped,
    ProfileCommissionTypeToJSON,
} from './ProfileCommissionType';
import type { ProfileRestrictions } from './ProfileRestrictions';
import {
    ProfileRestrictionsFromJSON,
    ProfileRestrictionsFromJSONTyped,
    ProfileRestrictionsToJSON,
} from './ProfileRestrictions';
import type { ProfileStatusType } from './ProfileStatusType';
import {
    ProfileStatusTypeFromJSON,
    ProfileStatusTypeFromJSONTyped,
    ProfileStatusTypeToJSON,
} from './ProfileStatusType';
import type { ProfileSubscriptionListType } from './ProfileSubscriptionListType';
import {
    ProfileSubscriptionListTypeFromJSON,
    ProfileSubscriptionListTypeFromJSONTyped,
    ProfileSubscriptionListTypeToJSON,
} from './ProfileSubscriptionListType';
import type { ProfileTaxInfoType } from './ProfileTaxInfoType';
import {
    ProfileTaxInfoTypeFromJSON,
    ProfileTaxInfoTypeFromJSONTyped,
    ProfileTaxInfoTypeToJSON,
} from './ProfileTaxInfoType';
import type { SalesInfoType } from './SalesInfoType';
import {
    SalesInfoTypeFromJSON,
    SalesInfoTypeFromJSONTyped,
    SalesInfoTypeToJSON,
} from './SalesInfoType';
import type { UserDefinedFieldsType } from './UserDefinedFieldsType';
import {
    UserDefinedFieldsTypeFromJSON,
    UserDefinedFieldsTypeFromJSONTyped,
    UserDefinedFieldsTypeToJSON,
} from './UserDefinedFieldsType';
import type { WebUserAccountsType } from './WebUserAccountsType';
import {
    WebUserAccountsTypeFromJSON,
    WebUserAccountsTypeFromJSONTyped,
    WebUserAccountsTypeToJSON,
} from './WebUserAccountsType';

/**
 * Type provides the detailed information about the profile and its children.
 * @export
 * @interface CompanyProfileType
 */
export interface CompanyProfileType {
    /**
     * 
     * @type {CompanyProfileTypeAddresses}
     * @memberof CompanyProfileType
     */
    addresses?: CompanyProfileTypeAddresses;
    /**
     * Business/Market Segment associated to the profile.
     * @type {Array<string>}
     * @memberof CompanyProfileType
     */
    businessSegments?: Array<string>;
    /**
     * 
     * @type {ProfileCashieringType}
     * @memberof CompanyProfileType
     */
    cashiering?: ProfileCashieringType;
    /**
     * 
     * @type {CompanyProfileTypeComments}
     * @memberof CompanyProfileType
     */
    comments?: CompanyProfileTypeComments;
    /**
     * Contains commission related details for the profile.
     * @type {Array<ProfileCommissionType>}
     * @memberof CompanyProfileType
     */
    commissionInfoList?: Array<ProfileCommissionType>;
    /**
     * 
     * @type {CompanyType}
     * @memberof CompanyProfileType
     */
    company?: CompanyType;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof CompanyProfileType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof CompanyProfileType
     */
    creatorId?: string;
    /**
     * 
     * @type {ECertificatesType}
     * @memberof CompanyProfileType
     */
    eCertificates?: ECertificatesType;
    /**
     * Eligible for Fiscal Folio/Payload generation.
     * @type {string}
     * @memberof CompanyProfileType
     */
    eligibleForFiscalFolio?: string;
    /**
     * 
     * @type {CompanyProfileTypeEmails}
     * @memberof CompanyProfileType
     */
    emails?: CompanyProfileTypeEmails;
    /**
     * 
     * @type {CompanyProfileTypeGdsNegotiatedRates}
     * @memberof CompanyProfileType
     */
    gdsNegotiatedRates?: CompanyProfileTypeGdsNegotiatedRates;
    /**
     * Populates true if the profile has commission configured false otherwise.
     * @type {boolean}
     * @memberof CompanyProfileType
     */
    hasCommission?: boolean;
    /**
     * Influence Code associated to the profile.
     * @type {string}
     * @memberof CompanyProfileType
     */
    influenceCode?: string;
    /**
     * Flag to indicate if the negotiated rates are inherited from master profile. Flag is available only when the profile is linked to master profile and master profile has negotiated rate codes attached.
     * @type {boolean}
     * @memberof CompanyProfileType
     */
    inheritedNegRates?: boolean;
    /**
     * 
     * @type {CompanyProfileTypeKeywords}
     * @memberof CompanyProfileType
     */
    keywords?: CompanyProfileTypeKeywords;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof CompanyProfileType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof CompanyProfileType
     */
    lastModifyDateTime?: string;
    /**
     * 
     * @type {LastStayInfoType}
     * @memberof CompanyProfileType
     */
    lastStayInfo?: LastStayInfoType;
    /**
     * Localization Guest Type associated to the profile.
     * @type {string}
     * @memberof CompanyProfileType
     */
    localizationGuestType?: string;
    /**
     * 
     * @type {MailingActionsType}
     * @memberof CompanyProfileType
     */
    mailingActions?: MailingActionsType;
    /**
     * Mark this profile as recently accessed.
     * @type {boolean}
     * @memberof CompanyProfileType
     */
    markAsRecentlyAccessed?: boolean;
    /**
     * "true" setting marks the profile to be kept from being purged, once the profile is marked inactive.
     * @type {boolean}
     * @memberof CompanyProfileType
     */
    markForHistory?: boolean;
    /**
     * 
     * @type {CompanyProfileTypeNegotiatedRates}
     * @memberof CompanyProfileType
     */
    negotiatedRates?: CompanyProfileTypeNegotiatedRates;
    /**
     * Owner Code associated to the profile.
     * @type {string}
     * @memberof CompanyProfileType
     */
    ownerCode?: string;
    /**
     * 
     * @type {CompanyProfileTypePreferenceCollection}
     * @memberof CompanyProfileType
     */
    preferenceCollection?: CompanyProfileTypePreferenceCollection;
    /**
     * 
     * @type {PrivacyInfoType}
     * @memberof CompanyProfileType
     */
    privacyInfo?: PrivacyInfoType;
    /**
     * 
     * @type {ProfileAccessType}
     * @memberof CompanyProfileType
     */
    profileAccessType?: ProfileAccessType;
    /**
     * 
     * @type {ImageSetType}
     * @memberof CompanyProfileType
     */
    profileImage?: ImageSetType;
    /**
     * 
     * @type {IndicatorsType}
     * @memberof CompanyProfileType
     */
    profileIndicators?: IndicatorsType;
    /**
     * 
     * @type {CompanyProfileTypeProfileMemberships}
     * @memberof CompanyProfileType
     */
    profileMemberships?: CompanyProfileTypeProfileMemberships;
    /**
     * 
     * @type {ProfileRestrictions}
     * @memberof CompanyProfileType
     */
    profileRestrictions?: ProfileRestrictions;
    /**
     * 
     * @type {CompanyProfileTypeType}
     * @memberof CompanyProfileType
     */
    profileType?: CompanyProfileTypeType;
    /**
     * What level this profile is protected.
     * @type {string}
     * @memberof CompanyProfileType
     */
    protectedBy?: string;
    /**
     * Hotel which this profile is registered with. This attribute is not used for configuration.
     * @type {string}
     * @memberof CompanyProfileType
     */
    registeredProperty?: string;
    /**
     * 
     * @type {CompanyProfileTypeRelationships}
     * @memberof CompanyProfileType
     */
    relationships?: CompanyProfileTypeRelationships;
    /**
     * Hotel which this profile is to be registered. This attribute is only used during creation of profile.
     * @type {string}
     * @memberof CompanyProfileType
     */
    requestForHotel?: string;
    /**
     * 
     * @type {SalesInfoType}
     * @memberof CompanyProfileType
     */
    salesInfo?: SalesInfoType;
    /**
     * 
     * @type {ProfileStatusType}
     * @memberof CompanyProfileType
     */
    statusCode?: ProfileStatusType;
    /**
     * 
     * @type {ProfileSubscriptionListType}
     * @memberof CompanyProfileType
     */
    subscriptions?: ProfileSubscriptionListType;
    /**
     * 
     * @type {ProfileTaxInfoType}
     * @memberof CompanyProfileType
     */
    taxInfo?: ProfileTaxInfoType;
    /**
     * 
     * @type {CompanyProfileTypeTelephones}
     * @memberof CompanyProfileType
     */
    telephones?: CompanyProfileTypeTelephones;
    /**
     * Territory associated to the profile.
     * @type {string}
     * @memberof CompanyProfileType
     */
    territory?: string;
    /**
     * Trace Code associated to the profile.
     * @type {string}
     * @memberof CompanyProfileType
     */
    traceCode?: string;
    /**
     * 
     * @type {CompanyProfileTypeURLs}
     * @memberof CompanyProfileType
     */
    uRLs?: CompanyProfileTypeURLs;
    /**
     * 
     * @type {UserDefinedFieldsType}
     * @memberof CompanyProfileType
     */
    userDefinedFields?: UserDefinedFieldsType;
    /**
     * 
     * @type {WebUserAccountsType}
     * @memberof CompanyProfileType
     */
    webUserAccounts?: WebUserAccountsType;
}

/**
 * Check if a given object implements the CompanyProfileType interface.
 */
export function instanceOfCompanyProfileType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompanyProfileTypeFromJSON(json: any): CompanyProfileType {
    return CompanyProfileTypeFromJSONTyped(json, false);
}

export function CompanyProfileTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompanyProfileType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addresses': !exists(json, 'addresses') ? undefined : CompanyProfileTypeAddressesFromJSON(json['addresses']),
        'businessSegments': !exists(json, 'businessSegments') ? undefined : json['businessSegments'],
        'cashiering': !exists(json, 'cashiering') ? undefined : ProfileCashieringTypeFromJSON(json['cashiering']),
        'comments': !exists(json, 'comments') ? undefined : CompanyProfileTypeCommentsFromJSON(json['comments']),
        'commissionInfoList': !exists(json, 'commissionInfoList') ? undefined : ((json['commissionInfoList'] as Array<any>).map(ProfileCommissionTypeFromJSON)),
        'company': !exists(json, 'company') ? undefined : CompanyTypeFromJSON(json['company']),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'eCertificates': !exists(json, 'eCertificates') ? undefined : ECertificatesTypeFromJSON(json['eCertificates']),
        'eligibleForFiscalFolio': !exists(json, 'eligibleForFiscalFolio') ? undefined : json['eligibleForFiscalFolio'],
        'emails': !exists(json, 'emails') ? undefined : CompanyProfileTypeEmailsFromJSON(json['emails']),
        'gdsNegotiatedRates': !exists(json, 'gdsNegotiatedRates') ? undefined : CompanyProfileTypeGdsNegotiatedRatesFromJSON(json['gdsNegotiatedRates']),
        'hasCommission': !exists(json, 'hasCommission') ? undefined : json['hasCommission'],
        'influenceCode': !exists(json, 'influenceCode') ? undefined : json['influenceCode'],
        'inheritedNegRates': !exists(json, 'inheritedNegRates') ? undefined : json['inheritedNegRates'],
        'keywords': !exists(json, 'keywords') ? undefined : CompanyProfileTypeKeywordsFromJSON(json['keywords']),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastStayInfo': !exists(json, 'lastStayInfo') ? undefined : LastStayInfoTypeFromJSON(json['lastStayInfo']),
        'localizationGuestType': !exists(json, 'localizationGuestType') ? undefined : json['localizationGuestType'],
        'mailingActions': !exists(json, 'mailingActions') ? undefined : MailingActionsTypeFromJSON(json['mailingActions']),
        'markAsRecentlyAccessed': !exists(json, 'markAsRecentlyAccessed') ? undefined : json['markAsRecentlyAccessed'],
        'markForHistory': !exists(json, 'markForHistory') ? undefined : json['markForHistory'],
        'negotiatedRates': !exists(json, 'negotiatedRates') ? undefined : CompanyProfileTypeNegotiatedRatesFromJSON(json['negotiatedRates']),
        'ownerCode': !exists(json, 'ownerCode') ? undefined : json['ownerCode'],
        'preferenceCollection': !exists(json, 'preferenceCollection') ? undefined : CompanyProfileTypePreferenceCollectionFromJSON(json['preferenceCollection']),
        'privacyInfo': !exists(json, 'privacyInfo') ? undefined : PrivacyInfoTypeFromJSON(json['privacyInfo']),
        'profileAccessType': !exists(json, 'profileAccessType') ? undefined : ProfileAccessTypeFromJSON(json['profileAccessType']),
        'profileImage': !exists(json, 'profileImage') ? undefined : ImageSetTypeFromJSON(json['profileImage']),
        'profileIndicators': !exists(json, 'profileIndicators') ? undefined : IndicatorsTypeFromJSON(json['profileIndicators']),
        'profileMemberships': !exists(json, 'profileMemberships') ? undefined : CompanyProfileTypeProfileMembershipsFromJSON(json['profileMemberships']),
        'profileRestrictions': !exists(json, 'profileRestrictions') ? undefined : ProfileRestrictionsFromJSON(json['profileRestrictions']),
        'profileType': !exists(json, 'profileType') ? undefined : CompanyProfileTypeTypeFromJSON(json['profileType']),
        'protectedBy': !exists(json, 'protectedBy') ? undefined : json['protectedBy'],
        'registeredProperty': !exists(json, 'registeredProperty') ? undefined : json['registeredProperty'],
        'relationships': !exists(json, 'relationships') ? undefined : CompanyProfileTypeRelationshipsFromJSON(json['relationships']),
        'requestForHotel': !exists(json, 'requestForHotel') ? undefined : json['requestForHotel'],
        'salesInfo': !exists(json, 'salesInfo') ? undefined : SalesInfoTypeFromJSON(json['salesInfo']),
        'statusCode': !exists(json, 'statusCode') ? undefined : ProfileStatusTypeFromJSON(json['statusCode']),
        'subscriptions': !exists(json, 'subscriptions') ? undefined : ProfileSubscriptionListTypeFromJSON(json['subscriptions']),
        'taxInfo': !exists(json, 'taxInfo') ? undefined : ProfileTaxInfoTypeFromJSON(json['taxInfo']),
        'telephones': !exists(json, 'telephones') ? undefined : CompanyProfileTypeTelephonesFromJSON(json['telephones']),
        'territory': !exists(json, 'territory') ? undefined : json['territory'],
        'traceCode': !exists(json, 'traceCode') ? undefined : json['traceCode'],
        'uRLs': !exists(json, 'uRLs') ? undefined : CompanyProfileTypeURLsFromJSON(json['uRLs']),
        'userDefinedFields': !exists(json, 'userDefinedFields') ? undefined : UserDefinedFieldsTypeFromJSON(json['userDefinedFields']),
        'webUserAccounts': !exists(json, 'webUserAccounts') ? undefined : WebUserAccountsTypeFromJSON(json['webUserAccounts']),
    };
}

export function CompanyProfileTypeToJSON(value?: CompanyProfileType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addresses': CompanyProfileTypeAddressesToJSON(value.addresses),
        'businessSegments': value.businessSegments,
        'cashiering': ProfileCashieringTypeToJSON(value.cashiering),
        'comments': CompanyProfileTypeCommentsToJSON(value.comments),
        'commissionInfoList': value.commissionInfoList === undefined ? undefined : ((value.commissionInfoList as Array<any>).map(ProfileCommissionTypeToJSON)),
        'company': CompanyTypeToJSON(value.company),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'eCertificates': ECertificatesTypeToJSON(value.eCertificates),
        'eligibleForFiscalFolio': value.eligibleForFiscalFolio,
        'emails': CompanyProfileTypeEmailsToJSON(value.emails),
        'gdsNegotiatedRates': CompanyProfileTypeGdsNegotiatedRatesToJSON(value.gdsNegotiatedRates),
        'hasCommission': value.hasCommission,
        'influenceCode': value.influenceCode,
        'inheritedNegRates': value.inheritedNegRates,
        'keywords': CompanyProfileTypeKeywordsToJSON(value.keywords),
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastStayInfo': LastStayInfoTypeToJSON(value.lastStayInfo),
        'localizationGuestType': value.localizationGuestType,
        'mailingActions': MailingActionsTypeToJSON(value.mailingActions),
        'markAsRecentlyAccessed': value.markAsRecentlyAccessed,
        'markForHistory': value.markForHistory,
        'negotiatedRates': CompanyProfileTypeNegotiatedRatesToJSON(value.negotiatedRates),
        'ownerCode': value.ownerCode,
        'preferenceCollection': CompanyProfileTypePreferenceCollectionToJSON(value.preferenceCollection),
        'privacyInfo': PrivacyInfoTypeToJSON(value.privacyInfo),
        'profileAccessType': ProfileAccessTypeToJSON(value.profileAccessType),
        'profileImage': ImageSetTypeToJSON(value.profileImage),
        'profileIndicators': IndicatorsTypeToJSON(value.profileIndicators),
        'profileMemberships': CompanyProfileTypeProfileMembershipsToJSON(value.profileMemberships),
        'profileRestrictions': ProfileRestrictionsToJSON(value.profileRestrictions),
        'profileType': CompanyProfileTypeTypeToJSON(value.profileType),
        'protectedBy': value.protectedBy,
        'registeredProperty': value.registeredProperty,
        'relationships': CompanyProfileTypeRelationshipsToJSON(value.relationships),
        'requestForHotel': value.requestForHotel,
        'salesInfo': SalesInfoTypeToJSON(value.salesInfo),
        'statusCode': ProfileStatusTypeToJSON(value.statusCode),
        'subscriptions': ProfileSubscriptionListTypeToJSON(value.subscriptions),
        'taxInfo': ProfileTaxInfoTypeToJSON(value.taxInfo),
        'telephones': CompanyProfileTypeTelephonesToJSON(value.telephones),
        'territory': value.territory,
        'traceCode': value.traceCode,
        'uRLs': CompanyProfileTypeURLsToJSON(value.uRLs),
        'userDefinedFields': UserDefinedFieldsTypeToJSON(value.userDefinedFields),
        'webUserAccounts': WebUserAccountsTypeToJSON(value.webUserAccounts),
    };
}

