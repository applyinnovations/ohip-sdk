/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvailableARAddresses,
  AvailablePreferences,
  ExceptionDetailType,
} from '../models';
import {
    AvailableARAddressesFromJSON,
    AvailableARAddressesToJSON,
    AvailablePreferencesFromJSON,
    AvailablePreferencesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
} from '../models';

export interface GetAvailableARAddressesRequest {
    profileId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountId?: string;
    accountIdContext?: string;
    accountType?: string;
    accountNo?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailablePreferencesRequest {
    id?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    maxFetchSize?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ProfileLOVApi extends runtime.BaseAPI {

    /**
     * Use this API to fetch the available AR Addresses List Of Values for profiles <p><strong>OperationId:</strong>getAvailableARAddresses</p>
     * Get available AR Addresses 
     */
    async getAvailableARAddressesRaw(requestParameters: GetAvailableARAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableARAddresses>> {
        const queryParameters: any = {};

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.accountIdContext !== undefined) {
            queryParameters['accountIdContext'] = requestParameters.accountIdContext;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.accountNo !== undefined) {
            queryParameters['accountNo'] = requestParameters.accountNo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileListOfValues/availableARAddresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableARAddressesFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch the available AR Addresses List Of Values for profiles <p><strong>OperationId:</strong>getAvailableARAddresses</p>
     * Get available AR Addresses 
     */
    async getAvailableARAddresses(requestParameters: GetAvailableARAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableARAddresses> {
        const response = await this.getAvailableARAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch the available preferences List Of Values for profiles <p><strong>OperationId:</strong>getAvailablePreferences</p>
     * Get available preferences
     */
    async getAvailablePreferencesRaw(requestParameters: GetAvailablePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailablePreferences>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.maxFetchSize !== undefined) {
            queryParameters['maxFetchSize'] = requestParameters.maxFetchSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileListOfValues/availablePreferences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailablePreferencesFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch the available preferences List Of Values for profiles <p><strong>OperationId:</strong>getAvailablePreferences</p>
     * Get available preferences
     */
    async getAvailablePreferences(requestParameters: GetAvailablePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailablePreferences> {
        const response = await this.getAvailablePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
