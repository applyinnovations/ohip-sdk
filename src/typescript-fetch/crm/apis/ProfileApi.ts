/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountForecasts,
  AwardDetails,
  ChangeAccountForecastsRS,
  ChangeProfileOwnersRequest,
  ChangedMembership,
  CheckedProfiles,
  CityState,
  Company,
  DuplicateExternalSubscriptions,
  DuplicateOPERASubscriptions,
  ECertificateGeneration,
  ECertificateToConsume,
  ECertificateToExtend,
  ECertificateToVerify,
  ECertificates,
  ExceptionDetailType,
  ForecastsInformation,
  ForgetProfilesCriteria,
  FulfillmentExportedLogs,
  FuturePastBookings,
  FuturePastBookingsCriteria,
  Guest,
  LinkedProfiles,
  MatchedProfiles,
  Membership,
  MembershipNumber,
  MembershipTierProjections,
  MergeProfilesRequest,
  MergedProfilesSnapshotDetails,
  MergedStageProfileSnapshot,
  PostProfileRelationshipRequest,
  PostProfileRequest,
  Preference,
  Profile,
  ProfileAccounts,
  ProfileActivityLog,
  ProfileAttachments,
  ProfileCashieringDetails,
  ProfileCashieringDetailsInfo,
  ProfileCommissionAccount,
  ProfileCommissionAccountCopy,
  ProfileCommissionAccountInfo,
  ProfileDetails,
  ProfileOwners,
  ProfileOwnersDetail,
  ProfileRelationships,
  ProfileStayHistory,
  ProfileSubscriptionsToSynchronize,
  ProfileSummaries,
  PutProfileRelationshipRequest,
  PutProfileRequest,
  RecentlyAccessedProfiles,
  StagedProfile,
  StagedProfileDetails,
  StagedProfiles,
  Status,
  StoreEmailRequest,
  SuspendedAddresses,
  SuspendedProfileErrorSummaryInfo,
  ValidatedForgetProfiles,
  VerifiedECertificate,
} from '../models/index';
import {
    AccountForecastsFromJSON,
    AccountForecastsToJSON,
    AwardDetailsFromJSON,
    AwardDetailsToJSON,
    ChangeAccountForecastsRSFromJSON,
    ChangeAccountForecastsRSToJSON,
    ChangeProfileOwnersRequestFromJSON,
    ChangeProfileOwnersRequestToJSON,
    ChangedMembershipFromJSON,
    ChangedMembershipToJSON,
    CheckedProfilesFromJSON,
    CheckedProfilesToJSON,
    CityStateFromJSON,
    CityStateToJSON,
    CompanyFromJSON,
    CompanyToJSON,
    DuplicateExternalSubscriptionsFromJSON,
    DuplicateExternalSubscriptionsToJSON,
    DuplicateOPERASubscriptionsFromJSON,
    DuplicateOPERASubscriptionsToJSON,
    ECertificateGenerationFromJSON,
    ECertificateGenerationToJSON,
    ECertificateToConsumeFromJSON,
    ECertificateToConsumeToJSON,
    ECertificateToExtendFromJSON,
    ECertificateToExtendToJSON,
    ECertificateToVerifyFromJSON,
    ECertificateToVerifyToJSON,
    ECertificatesFromJSON,
    ECertificatesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ForecastsInformationFromJSON,
    ForecastsInformationToJSON,
    ForgetProfilesCriteriaFromJSON,
    ForgetProfilesCriteriaToJSON,
    FulfillmentExportedLogsFromJSON,
    FulfillmentExportedLogsToJSON,
    FuturePastBookingsFromJSON,
    FuturePastBookingsToJSON,
    FuturePastBookingsCriteriaFromJSON,
    FuturePastBookingsCriteriaToJSON,
    GuestFromJSON,
    GuestToJSON,
    LinkedProfilesFromJSON,
    LinkedProfilesToJSON,
    MatchedProfilesFromJSON,
    MatchedProfilesToJSON,
    MembershipFromJSON,
    MembershipToJSON,
    MembershipNumberFromJSON,
    MembershipNumberToJSON,
    MembershipTierProjectionsFromJSON,
    MembershipTierProjectionsToJSON,
    MergeProfilesRequestFromJSON,
    MergeProfilesRequestToJSON,
    MergedProfilesSnapshotDetailsFromJSON,
    MergedProfilesSnapshotDetailsToJSON,
    MergedStageProfileSnapshotFromJSON,
    MergedStageProfileSnapshotToJSON,
    PostProfileRelationshipRequestFromJSON,
    PostProfileRelationshipRequestToJSON,
    PostProfileRequestFromJSON,
    PostProfileRequestToJSON,
    PreferenceFromJSON,
    PreferenceToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    ProfileAccountsFromJSON,
    ProfileAccountsToJSON,
    ProfileActivityLogFromJSON,
    ProfileActivityLogToJSON,
    ProfileAttachmentsFromJSON,
    ProfileAttachmentsToJSON,
    ProfileCashieringDetailsFromJSON,
    ProfileCashieringDetailsToJSON,
    ProfileCashieringDetailsInfoFromJSON,
    ProfileCashieringDetailsInfoToJSON,
    ProfileCommissionAccountFromJSON,
    ProfileCommissionAccountToJSON,
    ProfileCommissionAccountCopyFromJSON,
    ProfileCommissionAccountCopyToJSON,
    ProfileCommissionAccountInfoFromJSON,
    ProfileCommissionAccountInfoToJSON,
    ProfileDetailsFromJSON,
    ProfileDetailsToJSON,
    ProfileOwnersFromJSON,
    ProfileOwnersToJSON,
    ProfileOwnersDetailFromJSON,
    ProfileOwnersDetailToJSON,
    ProfileRelationshipsFromJSON,
    ProfileRelationshipsToJSON,
    ProfileStayHistoryFromJSON,
    ProfileStayHistoryToJSON,
    ProfileSubscriptionsToSynchronizeFromJSON,
    ProfileSubscriptionsToSynchronizeToJSON,
    ProfileSummariesFromJSON,
    ProfileSummariesToJSON,
    PutProfileRelationshipRequestFromJSON,
    PutProfileRelationshipRequestToJSON,
    PutProfileRequestFromJSON,
    PutProfileRequestToJSON,
    RecentlyAccessedProfilesFromJSON,
    RecentlyAccessedProfilesToJSON,
    StagedProfileFromJSON,
    StagedProfileToJSON,
    StagedProfileDetailsFromJSON,
    StagedProfileDetailsToJSON,
    StagedProfilesFromJSON,
    StagedProfilesToJSON,
    StatusFromJSON,
    StatusToJSON,
    StoreEmailRequestFromJSON,
    StoreEmailRequestToJSON,
    SuspendedAddressesFromJSON,
    SuspendedAddressesToJSON,
    SuspendedProfileErrorSummaryInfoFromJSON,
    SuspendedProfileErrorSummaryInfoToJSON,
    ValidatedForgetProfilesFromJSON,
    ValidatedForgetProfilesToJSON,
    VerifiedECertificateFromJSON,
    VerifiedECertificateToJSON,
} from '../models/index';

export interface ChangeMembershipRequest {
    membershipId: string;
    membershipType: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membership: Membership;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeProfileCashieringDetailsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCashieringDetails: ProfileCashieringDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeProfileOwnersOperationRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileOwners: ChangeProfileOwnersRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeStagedProfileRequest {
    id: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    stagedProfile: StagedProfile;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CheckProfileTypeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    checkProfileInstruction?: CheckProfileTypeCheckProfileInstructionEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ConsumeECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateToConsume: ECertificateToConsume;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyProfileCommissionAccountRequest {
    profileId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCommissionAccountCopy: ProfileCommissionAccountCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAccountForecastRequest {
    periodCode: string;
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    periodCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCertificateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGlobalPreferenceRequest {
    preferenceCode: string;
    preferenceType: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registeredProperty?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipRequest {
    membershipId: string;
    membershipType: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMultipleAccountForecastsRequest {
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    periodCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePreferenceRequest {
    preferenceCode: string;
    preferenceType: string;
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    registeredProperty?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileAttachmentRequest {
    attachmentId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idExtension?: Array<number>;
    idContext?: Array<string>;
    type?: Array<string>;
    uniqueIdIdExtension?: Array<number>;
    uniqueIdIdContext?: Array<string>;
    uniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validatePending?: boolean;
    hotelId?: string;
    profileIdExtension?: number;
    profileContext?: string;
    profileType?: string;
    bankAccountId?: string;
    bankAccountIdExtension?: number;
    bankAccountIdContext?: string;
    bankAccountIdType?: string;
    commissionCode?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfilePermanentlyRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DistributePreferenceRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preference: Preference;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ExtendECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateToExtend: ECertificateToExtend;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAccountForecastsRequest {
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fromPeriodCode?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAddressRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeNoCity?: boolean;
    cityName?: string;
    postalCode?: string;
    state?: string;
    code?: string;
    streetAddress?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileContext?: string;
    profileType?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashieringDetailsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchPaymentMethod?: boolean;
    fetchRoutingInstruction?: boolean;
    idContext?: string;
    idType?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompanyProfileRequest {
    corporateID: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetCompanyProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDuplicateExternalSubscriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    databaseId?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDuplicateOPERASubscriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    databaseId?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetECertificatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    hotelId?: string;
    code?: string;
    groupCode?: string;
    status?: Set<GetECertificatesStatusEnum>;
    includeInactive?: boolean;
    voucherNo?: string;
    excludeVoucherNumbers?: Array<string>;
    availableECertificates?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFulfillmentExportLogsRequest {
    membershipId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    membershipType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestProfileRequest {
    guestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    fetchInstructions?: Set<GetGuestProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLinkedProfilesRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    idType?: string;
    profileTypes?: Set<GetLinkedProfilesProfileTypesEnum>;
    accountsReceivables?: boolean;
    corporateProfiles?: boolean;
    excludeInactive?: boolean;
    excludeIncompleteProfiles?: boolean;
    includeHasHierarchyOnly?: boolean;
    negotiatedRates?: boolean;
    linkedProfileAdditionalCriteriaProfileType?: GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum;
    linkedProfileid?: string;
    linkedProfileIdContext?: string;
    linkedProfileIdType?: string;
    name?: string;
    givenName?: string;
    excludeNoCity?: boolean;
    cityName?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    streetAddress?: string;
    ownerCode?: Array<string>;
    aRNumber?: string;
    prioritiesCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMatchProfilesRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    idContext?: string;
    idType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTierProjectionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipId?: string;
    membershipType?: string;
    id?: string;
    idContext?: string;
    type?: string;
    projectionDate?: Date;
    projectionType?: GetMembershipTierProjectionsProjectionTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMergeProfilesSnapshotRequest {
    survivorProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    originalId?: string;
    originalIdContext?: string;
    originalIdType?: string;
    toBeMergedId?: Array<string>;
    toBeMergedIdContext?: Array<string>;
    toBeMergedIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMergeStageProfileSnapshotRequest {
    survivorProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    resortProfileId?: string;
    resortProfileIdContext?: string;
    resortProfileIdType?: string;
    profileIdContext?: string;
    profileIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreferenceForProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    hotelId?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    logViewProfile?: boolean;
    showInactiveRoomOwners?: boolean;
    markAsRecentlyAccessed?: boolean;
    fetchInstructions?: Set<GetProfileFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfileInstructionParameterTypeEnum>;
    value?: Array<string>;
    allowedAction?: Set<GetProfileAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileAccountsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: Array<string>;
    type?: Array<string>;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileActivityLogRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    activityParamsHotelId?: string;
    module?: GetProfileActivityLogModuleEnum;
    parameterName?: Array<string>;
    parameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIDs?: Array<number>;
    userForIDs?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileAttachmentsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileByExtIdRequest {
    profileExternalId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    logViewProfile?: boolean;
    showInactiveRoomOwners?: boolean;
    fetchInstructions?: Set<GetProfileByExtIdFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfileByExtIdInstructionParameterTypeEnum>;
    value?: Array<string>;
    allowedAction?: Set<GetProfileByExtIdAllowedActionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileOwnersRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileRelationshipsRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    relationshipPrimaryProfile?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeInactive?: boolean;
    hotelId?: string;
    includeHasHierarchyOnly?: boolean;
    includePrimaryOwnersOnly?: boolean;
    includePurgeProfiles?: boolean;
    limit?: number;
    offset?: number;
    searchType?: GetProfilesSearchTypeEnum;
    summaryInfo?: boolean;
    searchString?: string;
    includeAnonymized?: boolean;
    profileType?: Set<GetProfilesProfileTypeEnum>;
    profileIds?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    corporateIds?: Array<string>;
    profileName?: string;
    givenName?: string;
    incognitoName?: string;
    incognitoGivenName?: string;
    city?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    streetAddress?: string;
    keyword?: string;
    communication?: string;
    membership?: string;
    membershipType?: string;
    ownerCodes?: Array<string>;
    membershipLevel?: string;
    aRNumber?: string;
    taxID?: string;
    businessSegment?: Array<string>;
    accountsReceivables?: boolean;
    corporateProfiles?: boolean;
    excludeIncompleteProfiles?: boolean;
    negotiatedRates?: boolean;
    relatedProfileExcludeInactive?: boolean;
    realtedProfileIncludeHasHierarchyOnly?: boolean;
    relatedProfileNegotiatedRates?: boolean;
    relatedProfileType?: GetProfilesRelatedProfileTypeEnum;
    relatedProfileName?: string;
    protectedProfiles?: boolean;
    excludedProfilesId?: Array<string>;
    idExtension?: Array<number>;
    excludedProfilesIdContext?: Array<string>;
    excludedProfilesIdType?: Array<string>;
    identificationNo?: string;
    fetchInstructions?: Set<GetProfilesFetchInstructionsEnum>;
    allowedAction?: Set<GetProfilesAllowedActionEnum>;
    vipCodes?: Array<string>;
    predefinedFilterId?: number;
    predefinedFilterCode?: string;
    prioritieCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfilesByIdsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileIds?: Array<string>;
    corporateIds?: Array<string>;
    externalReferenceIds?: Array<string>;
    externalSystemCodes?: Array<string>;
    limit?: Array<number>;
    fetchInstructions?: Set<GetProfilesByIdsFetchInstructionsEnum>;
    instructionParameterType?: Set<GetProfilesByIdsInstructionParameterTypeEnum>;
    instructionParameterValue?: Array<string>;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRecentlyAccessedProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStagedProfileRequest {
    id: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    idContext?: Array<string>;
    type?: Array<string>;
    fetchInstructions?: Set<GetStagedProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStagedProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    name?: string;
    givenName?: string;
    region?: string;
    countryCode?: string;
    profileType?: string;
    importDate?: Date;
    stageStatus?: string;
    applyTo?: GetStagedProfilesApplyToEnum;
    membershipCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStayHistoryRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    includePurgeProfiles?: boolean;
    markAsRecentlyAccessed?: boolean;
    limit?: Array<number>;
    fetchInstructions?: Set<GetStayHistoryFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSuspendedAddressesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    name?: string;
    hotelId?: string;
    firstName?: string;
    profileType?: string;
    matchCode?: string;
    countryCode?: string;
    validateDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSuspendedProfileErrorSummaryRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface MergeProfilesOperationRequest {
    survivorProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileToBeMerged: MergeProfilesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAccountForecastRequest {
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    forecastsInformation: ForecastsInformation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompanyProfileRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    company: Company;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostECertificateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateGeneration: ECertificateGeneration;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestProfileRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guest: Guest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membership: Membership;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipNumberRequest {
    membershipType: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipNumber: MembershipNumber;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPreferenceRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preference: Preference;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profile: PostProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCommissionAccount: ProfileCommissionAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileOwnersRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileOwners: ProfileOwners;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileRelationshipOperationRequest {
    targetProfileId: string;
    sourceProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRelationship: PostProfileRelationshipRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAccountForecastRequest {
    periodCode: string;
    hotelId: string;
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    forecastsInformation: ForecastsInformation;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileOperationRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profile: PutProfileRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileRelationshipOperationRequest {
    targetProfileId: string;
    sourceProfileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRelationshipToBeChanged: PutProfileRelationshipRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveProfileRelationshipRequest {
    targetProfileId: string;
    sourceProfileId: string;
    sourceRelation: string;
    targetRelation: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    primary?: boolean;
    sourceRelationDescription?: string;
    targetRelationDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetProfileCommissionAccountRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileCommissionAccount: ProfileCommissionAccount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StoreEmailOperationRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    emailMessageType: StoreEmailRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SynchronizeProfileSubscriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileSubscriptionsToSynchronize: ProfileSubscriptionsToSynchronize;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateForgetProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    forgetProfilesCriteria: ForgetProfilesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateReservationsForProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    futurePastBookingsCriteria: FuturePastBookingsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface VerifyECertificateRequest {
    certificateId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCertificateToVerify: ECertificateToVerify;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ProfileApi extends runtime.BaseAPI {

    /**
     * Use this API to update membership details on a profile. <p><strong>OperationId:</strong>changeMembership</p>
     * Change membership information on a profile
     */
    async changeMembershipRaw(requestParameters: ChangeMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedMembership>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling changeMembership.');
        }
        
        if (requestParameters.membershipType === null || requestParameters.membershipType === undefined) {
            throw new runtime.RequiredError('membershipType','Required parameter requestParameters.membershipType was null or undefined when calling changeMembership.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling changeMembership.');
        }
        
        if (requestParameters.membership === null || requestParameters.membership === undefined) {
            throw new runtime.RequiredError('membership','Required parameter requestParameters.membership was null or undefined when calling changeMembership.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/membershipType/{membershipType}/membershipId/{membershipId}`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipToJSON(requestParameters.membership),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedMembershipFromJSON(jsonValue));
    }

    /**
     * Use this API to update membership details on a profile. <p><strong>OperationId:</strong>changeMembership</p>
     * Change membership information on a profile
     */
    async changeMembership(requestParameters: ChangeMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedMembership> {
        const response = await this.changeMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a profiles Financial details, such as billing, routing instructions. <p><strong>OperationId:</strong>changeProfileCashieringDetails</p>
     * Change cashiering details for a profile
     */
    async changeProfileCashieringDetailsRaw(requestParameters: ChangeProfileCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling changeProfileCashieringDetails.');
        }
        
        if (requestParameters.profileCashieringDetails === null || requestParameters.profileCashieringDetails === undefined) {
            throw new runtime.RequiredError('profileCashieringDetails','Required parameter requestParameters.profileCashieringDetails was null or undefined when calling changeProfileCashieringDetails.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/cashieringDetails`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCashieringDetailsToJSON(requestParameters.profileCashieringDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update a profiles Financial details, such as billing, routing instructions. <p><strong>OperationId:</strong>changeProfileCashieringDetails</p>
     * Change cashiering details for a profile
     */
    async changeProfileCashieringDetails(requestParameters: ChangeProfileCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeProfileCashieringDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an Owner on a profile  <p><strong>OperationId:</strong>changeProfileOwners</p>
     * Change profile owners
     */
    async changeProfileOwnersRaw(requestParameters: ChangeProfileOwnersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling changeProfileOwners.');
        }
        
        if (requestParameters.profileOwners === null || requestParameters.profileOwners === undefined) {
            throw new runtime.RequiredError('profileOwners','Required parameter requestParameters.profileOwners was null or undefined when calling changeProfileOwners.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/owners`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeProfileOwnersRequestToJSON(requestParameters.profileOwners),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an Owner on a profile  <p><strong>OperationId:</strong>changeProfileOwners</p>
     * Change profile owners
     */
    async changeProfileOwners(requestParameters: ChangeProfileOwnersOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeProfileOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to update the staged Profile. <p><strong>OperationId:</strong>changeStagedProfile</p>
     * Change a staged profile
     */
    async changeStagedProfileRaw(requestParameters: ChangeStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling changeStagedProfile.');
        }
        
        if (requestParameters.stagedProfile === null || requestParameters.stagedProfile === undefined) {
            throw new runtime.RequiredError('stagedProfile','Required parameter requestParameters.stagedProfile was null or undefined when calling changeStagedProfile.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stagedProfile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StagedProfileToJSON(requestParameters.stagedProfile),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to update the staged Profile. <p><strong>OperationId:</strong>changeStagedProfile</p>
     * Change a staged profile
     */
    async changeStagedProfile(requestParameters: ChangeStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeStagedProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API validates/checks allowed actions, the existence of attached records and/or indicators of a profile. <p><strong>OperationId:</strong>checkProfileType</p>
     * Validate and check profiles
     */
    async checkProfileTypeRaw(requestParameters: CheckProfileTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedProfiles>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        if (requestParameters.checkProfileInstruction !== undefined) {
            queryParameters['checkProfileInstruction'] = requestParameters.checkProfileInstruction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/action/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckedProfilesFromJSON(jsonValue));
    }

    /**
     * This API validates/checks allowed actions, the existence of attached records and/or indicators of a profile. <p><strong>OperationId:</strong>checkProfileType</p>
     * Validate and check profiles
     */
    async checkProfileType(requestParameters: CheckProfileTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedProfiles> {
        const response = await this.checkProfileTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to consume (use) an E-Certificate.  <p><strong>OperationId:</strong>consumeECertificate</p>
     * Consume an E-Certificate
     */
    async consumeECertificateRaw(requestParameters: ConsumeECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling consumeECertificate.');
        }
        
        if (requestParameters.eCertificateToConsume === null || requestParameters.eCertificateToConsume === undefined) {
            throw new runtime.RequiredError('eCertificateToConsume','Required parameter requestParameters.eCertificateToConsume was null or undefined when calling consumeECertificate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecertificates/{certificateId}`.replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ECertificateToConsumeToJSON(requestParameters.eCertificateToConsume),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to consume (use) an E-Certificate.  <p><strong>OperationId:</strong>consumeECertificate</p>
     * Consume an E-Certificate
     */
    async consumeECertificate(requestParameters: ConsumeECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.consumeECertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to copy the commission account on a profile <p><strong>OperationId:</strong>copyProfileCommissionAccount</p>
     * Copy profile commission account
     */
    async copyProfileCommissionAccountRaw(requestParameters: CopyProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling copyProfileCommissionAccount.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyProfileCommissionAccount.');
        }
        
        if (requestParameters.profileCommissionAccountCopy === null || requestParameters.profileCommissionAccountCopy === undefined) {
            throw new runtime.RequiredError('profileCommissionAccountCopy','Required parameter requestParameters.profileCommissionAccountCopy was null or undefined when calling copyProfileCommissionAccount.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileId}/commissionAccount`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCommissionAccountCopyToJSON(requestParameters.profileCommissionAccountCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to copy the commission account on a profile <p><strong>OperationId:</strong>copyProfileCommissionAccount</p>
     * Copy profile commission account
     */
    async copyProfileCommissionAccount(requestParameters: CopyProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyProfileCommissionAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to delete an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>deleteAccountForecast</p>
     * Delete account forecast in a hotel by period code
     */
    async deleteAccountForecastRaw(requestParameters: DeleteAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.periodCode === null || requestParameters.periodCode === undefined) {
            throw new runtime.RequiredError('periodCode','Required parameter requestParameters.periodCode was null or undefined when calling deleteAccountForecast.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteAccountForecast.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteAccountForecast.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.periodCodes) {
            queryParameters['periodCodes'] = requestParameters.periodCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/hotels/{hotelId}/forecasts/periodCodes/{periodCode}`.replace(`{${"periodCode"}}`, encodeURIComponent(String(requestParameters.periodCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to delete an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>deleteAccountForecast</p>
     * Delete account forecast in a hotel by period code
     */
    async deleteAccountForecast(requestParameters: DeleteAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAccountForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to delete a certificate. <p><strong>OperationId:</strong>deleteCertificate</p>
     * Delete certificate
     */
    async deleteCertificateRaw(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/certificates`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete a certificate. <p><strong>OperationId:</strong>deleteCertificate</p>
     * Delete certificate
     */
    async deleteCertificate(requestParameters: DeleteCertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete an eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteECertificate</p>
     * Delete e-certificate
     */
    async deleteECertificateRaw(requestParameters: DeleteECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling deleteECertificate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecertificates/{certificateId}`.replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete an eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteECertificate</p>
     * Delete e-certificate
     */
    async deleteECertificate(requestParameters: DeleteECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteECertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to delete a global preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deleteGlobalPreference</p>
     * Delete a global preference from a profile
     */
    async deleteGlobalPreferenceRaw(requestParameters: DeleteGlobalPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
            throw new runtime.RequiredError('preferenceCode','Required parameter requestParameters.preferenceCode was null or undefined when calling deleteGlobalPreference.');
        }
        
        if (requestParameters.preferenceType === null || requestParameters.preferenceType === undefined) {
            throw new runtime.RequiredError('preferenceType','Required parameter requestParameters.preferenceType was null or undefined when calling deleteGlobalPreference.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteGlobalPreference.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.registeredProperty !== undefined) {
            queryParameters['registeredProperty'] = requestParameters.registeredProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/preferenceType/{preferenceType}/preferences/{preferenceCode}`.replace(`{${"preferenceCode"}}`, encodeURIComponent(String(requestParameters.preferenceCode))).replace(`{${"preferenceType"}}`, encodeURIComponent(String(requestParameters.preferenceType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to delete a global preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deleteGlobalPreference</p>
     * Delete a global preference from a profile
     */
    async deleteGlobalPreference(requestParameters: DeleteGlobalPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGlobalPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete membership details on a profile. <p><strong>OperationId:</strong>deleteMembership</p>
     * Delete membership information from a profile
     */
    async deleteMembershipRaw(requestParameters: DeleteMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling deleteMembership.');
        }
        
        if (requestParameters.membershipType === null || requestParameters.membershipType === undefined) {
            throw new runtime.RequiredError('membershipType','Required parameter requestParameters.membershipType was null or undefined when calling deleteMembership.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteMembership.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/membershipType/{membershipType}/membershipId/{membershipId}`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete membership details on a profile. <p><strong>OperationId:</strong>deleteMembership</p>
     * Delete membership information from a profile
     */
    async deleteMembership(requestParameters: DeleteMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete multiple account forecasts. <p><strong>OperationId:</strong>deleteMultipleAccountForecasts</p>
     * Delete multiple account forecasts
     */
    async deleteMultipleAccountForecastsRaw(requestParameters: DeleteMultipleAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteMultipleAccountForecasts.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteMultipleAccountForecasts.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.periodCodes) {
            queryParameters['periodCodes'] = requestParameters.periodCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/hotels/{hotelId}/forecasts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete multiple account forecasts. <p><strong>OperationId:</strong>deleteMultipleAccountForecasts</p>
     * Delete multiple account forecasts
     */
    async deleteMultipleAccountForecasts(requestParameters: DeleteMultipleAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMultipleAccountForecastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to delete a preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deletePreference</p>
     * Delete a preference from a profile
     */
    async deletePreferenceRaw(requestParameters: DeletePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
            throw new runtime.RequiredError('preferenceCode','Required parameter requestParameters.preferenceCode was null or undefined when calling deletePreference.');
        }
        
        if (requestParameters.preferenceType === null || requestParameters.preferenceType === undefined) {
            throw new runtime.RequiredError('preferenceType','Required parameter requestParameters.preferenceType was null or undefined when calling deletePreference.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePreference.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deletePreference.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.registeredProperty !== undefined) {
            queryParameters['registeredProperty'] = requestParameters.registeredProperty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/hotels/{hotelId}/preferenceType/{preferenceType}/preferences/{preferenceCode}`.replace(`{${"preferenceCode"}}`, encodeURIComponent(String(requestParameters.preferenceCode))).replace(`{${"preferenceType"}}`, encodeURIComponent(String(requestParameters.preferenceType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to delete a preference code from a profile.  For example the guest no longer has a preference for High Floor Room, so you would go ahead and delete this preference from their profile. <p><strong>OperationId:</strong>deletePreference</p>
     * Delete a preference from a profile
     */
    async deletePreference(requestParameters: DeletePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    async deleteProfileRaw(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteProfile.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use deleteProfile to inactivate and remove a profile from OPERA. The profile will stay in the Database, until a nightly purge process is run to remove profile details from the OPERA database. <p><strong>OperationId:</strong>deleteProfile</p>
     * Forget or delete a profile by ID
     */
    async deleteProfile(requestParameters: DeleteProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will delete an attachment on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteProfileAttachment</p>
     * Delete profile attachment
     */
    async deleteProfileAttachmentRaw(requestParameters: DeleteProfileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling deleteProfileAttachment.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteProfileAttachment.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idExtension) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.uniqueIdIdExtension) {
            queryParameters['uniqueIdIdExtension'] = requestParameters.uniqueIdIdExtension;
        }

        if (requestParameters.uniqueIdIdContext) {
            queryParameters['uniqueIdIdContext'] = requestParameters.uniqueIdIdContext;
        }

        if (requestParameters.uniqueIdType) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/attachments/{attachmentId}`.replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will delete an attachment on a profile in OPERA Cloud. <p><strong>OperationId:</strong>deleteProfileAttachment</p>
     * Delete profile attachment
     */
    async deleteProfileAttachment(requestParameters: DeleteProfileAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Commission Account from a specified profile. <p><strong>OperationId:</strong>deleteProfileCommissionAccount</p>
     * Delete a commission account from a profile
     */
    async deleteProfileCommissionAccountRaw(requestParameters: DeleteProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteProfileCommissionAccount.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.validatePending !== undefined) {
            queryParameters['validatePending'] = requestParameters.validatePending;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.profileIdExtension !== undefined) {
            queryParameters['profileIdExtension'] = requestParameters.profileIdExtension;
        }

        if (requestParameters.profileContext !== undefined) {
            queryParameters['profileContext'] = requestParameters.profileContext;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        if (requestParameters.bankAccountIdExtension !== undefined) {
            queryParameters['bankAccountIdExtension'] = requestParameters.bankAccountIdExtension;
        }

        if (requestParameters.bankAccountIdContext !== undefined) {
            queryParameters['bankAccountIdContext'] = requestParameters.bankAccountIdContext;
        }

        if (requestParameters.bankAccountIdType !== undefined) {
            queryParameters['bankAccountIdType'] = requestParameters.bankAccountIdType;
        }

        if (requestParameters.commissionCode !== undefined) {
            queryParameters['commissionCode'] = requestParameters.commissionCode;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/commissionAccount`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a Commission Account from a specified profile. <p><strong>OperationId:</strong>deleteProfileCommissionAccount</p>
     * Delete a commission account from a profile
     */
    async deleteProfileCommissionAccount(requestParameters: DeleteProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileCommissionAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteProfilePermanently</p>
     * Delete the profile permanently.
     */
    async deleteProfilePermanentlyRaw(requestParameters: DeleteProfilePermanentlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteProfilePermanently.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/action/delete`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteProfilePermanently</p>
     * Delete the profile permanently.
     */
    async deleteProfilePermanently(requestParameters: DeleteProfilePermanentlyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfilePermanentlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * With this API you can distribute preferences on a profile. <p><strong>OperationId:</strong>distributePreference</p>
     * Distribute preferences on a profile
     */
    async distributePreferenceRaw(requestParameters: DistributePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling distributePreference.');
        }
        
        if (requestParameters.preference === null || requestParameters.preference === undefined) {
            throw new runtime.RequiredError('preference','Required parameter requestParameters.preference was null or undefined when calling distributePreference.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/preferences`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PreferenceToJSON(requestParameters.preference),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * With this API you can distribute preferences on a profile. <p><strong>OperationId:</strong>distributePreference</p>
     * Distribute preferences on a profile
     */
    async distributePreference(requestParameters: DistributePreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.distributePreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to extend the date of an existing E-Certificate. <p><strong>OperationId:</strong>extendECertificate</p>
     * Extend E-Certificate Expiry date
     */
    async extendECertificateRaw(requestParameters: ExtendECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling extendECertificate.');
        }
        
        if (requestParameters.eCertificateToExtend === null || requestParameters.eCertificateToExtend === undefined) {
            throw new runtime.RequiredError('eCertificateToExtend','Required parameter requestParameters.eCertificateToExtend was null or undefined when calling extendECertificate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecertificates/{certificateId}/extensions`.replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECertificateToExtendToJSON(requestParameters.eCertificateToExtend),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to extend the date of an existing E-Certificate. <p><strong>OperationId:</strong>extendECertificate</p>
     * Extend E-Certificate Expiry date
     */
    async extendECertificate(requestParameters: ExtendECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.extendECertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve account forecasts for a hotel <p><strong>OperationId:</strong>getAccountForecasts</p>
     * Fetch Account Forecasts by hotel
     */
    async getAccountForecastsRaw(requestParameters: GetAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountForecasts>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAccountForecasts.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getAccountForecasts.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fromPeriodCode !== undefined) {
            queryParameters['fromPeriodCode'] = requestParameters.fromPeriodCode;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/hotels/{hotelId}/forecasts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountForecastsFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve account forecasts for a hotel <p><strong>OperationId:</strong>getAccountForecasts</p>
     * Fetch Account Forecasts by hotel
     */
    async getAccountForecasts(requestParameters: GetAccountForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountForecasts> {
        const response = await this.getAccountForecastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will get city and states. <p><strong>OperationId:</strong>getAddress</p>
     * Get city states
     */
    async getAddressRaw(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityState>> {
        const queryParameters: any = {};

        if (requestParameters.excludeNoCity !== undefined) {
            queryParameters['excludeNoCity'] = requestParameters.excludeNoCity;
        }

        if (requestParameters.cityName !== undefined) {
            queryParameters['cityName'] = requestParameters.cityName;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.streetAddress !== undefined) {
            queryParameters['streetAddress'] = requestParameters.streetAddress;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/address`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CityStateFromJSON(jsonValue));
    }

    /**
     * This API will get city and states. <p><strong>OperationId:</strong>getAddress</p>
     * Get city states
     */
    async getAddress(requestParameters: GetAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityState> {
        const response = await this.getAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Profile awards and certificates that exist on a profile. <p><strong>OperationId:</strong>getAwards</p>
     * Get Profile awards and certificates
     */
    async getAwardsRaw(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwardDetails>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getAwards.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.profileContext !== undefined) {
            queryParameters['profileContext'] = requestParameters.profileContext;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/awardsAndCertificates`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardDetailsFromJSON(jsonValue));
    }

    /**
     * Get Profile awards and certificates that exist on a profile. <p><strong>OperationId:</strong>getAwards</p>
     * Get Profile awards and certificates
     */
    async getAwards(requestParameters: GetAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwardDetails> {
        const response = await this.getAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve any profile Financial details that exists on a profile (typically Company or Travel Agent profiles).  This includes Routing Instructions on the profile. <p><strong>OperationId:</strong>getCashieringDetails</p>
     * Get cashiering details for a profile
     */
    async getCashieringDetailsRaw(requestParameters: GetCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileCashieringDetailsInfo>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getCashieringDetails.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchPaymentMethod !== undefined) {
            queryParameters['fetchPaymentMethod'] = requestParameters.fetchPaymentMethod;
        }

        if (requestParameters.fetchRoutingInstruction !== undefined) {
            queryParameters['fetchRoutingInstruction'] = requestParameters.fetchRoutingInstruction;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/cashieringDetails`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileCashieringDetailsInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve any profile Financial details that exists on a profile (typically Company or Travel Agent profiles).  This includes Routing Instructions on the profile. <p><strong>OperationId:</strong>getCashieringDetails</p>
     * Get cashiering details for a profile
     */
    async getCashieringDetails(requestParameters: GetCashieringDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileCashieringDetailsInfo> {
        const response = await this.getCashieringDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    async getCompanyProfileRaw(requestParameters: GetCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.corporateID === null || requestParameters.corporateID === undefined) {
            throw new runtime.RequiredError('corporateID','Required parameter requestParameters.corporateID was null or undefined when calling getCompanyProfile.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/companies/{corporateID}`.replace(`{${"corporateID"}}`, encodeURIComponent(String(requestParameters.corporateID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * Use this to retrieve a specific Company, Travel Agent, Group or Source profile. You must know the corporate ID of the profile for the request API. <p><strong>OperationId:</strong>getCompanyProfile</p>
     * Get company profile by corporate ID
     */
    async getCompanyProfile(requestParameters: GetCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.getCompanyProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch profile subscriptions where the same OPERA Cloud profile is linked to multiple external profiles, within the same external system. <p><strong>OperationId:</strong>getDuplicateExternalSubscriptions</p>
     * Get profiles with duplicate external subscriptions 
     */
    async getDuplicateExternalSubscriptionsRaw(requestParameters: GetDuplicateExternalSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateExternalSubscriptions>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.databaseId !== undefined) {
            queryParameters['databaseId'] = requestParameters.databaseId;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileContext !== undefined) {
            queryParameters['profileContext'] = requestParameters.profileContext;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/duplicateExternalSubscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DuplicateExternalSubscriptionsFromJSON(jsonValue));
    }

    /**
     * Fetch profile subscriptions where the same OPERA Cloud profile is linked to multiple external profiles, within the same external system. <p><strong>OperationId:</strong>getDuplicateExternalSubscriptions</p>
     * Get profiles with duplicate external subscriptions 
     */
    async getDuplicateExternalSubscriptions(requestParameters: GetDuplicateExternalSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateExternalSubscriptions> {
        const response = await this.getDuplicateExternalSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch subscriptions where an external profile within a particular external system is linked to multiple OPERA Cloud profiles. <p><strong>OperationId:</strong>getDuplicateOPERASubscriptions</p>
     * Get profiles with duplicate OPERA Cloud subscriptions
     */
    async getDuplicateOPERASubscriptionsRaw(requestParameters: GetDuplicateOPERASubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateOPERASubscriptions>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.databaseId !== undefined) {
            queryParameters['databaseId'] = requestParameters.databaseId;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileContext !== undefined) {
            queryParameters['profileContext'] = requestParameters.profileContext;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/duplicateOPERASubscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DuplicateOPERASubscriptionsFromJSON(jsonValue));
    }

    /**
     * Fetch subscriptions where an external profile within a particular external system is linked to multiple OPERA Cloud profiles. <p><strong>OperationId:</strong>getDuplicateOPERASubscriptions</p>
     * Get profiles with duplicate OPERA Cloud subscriptions
     */
    async getDuplicateOPERASubscriptions(requestParameters: GetDuplicateOPERASubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateOPERASubscriptions> {
        const response = await this.getDuplicateOPERASubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to retrieve eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getECertificates</p>
     * Get e-certificate
     */
    async getECertificatesRaw(requestParameters: GetECertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECertificates>> {
        const queryParameters: any = {};

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileContext !== undefined) {
            queryParameters['profileContext'] = requestParameters.profileContext;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.groupCode !== undefined) {
            queryParameters['groupCode'] = requestParameters.groupCode;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.voucherNo !== undefined) {
            queryParameters['voucherNo'] = requestParameters.voucherNo;
        }

        if (requestParameters.excludeVoucherNumbers) {
            queryParameters['excludeVoucherNumbers'] = requestParameters.excludeVoucherNumbers;
        }

        if (requestParameters.availableECertificates !== undefined) {
            queryParameters['availableECertificates'] = requestParameters.availableECertificates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecertificates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECertificatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to retrieve eCertificates which exist on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getECertificates</p>
     * Get e-certificate
     */
    async getECertificates(requestParameters: GetECertificatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECertificates> {
        const response = await this.getECertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Get Fulfillment Export Logs. <p><strong>OperationId:</strong>getFulfillmentExportLogs</p>
     * Get Fulfillment Export Logs
     */
    async getFulfillmentExportLogsRaw(requestParameters: GetFulfillmentExportLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FulfillmentExportedLogs>> {
        if (requestParameters.membershipId === null || requestParameters.membershipId === undefined) {
            throw new runtime.RequiredError('membershipId','Required parameter requestParameters.membershipId was null or undefined when calling getFulfillmentExportLogs.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/fullfillmentExportLogs`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FulfillmentExportedLogsFromJSON(jsonValue));
    }

    /**
     * Use this API to Get Fulfillment Export Logs. <p><strong>OperationId:</strong>getFulfillmentExportLogs</p>
     * Get Fulfillment Export Logs
     */
    async getFulfillmentExportLogs(requestParameters: GetFulfillmentExportLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FulfillmentExportedLogs> {
        const response = await this.getFulfillmentExportLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you don\'t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    async getGuestProfileRaw(requestParameters: GetGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Guest>> {
        if (requestParameters.guestId === null || requestParameters.guestId === undefined) {
            throw new runtime.RequiredError('guestId','Required parameter requestParameters.guestId was null or undefined when calling getGuestProfile.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guests/{guestId}`.replace(`{${"guestId"}}`, encodeURIComponent(String(requestParameters.guestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all data stored for a guest Profile, such as their address, phone number, preferences. You must already know the guests Profile ID. If you don\'t know the profile ID, first use the API getGuests to find the profile ID. <p><strong>OperationId:</strong>getGuestProfile</p>
     * Get guest profile by guest ID
     */
    async getGuestProfile(requestParameters: GetGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Guest> {
        const response = await this.getGuestProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve profiles that are linked to an existing profile in OPERA Cloud. <p><strong>OperationId:</strong>getLinkedProfiles</p>
     * Get linked profiles
     */
    async getLinkedProfilesRaw(requestParameters: GetLinkedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LinkedProfiles>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getLinkedProfiles.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        if (requestParameters.profileTypes) {
            queryParameters['profileTypes'] = requestParameters.profileTypes;
        }

        if (requestParameters.accountsReceivables !== undefined) {
            queryParameters['accountsReceivables'] = requestParameters.accountsReceivables;
        }

        if (requestParameters.corporateProfiles !== undefined) {
            queryParameters['corporateProfiles'] = requestParameters.corporateProfiles;
        }

        if (requestParameters.excludeInactive !== undefined) {
            queryParameters['excludeInactive'] = requestParameters.excludeInactive;
        }

        if (requestParameters.excludeIncompleteProfiles !== undefined) {
            queryParameters['excludeIncompleteProfiles'] = requestParameters.excludeIncompleteProfiles;
        }

        if (requestParameters.includeHasHierarchyOnly !== undefined) {
            queryParameters['includeHasHierarchyOnly'] = requestParameters.includeHasHierarchyOnly;
        }

        if (requestParameters.negotiatedRates !== undefined) {
            queryParameters['negotiatedRates'] = requestParameters.negotiatedRates;
        }

        if (requestParameters.linkedProfileAdditionalCriteriaProfileType !== undefined) {
            queryParameters['linkedProfileAdditionalCriteriaProfileType'] = requestParameters.linkedProfileAdditionalCriteriaProfileType;
        }

        if (requestParameters.linkedProfileid !== undefined) {
            queryParameters['linkedProfileid'] = requestParameters.linkedProfileid;
        }

        if (requestParameters.linkedProfileIdContext !== undefined) {
            queryParameters['linkedProfileIdContext'] = requestParameters.linkedProfileIdContext;
        }

        if (requestParameters.linkedProfileIdType !== undefined) {
            queryParameters['linkedProfileIdType'] = requestParameters.linkedProfileIdType;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.excludeNoCity !== undefined) {
            queryParameters['excludeNoCity'] = requestParameters.excludeNoCity;
        }

        if (requestParameters.cityName !== undefined) {
            queryParameters['cityName'] = requestParameters.cityName;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.streetAddress !== undefined) {
            queryParameters['streetAddress'] = requestParameters.streetAddress;
        }

        if (requestParameters.ownerCode) {
            queryParameters['ownerCode'] = requestParameters.ownerCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.aRNumber !== undefined) {
            queryParameters['aRNumber'] = requestParameters.aRNumber;
        }

        if (requestParameters.prioritiesCode) {
            queryParameters['prioritiesCode'] = requestParameters.prioritiesCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/links`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkedProfilesFromJSON(jsonValue));
    }

    /**
     * Retrieve profiles that are linked to an existing profile in OPERA Cloud. <p><strong>OperationId:</strong>getLinkedProfiles</p>
     * Get linked profiles
     */
    async getLinkedProfiles(requestParameters: GetLinkedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LinkedProfiles> {
        const response = await this.getLinkedProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve profiles that match another profile. <p><strong>OperationId:</strong>getMatchProfiles</p>
     * Get profile matches
     */
    async getMatchProfilesRaw(requestParameters: GetMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MatchedProfiles>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getMatchProfiles.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/matches`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchedProfilesFromJSON(jsonValue));
    }

    /**
     * Retrieve profiles that match another profile. <p><strong>OperationId:</strong>getMatchProfiles</p>
     * Get profile matches
     */
    async getMatchProfiles(requestParameters: GetMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MatchedProfiles> {
        const response = await this.getMatchProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of membership Tier Projection such as upgrades and downgrades. <p><strong>OperationId:</strong>getMembershipTierProjections</p>
     * Get Membership Tier Projection
     */
    async getMembershipTierProjectionsRaw(requestParameters: GetMembershipTierProjectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTierProjections>> {
        const queryParameters: any = {};

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.projectionDate !== undefined) {
            queryParameters['projectionDate'] = (requestParameters.projectionDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.projectionType !== undefined) {
            queryParameters['projectionType'] = requestParameters.projectionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTierProjections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTierProjectionsFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of membership Tier Projection such as upgrades and downgrades. <p><strong>OperationId:</strong>getMembershipTierProjections</p>
     * Get Membership Tier Projection
     */
    async getMembershipTierProjections(requestParameters: GetMembershipTierProjectionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTierProjections> {
        const response = await this.getMembershipTierProjectionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will provide you with a snapshot of the to be merged profile. In the request you will pass the survivor profile, along with the profile ID of the profile which it to be merged into the survivor profile.  The response will provide you with the combined profile data of both profiles which are being merged. <p><strong>OperationId:</strong>getMergeProfilesSnapshot</p>
     * Get merge profiles snapshot
     */
    async getMergeProfilesSnapshotRaw(requestParameters: GetMergeProfilesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergedProfilesSnapshotDetails>> {
        if (requestParameters.survivorProfileId === null || requestParameters.survivorProfileId === undefined) {
            throw new runtime.RequiredError('survivorProfileId','Required parameter requestParameters.survivorProfileId was null or undefined when calling getMergeProfilesSnapshot.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.originalId !== undefined) {
            queryParameters['originalId'] = requestParameters.originalId;
        }

        if (requestParameters.originalIdContext !== undefined) {
            queryParameters['originalIdContext'] = requestParameters.originalIdContext;
        }

        if (requestParameters.originalIdType !== undefined) {
            queryParameters['originalIdType'] = requestParameters.originalIdType;
        }

        if (requestParameters.toBeMergedId) {
            queryParameters['toBeMergedId'] = requestParameters.toBeMergedId;
        }

        if (requestParameters.toBeMergedIdContext) {
            queryParameters['toBeMergedIdContext'] = requestParameters.toBeMergedIdContext;
        }

        if (requestParameters.toBeMergedIdType) {
            queryParameters['toBeMergedIdType'] = requestParameters.toBeMergedIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{survivorProfileId}/merges/snapshot`.replace(`{${"survivorProfileId"}}`, encodeURIComponent(String(requestParameters.survivorProfileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MergedProfilesSnapshotDetailsFromJSON(jsonValue));
    }

    /**
     * This API will provide you with a snapshot of the to be merged profile. In the request you will pass the survivor profile, along with the profile ID of the profile which it to be merged into the survivor profile.  The response will provide you with the combined profile data of both profiles which are being merged. <p><strong>OperationId:</strong>getMergeProfilesSnapshot</p>
     * Get merge profiles snapshot
     */
    async getMergeProfilesSnapshot(requestParameters: GetMergeProfilesSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergedProfilesSnapshotDetails> {
        const response = await this.getMergeProfilesSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will provide you with a snapshot of the to be merged profile in staging. <p><strong>OperationId:</strong>getMergeStageProfileSnapshot</p>
     * Get merge stage profile snapshot
     */
    async getMergeStageProfileSnapshotRaw(requestParameters: GetMergeStageProfileSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MergedStageProfileSnapshot>> {
        if (requestParameters.survivorProfileId === null || requestParameters.survivorProfileId === undefined) {
            throw new runtime.RequiredError('survivorProfileId','Required parameter requestParameters.survivorProfileId was null or undefined when calling getMergeStageProfileSnapshot.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.resortProfileId !== undefined) {
            queryParameters['resortProfileId'] = requestParameters.resortProfileId;
        }

        if (requestParameters.resortProfileIdContext !== undefined) {
            queryParameters['resortProfileIdContext'] = requestParameters.resortProfileIdContext;
        }

        if (requestParameters.resortProfileIdType !== undefined) {
            queryParameters['resortProfileIdType'] = requestParameters.resortProfileIdType;
        }

        if (requestParameters.profileIdContext !== undefined) {
            queryParameters['profileIdContext'] = requestParameters.profileIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{survivorProfileId}/stageProfiles/snapshot`.replace(`{${"survivorProfileId"}}`, encodeURIComponent(String(requestParameters.survivorProfileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MergedStageProfileSnapshotFromJSON(jsonValue));
    }

    /**
     * This API will provide you with a snapshot of the to be merged profile in staging. <p><strong>OperationId:</strong>getMergeStageProfileSnapshot</p>
     * Get merge stage profile snapshot
     */
    async getMergeStageProfileSnapshot(requestParameters: GetMergeStageProfileSnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MergedStageProfileSnapshot> {
        const response = await this.getMergeStageProfileSnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve all preferences that a profile has stored on it.  Preferences are configured codes by a property, examples are usually High Floor, Non smoking room, Room with a View, soft pillow etc.  <p><strong>OperationId:</strong>getPreferenceForProfile</p>
     * Get preferences on a profile
     */
    async getPreferenceForProfileRaw(requestParameters: GetPreferenceForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Preference>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getPreferenceForProfile.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/preferences`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreferenceFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve all preferences that a profile has stored on it.  Preferences are configured codes by a property, examples are usually High Floor, Non smoking room, Room with a View, soft pillow etc.  <p><strong>OperationId:</strong>getPreferenceForProfile</p>
     * Get preferences on a profile
     */
    async getPreferenceForProfile(requestParameters: GetPreferenceForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Preference> {
        const response = await this.getPreferenceForProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    async getProfileRaw(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfile.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.logViewProfile !== undefined) {
            queryParameters['logViewProfile'] = requestParameters.logViewProfile;
        }

        if (requestParameters.showInactiveRoomOwners !== undefined) {
            queryParameters['showInactiveRoomOwners'] = requestParameters.showInactiveRoomOwners;
        }

        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.instructionParameterType) {
            queryParameters['instructionParameterType'] = requestParameters.instructionParameterType;
        }

        if (requestParameters.value) {
            queryParameters['value'] = requestParameters.value;
        }

        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve a specific profile&apos;s detail information using OPERA&apos;s profileId. You can retrieve any type of profile including guest, travel agent, company, source, group, or contact. If you do not know OPERA profileID, use getProfiles or getProfileByExtId API first to get OPERA profileId.<p><strong>OperationId:</strong>getProfile</p>
     * Get profile by ID
     */
    async getProfile(requestParameters: GetProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can find the accounts that are listed on a profile with this API. <p><strong>OperationId:</strong>getProfileAccounts</p>
     * Get profile accounts
     */
    async getProfileAccountsRaw(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileAccounts>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileAccounts.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/accounts`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileAccountsFromJSON(jsonValue));
    }

    /**
     * You can find the accounts that are listed on a profile with this API. <p><strong>OperationId:</strong>getProfileAccounts</p>
     * Get profile accounts
     */
    async getProfileAccounts(requestParameters: GetProfileAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileAccounts> {
        const response = await this.getProfileAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch the activity log for a specific profile.  This will allow you to see the changes that have occurred on this profile. <p><strong>OperationId:</strong>getProfileActivityLog</p>
     * Fetch profile activity log
     */
    async getProfileActivityLogRaw(requestParameters: GetProfileActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileActivityLog>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.activityParamsHotelId !== undefined) {
            queryParameters['activityParamsHotelId'] = requestParameters.activityParamsHotelId;
        }

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userByIDs) {
            queryParameters['userByIDs'] = requestParameters.userByIDs;
        }

        if (requestParameters.userForIDs) {
            queryParameters['userForIDs'] = requestParameters.userForIDs;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/activityLog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileActivityLogFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch the activity log for a specific profile.  This will allow you to see the changes that have occurred on this profile. <p><strong>OperationId:</strong>getProfileActivityLog</p>
     * Fetch profile activity log
     */
    async getProfileActivityLog(requestParameters: GetProfileActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileActivityLog> {
        const response = await this.getProfileActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will provide the attachments on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getProfileAttachments</p>
     * Get profile attachments
     */
    async getProfileAttachmentsRaw(requestParameters: GetProfileAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileAttachments>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileAttachments.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/attachments`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileAttachmentsFromJSON(jsonValue));
    }

    /**
     * This API will provide the attachments on a profile in OPERA Cloud. <p><strong>OperationId:</strong>getProfileAttachments</p>
     * Get profile attachments
     */
    async getProfileAttachments(requestParameters: GetProfileAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileAttachments> {
        const response = await this.getProfileAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    async getProfileByExtIdRaw(requestParameters: GetProfileByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.profileExternalId === null || requestParameters.profileExternalId === undefined) {
            throw new runtime.RequiredError('profileExternalId','Required parameter requestParameters.profileExternalId was null or undefined when calling getProfileByExtId.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getProfileByExtId.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.logViewProfile !== undefined) {
            queryParameters['logViewProfile'] = requestParameters.logViewProfile;
        }

        if (requestParameters.showInactiveRoomOwners !== undefined) {
            queryParameters['showInactiveRoomOwners'] = requestParameters.showInactiveRoomOwners;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.instructionParameterType) {
            queryParameters['instructionParameterType'] = requestParameters.instructionParameterType;
        }

        if (requestParameters.value) {
            queryParameters['value'] = requestParameters.value;
        }

        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/profiles/{profileExternalId}`.replace(`{${"profileExternalId"}}`, encodeURIComponent(String(requestParameters.profileExternalId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * When a reservation is booked via an external system, you would use this API to retrieve a reservation using the external ID in the request <p><strong>OperationId:</strong>getProfileByExtId</p>
     * Get profile by external ID
     */
    async getProfileByExtId(requestParameters: GetProfileByExtIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.getProfileByExtIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve Commission Account details from a specified profile. <p><strong>OperationId:</strong>getProfileCommissionAccount</p>
     * Get commission account on a profile
     */
    async getProfileCommissionAccountRaw(requestParameters: GetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileCommissionAccountInfo>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileCommissionAccount.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/commissionAccount`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileCommissionAccountInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve Commission Account details from a specified profile. <p><strong>OperationId:</strong>getProfileCommissionAccount</p>
     * Get commission account on a profile
     */
    async getProfileCommissionAccount(requestParameters: GetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileCommissionAccountInfo> {
        const response = await this.getProfileCommissionAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the Owners listed on a profile. <p><strong>OperationId:</strong>getProfileOwners</p>
     * Get profile owners
     */
    async getProfileOwnersRaw(requestParameters: GetProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileOwnersDetail>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileOwners.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/owners`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileOwnersDetailFromJSON(jsonValue));
    }

    /**
     * Retrieve the Owners listed on a profile. <p><strong>OperationId:</strong>getProfileOwners</p>
     * Get profile owners
     */
    async getProfileOwners(requestParameters: GetProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileOwnersDetail> {
        const response = await this.getProfileOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    async getProfileRelationshipsRaw(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRelationships>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getProfileRelationships.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.relationshipPrimaryProfile !== undefined) {
            queryParameters['relationshipPrimaryProfile'] = requestParameters.relationshipPrimaryProfile;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/relationships`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRelationshipsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getProfileRelationships</p>
     * FetchProfileRelationships method provides the ability to retrieve a profile relationships for a profile based on the unique internal profile ID specified.
     */
    async getProfileRelationships(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRelationships> {
        const response = await this.getProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    async getProfilesRaw(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileSummaries>> {
        const queryParameters: any = {};

        if (requestParameters.excludeInactive !== undefined) {
            queryParameters['excludeInactive'] = requestParameters.excludeInactive;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.includeHasHierarchyOnly !== undefined) {
            queryParameters['includeHasHierarchyOnly'] = requestParameters.includeHasHierarchyOnly;
        }

        if (requestParameters.includePrimaryOwnersOnly !== undefined) {
            queryParameters['includePrimaryOwnersOnly'] = requestParameters.includePrimaryOwnersOnly;
        }

        if (requestParameters.includePurgeProfiles !== undefined) {
            queryParameters['includePurgeProfiles'] = requestParameters.includePurgeProfiles;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }

        if (requestParameters.searchString !== undefined) {
            queryParameters['searchString'] = requestParameters.searchString;
        }

        if (requestParameters.includeAnonymized !== undefined) {
            queryParameters['includeAnonymized'] = requestParameters.includeAnonymized;
        }

        if (requestParameters.profileType) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }

        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }

        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }

        if (requestParameters.corporateIds) {
            queryParameters['corporateIds'] = requestParameters.corporateIds;
        }

        if (requestParameters.profileName !== undefined) {
            queryParameters['profileName'] = requestParameters.profileName;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.incognitoName !== undefined) {
            queryParameters['incognitoName'] = requestParameters.incognitoName;
        }

        if (requestParameters.incognitoGivenName !== undefined) {
            queryParameters['incognitoGivenName'] = requestParameters.incognitoGivenName;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.streetAddress !== undefined) {
            queryParameters['streetAddress'] = requestParameters.streetAddress;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.membership !== undefined) {
            queryParameters['membership'] = requestParameters.membership;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.ownerCodes) {
            queryParameters['ownerCodes'] = requestParameters.ownerCodes;
        }

        if (requestParameters.membershipLevel !== undefined) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.aRNumber !== undefined) {
            queryParameters['aRNumber'] = requestParameters.aRNumber;
        }

        if (requestParameters.taxID !== undefined) {
            queryParameters['taxID'] = requestParameters.taxID;
        }

        if (requestParameters.businessSegment) {
            queryParameters['businessSegment'] = requestParameters.businessSegment;
        }

        if (requestParameters.accountsReceivables !== undefined) {
            queryParameters['accountsReceivables'] = requestParameters.accountsReceivables;
        }

        if (requestParameters.corporateProfiles !== undefined) {
            queryParameters['corporateProfiles'] = requestParameters.corporateProfiles;
        }

        if (requestParameters.excludeIncompleteProfiles !== undefined) {
            queryParameters['excludeIncompleteProfiles'] = requestParameters.excludeIncompleteProfiles;
        }

        if (requestParameters.negotiatedRates !== undefined) {
            queryParameters['negotiatedRates'] = requestParameters.negotiatedRates;
        }

        if (requestParameters.relatedProfileExcludeInactive !== undefined) {
            queryParameters['relatedProfileExcludeInactive'] = requestParameters.relatedProfileExcludeInactive;
        }

        if (requestParameters.realtedProfileIncludeHasHierarchyOnly !== undefined) {
            queryParameters['realtedProfileIncludeHasHierarchyOnly'] = requestParameters.realtedProfileIncludeHasHierarchyOnly;
        }

        if (requestParameters.relatedProfileNegotiatedRates !== undefined) {
            queryParameters['relatedProfileNegotiatedRates'] = requestParameters.relatedProfileNegotiatedRates;
        }

        if (requestParameters.relatedProfileType !== undefined) {
            queryParameters['relatedProfileType'] = requestParameters.relatedProfileType;
        }

        if (requestParameters.relatedProfileName !== undefined) {
            queryParameters['relatedProfileName'] = requestParameters.relatedProfileName;
        }

        if (requestParameters.protectedProfiles !== undefined) {
            queryParameters['protectedProfiles'] = requestParameters.protectedProfiles;
        }

        if (requestParameters.excludedProfilesId) {
            queryParameters['excludedProfilesId'] = requestParameters.excludedProfilesId;
        }

        if (requestParameters.idExtension) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.excludedProfilesIdContext) {
            queryParameters['excludedProfilesIdContext'] = requestParameters.excludedProfilesIdContext;
        }

        if (requestParameters.excludedProfilesIdType) {
            queryParameters['excludedProfilesIdType'] = requestParameters.excludedProfilesIdType;
        }

        if (requestParameters.identificationNo !== undefined) {
            queryParameters['identificationNo'] = requestParameters.identificationNo;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.allowedAction) {
            queryParameters['allowedAction'] = requestParameters.allowedAction;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        if (requestParameters.predefinedFilterId !== undefined) {
            queryParameters['predefinedFilterId'] = requestParameters.predefinedFilterId;
        }

        if (requestParameters.predefinedFilterCode !== undefined) {
            queryParameters['predefinedFilterCode'] = requestParameters.predefinedFilterCode;
        }

        if (requestParameters.prioritieCodes) {
            queryParameters['prioritieCodes'] = requestParameters.prioritieCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileSummariesFromJSON(jsonValue));
    }

    /**
     * Use this API when you want to search for a profile as part of a booking process or to manage a profile data. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if a profile for Mr David Smith exists - you can search by various criteria, such as first name, last name, email.  The response will include a list of any profiles that exist for Mr David Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileId in the request. Maximum response data limit is 1000 records, so use more query parameters to narrow your results. This API is not designed to support sync between two systems or initial upload of data.<p><strong>OperationId:</strong>getProfiles</p>
     * Search for profile(s)
     */
    async getProfiles(requestParameters: GetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileSummaries> {
        const response = await this.getProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you want to search for a profile. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if  a profile for Mr David Smith exists - you can search by various criteria, such as first, last name, email.  The response will include a list of any profiles that exist for Mr Davis Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileID in the request. <p><strong>OperationId:</strong>getProfilesByIds</p>
     * Search for profile(s)
     */
    async getProfilesByIdsRaw(requestParameters: GetProfilesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDetails>> {
        const queryParameters: any = {};

        if (requestParameters.profileIds) {
            queryParameters['profileIds'] = requestParameters.profileIds;
        }

        if (requestParameters.corporateIds) {
            queryParameters['corporateIds'] = requestParameters.corporateIds;
        }

        if (requestParameters.externalReferenceIds) {
            queryParameters['externalReferenceIds'] = requestParameters.externalReferenceIds;
        }

        if (requestParameters.externalSystemCodes) {
            queryParameters['externalSystemCodes'] = requestParameters.externalSystemCodes;
        }

        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.instructionParameterType) {
            queryParameters['instructionParameterType'] = requestParameters.instructionParameterType;
        }

        if (requestParameters.instructionParameterValue) {
            queryParameters['instructionParameterValue'] = requestParameters.instructionParameterValue;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profilesByIds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API when you want to search for a profile. The response will include a list of profiles that exist in OPERA, based on your search criteria.  For example, you want to see if  a profile for Mr David Smith exists - you can search by various criteria, such as first, last name, email.  The response will include a list of any profiles that exist for Mr Davis Smith.  If a profile matches the criteria, and you want to get more details of that profile, proceed to use getProfile with the profileID in the request. <p><strong>OperationId:</strong>getProfilesByIds</p>
     * Search for profile(s)
     */
    async getProfilesByIds(requestParameters: GetProfilesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDetails> {
        const response = await this.getProfilesByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch the profiles that have recently been accessed by an application user. <p><strong>OperationId:</strong>getRecentlyAccessedProfiles</p>
     * Fetch recently accessed profiles
     */
    async getRecentlyAccessedProfilesRaw(requestParameters: GetRecentlyAccessedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedProfiles>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/recentlyAccessedProfiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecentlyAccessedProfilesFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch the profiles that have recently been accessed by an application user. <p><strong>OperationId:</strong>getRecentlyAccessedProfiles</p>
     * Fetch recently accessed profiles
     */
    async getRecentlyAccessedProfiles(requestParameters: GetRecentlyAccessedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedProfiles> {
        const response = await this.getRecentlyAccessedProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile.  This API will get a specific profile that has been staged. <p><strong>OperationId:</strong>getStagedProfile</p>
     * Get a staged profile
     */
    async getStagedProfileRaw(requestParameters: GetStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StagedProfileDetails>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStagedProfile.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stagedProfile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StagedProfileDetailsFromJSON(jsonValue));
    }

    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile.  This API will get a specific profile that has been staged. <p><strong>OperationId:</strong>getStagedProfile</p>
     * Get a staged profile
     */
    async getStagedProfile(requestParameters: GetStagedProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StagedProfileDetails> {
        const response = await this.getStagedProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile. <p><strong>OperationId:</strong>getStagedProfiles</p>
     * Get staged profiles
     */
    async getStagedProfilesRaw(requestParameters: GetStagedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StagedProfiles>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.region !== undefined) {
            queryParameters['region'] = requestParameters.region;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.importDate !== undefined) {
            queryParameters['importDate'] = (requestParameters.importDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.stageStatus !== undefined) {
            queryParameters['stageStatus'] = requestParameters.stageStatus;
        }

        if (requestParameters.applyTo !== undefined) {
            queryParameters['applyTo'] = requestParameters.applyTo;
        }

        if (requestParameters.membershipCodes) {
            queryParameters['membershipCodes'] = requestParameters.membershipCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/stagedProfiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StagedProfilesFromJSON(jsonValue));
    }

    /**
     * The system suspends / stages a profile with a point value between the upper and lower thresholds. When a profile is staged, you must review the suspended profile and determine if it should be merged with an internal profile or added as a new profile. <p><strong>OperationId:</strong>getStagedProfiles</p>
     * Get staged profiles
     */
    async getStagedProfiles(requestParameters: GetStagedProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StagedProfiles> {
        const response = await this.getStagedProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    async getStayHistoryRaw(requestParameters: GetStayHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileStayHistory>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getStayHistory.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.includePurgeProfiles !== undefined) {
            queryParameters['includePurgeProfiles'] = requestParameters.includePurgeProfiles;
        }

        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }

        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/stayHistory`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileStayHistoryFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getStayHistory</p>
     * FetchStayHistory method provides stay history and future reservations of a profile based on the unique internal ID specified.
     */
    async getStayHistory(requestParameters: GetStayHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileStayHistory> {
        const response = await this.getStayHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch Suspended Profile Addresses <p><strong>OperationId:</strong>getSuspendedAddresses</p>
     * Fetch Suspended Profile Addresses
     */
    async getSuspendedAddressesRaw(requestParameters: GetSuspendedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuspendedAddresses>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.matchCode !== undefined) {
            queryParameters['matchCode'] = requestParameters.matchCode;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.validateDate !== undefined) {
            queryParameters['validateDate'] = (requestParameters.validateDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/suspendedAddresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuspendedAddressesFromJSON(jsonValue));
    }

    /**
     * Fetch Suspended Profile Addresses <p><strong>OperationId:</strong>getSuspendedAddresses</p>
     * Fetch Suspended Profile Addresses
     */
    async getSuspendedAddresses(requestParameters: GetSuspendedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuspendedAddresses> {
        const response = await this.getSuspendedAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the suspended profile error summary details <p><strong>OperationId:</strong>getSuspendedProfileErrorSummary</p>
     * Get suspended profile error summary details
     */
    async getSuspendedProfileErrorSummaryRaw(requestParameters: GetSuspendedProfileErrorSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuspendedProfileErrorSummaryInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/suspendedProfileErrorSummary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuspendedProfileErrorSummaryInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve the suspended profile error summary details <p><strong>OperationId:</strong>getSuspendedProfileErrorSummary</p>
     * Get suspended profile error summary details
     */
    async getSuspendedProfileErrorSummary(requestParameters: GetSuspendedProfileErrorSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuspendedProfileErrorSummaryInfo> {
        const response = await this.getSuspendedProfileErrorSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    async mergeProfilesRaw(requestParameters: MergeProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.survivorProfileId === null || requestParameters.survivorProfileId === undefined) {
            throw new runtime.RequiredError('survivorProfileId','Required parameter requestParameters.survivorProfileId was null or undefined when calling mergeProfiles.');
        }
        
        if (requestParameters.profileToBeMerged === null || requestParameters.profileToBeMerged === undefined) {
            throw new runtime.RequiredError('profileToBeMerged','Required parameter requestParameters.profileToBeMerged was null or undefined when calling mergeProfiles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{survivorProfileId}/merges`.replace(`{${"survivorProfileId"}}`, encodeURIComponent(String(requestParameters.survivorProfileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergeProfilesRequestToJSON(requestParameters.profileToBeMerged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * When you need to merge 2 guest profiles into 1 profile, use this API. <p><strong>OperationId:</strong>mergeProfiles</p>
     * Merge two profiles by ID
     */
    async mergeProfiles(requestParameters: MergeProfilesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.mergeProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use postAccountForecast to create a new account forecast for a hotel.  <p><strong>OperationId:</strong>postAccountForecast</p>
     * Create account forecast in a hotel
     */
    async postAccountForecastRaw(requestParameters: PostAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postAccountForecast.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling postAccountForecast.');
        }
        
        if (requestParameters.forecastsInformation === null || requestParameters.forecastsInformation === undefined) {
            throw new runtime.RequiredError('forecastsInformation','Required parameter requestParameters.forecastsInformation was null or undefined when calling postAccountForecast.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/hotels/{hotelId}/forecasts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForecastsInformationToJSON(requestParameters.forecastsInformation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use postAccountForecast to create a new account forecast for a hotel.  <p><strong>OperationId:</strong>postAccountForecast</p>
     * Create account forecast in a hotel
     */
    async postAccountForecast(requestParameters: PostAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAccountForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    async postCompanyProfileRaw(requestParameters: PostCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.company === null || requestParameters.company === undefined) {
            throw new runtime.RequiredError('company','Required parameter requestParameters.company was null or undefined when calling postCompanyProfile.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/companies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postCompanyProfile</p>
     * This API facilitates creation of a company/agent/group/source profile in OPERA.
     */
    async postCompanyProfile(requestParameters: PostCompanyProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompanyProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create a new eCertificates onto a profile in OPERA Cloud. <p><strong>OperationId:</strong>postECertificate</p>
     * Create e-certificate
     */
    async postECertificateRaw(requestParameters: PostECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.eCertificateGeneration === null || requestParameters.eCertificateGeneration === undefined) {
            throw new runtime.RequiredError('eCertificateGeneration','Required parameter requestParameters.eCertificateGeneration was null or undefined when calling postECertificate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecertificates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECertificateGenerationToJSON(requestParameters.eCertificateGeneration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create a new eCertificates onto a profile in OPERA Cloud. <p><strong>OperationId:</strong>postECertificate</p>
     * Create e-certificate
     */
    async postECertificate(requestParameters: PostECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postECertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    async postGuestProfileRaw(requestParameters: PostGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guest === null || requestParameters.guest === undefined) {
            throw new runtime.RequiredError('guest','Required parameter requestParameters.guest was null or undefined when calling postGuestProfile.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuestToJSON(requestParameters.guest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * When a profile doesn\'t already exist for a guest, use this to create a new profile.  The response will provide the newly created profile\'s OPERA ID. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile. <p><strong>OperationId:</strong>postGuestProfile</p>
     * Create a guest, contact or employee profile in OPERA
     */
    async postGuestProfile(requestParameters: PostGuestProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A guest might be a member of your hotel loyalty program and/or a member of multiple airline frequent flier programs. Use this API to add membership details onto a guests profile. <p><strong>OperationId:</strong>postMembership</p>
     * Create membership on a profile
     */
    async postMembershipRaw(requestParameters: PostMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling postMembership.');
        }
        
        if (requestParameters.membership === null || requestParameters.membership === undefined) {
            throw new runtime.RequiredError('membership','Required parameter requestParameters.membership was null or undefined when calling postMembership.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/memberships`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipToJSON(requestParameters.membership),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * A guest might be a member of your hotel loyalty program and/or a member of multiple airline frequent flier programs. Use this API to add membership details onto a guests profile. <p><strong>OperationId:</strong>postMembership</p>
     * Create membership on a profile
     */
    async postMembership(requestParameters: PostMembershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will generate a new membership number. <p><strong>OperationId:</strong>postMembershipNumber</p>
     * Generate membership number
     */
    async postMembershipNumberRaw(requestParameters: PostMembershipNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipType === null || requestParameters.membershipType === undefined) {
            throw new runtime.RequiredError('membershipType','Required parameter requestParameters.membershipType was null or undefined when calling postMembershipNumber.');
        }
        
        if (requestParameters.membershipNumber === null || requestParameters.membershipNumber === undefined) {
            throw new runtime.RequiredError('membershipNumber','Required parameter requestParameters.membershipNumber was null or undefined when calling postMembershipNumber.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipType}/membershipNumbers`.replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipNumberToJSON(requestParameters.membershipNumber),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will generate a new membership number. <p><strong>OperationId:</strong>postMembershipNumber</p>
     * Generate membership number
     */
    async postMembershipNumber(requestParameters: PostMembershipNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can add new preferences to a profile to personalize or enhance your guest services.  You will need to know the profile ID, and the properties pre-configured preference codes. <p><strong>OperationId:</strong>postPreference</p>
     * Add preferences to a profile
     */
    async postPreferenceRaw(requestParameters: PostPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling postPreference.');
        }
        
        if (requestParameters.preference === null || requestParameters.preference === undefined) {
            throw new runtime.RequiredError('preference','Required parameter requestParameters.preference was null or undefined when calling postPreference.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/preferences`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreferenceToJSON(requestParameters.preference),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can add new preferences to a profile to personalize or enhance your guest services.  You will need to know the profile ID, and the properties pre-configured preference codes. <p><strong>OperationId:</strong>postPreference</p>
     * Add preferences to a profile
     */
    async postPreference(requestParameters: PostPreferenceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPreferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    async postProfileRaw(requestParameters: PostProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profile === null || requestParameters.profile === undefined) {
            throw new runtime.RequiredError('profile','Required parameter requestParameters.profile was null or undefined when calling postProfile.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostProfileRequestToJSON(requestParameters.profile),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * When a profile doesn&apos;t already exist in OPERA, use this to create a new profile. The response will provide the newly created profile&apos;s OPERA ID in the Location header. There are many fields in postProfile defined by ListOfValues; ensure you have reviewed ListOfValues APIs in order successfully to use postProfile.<p><strong>OperationId:</strong>postProfile</p>
     * Create a profile
     */
    async postProfile(requestParameters: PostProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a commission account on a profile.  You can only add commission accounts onto a Travel Agent or Source Profile type in OPERA Cloud. <p><strong>OperationId:</strong>postProfileCommissionAccount</p>
     * Add a commission account on a profile
     */
    async postProfileCommissionAccountRaw(requestParameters: PostProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling postProfileCommissionAccount.');
        }
        
        if (requestParameters.profileCommissionAccount === null || requestParameters.profileCommissionAccount === undefined) {
            throw new runtime.RequiredError('profileCommissionAccount','Required parameter requestParameters.profileCommissionAccount was null or undefined when calling postProfileCommissionAccount.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/commissionAccount`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCommissionAccountToJSON(requestParameters.profileCommissionAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Add a commission account on a profile.  You can only add commission accounts onto a Travel Agent or Source Profile type in OPERA Cloud. <p><strong>OperationId:</strong>postProfileCommissionAccount</p>
     * Add a commission account on a profile
     */
    async postProfileCommissionAccount(requestParameters: PostProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileCommissionAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Assign an Owner to a profile. <p><strong>OperationId:</strong>postProfileOwners</p>
     * Assign profile owners
     */
    async postProfileOwnersRaw(requestParameters: PostProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling postProfileOwners.');
        }
        
        if (requestParameters.profileOwners === null || requestParameters.profileOwners === undefined) {
            throw new runtime.RequiredError('profileOwners','Required parameter requestParameters.profileOwners was null or undefined when calling postProfileOwners.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/owners`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileOwnersToJSON(requestParameters.profileOwners),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Assign an Owner to a profile. <p><strong>OperationId:</strong>postProfileOwners</p>
     * Assign profile owners
     */
    async postProfileOwners(requestParameters: PostProfileOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async postProfileRelationshipRaw(requestParameters: PostProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.targetProfileId === null || requestParameters.targetProfileId === undefined) {
            throw new runtime.RequiredError('targetProfileId','Required parameter requestParameters.targetProfileId was null or undefined when calling postProfileRelationship.');
        }
        
        if (requestParameters.sourceProfileId === null || requestParameters.sourceProfileId === undefined) {
            throw new runtime.RequiredError('sourceProfileId','Required parameter requestParameters.sourceProfileId was null or undefined when calling postProfileRelationship.');
        }
        
        if (requestParameters.profileRelationship === null || requestParameters.profileRelationship === undefined) {
            throw new runtime.RequiredError('profileRelationship','Required parameter requestParameters.profileRelationship was null or undefined when calling postProfileRelationship.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{sourceProfileId}/relationships/{targetProfileId}`.replace(`{${"targetProfileId"}}`, encodeURIComponent(String(requestParameters.targetProfileId))).replace(`{${"sourceProfileId"}}`, encodeURIComponent(String(requestParameters.sourceProfileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostProfileRelationshipRequestToJSON(requestParameters.profileRelationship),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postProfileRelationship</p>
     * CreateProfileRelationship method provides the ability to create profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async postProfileRelationship(requestParameters: PostProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>putAccountForecast</p>
     * Update account forecast in a hotel by period code
     */
    async putAccountForecastRaw(requestParameters: PutAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeAccountForecastsRS>> {
        if (requestParameters.periodCode === null || requestParameters.periodCode === undefined) {
            throw new runtime.RequiredError('periodCode','Required parameter requestParameters.periodCode was null or undefined when calling putAccountForecast.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putAccountForecast.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling putAccountForecast.');
        }
        
        if (requestParameters.forecastsInformation === null || requestParameters.forecastsInformation === undefined) {
            throw new runtime.RequiredError('forecastsInformation','Required parameter requestParameters.forecastsInformation was null or undefined when calling putAccountForecast.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/hotels/{hotelId}/forecasts/periodCodes/{periodCode}`.replace(`{${"periodCode"}}`, encodeURIComponent(String(requestParameters.periodCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ForecastsInformationToJSON(requestParameters.forecastsInformation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeAccountForecastsRSFromJSON(jsonValue));
    }

    /**
     * Use this to update an existing account Forecast for a hotel.  You must know the period code for this API. <p><strong>OperationId:</strong>putAccountForecast</p>
     * Update account forecast in a hotel by period code
     */
    async putAccountForecast(requestParameters: PutAccountForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeAccountForecastsRS> {
        const response = await this.putAccountForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    async putProfileRaw(requestParameters: PutProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling putProfile.');
        }
        
        if (requestParameters.profile === null || requestParameters.profile === undefined) {
            throw new runtime.RequiredError('profile','Required parameter requestParameters.profile was null or undefined when calling putProfile.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutProfileRequestToJSON(requestParameters.profile),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * Use this to update a guests details on their profile.  You will need to know the OPERA Profile ID to use this API, and you will also need to know the List of Values for profile fields, such as AddressType, PhoneType, Title.  <p><strong>OperationId:</strong>putProfile</p>
     * Update a profile by ID
     */
    async putProfile(requestParameters: PutProfileOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.putProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    async putProfileRelationshipRaw(requestParameters: PutProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.targetProfileId === null || requestParameters.targetProfileId === undefined) {
            throw new runtime.RequiredError('targetProfileId','Required parameter requestParameters.targetProfileId was null or undefined when calling putProfileRelationship.');
        }
        
        if (requestParameters.sourceProfileId === null || requestParameters.sourceProfileId === undefined) {
            throw new runtime.RequiredError('sourceProfileId','Required parameter requestParameters.sourceProfileId was null or undefined when calling putProfileRelationship.');
        }
        
        if (requestParameters.profileRelationshipToBeChanged === null || requestParameters.profileRelationshipToBeChanged === undefined) {
            throw new runtime.RequiredError('profileRelationshipToBeChanged','Required parameter requestParameters.profileRelationshipToBeChanged was null or undefined when calling putProfileRelationship.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{sourceProfileId}/relationships/{targetProfileId}`.replace(`{${"targetProfileId"}}`, encodeURIComponent(String(requestParameters.targetProfileId))).replace(`{${"sourceProfileId"}}`, encodeURIComponent(String(requestParameters.sourceProfileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutProfileRelationshipRequestToJSON(requestParameters.profileRelationshipToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putProfileRelationship</p>
     * ChangeProfileRelationship method provides the ability to update(delete and add) profile relationship based on the request criteria of SourceProfileID , TargetProfileID, To Be ChangedProfileID and SourceProfileRelationType specified.
     */
    async putProfileRelationship(requestParameters: PutProfileRelationshipOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putProfileRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async removeProfileRelationshipRaw(requestParameters: RemoveProfileRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.targetProfileId === null || requestParameters.targetProfileId === undefined) {
            throw new runtime.RequiredError('targetProfileId','Required parameter requestParameters.targetProfileId was null or undefined when calling removeProfileRelationship.');
        }
        
        if (requestParameters.sourceProfileId === null || requestParameters.sourceProfileId === undefined) {
            throw new runtime.RequiredError('sourceProfileId','Required parameter requestParameters.sourceProfileId was null or undefined when calling removeProfileRelationship.');
        }
        
        if (requestParameters.sourceRelation === null || requestParameters.sourceRelation === undefined) {
            throw new runtime.RequiredError('sourceRelation','Required parameter requestParameters.sourceRelation was null or undefined when calling removeProfileRelationship.');
        }
        
        if (requestParameters.targetRelation === null || requestParameters.targetRelation === undefined) {
            throw new runtime.RequiredError('targetRelation','Required parameter requestParameters.targetRelation was null or undefined when calling removeProfileRelationship.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.sourceRelation !== undefined) {
            queryParameters['sourceRelation'] = requestParameters.sourceRelation;
        }

        if (requestParameters.targetRelation !== undefined) {
            queryParameters['targetRelation'] = requestParameters.targetRelation;
        }

        if (requestParameters.primary !== undefined) {
            queryParameters['primary'] = requestParameters.primary;
        }

        if (requestParameters.sourceRelationDescription !== undefined) {
            queryParameters['sourceRelationDescription'] = requestParameters.sourceRelationDescription;
        }

        if (requestParameters.targetRelationDescription !== undefined) {
            queryParameters['targetRelationDescription'] = requestParameters.targetRelationDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{sourceProfileId}/relationships/{targetProfileId}`.replace(`{${"targetProfileId"}}`, encodeURIComponent(String(requestParameters.targetProfileId))).replace(`{${"sourceProfileId"}}`, encodeURIComponent(String(requestParameters.sourceProfileId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>removeProfileRelationship</p>
     * DeleteProfileRelationship method provides the ability to delete profile relationship based on the request criteria of SourceProfileID,TargetProfileID and SourceRelationType specified.
     */
    async removeProfileRelationship(requestParameters: RemoveProfileRelationshipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeProfileRelationshipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Apply a commission account to an existing profile. You can add commission accounts to Travel Agent profile types. <p><strong>OperationId:</strong>setProfileCommissionAccount</p>
     * Set profile commission account
     */
    async setProfileCommissionAccountRaw(requestParameters: SetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling setProfileCommissionAccount.');
        }
        
        if (requestParameters.profileCommissionAccount === null || requestParameters.profileCommissionAccount === undefined) {
            throw new runtime.RequiredError('profileCommissionAccount','Required parameter requestParameters.profileCommissionAccount was null or undefined when calling setProfileCommissionAccount.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/commissionAccount`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileCommissionAccountToJSON(requestParameters.profileCommissionAccount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Apply a commission account to an existing profile. You can add commission accounts to Travel Agent profile types. <p><strong>OperationId:</strong>setProfileCommissionAccount</p>
     * Set profile commission account
     */
    async setProfileCommissionAccount(requestParameters: SetProfileCommissionAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setProfileCommissionAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    async storeEmailRaw(requestParameters: StoreEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling storeEmail.');
        }
        
        if (requestParameters.emailMessageType === null || requestParameters.emailMessageType === undefined) {
            throw new runtime.RequiredError('emailMessageType','Required parameter requestParameters.emailMessageType was null or undefined when calling storeEmail.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/emails`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreEmailRequestToJSON(requestParameters.emailMessageType),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Email in OPERA.  You would need to know the Profile Id such as Contact or Account. <p><strong>OperationId:</strong>storeEmail</p>
     * Create an Email.
     */
    async storeEmail(requestParameters: StoreEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.storeEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronize profile subscriptions <p><strong>OperationId:</strong>synchronizeProfileSubscriptions</p>
     * Synchronize profile subscriptions
     */
    async synchronizeProfileSubscriptionsRaw(requestParameters: SynchronizeProfileSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileSubscriptionsToSynchronize === null || requestParameters.profileSubscriptionsToSynchronize === undefined) {
            throw new runtime.RequiredError('profileSubscriptionsToSynchronize','Required parameter requestParameters.profileSubscriptionsToSynchronize was null or undefined when calling synchronizeProfileSubscriptions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/synchronizeProfileSubscriptions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileSubscriptionsToSynchronizeToJSON(requestParameters.profileSubscriptionsToSynchronize),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Synchronize profile subscriptions <p><strong>OperationId:</strong>synchronizeProfileSubscriptions</p>
     * Synchronize profile subscriptions
     */
    async synchronizeProfileSubscriptions(requestParameters: SynchronizeProfileSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.synchronizeProfileSubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate forget profiles. <p><strong>OperationId:</strong>validateForgetProfiles</p>
     * Validate forget profiles
     */
    async validateForgetProfilesRaw(requestParameters: ValidateForgetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatedForgetProfiles>> {
        if (requestParameters.forgetProfilesCriteria === null || requestParameters.forgetProfilesCriteria === undefined) {
            throw new runtime.RequiredError('forgetProfilesCriteria','Required parameter requestParameters.forgetProfilesCriteria was null or undefined when calling validateForgetProfiles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/validateForgetProfiles`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ForgetProfilesCriteriaToJSON(requestParameters.forgetProfilesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatedForgetProfilesFromJSON(jsonValue));
    }

    /**
     * Validate forget profiles. <p><strong>OperationId:</strong>validateForgetProfiles</p>
     * Validate forget profiles
     */
    async validateForgetProfiles(requestParameters: ValidateForgetProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatedForgetProfiles> {
        const response = await this.validateForgetProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate if a profile has future and past bookings on a specific profile. <p><strong>OperationId:</strong>validateReservationsForProfile</p>
     * Check future past bookings
     */
    async validateReservationsForProfileRaw(requestParameters: ValidateReservationsForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FuturePastBookings>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling validateReservationsForProfile.');
        }
        
        if (requestParameters.futurePastBookingsCriteria === null || requestParameters.futurePastBookingsCriteria === undefined) {
            throw new runtime.RequiredError('futurePastBookingsCriteria','Required parameter requestParameters.futurePastBookingsCriteria was null or undefined when calling validateReservationsForProfile.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/reservations/action/validate`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FuturePastBookingsCriteriaToJSON(requestParameters.futurePastBookingsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FuturePastBookingsFromJSON(jsonValue));
    }

    /**
     * Validate if a profile has future and past bookings on a specific profile. <p><strong>OperationId:</strong>validateReservationsForProfile</p>
     * Check future past bookings
     */
    async validateReservationsForProfile(requestParameters: ValidateReservationsForProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FuturePastBookings> {
        const response = await this.validateReservationsForProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to verify an ng E-Certificate Number. <p><strong>OperationId:</strong>verifyECertificate</p>
     * Verify E-Certificate Number
     */
    async verifyECertificateRaw(requestParameters: VerifyECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VerifiedECertificate>> {
        if (requestParameters.certificateId === null || requestParameters.certificateId === undefined) {
            throw new runtime.RequiredError('certificateId','Required parameter requestParameters.certificateId was null or undefined when calling verifyECertificate.');
        }
        
        if (requestParameters.eCertificateToVerify === null || requestParameters.eCertificateToVerify === undefined) {
            throw new runtime.RequiredError('eCertificateToVerify','Required parameter requestParameters.eCertificateToVerify was null or undefined when calling verifyECertificate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecertificates/{certificateId}/action/validate`.replace(`{${"certificateId"}}`, encodeURIComponent(String(requestParameters.certificateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ECertificateToVerifyToJSON(requestParameters.eCertificateToVerify),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifiedECertificateFromJSON(jsonValue));
    }

    /**
     * Use this API to verify an ng E-Certificate Number. <p><strong>OperationId:</strong>verifyECertificate</p>
     * Verify E-Certificate Number
     */
    async verifyECertificate(requestParameters: VerifyECertificateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VerifiedECertificate> {
        const response = await this.verifyECertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CheckProfileTypeCheckProfileInstructionEnum = {
    HasWebAccounts: 'HasWebAccounts'
} as const;
export type CheckProfileTypeCheckProfileInstructionEnum = typeof CheckProfileTypeCheckProfileInstructionEnum[keyof typeof CheckProfileTypeCheckProfileInstructionEnum];
/**
 * @export
 */
export const GetCompanyProfileFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship'
} as const;
export type GetCompanyProfileFetchInstructionsEnum = typeof GetCompanyProfileFetchInstructionsEnum[keyof typeof GetCompanyProfileFetchInstructionsEnum];
/**
 * @export
 */
export const GetECertificatesStatusEnum = {
    Cancelled: 'Cancelled',
    Consumed: 'Consumed',
    Deleted: 'Deleted',
    Expired: 'Expired',
    Issued: 'Issued',
    Reserved: 'Reserved'
} as const;
export type GetECertificatesStatusEnum = typeof GetECertificatesStatusEnum[keyof typeof GetECertificatesStatusEnum];
/**
 * @export
 */
export const GetGuestProfileFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship',
    WebUserAccount: 'WebUserAccount'
} as const;
export type GetGuestProfileFetchInstructionsEnum = typeof GetGuestProfileFetchInstructionsEnum[keyof typeof GetGuestProfileFetchInstructionsEnum];
/**
 * @export
 */
export const GetLinkedProfilesProfileTypesEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
} as const;
export type GetLinkedProfilesProfileTypesEnum = typeof GetLinkedProfilesProfileTypesEnum[keyof typeof GetLinkedProfilesProfileTypesEnum];
/**
 * @export
 */
export const GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
} as const;
export type GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum = typeof GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum[keyof typeof GetLinkedProfilesLinkedProfileAdditionalCriteriaProfileTypeEnum];
/**
 * @export
 */
export const GetMembershipTierProjectionsProjectionTypeEnum = {
    Upgrade: 'Upgrade',
    Downgrade: 'Downgrade',
    UpgradeAndDowngrade: 'UpgradeAndDowngrade'
} as const;
export type GetMembershipTierProjectionsProjectionTypeEnum = typeof GetMembershipTierProjectionsProjectionTypeEnum[keyof typeof GetMembershipTierProjectionsProjectionTypeEnum];
/**
 * @export
 */
export const GetProfileFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship',
    Subscriptions: 'Subscriptions',
    DeliveryMethods: 'DeliveryMethods',
    GdsNegotiatedRate: 'GdsNegotiatedRate',
    NegotiatedRate: 'NegotiatedRate',
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation',
    WebUserAccount: 'WebUserAccount'
} as const;
export type GetProfileFetchInstructionsEnum = typeof GetProfileFetchInstructionsEnum[keyof typeof GetProfileFetchInstructionsEnum];
/**
 * @export
 */
export const GetProfileInstructionParameterTypeEnum = {
    NegotiatedRateShowInactive: 'NegotiatedRateShowInactive',
    NegotiatedRateResort: 'NegotiatedRateResort',
    NegotiatedRateMaxFetchCount: 'NegotiatedRateMaxFetchCount',
    NegotiatedRateCode: 'NegotiatedRateCode',
    GdsNegotiatedRateShowInactive: 'GdsNegotiatedRateShowInactive',
    PreferencesShowInactive: 'PreferencesShowInactive',
    ResortForRoutingInstructions: 'ResortForRoutingInstructions',
    RelationshipPrimaryProfile: 'RelationshipPrimaryProfile',
    AddressPrimaryOnly: 'AddressPrimaryOnly',
    CommunicationPrimaryOnly: 'CommunicationPrimaryOnly',
    DeliveryMethodsHotelCode: 'DeliveryMethodsHotelCode'
} as const;
export type GetProfileInstructionParameterTypeEnum = typeof GetProfileInstructionParameterTypeEnum[keyof typeof GetProfileInstructionParameterTypeEnum];
/**
 * @export
 */
export const GetProfileAllowedActionEnum = {
    NameChange: 'NameChange',
    TaxIdChange: 'TaxIDChange',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership'
} as const;
export type GetProfileAllowedActionEnum = typeof GetProfileAllowedActionEnum[keyof typeof GetProfileAllowedActionEnum];
/**
 * @export
 */
export const GetProfileActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
} as const;
export type GetProfileActivityLogModuleEnum = typeof GetProfileActivityLogModuleEnum[keyof typeof GetProfileActivityLogModuleEnum];
/**
 * @export
 */
export const GetProfileByExtIdFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Correspondence: 'Correspondence',
    Profile: 'Profile',
    Indicators: 'Indicators',
    SalesInfo: 'SalesInfo',
    Relationship: 'Relationship',
    Subscriptions: 'Subscriptions',
    DeliveryMethods: 'DeliveryMethods',
    GdsNegotiatedRate: 'GdsNegotiatedRate',
    NegotiatedRate: 'NegotiatedRate',
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation',
    WebUserAccount: 'WebUserAccount'
} as const;
export type GetProfileByExtIdFetchInstructionsEnum = typeof GetProfileByExtIdFetchInstructionsEnum[keyof typeof GetProfileByExtIdFetchInstructionsEnum];
/**
 * @export
 */
export const GetProfileByExtIdInstructionParameterTypeEnum = {
    NegotiatedRateShowInactive: 'NegotiatedRateShowInactive',
    NegotiatedRateResort: 'NegotiatedRateResort',
    NegotiatedRateMaxFetchCount: 'NegotiatedRateMaxFetchCount',
    NegotiatedRateCode: 'NegotiatedRateCode',
    GdsNegotiatedRateShowInactive: 'GdsNegotiatedRateShowInactive',
    PreferencesShowInactive: 'PreferencesShowInactive',
    ResortForRoutingInstructions: 'ResortForRoutingInstructions',
    RelationshipPrimaryProfile: 'RelationshipPrimaryProfile',
    AddressPrimaryOnly: 'AddressPrimaryOnly',
    CommunicationPrimaryOnly: 'CommunicationPrimaryOnly',
    DeliveryMethodsHotelCode: 'DeliveryMethodsHotelCode'
} as const;
export type GetProfileByExtIdInstructionParameterTypeEnum = typeof GetProfileByExtIdInstructionParameterTypeEnum[keyof typeof GetProfileByExtIdInstructionParameterTypeEnum];
/**
 * @export
 */
export const GetProfileByExtIdAllowedActionEnum = {
    NameChange: 'NameChange',
    TaxIdChange: 'TaxIDChange',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership'
} as const;
export type GetProfileByExtIdAllowedActionEnum = typeof GetProfileByExtIdAllowedActionEnum[keyof typeof GetProfileByExtIdAllowedActionEnum];
/**
 * @export
 */
export const GetProfilesSearchTypeEnum = {
    PurgeableProfiles: 'PurgeableProfiles',
    Any: 'Any',
    PatronTrackingSystemMemberProfiles: 'PatronTrackingSystemMemberProfiles'
} as const;
export type GetProfilesSearchTypeEnum = typeof GetProfilesSearchTypeEnum[keyof typeof GetProfilesSearchTypeEnum];
/**
 * @export
 */
export const GetProfilesProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
} as const;
export type GetProfilesProfileTypeEnum = typeof GetProfilesProfileTypeEnum[keyof typeof GetProfilesProfileTypeEnum];
/**
 * @export
 */
export const GetProfilesRelatedProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
} as const;
export type GetProfilesRelatedProfileTypeEnum = typeof GetProfilesRelatedProfileTypeEnum[keyof typeof GetProfilesRelatedProfileTypeEnum];
/**
 * @export
 */
export const GetProfilesFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    NegotiatedRate: 'NegotiatedRate',
    GdsNegotiatedRate: 'GdsNegotiatedRate',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation',
    Relationship: 'Relationship',
    Correspondence: 'Correspondence',
    Routing: 'Routing',
    Indicators: 'Indicators',
    Profile: 'Profile',
    WebUserAccount: 'WebUserAccount',
    SalesInfo: 'SalesInfo',
    ECertificate: 'ECertificate',
    Subscriptions: 'Subscriptions',
    PrimaryAccountInfo: 'PrimaryAccountInfo',
    DeliveryMethods: 'DeliveryMethods',
    RoomOwnership: 'RoomOwnership'
} as const;
export type GetProfilesFetchInstructionsEnum = typeof GetProfilesFetchInstructionsEnum[keyof typeof GetProfilesFetchInstructionsEnum];
/**
 * @export
 */
export const GetProfilesAllowedActionEnum = {
    NameChange: 'NameChange',
    TaxIdChange: 'TaxIDChange',
    EnrollToPrimaryMembership: 'EnrollToPrimaryMembership'
} as const;
export type GetProfilesAllowedActionEnum = typeof GetProfilesAllowedActionEnum[keyof typeof GetProfilesAllowedActionEnum];
/**
 * @export
 */
export const GetProfilesByIdsFetchInstructionsEnum = {
    Address: 'Address',
    Communication: 'Communication',
    NegotiatedRate: 'NegotiatedRate',
    GdsNegotiatedRate: 'GdsNegotiatedRate',
    Comment: 'Comment',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation',
    Relationship: 'Relationship',
    Correspondence: 'Correspondence',
    Routing: 'Routing',
    Indicators: 'Indicators',
    Profile: 'Profile',
    WebUserAccount: 'WebUserAccount',
    SalesInfo: 'SalesInfo',
    ECertificate: 'ECertificate',
    Subscriptions: 'Subscriptions',
    PrimaryAccountInfo: 'PrimaryAccountInfo',
    DeliveryMethods: 'DeliveryMethods',
    RoomOwnership: 'RoomOwnership'
} as const;
export type GetProfilesByIdsFetchInstructionsEnum = typeof GetProfilesByIdsFetchInstructionsEnum[keyof typeof GetProfilesByIdsFetchInstructionsEnum];
/**
 * @export
 */
export const GetProfilesByIdsInstructionParameterTypeEnum = {
    NegotiatedRateShowInactive: 'NegotiatedRateShowInactive',
    NegotiatedRateResort: 'NegotiatedRateResort',
    NegotiatedRateMaxFetchCount: 'NegotiatedRateMaxFetchCount',
    NegotiatedRateCode: 'NegotiatedRateCode',
    GdsNegotiatedRateShowInactive: 'GdsNegotiatedRateShowInactive',
    PreferencesShowInactive: 'PreferencesShowInactive',
    ResortForRoutingInstructions: 'ResortForRoutingInstructions',
    RelationshipPrimaryProfile: 'RelationshipPrimaryProfile',
    AddressPrimaryOnly: 'AddressPrimaryOnly',
    CommunicationPrimaryOnly: 'CommunicationPrimaryOnly',
    DeliveryMethodsHotelCode: 'DeliveryMethodsHotelCode'
} as const;
export type GetProfilesByIdsInstructionParameterTypeEnum = typeof GetProfilesByIdsInstructionParameterTypeEnum[keyof typeof GetProfilesByIdsInstructionParameterTypeEnum];
/**
 * @export
 */
export const GetStagedProfileFetchInstructionsEnum = {
    Profile: 'Profile',
    Address: 'Address',
    Communication: 'Communication',
    NegotiatedRate: 'NegotiatedRate',
    Membership: 'Membership',
    Preference: 'Preference',
    Keyword: 'Keyword',
    Routing: 'Routing',
    UserDefinedField: 'UserDefinedField',
    Identifier: 'Identifier',
    InvalidDetail: 'InvalidDetail'
} as const;
export type GetStagedProfileFetchInstructionsEnum = typeof GetStagedProfileFetchInstructionsEnum[keyof typeof GetStagedProfileFetchInstructionsEnum];
/**
 * @export
 */
export const GetStagedProfilesApplyToEnum = {
    StagedProfiles: 'StagedProfiles',
    MatchingProfiles: 'MatchingProfiles',
    StagedAndMatchingProfiles: 'StagedAndMatchingProfiles'
} as const;
export type GetStagedProfilesApplyToEnum = typeof GetStagedProfilesApplyToEnum[keyof typeof GetStagedProfilesApplyToEnum];
/**
 * @export
 */
export const GetStayHistoryFetchInstructionsEnum = {
    HistoryReservation: 'HistoryReservation',
    FutureReservation: 'FutureReservation'
} as const;
export type GetStayHistoryFetchInstructionsEnum = typeof GetStayHistoryFetchInstructionsEnum[keyof typeof GetStayHistoryFetchInstructionsEnum];
