/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  Status,
  SuspendedStayDetails,
  SuspendedStayErrorsType,
  SuspendedStaySummariesType,
  SuspendedStayType,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    StatusFromJSON,
    StatusToJSON,
    SuspendedStayDetailsFromJSON,
    SuspendedStayDetailsToJSON,
    SuspendedStayErrorsTypeFromJSON,
    SuspendedStayErrorsTypeToJSON,
    SuspendedStaySummariesTypeFromJSON,
    SuspendedStaySummariesTypeToJSON,
    SuspendedStayTypeFromJSON,
    SuspendedStayTypeToJSON,
} from '../models/index';

export interface DeleteSuspendedStayRequest {
    suspendedStayRecordId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSuspendedStayRequest {
    suspendedStayRecordId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSuspendedStaysRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    reservationStatus?: string;
    importDate?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProcessSuspendedStaysRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    suspendedStayRecordId: SuspendedStayDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSuspendedStayRequest {
    suspendedStayRecordId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    suspendedStay: SuspendedStayType;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class SuspendedStayApi extends runtime.BaseAPI {

    /**
     * Use this to remove a Suspended Stay from OPERA including all its details like Revenue, Rate, Membership, Errors. <p><strong>OperationId:</strong>deleteSuspendedStay</p>
     * Delete a suspended stay by the Suspended Stay Record ID.
     */
    async deleteSuspendedStayRaw(requestParameters: DeleteSuspendedStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.suspendedStayRecordId === null || requestParameters.suspendedStayRecordId === undefined) {
            throw new runtime.RequiredError('suspendedStayRecordId','Required parameter requestParameters.suspendedStayRecordId was null or undefined when calling deleteSuspendedStay.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/suspendedStayRecordId/{suspendedStayRecordId}`.replace(`{${"suspendedStayRecordId"}}`, encodeURIComponent(String(requestParameters.suspendedStayRecordId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to remove a Suspended Stay from OPERA including all its details like Revenue, Rate, Membership, Errors. <p><strong>OperationId:</strong>deleteSuspendedStay</p>
     * Delete a suspended stay by the Suspended Stay Record ID.
     */
    async deleteSuspendedStay(requestParameters: DeleteSuspendedStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteSuspendedStayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API provides Suspended Stay information including Revenue, Rate, Membership and Error details. <p><strong>OperationId:</strong>getSuspendedStay</p>
     * Get a Suspended Stay by the Suspended Stay Record ID.
     */
    async getSuspendedStayRaw(requestParameters: GetSuspendedStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuspendedStayType>> {
        if (requestParameters.suspendedStayRecordId === null || requestParameters.suspendedStayRecordId === undefined) {
            throw new runtime.RequiredError('suspendedStayRecordId','Required parameter requestParameters.suspendedStayRecordId was null or undefined when calling getSuspendedStay.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/suspendedStayRecordId/{suspendedStayRecordId}`.replace(`{${"suspendedStayRecordId"}}`, encodeURIComponent(String(requestParameters.suspendedStayRecordId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuspendedStayTypeFromJSON(jsonValue));
    }

    /**
     * This API provides Suspended Stay information including Revenue, Rate, Membership and Error details. <p><strong>OperationId:</strong>getSuspendedStay</p>
     * Get a Suspended Stay by the Suspended Stay Record ID.
     */
    async getSuspendedStay(requestParameters: GetSuspendedStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuspendedStayType> {
        const response = await this.getSuspendedStayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API provides Suspended Stay information. Suspended stays are records that need to be manually processed, as they have been suspended during an upload to OPERA Cloud. <p><strong>OperationId:</strong>getSuspendedStays</p>
     * Get Suspended Stays
     */
    async getSuspendedStaysRaw(requestParameters: GetSuspendedStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuspendedStaySummariesType>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.reservationStatus !== undefined) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.importDate !== undefined) {
            queryParameters['importDate'] = requestParameters.importDate;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/suspendedStays`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuspendedStaySummariesTypeFromJSON(jsonValue));
    }

    /**
     * This API provides Suspended Stay information. Suspended stays are records that need to be manually processed, as they have been suspended during an upload to OPERA Cloud. <p><strong>OperationId:</strong>getSuspendedStays</p>
     * Get Suspended Stays
     */
    async getSuspendedStays(requestParameters: GetSuspendedStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuspendedStaySummariesType> {
        const response = await this.getSuspendedStaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API processes Suspended Stay. If no Suspended Stay Record IDs are sent in the body all suspended stays will be processed. <p><strong>OperationId:</strong>putProcessSuspendedStays</p>
     * Process Suspended Stays
     */
    async putProcessSuspendedStaysRaw(requestParameters: PutProcessSuspendedStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SuspendedStayErrorsType>> {
        if (requestParameters.suspendedStayRecordId === null || requestParameters.suspendedStayRecordId === undefined) {
            throw new runtime.RequiredError('suspendedStayRecordId','Required parameter requestParameters.suspendedStayRecordId was null or undefined when calling putProcessSuspendedStays.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/processSuspendedStays`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SuspendedStayDetailsToJSON(requestParameters.suspendedStayRecordId),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuspendedStayErrorsTypeFromJSON(jsonValue));
    }

    /**
     * This API processes Suspended Stay. If no Suspended Stay Record IDs are sent in the body all suspended stays will be processed. <p><strong>OperationId:</strong>putProcessSuspendedStays</p>
     * Process Suspended Stays
     */
    async putProcessSuspendedStays(requestParameters: PutProcessSuspendedStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SuspendedStayErrorsType> {
        const response = await this.putProcessSuspendedStaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update a Suspended Stay information including Revenue, Rate and Membership details.  <p><strong>OperationId:</strong>putSuspendedStay</p>
     * Update a Suspended Stay by the Suspended Stay Record ID.
     */
    async putSuspendedStayRaw(requestParameters: PutSuspendedStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.suspendedStayRecordId === null || requestParameters.suspendedStayRecordId === undefined) {
            throw new runtime.RequiredError('suspendedStayRecordId','Required parameter requestParameters.suspendedStayRecordId was null or undefined when calling putSuspendedStay.');
        }
        
        if (requestParameters.suspendedStay === null || requestParameters.suspendedStay === undefined) {
            throw new runtime.RequiredError('suspendedStay','Required parameter requestParameters.suspendedStay was null or undefined when calling putSuspendedStay.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/suspendedStayRecordId/{suspendedStayRecordId}`.replace(`{${"suspendedStayRecordId"}}`, encodeURIComponent(String(requestParameters.suspendedStayRecordId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SuspendedStayTypeToJSON(requestParameters.suspendedStay),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to update a Suspended Stay information including Revenue, Rate and Membership details.  <p><strong>OperationId:</strong>putSuspendedStay</p>
     * Update a Suspended Stay by the Suspended Stay Record ID.
     */
    async putSuspendedStay(requestParameters: PutSuspendedStayRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putSuspendedStayRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
