/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management API
 * APIs to cater for Customer Relationship Management (profile) functionality in OPERA Cloud.  There are different types of profiles in OPERA Cloud, including Guest, Company, Travel Agent, Source, Group, and Contact profile types.  A profile can store and display a wide range of information about the guest, company, travel agent etc., depending upon the type of profile.  For example, a guest profile can store the guest name, address, contact information, details on billing, membership benefits, preferences and much more.  All profiles in OPERA when created are assigned a ProfileID.  This ID will be used throughout the CRM APIs.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AirlineTransactionsStatus,
  AvailableAwardsBasedOnType,
  Award,
  AwardsToGrant,
  CalculateMembershipPointsRequest,
  CalculatedPoints,
  EnrollmentMatchProfiles,
  ExceptionDetailType,
  ExtendMemberPointsToExpireRequest,
  MemberInformation,
  MemberPointsToExpire,
  MembershipAwardExportInfo,
  MembershipAwardPointsByHotel,
  MembershipClaim,
  MembershipClaims,
  MembershipIssueAwards,
  MembershipTransaction,
  MembershipTransactionExceptions,
  MembershipTransactionsSummary,
  PointsRejectionReasons,
  PostEnrollmentRequest,
  PostMembershipClaimRequest,
  PostMembershipTransactionRequest,
  Rates,
  RedeemAwardRequest,
  Revenues,
  Status,
} from '../models';
import {
    AirlineTransactionsStatusFromJSON,
    AirlineTransactionsStatusToJSON,
    AvailableAwardsBasedOnTypeFromJSON,
    AvailableAwardsBasedOnTypeToJSON,
    AwardFromJSON,
    AwardToJSON,
    AwardsToGrantFromJSON,
    AwardsToGrantToJSON,
    CalculateMembershipPointsRequestFromJSON,
    CalculateMembershipPointsRequestToJSON,
    CalculatedPointsFromJSON,
    CalculatedPointsToJSON,
    EnrollmentMatchProfilesFromJSON,
    EnrollmentMatchProfilesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ExtendMemberPointsToExpireRequestFromJSON,
    ExtendMemberPointsToExpireRequestToJSON,
    MemberInformationFromJSON,
    MemberInformationToJSON,
    MemberPointsToExpireFromJSON,
    MemberPointsToExpireToJSON,
    MembershipAwardExportInfoFromJSON,
    MembershipAwardExportInfoToJSON,
    MembershipAwardPointsByHotelFromJSON,
    MembershipAwardPointsByHotelToJSON,
    MembershipClaimFromJSON,
    MembershipClaimToJSON,
    MembershipClaimsFromJSON,
    MembershipClaimsToJSON,
    MembershipIssueAwardsFromJSON,
    MembershipIssueAwardsToJSON,
    MembershipTransactionFromJSON,
    MembershipTransactionToJSON,
    MembershipTransactionExceptionsFromJSON,
    MembershipTransactionExceptionsToJSON,
    MembershipTransactionsSummaryFromJSON,
    MembershipTransactionsSummaryToJSON,
    PointsRejectionReasonsFromJSON,
    PointsRejectionReasonsToJSON,
    PostEnrollmentRequestFromJSON,
    PostEnrollmentRequestToJSON,
    PostMembershipClaimRequestFromJSON,
    PostMembershipClaimRequestToJSON,
    PostMembershipTransactionRequestFromJSON,
    PostMembershipTransactionRequestToJSON,
    RatesFromJSON,
    RatesToJSON,
    RedeemAwardRequestFromJSON,
    RedeemAwardRequestToJSON,
    RevenuesFromJSON,
    RevenuesToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models';

export interface CalculateMembershipPointsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPointsToCalculate?: CalculateMembershipPointsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMembershipClaimRequest {
    claimId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaim?: PostMembershipClaimRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAwardsRequest {
    awardNumber?: number;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationCancellationNumber?: string;
    actualCancelPoints?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ExportMembershipAwardRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateInfoHotelId?: string;
    totalAvailablePoints?: number;
    pointsRequired?: number;
    cancelPenaltyPoints?: number;
    cancelPenaltyDays?: number;
    cancelPenaltyCharge?: number;
    cancelPenaltyType?: string;
    rawIssueKey?: string;
    awardNumber?: number;
    rateCode?: string;
    rateDescription?: string;
    roomLabel?: string;
    roomDescription?: string;
    roomCategory?: string;
    stayDate?: Date;
    awardType?: string;
    productInfoHotelId?: string;
    productInfoTotalAvailablePoints?: number;
    productInfoPointsRequired?: number;
    productInfoCancelPenaltyPoints?: number;
    productInfoCancelPenaltyDays?: number;
    productInfoCancelPenaltyCharge?: number;
    productInfoCancelPenaltyType?: string;
    productInfoRawIssueKey?: string;
    productInfoAwardNumber?: number;
    packageCode?: string;
    packageDescription?: string;
    awardValidFrom?: Date;
    awardValidTo?: Date;
    upgradeInfoAwardType?: string;
    upgradeInfoHotelId?: string;
    upgradeInfoTotalAvailablePoints?: number;
    upgradeInfoPointsRequired?: number;
    upgradeInfoCancelPenaltyPoints?: number;
    upgradeInfoCancelPenaltyDays?: number;
    upgradeInfoCancelPenaltyCharge?: number;
    upgradeInfoCancelPenaltyType?: string;
    upgradeInfoRawIssueKey?: string;
    upgradeInfoAwardNumber?: number;
    fromRoomCategory?: string;
    toRoomCategory?: string;
    fromRoomDescription?: string;
    toRoomDescription?: string;
    fromRoom?: string;
    toRoom?: string;
    upgradeInfoStayDate?: Date;
    otherInfoAwardType?: string;
    sellBeginDate?: Date;
    sellEndDate?: Date;
    shortDescription?: string;
    awardValue?: number;
    otherInfoTotalAvailablePoints?: number;
    otherInfoPointsRequired?: number;
    longDescription?: string;
    otherInfoAwardNumber?: number;
    issueAwardsHotelId?: string;
    externalReservationNumber?: string;
    confirmationBookingNumber?: string;
    awardSource?: string;
    arrivalDate?: Date;
    departureDate?: Date;
    exportInfoAwardNumber?: number;
    nameType?: ExportMembershipAwardNameTypeEnum;
    name?: string;
    fullName?: string;
    namePrefix?: string;
    givenName?: string;
    middleName?: string;
    nameSuffix?: string;
    nameTitle?: string;
    phoneNumber?: string;
    companyName?: string;
    id?: string;
    idContext?: string;
    idType?: string;
    barCode?: string;
    createDateTime?: string;
    creatorId?: string;
    lastModifierId?: string;
    lastModifyDateTime?: string;
    primaryInd?: boolean;
    purgeDate?: Date;
    type?: string;
    typeDescription?: string;
    updateReservations?: boolean;
    addressLine?: Array<string>;
    cityName?: string;
    postalCode?: string;
    cityExtension?: string;
    county?: string;
    state?: string;
    code?: string;
    language?: string;
    characterUDFsAltName?: Array<string>;
    characterUDFsName?: Array<string>;
    characterUDFsValue?: Array<string>;
    numericUDFsAltName?: Array<string>;
    numericUDFsName?: Array<string>;
    numericUDFsValue?: Array<number>;
    dateUDFsAltname?: Array<string>;
    dateUDFsName?: Array<string>;
    dateUDFsValue?: Array<Date>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ExtendMemberPointsToExpireOperationRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    extendMemberPointsToExpire?: ExtendMemberPointsToExpireRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAirlineTransactionsStatusRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    batchId?: string;
    batchIdType?: string;
    importDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAllMembershipClaimsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipId?: string;
    profileId?: string;
    profileIdContext?: string;
    profileIdType?: string;
    name?: string;
    givenName?: string;
    membershipType?: string;
    claimType?: string;
    source?: GetAllMembershipClaimsSourceEnum;
    owner?: string;
    claimNumber?: string;
    claimNoContext?: string;
    claimNoType?: string;
    hotelId?: string;
    confirmationNo?: string;
    submitter?: string;
    claimStatus?: string;
    closeDateEnd?: Date;
    closeDateStart?: Date;
    claimDateEnd?: Date;
    claimDateStart?: Date;
    replyByEnd?: Date;
    replyByStart?: Date;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    departureEnd?: Date;
    departureStart?: Date;
    approvalStatus?: GetAllMembershipClaimsApprovalStatusEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableAwardsBasedOnTypeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    awardBasedOn?: GetAvailableAwardsBasedOnTypeAwardBasedOnEnum;
    membershipType?: string;
    rateCriteriaHotelId?: string;
    arrivalDate?: Date;
    departureDate?: Date;
    bookingDate?: Date;
    pointsBelow?: number;
    pointsAbove?: number;
    rateCode?: string;
    roomCategory?: string;
    rooms?: string;
    awardType?: string;
    productCriteriaMembershipType?: string;
    productCriteriaHotelId?: string;
    productCriteriaArrivalDate?: Date;
    productCriteriaDepartureDate?: Date;
    productCriteriaBookingDate?: Date;
    productCriteriaPointsBelow?: number;
    productCriteriaPointsAbove?: number;
    packageCode?: string;
    upgradeCriteriaMembershipType?: string;
    upgradeCriteriaHotelId?: string;
    upgradeCriteriaArrivalDate?: Date;
    upgradeCriteriaDepartureDate?: Date;
    upgradeCriteriaBookingDate?: Date;
    upgradeCriteriaPointsBelow?: number;
    upgradeCriteriaPointsAbove?: number;
    fromRoomCategory?: string;
    toRoomCategory?: string;
    upgradeCriteriaRooms?: string;
    upgradeCriteriaAwardType?: string;
    awardCode?: string;
    totalBillingAmount?: number;
    currencyCode?: string;
    fTPaymentCriteriaPointsBelow?: number;
    fTPaymentCriteriaPointsAbove?: number;
    otherCriteriaAwardCode?: string;
    otherCriteriaMembershipType?: string;
    membershipLevel?: string;
    shortDescription?: string;
    valueBelow?: number;
    valueAbove?: number;
    otherCriteriaPointsBelow?: number;
    otherCriteriaPointsAbove?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAwardsToGrantRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    awardBasedOn?: GetAwardsToGrantAwardBasedOnEnum;
    totalPointsRequired?: number;
    rooms?: string;
    membershipId?: number;
    membershipType?: string;
    awardType?: string;
    grantAwardInfoHotelId?: string;
    rateCode?: string;
    roomCategory?: string;
    fromRoom?: string;
    toRoom?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEnrollmentMatchProfilesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    externalDatabaseID?: string;
    matchedProfileType?: GetEnrollmentMatchProfilesMatchedProfileTypeEnum;
    language?: string;
    givenName?: string;
    surname?: string;
    nameTitle?: string;
    addressId?: string;
    addressIdContext?: string;
    addressIdType?: string;
    primaryInd?: boolean;
    type?: string;
    addressLine?: Array<string>;
    cityName?: string;
    postalCode?: string;
    county?: string;
    state?: string;
    countryCode?: string;
    languageCode?: string;
    businessSegment?: Array<string>;
    territory?: string;
    traceCode?: string;
    ownerCode?: string;
    influenceCode?: string;
    hasMore?: boolean;
    totalResults?: number;
    telephoneId?: string;
    telephoneIdContext?: string;
    telephoneIdType?: string;
    phoneNumber?: string;
    phoneTechType?: string;
    phoneUseType?: string;
    phoneUseTypeDescription?: string;
    telephonePrimaryInd?: boolean;
    emailInfoId?: string;
    emailInfoIdContext?: string;
    emailInfoIdType?: string;
    emailAddress?: string;
    emailPrimaryInd?: boolean;
    emailType?: string;
    urlId?: string;
    urlIdContext?: string;
    urlIdType?: string;
    urlPrimaryInd?: boolean;
    urlType?: string;
    membershipId?: string;
    nameOnCard?: string;
    membershipLevel?: string;
    profileId?: string;
    profileContext?: string;
    profileType?: string;
    paymentMethodCode?: string;
    amount?: number;
    amountCode?: string;
    comments?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMemberPointsToExpireRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardExportInfoRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    awardNumber?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardPointsByHotelRequest {
    membershipId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipClaimRequest {
    claimId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    type?: string;
    fetchInstructions?: Set<GetMembershipClaimFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipClaimsRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileId?: string;
    profileIdContext?: string;
    profileIdType?: string;
    name?: string;
    givenName?: string;
    membershipType?: string;
    claimType?: string;
    source?: GetMembershipClaimsSourceEnum;
    owner?: string;
    claimNumber?: string;
    claimNoContext?: string;
    claimNoType?: string;
    hotelId?: string;
    confirmationNo?: string;
    submitter?: string;
    claimStatus?: string;
    closeDateEnd?: Date;
    closeDateStart?: Date;
    claimDateEnd?: Date;
    claimDateStart?: Date;
    replyByEnd?: Date;
    replyByStart?: Date;
    arrivalEnd?: Date;
    arrivalStart?: Date;
    departureEnd?: Date;
    departureStart?: Date;
    approvalStatus?: GetMembershipClaimsApprovalStatusEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipDetailsRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    idType?: Array<string>;
    membershipType?: string;
    membershipId?: string;
    hotelId?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    mode?: GetMembershipDetailsModeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipIssueAwardsListRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionRequest {
    membershipTransactionId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionAwardPointsRequest {
    membershipTransactionId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionExceptionsRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    end?: Date;
    start?: Date;
    id?: string;
    idContext?: string;
    type?: string;
    membershipType?: string;
    membershipLevel?: string;
    membershipCardNo?: string;
    includeEPE?: boolean;
    exceptionType?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionPointsRejectionReasonsRequest {
    membershipTransactionId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionRatesRequest {
    membershipTransactionId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionRevenueRequest {
    membershipTransactionId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionTierPointsRequest {
    membershipTransactionId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTransactionsSummaryRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostEnrollmentOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    enrollment?: PostEnrollmentRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipClaimOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaim?: PostMembershipClaimRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipTransactionOperationRequest {
    membershipId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTransaction?: PostMembershipTransactionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RedeemAwardOperationRequest {
    profileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    award?: RedeemAwardRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ProfileMembershipApi extends runtime.BaseAPI {

    /**
     * Start Membership Points Calculation process <p><strong>OperationId:</strong>calculateMembershipPoints</p>
     * Calculate Membership Points
     */
    async calculateMembershipPointsRaw(requestParameters: CalculateMembershipPointsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipPoints/calculations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateMembershipPointsRequestToJSON(requestParameters.membershipPointsToCalculate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Start Membership Points Calculation process <p><strong>OperationId:</strong>calculateMembershipPoints</p>
     * Calculate Membership Points
     */
    async calculateMembershipPoints(requestParameters: CalculateMembershipPointsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.calculateMembershipPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>changeMembershipClaim</p>
     * Change membership Claim
     */
    async changeMembershipClaimRaw(requestParameters: ChangeMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaims/{claimId}`.replace(`{${"claimId"}}`, encodeURIComponent(String(requestParameters.claimId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostMembershipClaimRequestToJSON(requestParameters.membershipClaim),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>changeMembershipClaim</p>
     * Change membership Claim
     */
    async changeMembershipClaim(requestParameters: ChangeMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMembershipClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to cancel an award already been granted to a member. <p><strong>OperationId:</strong>deleteAwards</p>
     * Delete Awards
     */
    async deleteAwardsRaw(requestParameters: DeleteAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.awardNumber !== undefined) {
            queryParameters['awardNumber'] = requestParameters.awardNumber;
        }

        if (requestParameters.reservationCancellationNumber !== undefined) {
            queryParameters['reservationCancellationNumber'] = requestParameters.reservationCancellationNumber;
        }

        if (requestParameters.actualCancelPoints !== undefined) {
            queryParameters['actualCancelPoints'] = requestParameters.actualCancelPoints;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/awards`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to cancel an award already been granted to a member. <p><strong>OperationId:</strong>deleteAwards</p>
     * Delete Awards
     */
    async deleteAwards(requestParameters: DeleteAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export members information for Fulfillment house processing <p><strong>OperationId:</strong>exportMembershipAward</p>
     * Export Membership Award
     */
    async exportMembershipAwardRaw(requestParameters: ExportMembershipAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.rateInfoHotelId !== undefined) {
            queryParameters['rateInfoHotelId'] = requestParameters.rateInfoHotelId;
        }

        if (requestParameters.totalAvailablePoints !== undefined) {
            queryParameters['totalAvailablePoints'] = requestParameters.totalAvailablePoints;
        }

        if (requestParameters.pointsRequired !== undefined) {
            queryParameters['pointsRequired'] = requestParameters.pointsRequired;
        }

        if (requestParameters.cancelPenaltyPoints !== undefined) {
            queryParameters['cancelPenaltyPoints'] = requestParameters.cancelPenaltyPoints;
        }

        if (requestParameters.cancelPenaltyDays !== undefined) {
            queryParameters['cancelPenaltyDays'] = requestParameters.cancelPenaltyDays;
        }

        if (requestParameters.cancelPenaltyCharge !== undefined) {
            queryParameters['cancelPenaltyCharge'] = requestParameters.cancelPenaltyCharge;
        }

        if (requestParameters.cancelPenaltyType !== undefined) {
            queryParameters['cancelPenaltyType'] = requestParameters.cancelPenaltyType;
        }

        if (requestParameters.rawIssueKey !== undefined) {
            queryParameters['rawIssueKey'] = requestParameters.rawIssueKey;
        }

        if (requestParameters.awardNumber !== undefined) {
            queryParameters['awardNumber'] = requestParameters.awardNumber;
        }

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.rateDescription !== undefined) {
            queryParameters['rateDescription'] = requestParameters.rateDescription;
        }

        if (requestParameters.roomLabel !== undefined) {
            queryParameters['roomLabel'] = requestParameters.roomLabel;
        }

        if (requestParameters.roomDescription !== undefined) {
            queryParameters['roomDescription'] = requestParameters.roomDescription;
        }

        if (requestParameters.roomCategory !== undefined) {
            queryParameters['roomCategory'] = requestParameters.roomCategory;
        }

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.awardType !== undefined) {
            queryParameters['awardType'] = requestParameters.awardType;
        }

        if (requestParameters.productInfoHotelId !== undefined) {
            queryParameters['productInfoHotelId'] = requestParameters.productInfoHotelId;
        }

        if (requestParameters.productInfoTotalAvailablePoints !== undefined) {
            queryParameters['productInfoTotalAvailablePoints'] = requestParameters.productInfoTotalAvailablePoints;
        }

        if (requestParameters.productInfoPointsRequired !== undefined) {
            queryParameters['productInfoPointsRequired'] = requestParameters.productInfoPointsRequired;
        }

        if (requestParameters.productInfoCancelPenaltyPoints !== undefined) {
            queryParameters['productInfoCancelPenaltyPoints'] = requestParameters.productInfoCancelPenaltyPoints;
        }

        if (requestParameters.productInfoCancelPenaltyDays !== undefined) {
            queryParameters['productInfoCancelPenaltyDays'] = requestParameters.productInfoCancelPenaltyDays;
        }

        if (requestParameters.productInfoCancelPenaltyCharge !== undefined) {
            queryParameters['productInfoCancelPenaltyCharge'] = requestParameters.productInfoCancelPenaltyCharge;
        }

        if (requestParameters.productInfoCancelPenaltyType !== undefined) {
            queryParameters['productInfoCancelPenaltyType'] = requestParameters.productInfoCancelPenaltyType;
        }

        if (requestParameters.productInfoRawIssueKey !== undefined) {
            queryParameters['productInfoRawIssueKey'] = requestParameters.productInfoRawIssueKey;
        }

        if (requestParameters.productInfoAwardNumber !== undefined) {
            queryParameters['productInfoAwardNumber'] = requestParameters.productInfoAwardNumber;
        }

        if (requestParameters.packageCode !== undefined) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.packageDescription !== undefined) {
            queryParameters['packageDescription'] = requestParameters.packageDescription;
        }

        if (requestParameters.awardValidFrom !== undefined) {
            queryParameters['awardValidFrom'] = (requestParameters.awardValidFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.awardValidTo !== undefined) {
            queryParameters['awardValidTo'] = (requestParameters.awardValidTo as any).toISOString().substr(0,10);
        }

        if (requestParameters.upgradeInfoAwardType !== undefined) {
            queryParameters['upgradeInfoAwardType'] = requestParameters.upgradeInfoAwardType;
        }

        if (requestParameters.upgradeInfoHotelId !== undefined) {
            queryParameters['upgradeInfoHotelId'] = requestParameters.upgradeInfoHotelId;
        }

        if (requestParameters.upgradeInfoTotalAvailablePoints !== undefined) {
            queryParameters['upgradeInfoTotalAvailablePoints'] = requestParameters.upgradeInfoTotalAvailablePoints;
        }

        if (requestParameters.upgradeInfoPointsRequired !== undefined) {
            queryParameters['upgradeInfoPointsRequired'] = requestParameters.upgradeInfoPointsRequired;
        }

        if (requestParameters.upgradeInfoCancelPenaltyPoints !== undefined) {
            queryParameters['upgradeInfoCancelPenaltyPoints'] = requestParameters.upgradeInfoCancelPenaltyPoints;
        }

        if (requestParameters.upgradeInfoCancelPenaltyDays !== undefined) {
            queryParameters['upgradeInfoCancelPenaltyDays'] = requestParameters.upgradeInfoCancelPenaltyDays;
        }

        if (requestParameters.upgradeInfoCancelPenaltyCharge !== undefined) {
            queryParameters['upgradeInfoCancelPenaltyCharge'] = requestParameters.upgradeInfoCancelPenaltyCharge;
        }

        if (requestParameters.upgradeInfoCancelPenaltyType !== undefined) {
            queryParameters['upgradeInfoCancelPenaltyType'] = requestParameters.upgradeInfoCancelPenaltyType;
        }

        if (requestParameters.upgradeInfoRawIssueKey !== undefined) {
            queryParameters['upgradeInfoRawIssueKey'] = requestParameters.upgradeInfoRawIssueKey;
        }

        if (requestParameters.upgradeInfoAwardNumber !== undefined) {
            queryParameters['upgradeInfoAwardNumber'] = requestParameters.upgradeInfoAwardNumber;
        }

        if (requestParameters.fromRoomCategory !== undefined) {
            queryParameters['fromRoomCategory'] = requestParameters.fromRoomCategory;
        }

        if (requestParameters.toRoomCategory !== undefined) {
            queryParameters['toRoomCategory'] = requestParameters.toRoomCategory;
        }

        if (requestParameters.fromRoomDescription !== undefined) {
            queryParameters['fromRoomDescription'] = requestParameters.fromRoomDescription;
        }

        if (requestParameters.toRoomDescription !== undefined) {
            queryParameters['toRoomDescription'] = requestParameters.toRoomDescription;
        }

        if (requestParameters.fromRoom !== undefined) {
            queryParameters['fromRoom'] = requestParameters.fromRoom;
        }

        if (requestParameters.toRoom !== undefined) {
            queryParameters['toRoom'] = requestParameters.toRoom;
        }

        if (requestParameters.upgradeInfoStayDate !== undefined) {
            queryParameters['upgradeInfoStayDate'] = (requestParameters.upgradeInfoStayDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.otherInfoAwardType !== undefined) {
            queryParameters['otherInfoAwardType'] = requestParameters.otherInfoAwardType;
        }

        if (requestParameters.sellBeginDate !== undefined) {
            queryParameters['sellBeginDate'] = (requestParameters.sellBeginDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.sellEndDate !== undefined) {
            queryParameters['sellEndDate'] = (requestParameters.sellEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.shortDescription !== undefined) {
            queryParameters['shortDescription'] = requestParameters.shortDescription;
        }

        if (requestParameters.awardValue !== undefined) {
            queryParameters['awardValue'] = requestParameters.awardValue;
        }

        if (requestParameters.otherInfoTotalAvailablePoints !== undefined) {
            queryParameters['otherInfoTotalAvailablePoints'] = requestParameters.otherInfoTotalAvailablePoints;
        }

        if (requestParameters.otherInfoPointsRequired !== undefined) {
            queryParameters['otherInfoPointsRequired'] = requestParameters.otherInfoPointsRequired;
        }

        if (requestParameters.longDescription !== undefined) {
            queryParameters['longDescription'] = requestParameters.longDescription;
        }

        if (requestParameters.otherInfoAwardNumber !== undefined) {
            queryParameters['otherInfoAwardNumber'] = requestParameters.otherInfoAwardNumber;
        }

        if (requestParameters.issueAwardsHotelId !== undefined) {
            queryParameters['issueAwardsHotelId'] = requestParameters.issueAwardsHotelId;
        }

        if (requestParameters.externalReservationNumber !== undefined) {
            queryParameters['externalReservationNumber'] = requestParameters.externalReservationNumber;
        }

        if (requestParameters.confirmationBookingNumber !== undefined) {
            queryParameters['confirmationBookingNumber'] = requestParameters.confirmationBookingNumber;
        }

        if (requestParameters.awardSource !== undefined) {
            queryParameters['awardSource'] = requestParameters.awardSource;
        }

        if (requestParameters.arrivalDate !== undefined) {
            queryParameters['arrivalDate'] = (requestParameters.arrivalDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureDate !== undefined) {
            queryParameters['departureDate'] = (requestParameters.departureDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.exportInfoAwardNumber !== undefined) {
            queryParameters['exportInfoAwardNumber'] = requestParameters.exportInfoAwardNumber;
        }

        if (requestParameters.nameType !== undefined) {
            queryParameters['nameType'] = requestParameters.nameType;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.fullName !== undefined) {
            queryParameters['fullName'] = requestParameters.fullName;
        }

        if (requestParameters.namePrefix !== undefined) {
            queryParameters['namePrefix'] = requestParameters.namePrefix;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.middleName !== undefined) {
            queryParameters['middleName'] = requestParameters.middleName;
        }

        if (requestParameters.nameSuffix !== undefined) {
            queryParameters['nameSuffix'] = requestParameters.nameSuffix;
        }

        if (requestParameters.nameTitle !== undefined) {
            queryParameters['nameTitle'] = requestParameters.nameTitle;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.companyName !== undefined) {
            queryParameters['companyName'] = requestParameters.companyName;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        if (requestParameters.barCode !== undefined) {
            queryParameters['barCode'] = requestParameters.barCode;
        }

        if (requestParameters.createDateTime !== undefined) {
            queryParameters['createDateTime'] = requestParameters.createDateTime;
        }

        if (requestParameters.creatorId !== undefined) {
            queryParameters['creatorId'] = requestParameters.creatorId;
        }

        if (requestParameters.lastModifierId !== undefined) {
            queryParameters['lastModifierId'] = requestParameters.lastModifierId;
        }

        if (requestParameters.lastModifyDateTime !== undefined) {
            queryParameters['lastModifyDateTime'] = requestParameters.lastModifyDateTime;
        }

        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }

        if (requestParameters.purgeDate !== undefined) {
            queryParameters['purgeDate'] = (requestParameters.purgeDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.typeDescription !== undefined) {
            queryParameters['typeDescription'] = requestParameters.typeDescription;
        }

        if (requestParameters.updateReservations !== undefined) {
            queryParameters['updateReservations'] = requestParameters.updateReservations;
        }

        if (requestParameters.addressLine) {
            queryParameters['addressLine'] = requestParameters.addressLine;
        }

        if (requestParameters.cityName !== undefined) {
            queryParameters['cityName'] = requestParameters.cityName;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.cityExtension !== undefined) {
            queryParameters['cityExtension'] = requestParameters.cityExtension;
        }

        if (requestParameters.county !== undefined) {
            queryParameters['county'] = requestParameters.county;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.characterUDFsAltName) {
            queryParameters['characterUDFsAltName'] = requestParameters.characterUDFsAltName;
        }

        if (requestParameters.characterUDFsName) {
            queryParameters['characterUDFsName'] = requestParameters.characterUDFsName;
        }

        if (requestParameters.characterUDFsValue) {
            queryParameters['characterUDFsValue'] = requestParameters.characterUDFsValue;
        }

        if (requestParameters.numericUDFsAltName) {
            queryParameters['NumericUDFsAltName'] = requestParameters.numericUDFsAltName;
        }

        if (requestParameters.numericUDFsName) {
            queryParameters['NumericUDFsName'] = requestParameters.numericUDFsName;
        }

        if (requestParameters.numericUDFsValue) {
            queryParameters['NumericUDFsValue'] = requestParameters.numericUDFsValue;
        }

        if (requestParameters.dateUDFsAltname) {
            queryParameters['DateUDFsAltname'] = requestParameters.dateUDFsAltname;
        }

        if (requestParameters.dateUDFsName) {
            queryParameters['DateUDFsName'] = requestParameters.dateUDFsName;
        }

        if (requestParameters.dateUDFsValue) {
            queryParameters['DateUDFsValue'] = requestParameters.dateUDFsValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/award`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Export members information for Fulfillment house processing <p><strong>OperationId:</strong>exportMembershipAward</p>
     * Export Membership Award
     */
    async exportMembershipAward(requestParameters: ExportMembershipAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.exportMembershipAwardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to extend the expiration date based on the rule defined in the Grace Period in months. <p><strong>OperationId:</strong>extendMemberPointsToExpire</p>
     * Extend Member Points set to Expire
     */
    async extendMemberPointsToExpireRaw(requestParameters: ExtendMemberPointsToExpireOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/pointsToExpire`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExtendMemberPointsToExpireRequestToJSON(requestParameters.extendMemberPointsToExpire),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to extend the expiration date based on the rule defined in the Grace Period in months. <p><strong>OperationId:</strong>extendMemberPointsToExpire</p>
     * Extend Member Points set to Expire
     */
    async extendMemberPointsToExpire(requestParameters: ExtendMemberPointsToExpireOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.extendMemberPointsToExpireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request for fetching membership transactions processed by the airline. <p><strong>OperationId:</strong>getAirlineTransactionsStatus</p>
     * Get airline transactions status
     */
    async getAirlineTransactionsStatusRaw(requestParameters: GetAirlineTransactionsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AirlineTransactionsStatus>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['batchId'] = requestParameters.batchId;
        }

        if (requestParameters.batchIdType !== undefined) {
            queryParameters['batchIdType'] = requestParameters.batchIdType;
        }

        if (requestParameters.importDate !== undefined) {
            queryParameters['importDate'] = (requestParameters.importDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/airline/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AirlineTransactionsStatusFromJSON(jsonValue));
    }

    /**
     * Request for fetching membership transactions processed by the airline. <p><strong>OperationId:</strong>getAirlineTransactionsStatus</p>
     * Get airline transactions status
     */
    async getAirlineTransactionsStatus(requestParameters: GetAirlineTransactionsStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AirlineTransactionsStatus> {
        const response = await this.getAirlineTransactionsStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve available membership claims without specifying the membership ID. <p><strong>OperationId:</strong>getAllMembershipClaims</p>
     * Get membership claims
     */
    async getAllMembershipClaimsRaw(requestParameters: GetAllMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaims>> {
        const queryParameters: any = {};

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileIdContext !== undefined) {
            queryParameters['profileIdContext'] = requestParameters.profileIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.claimType !== undefined) {
            queryParameters['claimType'] = requestParameters.claimType;
        }

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        if (requestParameters.owner !== undefined) {
            queryParameters['owner'] = requestParameters.owner;
        }

        if (requestParameters.claimNumber !== undefined) {
            queryParameters['claimNumber'] = requestParameters.claimNumber;
        }

        if (requestParameters.claimNoContext !== undefined) {
            queryParameters['claimNoContext'] = requestParameters.claimNoContext;
        }

        if (requestParameters.claimNoType !== undefined) {
            queryParameters['claimNoType'] = requestParameters.claimNoType;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.confirmationNo !== undefined) {
            queryParameters['confirmationNo'] = requestParameters.confirmationNo;
        }

        if (requestParameters.submitter !== undefined) {
            queryParameters['submitter'] = requestParameters.submitter;
        }

        if (requestParameters.claimStatus !== undefined) {
            queryParameters['claimStatus'] = requestParameters.claimStatus;
        }

        if (requestParameters.closeDateEnd !== undefined) {
            queryParameters['closeDateEnd'] = (requestParameters.closeDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.closeDateStart !== undefined) {
            queryParameters['closeDateStart'] = (requestParameters.closeDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.claimDateEnd !== undefined) {
            queryParameters['claimDateEnd'] = (requestParameters.claimDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.claimDateStart !== undefined) {
            queryParameters['claimDateStart'] = (requestParameters.claimDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.replyByEnd !== undefined) {
            queryParameters['replyByEnd'] = (requestParameters.replyByEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.replyByStart !== undefined) {
            queryParameters['replyByStart'] = (requestParameters.replyByStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalEnd !== undefined) {
            queryParameters['arrivalEnd'] = (requestParameters.arrivalEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStart !== undefined) {
            queryParameters['arrivalStart'] = (requestParameters.arrivalStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEnd !== undefined) {
            queryParameters['departureEnd'] = (requestParameters.departureEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStart !== undefined) {
            queryParameters['departureStart'] = (requestParameters.departureStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.approvalStatus !== undefined) {
            queryParameters['approvalStatus'] = requestParameters.approvalStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaims`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipClaimsFromJSON(jsonValue));
    }

    /**
     * Retrieve available membership claims without specifying the membership ID. <p><strong>OperationId:</strong>getAllMembershipClaims</p>
     * Get membership claims
     */
    async getAllMembershipClaims(requestParameters: GetAllMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaims> {
        const response = await this.getAllMembershipClaimsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get available awards based on type of award selected like Rates, products or services, room type upgrades, and other gifts. <p><strong>OperationId:</strong>getAvailableAwardsBasedOnType</p>
     * Get Available Awards
     */
    async getAvailableAwardsBasedOnTypeRaw(requestParameters: GetAvailableAwardsBasedOnTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableAwardsBasedOnType>> {
        const queryParameters: any = {};

        if (requestParameters.awardBasedOn !== undefined) {
            queryParameters['awardBasedOn'] = requestParameters.awardBasedOn;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.rateCriteriaHotelId !== undefined) {
            queryParameters['rateCriteriaHotelId'] = requestParameters.rateCriteriaHotelId;
        }

        if (requestParameters.arrivalDate !== undefined) {
            queryParameters['arrivalDate'] = (requestParameters.arrivalDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureDate !== undefined) {
            queryParameters['departureDate'] = (requestParameters.departureDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingDate !== undefined) {
            queryParameters['bookingDate'] = (requestParameters.bookingDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.pointsBelow !== undefined) {
            queryParameters['pointsBelow'] = requestParameters.pointsBelow;
        }

        if (requestParameters.pointsAbove !== undefined) {
            queryParameters['pointsAbove'] = requestParameters.pointsAbove;
        }

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.roomCategory !== undefined) {
            queryParameters['roomCategory'] = requestParameters.roomCategory;
        }

        if (requestParameters.rooms !== undefined) {
            queryParameters['rooms'] = requestParameters.rooms;
        }

        if (requestParameters.awardType !== undefined) {
            queryParameters['awardType'] = requestParameters.awardType;
        }

        if (requestParameters.productCriteriaMembershipType !== undefined) {
            queryParameters['productCriteriaMembershipType'] = requestParameters.productCriteriaMembershipType;
        }

        if (requestParameters.productCriteriaHotelId !== undefined) {
            queryParameters['productCriteriaHotelId'] = requestParameters.productCriteriaHotelId;
        }

        if (requestParameters.productCriteriaArrivalDate !== undefined) {
            queryParameters['productCriteriaArrivalDate'] = (requestParameters.productCriteriaArrivalDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.productCriteriaDepartureDate !== undefined) {
            queryParameters['productCriteriaDepartureDate'] = (requestParameters.productCriteriaDepartureDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.productCriteriaBookingDate !== undefined) {
            queryParameters['productCriteriaBookingDate'] = (requestParameters.productCriteriaBookingDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.productCriteriaPointsBelow !== undefined) {
            queryParameters['productCriteriaPointsBelow'] = requestParameters.productCriteriaPointsBelow;
        }

        if (requestParameters.productCriteriaPointsAbove !== undefined) {
            queryParameters['productCriteriaPointsAbove'] = requestParameters.productCriteriaPointsAbove;
        }

        if (requestParameters.packageCode !== undefined) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.upgradeCriteriaMembershipType !== undefined) {
            queryParameters['upgradeCriteriaMembershipType'] = requestParameters.upgradeCriteriaMembershipType;
        }

        if (requestParameters.upgradeCriteriaHotelId !== undefined) {
            queryParameters['upgradeCriteriaHotelId'] = requestParameters.upgradeCriteriaHotelId;
        }

        if (requestParameters.upgradeCriteriaArrivalDate !== undefined) {
            queryParameters['upgradeCriteriaArrivalDate'] = (requestParameters.upgradeCriteriaArrivalDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.upgradeCriteriaDepartureDate !== undefined) {
            queryParameters['upgradeCriteriaDepartureDate'] = (requestParameters.upgradeCriteriaDepartureDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.upgradeCriteriaBookingDate !== undefined) {
            queryParameters['upgradeCriteriaBookingDate'] = (requestParameters.upgradeCriteriaBookingDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.upgradeCriteriaPointsBelow !== undefined) {
            queryParameters['upgradeCriteriaPointsBelow'] = requestParameters.upgradeCriteriaPointsBelow;
        }

        if (requestParameters.upgradeCriteriaPointsAbove !== undefined) {
            queryParameters['upgradeCriteriaPointsAbove'] = requestParameters.upgradeCriteriaPointsAbove;
        }

        if (requestParameters.fromRoomCategory !== undefined) {
            queryParameters['fromRoomCategory'] = requestParameters.fromRoomCategory;
        }

        if (requestParameters.toRoomCategory !== undefined) {
            queryParameters['toRoomCategory'] = requestParameters.toRoomCategory;
        }

        if (requestParameters.upgradeCriteriaRooms !== undefined) {
            queryParameters['upgradeCriteriaRooms'] = requestParameters.upgradeCriteriaRooms;
        }

        if (requestParameters.upgradeCriteriaAwardType !== undefined) {
            queryParameters['upgradeCriteriaAwardType'] = requestParameters.upgradeCriteriaAwardType;
        }

        if (requestParameters.awardCode !== undefined) {
            queryParameters['awardCode'] = requestParameters.awardCode;
        }

        if (requestParameters.totalBillingAmount !== undefined) {
            queryParameters['totalBillingAmount'] = requestParameters.totalBillingAmount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.fTPaymentCriteriaPointsBelow !== undefined) {
            queryParameters['fTPaymentCriteriaPointsBelow'] = requestParameters.fTPaymentCriteriaPointsBelow;
        }

        if (requestParameters.fTPaymentCriteriaPointsAbove !== undefined) {
            queryParameters['fTPaymentCriteriaPointsAbove'] = requestParameters.fTPaymentCriteriaPointsAbove;
        }

        if (requestParameters.otherCriteriaAwardCode !== undefined) {
            queryParameters['otherCriteriaAwardCode'] = requestParameters.otherCriteriaAwardCode;
        }

        if (requestParameters.otherCriteriaMembershipType !== undefined) {
            queryParameters['otherCriteriaMembershipType'] = requestParameters.otherCriteriaMembershipType;
        }

        if (requestParameters.membershipLevel !== undefined) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.shortDescription !== undefined) {
            queryParameters['shortDescription'] = requestParameters.shortDescription;
        }

        if (requestParameters.valueBelow !== undefined) {
            queryParameters['valueBelow'] = requestParameters.valueBelow;
        }

        if (requestParameters.valueAbove !== undefined) {
            queryParameters['valueAbove'] = requestParameters.valueAbove;
        }

        if (requestParameters.otherCriteriaPointsBelow !== undefined) {
            queryParameters['otherCriteriaPointsBelow'] = requestParameters.otherCriteriaPointsBelow;
        }

        if (requestParameters.otherCriteriaPointsAbove !== undefined) {
            queryParameters['otherCriteriaPointsAbove'] = requestParameters.otherCriteriaPointsAbove;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/availableAwardsBasedOnType`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableAwardsBasedOnTypeFromJSON(jsonValue));
    }

    /**
     * Get available awards based on type of award selected like Rates, products or services, room type upgrades, and other gifts. <p><strong>OperationId:</strong>getAvailableAwardsBasedOnType</p>
     * Get Available Awards
     */
    async getAvailableAwardsBasedOnType(requestParameters: GetAvailableAwardsBasedOnTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableAwardsBasedOnType> {
        const response = await this.getAvailableAwardsBasedOnTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch awards list to be able to grant the award to a member <p><strong>OperationId:</strong>getAwardsToGrant</p>
     * Get Awards to Grant
     */
    async getAwardsToGrantRaw(requestParameters: GetAwardsToGrantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AwardsToGrant>> {
        const queryParameters: any = {};

        if (requestParameters.awardBasedOn !== undefined) {
            queryParameters['awardBasedOn'] = requestParameters.awardBasedOn;
        }

        if (requestParameters.totalPointsRequired !== undefined) {
            queryParameters['totalPointsRequired'] = requestParameters.totalPointsRequired;
        }

        if (requestParameters.rooms !== undefined) {
            queryParameters['rooms'] = requestParameters.rooms;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.awardType !== undefined) {
            queryParameters['awardType'] = requestParameters.awardType;
        }

        if (requestParameters.grantAwardInfoHotelId !== undefined) {
            queryParameters['grantAwardInfoHotelId'] = requestParameters.grantAwardInfoHotelId;
        }

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.roomCategory !== undefined) {
            queryParameters['roomCategory'] = requestParameters.roomCategory;
        }

        if (requestParameters.fromRoom !== undefined) {
            queryParameters['fromRoom'] = requestParameters.fromRoom;
        }

        if (requestParameters.toRoom !== undefined) {
            queryParameters['toRoom'] = requestParameters.toRoom;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/awardsToGrant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardsToGrantFromJSON(jsonValue));
    }

    /**
     * Fetch awards list to be able to grant the award to a member <p><strong>OperationId:</strong>getAwardsToGrant</p>
     * Get Awards to Grant
     */
    async getAwardsToGrant(requestParameters: GetAwardsToGrantRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AwardsToGrant> {
        const response = await this.getAwardsToGrantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information regarding match profiles <p><strong>OperationId:</strong>getEnrollmentMatchProfiles</p>
     * Get Profiles for Enrollment
     */
    async getEnrollmentMatchProfilesRaw(requestParameters: GetEnrollmentMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnrollmentMatchProfiles>> {
        const queryParameters: any = {};

        if (requestParameters.externalDatabaseID !== undefined) {
            queryParameters['externalDatabaseID'] = requestParameters.externalDatabaseID;
        }

        if (requestParameters.matchedProfileType !== undefined) {
            queryParameters['matchedProfileType'] = requestParameters.matchedProfileType;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.nameTitle !== undefined) {
            queryParameters['nameTitle'] = requestParameters.nameTitle;
        }

        if (requestParameters.addressId !== undefined) {
            queryParameters['addressId'] = requestParameters.addressId;
        }

        if (requestParameters.addressIdContext !== undefined) {
            queryParameters['addressIdContext'] = requestParameters.addressIdContext;
        }

        if (requestParameters.addressIdType !== undefined) {
            queryParameters['addressIdType'] = requestParameters.addressIdType;
        }

        if (requestParameters.primaryInd !== undefined) {
            queryParameters['primaryInd'] = requestParameters.primaryInd;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.addressLine) {
            queryParameters['addressLine'] = requestParameters.addressLine;
        }

        if (requestParameters.cityName !== undefined) {
            queryParameters['cityName'] = requestParameters.cityName;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.county !== undefined) {
            queryParameters['county'] = requestParameters.county;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.businessSegment) {
            queryParameters['businessSegment'] = requestParameters.businessSegment;
        }

        if (requestParameters.territory !== undefined) {
            queryParameters['territory'] = requestParameters.territory;
        }

        if (requestParameters.traceCode !== undefined) {
            queryParameters['traceCode'] = requestParameters.traceCode;
        }

        if (requestParameters.ownerCode !== undefined) {
            queryParameters['ownerCode'] = requestParameters.ownerCode;
        }

        if (requestParameters.influenceCode !== undefined) {
            queryParameters['influenceCode'] = requestParameters.influenceCode;
        }

        if (requestParameters.hasMore !== undefined) {
            queryParameters['hasMore'] = requestParameters.hasMore;
        }

        if (requestParameters.totalResults !== undefined) {
            queryParameters['totalResults'] = requestParameters.totalResults;
        }

        if (requestParameters.telephoneId !== undefined) {
            queryParameters['telephoneId'] = requestParameters.telephoneId;
        }

        if (requestParameters.telephoneIdContext !== undefined) {
            queryParameters['telephoneIdContext'] = requestParameters.telephoneIdContext;
        }

        if (requestParameters.telephoneIdType !== undefined) {
            queryParameters['telephoneIdType'] = requestParameters.telephoneIdType;
        }

        if (requestParameters.phoneNumber !== undefined) {
            queryParameters['phoneNumber'] = requestParameters.phoneNumber;
        }

        if (requestParameters.phoneTechType !== undefined) {
            queryParameters['phoneTechType'] = requestParameters.phoneTechType;
        }

        if (requestParameters.phoneUseType !== undefined) {
            queryParameters['phoneUseType'] = requestParameters.phoneUseType;
        }

        if (requestParameters.phoneUseTypeDescription !== undefined) {
            queryParameters['phoneUseTypeDescription'] = requestParameters.phoneUseTypeDescription;
        }

        if (requestParameters.telephonePrimaryInd !== undefined) {
            queryParameters['telephonePrimaryInd'] = requestParameters.telephonePrimaryInd;
        }

        if (requestParameters.emailInfoId !== undefined) {
            queryParameters['emailInfoId'] = requestParameters.emailInfoId;
        }

        if (requestParameters.emailInfoIdContext !== undefined) {
            queryParameters['emailInfoIdContext'] = requestParameters.emailInfoIdContext;
        }

        if (requestParameters.emailInfoIdType !== undefined) {
            queryParameters['emailInfoIdType'] = requestParameters.emailInfoIdType;
        }

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        if (requestParameters.emailPrimaryInd !== undefined) {
            queryParameters['emailPrimaryInd'] = requestParameters.emailPrimaryInd;
        }

        if (requestParameters.emailType !== undefined) {
            queryParameters['emailType'] = requestParameters.emailType;
        }

        if (requestParameters.urlId !== undefined) {
            queryParameters['urlId'] = requestParameters.urlId;
        }

        if (requestParameters.urlIdContext !== undefined) {
            queryParameters['urlIdContext'] = requestParameters.urlIdContext;
        }

        if (requestParameters.urlIdType !== undefined) {
            queryParameters['urlIdType'] = requestParameters.urlIdType;
        }

        if (requestParameters.urlPrimaryInd !== undefined) {
            queryParameters['urlPrimaryInd'] = requestParameters.urlPrimaryInd;
        }

        if (requestParameters.urlType !== undefined) {
            queryParameters['urlType'] = requestParameters.urlType;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.nameOnCard !== undefined) {
            queryParameters['nameOnCard'] = requestParameters.nameOnCard;
        }

        if (requestParameters.membershipLevel !== undefined) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileContext !== undefined) {
            queryParameters['profileContext'] = requestParameters.profileContext;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.paymentMethodCode !== undefined) {
            queryParameters['paymentMethodCode'] = requestParameters.paymentMethodCode;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.amountCode !== undefined) {
            queryParameters['amountCode'] = requestParameters.amountCode;
        }

        if (requestParameters.comments !== undefined) {
            queryParameters['comments'] = requestParameters.comments;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileForEnrollment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnrollmentMatchProfilesFromJSON(jsonValue));
    }

    /**
     * Get detailed information regarding match profiles <p><strong>OperationId:</strong>getEnrollmentMatchProfiles</p>
     * Get Profiles for Enrollment
     */
    async getEnrollmentMatchProfiles(requestParameters: GetEnrollmentMatchProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnrollmentMatchProfiles> {
        const response = await this.getEnrollmentMatchProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve your Points To Expire by membershipId. <p><strong>OperationId:</strong>getMemberPointsToExpire</p>
     * Get  membership points to expire 
     */
    async getMemberPointsToExpireRaw(requestParameters: GetMemberPointsToExpireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberPointsToExpire>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/pointsToExpire`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberPointsToExpireFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve your Points To Expire by membershipId. <p><strong>OperationId:</strong>getMemberPointsToExpire</p>
     * Get  membership points to expire 
     */
    async getMemberPointsToExpire(requestParameters: GetMemberPointsToExpireRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberPointsToExpire> {
        const response = await this.getMemberPointsToExpireRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get members information for Fulfillment house processing <p><strong>OperationId:</strong>getMembershipAwardExportInfo</p>
     * Get Membership Award Export Information
     */
    async getMembershipAwardExportInfoRaw(requestParameters: GetMembershipAwardExportInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipAwardExportInfo>> {
        const queryParameters: any = {};

        if (requestParameters.awardNumber !== undefined) {
            queryParameters['awardNumber'] = requestParameters.awardNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/awardExports`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipAwardExportInfoFromJSON(jsonValue));
    }

    /**
     * Get members information for Fulfillment house processing <p><strong>OperationId:</strong>getMembershipAwardExportInfo</p>
     * Get Membership Award Export Information
     */
    async getMembershipAwardExportInfo(requestParameters: GetMembershipAwardExportInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipAwardExportInfo> {
        const response = await this.getMembershipAwardExportInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a memberships issued awards points per property. <p><strong>OperationId:</strong>getMembershipAwardPointsByHotel</p>
     * Get Membership Issued awards points 
     */
    async getMembershipAwardPointsByHotelRaw(requestParameters: GetMembershipAwardPointsByHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipAwardPointsByHotel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/memberships/{membershipId}`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipAwardPointsByHotelFromJSON(jsonValue));
    }

    /**
     * Get a memberships issued awards points per property. <p><strong>OperationId:</strong>getMembershipAwardPointsByHotel</p>
     * Get Membership Issued awards points 
     */
    async getMembershipAwardPointsByHotel(requestParameters: GetMembershipAwardPointsByHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipAwardPointsByHotel> {
        const response = await this.getMembershipAwardPointsByHotelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>getMembershipClaim</p>
     * Get membership claim 
     */
    async getMembershipClaimRaw(requestParameters: GetMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaim>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaims/{claimId}`.replace(`{${"claimId"}}`, encodeURIComponent(String(requestParameters.claimId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipClaimFromJSON(jsonValue));
    }

    /**
     * Get membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>getMembershipClaim</p>
     * Get membership claim 
     */
    async getMembershipClaim(requestParameters: GetMembershipClaimRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaim> {
        const response = await this.getMembershipClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve available membership claims by specifying the membership ID. <p><strong>OperationId:</strong>getMembershipClaims</p>
     * Get membership claims
     */
    async getMembershipClaimsRaw(requestParameters: GetMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaims>> {
        const queryParameters: any = {};

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileIdContext !== undefined) {
            queryParameters['profileIdContext'] = requestParameters.profileIdContext;
        }

        if (requestParameters.profileIdType !== undefined) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.claimType !== undefined) {
            queryParameters['claimType'] = requestParameters.claimType;
        }

        if (requestParameters.source !== undefined) {
            queryParameters['source'] = requestParameters.source;
        }

        if (requestParameters.owner !== undefined) {
            queryParameters['owner'] = requestParameters.owner;
        }

        if (requestParameters.claimNumber !== undefined) {
            queryParameters['claimNumber'] = requestParameters.claimNumber;
        }

        if (requestParameters.claimNoContext !== undefined) {
            queryParameters['claimNoContext'] = requestParameters.claimNoContext;
        }

        if (requestParameters.claimNoType !== undefined) {
            queryParameters['claimNoType'] = requestParameters.claimNoType;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.confirmationNo !== undefined) {
            queryParameters['confirmationNo'] = requestParameters.confirmationNo;
        }

        if (requestParameters.submitter !== undefined) {
            queryParameters['submitter'] = requestParameters.submitter;
        }

        if (requestParameters.claimStatus !== undefined) {
            queryParameters['claimStatus'] = requestParameters.claimStatus;
        }

        if (requestParameters.closeDateEnd !== undefined) {
            queryParameters['closeDateEnd'] = (requestParameters.closeDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.closeDateStart !== undefined) {
            queryParameters['closeDateStart'] = (requestParameters.closeDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.claimDateEnd !== undefined) {
            queryParameters['claimDateEnd'] = (requestParameters.claimDateEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.claimDateStart !== undefined) {
            queryParameters['claimDateStart'] = (requestParameters.claimDateStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.replyByEnd !== undefined) {
            queryParameters['replyByEnd'] = (requestParameters.replyByEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.replyByStart !== undefined) {
            queryParameters['replyByStart'] = (requestParameters.replyByStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalEnd !== undefined) {
            queryParameters['arrivalEnd'] = (requestParameters.arrivalEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.arrivalStart !== undefined) {
            queryParameters['arrivalStart'] = (requestParameters.arrivalStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureEnd !== undefined) {
            queryParameters['departureEnd'] = (requestParameters.departureEnd as any).toISOString().substr(0,10);
        }

        if (requestParameters.departureStart !== undefined) {
            queryParameters['departureStart'] = (requestParameters.departureStart as any).toISOString().substr(0,10);
        }

        if (requestParameters.approvalStatus !== undefined) {
            queryParameters['approvalStatus'] = requestParameters.approvalStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/claims`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipClaimsFromJSON(jsonValue));
    }

    /**
     * Retrieve available membership claims by specifying the membership ID. <p><strong>OperationId:</strong>getMembershipClaims</p>
     * Get membership claims
     */
    async getMembershipClaims(requestParameters: GetMembershipClaimsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaims> {
        const response = await this.getMembershipClaimsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p>
     * Get membership information on a profile
     */
    async getMembershipDetailsRaw(requestParameters: GetMembershipDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MemberInformation>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType) {
            queryParameters['idType'] = requestParameters.idType;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.membershipId !== undefined) {
            queryParameters['membershipId'] = requestParameters.membershipId;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/memberships/info`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MemberInformationFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve membership details on a profile. <p><strong>OperationId:</strong>getMembershipDetails</p>
     * Get membership information on a profile
     */
    async getMembershipDetails(requestParameters: GetMembershipDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MemberInformation> {
        const response = await this.getMembershipDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of member issued awards. <p><strong>OperationId:</strong>getMembershipIssueAwardsList</p>
     * Get Membership Award list
     */
    async getMembershipIssueAwardsListRaw(requestParameters: GetMembershipIssueAwardsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipIssueAwards>> {
        const queryParameters: any = {};

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/awards`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipIssueAwardsFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of member issued awards. <p><strong>OperationId:</strong>getMembershipIssueAwardsList</p>
     * Get Membership Award list
     */
    async getMembershipIssueAwardsList(requestParameters: GetMembershipIssueAwardsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipIssueAwards> {
        const response = await this.getMembershipIssueAwardsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve membership transactions. <p><strong>OperationId:</strong>getMembershipTransaction</p>
     * Get a membership transaction
     */
    async getMembershipTransactionRaw(requestParameters: GetMembershipTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTransaction>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTransactions/{membershipTransactionId}`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTransactionFromJSON(jsonValue));
    }

    /**
     * Retrieve membership transactions. <p><strong>OperationId:</strong>getMembershipTransaction</p>
     * Get a membership transaction
     */
    async getMembershipTransaction(requestParameters: GetMembershipTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTransaction> {
        const response = await this.getMembershipTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the validated rule used to generate award points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionAwardPoints</p>
     * Fetch the Award Points Accrued for the current points transaction.
     */
    async getMembershipTransactionAwardPointsRaw(requestParameters: GetMembershipTransactionAwardPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedPoints>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTransaction/{membershipTransactionId}/awardPoints`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculatedPointsFromJSON(jsonValue));
    }

    /**
     * Retrieves the validated rule used to generate award points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionAwardPoints</p>
     * Fetch the Award Points Accrued for the current points transaction.
     */
    async getMembershipTransactionAwardPoints(requestParameters: GetMembershipTransactionAwardPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedPoints> {
        const response = await this.getMembershipTransactionAwardPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get membership transaction exceptions on a profile. <p><strong>OperationId:</strong>getMembershipTransactionExceptions</p>
     * Get membership transaction exception details
     */
    async getMembershipTransactionExceptionsRaw(requestParameters: GetMembershipTransactionExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTransactionExceptions>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substr(0,10);
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.membershipLevel !== undefined) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipCardNo !== undefined) {
            queryParameters['membershipCardNo'] = requestParameters.membershipCardNo;
        }

        if (requestParameters.includeEPE !== undefined) {
            queryParameters['includeEPE'] = requestParameters.includeEPE;
        }

        if (requestParameters.exceptionType !== undefined) {
            queryParameters['exceptionType'] = requestParameters.exceptionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/membershipTransactionExceptions`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTransactionExceptionsFromJSON(jsonValue));
    }

    /**
     * Use this API to get membership transaction exceptions on a profile. <p><strong>OperationId:</strong>getMembershipTransactionExceptions</p>
     * Get membership transaction exception details
     */
    async getMembershipTransactionExceptions(requestParameters: GetMembershipTransactionExceptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTransactionExceptions> {
        const response = await this.getMembershipTransactionExceptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the rule used to generate points and the reason the points were not awarded (validation failure, for e.g.\'Membership level requirements not met\'). <p><strong>OperationId:</strong>getMembershipTransactionPointsRejectionReasons</p>
     * Fetch the reason points were not awarded for a given points transaction.
     */
    async getMembershipTransactionPointsRejectionReasonsRaw(requestParameters: GetMembershipTransactionPointsRejectionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PointsRejectionReasons>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTransaction/{membershipTransactionId}/pointRejectionReasons`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PointsRejectionReasonsFromJSON(jsonValue));
    }

    /**
     * Retrieves the rule used to generate points and the reason the points were not awarded (validation failure, for e.g.\'Membership level requirements not met\'). <p><strong>OperationId:</strong>getMembershipTransactionPointsRejectionReasons</p>
     * Fetch the reason points were not awarded for a given points transaction.
     */
    async getMembershipTransactionPointsRejectionReasons(requestParameters: GetMembershipTransactionPointsRejectionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PointsRejectionReasons> {
        const response = await this.getMembershipTransactionPointsRejectionReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the dates of the stay, the rate code, the PMS rate amount, the central rate amount, the central currency and the market code associated with the stay. <p><strong>OperationId:</strong>getMembershipTransactionRates</p>
     * Fetch the rate details associated to current points transaction.
     */
    async getMembershipTransactionRatesRaw(requestParameters: GetMembershipTransactionRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rates>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTransaction/{membershipTransactionId}/rates`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatesFromJSON(jsonValue));
    }

    /**
     * Retrieves the dates of the stay, the rate code, the PMS rate amount, the central rate amount, the central currency and the market code associated with the stay. <p><strong>OperationId:</strong>getMembershipTransactionRates</p>
     * Fetch the rate details associated to current points transaction.
     */
    async getMembershipTransactionRates(requestParameters: GetMembershipTransactionRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rates> {
        const response = await this.getMembershipTransactionRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the date the revenue was recognized, the revenue type (PMS revenue buckets are seen as revenue types in ORS), PMS revenue and central <p><strong>OperationId:</strong>getMembershipTransactionRevenue</p>
     * Fetch the revenue details for the stay associated with current point transaction.
     */
    async getMembershipTransactionRevenueRaw(requestParameters: GetMembershipTransactionRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Revenues>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTransaction/{membershipTransactionId}/revenue`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenuesFromJSON(jsonValue));
    }

    /**
     * Retrieves the date the revenue was recognized, the revenue type (PMS revenue buckets are seen as revenue types in ORS), PMS revenue and central <p><strong>OperationId:</strong>getMembershipTransactionRevenue</p>
     * Fetch the revenue details for the stay associated with current point transaction.
     */
    async getMembershipTransactionRevenue(requestParameters: GetMembershipTransactionRevenueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Revenues> {
        const response = await this.getMembershipTransactionRevenueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves the validated rule used to generate tier points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionTierPoints</p>
     * Fetch the Tier Points Accrued for the current points transaction
     */
    async getMembershipTransactionTierPointsRaw(requestParameters: GetMembershipTransactionTierPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedPoints>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTransaction/{membershipTransactionId}/tierPoints`.replace(`{${"membershipTransactionId"}}`, encodeURIComponent(String(requestParameters.membershipTransactionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculatedPointsFromJSON(jsonValue));
    }

    /**
     * Retrieves the validated rule used to generate tier points, the type of points, number of points, cost per point, rule code for the award points, billing group the points belong. <p><strong>OperationId:</strong>getMembershipTransactionTierPoints</p>
     * Fetch the Tier Points Accrued for the current points transaction
     */
    async getMembershipTransactionTierPoints(requestParameters: GetMembershipTransactionTierPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedPoints> {
        const response = await this.getMembershipTransactionTierPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get membership transactions summary information by specifying membership ID <p><strong>OperationId:</strong>getMembershipTransactionsSummary</p>
     * Get membership transactions 
     */
    async getMembershipTransactionsSummaryRaw(requestParameters: GetMembershipTransactionsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTransactionsSummary>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/transactions`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTransactionsSummaryFromJSON(jsonValue));
    }

    /**
     * Get membership transactions summary information by specifying membership ID <p><strong>OperationId:</strong>getMembershipTransactionsSummary</p>
     * Get membership transactions 
     */
    async getMembershipTransactionsSummary(requestParameters: GetMembershipTransactionsSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTransactionsSummary> {
        const response = await this.getMembershipTransactionsSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    async postEnrollmentRaw(requestParameters: PostEnrollmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/enrollments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostEnrollmentRequestToJSON(requestParameters.enrollment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API when you have a guest profile and you want to enroll that guest profile into a membership program in an external system. <p><strong>OperationId:</strong>postEnrollment</p>
     * Create an Enrollment
     */
    async postEnrollment(requestParameters: PostEnrollmentOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will create membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>postMembershipClaim</p>
     * Create membership Claim
     */
    async postMembershipClaimRaw(requestParameters: PostMembershipClaimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaims`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMembershipClaimRequestToJSON(requestParameters.membershipClaim),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will create membership claim details based on the claim number and instructions provided in the request. <p><strong>OperationId:</strong>postMembershipClaim</p>
     * Create membership Claim
     */
    async postMembershipClaim(requestParameters: PostMembershipClaimOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipClaimRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new membership transaction . <p><strong>OperationId:</strong>postMembershipTransaction</p>
     * Post a membership transaction
     */
    async postMembershipTransactionRaw(requestParameters: PostMembershipTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/memberships/{membershipId}/transactions`.replace(`{${"membershipId"}}`, encodeURIComponent(String(requestParameters.membershipId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMembershipTransactionRequestToJSON(requestParameters.membershipTransaction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new membership transaction . <p><strong>OperationId:</strong>postMembershipTransaction</p>
     * Post a membership transaction
     */
    async postMembershipTransaction(requestParameters: PostMembershipTransactionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    async redeemAwardRaw(requestParameters: RedeemAwardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Award>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/awards/redeem`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RedeemAwardRequestToJSON(requestParameters.award),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AwardFromJSON(jsonValue));
    }

    /**
     * Redeem an award that exists on a profile. <p><strong>OperationId:</strong>redeemAward</p>
     * Redeem an award
     */
    async redeemAward(requestParameters: RedeemAwardOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Award> {
        const response = await this.redeemAwardRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExportMembershipAwardNameTypeEnum = {
    Primary: 'Primary',
    Alternate: 'Alternate',
    Incognito: 'Incognito',
    External: 'External',
    Phonetic: 'Phonetic'
} as const;
export type ExportMembershipAwardNameTypeEnum = typeof ExportMembershipAwardNameTypeEnum[keyof typeof ExportMembershipAwardNameTypeEnum];
/**
 * @export
 */
export const GetAllMembershipClaimsSourceEnum = {
    Ocis: 'Ocis',
    Opms: 'Opms',
    Web: 'Web'
} as const;
export type GetAllMembershipClaimsSourceEnum = typeof GetAllMembershipClaimsSourceEnum[keyof typeof GetAllMembershipClaimsSourceEnum];
/**
 * @export
 */
export const GetAllMembershipClaimsApprovalStatusEnum = {
    Approved: 'Approved',
    Rejected: 'Rejected',
    Pending: 'Pending'
} as const;
export type GetAllMembershipClaimsApprovalStatusEnum = typeof GetAllMembershipClaimsApprovalStatusEnum[keyof typeof GetAllMembershipClaimsApprovalStatusEnum];
/**
 * @export
 */
export const GetAvailableAwardsBasedOnTypeAwardBasedOnEnum = {
    Rate: 'Rate',
    Product: 'Product',
    Upgrade: 'Upgrade',
    Other: 'Other',
    Ft: 'Ft'
} as const;
export type GetAvailableAwardsBasedOnTypeAwardBasedOnEnum = typeof GetAvailableAwardsBasedOnTypeAwardBasedOnEnum[keyof typeof GetAvailableAwardsBasedOnTypeAwardBasedOnEnum];
/**
 * @export
 */
export const GetAwardsToGrantAwardBasedOnEnum = {
    Rate: 'Rate',
    Product: 'Product',
    Upgrade: 'Upgrade',
    Other: 'Other',
    Ft: 'Ft'
} as const;
export type GetAwardsToGrantAwardBasedOnEnum = typeof GetAwardsToGrantAwardBasedOnEnum[keyof typeof GetAwardsToGrantAwardBasedOnEnum];
/**
 * @export
 */
export const GetEnrollmentMatchProfilesMatchedProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
} as const;
export type GetEnrollmentMatchProfilesMatchedProfileTypeEnum = typeof GetEnrollmentMatchProfilesMatchedProfileTypeEnum[keyof typeof GetEnrollmentMatchProfilesMatchedProfileTypeEnum];
/**
 * @export
 */
export const GetMembershipClaimFetchInstructionsEnum = {
    ClaimDetail: 'ClaimDetail',
    ClaimActivityLog: 'ClaimActivityLog'
} as const;
export type GetMembershipClaimFetchInstructionsEnum = typeof GetMembershipClaimFetchInstructionsEnum[keyof typeof GetMembershipClaimFetchInstructionsEnum];
/**
 * @export
 */
export const GetMembershipClaimsSourceEnum = {
    Ocis: 'Ocis',
    Opms: 'Opms',
    Web: 'Web'
} as const;
export type GetMembershipClaimsSourceEnum = typeof GetMembershipClaimsSourceEnum[keyof typeof GetMembershipClaimsSourceEnum];
/**
 * @export
 */
export const GetMembershipClaimsApprovalStatusEnum = {
    Approved: 'Approved',
    Rejected: 'Rejected',
    Pending: 'Pending'
} as const;
export type GetMembershipClaimsApprovalStatusEnum = typeof GetMembershipClaimsApprovalStatusEnum[keyof typeof GetMembershipClaimsApprovalStatusEnum];
/**
 * @export
 */
export const GetMembershipDetailsModeEnum = {
    TransactionDate: 'TransactionDate',
    StayBeginDate: 'StayBeginDate',
    StayEndDate: 'StayEndDate',
    PointsCreditDate: 'PointsCreditDate'
} as const;
export type GetMembershipDetailsModeEnum = typeof GetMembershipDetailsModeEnum[keyof typeof GetMembershipDetailsModeEnum];
