/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud List of Values Management API
 * APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ParametersNameType
 */
export interface ParametersNameType {
    /**
     * This element depicts if the given parameter is mandatory for the LOV.
     * @type {boolean}
     * @memberof ParametersNameType
     */
    mandatory?: boolean;
    /**
     * Name of the parameter needed by the LOV.
     * @type {string}
     * @memberof ParametersNameType
     */
    parameterName?: string;
}

/**
 * Check if a given object implements the ParametersNameType interface.
 */
export function instanceOfParametersNameType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParametersNameTypeFromJSON(json: any): ParametersNameType {
    return ParametersNameTypeFromJSONTyped(json, false);
}

export function ParametersNameTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParametersNameType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mandatory': !exists(json, 'mandatory') ? undefined : json['mandatory'],
        'parameterName': !exists(json, 'parameterName') ? undefined : json['parameterName'],
    };
}

export function ParametersNameTypeToJSON(value?: ParametersNameType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mandatory': value.mandatory,
        'parameterName': value.parameterName,
    };
}

