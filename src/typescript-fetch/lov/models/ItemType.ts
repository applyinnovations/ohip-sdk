/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud List of Values Management API
 * APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ParameterType } from './ParameterType';
import {
    ParameterTypeFromJSON,
    ParameterTypeFromJSONTyped,
    ParameterTypeToJSON,
} from './ParameterType';

/**
 * 
 * @export
 * @interface ItemType
 */
export interface ItemType {
    /**
     * Collection of generic Name-Value-Pair parameters.
     * @type {Array<ParameterType>}
     * @memberof ItemType
     */
    flexfields?: Array<ParameterType>;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ItemType
     */
    shortDescription?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ItemType
     */
    active?: boolean;
}

/**
 * Check if a given object implements the ItemType interface.
 */
export function instanceOfItemType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemTypeFromJSON(json: any): ItemType {
    return ItemTypeFromJSONTyped(json, false);
}

export function ItemTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'flexfields': !exists(json, 'flexfields') ? undefined : ((json['flexfields'] as Array<any>).map(ParameterTypeFromJSON)),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'active': !exists(json, 'active') ? undefined : json['active'],
    };
}

export function ItemTypeToJSON(value?: ItemType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'flexfields': value.flexfields === undefined ? undefined : ((value.flexfields as Array<any>).map(ParameterTypeToJSON)),
        'code': value.code,
        'name': value.name,
        'description': value.description,
        'shortDescription': value.shortDescription,
        'active': value.active,
    };
}

