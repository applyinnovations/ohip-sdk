/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud List of Values Management API
 * APIs to cater for List of Value functionality in OPERA Cloud. A List of Values in the OPERA Application can be configured by a property.  Then by using these APIs you can retrieve all configured codes.  As an example, Titles is a configurable ListOfValues.  A hotel can specify what titles they wish to use, and thus fetching the LOV for title, you can view the codes that are configured for a property.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ItemType } from './ItemType';
import {
    ItemTypeFromJSON,
    ItemTypeFromJSONTyped,
    ItemTypeToJSON,
} from './ItemType';

/**
 * This is a prototype element for the LOV validation.
 * @export
 * @interface ListOfValuesMatchType
 */
export interface ListOfValuesMatchType {
    /**
     * 
     * @type {Array<ItemType>}
     * @memberof ListOfValuesMatchType
     */
    closeMatchingItems?: Array<ItemType>;
    /**
     * 
     * @type {string}
     * @memberof ListOfValuesMatchType
     */
    description?: string;
    /**
     * List of Values name.
     * @type {string}
     * @memberof ListOfValuesMatchType
     */
    lovName?: string;
    /**
     * 
     * @type {Array<ItemType>}
     * @memberof ListOfValuesMatchType
     */
    matchingItems?: Array<ItemType>;
    /**
     * 
     * @type {Array<ItemType>}
     * @memberof ListOfValuesMatchType
     */
    nonMatchingItems?: Array<ItemType>;
}

/**
 * Check if a given object implements the ListOfValuesMatchType interface.
 */
export function instanceOfListOfValuesMatchType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ListOfValuesMatchTypeFromJSON(json: any): ListOfValuesMatchType {
    return ListOfValuesMatchTypeFromJSONTyped(json, false);
}

export function ListOfValuesMatchTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ListOfValuesMatchType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'closeMatchingItems': !exists(json, 'closeMatchingItems') ? undefined : ((json['closeMatchingItems'] as Array<any>).map(ItemTypeFromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'lovName': !exists(json, 'lovName') ? undefined : json['lovName'],
        'matchingItems': !exists(json, 'matchingItems') ? undefined : ((json['matchingItems'] as Array<any>).map(ItemTypeFromJSON)),
        'nonMatchingItems': !exists(json, 'nonMatchingItems') ? undefined : ((json['nonMatchingItems'] as Array<any>).map(ItemTypeFromJSON)),
    };
}

export function ListOfValuesMatchTypeToJSON(value?: ListOfValuesMatchType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'closeMatchingItems': value.closeMatchingItems === undefined ? undefined : ((value.closeMatchingItems as Array<any>).map(ItemTypeToJSON)),
        'description': value.description,
        'lovName': value.lovName,
        'matchingItems': value.matchingItems === undefined ? undefined : ((value.matchingItems as Array<any>).map(ItemTypeToJSON)),
        'nonMatchingItems': value.nonMatchingItems === undefined ? undefined : ((value.nonMatchingItems as Array<any>).map(ItemTypeToJSON)),
    };
}

