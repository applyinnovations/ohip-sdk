/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A representation of the information contained by an address format.
 * @export
 * @interface AddressFormatType
 */
export interface AddressFormatType {
    /**
     * Address format code.
     * @type {string}
     * @memberof AddressFormatType
     */
    formatCode?: string;
    /**
     * Address format definition with the elements of the address.
     * @type {string}
     * @memberof AddressFormatType
     */
    formatDefinition?: string;
    /**
     * Description of the address format.
     * @type {string}
     * @memberof AddressFormatType
     */
    description?: string;
    /**
     * sequence number of the address format.
     * @type {number}
     * @memberof AddressFormatType
     */
    displayOrder?: number;
    /**
     * An example address formatted with the current format definition.
     * @type {string}
     * @memberof AddressFormatType
     */
    formattedExample?: string;
    /**
     * Determines if the format is a sales format or not.
     * @type {boolean}
     * @memberof AddressFormatType
     */
    salesFormat?: boolean;
    /**
     * Determines whether this address format can be deleted.
     * @type {boolean}
     * @memberof AddressFormatType
     */
    canDelete?: boolean;
}

/**
 * Check if a given object implements the AddressFormatType interface.
 */
export function instanceOfAddressFormatType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AddressFormatTypeFromJSON(json: any): AddressFormatType {
    return AddressFormatTypeFromJSONTyped(json, false);
}

export function AddressFormatTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressFormatType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'formatCode': !exists(json, 'formatCode') ? undefined : json['formatCode'],
        'formatDefinition': !exists(json, 'formatDefinition') ? undefined : json['formatDefinition'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displayOrder': !exists(json, 'displayOrder') ? undefined : json['displayOrder'],
        'formattedExample': !exists(json, 'formattedExample') ? undefined : json['formattedExample'],
        'salesFormat': !exists(json, 'salesFormat') ? undefined : json['salesFormat'],
        'canDelete': !exists(json, 'canDelete') ? undefined : json['canDelete'],
    };
}

export function AddressFormatTypeToJSON(value?: AddressFormatType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'formatCode': value.formatCode,
        'formatDefinition': value.formatDefinition,
        'description': value.description,
        'displayOrder': value.displayOrder,
        'formattedExample': value.formattedExample,
        'salesFormat': value.salesFormat,
        'canDelete': value.canDelete,
    };
}

