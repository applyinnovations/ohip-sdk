/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateRuleMembershipType } from './RateRuleMembershipType';
import {
    RateRuleMembershipTypeFromJSON,
    RateRuleMembershipTypeFromJSONTyped,
    RateRuleMembershipTypeToJSON,
} from './RateRuleMembershipType';

/**
 * Membership Rate summary information.
 * @export
 * @interface MembershipRateType
 */
export interface MembershipRateType {
    /**
     * Membership Rate hotel code.
     * @type {string}
     * @memberof MembershipRateType
     */
    hotelId?: string;
    /**
     * Membership Rate rule code.
     * @type {string}
     * @memberof MembershipRateType
     */
    ruleCode?: string;
    /**
     * Description of the rule.
     * @type {string}
     * @memberof MembershipRateType
     */
    description?: string;
    /**
     * Date for which the rule will be affective.
     * @type {string}
     * @memberof MembershipRateType
     */
    beginDate?: string;
    /**
     * Date for which the rule will end being affective.
     * @type {string}
     * @memberof MembershipRateType
     */
    endDate?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MembershipRateType
     */
    ratePlanCodes?: Array<string>;
    /**
     * Rate rule membership type details.
     * @type {Array<RateRuleMembershipType>}
     * @memberof MembershipRateType
     */
    memberships?: Array<RateRuleMembershipType>;
    /**
     * Latest time of booking for guaranteed availability. Only Time part is used.
     * @type {string}
     * @memberof MembershipRateType
     */
    latestTOB?: string;
    /**
     * Number of days to day of arrival for guaranteed availability.
     * @type {number}
     * @memberof MembershipRateType
     */
    daysToDOA?: number;
    /**
     * Indicates whether the Membership Rate is Active/Inactive.
     * @type {boolean}
     * @memberof MembershipRateType
     */
    inactive?: boolean;
    /**
     * Indicates whether the rule is used for member guaranteed availability.
     * @type {boolean}
     * @memberof MembershipRateType
     */
    guaranteed?: boolean;
}

/**
 * Check if a given object implements the MembershipRateType interface.
 */
export function instanceOfMembershipRateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipRateTypeFromJSON(json: any): MembershipRateType {
    return MembershipRateTypeFromJSONTyped(json, false);
}

export function MembershipRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipRateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'ruleCode': !exists(json, 'ruleCode') ? undefined : json['ruleCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'beginDate': !exists(json, 'beginDate') ? undefined : json['beginDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'ratePlanCodes': !exists(json, 'ratePlanCodes') ? undefined : json['ratePlanCodes'],
        'memberships': !exists(json, 'memberships') ? undefined : ((json['memberships'] as Array<any>).map(RateRuleMembershipTypeFromJSON)),
        'latestTOB': !exists(json, 'latestTOB') ? undefined : json['latestTOB'],
        'daysToDOA': !exists(json, 'daysToDOA') ? undefined : json['daysToDOA'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'guaranteed': !exists(json, 'guaranteed') ? undefined : json['guaranteed'],
    };
}

export function MembershipRateTypeToJSON(value?: MembershipRateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'ruleCode': value.ruleCode,
        'description': value.description,
        'beginDate': value.beginDate,
        'endDate': value.endDate,
        'ratePlanCodes': value.ratePlanCodes,
        'memberships': value.memberships === undefined ? undefined : ((value.memberships as Array<any>).map(RateRuleMembershipTypeToJSON)),
        'latestTOB': value.latestTOB,
        'daysToDOA': value.daysToDOA,
        'inactive': value.inactive,
        'guaranteed': value.guaranteed,
    };
}

