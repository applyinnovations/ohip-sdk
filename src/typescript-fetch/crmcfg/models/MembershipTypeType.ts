/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttachMembershipToReservationRuleType } from './AttachMembershipToReservationRuleType';
import {
    AttachMembershipToReservationRuleTypeFromJSON,
    AttachMembershipToReservationRuleTypeFromJSONTyped,
    AttachMembershipToReservationRuleTypeToJSON,
} from './AttachMembershipToReservationRuleType';
import type { AutoGenerateCardNumberType } from './AutoGenerateCardNumberType';
import {
    AutoGenerateCardNumberTypeFromJSON,
    AutoGenerateCardNumberTypeFromJSONTyped,
    AutoGenerateCardNumberTypeToJSON,
} from './AutoGenerateCardNumberType';
import type { AwardPointsType } from './AwardPointsType';
import {
    AwardPointsTypeFromJSON,
    AwardPointsTypeFromJSONTyped,
    AwardPointsTypeToJSON,
} from './AwardPointsType';
import type { CardNumberDetailsType } from './CardNumberDetailsType';
import {
    CardNumberDetailsTypeFromJSON,
    CardNumberDetailsTypeFromJSONTyped,
    CardNumberDetailsTypeToJSON,
} from './CardNumberDetailsType';
import type { EnrollmentMatchRuleType } from './EnrollmentMatchRuleType';
import {
    EnrollmentMatchRuleTypeFromJSON,
    EnrollmentMatchRuleTypeFromJSONTyped,
    EnrollmentMatchRuleTypeToJSON,
} from './EnrollmentMatchRuleType';
import type { ManagedByOptions } from './ManagedByOptions';
import {
    ManagedByOptionsFromJSON,
    ManagedByOptionsFromJSONTyped,
    ManagedByOptionsToJSON,
} from './ManagedByOptions';
import type { MembershipActionType } from './MembershipActionType';
import {
    MembershipActionTypeFromJSON,
    MembershipActionTypeFromJSONTyped,
    MembershipActionTypeToJSON,
} from './MembershipActionType';
import type { MembershipAwardGenerationMethodType } from './MembershipAwardGenerationMethodType';
import {
    MembershipAwardGenerationMethodTypeFromJSON,
    MembershipAwardGenerationMethodTypeFromJSONTyped,
    MembershipAwardGenerationMethodTypeToJSON,
} from './MembershipAwardGenerationMethodType';
import type { MembershipHandlingType } from './MembershipHandlingType';
import {
    MembershipHandlingTypeFromJSON,
    MembershipHandlingTypeFromJSONTyped,
    MembershipHandlingTypeToJSON,
} from './MembershipHandlingType';
import type { MembershipLevelType } from './MembershipLevelType';
import {
    MembershipLevelTypeFromJSON,
    MembershipLevelTypeFromJSONTyped,
    MembershipLevelTypeToJSON,
} from './MembershipLevelType';
import type { MembershipTypeAdditionalInfoType } from './MembershipTypeAdditionalInfoType';
import {
    MembershipTypeAdditionalInfoTypeFromJSON,
    MembershipTypeAdditionalInfoTypeFromJSONTyped,
    MembershipTypeAdditionalInfoTypeToJSON,
} from './MembershipTypeAdditionalInfoType';
import type { TierPointsType } from './TierPointsType';
import {
    TierPointsTypeFromJSON,
    TierPointsTypeFromJSONTyped,
    TierPointsTypeToJSON,
} from './TierPointsType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * A representation of the information contained by a membership type.
 * @export
 * @interface MembershipTypeType
 */
export interface MembershipTypeType {
    /**
     * Membership Type code.
     * @type {string}
     * @memberof MembershipTypeType
     */
    membershipType?: string;
    /**
     * Membership Class code.
     * @type {string}
     * @memberof MembershipTypeType
     */
    membershipClass?: string;
    /**
     * Description of the membership type.
     * @type {string}
     * @memberof MembershipTypeType
     */
    description?: string;
    /**
     * Label used to refer to points for this membership type
     * @type {string}
     * @memberof MembershipTypeType
     */
    pointsLabel?: string;
    /**
     * Indicates if this membership type has a point calculation rule.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    hasPointCalculationRule?: boolean;
    /**
     * Defines the priority order of this membership type.
     * @type {number}
     * @memberof MembershipTypeType
     */
    ranking?: number;
    /**
     * Sequence number that controls the position of the membership type when displayed in lists.
     * @type {number}
     * @memberof MembershipTypeType
     */
    sequence?: number;
    /**
     * 
     * @type {CardNumberDetailsType}
     * @memberof MembershipTypeType
     */
    cardDetails?: CardNumberDetailsType;
    /**
     * 
     * @type {AutoGenerateCardNumberType}
     * @memberof MembershipTypeType
     */
    cardNumberAutoGenerateDetails?: AutoGenerateCardNumberType;
    /**
     * 
     * @type {AutoGenerateCardNumberType}
     * @memberof MembershipTypeType
     */
    cardNumberAutoGenerateDetailsForOWS?: AutoGenerateCardNumberType;
    /**
     * The currency in which user would like to calculate the membership points.
     * @type {string}
     * @memberof MembershipTypeType
     */
    currency?: string;
    /**
     * 
     * @type {MembershipActionType}
     * @memberof MembershipTypeType
     */
    membershipAction?: MembershipActionType;
    /**
     * Exchange type to be used in the currency conversion.
     * @type {string}
     * @memberof MembershipTypeType
     */
    exchangeType?: string;
    /**
     * The cost per point.
     * @type {string}
     * @memberof MembershipTypeType
     */
    pointCost?: string;
    /**
     * Indicates when the membership action to be taken .
     * @type {Array<AttachMembershipToReservationRuleType>}
     * @memberof MembershipTypeType
     */
    attachMembershipToReservationRule?: Array<AttachMembershipToReservationRuleType>;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof MembershipTypeType
     */
    memberFolioMessage?: TranslationTextType2000;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof MembershipTypeType
     */
    nonMemberFolioMessage?: TranslationTextType2000;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof MembershipTypeType
     */
    folioMessageFBAPosting?: TranslationTextType2000;
    /**
     * 
     * @type {MembershipAwardGenerationMethodType}
     * @memberof MembershipTypeType
     */
    awardGenerationMethod?: MembershipAwardGenerationMethodType;
    /**
     * 
     * @type {AwardPointsType}
     * @memberof MembershipTypeType
     */
    awardPointsDetail?: AwardPointsType;
    /**
     * 
     * @type {TierPointsType}
     * @memberof MembershipTypeType
     */
    tierPointsDetails?: TierPointsType;
    /**
     * 
     * @type {MembershipTypeAdditionalInfoType}
     * @memberof MembershipTypeType
     */
    additionalDetails?: MembershipTypeAdditionalInfoType;
    /**
     * 
     * @type {MembershipHandlingType}
     * @memberof MembershipTypeType
     */
    handlingDetails?: MembershipHandlingType;
    /**
     * Collection of membership levels
     * @type {Array<MembershipLevelType>}
     * @memberof MembershipTypeType
     */
    membershipLevels?: Array<MembershipLevelType>;
    /**
     * 
     * @type {EnrollmentMatchRuleType}
     * @memberof MembershipTypeType
     */
    enrollmentMatchRule?: EnrollmentMatchRuleType;
    /**
     * Indicates if the membership type is inactive.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    inactive?: boolean;
    /**
     * Indicates exclude profiles with an active membership of this type from the automatic purge utility.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    excludeProfileFromPurge?: boolean;
    /**
     * Indicates that the award points to each membership holder attached to the shared reservation.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    allowShares?: boolean;
    /**
     * Indicates that the reservation that is eligible for points would have its data processed by the End of Day procedures and transferred to the interface.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    sendCheckoutToInterface?: boolean;
    /**
     * Allows the user to input a value by which the base number of points is multiplied.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    multiplier?: boolean;
    /**
     * Indicates how the award points for this membership type will be managed.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    centralSetup?: boolean;
    /**
     * This flag indicates whether the membership class attached to the membership type is eligible for loyalty program or not.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    isLoyaltyProgram?: boolean;
    /**
     * Indicates whether enrollment code is required or not.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentCodeRequiredYn?: boolean;
    /**
     * Indicates the membership type is for a Booker.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    bookerProgramYn?: boolean;
    /**
     * Add the booker membership to company profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    companyYn?: boolean;
    /**
     * Add the booker membership to travel agent profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    travelAgentYn?: boolean;
    /**
     * Add the booker membership to source profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    sourceYn?: boolean;
    /**
     * Add the booker membership to group profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    groupYn?: boolean;
    /**
     * Add the booker membership to contact profile type.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    contactYn?: boolean;
    /**
     * Flag that affects how a Membership Type is added, edited or deleted from a profile.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    externallyControlled?: boolean;
    /**
     * Flag that indicates Profile Address is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentAddressAllowed?: boolean;
    /**
     * Flag that indicates Profile Communication is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentCommunicationAllowed?: boolean;
    /**
     * Flag that indicates Fee is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentFeeAllowed?: boolean;
    /**
     * Flag that indicates Birthdate field is editable during Enrollment.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    enrollmentBirthdateAllowed?: boolean;
    /**
     * Indicates whether to re-issue the membership card or not, when it is lost / stolen.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    reIssueNewCard?: boolean;
    /**
     * Indicates whether primary membership or not.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    primaryMembership?: boolean;
    /**
     * Print Folio Message on confirmation.
     * @type {boolean}
     * @memberof MembershipTypeType
     */
    printFolioMsgOnConfirmation?: boolean;
    /**
     * Indicates database for external system for Membership Type.
     * @type {string}
     * @memberof MembershipTypeType
     */
    externalDatabase?: string;
    /**
     * 
     * @type {ManagedByOptions}
     * @memberof MembershipTypeType
     */
    managedBy?: ManagedByOptions;
}

/**
 * Check if a given object implements the MembershipTypeType interface.
 */
export function instanceOfMembershipTypeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTypeTypeFromJSON(json: any): MembershipTypeType {
    return MembershipTypeTypeFromJSONTyped(json, false);
}

export function MembershipTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTypeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'membershipClass': !exists(json, 'membershipClass') ? undefined : json['membershipClass'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'pointsLabel': !exists(json, 'pointsLabel') ? undefined : json['pointsLabel'],
        'hasPointCalculationRule': !exists(json, 'hasPointCalculationRule') ? undefined : json['hasPointCalculationRule'],
        'ranking': !exists(json, 'ranking') ? undefined : json['ranking'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'cardDetails': !exists(json, 'cardDetails') ? undefined : CardNumberDetailsTypeFromJSON(json['cardDetails']),
        'cardNumberAutoGenerateDetails': !exists(json, 'cardNumberAutoGenerateDetails') ? undefined : AutoGenerateCardNumberTypeFromJSON(json['cardNumberAutoGenerateDetails']),
        'cardNumberAutoGenerateDetailsForOWS': !exists(json, 'cardNumberAutoGenerateDetailsForOWS') ? undefined : AutoGenerateCardNumberTypeFromJSON(json['cardNumberAutoGenerateDetailsForOWS']),
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'membershipAction': !exists(json, 'membershipAction') ? undefined : MembershipActionTypeFromJSON(json['membershipAction']),
        'exchangeType': !exists(json, 'exchangeType') ? undefined : json['exchangeType'],
        'pointCost': !exists(json, 'pointCost') ? undefined : json['pointCost'],
        'attachMembershipToReservationRule': !exists(json, 'attachMembershipToReservationRule') ? undefined : ((json['attachMembershipToReservationRule'] as Array<any>).map(AttachMembershipToReservationRuleTypeFromJSON)),
        'memberFolioMessage': !exists(json, 'memberFolioMessage') ? undefined : TranslationTextType2000FromJSON(json['memberFolioMessage']),
        'nonMemberFolioMessage': !exists(json, 'nonMemberFolioMessage') ? undefined : TranslationTextType2000FromJSON(json['nonMemberFolioMessage']),
        'folioMessageFBAPosting': !exists(json, 'folioMessageFBAPosting') ? undefined : TranslationTextType2000FromJSON(json['folioMessageFBAPosting']),
        'awardGenerationMethod': !exists(json, 'awardGenerationMethod') ? undefined : MembershipAwardGenerationMethodTypeFromJSON(json['awardGenerationMethod']),
        'awardPointsDetail': !exists(json, 'awardPointsDetail') ? undefined : AwardPointsTypeFromJSON(json['awardPointsDetail']),
        'tierPointsDetails': !exists(json, 'tierPointsDetails') ? undefined : TierPointsTypeFromJSON(json['tierPointsDetails']),
        'additionalDetails': !exists(json, 'additionalDetails') ? undefined : MembershipTypeAdditionalInfoTypeFromJSON(json['additionalDetails']),
        'handlingDetails': !exists(json, 'handlingDetails') ? undefined : MembershipHandlingTypeFromJSON(json['handlingDetails']),
        'membershipLevels': !exists(json, 'membershipLevels') ? undefined : ((json['membershipLevels'] as Array<any>).map(MembershipLevelTypeFromJSON)),
        'enrollmentMatchRule': !exists(json, 'enrollmentMatchRule') ? undefined : EnrollmentMatchRuleTypeFromJSON(json['enrollmentMatchRule']),
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'excludeProfileFromPurge': !exists(json, 'excludeProfileFromPurge') ? undefined : json['excludeProfileFromPurge'],
        'allowShares': !exists(json, 'allowShares') ? undefined : json['allowShares'],
        'sendCheckoutToInterface': !exists(json, 'sendCheckoutToInterface') ? undefined : json['sendCheckoutToInterface'],
        'multiplier': !exists(json, 'multiplier') ? undefined : json['multiplier'],
        'centralSetup': !exists(json, 'centralSetup') ? undefined : json['centralSetup'],
        'isLoyaltyProgram': !exists(json, 'isLoyaltyProgram') ? undefined : json['isLoyaltyProgram'],
        'enrollmentCodeRequiredYn': !exists(json, 'enrollmentCodeRequiredYn') ? undefined : json['enrollmentCodeRequiredYn'],
        'bookerProgramYn': !exists(json, 'bookerProgramYn') ? undefined : json['bookerProgramYn'],
        'companyYn': !exists(json, 'companyYn') ? undefined : json['companyYn'],
        'travelAgentYn': !exists(json, 'travelAgentYn') ? undefined : json['travelAgentYn'],
        'sourceYn': !exists(json, 'sourceYn') ? undefined : json['sourceYn'],
        'groupYn': !exists(json, 'groupYn') ? undefined : json['groupYn'],
        'contactYn': !exists(json, 'contactYn') ? undefined : json['contactYn'],
        'externallyControlled': !exists(json, 'externallyControlled') ? undefined : json['externallyControlled'],
        'enrollmentAddressAllowed': !exists(json, 'enrollmentAddressAllowed') ? undefined : json['enrollmentAddressAllowed'],
        'enrollmentCommunicationAllowed': !exists(json, 'enrollmentCommunicationAllowed') ? undefined : json['enrollmentCommunicationAllowed'],
        'enrollmentFeeAllowed': !exists(json, 'enrollmentFeeAllowed') ? undefined : json['enrollmentFeeAllowed'],
        'enrollmentBirthdateAllowed': !exists(json, 'enrollmentBirthdateAllowed') ? undefined : json['enrollmentBirthdateAllowed'],
        'reIssueNewCard': !exists(json, 'reIssueNewCard') ? undefined : json['reIssueNewCard'],
        'primaryMembership': !exists(json, 'primaryMembership') ? undefined : json['primaryMembership'],
        'printFolioMsgOnConfirmation': !exists(json, 'printFolioMsgOnConfirmation') ? undefined : json['printFolioMsgOnConfirmation'],
        'externalDatabase': !exists(json, 'externalDatabase') ? undefined : json['externalDatabase'],
        'managedBy': !exists(json, 'managedBy') ? undefined : ManagedByOptionsFromJSON(json['managedBy']),
    };
}

export function MembershipTypeTypeToJSON(value?: MembershipTypeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'membershipType': value.membershipType,
        'membershipClass': value.membershipClass,
        'description': value.description,
        'pointsLabel': value.pointsLabel,
        'hasPointCalculationRule': value.hasPointCalculationRule,
        'ranking': value.ranking,
        'sequence': value.sequence,
        'cardDetails': CardNumberDetailsTypeToJSON(value.cardDetails),
        'cardNumberAutoGenerateDetails': AutoGenerateCardNumberTypeToJSON(value.cardNumberAutoGenerateDetails),
        'cardNumberAutoGenerateDetailsForOWS': AutoGenerateCardNumberTypeToJSON(value.cardNumberAutoGenerateDetailsForOWS),
        'currency': value.currency,
        'membershipAction': MembershipActionTypeToJSON(value.membershipAction),
        'exchangeType': value.exchangeType,
        'pointCost': value.pointCost,
        'attachMembershipToReservationRule': value.attachMembershipToReservationRule === undefined ? undefined : ((value.attachMembershipToReservationRule as Array<any>).map(AttachMembershipToReservationRuleTypeToJSON)),
        'memberFolioMessage': TranslationTextType2000ToJSON(value.memberFolioMessage),
        'nonMemberFolioMessage': TranslationTextType2000ToJSON(value.nonMemberFolioMessage),
        'folioMessageFBAPosting': TranslationTextType2000ToJSON(value.folioMessageFBAPosting),
        'awardGenerationMethod': MembershipAwardGenerationMethodTypeToJSON(value.awardGenerationMethod),
        'awardPointsDetail': AwardPointsTypeToJSON(value.awardPointsDetail),
        'tierPointsDetails': TierPointsTypeToJSON(value.tierPointsDetails),
        'additionalDetails': MembershipTypeAdditionalInfoTypeToJSON(value.additionalDetails),
        'handlingDetails': MembershipHandlingTypeToJSON(value.handlingDetails),
        'membershipLevels': value.membershipLevels === undefined ? undefined : ((value.membershipLevels as Array<any>).map(MembershipLevelTypeToJSON)),
        'enrollmentMatchRule': EnrollmentMatchRuleTypeToJSON(value.enrollmentMatchRule),
        'inactive': value.inactive,
        'excludeProfileFromPurge': value.excludeProfileFromPurge,
        'allowShares': value.allowShares,
        'sendCheckoutToInterface': value.sendCheckoutToInterface,
        'multiplier': value.multiplier,
        'centralSetup': value.centralSetup,
        'isLoyaltyProgram': value.isLoyaltyProgram,
        'enrollmentCodeRequiredYn': value.enrollmentCodeRequiredYn,
        'bookerProgramYn': value.bookerProgramYn,
        'companyYn': value.companyYn,
        'travelAgentYn': value.travelAgentYn,
        'sourceYn': value.sourceYn,
        'groupYn': value.groupYn,
        'contactYn': value.contactYn,
        'externallyControlled': value.externallyControlled,
        'enrollmentAddressAllowed': value.enrollmentAddressAllowed,
        'enrollmentCommunicationAllowed': value.enrollmentCommunicationAllowed,
        'enrollmentFeeAllowed': value.enrollmentFeeAllowed,
        'enrollmentBirthdateAllowed': value.enrollmentBirthdateAllowed,
        'reIssueNewCard': value.reIssueNewCard,
        'primaryMembership': value.primaryMembership,
        'printFolioMsgOnConfirmation': value.printFolioMsgOnConfirmation,
        'externalDatabase': value.externalDatabase,
        'managedBy': ManagedByOptionsToJSON(value.managedBy),
    };
}

