/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MembershipTypeRuleBasedOnType } from './MembershipTypeRuleBasedOnType';
import {
    MembershipTypeRuleBasedOnTypeFromJSON,
    MembershipTypeRuleBasedOnTypeFromJSONTyped,
    MembershipTypeRuleBasedOnTypeToJSON,
} from './MembershipTypeRuleBasedOnType';
import type { MembershipTypeRuleIDType } from './MembershipTypeRuleIDType';
import {
    MembershipTypeRuleIDTypeFromJSON,
    MembershipTypeRuleIDTypeFromJSONTyped,
    MembershipTypeRuleIDTypeToJSON,
} from './MembershipTypeRuleIDType';
import type { MembershipTypeRuleTransactionCodeType } from './MembershipTypeRuleTransactionCodeType';
import {
    MembershipTypeRuleTransactionCodeTypeFromJSON,
    MembershipTypeRuleTransactionCodeTypeFromJSONTyped,
    MembershipTypeRuleTransactionCodeTypeToJSON,
} from './MembershipTypeRuleTransactionCodeType';
import type { RulePointsTypeType } from './RulePointsTypeType';
import {
    RulePointsTypeTypeFromJSON,
    RulePointsTypeTypeFromJSONTyped,
    RulePointsTypeTypeToJSON,
} from './RulePointsTypeType';

/**
 * Membership Type rule primary information.
 * @export
 * @interface MembershipTypeRulePrimaryDetailsType
 */
export interface MembershipTypeRulePrimaryDetailsType {
    /**
     * 
     * @type {MembershipTypeRuleIDType}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    membershipTypeRuleId?: MembershipTypeRuleIDType;
    /**
     * Description of the rule.
     * @type {string}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    description?: string;
    /**
     * 
     * @type {MembershipTypeRuleBasedOnType}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    ruleBasedOn?: MembershipTypeRuleBasedOnType;
    /**
     * Start date indicates the begin date for this points calculation rule.
     * @type {string}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    ruleStartDate?: string;
    /**
     * End date for this points calculation rule.
     * @type {string}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    ruleEndDate?: string;
    /**
     * 
     * @type {RulePointsTypeType}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    pointsType?: RulePointsTypeType;
    /**
     * The date that Membership type rule is marked as inactive.
     * @type {string}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    inactiveDate?: string;
    /**
     * 
     * @type {MembershipTypeRuleTransactionCodeType}
     * @memberof MembershipTypeRulePrimaryDetailsType
     */
    transactionCode?: MembershipTypeRuleTransactionCodeType;
}

/**
 * Check if a given object implements the MembershipTypeRulePrimaryDetailsType interface.
 */
export function instanceOfMembershipTypeRulePrimaryDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTypeRulePrimaryDetailsTypeFromJSON(json: any): MembershipTypeRulePrimaryDetailsType {
    return MembershipTypeRulePrimaryDetailsTypeFromJSONTyped(json, false);
}

export function MembershipTypeRulePrimaryDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTypeRulePrimaryDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'membershipTypeRuleId': !exists(json, 'membershipTypeRuleId') ? undefined : MembershipTypeRuleIDTypeFromJSON(json['membershipTypeRuleId']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'ruleBasedOn': !exists(json, 'ruleBasedOn') ? undefined : MembershipTypeRuleBasedOnTypeFromJSON(json['ruleBasedOn']),
        'ruleStartDate': !exists(json, 'ruleStartDate') ? undefined : json['ruleStartDate'],
        'ruleEndDate': !exists(json, 'ruleEndDate') ? undefined : json['ruleEndDate'],
        'pointsType': !exists(json, 'pointsType') ? undefined : RulePointsTypeTypeFromJSON(json['pointsType']),
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : json['inactiveDate'],
        'transactionCode': !exists(json, 'transactionCode') ? undefined : MembershipTypeRuleTransactionCodeTypeFromJSON(json['transactionCode']),
    };
}

export function MembershipTypeRulePrimaryDetailsTypeToJSON(value?: MembershipTypeRulePrimaryDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'membershipTypeRuleId': MembershipTypeRuleIDTypeToJSON(value.membershipTypeRuleId),
        'description': value.description,
        'ruleBasedOn': MembershipTypeRuleBasedOnTypeToJSON(value.ruleBasedOn),
        'ruleStartDate': value.ruleStartDate,
        'ruleEndDate': value.ruleEndDate,
        'pointsType': RulePointsTypeTypeToJSON(value.pointsType),
        'inactiveDate': value.inactiveDate,
        'transactionCode': MembershipTypeRuleTransactionCodeTypeToJSON(value.transactionCode),
    };
}

