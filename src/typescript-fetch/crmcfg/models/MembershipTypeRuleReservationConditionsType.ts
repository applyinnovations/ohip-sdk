/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Membership Type Rules reservation conditions.
 * @export
 * @interface MembershipTypeRuleReservationConditionsType
 */
export interface MembershipTypeRuleReservationConditionsType {
    /**
     * Reservations with start date for which the rule is applied.
     * @type {string}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    reservationStartDate?: string;
    /**
     * Reservations with end date for which the rule is applied.
     * @type {string}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    reservationEndDate?: string;
    /**
     * Minimum length of stay required to receive points if membership type is based on STAY.
     * @type {number}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    minimumNights?: number;
    /**
     * Maximum length of stay required to receive points if membership type is based on NIGHTS.
     * @type {number}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    maximumNights?: number;
    /**
     * Number of days from enrolment.
     * @type {number}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    daysFromEnrollment?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    sunday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    monday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    tuesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    wednesday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    thursday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    friday?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MembershipTypeRuleReservationConditionsType
     */
    saturday?: boolean;
}

/**
 * Check if a given object implements the MembershipTypeRuleReservationConditionsType interface.
 */
export function instanceOfMembershipTypeRuleReservationConditionsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTypeRuleReservationConditionsTypeFromJSON(json: any): MembershipTypeRuleReservationConditionsType {
    return MembershipTypeRuleReservationConditionsTypeFromJSONTyped(json, false);
}

export function MembershipTypeRuleReservationConditionsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTypeRuleReservationConditionsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationStartDate': !exists(json, 'reservationStartDate') ? undefined : json['reservationStartDate'],
        'reservationEndDate': !exists(json, 'reservationEndDate') ? undefined : json['reservationEndDate'],
        'minimumNights': !exists(json, 'minimumNights') ? undefined : json['minimumNights'],
        'maximumNights': !exists(json, 'maximumNights') ? undefined : json['maximumNights'],
        'daysFromEnrollment': !exists(json, 'daysFromEnrollment') ? undefined : json['daysFromEnrollment'],
        'sunday': !exists(json, 'sunday') ? undefined : json['sunday'],
        'monday': !exists(json, 'monday') ? undefined : json['monday'],
        'tuesday': !exists(json, 'tuesday') ? undefined : json['tuesday'],
        'wednesday': !exists(json, 'wednesday') ? undefined : json['wednesday'],
        'thursday': !exists(json, 'thursday') ? undefined : json['thursday'],
        'friday': !exists(json, 'friday') ? undefined : json['friday'],
        'saturday': !exists(json, 'saturday') ? undefined : json['saturday'],
    };
}

export function MembershipTypeRuleReservationConditionsTypeToJSON(value?: MembershipTypeRuleReservationConditionsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationStartDate': value.reservationStartDate,
        'reservationEndDate': value.reservationEndDate,
        'minimumNights': value.minimumNights,
        'maximumNights': value.maximumNights,
        'daysFromEnrollment': value.daysFromEnrollment,
        'sunday': value.sunday,
        'monday': value.monday,
        'tuesday': value.tuesday,
        'wednesday': value.wednesday,
        'thursday': value.thursday,
        'friday': value.friday,
        'saturday': value.saturday,
    };
}

