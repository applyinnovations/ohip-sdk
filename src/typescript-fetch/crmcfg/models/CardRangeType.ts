/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Card number start and end range.
 * @export
 * @interface CardRangeType
 */
export interface CardRangeType {
    /**
     * Starting range of the card.
     * @type {string}
     * @memberof CardRangeType
     */
    from?: string;
    /**
     * End range of the card.
     * @type {string}
     * @memberof CardRangeType
     */
    to?: string;
}

/**
 * Check if a given object implements the CardRangeType interface.
 */
export function instanceOfCardRangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CardRangeTypeFromJSON(json: any): CardRangeType {
    return CardRangeTypeFromJSONTyped(json, false);
}

export function CardRangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardRangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': !exists(json, 'from') ? undefined : json['from'],
        'to': !exists(json, 'to') ? undefined : json['to'],
    };
}

export function CardRangeTypeToJSON(value?: CardRangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': value.from,
        'to': value.to,
    };
}

