/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileNameValidationTypeType } from './ProfileNameValidationTypeType';
import {
    ProfileNameValidationTypeTypeFromJSON,
    ProfileNameValidationTypeTypeFromJSONTyped,
    ProfileNameValidationTypeTypeToJSON,
} from './ProfileNameValidationTypeType';

/**
 * Provides information about the Profile Names.
 * @export
 * @interface ProfileNameValidationType
 */
export interface ProfileNameValidationType {
    /**
     * 
     * @type {ProfileNameValidationTypeType}
     * @memberof ProfileNameValidationType
     */
    type?: ProfileNameValidationTypeType;
    /**
     * Name of the Profile.
     * @type {string}
     * @memberof ProfileNameValidationType
     */
    name?: string;
}

/**
 * Check if a given object implements the ProfileNameValidationType interface.
 */
export function instanceOfProfileNameValidationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileNameValidationTypeFromJSON(json: any): ProfileNameValidationType {
    return ProfileNameValidationTypeFromJSONTyped(json, false);
}

export function ProfileNameValidationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileNameValidationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : ProfileNameValidationTypeTypeFromJSON(json['type']),
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function ProfileNameValidationTypeToJSON(value?: ProfileNameValidationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ProfileNameValidationTypeTypeToJSON(value.type),
        'name': value.name,
    };
}

