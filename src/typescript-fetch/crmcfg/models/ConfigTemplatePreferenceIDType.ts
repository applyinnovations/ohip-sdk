/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Base details common between both template and property level preference ids.
 * @export
 * @interface ConfigTemplatePreferenceIDType
 */
export interface ConfigTemplatePreferenceIDType {
    /**
     * Specifies the preference code.
     * @type {string}
     * @memberof ConfigTemplatePreferenceIDType
     */
    code?: string;
    /**
     * Specifies the preference group the preference belongs to.
     * @type {string}
     * @memberof ConfigTemplatePreferenceIDType
     */
    preferenceGroup?: string;
}

/**
 * Check if a given object implements the ConfigTemplatePreferenceIDType interface.
 */
export function instanceOfConfigTemplatePreferenceIDType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigTemplatePreferenceIDTypeFromJSON(json: any): ConfigTemplatePreferenceIDType {
    return ConfigTemplatePreferenceIDTypeFromJSONTyped(json, false);
}

export function ConfigTemplatePreferenceIDTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigTemplatePreferenceIDType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'preferenceGroup': !exists(json, 'preferenceGroup') ? undefined : json['preferenceGroup'],
    };
}

export function ConfigTemplatePreferenceIDTypeToJSON(value?: ConfigTemplatePreferenceIDType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'preferenceGroup': value.preferenceGroup,
    };
}

