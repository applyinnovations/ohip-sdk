/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';

/**
 * Type that holds key values, that uniquely identifies a membership benefit program
 * @export
 * @interface MembershipBenefitProgramType
 */
export interface MembershipBenefitProgramType {
    /**
     * Benefit Code
     * @type {string}
     * @memberof MembershipBenefitProgramType
     */
    code?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof MembershipBenefitProgramType
     */
    dateRange?: DateRangeType;
    /**
     * Description of the Membership Benefit Program.
     * @type {string}
     * @memberof MembershipBenefitProgramType
     */
    description?: string;
    /**
     * Flag indicates whether the Membership Benefit Program is active or not.
     * @type {boolean}
     * @memberof MembershipBenefitProgramType
     */
    inactive?: boolean;
    /**
     * Membership type
     * @type {string}
     * @memberof MembershipBenefitProgramType
     */
    membershipType?: string;
    /**
     * Min value for membership level. This is the minimum membership level member gets for enrolling into this program.
     * @type {string}
     * @memberof MembershipBenefitProgramType
     */
    minimumLevel?: string;
}

/**
 * Check if a given object implements the MembershipBenefitProgramType interface.
 */
export function instanceOfMembershipBenefitProgramType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipBenefitProgramTypeFromJSON(json: any): MembershipBenefitProgramType {
    return MembershipBenefitProgramTypeFromJSONTyped(json, false);
}

export function MembershipBenefitProgramTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipBenefitProgramType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'dateRange': !exists(json, 'dateRange') ? undefined : DateRangeTypeFromJSON(json['dateRange']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'minimumLevel': !exists(json, 'minimumLevel') ? undefined : json['minimumLevel'],
    };
}

export function MembershipBenefitProgramTypeToJSON(value?: MembershipBenefitProgramType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'dateRange': DateRangeTypeToJSON(value.dateRange),
        'description': value.description,
        'inactive': value.inactive,
        'membershipType': value.membershipType,
        'minimumLevel': value.minimumLevel,
    };
}

