/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PointsRoundingFlagType } from './PointsRoundingFlagType';
import {
    PointsRoundingFlagTypeFromJSON,
    PointsRoundingFlagTypeFromJSONTyped,
    PointsRoundingFlagTypeToJSON,
} from './PointsRoundingFlagType';

/**
 * Membership Program Rule points details.
 * @export
 * @interface MembershipTypeRulePointsDefinitionType
 */
export interface MembershipTypeRulePointsDefinitionType {
    /**
     * Indicates the cost per point for this membership program.
     * @type {number}
     * @memberof MembershipTypeRulePointsDefinitionType
     */
    costPerPoint?: number;
    /**
     * Determines while calculating points projection should the rule be excluded or included. Default is included(N).
     * @type {boolean}
     * @memberof MembershipTypeRulePointsDefinitionType
     */
    excludePointProjection?: boolean;
    /**
     * Points ratio is expressed in terms of %.
     * @type {boolean}
     * @memberof MembershipTypeRulePointsDefinitionType
     */
    percentagePoints?: boolean;
    /**
     * Specifies the ratio of the points accumulated per Stay or Night or Revenue. This ratio multiplied by the actual Stays or Nights or Revenue will give the Total points accumulated.
     * @type {number}
     * @memberof MembershipTypeRulePointsDefinitionType
     */
    points?: number;
    /**
     * 
     * @type {PointsRoundingFlagType}
     * @memberof MembershipTypeRulePointsDefinitionType
     */
    pointsRoundingFlag?: PointsRoundingFlagType;
    /**
     * Specifies the minimum units needed.
     * @type {number}
     * @memberof MembershipTypeRulePointsDefinitionType
     */
    revenueUnits?: number;
}

/**
 * Check if a given object implements the MembershipTypeRulePointsDefinitionType interface.
 */
export function instanceOfMembershipTypeRulePointsDefinitionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTypeRulePointsDefinitionTypeFromJSON(json: any): MembershipTypeRulePointsDefinitionType {
    return MembershipTypeRulePointsDefinitionTypeFromJSONTyped(json, false);
}

export function MembershipTypeRulePointsDefinitionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTypeRulePointsDefinitionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'costPerPoint': !exists(json, 'costPerPoint') ? undefined : json['costPerPoint'],
        'excludePointProjection': !exists(json, 'excludePointProjection') ? undefined : json['excludePointProjection'],
        'percentagePoints': !exists(json, 'percentagePoints') ? undefined : json['percentagePoints'],
        'points': !exists(json, 'points') ? undefined : json['points'],
        'pointsRoundingFlag': !exists(json, 'pointsRoundingFlag') ? undefined : PointsRoundingFlagTypeFromJSON(json['pointsRoundingFlag']),
        'revenueUnits': !exists(json, 'revenueUnits') ? undefined : json['revenueUnits'],
    };
}

export function MembershipTypeRulePointsDefinitionTypeToJSON(value?: MembershipTypeRulePointsDefinitionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'costPerPoint': value.costPerPoint,
        'excludePointProjection': value.excludePointProjection,
        'percentagePoints': value.percentagePoints,
        'points': value.points,
        'pointsRoundingFlag': PointsRoundingFlagTypeToJSON(value.pointsRoundingFlag),
        'revenueUnits': value.revenueUnits,
    };
}

