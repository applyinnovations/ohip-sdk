/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { MembershipAwardBasedOnType } from './MembershipAwardBasedOnType';
import {
    MembershipAwardBasedOnTypeFromJSON,
    MembershipAwardBasedOnTypeFromJSONTyped,
    MembershipAwardBasedOnTypeToJSON,
} from './MembershipAwardBasedOnType';
import type { MembershipAwardDetailType } from './MembershipAwardDetailType';
import {
    MembershipAwardDetailTypeFromJSON,
    MembershipAwardDetailTypeFromJSONTyped,
    MembershipAwardDetailTypeToJSON,
} from './MembershipAwardDetailType';
import type { MembershipAwardFinancialTransactionInfoType } from './MembershipAwardFinancialTransactionInfoType';
import {
    MembershipAwardFinancialTransactionInfoTypeFromJSON,
    MembershipAwardFinancialTransactionInfoTypeFromJSONTyped,
    MembershipAwardFinancialTransactionInfoTypeToJSON,
} from './MembershipAwardFinancialTransactionInfoType';
import type { MembershipAwardOtherInfoType } from './MembershipAwardOtherInfoType';
import {
    MembershipAwardOtherInfoTypeFromJSON,
    MembershipAwardOtherInfoTypeFromJSONTyped,
    MembershipAwardOtherInfoTypeToJSON,
} from './MembershipAwardOtherInfoType';
import type { MembershipAwardProductInfoType } from './MembershipAwardProductInfoType';
import {
    MembershipAwardProductInfoTypeFromJSON,
    MembershipAwardProductInfoTypeFromJSONTyped,
    MembershipAwardProductInfoTypeToJSON,
} from './MembershipAwardProductInfoType';
import type { MembershipAwardRateInfoType } from './MembershipAwardRateInfoType';
import {
    MembershipAwardRateInfoTypeFromJSON,
    MembershipAwardRateInfoTypeFromJSONTyped,
    MembershipAwardRateInfoTypeToJSON,
} from './MembershipAwardRateInfoType';
import type { MembershipAwardUpgradeInfoType } from './MembershipAwardUpgradeInfoType';
import {
    MembershipAwardUpgradeInfoTypeFromJSON,
    MembershipAwardUpgradeInfoTypeFromJSONTyped,
    MembershipAwardUpgradeInfoTypeToJSON,
} from './MembershipAwardUpgradeInfoType';

/**
 * Values by which membership award is uniquely identied.
 * @export
 * @interface MembershipAwardType
 */
export interface MembershipAwardType {
    /**
     * Indicates if award consumtion is tracked by the system. If value is Y, then system keeps track of availability of award after it is issued.
     * @type {boolean}
     * @memberof MembershipAwardType
     */
    autoConsume?: boolean;
    /**
     * 
     * @type {MembershipAwardBasedOnType}
     * @memberof MembershipAwardType
     */
    awardBasedOn?: MembershipAwardBasedOnType;
    /**
     * Membership Award Code.
     * @type {string}
     * @memberof MembershipAwardType
     */
    awardCode?: string;
    /**
     * Membership Award Rate details.
     * @type {Array<MembershipAwardDetailType>}
     * @memberof MembershipAwardType
     */
    awardDetails?: Array<MembershipAwardDetailType>;
    /**
     * Number of awards to be given.
     * @type {number}
     * @memberof MembershipAwardType
     */
    awardQuantity?: number;
    /**
     * The billing group that represents a billing rule schedule for the membership award.
     * @type {string}
     * @memberof MembershipAwardType
     */
    billingGroup?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof MembershipAwardType
     */
    dateRange?: DateRangeType;
    /**
     * Display sequence of Award.
     * @type {number}
     * @memberof MembershipAwardType
     */
    displaySequence?: number;
    /**
     * 
     * @type {MembershipAwardFinancialTransactionInfoType}
     * @memberof MembershipAwardType
     */
    financialTransactionInfo?: MembershipAwardFinancialTransactionInfoType;
    /**
     * Force verification whether Rate or Product for the Award is valid at reservation.
     * @type {boolean}
     * @memberof MembershipAwardType
     */
    forceVerification?: boolean;
    /**
     * Inactive flag for Membership Award. The award record cannot be deleted.
     * @type {boolean}
     * @memberof MembershipAwardType
     */
    inactive?: boolean;
    /**
     * Detailed description and specification of the Award.
     * @type {string}
     * @memberof MembershipAwardType
     */
    longDescription?: string;
    /**
     * Membership level required for eligibility to receive this award. Other membership levels are not eligible for this award.
     * @type {string}
     * @memberof MembershipAwardType
     */
    membershipLevel?: string;
    /**
     * Membership type for which awards are defined.
     * @type {string}
     * @memberof MembershipAwardType
     */
    membershipType?: string;
    /**
     * 
     * @type {MembershipAwardOtherInfoType}
     * @memberof MembershipAwardType
     */
    otherInfo?: MembershipAwardOtherInfoType;
    /**
     * 
     * @type {MembershipAwardProductInfoType}
     * @memberof MembershipAwardType
     */
    productInfo?: MembershipAwardProductInfoType;
    /**
     * 
     * @type {MembershipAwardRateInfoType}
     * @memberof MembershipAwardType
     */
    rateInfo?: MembershipAwardRateInfoType;
    /**
     * Rule Schedule applied to this Award.
     * @type {string}
     * @memberof MembershipAwardType
     */
    ruleScheduleCode?: string;
    /**
     * Short description of Award.
     * @type {string}
     * @memberof MembershipAwardType
     */
    shortDescription?: string;
    /**
     * 
     * @type {MembershipAwardUpgradeInfoType}
     * @memberof MembershipAwardType
     */
    upgradeInfo?: MembershipAwardUpgradeInfoType;
}

/**
 * Check if a given object implements the MembershipAwardType interface.
 */
export function instanceOfMembershipAwardType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipAwardTypeFromJSON(json: any): MembershipAwardType {
    return MembershipAwardTypeFromJSONTyped(json, false);
}

export function MembershipAwardTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipAwardType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'autoConsume': !exists(json, 'autoConsume') ? undefined : json['autoConsume'],
        'awardBasedOn': !exists(json, 'awardBasedOn') ? undefined : MembershipAwardBasedOnTypeFromJSON(json['awardBasedOn']),
        'awardCode': !exists(json, 'awardCode') ? undefined : json['awardCode'],
        'awardDetails': !exists(json, 'awardDetails') ? undefined : ((json['awardDetails'] as Array<any>).map(MembershipAwardDetailTypeFromJSON)),
        'awardQuantity': !exists(json, 'awardQuantity') ? undefined : json['awardQuantity'],
        'billingGroup': !exists(json, 'billingGroup') ? undefined : json['billingGroup'],
        'dateRange': !exists(json, 'dateRange') ? undefined : DateRangeTypeFromJSON(json['dateRange']),
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'financialTransactionInfo': !exists(json, 'financialTransactionInfo') ? undefined : MembershipAwardFinancialTransactionInfoTypeFromJSON(json['financialTransactionInfo']),
        'forceVerification': !exists(json, 'forceVerification') ? undefined : json['forceVerification'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'longDescription': !exists(json, 'longDescription') ? undefined : json['longDescription'],
        'membershipLevel': !exists(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'otherInfo': !exists(json, 'otherInfo') ? undefined : MembershipAwardOtherInfoTypeFromJSON(json['otherInfo']),
        'productInfo': !exists(json, 'productInfo') ? undefined : MembershipAwardProductInfoTypeFromJSON(json['productInfo']),
        'rateInfo': !exists(json, 'rateInfo') ? undefined : MembershipAwardRateInfoTypeFromJSON(json['rateInfo']),
        'ruleScheduleCode': !exists(json, 'ruleScheduleCode') ? undefined : json['ruleScheduleCode'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'upgradeInfo': !exists(json, 'upgradeInfo') ? undefined : MembershipAwardUpgradeInfoTypeFromJSON(json['upgradeInfo']),
    };
}

export function MembershipAwardTypeToJSON(value?: MembershipAwardType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'autoConsume': value.autoConsume,
        'awardBasedOn': MembershipAwardBasedOnTypeToJSON(value.awardBasedOn),
        'awardCode': value.awardCode,
        'awardDetails': value.awardDetails === undefined ? undefined : ((value.awardDetails as Array<any>).map(MembershipAwardDetailTypeToJSON)),
        'awardQuantity': value.awardQuantity,
        'billingGroup': value.billingGroup,
        'dateRange': DateRangeTypeToJSON(value.dateRange),
        'displaySequence': value.displaySequence,
        'financialTransactionInfo': MembershipAwardFinancialTransactionInfoTypeToJSON(value.financialTransactionInfo),
        'forceVerification': value.forceVerification,
        'inactive': value.inactive,
        'longDescription': value.longDescription,
        'membershipLevel': value.membershipLevel,
        'membershipType': value.membershipType,
        'otherInfo': MembershipAwardOtherInfoTypeToJSON(value.otherInfo),
        'productInfo': MembershipAwardProductInfoTypeToJSON(value.productInfo),
        'rateInfo': MembershipAwardRateInfoTypeToJSON(value.rateInfo),
        'ruleScheduleCode': value.ruleScheduleCode,
        'shortDescription': value.shortDescription,
        'upgradeInfo': MembershipAwardUpgradeInfoTypeToJSON(value.upgradeInfo),
    };
}

