/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MembershipTypeRuleType } from './MembershipTypeRuleType';
import {
    MembershipTypeRuleTypeFromJSON,
    MembershipTypeRuleTypeFromJSONTyped,
    MembershipTypeRuleTypeToJSON,
} from './MembershipTypeRuleType';
import type { RuleAppliesOnType } from './RuleAppliesOnType';
import {
    RuleAppliesOnTypeFromJSON,
    RuleAppliesOnTypeFromJSONTyped,
    RuleAppliesOnTypeToJSON,
} from './RuleAppliesOnType';

/**
 * Membership Type Rule definition details.
 * @export
 * @interface MembershipTypeRuleDefinitionType
 */
export interface MembershipTypeRuleDefinitionType {
    /**
     * Specifies total number of times program rule is eligible .
     * @type {number}
     * @memberof MembershipTypeRuleDefinitionType
     */
    noOfTimesEligible?: number;
    /**
     * 
     * @type {MembershipTypeRuleType}
     * @memberof MembershipTypeRuleDefinitionType
     */
    programType?: MembershipTypeRuleType;
    /**
     * 
     * @type {RuleAppliesOnType}
     * @memberof MembershipTypeRuleDefinitionType
     */
    ruleAppliesOn?: RuleAppliesOnType;
    /**
     * Rule code of the membership type rule.
     * @type {string}
     * @memberof MembershipTypeRuleDefinitionType
     */
    ruleCode?: string;
    /**
     * Date on which the rule will be expired.
     * @type {Date}
     * @memberof MembershipTypeRuleDefinitionType
     */
    ruleExpirationDate?: Date;
    /**
     * This field will be used to store export label and will be used only for exporting purposes.
     * @type {string}
     * @memberof MembershipTypeRuleDefinitionType
     */
    ruleExportLabel?: string;
}

/**
 * Check if a given object implements the MembershipTypeRuleDefinitionType interface.
 */
export function instanceOfMembershipTypeRuleDefinitionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTypeRuleDefinitionTypeFromJSON(json: any): MembershipTypeRuleDefinitionType {
    return MembershipTypeRuleDefinitionTypeFromJSONTyped(json, false);
}

export function MembershipTypeRuleDefinitionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTypeRuleDefinitionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'noOfTimesEligible': !exists(json, 'noOfTimesEligible') ? undefined : json['noOfTimesEligible'],
        'programType': !exists(json, 'programType') ? undefined : MembershipTypeRuleTypeFromJSON(json['programType']),
        'ruleAppliesOn': !exists(json, 'ruleAppliesOn') ? undefined : RuleAppliesOnTypeFromJSON(json['ruleAppliesOn']),
        'ruleCode': !exists(json, 'ruleCode') ? undefined : json['ruleCode'],
        'ruleExpirationDate': !exists(json, 'ruleExpirationDate') ? undefined : (new Date(json['ruleExpirationDate'])),
        'ruleExportLabel': !exists(json, 'ruleExportLabel') ? undefined : json['ruleExportLabel'],
    };
}

export function MembershipTypeRuleDefinitionTypeToJSON(value?: MembershipTypeRuleDefinitionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'noOfTimesEligible': value.noOfTimesEligible,
        'programType': MembershipTypeRuleTypeToJSON(value.programType),
        'ruleAppliesOn': RuleAppliesOnTypeToJSON(value.ruleAppliesOn),
        'ruleCode': value.ruleCode,
        'ruleExpirationDate': value.ruleExpirationDate === undefined ? undefined : (value.ruleExpirationDate.toISOString().substring(0,10)),
        'ruleExportLabel': value.ruleExportLabel,
    };
}

