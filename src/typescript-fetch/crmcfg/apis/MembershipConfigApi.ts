/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  MembershipAwards,
  MembershipAwardsInfo,
  MembershipBenefitPrograms,
  MembershipBenefitProgramsInfo,
  MembershipClasses,
  MembershipClassesInfo,
  MembershipEnrollmentGroups,
  MembershipEnrollmentGroupsInfo,
  MembershipFolioTexts,
  MembershipLevels,
  MembershipLevelsInfo,
  MembershipMarketGroups,
  MembershipMarketGroupsInfo,
  MembershipPropertyGroups,
  MembershipPropertyGroupsInfo,
  MembershipRateGroups,
  MembershipRateGroupsInfo,
  MembershipRates,
  MembershipRatesInfo,
  MembershipTypeChangeInstructions,
  MembershipTypeRule,
  MembershipTypeRules,
  MembershipTypeRulesDetails,
  MembershipTypeRulesInfo,
  MembershipTypes,
  MembershipTypesDetails,
  OperaVersion,
  Status,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    MembershipAwardsFromJSON,
    MembershipAwardsToJSON,
    MembershipAwardsInfoFromJSON,
    MembershipAwardsInfoToJSON,
    MembershipBenefitProgramsFromJSON,
    MembershipBenefitProgramsToJSON,
    MembershipBenefitProgramsInfoFromJSON,
    MembershipBenefitProgramsInfoToJSON,
    MembershipClassesFromJSON,
    MembershipClassesToJSON,
    MembershipClassesInfoFromJSON,
    MembershipClassesInfoToJSON,
    MembershipEnrollmentGroupsFromJSON,
    MembershipEnrollmentGroupsToJSON,
    MembershipEnrollmentGroupsInfoFromJSON,
    MembershipEnrollmentGroupsInfoToJSON,
    MembershipFolioTextsFromJSON,
    MembershipFolioTextsToJSON,
    MembershipLevelsFromJSON,
    MembershipLevelsToJSON,
    MembershipLevelsInfoFromJSON,
    MembershipLevelsInfoToJSON,
    MembershipMarketGroupsFromJSON,
    MembershipMarketGroupsToJSON,
    MembershipMarketGroupsInfoFromJSON,
    MembershipMarketGroupsInfoToJSON,
    MembershipPropertyGroupsFromJSON,
    MembershipPropertyGroupsToJSON,
    MembershipPropertyGroupsInfoFromJSON,
    MembershipPropertyGroupsInfoToJSON,
    MembershipRateGroupsFromJSON,
    MembershipRateGroupsToJSON,
    MembershipRateGroupsInfoFromJSON,
    MembershipRateGroupsInfoToJSON,
    MembershipRatesFromJSON,
    MembershipRatesToJSON,
    MembershipRatesInfoFromJSON,
    MembershipRatesInfoToJSON,
    MembershipTypeChangeInstructionsFromJSON,
    MembershipTypeChangeInstructionsToJSON,
    MembershipTypeRuleFromJSON,
    MembershipTypeRuleToJSON,
    MembershipTypeRulesFromJSON,
    MembershipTypeRulesToJSON,
    MembershipTypeRulesDetailsFromJSON,
    MembershipTypeRulesDetailsToJSON,
    MembershipTypeRulesInfoFromJSON,
    MembershipTypeRulesInfoToJSON,
    MembershipTypesFromJSON,
    MembershipTypesToJSON,
    MembershipTypesDetailsFromJSON,
    MembershipTypesDetailsToJSON,
    OperaVersionFromJSON,
    OperaVersionToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DeleteMembershipAwardsRequest {
    membershipAwardsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipBenefitProgramsRequest {
    membershipBenefitProgramsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipClassesRequest {
    membershipClassId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipConfigCacheRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipEnrollmentGroupsRequest {
    membershipEnrollmentGroupsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipLevelsRequest {
    membershipLevelsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipMarketGroupsRequest {
    membershipMarketGroupId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipPropertyGroupsRequest {
    membershipPropertyGroupsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipRateGroupsRequest {
    membershipRateGroupId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipRatesRequest {
    membershipRatesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipTypeRulesRequest {
    membershipTypeRulesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPointsSequence?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMembershipTypesRequest {
    membershipTypeId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipAwardsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    awardCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    validForDate?: string;
    includeInactive?: boolean;
    includeDetails?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipBenefitProgramsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    code?: string;
    end?: string;
    start?: string;
    minimumLevel?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipEnrollmentGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    enrollmentCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipLevelsRequest {
    membershipTypeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    includeFolioTexts?: boolean;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipMarketGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipPropertyGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipRateGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    membershipTypes?: Array<string>;
    ratePlanCodes?: Array<string>;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTypeRequest {
    membershipTypeId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeCode?: string;
    fetchInstructions?: Set<GetMembershipTypeFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTypeRuleRequest {
    membershipTypeRulesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipType?: string;
    membershipPointsSequence?: number;
    fetchInstructions?: Set<GetMembershipTypeRuleFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTypeRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypesCodes?: Array<string>;
    programType?: GetMembershipTypeRulesProgramTypeEnum;
    ruleCode?: string;
    ruleBasedOn?: GetMembershipTypeRulesRuleBasedOnEnum;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    membershipTypesCodes?: Array<string>;
    membershipTypesWildCard?: string;
    membershipClassesCodes?: Array<string>;
    membershipClassesWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PingMembershipConfigServiceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipAwardsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipAwards: MembershipAwards;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipBenefitProgramsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipBenefitPrograms: MembershipBenefitPrograms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipClassesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClasses: MembershipClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipEnrollmentGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipEnrollmentGroups: MembershipEnrollmentGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipFolioTextsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipFolioTexts: MembershipFolioTexts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipLevelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipLevels: MembershipLevels;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipMarketGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipMarketGroups: MembershipMarketGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipPropertyGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPropertyGroups: MembershipPropertyGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipRateGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipRateGroups: MembershipRateGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipRates: MembershipRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipTypeRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeRules: MembershipTypeRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypes: MembershipTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipAwardsRequest {
    membershipAwardsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipAwards: MembershipAwards;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipBenefitProgramsRequest {
    membershipBenefitProgramsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipBenefitPrograms: MembershipBenefitPrograms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipClassesRequest {
    membershipClassId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClasses: MembershipClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipEnrollmentGroupsRequest {
    membershipEnrollmentGroupsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipEnrollmentGroups: MembershipEnrollmentGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipLevelsRequest {
    membershipLevelsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipLevels: MembershipLevels;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipMarketGroupsRequest {
    membershipMarketGroupId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipMarketGroups: MembershipMarketGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipPropertyGroupsRequest {
    membershipPropertyGroupsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipPropertyGroups: MembershipPropertyGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipRateGroupsRequest {
    membershipRateGroupId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipRateGroups: MembershipRateGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipRatesRequest {
    membershipRatesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipRates: MembershipRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipTypeRequest {
    membershipTypeId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeChangeInstructions: MembershipTypeChangeInstructions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipTypeRulesRequest {
    membershipTypeRulesId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipTypeRules: MembershipTypeRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class MembershipConfigApi extends runtime.BaseAPI {

    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    async deleteMembershipAwardsRaw(requestParameters: DeleteMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipAwardsId === null || requestParameters.membershipAwardsId === undefined) {
            throw new runtime.RequiredError('membershipAwardsId','Required parameter requestParameters.membershipAwardsId was null or undefined when calling deleteMembershipAwards.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipAwards/{membershipAwardsId}`.replace(`{${"membershipAwardsId"}}`, encodeURIComponent(String(requestParameters.membershipAwardsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Membership Awards. <p><strong>OperationId:</strong>deleteMembershipAwards</p>
     * Delete Membership Awards
     */
    async deleteMembershipAwards(requestParameters: DeleteMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    async deleteMembershipBenefitProgramsRaw(requestParameters: DeleteMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipBenefitProgramsId === null || requestParameters.membershipBenefitProgramsId === undefined) {
            throw new runtime.RequiredError('membershipBenefitProgramsId','Required parameter requestParameters.membershipBenefitProgramsId was null or undefined when calling deleteMembershipBenefitPrograms.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipBenefitPrograms/{membershipBenefitProgramsId}`.replace(`{${"membershipBenefitProgramsId"}}`, encodeURIComponent(String(requestParameters.membershipBenefitProgramsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete s Membership Benefit Programs of a Membership Type.  <p><strong>OperationId:</strong>deleteMembershipBenefitPrograms</p>
     * Delete Membership Benedict Program
     */
    async deleteMembershipBenefitPrograms(requestParameters: DeleteMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    async deleteMembershipClassesRaw(requestParameters: DeleteMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipClassId === null || requestParameters.membershipClassId === undefined) {
            throw new runtime.RequiredError('membershipClassId','Required parameter requestParameters.membershipClassId was null or undefined when calling deleteMembershipClasses.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClasses/{membershipClassId}`.replace(`{${"membershipClassId"}}`, encodeURIComponent(String(requestParameters.membershipClassId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing membership class. <p><strong>OperationId:</strong>deleteMembershipClasses</p>
     * Delete Membership classes
     */
    async deleteMembershipClasses(requestParameters: DeleteMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear Membership Configuration Cache <p><strong>OperationId:</strong>deleteMembershipConfigCache</p>
     *  clear cache
     */
    async deleteMembershipConfigCacheRaw(requestParameters: DeleteMembershipConfigCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/membershipConfig/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Clear Membership Configuration Cache <p><strong>OperationId:</strong>deleteMembershipConfigCache</p>
     *  clear cache
     */
    async deleteMembershipConfigCache(requestParameters: DeleteMembershipConfigCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipConfigCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    async deleteMembershipEnrollmentGroupsRaw(requestParameters: DeleteMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipEnrollmentGroupsId === null || requestParameters.membershipEnrollmentGroupsId === undefined) {
            throw new runtime.RequiredError('membershipEnrollmentGroupsId','Required parameter requestParameters.membershipEnrollmentGroupsId was null or undefined when calling deleteMembershipEnrollmentGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentGroups/{membershipEnrollmentGroupsId}`.replace(`{${"membershipEnrollmentGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipEnrollmentGroupsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * delete an existing membership group. <p><strong>OperationId:</strong>deleteMembershipEnrollmentGroups</p>
     * Remove Membership enrollment groups
     */
    async deleteMembershipEnrollmentGroups(requestParameters: DeleteMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    async deleteMembershipLevelsRaw(requestParameters: DeleteMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipLevelsId === null || requestParameters.membershipLevelsId === undefined) {
            throw new runtime.RequiredError('membershipLevelsId','Required parameter requestParameters.membershipLevelsId was null or undefined when calling deleteMembershipLevels.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipLevels/{membershipLevelsId}`.replace(`{${"membershipLevelsId"}}`, encodeURIComponent(String(requestParameters.membershipLevelsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Membership levels. <p><strong>OperationId:</strong>deleteMembershipLevels</p>
     * Delete Membership levels
     */
    async deleteMembershipLevels(requestParameters: DeleteMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    async deleteMembershipMarketGroupsRaw(requestParameters: DeleteMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipMarketGroupId === null || requestParameters.membershipMarketGroupId === undefined) {
            throw new runtime.RequiredError('membershipMarketGroupId','Required parameter requestParameters.membershipMarketGroupId was null or undefined when calling deleteMembershipMarketGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipMarketGroups/{membershipMarketGroupId}`.replace(`{${"membershipMarketGroupId"}}`, encodeURIComponent(String(requestParameters.membershipMarketGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Membership market groups. <p><strong>OperationId:</strong>deleteMembershipMarketGroups</p>
     * Delete Membership market groups
     */
    async deleteMembershipMarketGroups(requestParameters: DeleteMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    async deleteMembershipPropertyGroupsRaw(requestParameters: DeleteMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipPropertyGroupsId === null || requestParameters.membershipPropertyGroupsId === undefined) {
            throw new runtime.RequiredError('membershipPropertyGroupsId','Required parameter requestParameters.membershipPropertyGroupsId was null or undefined when calling deleteMembershipPropertyGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipPropertyGroups/{membershipPropertyGroupsId}`.replace(`{${"membershipPropertyGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipPropertyGroupsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Membership property groups. <p><strong>OperationId:</strong>deleteMembershipPropertyGroups</p>
     * Delete Membership property groups
     */
    async deleteMembershipPropertyGroups(requestParameters: DeleteMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    async deleteMembershipRateGroupsRaw(requestParameters: DeleteMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipRateGroupId === null || requestParameters.membershipRateGroupId === undefined) {
            throw new runtime.RequiredError('membershipRateGroupId','Required parameter requestParameters.membershipRateGroupId was null or undefined when calling deleteMembershipRateGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRateGroups/{membershipRateGroupId}`.replace(`{${"membershipRateGroupId"}}`, encodeURIComponent(String(requestParameters.membershipRateGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Membership rate groups. <p><strong>OperationId:</strong>deleteMembershipRateGroups</p>
     * Delete Membership rate groups
     */
    async deleteMembershipRateGroups(requestParameters: DeleteMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Membership rates. <p><strong>OperationId:</strong>deleteMembershipRates</p>
     * Delete Membership rates
     */
    async deleteMembershipRatesRaw(requestParameters: DeleteMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipRatesId === null || requestParameters.membershipRatesId === undefined) {
            throw new runtime.RequiredError('membershipRatesId','Required parameter requestParameters.membershipRatesId was null or undefined when calling deleteMembershipRates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRates/{membershipRatesId}`.replace(`{${"membershipRatesId"}}`, encodeURIComponent(String(requestParameters.membershipRatesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Membership rates. <p><strong>OperationId:</strong>deleteMembershipRates</p>
     * Delete Membership rates
     */
    async deleteMembershipRates(requestParameters: DeleteMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    async deleteMembershipTypeRulesRaw(requestParameters: DeleteMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipTypeRulesId === null || requestParameters.membershipTypeRulesId === undefined) {
            throw new runtime.RequiredError('membershipTypeRulesId','Required parameter requestParameters.membershipTypeRulesId was null or undefined when calling deleteMembershipTypeRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.membershipPointsSequence) {
            queryParameters['membershipPointsSequence'] = requestParameters.membershipPointsSequence;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Membership type rules. <p><strong>OperationId:</strong>deleteMembershipTypeRules</p>
     * Delete Membership type rules
     */
    async deleteMembershipTypeRules(requestParameters: DeleteMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    async deleteMembershipTypesRaw(requestParameters: DeleteMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipTypeId === null || requestParameters.membershipTypeId === undefined) {
            throw new runtime.RequiredError('membershipTypeId','Required parameter requestParameters.membershipTypeId was null or undefined when calling deleteMembershipTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Membership Type <p><strong>OperationId:</strong>deleteMembershipTypes</p>
     * Delete Membership type
     */
    async deleteMembershipTypes(requestParameters: DeleteMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMembershipTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    async getMembershipAwardsRaw(requestParameters: GetMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipAwardsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.awardCodes) {
            queryParameters['awardCodes'] = requestParameters.awardCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.validForDate !== undefined) {
            queryParameters['validForDate'] = requestParameters.validForDate;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.includeDetails !== undefined) {
            queryParameters['includeDetails'] = requestParameters.includeDetails;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipAwards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipAwardsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Membership Awards. <p><strong>OperationId:</strong>getMembershipAwards</p>
     * Get Membership Awards
     */
    async getMembershipAwards(requestParameters: GetMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipAwardsInfo> {
        const response = await this.getMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    async getMembershipBenefitProgramsRaw(requestParameters: GetMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipBenefitProgramsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.minimumLevel !== undefined) {
            queryParameters['minimumLevel'] = requestParameters.minimumLevel;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipBenefitPrograms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipBenefitProgramsInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>getMembershipBenefitPrograms</p>
     * Retrieve a Membership Benefit Program
     */
    async getMembershipBenefitPrograms(requestParameters: GetMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipBenefitProgramsInfo> {
        const response = await this.getMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    async getMembershipClassesRaw(requestParameters: GetMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClassesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipClassesInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of membership classes that are configured. <p><strong>OperationId:</strong>getMembershipClasses</p>
     * Get Membership classes
     */
    async getMembershipClasses(requestParameters: GetMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClassesInfo> {
        const response = await this.getMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    async getMembershipEnrollmentGroupsRaw(requestParameters: GetMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipEnrollmentGroupsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.enrollmentCodes) {
            queryParameters['enrollmentCodes'] = requestParameters.enrollmentCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipEnrollmentGroupsInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of membership Enrollment Groups that are configured. <p><strong>OperationId:</strong>getMembershipEnrollmentGroups</p>
     * Get Membership enrollment groups
     */
    async getMembershipEnrollmentGroups(requestParameters: GetMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipEnrollmentGroupsInfo> {
        const response = await this.getMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    async getMembershipLevelsRaw(requestParameters: GetMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipLevelsInfo>> {
        if (requestParameters.membershipTypeCode === null || requestParameters.membershipTypeCode === undefined) {
            throw new runtime.RequiredError('membershipTypeCode','Required parameter requestParameters.membershipTypeCode was null or undefined when calling getMembershipLevels.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.membershipTypeCode !== undefined) {
            queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.includeFolioTexts !== undefined) {
            queryParameters['includeFolioTexts'] = requestParameters.includeFolioTexts;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipLevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipLevelsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Membership levels. <p><strong>OperationId:</strong>getMembershipLevels</p>
     * Get Membership levels
     */
    async getMembershipLevels(requestParameters: GetMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipLevelsInfo> {
        const response = await this.getMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    async getMembershipMarketGroupsRaw(requestParameters: GetMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipMarketGroupsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipMarketGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipMarketGroupsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Membership market groups. <p><strong>OperationId:</strong>getMembershipMarketGroups</p>
     * Get Membership market groups
     */
    async getMembershipMarketGroups(requestParameters: GetMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipMarketGroupsInfo> {
        const response = await this.getMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    async getMembershipPropertyGroupsRaw(requestParameters: GetMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipPropertyGroupsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipPropertyGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipPropertyGroupsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Membership property groups. <p><strong>OperationId:</strong>getMembershipPropertyGroups</p>
     * Get Membership property groups
     */
    async getMembershipPropertyGroups(requestParameters: GetMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipPropertyGroupsInfo> {
        const response = await this.getMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    async getMembershipRateGroupsRaw(requestParameters: GetMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipRateGroupsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRateGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipRateGroupsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Membership rate groups. <p><strong>OperationId:</strong>getMembershipRateGroups</p>
     * Get Membership rate groups
     */
    async getMembershipRateGroups(requestParameters: GetMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipRateGroupsInfo> {
        const response = await this.getMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Membership rates. <p><strong>OperationId:</strong>getMembershipRates</p>
     * Get Membership rates 
     */
    async getMembershipRatesRaw(requestParameters: GetMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipRatesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipRatesInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Membership rates. <p><strong>OperationId:</strong>getMembershipRates</p>
     * Get Membership rates 
     */
    async getMembershipRates(requestParameters: GetMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipRatesInfo> {
        const response = await this.getMembershipRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    async getMembershipTypeRaw(requestParameters: GetMembershipTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypesDetails>> {
        if (requestParameters.membershipTypeId === null || requestParameters.membershipTypeId === undefined) {
            throw new runtime.RequiredError('membershipTypeId','Required parameter requestParameters.membershipTypeId was null or undefined when calling getMembershipType.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.membershipTypeCode !== undefined) {
            queryParameters['membershipTypeCode'] = requestParameters.membershipTypeCode;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get a specific Membership Type and its details. <p><strong>OperationId:</strong>getMembershipType</p>
     * Get a Membership type
     */
    async getMembershipType(requestParameters: GetMembershipTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypesDetails> {
        const response = await this.getMembershipTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    async getMembershipTypeRuleRaw(requestParameters: GetMembershipTypeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypeRule>> {
        if (requestParameters.membershipTypeRulesId === null || requestParameters.membershipTypeRulesId === undefined) {
            throw new runtime.RequiredError('membershipTypeRulesId','Required parameter requestParameters.membershipTypeRulesId was null or undefined when calling getMembershipTypeRule.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.membershipPointsSequence !== undefined) {
            queryParameters['membershipPointsSequence'] = requestParameters.membershipPointsSequence;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTypeRuleFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Membership type rule details. <p><strong>OperationId:</strong>getMembershipTypeRule</p>
     * Get Membership type rule details
     */
    async getMembershipTypeRule(requestParameters: GetMembershipTypeRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypeRule> {
        const response = await this.getMembershipTypeRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    async getMembershipTypeRulesRaw(requestParameters: GetMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypeRulesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.membershipTypesCodes) {
            queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
        }

        if (requestParameters.programType !== undefined) {
            queryParameters['programType'] = requestParameters.programType;
        }

        if (requestParameters.ruleCode !== undefined) {
            queryParameters['ruleCode'] = requestParameters.ruleCode;
        }

        if (requestParameters.ruleBasedOn !== undefined) {
            queryParameters['ruleBasedOn'] = requestParameters.ruleBasedOn;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypeRules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTypeRulesInfoFromJSON(jsonValue));
    }

    /**
     * get Membership type rules based on criteria <p><strong>OperationId:</strong>getMembershipTypeRules</p>
     * Get Membership type rules
     */
    async getMembershipTypeRules(requestParameters: GetMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypeRulesInfo> {
        const response = await this.getMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    async getMembershipTypesRaw(requestParameters: GetMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypes>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.membershipTypesCodes) {
            queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
        }

        if (requestParameters.membershipTypesWildCard !== undefined) {
            queryParameters['membershipTypesWildCard'] = requestParameters.membershipTypesWildCard;
        }

        if (requestParameters.membershipClassesCodes) {
            queryParameters['membershipClassesCodes'] = requestParameters.membershipClassesCodes;
        }

        if (requestParameters.membershipClassesWildCard !== undefined) {
            queryParameters['membershipClassesWildCard'] = requestParameters.membershipClassesWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTypesFromJSON(jsonValue));
    }

    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. This API will retrieve all configured Membership Types configured.<p><strong>OperationId:</strong>getMembershipTypes</p>
     * Get membership types
     */
    async getMembershipTypes(requestParameters: GetMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypes> {
        const response = await this.getMembershipTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ping Membership Configuration Service <p><strong>OperationId:</strong>pingMembershipConfigService</p>
     *  ping
     */
    async pingMembershipConfigServiceRaw(requestParameters: PingMembershipConfigServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/membershipConfig/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaVersionFromJSON(jsonValue));
    }

    /**
     * Ping Membership Configuration Service <p><strong>OperationId:</strong>pingMembershipConfigService</p>
     *  ping
     */
    async pingMembershipConfigService(requestParameters: PingMembershipConfigServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion> {
        const response = await this.pingMembershipConfigServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    async postMembershipAwardsRaw(requestParameters: PostMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipAwards === null || requestParameters.membershipAwards === undefined) {
            throw new runtime.RequiredError('membershipAwards','Required parameter requestParameters.membershipAwards was null or undefined when calling postMembershipAwards.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipAwards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipAwardsToJSON(requestParameters.membershipAwards),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Membership Awards. <p><strong>OperationId:</strong>postMembershipAwards</p>
     * Create Membership Awards
     */
    async postMembershipAwards(requestParameters: PostMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    async postMembershipBenefitProgramsRaw(requestParameters: PostMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipBenefitPrograms === null || requestParameters.membershipBenefitPrograms === undefined) {
            throw new runtime.RequiredError('membershipBenefitPrograms','Required parameter requestParameters.membershipBenefitPrograms was null or undefined when calling postMembershipBenefitPrograms.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipBenefitPrograms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipBenefitProgramsToJSON(requestParameters.membershipBenefitPrograms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create Membership Benefit Programs of a Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary  central setup,  not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>postMembershipBenefitPrograms</p>
     * Create Membership Benefit Program
     */
    async postMembershipBenefitPrograms(requestParameters: PostMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    async postMembershipClassesRaw(requestParameters: PostMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipClasses === null || requestParameters.membershipClasses === undefined) {
            throw new runtime.RequiredError('membershipClasses','Required parameter requestParameters.membershipClasses was null or undefined when calling postMembershipClasses.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipClassesToJSON(requestParameters.membershipClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new membership class. <p><strong>OperationId:</strong>postMembershipClasses</p>
     * Create Membership classes
     */
    async postMembershipClasses(requestParameters: PostMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    async postMembershipEnrollmentGroupsRaw(requestParameters: PostMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipEnrollmentGroups === null || requestParameters.membershipEnrollmentGroups === undefined) {
            throw new runtime.RequiredError('membershipEnrollmentGroups','Required parameter requestParameters.membershipEnrollmentGroups was null or undefined when calling postMembershipEnrollmentGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipEnrollmentGroupsToJSON(requestParameters.membershipEnrollmentGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new membership enrollment group. <p><strong>OperationId:</strong>postMembershipEnrollmentGroups</p>
     * Create Membership enrollment groups
     */
    async postMembershipEnrollmentGroups(requestParameters: PostMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    async postMembershipFolioTextsRaw(requestParameters: PostMembershipFolioTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipFolioTexts === null || requestParameters.membershipFolioTexts === undefined) {
            throw new runtime.RequiredError('membershipFolioTexts','Required parameter requestParameters.membershipFolioTexts was null or undefined when calling postMembershipFolioTexts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipFolioTexts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipFolioTextsToJSON(requestParameters.membershipFolioTexts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to Set Membership folio texts. <p><strong>OperationId:</strong>postMembershipFolioTexts</p>
     * Set Membership folio texts
     */
    async postMembershipFolioTexts(requestParameters: PostMembershipFolioTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipFolioTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    async postMembershipLevelsRaw(requestParameters: PostMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipLevels === null || requestParameters.membershipLevels === undefined) {
            throw new runtime.RequiredError('membershipLevels','Required parameter requestParameters.membershipLevels was null or undefined when calling postMembershipLevels.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipLevels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipLevelsToJSON(requestParameters.membershipLevels),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Membership levels. <p><strong>OperationId:</strong>postMembershipLevels</p>
     * Create Membership levels
     */
    async postMembershipLevels(requestParameters: PostMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    async postMembershipMarketGroupsRaw(requestParameters: PostMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipMarketGroups === null || requestParameters.membershipMarketGroups === undefined) {
            throw new runtime.RequiredError('membershipMarketGroups','Required parameter requestParameters.membershipMarketGroups was null or undefined when calling postMembershipMarketGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipMarketGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipMarketGroupsToJSON(requestParameters.membershipMarketGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Membership market groups. <p><strong>OperationId:</strong>postMembershipMarketGroups</p>
     * Create Membership market groups
     */
    async postMembershipMarketGroups(requestParameters: PostMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    async postMembershipPropertyGroupsRaw(requestParameters: PostMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipPropertyGroups === null || requestParameters.membershipPropertyGroups === undefined) {
            throw new runtime.RequiredError('membershipPropertyGroups','Required parameter requestParameters.membershipPropertyGroups was null or undefined when calling postMembershipPropertyGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipPropertyGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipPropertyGroupsToJSON(requestParameters.membershipPropertyGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Membership property groups. <p><strong>OperationId:</strong>postMembershipPropertyGroups</p>
     * Create Membership property groups
     */
    async postMembershipPropertyGroups(requestParameters: PostMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    async postMembershipRateGroupsRaw(requestParameters: PostMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipRateGroups === null || requestParameters.membershipRateGroups === undefined) {
            throw new runtime.RequiredError('membershipRateGroups','Required parameter requestParameters.membershipRateGroups was null or undefined when calling postMembershipRateGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRateGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipRateGroupsToJSON(requestParameters.membershipRateGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Membership rate groups. <p><strong>OperationId:</strong>postMembershipRateGroups</p>
     * Create Membership rate groups
     */
    async postMembershipRateGroups(requestParameters: PostMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Membership rates. <p><strong>OperationId:</strong>postMembershipRates</p>
     * Create Membership rates
     */
    async postMembershipRatesRaw(requestParameters: PostMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipRates === null || requestParameters.membershipRates === undefined) {
            throw new runtime.RequiredError('membershipRates','Required parameter requestParameters.membershipRates was null or undefined when calling postMembershipRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipRatesToJSON(requestParameters.membershipRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Membership rates. <p><strong>OperationId:</strong>postMembershipRates</p>
     * Create Membership rates
     */
    async postMembershipRates(requestParameters: PostMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    async postMembershipTypeRulesRaw(requestParameters: PostMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypeRulesDetails>> {
        if (requestParameters.membershipTypeRules === null || requestParameters.membershipTypeRules === undefined) {
            throw new runtime.RequiredError('membershipTypeRules','Required parameter requestParameters.membershipTypeRules was null or undefined when calling postMembershipTypeRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypeRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipTypeRulesToJSON(requestParameters.membershipTypeRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTypeRulesDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Membership type rules. <p><strong>OperationId:</strong>postMembershipTypeRules</p>
     * Create Membership type rules
     */
    async postMembershipTypeRules(requestParameters: PostMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypeRulesDetails> {
        const response = await this.postMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    async postMembershipTypesRaw(requestParameters: PostMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipTypes === null || requestParameters.membershipTypes === undefined) {
            throw new runtime.RequiredError('membershipTypes','Required parameter requestParameters.membershipTypes was null or undefined when calling postMembershipTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipTypesToJSON(requestParameters.membershipTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Membership types enable you to identify, organize, and manage the membership programs on a profile. For example, your property might have a guest loyalty program that awards guests based on the amount of revenue generated or the number of stays per year. You would create a specific membership type for this program. <p><strong>OperationId:</strong>postMembershipTypes</p>
     * Create Membership types
     */
    async postMembershipTypes(requestParameters: PostMembershipTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    async putMembershipAwardsRaw(requestParameters: PutMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipAwardsId === null || requestParameters.membershipAwardsId === undefined) {
            throw new runtime.RequiredError('membershipAwardsId','Required parameter requestParameters.membershipAwardsId was null or undefined when calling putMembershipAwards.');
        }
        
        if (requestParameters.membershipAwards === null || requestParameters.membershipAwards === undefined) {
            throw new runtime.RequiredError('membershipAwards','Required parameter requestParameters.membershipAwards was null or undefined when calling putMembershipAwards.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipAwards/{membershipAwardsId}`.replace(`{${"membershipAwardsId"}}`, encodeURIComponent(String(requestParameters.membershipAwardsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipAwardsToJSON(requestParameters.membershipAwards),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership Awards. <p><strong>OperationId:</strong>putMembershipAwards</p>
     * Change Membership Awards
     */
    async putMembershipAwards(requestParameters: PutMembershipAwardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipAwardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    async putMembershipBenefitProgramsRaw(requestParameters: PutMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipBenefitProgramsId === null || requestParameters.membershipBenefitProgramsId === undefined) {
            throw new runtime.RequiredError('membershipBenefitProgramsId','Required parameter requestParameters.membershipBenefitProgramsId was null or undefined when calling putMembershipBenefitPrograms.');
        }
        
        if (requestParameters.membershipBenefitPrograms === null || requestParameters.membershipBenefitPrograms === undefined) {
            throw new runtime.RequiredError('membershipBenefitPrograms','Required parameter requestParameters.membershipBenefitPrograms was null or undefined when calling putMembershipBenefitPrograms.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipBenefitPrograms/{membershipBenefitProgramsId}`.replace(`{${"membershipBenefitProgramsId"}}`, encodeURIComponent(String(requestParameters.membershipBenefitProgramsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipBenefitProgramsToJSON(requestParameters.membershipBenefitPrograms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to modify Membership Benefit Programs of Membership Type. A Benefit Program is configurable for a Membership Type when OCIS or ORS license is active and Membership Type meets following criteria  - primary central setup, not externally controlled and point calculation method is Manual Batch. <p><strong>OperationId:</strong>putMembershipBenefitPrograms</p>
     * Change Membership Benefit Program
     */
    async putMembershipBenefitPrograms(requestParameters: PutMembershipBenefitProgramsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipBenefitProgramsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    async putMembershipClassesRaw(requestParameters: PutMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClassesInfo>> {
        if (requestParameters.membershipClassId === null || requestParameters.membershipClassId === undefined) {
            throw new runtime.RequiredError('membershipClassId','Required parameter requestParameters.membershipClassId was null or undefined when calling putMembershipClasses.');
        }
        
        if (requestParameters.membershipClasses === null || requestParameters.membershipClasses === undefined) {
            throw new runtime.RequiredError('membershipClasses','Required parameter requestParameters.membershipClasses was null or undefined when calling putMembershipClasses.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClasses/{membershipClassId}`.replace(`{${"membershipClassId"}}`, encodeURIComponent(String(requestParameters.membershipClassId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipClassesToJSON(requestParameters.membershipClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipClassesInfoFromJSON(jsonValue));
    }

    /**
     * Update an existing membership class <p><strong>OperationId:</strong>putMembershipClasses</p>
     * Change Membership classes
     */
    async putMembershipClasses(requestParameters: PutMembershipClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClassesInfo> {
        const response = await this.putMembershipClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    async putMembershipEnrollmentGroupsRaw(requestParameters: PutMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipEnrollmentGroupsId === null || requestParameters.membershipEnrollmentGroupsId === undefined) {
            throw new runtime.RequiredError('membershipEnrollmentGroupsId','Required parameter requestParameters.membershipEnrollmentGroupsId was null or undefined when calling putMembershipEnrollmentGroups.');
        }
        
        if (requestParameters.membershipEnrollmentGroups === null || requestParameters.membershipEnrollmentGroups === undefined) {
            throw new runtime.RequiredError('membershipEnrollmentGroups','Required parameter requestParameters.membershipEnrollmentGroups was null or undefined when calling putMembershipEnrollmentGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentGroups/{membershipEnrollmentGroupsId}`.replace(`{${"membershipEnrollmentGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipEnrollmentGroupsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipEnrollmentGroupsToJSON(requestParameters.membershipEnrollmentGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing membership group. <p><strong>OperationId:</strong>putMembershipEnrollmentGroups</p>
     * Change Membership enrollment groups
     */
    async putMembershipEnrollmentGroups(requestParameters: PutMembershipEnrollmentGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipEnrollmentGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    async putMembershipLevelsRaw(requestParameters: PutMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipLevelsId === null || requestParameters.membershipLevelsId === undefined) {
            throw new runtime.RequiredError('membershipLevelsId','Required parameter requestParameters.membershipLevelsId was null or undefined when calling putMembershipLevels.');
        }
        
        if (requestParameters.membershipLevels === null || requestParameters.membershipLevels === undefined) {
            throw new runtime.RequiredError('membershipLevels','Required parameter requestParameters.membershipLevels was null or undefined when calling putMembershipLevels.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipLevels/{membershipLevelsId}`.replace(`{${"membershipLevelsId"}}`, encodeURIComponent(String(requestParameters.membershipLevelsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipLevelsToJSON(requestParameters.membershipLevels),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership levels. <p><strong>OperationId:</strong>putMembershipLevels</p>
     * Change Membership levels
     */
    async putMembershipLevels(requestParameters: PutMembershipLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    async putMembershipMarketGroupsRaw(requestParameters: PutMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipMarketGroupId === null || requestParameters.membershipMarketGroupId === undefined) {
            throw new runtime.RequiredError('membershipMarketGroupId','Required parameter requestParameters.membershipMarketGroupId was null or undefined when calling putMembershipMarketGroups.');
        }
        
        if (requestParameters.membershipMarketGroups === null || requestParameters.membershipMarketGroups === undefined) {
            throw new runtime.RequiredError('membershipMarketGroups','Required parameter requestParameters.membershipMarketGroups was null or undefined when calling putMembershipMarketGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipMarketGroups/{membershipMarketGroupId}`.replace(`{${"membershipMarketGroupId"}}`, encodeURIComponent(String(requestParameters.membershipMarketGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipMarketGroupsToJSON(requestParameters.membershipMarketGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership market groups. <p><strong>OperationId:</strong>putMembershipMarketGroups</p>
     * Change Membership market groups
     */
    async putMembershipMarketGroups(requestParameters: PutMembershipMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    async putMembershipPropertyGroupsRaw(requestParameters: PutMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipPropertyGroupsId === null || requestParameters.membershipPropertyGroupsId === undefined) {
            throw new runtime.RequiredError('membershipPropertyGroupsId','Required parameter requestParameters.membershipPropertyGroupsId was null or undefined when calling putMembershipPropertyGroups.');
        }
        
        if (requestParameters.membershipPropertyGroups === null || requestParameters.membershipPropertyGroups === undefined) {
            throw new runtime.RequiredError('membershipPropertyGroups','Required parameter requestParameters.membershipPropertyGroups was null or undefined when calling putMembershipPropertyGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipPropertyGroups/{membershipPropertyGroupsId}`.replace(`{${"membershipPropertyGroupsId"}}`, encodeURIComponent(String(requestParameters.membershipPropertyGroupsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipPropertyGroupsToJSON(requestParameters.membershipPropertyGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership property groups. <p><strong>OperationId:</strong>putMembershipPropertyGroups</p>
     * Change Membership property groups
     */
    async putMembershipPropertyGroups(requestParameters: PutMembershipPropertyGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipPropertyGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    async putMembershipRateGroupsRaw(requestParameters: PutMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipRateGroupId === null || requestParameters.membershipRateGroupId === undefined) {
            throw new runtime.RequiredError('membershipRateGroupId','Required parameter requestParameters.membershipRateGroupId was null or undefined when calling putMembershipRateGroups.');
        }
        
        if (requestParameters.membershipRateGroups === null || requestParameters.membershipRateGroups === undefined) {
            throw new runtime.RequiredError('membershipRateGroups','Required parameter requestParameters.membershipRateGroups was null or undefined when calling putMembershipRateGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRateGroups/{membershipRateGroupId}`.replace(`{${"membershipRateGroupId"}}`, encodeURIComponent(String(requestParameters.membershipRateGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipRateGroupsToJSON(requestParameters.membershipRateGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership rate groups. <p><strong>OperationId:</strong>putMembershipRateGroups</p>
     * Change Membership rate groups
     */
    async putMembershipRateGroups(requestParameters: PutMembershipRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership rates. <p><strong>OperationId:</strong>putMembershipRates</p>
     * Change Membership rates
     */
    async putMembershipRatesRaw(requestParameters: PutMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipRatesId === null || requestParameters.membershipRatesId === undefined) {
            throw new runtime.RequiredError('membershipRatesId','Required parameter requestParameters.membershipRatesId was null or undefined when calling putMembershipRates.');
        }
        
        if (requestParameters.membershipRates === null || requestParameters.membershipRates === undefined) {
            throw new runtime.RequiredError('membershipRates','Required parameter requestParameters.membershipRates was null or undefined when calling putMembershipRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipRates/{membershipRatesId}`.replace(`{${"membershipRatesId"}}`, encodeURIComponent(String(requestParameters.membershipRatesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipRatesToJSON(requestParameters.membershipRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership rates. <p><strong>OperationId:</strong>putMembershipRates</p>
     * Change Membership rates
     */
    async putMembershipRates(requestParameters: PutMembershipRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    async putMembershipTypeRaw(requestParameters: PutMembershipTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipTypes>> {
        if (requestParameters.membershipTypeId === null || requestParameters.membershipTypeId === undefined) {
            throw new runtime.RequiredError('membershipTypeId','Required parameter requestParameters.membershipTypeId was null or undefined when calling putMembershipType.');
        }
        
        if (requestParameters.membershipTypeChangeInstructions === null || requestParameters.membershipTypeChangeInstructions === undefined) {
            throw new runtime.RequiredError('membershipTypeChangeInstructions','Required parameter requestParameters.membershipTypeChangeInstructions was null or undefined when calling putMembershipType.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypes/{membershipTypeId}`.replace(`{${"membershipTypeId"}}`, encodeURIComponent(String(requestParameters.membershipTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipTypeChangeInstructionsToJSON(requestParameters.membershipTypeChangeInstructions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipTypesFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing Membership Type <p><strong>OperationId:</strong>putMembershipType</p>
     * Change Membership type
     */
    async putMembershipType(requestParameters: PutMembershipTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipTypes> {
        const response = await this.putMembershipTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    async putMembershipTypeRulesRaw(requestParameters: PutMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipTypeRulesId === null || requestParameters.membershipTypeRulesId === undefined) {
            throw new runtime.RequiredError('membershipTypeRulesId','Required parameter requestParameters.membershipTypeRulesId was null or undefined when calling putMembershipTypeRules.');
        }
        
        if (requestParameters.membershipTypeRules === null || requestParameters.membershipTypeRules === undefined) {
            throw new runtime.RequiredError('membershipTypeRules','Required parameter requestParameters.membershipTypeRules was null or undefined when calling putMembershipTypeRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipTypeRules/{membershipTypeRulesId}`.replace(`{${"membershipTypeRulesId"}}`, encodeURIComponent(String(requestParameters.membershipTypeRulesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipTypeRulesToJSON(requestParameters.membershipTypeRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership type rules. <p><strong>OperationId:</strong>putMembershipTypeRules</p>
     * Change Membership type rules
     */
    async putMembershipTypeRules(requestParameters: PutMembershipTypeRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipTypeRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMembershipTypeFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    CardNumberDetails: 'CardNumberDetails',
    PointsDetails: 'PointsDetails',
    ExceptionCriteriaDetails: 'ExceptionCriteriaDetails',
    AdditionalDetails: 'AdditionalDetails',
    EnrollmentDetails: 'EnrollmentDetails',
    Levels: 'Levels'
} as const;
export type GetMembershipTypeFetchInstructionsEnum = typeof GetMembershipTypeFetchInstructionsEnum[keyof typeof GetMembershipTypeFetchInstructionsEnum];
/**
 * @export
 */
export const GetMembershipTypeRuleFetchInstructionsEnum = {
    RuleDefinition: 'RuleDefinition',
    PointsDefinition: 'PointsDefinition',
    RuleConditions: 'RuleConditions'
} as const;
export type GetMembershipTypeRuleFetchInstructionsEnum = typeof GetMembershipTypeRuleFetchInstructionsEnum[keyof typeof GetMembershipTypeRuleFetchInstructionsEnum];
/**
 * @export
 */
export const GetMembershipTypeRulesProgramTypeEnum = {
    All: 'All',
    Points: 'Points',
    Tier: 'Tier'
} as const;
export type GetMembershipTypeRulesProgramTypeEnum = typeof GetMembershipTypeRulesProgramTypeEnum[keyof typeof GetMembershipTypeRulesProgramTypeEnum];
/**
 * @export
 */
export const GetMembershipTypeRulesRuleBasedOnEnum = {
    Revenue: 'Revenue',
    Stay: 'Stay',
    Nights: 'Nights',
    Enrollment: 'Enrollment',
    TierUpgrade: 'TierUpgrade',
    Renewal: 'Renewal',
    Rfm: 'Rfm'
} as const;
export type GetMembershipTypeRulesRuleBasedOnEnum = typeof GetMembershipTypeRulesRuleBasedOnEnum[keyof typeof GetMembershipTypeRulesRuleBasedOnEnum];
