/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddressFormats,
  CreditRatings,
  ExceptionDetailType,
  ExclusivePreferences,
  ExclusivePreferencesCopy,
  HotelPreferences,
  OperaVersion,
  PreferenceGroups,
  PreferencesCopy,
  ProfileLinks,
  ProfileNameValidations,
  ProfileNameValidationsToChange,
  Status,
  TemplateExclusivePreferences,
  TemplatePreferences,
} from '../models/index';
import {
    AddressFormatsFromJSON,
    AddressFormatsToJSON,
    CreditRatingsFromJSON,
    CreditRatingsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ExclusivePreferencesFromJSON,
    ExclusivePreferencesToJSON,
    ExclusivePreferencesCopyFromJSON,
    ExclusivePreferencesCopyToJSON,
    HotelPreferencesFromJSON,
    HotelPreferencesToJSON,
    OperaVersionFromJSON,
    OperaVersionToJSON,
    PreferenceGroupsFromJSON,
    PreferenceGroupsToJSON,
    PreferencesCopyFromJSON,
    PreferencesCopyToJSON,
    ProfileLinksFromJSON,
    ProfileLinksToJSON,
    ProfileNameValidationsFromJSON,
    ProfileNameValidationsToJSON,
    ProfileNameValidationsToChangeFromJSON,
    ProfileNameValidationsToChangeToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateExclusivePreferencesFromJSON,
    TemplateExclusivePreferencesToJSON,
    TemplatePreferencesFromJSON,
    TemplatePreferencesToJSON,
} from '../models/index';

export interface CopyExclusivePreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exclusivePreferencesCopy: ExclusivePreferencesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyPreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferencesCopy: PreferencesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAddressFormatsRequest {
    formatCodes: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCreditRatingsRequest {
    creditRatings: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteExclusivePreferencesRequest {
    hotelId: string;
    exclusivePreferenceCode: string;
    exclusivePreferenceGroup: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHotelAndGlobalPreferencesRequest {
    preferenceCode: string;
    preferenceGroup: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePreferenceGroupsRequest {
    preferenceGroup: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePreferencesRequest {
    hotelId: string;
    preferenceCode: string;
    preferenceGroup: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileLinksRequest {
    fromType: string;
    toType: string;
    fromCode: string;
    toCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileNameValidationsRequest {
    profileType: DeleteProfileNameValidationsProfileTypeEnum;
    profileName: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileRelationshipsRequest {
    fromType: string;
    toType: string;
    fromCode: string;
    toCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateExclusivePreferencesRequest {
    exclusivePreferenceCode: string;
    exclusivePreferenceGroup: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplatePreferencesRequest {
    preferenceCode: string;
    preferenceGroup: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAddressFormatsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditRatingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExclusivePreferencesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exclusivePreferenceCodes?: Array<string>;
    preferenceGroupsCodes?: Array<string>;
    preferenceCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreferenceGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceGroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreferencesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceCodes?: Array<string>;
    preferenceGroupsCodes?: Array<string>;
    createdByUserIds?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileLinksRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fromType?: string;
    toType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileNameValidationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    typeCodes?: Array<string>;
    wildCard?: string;
    name?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileRelationshipsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fromType?: string;
    toType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateExclusivePreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exclusivePreferenceCodes?: Array<string>;
    preferenceGroupsCodes?: Array<string>;
    preferenceCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplatePreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceCodes?: Array<string>;
    preferenceGroupsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PingProfileConfigServiceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAddressFormatsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    addressFormats: AddressFormats;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCreditRatingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditRatings: CreditRatings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostExclusivePreferencesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exclusivePreferences: ExclusivePreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPreferenceGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceGroups: PreferenceGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPreferencesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelPreferences: HotelPreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileLinksRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileLinks: ProfileLinks;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileNameValidationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileNameValidations: ProfileNameValidations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileRelationshipsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileLinks: ProfileLinks;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateExclusivePreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateExclusivePreferences: TemplateExclusivePreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplatePreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templatePreferences: TemplatePreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAddressFormatsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    addressFormats: AddressFormats;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCreditRatingsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditRatings: CreditRatings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutExclusivePreferencesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exclusivePreferences: ExclusivePreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPreferenceGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preferenceGroups: PreferenceGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPreferencesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelPreferences: HotelPreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileLinksRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileLinks: ProfileLinks;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileNameValidationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileNameValidationsToChange: ProfileNameValidationsToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileRelationshipsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileLinks: ProfileLinks;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateExclusivePreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateExclusivePreferences: TemplateExclusivePreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplatePreferencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templatePreferences: TemplatePreferences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ProfileConfigurationApi extends runtime.BaseAPI {

    /**
     * You can use this API to copy Exclusive Preferences. <p><strong>OperationId:</strong>copyExclusivePreferences</p>
     * Copy Exclusive Preferences
     */
    async copyExclusivePreferencesRaw(requestParameters: CopyExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.exclusivePreferencesCopy === null || requestParameters.exclusivePreferencesCopy === undefined) {
            throw new runtime.RequiredError('exclusivePreferencesCopy','Required parameter requestParameters.exclusivePreferencesCopy was null or undefined when calling copyExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exclusivePreferences/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExclusivePreferencesCopyToJSON(requestParameters.exclusivePreferencesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to copy Exclusive Preferences. <p><strong>OperationId:</strong>copyExclusivePreferences</p>
     * Copy Exclusive Preferences
     */
    async copyExclusivePreferences(requestParameters: CopyExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to copy preferences. <p><strong>OperationId:</strong>copyPreferences</p>
     * Copy preferences
     */
    async copyPreferencesRaw(requestParameters: CopyPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferencesCopy === null || requestParameters.preferencesCopy === undefined) {
            throw new runtime.RequiredError('preferencesCopy','Required parameter requestParameters.preferencesCopy was null or undefined when calling copyPreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferences/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PreferencesCopyToJSON(requestParameters.preferencesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to copy preferences. <p><strong>OperationId:</strong>copyPreferences</p>
     * Copy preferences
     */
    async copyPreferences(requestParameters: CopyPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete address formats. <p><strong>OperationId:</strong>deleteAddressFormats</p>
     * Delete address formats
     */
    async deleteAddressFormatsRaw(requestParameters: DeleteAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.formatCodes === null || requestParameters.formatCodes === undefined) {
            throw new runtime.RequiredError('formatCodes','Required parameter requestParameters.formatCodes was null or undefined when calling deleteAddressFormats.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.formatCodes) {
            queryParameters['formatCodes'] = requestParameters.formatCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressFormats`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete address formats. <p><strong>OperationId:</strong>deleteAddressFormats</p>
     * Delete address formats
     */
    async deleteAddressFormats(requestParameters: DeleteAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete credit ratings. <p><strong>OperationId:</strong>deleteCreditRatings</p>
     * Delete credit ratings
     */
    async deleteCreditRatingsRaw(requestParameters: DeleteCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.creditRatings === null || requestParameters.creditRatings === undefined) {
            throw new runtime.RequiredError('creditRatings','Required parameter requestParameters.creditRatings was null or undefined when calling deleteCreditRatings.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.creditRatings) {
            queryParameters['creditRatings'] = requestParameters.creditRatings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditRatings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete credit ratings. <p><strong>OperationId:</strong>deleteCreditRatings</p>
     * Delete credit ratings
     */
    async deleteCreditRatings(requestParameters: DeleteCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>deleteExclusivePreferences</p>
     * Delete Exclusive Preferences
     */
    async deleteExclusivePreferencesRaw(requestParameters: DeleteExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteExclusivePreferences.');
        }
        
        if (requestParameters.exclusivePreferenceCode === null || requestParameters.exclusivePreferenceCode === undefined) {
            throw new runtime.RequiredError('exclusivePreferenceCode','Required parameter requestParameters.exclusivePreferenceCode was null or undefined when calling deleteExclusivePreferences.');
        }
        
        if (requestParameters.exclusivePreferenceGroup === null || requestParameters.exclusivePreferenceGroup === undefined) {
            throw new runtime.RequiredError('exclusivePreferenceGroup','Required parameter requestParameters.exclusivePreferenceGroup was null or undefined when calling deleteExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.exclusivePreferenceCode !== undefined) {
            queryParameters['exclusivePreferenceCode'] = requestParameters.exclusivePreferenceCode;
        }

        if (requestParameters.exclusivePreferenceGroup !== undefined) {
            queryParameters['exclusivePreferenceGroup'] = requestParameters.exclusivePreferenceGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>deleteExclusivePreferences</p>
     * Delete Exclusive Preferences
     */
    async deleteExclusivePreferences(requestParameters: DeleteExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete preferences, this API allows us to delete both the Global and Hotel level preferences. <p><strong>OperationId:</strong>deleteHotelAndGlobalPreferences</p>
     * Delete preferences
     */
    async deleteHotelAndGlobalPreferencesRaw(requestParameters: DeleteHotelAndGlobalPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
            throw new runtime.RequiredError('preferenceCode','Required parameter requestParameters.preferenceCode was null or undefined when calling deleteHotelAndGlobalPreferences.');
        }
        
        if (requestParameters.preferenceGroup === null || requestParameters.preferenceGroup === undefined) {
            throw new runtime.RequiredError('preferenceGroup','Required parameter requestParameters.preferenceGroup was null or undefined when calling deleteHotelAndGlobalPreferences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.preferenceCode !== undefined) {
            queryParameters['preferenceCode'] = requestParameters.preferenceCode;
        }

        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preference`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete preferences, this API allows us to delete both the Global and Hotel level preferences. <p><strong>OperationId:</strong>deleteHotelAndGlobalPreferences</p>
     * Delete preferences
     */
    async deleteHotelAndGlobalPreferences(requestParameters: DeleteHotelAndGlobalPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHotelAndGlobalPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to delete an existing Preference Group. <p><strong>OperationId:</strong>deletePreferenceGroups</p>
     * Delete preference groups
     */
    async deletePreferenceGroupsRaw(requestParameters: DeletePreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceGroup === null || requestParameters.preferenceGroup === undefined) {
            throw new runtime.RequiredError('preferenceGroup','Required parameter requestParameters.preferenceGroup was null or undefined when calling deletePreferenceGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to delete an existing Preference Group. <p><strong>OperationId:</strong>deletePreferenceGroups</p>
     * Delete preference groups
     */
    async deletePreferenceGroups(requestParameters: DeletePreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete preferences. <p><strong>OperationId:</strong>deletePreferences</p>
     * Delete preferences
     */
    async deletePreferencesRaw(requestParameters: DeletePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePreferences.');
        }
        
        if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
            throw new runtime.RequiredError('preferenceCode','Required parameter requestParameters.preferenceCode was null or undefined when calling deletePreferences.');
        }
        
        if (requestParameters.preferenceGroup === null || requestParameters.preferenceGroup === undefined) {
            throw new runtime.RequiredError('preferenceGroup','Required parameter requestParameters.preferenceGroup was null or undefined when calling deletePreferences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.preferenceCode !== undefined) {
            queryParameters['preferenceCode'] = requestParameters.preferenceCode;
        }

        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete preferences. <p><strong>OperationId:</strong>deletePreferences</p>
     * Delete preferences
     */
    async deletePreferences(requestParameters: DeletePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete profile links.<br><p><strong><mark>This API is deprecated. Please use deleteProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>deleteProfileLinks</p>
     * Delete profile links
     * @deprecated
     */
    async deleteProfileLinksRaw(requestParameters: DeleteProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fromType === null || requestParameters.fromType === undefined) {
            throw new runtime.RequiredError('fromType','Required parameter requestParameters.fromType was null or undefined when calling deleteProfileLinks.');
        }
        
        if (requestParameters.toType === null || requestParameters.toType === undefined) {
            throw new runtime.RequiredError('toType','Required parameter requestParameters.toType was null or undefined when calling deleteProfileLinks.');
        }
        
        if (requestParameters.fromCode === null || requestParameters.fromCode === undefined) {
            throw new runtime.RequiredError('fromCode','Required parameter requestParameters.fromCode was null or undefined when calling deleteProfileLinks.');
        }
        
        if (requestParameters.toCode === null || requestParameters.toCode === undefined) {
            throw new runtime.RequiredError('toCode','Required parameter requestParameters.toCode was null or undefined when calling deleteProfileLinks.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fromType !== undefined) {
            queryParameters['fromType'] = requestParameters.fromType;
        }

        if (requestParameters.toType !== undefined) {
            queryParameters['toType'] = requestParameters.toType;
        }

        if (requestParameters.fromCode !== undefined) {
            queryParameters['fromCode'] = requestParameters.fromCode;
        }

        if (requestParameters.toCode !== undefined) {
            queryParameters['toCode'] = requestParameters.toCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/links`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete profile links.<br><p><strong><mark>This API is deprecated. Please use deleteProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>deleteProfileLinks</p>
     * Delete profile links
     * @deprecated
     */
    async deleteProfileLinks(requestParameters: DeleteProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete Profile Name Validations. <p><strong>OperationId:</strong>deleteProfileNameValidations</p>
     * Delete Profile Name Validations
     */
    async deleteProfileNameValidationsRaw(requestParameters: DeleteProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileType === null || requestParameters.profileType === undefined) {
            throw new runtime.RequiredError('profileType','Required parameter requestParameters.profileType was null or undefined when calling deleteProfileNameValidations.');
        }
        
        if (requestParameters.profileName === null || requestParameters.profileName === undefined) {
            throw new runtime.RequiredError('profileName','Required parameter requestParameters.profileName was null or undefined when calling deleteProfileNameValidations.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.profileName !== undefined) {
            queryParameters['profileName'] = requestParameters.profileName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete Profile Name Validations. <p><strong>OperationId:</strong>deleteProfileNameValidations</p>
     * Delete Profile Name Validations
     */
    async deleteProfileNameValidations(requestParameters: DeleteProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete profile relationships. <p><strong>OperationId:</strong>deleteProfileRelationships</p>
     * Delete profile relationships
     */
    async deleteProfileRelationshipsRaw(requestParameters: DeleteProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fromType === null || requestParameters.fromType === undefined) {
            throw new runtime.RequiredError('fromType','Required parameter requestParameters.fromType was null or undefined when calling deleteProfileRelationships.');
        }
        
        if (requestParameters.toType === null || requestParameters.toType === undefined) {
            throw new runtime.RequiredError('toType','Required parameter requestParameters.toType was null or undefined when calling deleteProfileRelationships.');
        }
        
        if (requestParameters.fromCode === null || requestParameters.fromCode === undefined) {
            throw new runtime.RequiredError('fromCode','Required parameter requestParameters.fromCode was null or undefined when calling deleteProfileRelationships.');
        }
        
        if (requestParameters.toCode === null || requestParameters.toCode === undefined) {
            throw new runtime.RequiredError('toCode','Required parameter requestParameters.toCode was null or undefined when calling deleteProfileRelationships.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fromType !== undefined) {
            queryParameters['fromType'] = requestParameters.fromType;
        }

        if (requestParameters.toType !== undefined) {
            queryParameters['toType'] = requestParameters.toType;
        }

        if (requestParameters.fromCode !== undefined) {
            queryParameters['fromCode'] = requestParameters.fromCode;
        }

        if (requestParameters.toCode !== undefined) {
            queryParameters['toCode'] = requestParameters.toCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/relationships`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete profile relationships. <p><strong>OperationId:</strong>deleteProfileRelationships</p>
     * Delete profile relationships
     */
    async deleteProfileRelationships(requestParameters: DeleteProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete template Exclusive Preferences. <p><strong>OperationId:</strong>deleteTemplateExclusivePreferences</p>
     * Delete template Exclusive Preferences
     */
    async deleteTemplateExclusivePreferencesRaw(requestParameters: DeleteTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.exclusivePreferenceCode === null || requestParameters.exclusivePreferenceCode === undefined) {
            throw new runtime.RequiredError('exclusivePreferenceCode','Required parameter requestParameters.exclusivePreferenceCode was null or undefined when calling deleteTemplateExclusivePreferences.');
        }
        
        if (requestParameters.exclusivePreferenceGroup === null || requestParameters.exclusivePreferenceGroup === undefined) {
            throw new runtime.RequiredError('exclusivePreferenceGroup','Required parameter requestParameters.exclusivePreferenceGroup was null or undefined when calling deleteTemplateExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.exclusivePreferenceCode !== undefined) {
            queryParameters['exclusivePreferenceCode'] = requestParameters.exclusivePreferenceCode;
        }

        if (requestParameters.exclusivePreferenceGroup !== undefined) {
            queryParameters['exclusivePreferenceGroup'] = requestParameters.exclusivePreferenceGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete template Exclusive Preferences. <p><strong>OperationId:</strong>deleteTemplateExclusivePreferences</p>
     * Delete template Exclusive Preferences
     */
    async deleteTemplateExclusivePreferences(requestParameters: DeleteTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete template preferences. <p><strong>OperationId:</strong>deleteTemplatePreferences</p>
     * Delete template preferences
     */
    async deleteTemplatePreferencesRaw(requestParameters: DeleteTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceCode === null || requestParameters.preferenceCode === undefined) {
            throw new runtime.RequiredError('preferenceCode','Required parameter requestParameters.preferenceCode was null or undefined when calling deleteTemplatePreferences.');
        }
        
        if (requestParameters.preferenceGroup === null || requestParameters.preferenceGroup === undefined) {
            throw new runtime.RequiredError('preferenceGroup','Required parameter requestParameters.preferenceGroup was null or undefined when calling deleteTemplatePreferences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.preferenceCode !== undefined) {
            queryParameters['preferenceCode'] = requestParameters.preferenceCode;
        }

        if (requestParameters.preferenceGroup !== undefined) {
            queryParameters['preferenceGroup'] = requestParameters.preferenceGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferences`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete template preferences. <p><strong>OperationId:</strong>deleteTemplatePreferences</p>
     * Delete template preferences
     */
    async deleteTemplatePreferences(requestParameters: DeleteTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get address formats. <p><strong>OperationId:</strong>getAddressFormats</p>
     * Get address formats
     */
    async getAddressFormatsRaw(requestParameters: GetAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressFormats>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressFormats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFormatsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get address formats. <p><strong>OperationId:</strong>getAddressFormats</p>
     * Get address formats
     */
    async getAddressFormats(requestParameters: GetAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressFormats> {
        const response = await this.getAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get credit ratings. <p><strong>OperationId:</strong>getCreditRatings</p>
     * Get credit ratings
     */
    async getCreditRatingsRaw(requestParameters: GetCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditRatings>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditRatings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditRatingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get credit ratings. <p><strong>OperationId:</strong>getCreditRatings</p>
     * Get credit ratings
     */
    async getCreditRatings(requestParameters: GetCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditRatings> {
        const response = await this.getCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Exclusive preferences at hotel Level. <p><strong>OperationId:</strong>getExclusivePreferences</p>
     * Get Exclusive preferences
     */
    async getExclusivePreferencesRaw(requestParameters: GetExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExclusivePreferences>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.exclusivePreferenceCodes) {
            queryParameters['exclusivePreferenceCodes'] = requestParameters.exclusivePreferenceCodes;
        }

        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }

        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExclusivePreferencesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Exclusive preferences at hotel Level. <p><strong>OperationId:</strong>getExclusivePreferences</p>
     * Get Exclusive preferences
     */
    async getExclusivePreferences(requestParameters: GetExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExclusivePreferences> {
        const response = await this.getExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The API can be used to retrieve preference groups that match the given criteria in the request. <p><strong>OperationId:</strong>getPreferenceGroups</p>
     * Get Preference Groups
     */
    async getPreferenceGroupsRaw(requestParameters: GetPreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreferenceGroups>> {
        const queryParameters: any = {};

        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreferenceGroupsFromJSON(jsonValue));
    }

    /**
     * The API can be used to retrieve preference groups that match the given criteria in the request. <p><strong>OperationId:</strong>getPreferenceGroups</p>
     * Get Preference Groups
     */
    async getPreferenceGroups(requestParameters: GetPreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreferenceGroups> {
        const response = await this.getPreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get all configured guest preferences. Use preference grouping code or preference code to narrow down the results.<p><strong>OperationId:</strong>getPreferences</p>
     * Get preferences
     */
    async getPreferencesRaw(requestParameters: GetPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelPreferences>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPreferences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }

        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }

        if (requestParameters.createdByUserIds) {
            queryParameters['createdByUserIds'] = requestParameters.createdByUserIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelPreferencesFromJSON(jsonValue));
    }

    /**
     * Use this API to get all configured guest preferences. Use preference grouping code or preference code to narrow down the results.<p><strong>OperationId:</strong>getPreferences</p>
     * Get preferences
     */
    async getPreferences(requestParameters: GetPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelPreferences> {
        const response = await this.getPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get profile links.<br><p><strong><mark>This API is deprecated. Please use getProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>getProfileLinks</p>
     * Get profile links
     * @deprecated
     */
    async getProfileLinksRaw(requestParameters: GetProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileLinks>> {
        const queryParameters: any = {};

        if (requestParameters.fromType !== undefined) {
            queryParameters['fromType'] = requestParameters.fromType;
        }

        if (requestParameters.toType !== undefined) {
            queryParameters['toType'] = requestParameters.toType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/links`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileLinksFromJSON(jsonValue));
    }

    /**
     * You can use this API to get profile links.<br><p><strong><mark>This API is deprecated. Please use getProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>getProfileLinks</p>
     * Get profile links
     * @deprecated
     */
    async getProfileLinks(requestParameters: GetProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileLinks> {
        const response = await this.getProfileLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Profile Name Validations. <p><strong>OperationId:</strong>getProfileNameValidations</p>
     * Get Profile Name Validations
     */
    async getProfileNameValidationsRaw(requestParameters: GetProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileNameValidations>> {
        const queryParameters: any = {};

        if (requestParameters.typeCodes) {
            queryParameters['typeCodes'] = requestParameters.typeCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileNameValidationsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Profile Name Validations. <p><strong>OperationId:</strong>getProfileNameValidations</p>
     * Get Profile Name Validations
     */
    async getProfileNameValidations(requestParameters: GetProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileNameValidations> {
        const response = await this.getProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get profile relationships. <p><strong>OperationId:</strong>getProfileRelationships</p>
     * Get profile relationships
     */
    async getProfileRelationshipsRaw(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileLinks>> {
        const queryParameters: any = {};

        if (requestParameters.fromType !== undefined) {
            queryParameters['fromType'] = requestParameters.fromType;
        }

        if (requestParameters.toType !== undefined) {
            queryParameters['toType'] = requestParameters.toType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/relationships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileLinksFromJSON(jsonValue));
    }

    /**
     * You can use this API to get profile relationships. <p><strong>OperationId:</strong>getProfileRelationships</p>
     * Get profile relationships
     */
    async getProfileRelationships(requestParameters: GetProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileLinks> {
        const response = await this.getProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get template Exclusive Preferences. <p><strong>OperationId:</strong>getTemplateExclusivePreferences</p>
     * Get template Exclusive Preferences
     */
    async getTemplateExclusivePreferencesRaw(requestParameters: GetTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateExclusivePreferences>> {
        const queryParameters: any = {};

        if (requestParameters.exclusivePreferenceCodes) {
            queryParameters['exclusivePreferenceCodes'] = requestParameters.exclusivePreferenceCodes;
        }

        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }

        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateExclusivePreferencesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get template Exclusive Preferences. <p><strong>OperationId:</strong>getTemplateExclusivePreferences</p>
     * Get template Exclusive Preferences
     */
    async getTemplateExclusivePreferences(requestParameters: GetTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateExclusivePreferences> {
        const response = await this.getTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get template Preferences. <p><strong>OperationId:</strong>getTemplatePreferences</p>
     * Get template Preferences
     */
    async getTemplatePreferencesRaw(requestParameters: GetTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatePreferences>> {
        const queryParameters: any = {};

        if (requestParameters.preferenceCodes) {
            queryParameters['preferenceCodes'] = requestParameters.preferenceCodes;
        }

        if (requestParameters.preferenceGroupsCodes) {
            queryParameters['preferenceGroupsCodes'] = requestParameters.preferenceGroupsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatePreferencesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get template Preferences. <p><strong>OperationId:</strong>getTemplatePreferences</p>
     * Get template Preferences
     */
    async getTemplatePreferences(requestParameters: GetTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatePreferences> {
        const response = await this.getTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ping Profile Configuration Service <p><strong>OperationId:</strong>pingProfileConfigService</p>
     *  ping
     */
    async pingProfileConfigServiceRaw(requestParameters: PingProfileConfigServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/profile/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaVersionFromJSON(jsonValue));
    }

    /**
     * Ping Profile Configuration Service <p><strong>OperationId:</strong>pingProfileConfigService</p>
     *  ping
     */
    async pingProfileConfigService(requestParameters: PingProfileConfigServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion> {
        const response = await this.pingProfileConfigServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create address formats. <p><strong>OperationId:</strong>postAddressFormats</p>
     * Create address formats
     */
    async postAddressFormatsRaw(requestParameters: PostAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.addressFormats === null || requestParameters.addressFormats === undefined) {
            throw new runtime.RequiredError('addressFormats','Required parameter requestParameters.addressFormats was null or undefined when calling postAddressFormats.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressFormats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressFormatsToJSON(requestParameters.addressFormats),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create address formats. <p><strong>OperationId:</strong>postAddressFormats</p>
     * Create address formats
     */
    async postAddressFormats(requestParameters: PostAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create credit ratings. <p><strong>OperationId:</strong>postCreditRatings</p>
     * Create credit ratings
     */
    async postCreditRatingsRaw(requestParameters: PostCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.creditRatings === null || requestParameters.creditRatings === undefined) {
            throw new runtime.RequiredError('creditRatings','Required parameter requestParameters.creditRatings was null or undefined when calling postCreditRatings.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditRatings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditRatingsToJSON(requestParameters.creditRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create credit ratings. <p><strong>OperationId:</strong>postCreditRatings</p>
     * Create credit ratings
     */
    async postCreditRatings(requestParameters: PostCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>postExclusivePreferences</p>
     * Create Exclusive Preferences
     */
    async postExclusivePreferencesRaw(requestParameters: PostExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postExclusivePreferences.');
        }
        
        if (requestParameters.exclusivePreferences === null || requestParameters.exclusivePreferences === undefined) {
            throw new runtime.RequiredError('exclusivePreferences','Required parameter requestParameters.exclusivePreferences was null or undefined when calling postExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExclusivePreferencesToJSON(requestParameters.exclusivePreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>postExclusivePreferences</p>
     * Create Exclusive Preferences
     */
    async postExclusivePreferences(requestParameters: PostExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Preference group. <p><strong>OperationId:</strong>postPreferenceGroups</p>
     * Create new preference groups 
     */
    async postPreferenceGroupsRaw(requestParameters: PostPreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceGroups === null || requestParameters.preferenceGroups === undefined) {
            throw new runtime.RequiredError('preferenceGroups','Required parameter requestParameters.preferenceGroups was null or undefined when calling postPreferenceGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreferenceGroupsToJSON(requestParameters.preferenceGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Preference group. <p><strong>OperationId:</strong>postPreferenceGroups</p>
     * Create new preference groups 
     */
    async postPreferenceGroups(requestParameters: PostPreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This will allow you to create new preferences. <p><strong>OperationId:</strong>postPreferences</p>
     * Create preferences
     */
    async postPreferencesRaw(requestParameters: PostPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPreferences.');
        }
        
        if (requestParameters.hotelPreferences === null || requestParameters.hotelPreferences === undefined) {
            throw new runtime.RequiredError('hotelPreferences','Required parameter requestParameters.hotelPreferences was null or undefined when calling postPreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelPreferencesToJSON(requestParameters.hotelPreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This will allow you to create new preferences. <p><strong>OperationId:</strong>postPreferences</p>
     * Create preferences
     */
    async postPreferences(requestParameters: PostPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create profile links.<br><p><strong><mark>This API is deprecated. Please use postProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>postProfileLinks</p>
     * Create profile links
     * @deprecated
     */
    async postProfileLinksRaw(requestParameters: PostProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileLinks === null || requestParameters.profileLinks === undefined) {
            throw new runtime.RequiredError('profileLinks','Required parameter requestParameters.profileLinks was null or undefined when calling postProfileLinks.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/links`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileLinksToJSON(requestParameters.profileLinks),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create profile links.<br><p><strong><mark>This API is deprecated. Please use postProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>postProfileLinks</p>
     * Create profile links
     * @deprecated
     */
    async postProfileLinks(requestParameters: PostProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create Profile Name Validations. <p><strong>OperationId:</strong>postProfileNameValidations</p>
     * Create Profile Name Validations
     */
    async postProfileNameValidationsRaw(requestParameters: PostProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileNameValidations === null || requestParameters.profileNameValidations === undefined) {
            throw new runtime.RequiredError('profileNameValidations','Required parameter requestParameters.profileNameValidations was null or undefined when calling postProfileNameValidations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileNameValidationsToJSON(requestParameters.profileNameValidations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create Profile Name Validations. <p><strong>OperationId:</strong>postProfileNameValidations</p>
     * Create Profile Name Validations
     */
    async postProfileNameValidations(requestParameters: PostProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create profile relationships. <p><strong>OperationId:</strong>postProfileRelationships</p>
     * Create profile relationships
     */
    async postProfileRelationshipsRaw(requestParameters: PostProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileLinks === null || requestParameters.profileLinks === undefined) {
            throw new runtime.RequiredError('profileLinks','Required parameter requestParameters.profileLinks was null or undefined when calling postProfileRelationships.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/relationships`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileLinksToJSON(requestParameters.profileLinks),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create profile relationships. <p><strong>OperationId:</strong>postProfileRelationships</p>
     * Create profile relationships
     */
    async postProfileRelationships(requestParameters: PostProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create template Exclusive Preferences. <p><strong>OperationId:</strong>postTemplateExclusivePreferences</p>
     * Create template Exclusive Preferences
     */
    async postTemplateExclusivePreferencesRaw(requestParameters: PostTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateExclusivePreferences === null || requestParameters.templateExclusivePreferences === undefined) {
            throw new runtime.RequiredError('templateExclusivePreferences','Required parameter requestParameters.templateExclusivePreferences was null or undefined when calling postTemplateExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateExclusivePreferencesToJSON(requestParameters.templateExclusivePreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create template Exclusive Preferences. <p><strong>OperationId:</strong>postTemplateExclusivePreferences</p>
     * Create template Exclusive Preferences
     */
    async postTemplateExclusivePreferences(requestParameters: PostTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create template preferences. <p><strong>OperationId:</strong>postTemplatePreferences</p>
     * Create template preferences
     */
    async postTemplatePreferencesRaw(requestParameters: PostTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templatePreferences === null || requestParameters.templatePreferences === undefined) {
            throw new runtime.RequiredError('templatePreferences','Required parameter requestParameters.templatePreferences was null or undefined when calling postTemplatePreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferences`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatePreferencesToJSON(requestParameters.templatePreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create template preferences. <p><strong>OperationId:</strong>postTemplatePreferences</p>
     * Create template preferences
     */
    async postTemplatePreferences(requestParameters: PostTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change address formats. <p><strong>OperationId:</strong>putAddressFormats</p>
     * Change address formats
     */
    async putAddressFormatsRaw(requestParameters: PutAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.addressFormats === null || requestParameters.addressFormats === undefined) {
            throw new runtime.RequiredError('addressFormats','Required parameter requestParameters.addressFormats was null or undefined when calling putAddressFormats.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressFormats`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressFormatsToJSON(requestParameters.addressFormats),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change address formats. <p><strong>OperationId:</strong>putAddressFormats</p>
     * Change address formats
     */
    async putAddressFormats(requestParameters: PutAddressFormatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAddressFormatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change credit ratings. <p><strong>OperationId:</strong>putCreditRatings</p>
     * Change credit ratings
     */
    async putCreditRatingsRaw(requestParameters: PutCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.creditRatings === null || requestParameters.creditRatings === undefined) {
            throw new runtime.RequiredError('creditRatings','Required parameter requestParameters.creditRatings was null or undefined when calling putCreditRatings.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditRatings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreditRatingsToJSON(requestParameters.creditRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change credit ratings. <p><strong>OperationId:</strong>putCreditRatings</p>
     * Change credit ratings
     */
    async putCreditRatings(requestParameters: PutCreditRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCreditRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>putExclusivePreferences</p>
     * Change Exclusive Preferences
     */
    async putExclusivePreferencesRaw(requestParameters: PutExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putExclusivePreferences.');
        }
        
        if (requestParameters.exclusivePreferences === null || requestParameters.exclusivePreferences === undefined) {
            throw new runtime.RequiredError('exclusivePreferences','Required parameter requestParameters.exclusivePreferences was null or undefined when calling putExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/exclusivePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExclusivePreferencesToJSON(requestParameters.exclusivePreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Exclusive Preferences at hotel Level. <p><strong>OperationId:</strong>putExclusivePreferences</p>
     * Change Exclusive Preferences
     */
    async putExclusivePreferences(requestParameters: PutExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API can be used to modify the preference groups. Changes can be made concurrently to multiple groups. <p><strong>OperationId:</strong>putPreferenceGroups</p>
     * Change Preference Groups
     */
    async putPreferenceGroupsRaw(requestParameters: PutPreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.preferenceGroups === null || requestParameters.preferenceGroups === undefined) {
            throw new runtime.RequiredError('preferenceGroups','Required parameter requestParameters.preferenceGroups was null or undefined when calling putPreferenceGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferenceGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PreferenceGroupsToJSON(requestParameters.preferenceGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API can be used to modify the preference groups. Changes can be made concurrently to multiple groups. <p><strong>OperationId:</strong>putPreferenceGroups</p>
     * Change Preference Groups
     */
    async putPreferenceGroups(requestParameters: PutPreferenceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPreferenceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update and change existing preferences. <p><strong>OperationId:</strong>putPreferences</p>
     * Change preferences
     */
    async putPreferencesRaw(requestParameters: PutPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putPreferences.');
        }
        
        if (requestParameters.hotelPreferences === null || requestParameters.hotelPreferences === undefined) {
            throw new runtime.RequiredError('hotelPreferences','Required parameter requestParameters.hotelPreferences was null or undefined when calling putPreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/preferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelPreferencesToJSON(requestParameters.hotelPreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update and change existing preferences. <p><strong>OperationId:</strong>putPreferences</p>
     * Change preferences
     */
    async putPreferences(requestParameters: PutPreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change profile links.<br><p><strong><mark>This API is deprecated. Please use putProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>putProfileLinks</p>
     * Change profile links
     * @deprecated
     */
    async putProfileLinksRaw(requestParameters: PutProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileLinks === null || requestParameters.profileLinks === undefined) {
            throw new runtime.RequiredError('profileLinks','Required parameter requestParameters.profileLinks was null or undefined when calling putProfileLinks.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/links`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileLinksToJSON(requestParameters.profileLinks),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change profile links.<br><p><strong><mark>This API is deprecated. Please use putProfileRelationships instead</mark></strong></p> <p><strong>OperationId:</strong>putProfileLinks</p>
     * Change profile links
     * @deprecated
     */
    async putProfileLinks(requestParameters: PutProfileLinksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putProfileLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Profile Name Validations. <p><strong>OperationId:</strong>putProfileNameValidations</p>
     * Change Profile Name Validations
     */
    async putProfileNameValidationsRaw(requestParameters: PutProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileNameValidationsToChange === null || requestParameters.profileNameValidationsToChange === undefined) {
            throw new runtime.RequiredError('profileNameValidationsToChange','Required parameter requestParameters.profileNameValidationsToChange was null or undefined when calling putProfileNameValidations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileNameValidations`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileNameValidationsToChangeToJSON(requestParameters.profileNameValidationsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Profile Name Validations. <p><strong>OperationId:</strong>putProfileNameValidations</p>
     * Change Profile Name Validations
     */
    async putProfileNameValidations(requestParameters: PutProfileNameValidationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putProfileNameValidationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change profile relationships. <p><strong>OperationId:</strong>putProfileRelationships</p>
     * Change profile relationships
     */
    async putProfileRelationshipsRaw(requestParameters: PutProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileLinks === null || requestParameters.profileLinks === undefined) {
            throw new runtime.RequiredError('profileLinks','Required parameter requestParameters.profileLinks was null or undefined when calling putProfileRelationships.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/relationships`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileLinksToJSON(requestParameters.profileLinks),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change profile relationships. <p><strong>OperationId:</strong>putProfileRelationships</p>
     * Change profile relationships
     */
    async putProfileRelationships(requestParameters: PutProfileRelationshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putProfileRelationshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change template Exclusive Preferences. <p><strong>OperationId:</strong>putTemplateExclusivePreferences</p>
     * Change template Exclusive Preferences
     */
    async putTemplateExclusivePreferencesRaw(requestParameters: PutTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateExclusivePreferences === null || requestParameters.templateExclusivePreferences === undefined) {
            throw new runtime.RequiredError('templateExclusivePreferences','Required parameter requestParameters.templateExclusivePreferences was null or undefined when calling putTemplateExclusivePreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exclusivePreferences`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateExclusivePreferencesToJSON(requestParameters.templateExclusivePreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change template Exclusive Preferences. <p><strong>OperationId:</strong>putTemplateExclusivePreferences</p>
     * Change template Exclusive Preferences
     */
    async putTemplateExclusivePreferences(requestParameters: PutTemplateExclusivePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateExclusivePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change template preferences. <p><strong>OperationId:</strong>putTemplatePreferences</p>
     * Change template preferences
     */
    async putTemplatePreferencesRaw(requestParameters: PutTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templatePreferences === null || requestParameters.templatePreferences === undefined) {
            throw new runtime.RequiredError('templatePreferences','Required parameter requestParameters.templatePreferences was null or undefined when calling putTemplatePreferences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/preferences`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatePreferencesToJSON(requestParameters.templatePreferences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change template preferences. <p><strong>OperationId:</strong>putTemplatePreferences</p>
     * Change template preferences
     */
    async putTemplatePreferences(requestParameters: PutTemplatePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplatePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteProfileNameValidationsProfileTypeEnum = {
    Company: 'Company',
    TravelAgent: 'TravelAgent',
    Source: 'Source'
} as const;
export type DeleteProfileNameValidationsProfileTypeEnum = typeof DeleteProfileNameValidationsProfileTypeEnum[keyof typeof DeleteProfileNameValidationsProfileTypeEnum];
