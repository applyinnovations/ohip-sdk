/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud CRM Configuration API
 * APIs for Customer Relationship Management (profile) configuration, such as creating preferences, or address types.  It also includes Membership Configuration, where you can retrieve membership levels that are configured for a property, or create new membership enrollment codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountOwnersDetails,
  AccountPrioritiesCriteria,
  AccountPrioritiesDetails,
  AccountPrioritiesToBeChanged,
  AccountTypesCriteria,
  AccountTypesDetails,
  AccountTypesToBeChanged,
  AddressTypesCriteria,
  AddressTypesDetails,
  AddressTypesToBeChanged,
  AlternateLanguageGuestTitlesCriteria,
  AlternateLanguageGuestTitlesDetails,
  AlternateLanguageGuestTitlesToBeChanged,
  BusinessSegmentsCriteria,
  BusinessSegmentsDetails,
  BusinessSegmentsToBeChanged,
  CityPostalCodesCriteria,
  CityPostalCodesDetails,
  CityPostalCodesToBeChanged,
  CompanyTypesCriteria,
  CompanyTypesDetails,
  CompanyTypesToBeChanged,
  CompetitionCodesCriteria,
  CompetitionCodesDetails,
  CompetitionCodesToBeChanged,
  DistanceTypesCriteria,
  DistanceTypesDetails,
  DistanceTypesToBeChanged,
  DistrictsCriteria,
  DistrictsDetails,
  DistrictsToBeChanged,
  EcertificateLocationTypesCriteria,
  EcertificateLocationTypesDetails,
  EcertificateLocationTypesToBeChanged,
  ExceptionDetailType,
  GenderTypes,
  GenderTypesCriteria,
  GenderTypesToChange,
  GuestStatusesCriteria,
  GuestStatusesDetails,
  GuestStatusesToBeChanged,
  GuestTitlesCriteria,
  GuestTitlesDetails,
  GuestTitlesToBeChanged,
  GuestTypesCriteria,
  GuestTypesDetails,
  GuestTypesToBeChanged,
  IdentificationTypesCriteria,
  IdentificationTypesDetails,
  IdentificationTypesToBeChanged,
  ImmigrationStatusesCriteria,
  ImmigrationStatusesDetails,
  ImmigrationStatusesToBeChanged,
  IndustryCodesCriteria,
  IndustryCodesDetails,
  IndustryCodesToBeChanged,
  InfluenceCodesCriteria,
  InfluenceCodesDetails,
  InfluenceCodesToBeChanged,
  KeywordTypesCriteria,
  KeywordTypesDetails,
  KeywordTypesToBeChanged,
  MailingActionCodesCriteria,
  MailingActionCodesDetails,
  MailingActionCodesToBeChanged,
  MembershipClaimOriginsCriteria,
  MembershipClaimOriginsDetails,
  MembershipClaimOriginsToBeChanged,
  MembershipClaimTypesCriteria,
  MembershipClaimTypesDetails,
  MembershipClaimTypesToBeChanged,
  MembershipEnrollmentCodesCriteria,
  MembershipEnrollmentCodesDetails,
  MembershipEnrollmentCodesToBeChanged,
  MembershipStatusCodesCriteria,
  MembershipStatusCodesDetails,
  MembershipStatusCodesToBeChanged,
  NationalitiesCriteria,
  NationalitiesDetails,
  NationalitiesToBeChanged,
  OwnerTeamsCriteria,
  OwnerTeamsDetails,
  OwnerTeamsToBeChanged,
  PayDaysCriteria,
  PayDaysDetails,
  PayDaysToBeChanged,
  ProfileInactiveReasonsCriteria,
  ProfileInactiveReasonsDetails,
  ProfileInactiveReasonsToBeChanged,
  ProfileRestrictionReasonsCriteria,
  ProfileRestrictionReasonsDetails,
  ProfileRestrictionReasonsToBeChanged,
  SourcesCriteria,
  SourcesDetails,
  SourcesToBeChanged,
  StatesCriteria,
  StatesDetails,
  Status,
  TerritoriesCriteria,
  TerritoriesDetails,
  TerritoriesToBeChanged,
  TitlesCriteria,
  TitlesDetails,
  TitlesToBeChanged,
  TravelAgentTypesCriteria,
  TravelAgentTypesDetails,
  TravelAgentTypesToBeChanged,
  VIPLevelsCriteria,
  VIPLevelsDetails,
  VIPLevelsToBeChanged,
} from '../models/index';
import {
    AccountOwnersDetailsFromJSON,
    AccountOwnersDetailsToJSON,
    AccountPrioritiesCriteriaFromJSON,
    AccountPrioritiesCriteriaToJSON,
    AccountPrioritiesDetailsFromJSON,
    AccountPrioritiesDetailsToJSON,
    AccountPrioritiesToBeChangedFromJSON,
    AccountPrioritiesToBeChangedToJSON,
    AccountTypesCriteriaFromJSON,
    AccountTypesCriteriaToJSON,
    AccountTypesDetailsFromJSON,
    AccountTypesDetailsToJSON,
    AccountTypesToBeChangedFromJSON,
    AccountTypesToBeChangedToJSON,
    AddressTypesCriteriaFromJSON,
    AddressTypesCriteriaToJSON,
    AddressTypesDetailsFromJSON,
    AddressTypesDetailsToJSON,
    AddressTypesToBeChangedFromJSON,
    AddressTypesToBeChangedToJSON,
    AlternateLanguageGuestTitlesCriteriaFromJSON,
    AlternateLanguageGuestTitlesCriteriaToJSON,
    AlternateLanguageGuestTitlesDetailsFromJSON,
    AlternateLanguageGuestTitlesDetailsToJSON,
    AlternateLanguageGuestTitlesToBeChangedFromJSON,
    AlternateLanguageGuestTitlesToBeChangedToJSON,
    BusinessSegmentsCriteriaFromJSON,
    BusinessSegmentsCriteriaToJSON,
    BusinessSegmentsDetailsFromJSON,
    BusinessSegmentsDetailsToJSON,
    BusinessSegmentsToBeChangedFromJSON,
    BusinessSegmentsToBeChangedToJSON,
    CityPostalCodesCriteriaFromJSON,
    CityPostalCodesCriteriaToJSON,
    CityPostalCodesDetailsFromJSON,
    CityPostalCodesDetailsToJSON,
    CityPostalCodesToBeChangedFromJSON,
    CityPostalCodesToBeChangedToJSON,
    CompanyTypesCriteriaFromJSON,
    CompanyTypesCriteriaToJSON,
    CompanyTypesDetailsFromJSON,
    CompanyTypesDetailsToJSON,
    CompanyTypesToBeChangedFromJSON,
    CompanyTypesToBeChangedToJSON,
    CompetitionCodesCriteriaFromJSON,
    CompetitionCodesCriteriaToJSON,
    CompetitionCodesDetailsFromJSON,
    CompetitionCodesDetailsToJSON,
    CompetitionCodesToBeChangedFromJSON,
    CompetitionCodesToBeChangedToJSON,
    DistanceTypesCriteriaFromJSON,
    DistanceTypesCriteriaToJSON,
    DistanceTypesDetailsFromJSON,
    DistanceTypesDetailsToJSON,
    DistanceTypesToBeChangedFromJSON,
    DistanceTypesToBeChangedToJSON,
    DistrictsCriteriaFromJSON,
    DistrictsCriteriaToJSON,
    DistrictsDetailsFromJSON,
    DistrictsDetailsToJSON,
    DistrictsToBeChangedFromJSON,
    DistrictsToBeChangedToJSON,
    EcertificateLocationTypesCriteriaFromJSON,
    EcertificateLocationTypesCriteriaToJSON,
    EcertificateLocationTypesDetailsFromJSON,
    EcertificateLocationTypesDetailsToJSON,
    EcertificateLocationTypesToBeChangedFromJSON,
    EcertificateLocationTypesToBeChangedToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GenderTypesFromJSON,
    GenderTypesToJSON,
    GenderTypesCriteriaFromJSON,
    GenderTypesCriteriaToJSON,
    GenderTypesToChangeFromJSON,
    GenderTypesToChangeToJSON,
    GuestStatusesCriteriaFromJSON,
    GuestStatusesCriteriaToJSON,
    GuestStatusesDetailsFromJSON,
    GuestStatusesDetailsToJSON,
    GuestStatusesToBeChangedFromJSON,
    GuestStatusesToBeChangedToJSON,
    GuestTitlesCriteriaFromJSON,
    GuestTitlesCriteriaToJSON,
    GuestTitlesDetailsFromJSON,
    GuestTitlesDetailsToJSON,
    GuestTitlesToBeChangedFromJSON,
    GuestTitlesToBeChangedToJSON,
    GuestTypesCriteriaFromJSON,
    GuestTypesCriteriaToJSON,
    GuestTypesDetailsFromJSON,
    GuestTypesDetailsToJSON,
    GuestTypesToBeChangedFromJSON,
    GuestTypesToBeChangedToJSON,
    IdentificationTypesCriteriaFromJSON,
    IdentificationTypesCriteriaToJSON,
    IdentificationTypesDetailsFromJSON,
    IdentificationTypesDetailsToJSON,
    IdentificationTypesToBeChangedFromJSON,
    IdentificationTypesToBeChangedToJSON,
    ImmigrationStatusesCriteriaFromJSON,
    ImmigrationStatusesCriteriaToJSON,
    ImmigrationStatusesDetailsFromJSON,
    ImmigrationStatusesDetailsToJSON,
    ImmigrationStatusesToBeChangedFromJSON,
    ImmigrationStatusesToBeChangedToJSON,
    IndustryCodesCriteriaFromJSON,
    IndustryCodesCriteriaToJSON,
    IndustryCodesDetailsFromJSON,
    IndustryCodesDetailsToJSON,
    IndustryCodesToBeChangedFromJSON,
    IndustryCodesToBeChangedToJSON,
    InfluenceCodesCriteriaFromJSON,
    InfluenceCodesCriteriaToJSON,
    InfluenceCodesDetailsFromJSON,
    InfluenceCodesDetailsToJSON,
    InfluenceCodesToBeChangedFromJSON,
    InfluenceCodesToBeChangedToJSON,
    KeywordTypesCriteriaFromJSON,
    KeywordTypesCriteriaToJSON,
    KeywordTypesDetailsFromJSON,
    KeywordTypesDetailsToJSON,
    KeywordTypesToBeChangedFromJSON,
    KeywordTypesToBeChangedToJSON,
    MailingActionCodesCriteriaFromJSON,
    MailingActionCodesCriteriaToJSON,
    MailingActionCodesDetailsFromJSON,
    MailingActionCodesDetailsToJSON,
    MailingActionCodesToBeChangedFromJSON,
    MailingActionCodesToBeChangedToJSON,
    MembershipClaimOriginsCriteriaFromJSON,
    MembershipClaimOriginsCriteriaToJSON,
    MembershipClaimOriginsDetailsFromJSON,
    MembershipClaimOriginsDetailsToJSON,
    MembershipClaimOriginsToBeChangedFromJSON,
    MembershipClaimOriginsToBeChangedToJSON,
    MembershipClaimTypesCriteriaFromJSON,
    MembershipClaimTypesCriteriaToJSON,
    MembershipClaimTypesDetailsFromJSON,
    MembershipClaimTypesDetailsToJSON,
    MembershipClaimTypesToBeChangedFromJSON,
    MembershipClaimTypesToBeChangedToJSON,
    MembershipEnrollmentCodesCriteriaFromJSON,
    MembershipEnrollmentCodesCriteriaToJSON,
    MembershipEnrollmentCodesDetailsFromJSON,
    MembershipEnrollmentCodesDetailsToJSON,
    MembershipEnrollmentCodesToBeChangedFromJSON,
    MembershipEnrollmentCodesToBeChangedToJSON,
    MembershipStatusCodesCriteriaFromJSON,
    MembershipStatusCodesCriteriaToJSON,
    MembershipStatusCodesDetailsFromJSON,
    MembershipStatusCodesDetailsToJSON,
    MembershipStatusCodesToBeChangedFromJSON,
    MembershipStatusCodesToBeChangedToJSON,
    NationalitiesCriteriaFromJSON,
    NationalitiesCriteriaToJSON,
    NationalitiesDetailsFromJSON,
    NationalitiesDetailsToJSON,
    NationalitiesToBeChangedFromJSON,
    NationalitiesToBeChangedToJSON,
    OwnerTeamsCriteriaFromJSON,
    OwnerTeamsCriteriaToJSON,
    OwnerTeamsDetailsFromJSON,
    OwnerTeamsDetailsToJSON,
    OwnerTeamsToBeChangedFromJSON,
    OwnerTeamsToBeChangedToJSON,
    PayDaysCriteriaFromJSON,
    PayDaysCriteriaToJSON,
    PayDaysDetailsFromJSON,
    PayDaysDetailsToJSON,
    PayDaysToBeChangedFromJSON,
    PayDaysToBeChangedToJSON,
    ProfileInactiveReasonsCriteriaFromJSON,
    ProfileInactiveReasonsCriteriaToJSON,
    ProfileInactiveReasonsDetailsFromJSON,
    ProfileInactiveReasonsDetailsToJSON,
    ProfileInactiveReasonsToBeChangedFromJSON,
    ProfileInactiveReasonsToBeChangedToJSON,
    ProfileRestrictionReasonsCriteriaFromJSON,
    ProfileRestrictionReasonsCriteriaToJSON,
    ProfileRestrictionReasonsDetailsFromJSON,
    ProfileRestrictionReasonsDetailsToJSON,
    ProfileRestrictionReasonsToBeChangedFromJSON,
    ProfileRestrictionReasonsToBeChangedToJSON,
    SourcesCriteriaFromJSON,
    SourcesCriteriaToJSON,
    SourcesDetailsFromJSON,
    SourcesDetailsToJSON,
    SourcesToBeChangedFromJSON,
    SourcesToBeChangedToJSON,
    StatesCriteriaFromJSON,
    StatesCriteriaToJSON,
    StatesDetailsFromJSON,
    StatesDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TerritoriesCriteriaFromJSON,
    TerritoriesCriteriaToJSON,
    TerritoriesDetailsFromJSON,
    TerritoriesDetailsToJSON,
    TerritoriesToBeChangedFromJSON,
    TerritoriesToBeChangedToJSON,
    TitlesCriteriaFromJSON,
    TitlesCriteriaToJSON,
    TitlesDetailsFromJSON,
    TitlesDetailsToJSON,
    TitlesToBeChangedFromJSON,
    TitlesToBeChangedToJSON,
    TravelAgentTypesCriteriaFromJSON,
    TravelAgentTypesCriteriaToJSON,
    TravelAgentTypesDetailsFromJSON,
    TravelAgentTypesDetailsToJSON,
    TravelAgentTypesToBeChangedFromJSON,
    TravelAgentTypesToBeChangedToJSON,
    VIPLevelsCriteriaFromJSON,
    VIPLevelsCriteriaToJSON,
    VIPLevelsDetailsFromJSON,
    VIPLevelsDetailsToJSON,
    VIPLevelsToBeChangedFromJSON,
    VIPLevelsToBeChangedToJSON,
} from '../models/index';

export interface ChangeAlternateLanguageGuestTitlesRequest {
    guestTitlesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alternateLanguageGuestTitlesToBeChanged?: AlternateLanguageGuestTitlesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeBusinessSegmentsRequest {
    businessSegmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    businessSegmentsToBeChanged?: BusinessSegmentsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCityPostalCodesRequest {
    postalCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cityPostalCodesToBeChanged?: CityPostalCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeEcertificateLocationTypesRequest {
    locationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ecertificateLocationTypesToBeChanged?: EcertificateLocationTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeGuestStatusesRequest {
    guestStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestStatusesToBeChanged?: GuestStatusesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeGuestTypesRequest {
    guestTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestTypesToBeChanged?: GuestTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeImmigrationStatusesRequest {
    immigrationStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    immigrationStatusesToBeChanged?: ImmigrationStatusesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMailingActionCodesRequest {
    mailingActionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    mailingActionCodesToBeChanged?: MailingActionCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMembershipClaimOriginsRequest {
    membershipClaimOriginCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaimOriginsToBeChanged?: MembershipClaimOriginsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMembershipClaimTypesRequest {
    membershipClaimTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaimTypesToBeChanged?: MembershipClaimTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMembershipEnrollmentCodesRequest {
    enrollmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipEnrollmentCodesToBeChanged?: MembershipEnrollmentCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMembershipStatusCodesRequest {
    membershipStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipStatusCodesToBeChanged?: MembershipStatusCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeOwnerTeamsRequest {
    ownerTeamCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ownerTeamsToBeChanged?: OwnerTeamsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTravelAgentTypesRequest {
    fiscalAgentTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    travelAgentTypesToBeChanged?: TravelAgentTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAccountPrioritiesRequest {
    accountPriorityId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAccountTypesRequest {
    accountTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAddressTypesRequest {
    addressTypeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCompanyTypesRequest {
    companyTypesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCompetitionCodesRequest {
    competitionCodesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDistanceTypesRequest {
    distanceTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDistrictsRequest {
    districtsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGenderTypesRequest {
    genderTypeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuestTitlesRequest {
    guestTitlesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languageCode?: Array<string>;
    titleType?: Array<number>;
    description?: Array<string>;
    greeting?: Array<string>;
    displayOrder?: Array<number>;
    newTitleType?: Array<number>;
    newLanguageCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteIdentificationTypesRequest {
    identificationTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteIndustryCodesRequest {
    industryCodesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInfluenceCodesRequest {
    influenceCodesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteKeywordTypesRequest {
    keywordTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteNationalitiesRequest {
    nationalitiesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePayDaysRequest {
    payDaysId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileInactiveReasonsRequest {
    profileInactiveReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteProfileRestrictionReasonsRequest {
    profileRestrictionReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteSourcesRequest {
    sourcesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTerritoriesRequest {
    territoriesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTitlesRequest {
    titlesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteVIPLevelsRequest {
    vipLevelsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAccountOwnersRequest {
    chainCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    findExactOwnerCodeMatch?: boolean;
    maxFetchRecords?: number;
    hotelId?: string;
    ownerCode?: string;
    name?: string;
    givenName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAccountPrioritiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAccountTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAddressTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlternateLanguageGuestTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    titleCodes?: Array<string>;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBusinessSegmentsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCityPostalCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    postalCodeFrom?: string;
    postalCodeTo?: string;
    cityWildCard?: string;
    codes?: Array<string>;
    wildCard?: string;
    stateCodes?: Array<string>;
    stateWildCard?: string;
    territoryCodes?: Array<string>;
    territoryWildCard?: string;
    districtCodes?: Array<string>;
    districtWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompanyTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompetitionCodesRequest {
    fetchInactive?: boolean;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDistanceTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDistrictsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEcertificateLocationTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGenderTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestStatusesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    titleCodes?: Array<string>;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetIdentificationTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetImmigrationStatusesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetIndustryCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInfluenceCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetKeywordTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMailingActionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipClaimOriginsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipClaimTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipEnrollmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipStatusCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNationalitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOwnerTeamsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPayDaysRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileInactiveReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetProfileRestrictionReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSourcesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    stateWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTerritoriesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTravelAgentTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetVIPLevelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAccountPrioritiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountPrioritiesCriteria?: AccountPrioritiesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAccountTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountTypesCriteria?: AccountTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAddressTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    addressTypesCriteria?: AddressTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAlternateLanguageGuestTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alternateLanguageGuestTitlesCriteria?: AlternateLanguageGuestTitlesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBusinessSegmentsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    businessSegmentsCriteria?: BusinessSegmentsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCityPostalCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cityPostalCodesCriteria?: CityPostalCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompanyTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    companyTypesCriteria?: CompanyTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompetitionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    competitionCodesCriteria?: CompetitionCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDistanceTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    distanceTypesCriteria?: DistanceTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDistrictsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    districtsCriteria?: DistrictsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostEcertificateLocationTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ecertificateLocationTypesCriteria?: EcertificateLocationTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGenderTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genderTypesCriteria?: GenderTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestStatusesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestStatusesCriteria?: GuestStatusesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestTitlesCriteria?: GuestTitlesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestTypesCriteria?: GuestTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostIdentificationTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    identificationTypesCriteria?: IdentificationTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostImmigrationStatusesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    immigrationStatusesCriteria?: ImmigrationStatusesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostIndustryCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    industryCodesCriteria?: IndustryCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostInfluenceCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    influenceCodesCriteria?: InfluenceCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostKeywordTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    keywordTypesCriteria?: KeywordTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMailingActionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    mailingActionCodesCriteria?: MailingActionCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipClaimOriginsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaimOriginsCriteria?: MembershipClaimOriginsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipClaimTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipClaimTypesCriteria?: MembershipClaimTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipEnrollmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipEnrollmentCodesCriteria?: MembershipEnrollmentCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMembershipStatusCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipStatusCodesCriteria?: MembershipStatusCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostNationalitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    nationalitiesCriteria?: NationalitiesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOwnerTeamsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ownerTeamsCriteria?: OwnerTeamsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPayDaysRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    payDaysCriteria?: PayDaysCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileInactiveReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileInactiveReasonsCriteria?: ProfileInactiveReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostProfileRestrictionReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRestrictionReasonsCriteria?: ProfileRestrictionReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSourcesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sourcesCriteria?: SourcesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostStatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    statesCriteria?: StatesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTerritoriesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    territoriesCriteria?: TerritoriesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTitlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    titlesCriteria?: TitlesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTravelAgentTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    travelAgentTypesCriteria?: TravelAgentTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostVIPLevelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    vIPLevelsCriteria?: VIPLevelsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAccountPrioritiesRequest {
    accountPriorityId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountPrioritiesToBeChanged?: AccountPrioritiesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAccountTypesRequest {
    accountTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountTypesToBeChanged?: AccountTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAddressTypesRequest {
    addressTypeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    addressTypesToBeChanged?: AddressTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCompanyTypesRequest {
    companyTypesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    companyTypesToBeChanged?: CompanyTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCompetitionCodesRequest {
    competitionCodesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    competitionCodesToBeChanged?: CompetitionCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDistanceTypesRequest {
    distanceTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    distanceTypesToBeChanged?: DistanceTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDistrictsRequest {
    districtsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    districtsToBeChanged?: DistrictsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGenderTypesRequest {
    genderTypeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genderTypesToChange?: GenderTypesToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGuestTitlesRequest {
    guestTitlesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestTitlesToBeChanged?: GuestTitlesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutIdentificationTypesRequest {
    identificationTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    identificationTypesToBeChanged?: IdentificationTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutIndustryCodesRequest {
    industryCodesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    industryCodesToBeChanged?: IndustryCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInfluenceCodesRequest {
    influenceCodesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    influenceCodesToBeChanged?: InfluenceCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutKeywordTypesRequest {
    keywordTypesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    keywordTypesToBeChanged?: KeywordTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutNationalitiesRequest {
    nationalitiesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    nationalitiesToBeChanged?: NationalitiesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPayDaysRequest {
    payDaysId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    payDaysToBeChanged?: PayDaysToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileInactiveReasonsRequest {
    profileInactiveReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileInactiveReasonsToBeChanged?: ProfileInactiveReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutProfileRestrictionReasonsRequest {
    profileRestrictionReasonsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    profileRestrictionReasonsToBeChanged?: ProfileRestrictionReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSourcesRequest {
    sourcesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sourcesToBeChanged?: SourcesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTerritoriesRequest {
    territoriesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    territoriesToBeChanged?: TerritoriesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTitlesRequest {
    titlesId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    titlesToBeChanged?: TitlesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutVIPLevelsRequest {
    vipLevelsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    vIPLevelsToBeChanged?: VIPLevelsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveAlternateLanguageGuestTitlesRequest {
    guestTitlesCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    languageCode?: Array<string>;
    titleTypes?: Array<number>;
    titleDescription?: Array<string>;
    greeting?: Array<string>;
    displayOrder?: Array<number>;
    newTitleType?: Array<number>;
    newLanguageCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveBusinessSegmentsRequest {
    businessSegmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCityPostalCodesRequest {
    postalCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveEcertificateLocationTypesRequest {
    locationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveGuestStatusesRequest {
    guestStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveGuestTypesRequest {
    guestTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveImmigrationStatusesRequest {
    immigrationStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMailingActionCodesRequest {
    mailingActionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMembershipClaimOriginsRequest {
    membershipClaimOriginCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMembershipClaimTypesRequest {
    membershipClaimTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMembershipEnrollmentCodesRequest {
    enrollmentCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMembershipStatusCodesRequest {
    membershipStatusCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveOwnerTeamsRequest {
    ownerTeamCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTravelAgentTypesRequest {
    fiscalAgentTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to modify Alternate Language Guest Titles. <p><strong>OperationId:</strong>changeAlternateLanguageGuestTitles</p>
     * Change Alternate Language Guest Titles
     */
    async changeAlternateLanguageGuestTitlesRaw(requestParameters: ChangeAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestTitlesCode === null || requestParameters.guestTitlesCode === undefined) {
            throw new runtime.RequiredError('guestTitlesCode','Required parameter requestParameters.guestTitlesCode was null or undefined when calling changeAlternateLanguageGuestTitles.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeAlternateLanguageGuestTitles.');
        }

        if (requestParameters.alternateLanguageGuestTitlesToBeChanged === null || requestParameters.alternateLanguageGuestTitlesToBeChanged === undefined) {
            throw new runtime.RequiredError('alternateLanguageGuestTitlesToBeChanged','Required parameter requestParameters.alternateLanguageGuestTitlesToBeChanged was null or undefined when calling changeAlternateLanguageGuestTitles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alternateLanguages/{guestTitlesCode}`.replace(`{${"guestTitlesCode"}}`, encodeURIComponent(String(requestParameters.guestTitlesCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlternateLanguageGuestTitlesToBeChangedToJSON(requestParameters.alternateLanguageGuestTitlesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to modify Alternate Language Guest Titles. <p><strong>OperationId:</strong>changeAlternateLanguageGuestTitles</p>
     * Change Alternate Language Guest Titles
     */
    async changeAlternateLanguageGuestTitles(requestParameters: ChangeAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeAlternateLanguageGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Business Segments. <p><strong>OperationId:</strong>changeBusinessSegments</p>
     * Change Business Segments
     */
    async changeBusinessSegmentsRaw(requestParameters: ChangeBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.businessSegmentCode === null || requestParameters.businessSegmentCode === undefined) {
            throw new runtime.RequiredError('businessSegmentCode','Required parameter requestParameters.businessSegmentCode was null or undefined when calling changeBusinessSegments.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeBusinessSegments.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeBusinessSegments.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeBusinessSegments.');
        }

        if (requestParameters.businessSegmentsToBeChanged === null || requestParameters.businessSegmentsToBeChanged === undefined) {
            throw new runtime.RequiredError('businessSegmentsToBeChanged','Required parameter requestParameters.businessSegmentsToBeChanged was null or undefined when calling changeBusinessSegments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/businessSegments/{businessSegmentCode}`.replace(`{${"businessSegmentCode"}}`, encodeURIComponent(String(requestParameters.businessSegmentCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessSegmentsToBeChangedToJSON(requestParameters.businessSegmentsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Business Segments. <p><strong>OperationId:</strong>changeBusinessSegments</p>
     * Change Business Segments
     */
    async changeBusinessSegments(requestParameters: ChangeBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeBusinessSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update City Postal Codes. <p><strong>OperationId:</strong>changeCityPostalCodes</p>
     * Change City Postal Codes
     */
    async changeCityPostalCodesRaw(requestParameters: ChangeCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.postalCode === null || requestParameters.postalCode === undefined) {
            throw new runtime.RequiredError('postalCode','Required parameter requestParameters.postalCode was null or undefined when calling changeCityPostalCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeCityPostalCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeCityPostalCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeCityPostalCodes.');
        }

        if (requestParameters.cityPostalCodesToBeChanged === null || requestParameters.cityPostalCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('cityPostalCodesToBeChanged','Required parameter requestParameters.cityPostalCodesToBeChanged was null or undefined when calling changeCityPostalCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cityPostalCodes/{postalCode}`.replace(`{${"postalCode"}}`, encodeURIComponent(String(requestParameters.postalCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CityPostalCodesToBeChangedToJSON(requestParameters.cityPostalCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update City Postal Codes. <p><strong>OperationId:</strong>changeCityPostalCodes</p>
     * Change City Postal Codes
     */
    async changeCityPostalCodes(requestParameters: ChangeCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCityPostalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Ecertificate Location Types. <p><strong>OperationId:</strong>changeEcertificateLocationTypes</p>
     * Change Ecertificate Location Types
     */
    async changeEcertificateLocationTypesRaw(requestParameters: ChangeEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locationId === null || requestParameters.locationId === undefined) {
            throw new runtime.RequiredError('locationId','Required parameter requestParameters.locationId was null or undefined when calling changeEcertificateLocationTypes.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeEcertificateLocationTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeEcertificateLocationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeEcertificateLocationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeEcertificateLocationTypes.');
        }

        if (requestParameters.ecertificateLocationTypesToBeChanged === null || requestParameters.ecertificateLocationTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('ecertificateLocationTypesToBeChanged','Required parameter requestParameters.ecertificateLocationTypesToBeChanged was null or undefined when calling changeEcertificateLocationTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eCertificateLocationTypes/{locationId}`.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters.locationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EcertificateLocationTypesToBeChangedToJSON(requestParameters.ecertificateLocationTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Ecertificate Location Types. <p><strong>OperationId:</strong>changeEcertificateLocationTypes</p>
     * Change Ecertificate Location Types
     */
    async changeEcertificateLocationTypes(requestParameters: ChangeEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeEcertificateLocationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Guest Statuses. <p><strong>OperationId:</strong>changeGuestStatuses</p>
     * Change Guest Statuses
     */
    async changeGuestStatusesRaw(requestParameters: ChangeGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestStatusCode === null || requestParameters.guestStatusCode === undefined) {
            throw new runtime.RequiredError('guestStatusCode','Required parameter requestParameters.guestStatusCode was null or undefined when calling changeGuestStatuses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeGuestStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeGuestStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeGuestStatuses.');
        }

        if (requestParameters.guestStatusesToBeChanged === null || requestParameters.guestStatusesToBeChanged === undefined) {
            throw new runtime.RequiredError('guestStatusesToBeChanged','Required parameter requestParameters.guestStatusesToBeChanged was null or undefined when calling changeGuestStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestStatuses/{guestStatusCode}`.replace(`{${"guestStatusCode"}}`, encodeURIComponent(String(requestParameters.guestStatusCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuestStatusesToBeChangedToJSON(requestParameters.guestStatusesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Guest Statuses. <p><strong>OperationId:</strong>changeGuestStatuses</p>
     * Change Guest Statuses
     */
    async changeGuestStatuses(requestParameters: ChangeGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeGuestStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Guest Types. <p><strong>OperationId:</strong>changeGuestTypes</p>
     * Change Guest Types
     */
    async changeGuestTypesRaw(requestParameters: ChangeGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestTypeCode === null || requestParameters.guestTypeCode === undefined) {
            throw new runtime.RequiredError('guestTypeCode','Required parameter requestParameters.guestTypeCode was null or undefined when calling changeGuestTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeGuestTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeGuestTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeGuestTypes.');
        }

        if (requestParameters.guestTypesToBeChanged === null || requestParameters.guestTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('guestTypesToBeChanged','Required parameter requestParameters.guestTypesToBeChanged was null or undefined when calling changeGuestTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTypes/{guestTypeCode}`.replace(`{${"guestTypeCode"}}`, encodeURIComponent(String(requestParameters.guestTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuestTypesToBeChangedToJSON(requestParameters.guestTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Guest Types. <p><strong>OperationId:</strong>changeGuestTypes</p>
     * Change Guest Types
     */
    async changeGuestTypes(requestParameters: ChangeGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Immigration Statuses. <p><strong>OperationId:</strong>changeImmigrationStatuses</p>
     * Change Immigration Statuses
     */
    async changeImmigrationStatusesRaw(requestParameters: ChangeImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.immigrationStatusCode === null || requestParameters.immigrationStatusCode === undefined) {
            throw new runtime.RequiredError('immigrationStatusCode','Required parameter requestParameters.immigrationStatusCode was null or undefined when calling changeImmigrationStatuses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeImmigrationStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeImmigrationStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeImmigrationStatuses.');
        }

        if (requestParameters.immigrationStatusesToBeChanged === null || requestParameters.immigrationStatusesToBeChanged === undefined) {
            throw new runtime.RequiredError('immigrationStatusesToBeChanged','Required parameter requestParameters.immigrationStatusesToBeChanged was null or undefined when calling changeImmigrationStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/immigrationStatuses/{immigrationStatusCode}`.replace(`{${"immigrationStatusCode"}}`, encodeURIComponent(String(requestParameters.immigrationStatusCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImmigrationStatusesToBeChangedToJSON(requestParameters.immigrationStatusesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Immigration Statuses. <p><strong>OperationId:</strong>changeImmigrationStatuses</p>
     * Change Immigration Statuses
     */
    async changeImmigrationStatuses(requestParameters: ChangeImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeImmigrationStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Mailing Action Codes. <p><strong>OperationId:</strong>changeMailingActionCodes</p>
     * Change Mailing Action Codes
     */
    async changeMailingActionCodesRaw(requestParameters: ChangeMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.mailingActionCode === null || requestParameters.mailingActionCode === undefined) {
            throw new runtime.RequiredError('mailingActionCode','Required parameter requestParameters.mailingActionCode was null or undefined when calling changeMailingActionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeMailingActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeMailingActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeMailingActionCodes.');
        }

        if (requestParameters.mailingActionCodesToBeChanged === null || requestParameters.mailingActionCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('mailingActionCodesToBeChanged','Required parameter requestParameters.mailingActionCodesToBeChanged was null or undefined when calling changeMailingActionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mailingActionCodes/{mailingActionCode}`.replace(`{${"mailingActionCode"}}`, encodeURIComponent(String(requestParameters.mailingActionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MailingActionCodesToBeChangedToJSON(requestParameters.mailingActionCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Mailing Action Codes. <p><strong>OperationId:</strong>changeMailingActionCodes</p>
     * Change Mailing Action Codes
     */
    async changeMailingActionCodes(requestParameters: ChangeMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMailingActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Membership Claim Origins. <p><strong>OperationId:</strong>changeMembershipClaimOrigins</p>
     * Change Membership Claim Origins
     */
    async changeMembershipClaimOriginsRaw(requestParameters: ChangeMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipClaimOriginCode === null || requestParameters.membershipClaimOriginCode === undefined) {
            throw new runtime.RequiredError('membershipClaimOriginCode','Required parameter requestParameters.membershipClaimOriginCode was null or undefined when calling changeMembershipClaimOrigins.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeMembershipClaimOrigins.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeMembershipClaimOrigins.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeMembershipClaimOrigins.');
        }

        if (requestParameters.membershipClaimOriginsToBeChanged === null || requestParameters.membershipClaimOriginsToBeChanged === undefined) {
            throw new runtime.RequiredError('membershipClaimOriginsToBeChanged','Required parameter requestParameters.membershipClaimOriginsToBeChanged was null or undefined when calling changeMembershipClaimOrigins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimOrigins/{membershipClaimOriginCode}`.replace(`{${"membershipClaimOriginCode"}}`, encodeURIComponent(String(requestParameters.membershipClaimOriginCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipClaimOriginsToBeChangedToJSON(requestParameters.membershipClaimOriginsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Membership Claim Origins. <p><strong>OperationId:</strong>changeMembershipClaimOrigins</p>
     * Change Membership Claim Origins
     */
    async changeMembershipClaimOrigins(requestParameters: ChangeMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMembershipClaimOriginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Membership Claim Types. <p><strong>OperationId:</strong>changeMembershipClaimTypes</p>
     * Change Membership Claim Types
     */
    async changeMembershipClaimTypesRaw(requestParameters: ChangeMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipClaimTypeCode === null || requestParameters.membershipClaimTypeCode === undefined) {
            throw new runtime.RequiredError('membershipClaimTypeCode','Required parameter requestParameters.membershipClaimTypeCode was null or undefined when calling changeMembershipClaimTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeMembershipClaimTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeMembershipClaimTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeMembershipClaimTypes.');
        }

        if (requestParameters.membershipClaimTypesToBeChanged === null || requestParameters.membershipClaimTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('membershipClaimTypesToBeChanged','Required parameter requestParameters.membershipClaimTypesToBeChanged was null or undefined when calling changeMembershipClaimTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimTypes/{membershipClaimTypeCode}`.replace(`{${"membershipClaimTypeCode"}}`, encodeURIComponent(String(requestParameters.membershipClaimTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipClaimTypesToBeChangedToJSON(requestParameters.membershipClaimTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Membership Claim Types. <p><strong>OperationId:</strong>changeMembershipClaimTypes</p>
     * Change Membership Claim Types
     */
    async changeMembershipClaimTypes(requestParameters: ChangeMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMembershipClaimTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Membership Enrollment Codes. <p><strong>OperationId:</strong>changeMembershipEnrollmentCodes</p>
     * Change Membership Enrollment Codes
     */
    async changeMembershipEnrollmentCodesRaw(requestParameters: ChangeMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.enrollmentCode === null || requestParameters.enrollmentCode === undefined) {
            throw new runtime.RequiredError('enrollmentCode','Required parameter requestParameters.enrollmentCode was null or undefined when calling changeMembershipEnrollmentCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeMembershipEnrollmentCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeMembershipEnrollmentCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeMembershipEnrollmentCodes.');
        }

        if (requestParameters.membershipEnrollmentCodesToBeChanged === null || requestParameters.membershipEnrollmentCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('membershipEnrollmentCodesToBeChanged','Required parameter requestParameters.membershipEnrollmentCodesToBeChanged was null or undefined when calling changeMembershipEnrollmentCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentCodes/{enrollmentCode}`.replace(`{${"enrollmentCode"}}`, encodeURIComponent(String(requestParameters.enrollmentCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipEnrollmentCodesToBeChangedToJSON(requestParameters.membershipEnrollmentCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Membership Enrollment Codes. <p><strong>OperationId:</strong>changeMembershipEnrollmentCodes</p>
     * Change Membership Enrollment Codes
     */
    async changeMembershipEnrollmentCodes(requestParameters: ChangeMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMembershipEnrollmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Membership Status Codes. <p><strong>OperationId:</strong>changeMembershipStatusCodes</p>
     * Change Membership Status Codes
     */
    async changeMembershipStatusCodesRaw(requestParameters: ChangeMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipStatusCode === null || requestParameters.membershipStatusCode === undefined) {
            throw new runtime.RequiredError('membershipStatusCode','Required parameter requestParameters.membershipStatusCode was null or undefined when calling changeMembershipStatusCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeMembershipStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeMembershipStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeMembershipStatusCodes.');
        }

        if (requestParameters.membershipStatusCodesToBeChanged === null || requestParameters.membershipStatusCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('membershipStatusCodesToBeChanged','Required parameter requestParameters.membershipStatusCodesToBeChanged was null or undefined when calling changeMembershipStatusCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipStatusCodes/{membershipStatusCode}`.replace(`{${"membershipStatusCode"}}`, encodeURIComponent(String(requestParameters.membershipStatusCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipStatusCodesToBeChangedToJSON(requestParameters.membershipStatusCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Membership Status Codes. <p><strong>OperationId:</strong>changeMembershipStatusCodes</p>
     * Change Membership Status Codes
     */
    async changeMembershipStatusCodes(requestParameters: ChangeMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMembershipStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Owner Teams. <p><strong>OperationId:</strong>changeOwnerTeams</p>
     * Change Owner Teams
     */
    async changeOwnerTeamsRaw(requestParameters: ChangeOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ownerTeamCode === null || requestParameters.ownerTeamCode === undefined) {
            throw new runtime.RequiredError('ownerTeamCode','Required parameter requestParameters.ownerTeamCode was null or undefined when calling changeOwnerTeams.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeOwnerTeams.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeOwnerTeams.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeOwnerTeams.');
        }

        if (requestParameters.ownerTeamsToBeChanged === null || requestParameters.ownerTeamsToBeChanged === undefined) {
            throw new runtime.RequiredError('ownerTeamsToBeChanged','Required parameter requestParameters.ownerTeamsToBeChanged was null or undefined when calling changeOwnerTeams.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ownerTeams/{ownerTeamCode}`.replace(`{${"ownerTeamCode"}}`, encodeURIComponent(String(requestParameters.ownerTeamCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OwnerTeamsToBeChangedToJSON(requestParameters.ownerTeamsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Owner Teams. <p><strong>OperationId:</strong>changeOwnerTeams</p>
     * Change Owner Teams
     */
    async changeOwnerTeams(requestParameters: ChangeOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeOwnerTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Travel Agent Types. <p><strong>OperationId:</strong>changeTravelAgentTypes</p>
     * Change Travel Agent Types
     */
    async changeTravelAgentTypesRaw(requestParameters: ChangeTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fiscalAgentTypeCode === null || requestParameters.fiscalAgentTypeCode === undefined) {
            throw new runtime.RequiredError('fiscalAgentTypeCode','Required parameter requestParameters.fiscalAgentTypeCode was null or undefined when calling changeTravelAgentTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeTravelAgentTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeTravelAgentTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeTravelAgentTypes.');
        }

        if (requestParameters.travelAgentTypesToBeChanged === null || requestParameters.travelAgentTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('travelAgentTypesToBeChanged','Required parameter requestParameters.travelAgentTypesToBeChanged was null or undefined when calling changeTravelAgentTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalAgentTypes/{fiscalAgentTypeCode}`.replace(`{${"fiscalAgentTypeCode"}}`, encodeURIComponent(String(requestParameters.fiscalAgentTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TravelAgentTypesToBeChangedToJSON(requestParameters.travelAgentTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Travel Agent Types. <p><strong>OperationId:</strong>changeTravelAgentTypes</p>
     * Change Travel Agent Types
     */
    async changeTravelAgentTypes(requestParameters: ChangeTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTravelAgentTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to remove Account Priorities. <p><strong>OperationId:</strong>deleteAccountPriorities</p>
     * Remove Account Priorities
     */
    async deleteAccountPrioritiesRaw(requestParameters: DeleteAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.accountPriorityId === null || requestParameters.accountPriorityId === undefined) {
            throw new runtime.RequiredError('accountPriorityId','Required parameter requestParameters.accountPriorityId was null or undefined when calling deleteAccountPriorities.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteAccountPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteAccountPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteAccountPriorities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountPriorities/{accountPriorityId}`.replace(`{${"accountPriorityId"}}`, encodeURIComponent(String(requestParameters.accountPriorityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to remove Account Priorities. <p><strong>OperationId:</strong>deleteAccountPriorities</p>
     * Remove Account Priorities
     */
    async deleteAccountPriorities(requestParameters: DeleteAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAccountPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to remove Account Types. <p><strong>OperationId:</strong>deleteAccountTypes</p>
     * Remove Account Types
     */
    async deleteAccountTypesRaw(requestParameters: DeleteAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.accountTypesId === null || requestParameters.accountTypesId === undefined) {
            throw new runtime.RequiredError('accountTypesId','Required parameter requestParameters.accountTypesId was null or undefined when calling deleteAccountTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteAccountTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteAccountTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteAccountTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountTypes/{accountTypesId}`.replace(`{${"accountTypesId"}}`, encodeURIComponent(String(requestParameters.accountTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to remove Account Types. <p><strong>OperationId:</strong>deleteAccountTypes</p>
     * Remove Account Types
     */
    async deleteAccountTypes(requestParameters: DeleteAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Address type. <p><strong>OperationId:</strong>deleteAddressTypes</p>
     * Delete an existing Address type
     */
    async deleteAddressTypesRaw(requestParameters: DeleteAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.addressTypeId === null || requestParameters.addressTypeId === undefined) {
            throw new runtime.RequiredError('addressTypeId','Required parameter requestParameters.addressTypeId was null or undefined when calling deleteAddressTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteAddressTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteAddressTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteAddressTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressTypes/{addressTypeId}`.replace(`{${"addressTypeId"}}`, encodeURIComponent(String(requestParameters.addressTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Address type. <p><strong>OperationId:</strong>deleteAddressTypes</p>
     * Delete an existing Address type
     */
    async deleteAddressTypes(requestParameters: DeleteAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAddressTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Company Types. <p><strong>OperationId:</strong>deleteCompanyTypes</p>
     * Delete Company Types
     */
    async deleteCompanyTypesRaw(requestParameters: DeleteCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.companyTypesCode === null || requestParameters.companyTypesCode === undefined) {
            throw new runtime.RequiredError('companyTypesCode','Required parameter requestParameters.companyTypesCode was null or undefined when calling deleteCompanyTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCompanyTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCompanyTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCompanyTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/companyTypes/{companyTypesCode}`.replace(`{${"companyTypesCode"}}`, encodeURIComponent(String(requestParameters.companyTypesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Company Types. <p><strong>OperationId:</strong>deleteCompanyTypes</p>
     * Delete Company Types
     */
    async deleteCompanyTypes(requestParameters: DeleteCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCompanyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to remove Competition Codes. <p><strong>OperationId:</strong>deleteCompetitionCodes</p>
     * Remove Competition Codes
     */
    async deleteCompetitionCodesRaw(requestParameters: DeleteCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.competitionCodesId === null || requestParameters.competitionCodesId === undefined) {
            throw new runtime.RequiredError('competitionCodesId','Required parameter requestParameters.competitionCodesId was null or undefined when calling deleteCompetitionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCompetitionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCompetitionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCompetitionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/competitionCodes/{competitionCodesId}`.replace(`{${"competitionCodesId"}}`, encodeURIComponent(String(requestParameters.competitionCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to remove Competition Codes. <p><strong>OperationId:</strong>deleteCompetitionCodes</p>
     * Remove Competition Codes
     */
    async deleteCompetitionCodes(requestParameters: DeleteCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCompetitionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Distance Types. <p><strong>OperationId:</strong>deleteDistanceTypes</p>
     * Delete Distance Types
     */
    async deleteDistanceTypesRaw(requestParameters: DeleteDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.distanceTypesId === null || requestParameters.distanceTypesId === undefined) {
            throw new runtime.RequiredError('distanceTypesId','Required parameter requestParameters.distanceTypesId was null or undefined when calling deleteDistanceTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDistanceTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteDistanceTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteDistanceTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/distanceTypes/{distanceTypesId}`.replace(`{${"distanceTypesId"}}`, encodeURIComponent(String(requestParameters.distanceTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Distance Types. <p><strong>OperationId:</strong>deleteDistanceTypes</p>
     * Delete Distance Types
     */
    async deleteDistanceTypes(requestParameters: DeleteDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDistanceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Districts. <p><strong>OperationId:</strong>deleteDistricts</p>
     * Delete Districts
     */
    async deleteDistrictsRaw(requestParameters: DeleteDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.districtsId === null || requestParameters.districtsId === undefined) {
            throw new runtime.RequiredError('districtsId','Required parameter requestParameters.districtsId was null or undefined when calling deleteDistricts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDistricts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteDistricts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteDistricts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/districts/{districtsId}`.replace(`{${"districtsId"}}`, encodeURIComponent(String(requestParameters.districtsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Districts. <p><strong>OperationId:</strong>deleteDistricts</p>
     * Delete Districts
     */
    async deleteDistricts(requestParameters: DeleteDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDistrictsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Gender Types. <p><strong>OperationId:</strong>deleteGenderTypes</p>
     * Delete Gender Types
     */
    async deleteGenderTypesRaw(requestParameters: DeleteGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.genderTypeId === null || requestParameters.genderTypeId === undefined) {
            throw new runtime.RequiredError('genderTypeId','Required parameter requestParameters.genderTypeId was null or undefined when calling deleteGenderTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteGenderTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteGenderTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteGenderTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/genderTypes/{genderTypeId}`.replace(`{${"genderTypeId"}}`, encodeURIComponent(String(requestParameters.genderTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Gender Types. <p><strong>OperationId:</strong>deleteGenderTypes</p>
     * Delete Gender Types
     */
    async deleteGenderTypes(requestParameters: DeleteGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGenderTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Guest Titles. <p><strong>OperationId:</strong>deleteGuestTitles</p>
     * Delete Guest Titles
     */
    async deleteGuestTitlesRaw(requestParameters: DeleteGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestTitlesCode === null || requestParameters.guestTitlesCode === undefined) {
            throw new runtime.RequiredError('guestTitlesCode','Required parameter requestParameters.guestTitlesCode was null or undefined when calling deleteGuestTitles.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteGuestTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.titleType) {
            queryParameters['titleType'] = requestParameters.titleType;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.greeting) {
            queryParameters['greeting'] = requestParameters.greeting;
        }

        if (requestParameters.displayOrder) {
            queryParameters['displayOrder'] = requestParameters.displayOrder;
        }

        if (requestParameters.newTitleType) {
            queryParameters['newTitleType'] = requestParameters.newTitleType;
        }

        if (requestParameters.newLanguageCode) {
            queryParameters['newLanguageCode'] = requestParameters.newLanguageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTitles/{guestTitlesCode}`.replace(`{${"guestTitlesCode"}}`, encodeURIComponent(String(requestParameters.guestTitlesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Guest Titles. <p><strong>OperationId:</strong>deleteGuestTitles</p>
     * Delete Guest Titles
     */
    async deleteGuestTitles(requestParameters: DeleteGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Identification Types. <p><strong>OperationId:</strong>deleteIdentificationTypes</p>
     * Delete Identification Types
     */
    async deleteIdentificationTypesRaw(requestParameters: DeleteIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.identificationTypesId === null || requestParameters.identificationTypesId === undefined) {
            throw new runtime.RequiredError('identificationTypesId','Required parameter requestParameters.identificationTypesId was null or undefined when calling deleteIdentificationTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteIdentificationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteIdentificationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteIdentificationTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/identificationTypes/{identificationTypesId}`.replace(`{${"identificationTypesId"}}`, encodeURIComponent(String(requestParameters.identificationTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Identification Types. <p><strong>OperationId:</strong>deleteIdentificationTypes</p>
     * Delete Identification Types
     */
    async deleteIdentificationTypes(requestParameters: DeleteIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteIdentificationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Industry Codes. <p><strong>OperationId:</strong>deleteIndustryCodes</p>
     * Delete Industry Codes
     */
    async deleteIndustryCodesRaw(requestParameters: DeleteIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.industryCodesId === null || requestParameters.industryCodesId === undefined) {
            throw new runtime.RequiredError('industryCodesId','Required parameter requestParameters.industryCodesId was null or undefined when calling deleteIndustryCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteIndustryCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteIndustryCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteIndustryCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/industryCodes/{industryCodesId}`.replace(`{${"industryCodesId"}}`, encodeURIComponent(String(requestParameters.industryCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Industry Codes. <p><strong>OperationId:</strong>deleteIndustryCodes</p>
     * Delete Industry Codes
     */
    async deleteIndustryCodes(requestParameters: DeleteIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteIndustryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Influence Codes. <p><strong>OperationId:</strong>deleteInfluenceCodes</p>
     * Delete Influence Codes
     */
    async deleteInfluenceCodesRaw(requestParameters: DeleteInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.influenceCodesId === null || requestParameters.influenceCodesId === undefined) {
            throw new runtime.RequiredError('influenceCodesId','Required parameter requestParameters.influenceCodesId was null or undefined when calling deleteInfluenceCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteInfluenceCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteInfluenceCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteInfluenceCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/influenceCodes/{influenceCodesId}`.replace(`{${"influenceCodesId"}}`, encodeURIComponent(String(requestParameters.influenceCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Influence Codes. <p><strong>OperationId:</strong>deleteInfluenceCodes</p>
     * Delete Influence Codes
     */
    async deleteInfluenceCodes(requestParameters: DeleteInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInfluenceCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Keyword Types. <p><strong>OperationId:</strong>deleteKeywordTypes</p>
     * Delete Keyword Types
     */
    async deleteKeywordTypesRaw(requestParameters: DeleteKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.keywordTypesId === null || requestParameters.keywordTypesId === undefined) {
            throw new runtime.RequiredError('keywordTypesId','Required parameter requestParameters.keywordTypesId was null or undefined when calling deleteKeywordTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteKeywordTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteKeywordTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteKeywordTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/keywordTypes/{keywordTypesId}`.replace(`{${"keywordTypesId"}}`, encodeURIComponent(String(requestParameters.keywordTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Keyword Types. <p><strong>OperationId:</strong>deleteKeywordTypes</p>
     * Delete Keyword Types
     */
    async deleteKeywordTypes(requestParameters: DeleteKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteKeywordTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Nationalities. <p><strong>OperationId:</strong>deleteNationalities</p>
     * Delete Nationalities
     */
    async deleteNationalitiesRaw(requestParameters: DeleteNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.nationalitiesId === null || requestParameters.nationalitiesId === undefined) {
            throw new runtime.RequiredError('nationalitiesId','Required parameter requestParameters.nationalitiesId was null or undefined when calling deleteNationalities.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteNationalities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteNationalities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteNationalities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/nationalities/{nationalitiesId}`.replace(`{${"nationalitiesId"}}`, encodeURIComponent(String(requestParameters.nationalitiesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Nationalities. <p><strong>OperationId:</strong>deleteNationalities</p>
     * Delete Nationalities
     */
    async deleteNationalities(requestParameters: DeleteNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteNationalitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Pay Days. <p><strong>OperationId:</strong>deletePayDays</p>
     * Delete Pay Days
     */
    async deletePayDaysRaw(requestParameters: DeletePayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.payDaysId === null || requestParameters.payDaysId === undefined) {
            throw new runtime.RequiredError('payDaysId','Required parameter requestParameters.payDaysId was null or undefined when calling deletePayDays.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deletePayDays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deletePayDays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deletePayDays.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/payDays/{payDaysId}`.replace(`{${"payDaysId"}}`, encodeURIComponent(String(requestParameters.payDaysId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Pay Days. <p><strong>OperationId:</strong>deletePayDays</p>
     * Delete Pay Days
     */
    async deletePayDays(requestParameters: DeletePayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePayDaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Profile Inactive Reasons. <p><strong>OperationId:</strong>deleteProfileInactiveReasons</p>
     * Delete Profile Inactive Reasons
     */
    async deleteProfileInactiveReasonsRaw(requestParameters: DeleteProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileInactiveReasonsId === null || requestParameters.profileInactiveReasonsId === undefined) {
            throw new runtime.RequiredError('profileInactiveReasonsId','Required parameter requestParameters.profileInactiveReasonsId was null or undefined when calling deleteProfileInactiveReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteProfileInactiveReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteProfileInactiveReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteProfileInactiveReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileInactiveReasons/{profileInactiveReasonsId}`.replace(`{${"profileInactiveReasonsId"}}`, encodeURIComponent(String(requestParameters.profileInactiveReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Profile Inactive Reasons. <p><strong>OperationId:</strong>deleteProfileInactiveReasons</p>
     * Delete Profile Inactive Reasons
     */
    async deleteProfileInactiveReasons(requestParameters: DeleteProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileInactiveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Profile Restriction Reasons. <p><strong>OperationId:</strong>deleteProfileRestrictionReasons</p>
     * Delete Profile Restriction Reasons
     */
    async deleteProfileRestrictionReasonsRaw(requestParameters: DeleteProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileRestrictionReasonsId === null || requestParameters.profileRestrictionReasonsId === undefined) {
            throw new runtime.RequiredError('profileRestrictionReasonsId','Required parameter requestParameters.profileRestrictionReasonsId was null or undefined when calling deleteProfileRestrictionReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteProfileRestrictionReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteProfileRestrictionReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteProfileRestrictionReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileRestrictionReasons/{profileRestrictionReasonsId}`.replace(`{${"profileRestrictionReasonsId"}}`, encodeURIComponent(String(requestParameters.profileRestrictionReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Profile Restriction Reasons. <p><strong>OperationId:</strong>deleteProfileRestrictionReasons</p>
     * Delete Profile Restriction Reasons
     */
    async deleteProfileRestrictionReasons(requestParameters: DeleteProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteProfileRestrictionReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Sources. <p><strong>OperationId:</strong>deleteSources</p>
     * Delete Sources
     */
    async deleteSourcesRaw(requestParameters: DeleteSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourcesId === null || requestParameters.sourcesId === undefined) {
            throw new runtime.RequiredError('sourcesId','Required parameter requestParameters.sourcesId was null or undefined when calling deleteSources.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteSources.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteSources.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteSources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sources/{sourcesId}`.replace(`{${"sourcesId"}}`, encodeURIComponent(String(requestParameters.sourcesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Sources. <p><strong>OperationId:</strong>deleteSources</p>
     * Delete Sources
     */
    async deleteSources(requestParameters: DeleteSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Territories. <p><strong>OperationId:</strong>deleteTerritories</p>
     * Delete Territories
     */
    async deleteTerritoriesRaw(requestParameters: DeleteTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.territoriesId === null || requestParameters.territoriesId === undefined) {
            throw new runtime.RequiredError('territoriesId','Required parameter requestParameters.territoriesId was null or undefined when calling deleteTerritories.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteTerritories.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteTerritories.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteTerritories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/territories/{territoriesId}`.replace(`{${"territoriesId"}}`, encodeURIComponent(String(requestParameters.territoriesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Territories. <p><strong>OperationId:</strong>deleteTerritories</p>
     * Delete Territories
     */
    async deleteTerritories(requestParameters: DeleteTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTerritoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Titles. <p><strong>OperationId:</strong>deleteTitles</p>
     * Delete Titles
     */
    async deleteTitlesRaw(requestParameters: DeleteTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.titlesId === null || requestParameters.titlesId === undefined) {
            throw new runtime.RequiredError('titlesId','Required parameter requestParameters.titlesId was null or undefined when calling deleteTitles.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteTitles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/titles/{titlesId}`.replace(`{${"titlesId"}}`, encodeURIComponent(String(requestParameters.titlesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Titles. <p><strong>OperationId:</strong>deleteTitles</p>
     * Delete Titles
     */
    async deleteTitles(requestParameters: DeleteTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete VIP Levels. <p><strong>OperationId:</strong>deleteVIPLevels</p>
     * Delete VIP Levels
     */
    async deleteVIPLevelsRaw(requestParameters: DeleteVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.vipLevelsId === null || requestParameters.vipLevelsId === undefined) {
            throw new runtime.RequiredError('vipLevelsId','Required parameter requestParameters.vipLevelsId was null or undefined when calling deleteVIPLevels.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteVIPLevels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteVIPLevels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteVIPLevels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/vipLevels/{vipLevelsId}`.replace(`{${"vipLevelsId"}}`, encodeURIComponent(String(requestParameters.vipLevelsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete VIP Levels. <p><strong>OperationId:</strong>deleteVIPLevels</p>
     * Delete VIP Levels
     */
    async deleteVIPLevels(requestParameters: DeleteVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteVIPLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Account Owners. <p><strong>OperationId:</strong>getAccountOwners</p>
     * Get Account Owners
     */
    async getAccountOwnersRaw(requestParameters: GetAccountOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountOwnersDetails>> {
        if (requestParameters.chainCode === null || requestParameters.chainCode === undefined) {
            throw new runtime.RequiredError('chainCode','Required parameter requestParameters.chainCode was null or undefined when calling getAccountOwners.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAccountOwners.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAccountOwners.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAccountOwners.');
        }

        const queryParameters: any = {};

        if (requestParameters.chainCode !== undefined) {
            queryParameters['chainCode'] = requestParameters.chainCode;
        }

        if (requestParameters.findExactOwnerCodeMatch !== undefined) {
            queryParameters['findExactOwnerCodeMatch'] = requestParameters.findExactOwnerCodeMatch;
        }

        if (requestParameters.maxFetchRecords !== undefined) {
            queryParameters['maxFetchRecords'] = requestParameters.maxFetchRecords;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.ownerCode !== undefined) {
            queryParameters['ownerCode'] = requestParameters.ownerCode;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountOwners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountOwnersDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Account Owners. <p><strong>OperationId:</strong>getAccountOwners</p>
     * Get Account Owners
     */
    async getAccountOwners(requestParameters: GetAccountOwnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountOwnersDetails> {
        const response = await this.getAccountOwnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Account Priorities. <p><strong>OperationId:</strong>getAccountPriorities</p>
     * Get Account Priorities
     */
    async getAccountPrioritiesRaw(requestParameters: GetAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountPrioritiesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAccountPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAccountPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAccountPriorities.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountPriorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountPrioritiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Account Priorities. <p><strong>OperationId:</strong>getAccountPriorities</p>
     * Get Account Priorities
     */
    async getAccountPriorities(requestParameters: GetAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountPrioritiesDetails> {
        const response = await this.getAccountPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Account Types. <p><strong>OperationId:</strong>getAccountTypes</p>
     * Get Account Types
     */
    async getAccountTypesRaw(requestParameters: GetAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAccountTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAccountTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAccountTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Account Types. <p><strong>OperationId:</strong>getAccountTypes</p>
     * Get Account Types
     */
    async getAccountTypes(requestParameters: GetAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountTypesDetails> {
        const response = await this.getAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Address types. <p><strong>OperationId:</strong>getAddressTypes</p>
     * Get Address types
     */
    async getAddressTypesRaw(requestParameters: GetAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddressTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAddressTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAddressTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAddressTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Address types. <p><strong>OperationId:</strong>getAddressTypes</p>
     * Get Address types
     */
    async getAddressTypes(requestParameters: GetAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddressTypesDetails> {
        const response = await this.getAddressTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Alternate Language Guest Titles. <p><strong>OperationId:</strong>getAlternateLanguageGuestTitles</p>
     * Get Alternate Language Guest Titles
     */
    async getAlternateLanguageGuestTitlesRaw(requestParameters: GetAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlternateLanguageGuestTitlesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAlternateLanguageGuestTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.titleCodes) {
            queryParameters['titleCodes'] = requestParameters.titleCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alternateLanguages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlternateLanguageGuestTitlesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Alternate Language Guest Titles. <p><strong>OperationId:</strong>getAlternateLanguageGuestTitles</p>
     * Get Alternate Language Guest Titles
     */
    async getAlternateLanguageGuestTitles(requestParameters: GetAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlternateLanguageGuestTitlesDetails> {
        const response = await this.getAlternateLanguageGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Business Segments. <p><strong>OperationId:</strong>getBusinessSegments</p>
     * Get Business Segments
     */
    async getBusinessSegmentsRaw(requestParameters: GetBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BusinessSegmentsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getBusinessSegments.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getBusinessSegments.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getBusinessSegments.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/businessSegments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BusinessSegmentsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Business Segments. <p><strong>OperationId:</strong>getBusinessSegments</p>
     * Get Business Segments
     */
    async getBusinessSegments(requestParameters: GetBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BusinessSegmentsDetails> {
        const response = await this.getBusinessSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get City Postal Codes. Associate countries (and states or provinces if configured for the country) with cities and with postal codes can be utilized to validate addresses.<p><strong>OperationId:</strong>getCityPostalCodes</p>
     * Get city postal codes
     */
    async getCityPostalCodesRaw(requestParameters: GetCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CityPostalCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCityPostalCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCityPostalCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCityPostalCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.postalCodeFrom !== undefined) {
            queryParameters['postalCodeFrom'] = requestParameters.postalCodeFrom;
        }

        if (requestParameters.postalCodeTo !== undefined) {
            queryParameters['postalCodeTo'] = requestParameters.postalCodeTo;
        }

        if (requestParameters.cityWildCard !== undefined) {
            queryParameters['cityWildCard'] = requestParameters.cityWildCard;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.stateCodes) {
            queryParameters['stateCodes'] = requestParameters.stateCodes;
        }

        if (requestParameters.stateWildCard !== undefined) {
            queryParameters['stateWildCard'] = requestParameters.stateWildCard;
        }

        if (requestParameters.territoryCodes) {
            queryParameters['territoryCodes'] = requestParameters.territoryCodes;
        }

        if (requestParameters.territoryWildCard !== undefined) {
            queryParameters['territoryWildCard'] = requestParameters.territoryWildCard;
        }

        if (requestParameters.districtCodes) {
            queryParameters['districtCodes'] = requestParameters.districtCodes;
        }

        if (requestParameters.districtWildCard !== undefined) {
            queryParameters['districtWildCard'] = requestParameters.districtWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cityPostalCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CityPostalCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get City Postal Codes. Associate countries (and states or provinces if configured for the country) with cities and with postal codes can be utilized to validate addresses.<p><strong>OperationId:</strong>getCityPostalCodes</p>
     * Get city postal codes
     */
    async getCityPostalCodes(requestParameters: GetCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CityPostalCodesDetails> {
        const response = await this.getCityPostalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Company Types. <p><strong>OperationId:</strong>getCompanyTypes</p>
     * Get Company Types
     */
    async getCompanyTypesRaw(requestParameters: GetCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompanyTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCompanyTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCompanyTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCompanyTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/companyTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Company Types. <p><strong>OperationId:</strong>getCompanyTypes</p>
     * Get Company Types
     */
    async getCompanyTypes(requestParameters: GetCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompanyTypesDetails> {
        const response = await this.getCompanyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Competition Codes.  Competition codes enable you to identify other hospitality businesses that are competing with you for an account&apos;s business opportunities.<p><strong>OperationId:</strong>getCompetitionCodes</p>
     * Get competition codes
     */
    async getCompetitionCodesRaw(requestParameters: GetCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompetitionCodesDetails>> {
        if (requestParameters.fetchInactive === null || requestParameters.fetchInactive === undefined) {
            throw new runtime.RequiredError('fetchInactive','Required parameter requestParameters.fetchInactive was null or undefined when calling getCompetitionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCompetitionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCompetitionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCompetitionCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/competitionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompetitionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Competition Codes.  Competition codes enable you to identify other hospitality businesses that are competing with you for an account&apos;s business opportunities.<p><strong>OperationId:</strong>getCompetitionCodes</p>
     * Get competition codes
     */
    async getCompetitionCodes(requestParameters: GetCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompetitionCodesDetails> {
        const response = await this.getCompetitionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Distance Types. <p><strong>OperationId:</strong>getDistanceTypes</p>
     * Get Distance Types
     */
    async getDistanceTypesRaw(requestParameters: GetDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DistanceTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDistanceTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getDistanceTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getDistanceTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/distanceTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistanceTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Distance Types. <p><strong>OperationId:</strong>getDistanceTypes</p>
     * Get Distance Types
     */
    async getDistanceTypes(requestParameters: GetDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DistanceTypesDetails> {
        const response = await this.getDistanceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Districts. <p><strong>OperationId:</strong>getDistricts</p>
     * Get Districts
     */
    async getDistrictsRaw(requestParameters: GetDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DistrictsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDistricts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getDistricts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getDistricts.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/districts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistrictsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Districts. <p><strong>OperationId:</strong>getDistricts</p>
     * Get Districts
     */
    async getDistricts(requestParameters: GetDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DistrictsDetails> {
        const response = await this.getDistrictsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Ecertificate Location Types. <p><strong>OperationId:</strong>getEcertificateLocationTypes</p>
     * Get Ecertificate Location Types
     */
    async getEcertificateLocationTypesRaw(requestParameters: GetEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EcertificateLocationTypesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getEcertificateLocationTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getEcertificateLocationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getEcertificateLocationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getEcertificateLocationTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eCertificateLocationTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EcertificateLocationTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Ecertificate Location Types. <p><strong>OperationId:</strong>getEcertificateLocationTypes</p>
     * Get Ecertificate Location Types
     */
    async getEcertificateLocationTypes(requestParameters: GetEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EcertificateLocationTypesDetails> {
        const response = await this.getEcertificateLocationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Gender Types. <p><strong>OperationId:</strong>getGenderTypes</p>
     * Get Gender Types
     */
    async getGenderTypesRaw(requestParameters: GetGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenderTypes>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGenderTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGenderTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGenderTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/genderTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenderTypesFromJSON(jsonValue));
    }

    /**
     * Use this API to get Gender Types. <p><strong>OperationId:</strong>getGenderTypes</p>
     * Get Gender Types
     */
    async getGenderTypes(requestParameters: GetGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenderTypes> {
        const response = await this.getGenderTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Guest Statuses. <p><strong>OperationId:</strong>getGuestStatuses</p>
     * Get Guest Statuses
     */
    async getGuestStatusesRaw(requestParameters: GetGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestStatusesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGuestStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGuestStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGuestStatuses.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestStatuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestStatusesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Guest Statuses. <p><strong>OperationId:</strong>getGuestStatuses</p>
     * Get Guest Statuses
     */
    async getGuestStatuses(requestParameters: GetGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestStatusesDetails> {
        const response = await this.getGuestStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Guest Titles. <p><strong>OperationId:</strong>getGuestTitles</p>
     * Get Guest Titles
     */
    async getGuestTitlesRaw(requestParameters: GetGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestTitlesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGuestTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.titleCodes) {
            queryParameters['titleCodes'] = requestParameters.titleCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTitles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestTitlesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Guest Titles. <p><strong>OperationId:</strong>getGuestTitles</p>
     * Get Guest Titles
     */
    async getGuestTitles(requestParameters: GetGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestTitlesDetails> {
        const response = await this.getGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Guest Types. <p><strong>OperationId:</strong>getGuestTypes</p>
     * Get Guest Types
     */
    async getGuestTypesRaw(requestParameters: GetGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGuestTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGuestTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGuestTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Guest Types. <p><strong>OperationId:</strong>getGuestTypes</p>
     * Get Guest Types
     */
    async getGuestTypes(requestParameters: GetGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestTypesDetails> {
        const response = await this.getGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Identification Types such as passport, driver license, military ID, and so on.<p><strong>OperationId:</strong>getIdentificationTypes</p>
     * Get identification types
     */
    async getIdentificationTypesRaw(requestParameters: GetIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentificationTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getIdentificationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getIdentificationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getIdentificationTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/identificationTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentificationTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Identification Types such as passport, driver license, military ID, and so on.<p><strong>OperationId:</strong>getIdentificationTypes</p>
     * Get identification types
     */
    async getIdentificationTypes(requestParameters: GetIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentificationTypesDetails> {
        const response = await this.getIdentificationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Immigration Statuses. <p><strong>OperationId:</strong>getImmigrationStatuses</p>
     * Get Immigration Statuses
     */
    async getImmigrationStatusesRaw(requestParameters: GetImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImmigrationStatusesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getImmigrationStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getImmigrationStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getImmigrationStatuses.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/immigrationStatuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImmigrationStatusesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Immigration Statuses. <p><strong>OperationId:</strong>getImmigrationStatuses</p>
     * Get Immigration Statuses
     */
    async getImmigrationStatuses(requestParameters: GetImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImmigrationStatusesDetails> {
        const response = await this.getImmigrationStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Industry Codes. <p><strong>OperationId:</strong>getIndustryCodes</p>
     * Get Industry Codes
     */
    async getIndustryCodesRaw(requestParameters: GetIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IndustryCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getIndustryCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getIndustryCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getIndustryCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/industryCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IndustryCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Industry Codes. <p><strong>OperationId:</strong>getIndustryCodes</p>
     * Get Industry Codes
     */
    async getIndustryCodes(requestParameters: GetIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IndustryCodesDetails> {
        const response = await this.getIndustryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Influence Codes. <p><strong>OperationId:</strong>getInfluenceCodes</p>
     * Get Influence Codes
     */
    async getInfluenceCodesRaw(requestParameters: GetInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfluenceCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getInfluenceCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getInfluenceCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getInfluenceCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/influenceCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfluenceCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Influence Codes. <p><strong>OperationId:</strong>getInfluenceCodes</p>
     * Get Influence Codes
     */
    async getInfluenceCodes(requestParameters: GetInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfluenceCodesDetails> {
        const response = await this.getInfluenceCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Keyword Types. <p><strong>OperationId:</strong>getKeywordTypes</p>
     * Get Keyword Types
     */
    async getKeywordTypesRaw(requestParameters: GetKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<KeywordTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getKeywordTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getKeywordTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getKeywordTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/keywordTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KeywordTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Keyword Types. <p><strong>OperationId:</strong>getKeywordTypes</p>
     * Get Keyword Types
     */
    async getKeywordTypes(requestParameters: GetKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<KeywordTypesDetails> {
        const response = await this.getKeywordTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Mailing Action Codes. <p><strong>OperationId:</strong>getMailingActionCodes</p>
     * Get Mailing Action Codes
     */
    async getMailingActionCodesRaw(requestParameters: GetMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MailingActionCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getMailingActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getMailingActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getMailingActionCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mailingActionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MailingActionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Mailing Action Codes. <p><strong>OperationId:</strong>getMailingActionCodes</p>
     * Get Mailing Action Codes
     */
    async getMailingActionCodes(requestParameters: GetMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MailingActionCodesDetails> {
        const response = await this.getMailingActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Membership Claim Origins. <p><strong>OperationId:</strong>getMembershipClaimOrigins</p>
     * Get Membership Claim Origins
     */
    async getMembershipClaimOriginsRaw(requestParameters: GetMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaimOriginsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getMembershipClaimOrigins.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipClaimOrigins.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipClaimOrigins.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimOrigins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipClaimOriginsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Membership Claim Origins. <p><strong>OperationId:</strong>getMembershipClaimOrigins</p>
     * Get Membership Claim Origins
     */
    async getMembershipClaimOrigins(requestParameters: GetMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaimOriginsDetails> {
        const response = await this.getMembershipClaimOriginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Membership Claim Types. <p><strong>OperationId:</strong>getMembershipClaimTypes</p>
     * Get Membership Claim Types
     */
    async getMembershipClaimTypesRaw(requestParameters: GetMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipClaimTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getMembershipClaimTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipClaimTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipClaimTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipClaimTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Membership Claim Types. <p><strong>OperationId:</strong>getMembershipClaimTypes</p>
     * Get Membership Claim Types
     */
    async getMembershipClaimTypes(requestParameters: GetMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipClaimTypesDetails> {
        const response = await this.getMembershipClaimTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Membership Enrollment Codes. <p><strong>OperationId:</strong>getMembershipEnrollmentCodes</p>
     * Get Membership Enrollment Codes
     */
    async getMembershipEnrollmentCodesRaw(requestParameters: GetMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipEnrollmentCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getMembershipEnrollmentCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipEnrollmentCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipEnrollmentCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipEnrollmentCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Membership Enrollment Codes. <p><strong>OperationId:</strong>getMembershipEnrollmentCodes</p>
     * Get Membership Enrollment Codes
     */
    async getMembershipEnrollmentCodes(requestParameters: GetMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipEnrollmentCodesDetails> {
        const response = await this.getMembershipEnrollmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Membership Status Codes. <p><strong>OperationId:</strong>getMembershipStatusCodes</p>
     * Get Membership Status Codes
     */
    async getMembershipStatusCodesRaw(requestParameters: GetMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipStatusCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getMembershipStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getMembershipStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getMembershipStatusCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipStatusCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipStatusCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Membership Status Codes. <p><strong>OperationId:</strong>getMembershipStatusCodes</p>
     * Get Membership Status Codes
     */
    async getMembershipStatusCodes(requestParameters: GetMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipStatusCodesDetails> {
        const response = await this.getMembershipStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Nationalities codes and description configured in OPERA.<p><strong>OperationId:</strong>getNationalities</p>
     * Get nationalities
     */
    async getNationalitiesRaw(requestParameters: GetNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NationalitiesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getNationalities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getNationalities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getNationalities.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/nationalities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NationalitiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Nationalities codes and description configured in OPERA.<p><strong>OperationId:</strong>getNationalities</p>
     * Get nationalities
     */
    async getNationalities(requestParameters: GetNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NationalitiesDetails> {
        const response = await this.getNationalitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Owner Teams. <p><strong>OperationId:</strong>getOwnerTeams</p>
     * Get Owner Teams
     */
    async getOwnerTeamsRaw(requestParameters: GetOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OwnerTeamsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getOwnerTeams.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getOwnerTeams.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getOwnerTeams.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ownerTeams`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnerTeamsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Owner Teams. <p><strong>OperationId:</strong>getOwnerTeams</p>
     * Get Owner Teams
     */
    async getOwnerTeams(requestParameters: GetOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OwnerTeamsDetails> {
        const response = await this.getOwnerTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Pay Days. <p><strong>OperationId:</strong>getPayDays</p>
     * Get Pay Days
     */
    async getPayDaysRaw(requestParameters: GetPayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayDaysDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPayDays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPayDays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPayDays.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/payDays`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayDaysDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Pay Days. <p><strong>OperationId:</strong>getPayDays</p>
     * Get Pay Days
     */
    async getPayDays(requestParameters: GetPayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayDaysDetails> {
        const response = await this.getPayDaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Profile Inactive Reasons. <p><strong>OperationId:</strong>getProfileInactiveReasons</p>
     * Get Profile Inactive Reasons
     */
    async getProfileInactiveReasonsRaw(requestParameters: GetProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileInactiveReasonsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getProfileInactiveReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getProfileInactiveReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getProfileInactiveReasons.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileInactiveReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileInactiveReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Profile Inactive Reasons. <p><strong>OperationId:</strong>getProfileInactiveReasons</p>
     * Get Profile Inactive Reasons
     */
    async getProfileInactiveReasons(requestParameters: GetProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileInactiveReasonsDetails> {
        const response = await this.getProfileInactiveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Profile Restriction Reasons. <p><strong>OperationId:</strong>getProfileRestrictionReasons</p>
     * Get Profile Restriction Reasons
     */
    async getProfileRestrictionReasonsRaw(requestParameters: GetProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileRestrictionReasonsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getProfileRestrictionReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getProfileRestrictionReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getProfileRestrictionReasons.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileRestrictionReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileRestrictionReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Profile Restriction Reasons. <p><strong>OperationId:</strong>getProfileRestrictionReasons</p>
     * Get Profile Restriction Reasons
     */
    async getProfileRestrictionReasons(requestParameters: GetProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileRestrictionReasonsDetails> {
        const response = await this.getProfileRestrictionReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Sources. <p><strong>OperationId:</strong>getSources</p>
     * Get Sources
     */
    async getSourcesRaw(requestParameters: GetSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourcesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getSources.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getSources.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getSources.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourcesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Sources. <p><strong>OperationId:</strong>getSources</p>
     * Get Sources
     */
    async getSources(requestParameters: GetSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourcesDetails> {
        const response = await this.getSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get States. <p><strong>OperationId:</strong>getStates</p>
     * Get States
     */
    async getStatesRaw(requestParameters: GetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getStates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getStates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getStates.');
        }

        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.stateWildCard !== undefined) {
            queryParameters['stateWildCard'] = requestParameters.stateWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/states`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get States. <p><strong>OperationId:</strong>getStates</p>
     * Get States
     */
    async getStates(requestParameters: GetStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatesDetails> {
        const response = await this.getStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Territories. <p><strong>OperationId:</strong>getTerritories</p>
     * Get Territories
     */
    async getTerritoriesRaw(requestParameters: GetTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TerritoriesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTerritories.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTerritories.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTerritories.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/territories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TerritoriesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Territories. <p><strong>OperationId:</strong>getTerritories</p>
     * Get Territories
     */
    async getTerritories(requestParameters: GetTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TerritoriesDetails> {
        const response = await this.getTerritoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Titles. <p><strong>OperationId:</strong>getTitles</p>
     * Get Titles
     */
    async getTitlesRaw(requestParameters: GetTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TitlesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/titles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TitlesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Titles. <p><strong>OperationId:</strong>getTitles</p>
     * Get Titles
     */
    async getTitles(requestParameters: GetTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TitlesDetails> {
        const response = await this.getTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Travel Agent Types. <p><strong>OperationId:</strong>getTravelAgentTypes</p>
     * Get Travel Agent Types
     */
    async getTravelAgentTypesRaw(requestParameters: GetTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TravelAgentTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTravelAgentTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTravelAgentTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTravelAgentTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalAgentTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TravelAgentTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Travel Agent Types. <p><strong>OperationId:</strong>getTravelAgentTypes</p>
     * Get Travel Agent Types
     */
    async getTravelAgentTypes(requestParameters: GetTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TravelAgentTypesDetails> {
        const response = await this.getTravelAgentTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get VIP Levels. <p><strong>OperationId:</strong>getVIPLevels</p>
     * Get VIP Levels
     */
    async getVIPLevelsRaw(requestParameters: GetVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VIPLevelsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getVIPLevels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getVIPLevels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getVIPLevels.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/vipLevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VIPLevelsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get VIP Levels. <p><strong>OperationId:</strong>getVIPLevels</p>
     * Get VIP Levels
     */
    async getVIPLevels(requestParameters: GetVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VIPLevelsDetails> {
        const response = await this.getVIPLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Account Priorities. <p><strong>OperationId:</strong>postAccountPriorities</p>
     * Create Account Priorities
     */
    async postAccountPrioritiesRaw(requestParameters: PostAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postAccountPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postAccountPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postAccountPriorities.');
        }

        if (requestParameters.accountPrioritiesCriteria === null || requestParameters.accountPrioritiesCriteria === undefined) {
            throw new runtime.RequiredError('accountPrioritiesCriteria','Required parameter requestParameters.accountPrioritiesCriteria was null or undefined when calling postAccountPriorities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountPriorities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountPrioritiesCriteriaToJSON(requestParameters.accountPrioritiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Account Priorities. <p><strong>OperationId:</strong>postAccountPriorities</p>
     * Create Account Priorities
     */
    async postAccountPriorities(requestParameters: PostAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAccountPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Account Types. <p><strong>OperationId:</strong>postAccountTypes</p>
     * Create Account Types
     */
    async postAccountTypesRaw(requestParameters: PostAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postAccountTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postAccountTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postAccountTypes.');
        }

        if (requestParameters.accountTypesCriteria === null || requestParameters.accountTypesCriteria === undefined) {
            throw new runtime.RequiredError('accountTypesCriteria','Required parameter requestParameters.accountTypesCriteria was null or undefined when calling postAccountTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountTypesCriteriaToJSON(requestParameters.accountTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Account Types. <p><strong>OperationId:</strong>postAccountTypes</p>
     * Create Account Types
     */
    async postAccountTypes(requestParameters: PostAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Address type. <p><strong>OperationId:</strong>postAddressTypes</p>
     * Create a new Address type
     */
    async postAddressTypesRaw(requestParameters: PostAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postAddressTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postAddressTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postAddressTypes.');
        }

        if (requestParameters.addressTypesCriteria === null || requestParameters.addressTypesCriteria === undefined) {
            throw new runtime.RequiredError('addressTypesCriteria','Required parameter requestParameters.addressTypesCriteria was null or undefined when calling postAddressTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressTypesCriteriaToJSON(requestParameters.addressTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Address type. <p><strong>OperationId:</strong>postAddressTypes</p>
     * Create a new Address type
     */
    async postAddressTypes(requestParameters: PostAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAddressTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Alternate Language Guest Titles. <p><strong>OperationId:</strong>postAlternateLanguageGuestTitles</p>
     * Create Alternate Language Guest Titles
     */
    async postAlternateLanguageGuestTitlesRaw(requestParameters: PostAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postAlternateLanguageGuestTitles.');
        }

        if (requestParameters.alternateLanguageGuestTitlesCriteria === null || requestParameters.alternateLanguageGuestTitlesCriteria === undefined) {
            throw new runtime.RequiredError('alternateLanguageGuestTitlesCriteria','Required parameter requestParameters.alternateLanguageGuestTitlesCriteria was null or undefined when calling postAlternateLanguageGuestTitles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alternateLanguages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlternateLanguageGuestTitlesCriteriaToJSON(requestParameters.alternateLanguageGuestTitlesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Alternate Language Guest Titles. <p><strong>OperationId:</strong>postAlternateLanguageGuestTitles</p>
     * Create Alternate Language Guest Titles
     */
    async postAlternateLanguageGuestTitles(requestParameters: PostAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAlternateLanguageGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Business Segments. <p><strong>OperationId:</strong>postBusinessSegments</p>
     * Create Business Segments
     */
    async postBusinessSegmentsRaw(requestParameters: PostBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postBusinessSegments.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postBusinessSegments.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postBusinessSegments.');
        }

        if (requestParameters.businessSegmentsCriteria === null || requestParameters.businessSegmentsCriteria === undefined) {
            throw new runtime.RequiredError('businessSegmentsCriteria','Required parameter requestParameters.businessSegmentsCriteria was null or undefined when calling postBusinessSegments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/businessSegments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessSegmentsCriteriaToJSON(requestParameters.businessSegmentsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Business Segments. <p><strong>OperationId:</strong>postBusinessSegments</p>
     * Create Business Segments
     */
    async postBusinessSegments(requestParameters: PostBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBusinessSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create City Postal Codes. <p><strong>OperationId:</strong>postCityPostalCodes</p>
     * Create CityPostalCodes
     */
    async postCityPostalCodesRaw(requestParameters: PostCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCityPostalCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCityPostalCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCityPostalCodes.');
        }

        if (requestParameters.cityPostalCodesCriteria === null || requestParameters.cityPostalCodesCriteria === undefined) {
            throw new runtime.RequiredError('cityPostalCodesCriteria','Required parameter requestParameters.cityPostalCodesCriteria was null or undefined when calling postCityPostalCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cityPostalCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CityPostalCodesCriteriaToJSON(requestParameters.cityPostalCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create City Postal Codes. <p><strong>OperationId:</strong>postCityPostalCodes</p>
     * Create CityPostalCodes
     */
    async postCityPostalCodes(requestParameters: PostCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCityPostalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Company Types. <p><strong>OperationId:</strong>postCompanyTypes</p>
     * Create Company Types
     */
    async postCompanyTypesRaw(requestParameters: PostCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCompanyTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCompanyTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCompanyTypes.');
        }

        if (requestParameters.companyTypesCriteria === null || requestParameters.companyTypesCriteria === undefined) {
            throw new runtime.RequiredError('companyTypesCriteria','Required parameter requestParameters.companyTypesCriteria was null or undefined when calling postCompanyTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/companyTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyTypesCriteriaToJSON(requestParameters.companyTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Company Types. <p><strong>OperationId:</strong>postCompanyTypes</p>
     * Create Company Types
     */
    async postCompanyTypes(requestParameters: PostCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompanyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Competition Codes. Competition codes enable you to identify other hospitality businesses that are competing with you for an account&apos;s business opportunities.<p><strong>OperationId:</strong>postCompetitionCodes</p>
     * Create competition codes
     */
    async postCompetitionCodesRaw(requestParameters: PostCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCompetitionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCompetitionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCompetitionCodes.');
        }

        if (requestParameters.competitionCodesCriteria === null || requestParameters.competitionCodesCriteria === undefined) {
            throw new runtime.RequiredError('competitionCodesCriteria','Required parameter requestParameters.competitionCodesCriteria was null or undefined when calling postCompetitionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/competitionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionCodesCriteriaToJSON(requestParameters.competitionCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Competition Codes. Competition codes enable you to identify other hospitality businesses that are competing with you for an account&apos;s business opportunities.<p><strong>OperationId:</strong>postCompetitionCodes</p>
     * Create competition codes
     */
    async postCompetitionCodes(requestParameters: PostCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompetitionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Distance Types. <p><strong>OperationId:</strong>postDistanceTypes</p>
     * Create Distance Types
     */
    async postDistanceTypesRaw(requestParameters: PostDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postDistanceTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postDistanceTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postDistanceTypes.');
        }

        if (requestParameters.distanceTypesCriteria === null || requestParameters.distanceTypesCriteria === undefined) {
            throw new runtime.RequiredError('distanceTypesCriteria','Required parameter requestParameters.distanceTypesCriteria was null or undefined when calling postDistanceTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/distanceTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DistanceTypesCriteriaToJSON(requestParameters.distanceTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Distance Types. <p><strong>OperationId:</strong>postDistanceTypes</p>
     * Create Distance Types
     */
    async postDistanceTypes(requestParameters: PostDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDistanceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Districts. <p><strong>OperationId:</strong>postDistricts</p>
     * Create Districts
     */
    async postDistrictsRaw(requestParameters: PostDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postDistricts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postDistricts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postDistricts.');
        }

        if (requestParameters.districtsCriteria === null || requestParameters.districtsCriteria === undefined) {
            throw new runtime.RequiredError('districtsCriteria','Required parameter requestParameters.districtsCriteria was null or undefined when calling postDistricts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/districts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DistrictsCriteriaToJSON(requestParameters.districtsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Districts. <p><strong>OperationId:</strong>postDistricts</p>
     * Create Districts
     */
    async postDistricts(requestParameters: PostDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDistrictsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Ecertificate Location Types. <p><strong>OperationId:</strong>postEcertificateLocationTypes</p>
     * Create Ecertificate Location Types
     */
    async postEcertificateLocationTypesRaw(requestParameters: PostEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postEcertificateLocationTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postEcertificateLocationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postEcertificateLocationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postEcertificateLocationTypes.');
        }

        if (requestParameters.ecertificateLocationTypesCriteria === null || requestParameters.ecertificateLocationTypesCriteria === undefined) {
            throw new runtime.RequiredError('ecertificateLocationTypesCriteria','Required parameter requestParameters.ecertificateLocationTypesCriteria was null or undefined when calling postEcertificateLocationTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eCertificateLocationTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EcertificateLocationTypesCriteriaToJSON(requestParameters.ecertificateLocationTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Ecertificate Location Types. <p><strong>OperationId:</strong>postEcertificateLocationTypes</p>
     * Create Ecertificate Location Types
     */
    async postEcertificateLocationTypes(requestParameters: PostEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postEcertificateLocationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Gender Types. <p><strong>OperationId:</strong>postGenderTypes</p>
     * Create Gender Types
     */
    async postGenderTypesRaw(requestParameters: PostGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postGenderTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postGenderTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postGenderTypes.');
        }

        if (requestParameters.genderTypesCriteria === null || requestParameters.genderTypesCriteria === undefined) {
            throw new runtime.RequiredError('genderTypesCriteria','Required parameter requestParameters.genderTypesCriteria was null or undefined when calling postGenderTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/genderTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenderTypesCriteriaToJSON(requestParameters.genderTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Gender Types. <p><strong>OperationId:</strong>postGenderTypes</p>
     * Create Gender Types
     */
    async postGenderTypes(requestParameters: PostGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGenderTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Guest Statuses. <p><strong>OperationId:</strong>postGuestStatuses</p>
     * Create Guest Statuses
     */
    async postGuestStatusesRaw(requestParameters: PostGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postGuestStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postGuestStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postGuestStatuses.');
        }

        if (requestParameters.guestStatusesCriteria === null || requestParameters.guestStatusesCriteria === undefined) {
            throw new runtime.RequiredError('guestStatusesCriteria','Required parameter requestParameters.guestStatusesCriteria was null or undefined when calling postGuestStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestStatuses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuestStatusesCriteriaToJSON(requestParameters.guestStatusesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Guest Statuses. <p><strong>OperationId:</strong>postGuestStatuses</p>
     * Create Guest Statuses
     */
    async postGuestStatuses(requestParameters: PostGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Guest Titles. <p><strong>OperationId:</strong>postGuestTitles</p>
     * Create Guest Titles
     */
    async postGuestTitlesRaw(requestParameters: PostGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postGuestTitles.');
        }

        if (requestParameters.guestTitlesCriteria === null || requestParameters.guestTitlesCriteria === undefined) {
            throw new runtime.RequiredError('guestTitlesCriteria','Required parameter requestParameters.guestTitlesCriteria was null or undefined when calling postGuestTitles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTitles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuestTitlesCriteriaToJSON(requestParameters.guestTitlesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Guest Titles. <p><strong>OperationId:</strong>postGuestTitles</p>
     * Create Guest Titles
     */
    async postGuestTitles(requestParameters: PostGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Guest Types. <p><strong>OperationId:</strong>postGuestTypes</p>
     * Create Guest Types
     */
    async postGuestTypesRaw(requestParameters: PostGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postGuestTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postGuestTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postGuestTypes.');
        }

        if (requestParameters.guestTypesCriteria === null || requestParameters.guestTypesCriteria === undefined) {
            throw new runtime.RequiredError('guestTypesCriteria','Required parameter requestParameters.guestTypesCriteria was null or undefined when calling postGuestTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuestTypesCriteriaToJSON(requestParameters.guestTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Guest Types. <p><strong>OperationId:</strong>postGuestTypes</p>
     * Create Guest Types
     */
    async postGuestTypes(requestParameters: PostGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Identification Types. <p><strong>OperationId:</strong>postIdentificationTypes</p>
     * Create Identification Types
     */
    async postIdentificationTypesRaw(requestParameters: PostIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postIdentificationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postIdentificationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postIdentificationTypes.');
        }

        if (requestParameters.identificationTypesCriteria === null || requestParameters.identificationTypesCriteria === undefined) {
            throw new runtime.RequiredError('identificationTypesCriteria','Required parameter requestParameters.identificationTypesCriteria was null or undefined when calling postIdentificationTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/identificationTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentificationTypesCriteriaToJSON(requestParameters.identificationTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Identification Types. <p><strong>OperationId:</strong>postIdentificationTypes</p>
     * Create Identification Types
     */
    async postIdentificationTypes(requestParameters: PostIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postIdentificationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Immigration Statuses. <p><strong>OperationId:</strong>postImmigrationStatuses</p>
     * Create Immigration Statuses
     */
    async postImmigrationStatusesRaw(requestParameters: PostImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postImmigrationStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postImmigrationStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postImmigrationStatuses.');
        }

        if (requestParameters.immigrationStatusesCriteria === null || requestParameters.immigrationStatusesCriteria === undefined) {
            throw new runtime.RequiredError('immigrationStatusesCriteria','Required parameter requestParameters.immigrationStatusesCriteria was null or undefined when calling postImmigrationStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/immigrationStatuses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ImmigrationStatusesCriteriaToJSON(requestParameters.immigrationStatusesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Immigration Statuses. <p><strong>OperationId:</strong>postImmigrationStatuses</p>
     * Create Immigration Statuses
     */
    async postImmigrationStatuses(requestParameters: PostImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postImmigrationStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Industry Codes. <p><strong>OperationId:</strong>postIndustryCodes</p>
     * Create Industry Codes
     */
    async postIndustryCodesRaw(requestParameters: PostIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postIndustryCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postIndustryCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postIndustryCodes.');
        }

        if (requestParameters.industryCodesCriteria === null || requestParameters.industryCodesCriteria === undefined) {
            throw new runtime.RequiredError('industryCodesCriteria','Required parameter requestParameters.industryCodesCriteria was null or undefined when calling postIndustryCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/industryCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndustryCodesCriteriaToJSON(requestParameters.industryCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Industry Codes. <p><strong>OperationId:</strong>postIndustryCodes</p>
     * Create Industry Codes
     */
    async postIndustryCodes(requestParameters: PostIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postIndustryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Influence Codes. <p><strong>OperationId:</strong>postInfluenceCodes</p>
     * Create Influence Codes
     */
    async postInfluenceCodesRaw(requestParameters: PostInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postInfluenceCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postInfluenceCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postInfluenceCodes.');
        }

        if (requestParameters.influenceCodesCriteria === null || requestParameters.influenceCodesCriteria === undefined) {
            throw new runtime.RequiredError('influenceCodesCriteria','Required parameter requestParameters.influenceCodesCriteria was null or undefined when calling postInfluenceCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/influenceCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InfluenceCodesCriteriaToJSON(requestParameters.influenceCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Influence Codes. <p><strong>OperationId:</strong>postInfluenceCodes</p>
     * Create Influence Codes
     */
    async postInfluenceCodes(requestParameters: PostInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postInfluenceCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Keyword Types. <p><strong>OperationId:</strong>postKeywordTypes</p>
     * Create Keyword Types
     */
    async postKeywordTypesRaw(requestParameters: PostKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postKeywordTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postKeywordTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postKeywordTypes.');
        }

        if (requestParameters.keywordTypesCriteria === null || requestParameters.keywordTypesCriteria === undefined) {
            throw new runtime.RequiredError('keywordTypesCriteria','Required parameter requestParameters.keywordTypesCriteria was null or undefined when calling postKeywordTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/keywordTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: KeywordTypesCriteriaToJSON(requestParameters.keywordTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Keyword Types. <p><strong>OperationId:</strong>postKeywordTypes</p>
     * Create Keyword Types
     */
    async postKeywordTypes(requestParameters: PostKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postKeywordTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Mailing Action Codes. <p><strong>OperationId:</strong>postMailingActionCodes</p>
     * Create Mailing Action Codes
     */
    async postMailingActionCodesRaw(requestParameters: PostMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMailingActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMailingActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMailingActionCodes.');
        }

        if (requestParameters.mailingActionCodesCriteria === null || requestParameters.mailingActionCodesCriteria === undefined) {
            throw new runtime.RequiredError('mailingActionCodesCriteria','Required parameter requestParameters.mailingActionCodesCriteria was null or undefined when calling postMailingActionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mailingActionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MailingActionCodesCriteriaToJSON(requestParameters.mailingActionCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Mailing Action Codes. <p><strong>OperationId:</strong>postMailingActionCodes</p>
     * Create Mailing Action Codes
     */
    async postMailingActionCodes(requestParameters: PostMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMailingActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Membership Claim Origins. <p><strong>OperationId:</strong>postMembershipClaimOrigins</p>
     * Create Membership Claim Origins
     */
    async postMembershipClaimOriginsRaw(requestParameters: PostMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMembershipClaimOrigins.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMembershipClaimOrigins.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMembershipClaimOrigins.');
        }

        if (requestParameters.membershipClaimOriginsCriteria === null || requestParameters.membershipClaimOriginsCriteria === undefined) {
            throw new runtime.RequiredError('membershipClaimOriginsCriteria','Required parameter requestParameters.membershipClaimOriginsCriteria was null or undefined when calling postMembershipClaimOrigins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimOrigins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipClaimOriginsCriteriaToJSON(requestParameters.membershipClaimOriginsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Membership Claim Origins. <p><strong>OperationId:</strong>postMembershipClaimOrigins</p>
     * Create Membership Claim Origins
     */
    async postMembershipClaimOrigins(requestParameters: PostMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipClaimOriginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Membership Claim Types. <p><strong>OperationId:</strong>postMembershipClaimTypes</p>
     * Create Membership Claim Types
     */
    async postMembershipClaimTypesRaw(requestParameters: PostMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMembershipClaimTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMembershipClaimTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMembershipClaimTypes.');
        }

        if (requestParameters.membershipClaimTypesCriteria === null || requestParameters.membershipClaimTypesCriteria === undefined) {
            throw new runtime.RequiredError('membershipClaimTypesCriteria','Required parameter requestParameters.membershipClaimTypesCriteria was null or undefined when calling postMembershipClaimTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipClaimTypesCriteriaToJSON(requestParameters.membershipClaimTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Membership Claim Types. <p><strong>OperationId:</strong>postMembershipClaimTypes</p>
     * Create Membership Claim Types
     */
    async postMembershipClaimTypes(requestParameters: PostMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipClaimTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Membership Enrollment Codes. <p><strong>OperationId:</strong>postMembershipEnrollmentCodes</p>
     * Create Membership Enrollment Codes
     */
    async postMembershipEnrollmentCodesRaw(requestParameters: PostMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMembershipEnrollmentCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMembershipEnrollmentCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMembershipEnrollmentCodes.');
        }

        if (requestParameters.membershipEnrollmentCodesCriteria === null || requestParameters.membershipEnrollmentCodesCriteria === undefined) {
            throw new runtime.RequiredError('membershipEnrollmentCodesCriteria','Required parameter requestParameters.membershipEnrollmentCodesCriteria was null or undefined when calling postMembershipEnrollmentCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipEnrollmentCodesCriteriaToJSON(requestParameters.membershipEnrollmentCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Membership Enrollment Codes. <p><strong>OperationId:</strong>postMembershipEnrollmentCodes</p>
     * Create Membership Enrollment Codes
     */
    async postMembershipEnrollmentCodes(requestParameters: PostMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipEnrollmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Membership Status Codes. <p><strong>OperationId:</strong>postMembershipStatusCodes</p>
     * Create Membership Status Codes
     */
    async postMembershipStatusCodesRaw(requestParameters: PostMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMembershipStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMembershipStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMembershipStatusCodes.');
        }

        if (requestParameters.membershipStatusCodesCriteria === null || requestParameters.membershipStatusCodesCriteria === undefined) {
            throw new runtime.RequiredError('membershipStatusCodesCriteria','Required parameter requestParameters.membershipStatusCodesCriteria was null or undefined when calling postMembershipStatusCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipStatusCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipStatusCodesCriteriaToJSON(requestParameters.membershipStatusCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Membership Status Codes. <p><strong>OperationId:</strong>postMembershipStatusCodes</p>
     * Create Membership Status Codes
     */
    async postMembershipStatusCodes(requestParameters: PostMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMembershipStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Nationalities. <p><strong>OperationId:</strong>postNationalities</p>
     * Create Nationalities
     */
    async postNationalitiesRaw(requestParameters: PostNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postNationalities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postNationalities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postNationalities.');
        }

        if (requestParameters.nationalitiesCriteria === null || requestParameters.nationalitiesCriteria === undefined) {
            throw new runtime.RequiredError('nationalitiesCriteria','Required parameter requestParameters.nationalitiesCriteria was null or undefined when calling postNationalities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/nationalities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NationalitiesCriteriaToJSON(requestParameters.nationalitiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Nationalities. <p><strong>OperationId:</strong>postNationalities</p>
     * Create Nationalities
     */
    async postNationalities(requestParameters: PostNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postNationalitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Owner Teams. <p><strong>OperationId:</strong>postOwnerTeams</p>
     * Create Owner Teams
     */
    async postOwnerTeamsRaw(requestParameters: PostOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postOwnerTeams.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postOwnerTeams.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postOwnerTeams.');
        }

        if (requestParameters.ownerTeamsCriteria === null || requestParameters.ownerTeamsCriteria === undefined) {
            throw new runtime.RequiredError('ownerTeamsCriteria','Required parameter requestParameters.ownerTeamsCriteria was null or undefined when calling postOwnerTeams.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ownerTeams`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OwnerTeamsCriteriaToJSON(requestParameters.ownerTeamsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Owner Teams. <p><strong>OperationId:</strong>postOwnerTeams</p>
     * Create Owner Teams
     */
    async postOwnerTeams(requestParameters: PostOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOwnerTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Pay Days. <p><strong>OperationId:</strong>postPayDays</p>
     * Create Pay Days
     */
    async postPayDaysRaw(requestParameters: PostPayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postPayDays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postPayDays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postPayDays.');
        }

        if (requestParameters.payDaysCriteria === null || requestParameters.payDaysCriteria === undefined) {
            throw new runtime.RequiredError('payDaysCriteria','Required parameter requestParameters.payDaysCriteria was null or undefined when calling postPayDays.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/payDays`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PayDaysCriteriaToJSON(requestParameters.payDaysCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Pay Days. <p><strong>OperationId:</strong>postPayDays</p>
     * Create Pay Days
     */
    async postPayDays(requestParameters: PostPayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPayDaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Profile Inactive Reasons. <p><strong>OperationId:</strong>postProfileInactiveReasons</p>
     * Create Profile Inactive Reasons
     */
    async postProfileInactiveReasonsRaw(requestParameters: PostProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postProfileInactiveReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postProfileInactiveReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postProfileInactiveReasons.');
        }

        if (requestParameters.profileInactiveReasonsCriteria === null || requestParameters.profileInactiveReasonsCriteria === undefined) {
            throw new runtime.RequiredError('profileInactiveReasonsCriteria','Required parameter requestParameters.profileInactiveReasonsCriteria was null or undefined when calling postProfileInactiveReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileInactiveReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileInactiveReasonsCriteriaToJSON(requestParameters.profileInactiveReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Profile Inactive Reasons. <p><strong>OperationId:</strong>postProfileInactiveReasons</p>
     * Create Profile Inactive Reasons
     */
    async postProfileInactiveReasons(requestParameters: PostProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileInactiveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Profile Restriction Reasons. <p><strong>OperationId:</strong>postProfileRestrictionReasons</p>
     * Create Profile Restriction Reasons
     */
    async postProfileRestrictionReasonsRaw(requestParameters: PostProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postProfileRestrictionReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postProfileRestrictionReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postProfileRestrictionReasons.');
        }

        if (requestParameters.profileRestrictionReasonsCriteria === null || requestParameters.profileRestrictionReasonsCriteria === undefined) {
            throw new runtime.RequiredError('profileRestrictionReasonsCriteria','Required parameter requestParameters.profileRestrictionReasonsCriteria was null or undefined when calling postProfileRestrictionReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileRestrictionReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileRestrictionReasonsCriteriaToJSON(requestParameters.profileRestrictionReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Profile Restriction Reasons. <p><strong>OperationId:</strong>postProfileRestrictionReasons</p>
     * Create Profile Restriction Reasons
     */
    async postProfileRestrictionReasons(requestParameters: PostProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postProfileRestrictionReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Sources. <p><strong>OperationId:</strong>postSources</p>
     * Create Sources
     */
    async postSourcesRaw(requestParameters: PostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postSources.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postSources.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postSources.');
        }

        if (requestParameters.sourcesCriteria === null || requestParameters.sourcesCriteria === undefined) {
            throw new runtime.RequiredError('sourcesCriteria','Required parameter requestParameters.sourcesCriteria was null or undefined when calling postSources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourcesCriteriaToJSON(requestParameters.sourcesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Sources. <p><strong>OperationId:</strong>postSources</p>
     * Create Sources
     */
    async postSources(requestParameters: PostSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create States. <p><strong>OperationId:</strong>postStates</p>
     * Create States
     */
    async postStatesRaw(requestParameters: PostStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postStates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postStates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postStates.');
        }

        if (requestParameters.statesCriteria === null || requestParameters.statesCriteria === undefined) {
            throw new runtime.RequiredError('statesCriteria','Required parameter requestParameters.statesCriteria was null or undefined when calling postStates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/states`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StatesCriteriaToJSON(requestParameters.statesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create States. <p><strong>OperationId:</strong>postStates</p>
     * Create States
     */
    async postStates(requestParameters: PostStatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postStatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Territories. <p><strong>OperationId:</strong>postTerritories</p>
     * Create Territories
     */
    async postTerritoriesRaw(requestParameters: PostTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTerritories.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTerritories.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTerritories.');
        }

        if (requestParameters.territoriesCriteria === null || requestParameters.territoriesCriteria === undefined) {
            throw new runtime.RequiredError('territoriesCriteria','Required parameter requestParameters.territoriesCriteria was null or undefined when calling postTerritories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/territories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TerritoriesCriteriaToJSON(requestParameters.territoriesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Territories. <p><strong>OperationId:</strong>postTerritories</p>
     * Create Territories
     */
    async postTerritories(requestParameters: PostTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTerritoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Titles. <p><strong>OperationId:</strong>postTitles</p>
     * Create Titles
     */
    async postTitlesRaw(requestParameters: PostTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTitles.');
        }

        if (requestParameters.titlesCriteria === null || requestParameters.titlesCriteria === undefined) {
            throw new runtime.RequiredError('titlesCriteria','Required parameter requestParameters.titlesCriteria was null or undefined when calling postTitles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/titles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TitlesCriteriaToJSON(requestParameters.titlesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Titles. <p><strong>OperationId:</strong>postTitles</p>
     * Create Titles
     */
    async postTitles(requestParameters: PostTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Travel Agent Types. <p><strong>OperationId:</strong>postTravelAgentTypes</p>
     * Create Travel Agent Types
     */
    async postTravelAgentTypesRaw(requestParameters: PostTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTravelAgentTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTravelAgentTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTravelAgentTypes.');
        }

        if (requestParameters.travelAgentTypesCriteria === null || requestParameters.travelAgentTypesCriteria === undefined) {
            throw new runtime.RequiredError('travelAgentTypesCriteria','Required parameter requestParameters.travelAgentTypesCriteria was null or undefined when calling postTravelAgentTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalAgentTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TravelAgentTypesCriteriaToJSON(requestParameters.travelAgentTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Travel Agent Types. <p><strong>OperationId:</strong>postTravelAgentTypes</p>
     * Create Travel Agent Types
     */
    async postTravelAgentTypes(requestParameters: PostTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTravelAgentTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create VIP Levels. <p><strong>OperationId:</strong>postVIPLevels</p>
     * Create VIP Levels
     */
    async postVIPLevelsRaw(requestParameters: PostVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postVIPLevels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postVIPLevels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postVIPLevels.');
        }

        if (requestParameters.vIPLevelsCriteria === null || requestParameters.vIPLevelsCriteria === undefined) {
            throw new runtime.RequiredError('vIPLevelsCriteria','Required parameter requestParameters.vIPLevelsCriteria was null or undefined when calling postVIPLevels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/vipLevels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VIPLevelsCriteriaToJSON(requestParameters.vIPLevelsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create VIP Levels. <p><strong>OperationId:</strong>postVIPLevels</p>
     * Create VIP Levels
     */
    async postVIPLevels(requestParameters: PostVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postVIPLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Account Priorities. <p><strong>OperationId:</strong>putAccountPriorities</p>
     * Change Account Priorities
     */
    async putAccountPrioritiesRaw(requestParameters: PutAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.accountPriorityId === null || requestParameters.accountPriorityId === undefined) {
            throw new runtime.RequiredError('accountPriorityId','Required parameter requestParameters.accountPriorityId was null or undefined when calling putAccountPriorities.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putAccountPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putAccountPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putAccountPriorities.');
        }

        if (requestParameters.accountPrioritiesToBeChanged === null || requestParameters.accountPrioritiesToBeChanged === undefined) {
            throw new runtime.RequiredError('accountPrioritiesToBeChanged','Required parameter requestParameters.accountPrioritiesToBeChanged was null or undefined when calling putAccountPriorities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountPriorities/{accountPriorityId}`.replace(`{${"accountPriorityId"}}`, encodeURIComponent(String(requestParameters.accountPriorityId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountPrioritiesToBeChangedToJSON(requestParameters.accountPrioritiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Account Priorities. <p><strong>OperationId:</strong>putAccountPriorities</p>
     * Change Account Priorities
     */
    async putAccountPriorities(requestParameters: PutAccountPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAccountPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Account Types. <p><strong>OperationId:</strong>putAccountTypes</p>
     * Change Account Types
     */
    async putAccountTypesRaw(requestParameters: PutAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.accountTypesId === null || requestParameters.accountTypesId === undefined) {
            throw new runtime.RequiredError('accountTypesId','Required parameter requestParameters.accountTypesId was null or undefined when calling putAccountTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putAccountTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putAccountTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putAccountTypes.');
        }

        if (requestParameters.accountTypesToBeChanged === null || requestParameters.accountTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('accountTypesToBeChanged','Required parameter requestParameters.accountTypesToBeChanged was null or undefined when calling putAccountTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountTypes/{accountTypesId}`.replace(`{${"accountTypesId"}}`, encodeURIComponent(String(requestParameters.accountTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountTypesToBeChangedToJSON(requestParameters.accountTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Account Types. <p><strong>OperationId:</strong>putAccountTypes</p>
     * Change Account Types
     */
    async putAccountTypes(requestParameters: PutAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing Address type. <p><strong>OperationId:</strong>putAddressTypes</p>
     * Change an existing Address type
     */
    async putAddressTypesRaw(requestParameters: PutAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.addressTypeId === null || requestParameters.addressTypeId === undefined) {
            throw new runtime.RequiredError('addressTypeId','Required parameter requestParameters.addressTypeId was null or undefined when calling putAddressTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putAddressTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putAddressTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putAddressTypes.');
        }

        if (requestParameters.addressTypesToBeChanged === null || requestParameters.addressTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('addressTypesToBeChanged','Required parameter requestParameters.addressTypesToBeChanged was null or undefined when calling putAddressTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/addressTypes/{addressTypeId}`.replace(`{${"addressTypeId"}}`, encodeURIComponent(String(requestParameters.addressTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressTypesToBeChangedToJSON(requestParameters.addressTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing Address type. <p><strong>OperationId:</strong>putAddressTypes</p>
     * Change an existing Address type
     */
    async putAddressTypes(requestParameters: PutAddressTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAddressTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Company Types. <p><strong>OperationId:</strong>putCompanyTypes</p>
     * Change Company Types
     */
    async putCompanyTypesRaw(requestParameters: PutCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.companyTypesCode === null || requestParameters.companyTypesCode === undefined) {
            throw new runtime.RequiredError('companyTypesCode','Required parameter requestParameters.companyTypesCode was null or undefined when calling putCompanyTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCompanyTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCompanyTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCompanyTypes.');
        }

        if (requestParameters.companyTypesToBeChanged === null || requestParameters.companyTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('companyTypesToBeChanged','Required parameter requestParameters.companyTypesToBeChanged was null or undefined when calling putCompanyTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/companyTypes/{companyTypesCode}`.replace(`{${"companyTypesCode"}}`, encodeURIComponent(String(requestParameters.companyTypesCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyTypesToBeChangedToJSON(requestParameters.companyTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Company Types. <p><strong>OperationId:</strong>putCompanyTypes</p>
     * Change Company Types
     */
    async putCompanyTypes(requestParameters: PutCompanyTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCompanyTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Competition Codes. <p><strong>OperationId:</strong>putCompetitionCodes</p>
     * Change Competition Codes
     */
    async putCompetitionCodesRaw(requestParameters: PutCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.competitionCodesId === null || requestParameters.competitionCodesId === undefined) {
            throw new runtime.RequiredError('competitionCodesId','Required parameter requestParameters.competitionCodesId was null or undefined when calling putCompetitionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCompetitionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCompetitionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCompetitionCodes.');
        }

        if (requestParameters.competitionCodesToBeChanged === null || requestParameters.competitionCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('competitionCodesToBeChanged','Required parameter requestParameters.competitionCodesToBeChanged was null or undefined when calling putCompetitionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/competitionCodes/{competitionCodesId}`.replace(`{${"competitionCodesId"}}`, encodeURIComponent(String(requestParameters.competitionCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompetitionCodesToBeChangedToJSON(requestParameters.competitionCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Competition Codes. <p><strong>OperationId:</strong>putCompetitionCodes</p>
     * Change Competition Codes
     */
    async putCompetitionCodes(requestParameters: PutCompetitionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCompetitionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Distance Types. <p><strong>OperationId:</strong>putDistanceTypes</p>
     * Change Distance Types
     */
    async putDistanceTypesRaw(requestParameters: PutDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.distanceTypesId === null || requestParameters.distanceTypesId === undefined) {
            throw new runtime.RequiredError('distanceTypesId','Required parameter requestParameters.distanceTypesId was null or undefined when calling putDistanceTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putDistanceTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putDistanceTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putDistanceTypes.');
        }

        if (requestParameters.distanceTypesToBeChanged === null || requestParameters.distanceTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('distanceTypesToBeChanged','Required parameter requestParameters.distanceTypesToBeChanged was null or undefined when calling putDistanceTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/distanceTypes/{distanceTypesId}`.replace(`{${"distanceTypesId"}}`, encodeURIComponent(String(requestParameters.distanceTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DistanceTypesToBeChangedToJSON(requestParameters.distanceTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Distance Types. <p><strong>OperationId:</strong>putDistanceTypes</p>
     * Change Distance Types
     */
    async putDistanceTypes(requestParameters: PutDistanceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDistanceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Districts. <p><strong>OperationId:</strong>putDistricts</p>
     * Change Districts
     */
    async putDistrictsRaw(requestParameters: PutDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.districtsId === null || requestParameters.districtsId === undefined) {
            throw new runtime.RequiredError('districtsId','Required parameter requestParameters.districtsId was null or undefined when calling putDistricts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putDistricts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putDistricts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putDistricts.');
        }

        if (requestParameters.districtsToBeChanged === null || requestParameters.districtsToBeChanged === undefined) {
            throw new runtime.RequiredError('districtsToBeChanged','Required parameter requestParameters.districtsToBeChanged was null or undefined when calling putDistricts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/districts/{districtsId}`.replace(`{${"districtsId"}}`, encodeURIComponent(String(requestParameters.districtsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DistrictsToBeChangedToJSON(requestParameters.districtsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Districts. <p><strong>OperationId:</strong>putDistricts</p>
     * Change Districts
     */
    async putDistricts(requestParameters: PutDistrictsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDistrictsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Gender Type. <p><strong>OperationId:</strong>putGenderTypes</p>
     * Change Gender Types
     */
    async putGenderTypesRaw(requestParameters: PutGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenderTypesToChange>> {
        if (requestParameters.genderTypeId === null || requestParameters.genderTypeId === undefined) {
            throw new runtime.RequiredError('genderTypeId','Required parameter requestParameters.genderTypeId was null or undefined when calling putGenderTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putGenderTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putGenderTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putGenderTypes.');
        }

        if (requestParameters.genderTypesToChange === null || requestParameters.genderTypesToChange === undefined) {
            throw new runtime.RequiredError('genderTypesToChange','Required parameter requestParameters.genderTypesToChange was null or undefined when calling putGenderTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/genderTypes/{genderTypeId}`.replace(`{${"genderTypeId"}}`, encodeURIComponent(String(requestParameters.genderTypeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GenderTypesToChangeToJSON(requestParameters.genderTypesToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenderTypesToChangeFromJSON(jsonValue));
    }

    /**
     * Use this API to update Gender Type. <p><strong>OperationId:</strong>putGenderTypes</p>
     * Change Gender Types
     */
    async putGenderTypes(requestParameters: PutGenderTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenderTypesToChange> {
        const response = await this.putGenderTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Guest Titles. <p><strong>OperationId:</strong>putGuestTitles</p>
     * Change Guest Titles
     */
    async putGuestTitlesRaw(requestParameters: PutGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestTitlesCode === null || requestParameters.guestTitlesCode === undefined) {
            throw new runtime.RequiredError('guestTitlesCode','Required parameter requestParameters.guestTitlesCode was null or undefined when calling putGuestTitles.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putGuestTitles.');
        }

        if (requestParameters.guestTitlesToBeChanged === null || requestParameters.guestTitlesToBeChanged === undefined) {
            throw new runtime.RequiredError('guestTitlesToBeChanged','Required parameter requestParameters.guestTitlesToBeChanged was null or undefined when calling putGuestTitles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTitles/{guestTitlesCode}`.replace(`{${"guestTitlesCode"}}`, encodeURIComponent(String(requestParameters.guestTitlesCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuestTitlesToBeChangedToJSON(requestParameters.guestTitlesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Guest Titles. <p><strong>OperationId:</strong>putGuestTitles</p>
     * Change Guest Titles
     */
    async putGuestTitles(requestParameters: PutGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Identification Types. <p><strong>OperationId:</strong>putIdentificationTypes</p>
     * Change Identification Types
     */
    async putIdentificationTypesRaw(requestParameters: PutIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.identificationTypesId === null || requestParameters.identificationTypesId === undefined) {
            throw new runtime.RequiredError('identificationTypesId','Required parameter requestParameters.identificationTypesId was null or undefined when calling putIdentificationTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putIdentificationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putIdentificationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putIdentificationTypes.');
        }

        if (requestParameters.identificationTypesToBeChanged === null || requestParameters.identificationTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('identificationTypesToBeChanged','Required parameter requestParameters.identificationTypesToBeChanged was null or undefined when calling putIdentificationTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/identificationTypes/{identificationTypesId}`.replace(`{${"identificationTypesId"}}`, encodeURIComponent(String(requestParameters.identificationTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IdentificationTypesToBeChangedToJSON(requestParameters.identificationTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Identification Types. <p><strong>OperationId:</strong>putIdentificationTypes</p>
     * Change Identification Types
     */
    async putIdentificationTypes(requestParameters: PutIdentificationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putIdentificationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Industry Codes. <p><strong>OperationId:</strong>putIndustryCodes</p>
     * Change Industry Codes
     */
    async putIndustryCodesRaw(requestParameters: PutIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.industryCodesId === null || requestParameters.industryCodesId === undefined) {
            throw new runtime.RequiredError('industryCodesId','Required parameter requestParameters.industryCodesId was null or undefined when calling putIndustryCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putIndustryCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putIndustryCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putIndustryCodes.');
        }

        if (requestParameters.industryCodesToBeChanged === null || requestParameters.industryCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('industryCodesToBeChanged','Required parameter requestParameters.industryCodesToBeChanged was null or undefined when calling putIndustryCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/industryCodes/{industryCodesId}`.replace(`{${"industryCodesId"}}`, encodeURIComponent(String(requestParameters.industryCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IndustryCodesToBeChangedToJSON(requestParameters.industryCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Industry Codes. <p><strong>OperationId:</strong>putIndustryCodes</p>
     * Change Industry Codes
     */
    async putIndustryCodes(requestParameters: PutIndustryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putIndustryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Influence Codes. <p><strong>OperationId:</strong>putInfluenceCodes</p>
     * Change Influence Codes
     */
    async putInfluenceCodesRaw(requestParameters: PutInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.influenceCodesId === null || requestParameters.influenceCodesId === undefined) {
            throw new runtime.RequiredError('influenceCodesId','Required parameter requestParameters.influenceCodesId was null or undefined when calling putInfluenceCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putInfluenceCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putInfluenceCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putInfluenceCodes.');
        }

        if (requestParameters.influenceCodesToBeChanged === null || requestParameters.influenceCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('influenceCodesToBeChanged','Required parameter requestParameters.influenceCodesToBeChanged was null or undefined when calling putInfluenceCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/influenceCodes/{influenceCodesId}`.replace(`{${"influenceCodesId"}}`, encodeURIComponent(String(requestParameters.influenceCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InfluenceCodesToBeChangedToJSON(requestParameters.influenceCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Influence Codes. <p><strong>OperationId:</strong>putInfluenceCodes</p>
     * Change Influence Codes
     */
    async putInfluenceCodes(requestParameters: PutInfluenceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putInfluenceCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Keyword Types. <p><strong>OperationId:</strong>putKeywordTypes</p>
     * Change Keyword Types
     */
    async putKeywordTypesRaw(requestParameters: PutKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.keywordTypesId === null || requestParameters.keywordTypesId === undefined) {
            throw new runtime.RequiredError('keywordTypesId','Required parameter requestParameters.keywordTypesId was null or undefined when calling putKeywordTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putKeywordTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putKeywordTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putKeywordTypes.');
        }

        if (requestParameters.keywordTypesToBeChanged === null || requestParameters.keywordTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('keywordTypesToBeChanged','Required parameter requestParameters.keywordTypesToBeChanged was null or undefined when calling putKeywordTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/keywordTypes/{keywordTypesId}`.replace(`{${"keywordTypesId"}}`, encodeURIComponent(String(requestParameters.keywordTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: KeywordTypesToBeChangedToJSON(requestParameters.keywordTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Keyword Types. <p><strong>OperationId:</strong>putKeywordTypes</p>
     * Change Keyword Types
     */
    async putKeywordTypes(requestParameters: PutKeywordTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putKeywordTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Nationalities. <p><strong>OperationId:</strong>putNationalities</p>
     * Change Nationalities
     */
    async putNationalitiesRaw(requestParameters: PutNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.nationalitiesId === null || requestParameters.nationalitiesId === undefined) {
            throw new runtime.RequiredError('nationalitiesId','Required parameter requestParameters.nationalitiesId was null or undefined when calling putNationalities.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putNationalities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putNationalities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putNationalities.');
        }

        if (requestParameters.nationalitiesToBeChanged === null || requestParameters.nationalitiesToBeChanged === undefined) {
            throw new runtime.RequiredError('nationalitiesToBeChanged','Required parameter requestParameters.nationalitiesToBeChanged was null or undefined when calling putNationalities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/nationalities/{nationalitiesId}`.replace(`{${"nationalitiesId"}}`, encodeURIComponent(String(requestParameters.nationalitiesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NationalitiesToBeChangedToJSON(requestParameters.nationalitiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Nationalities. <p><strong>OperationId:</strong>putNationalities</p>
     * Change Nationalities
     */
    async putNationalities(requestParameters: PutNationalitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putNationalitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Pay Days. <p><strong>OperationId:</strong>putPayDays</p>
     * Change Pay Days
     */
    async putPayDaysRaw(requestParameters: PutPayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.payDaysId === null || requestParameters.payDaysId === undefined) {
            throw new runtime.RequiredError('payDaysId','Required parameter requestParameters.payDaysId was null or undefined when calling putPayDays.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putPayDays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putPayDays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putPayDays.');
        }

        if (requestParameters.payDaysToBeChanged === null || requestParameters.payDaysToBeChanged === undefined) {
            throw new runtime.RequiredError('payDaysToBeChanged','Required parameter requestParameters.payDaysToBeChanged was null or undefined when calling putPayDays.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/payDays/{payDaysId}`.replace(`{${"payDaysId"}}`, encodeURIComponent(String(requestParameters.payDaysId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PayDaysToBeChangedToJSON(requestParameters.payDaysToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Pay Days. <p><strong>OperationId:</strong>putPayDays</p>
     * Change Pay Days
     */
    async putPayDays(requestParameters: PutPayDaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPayDaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Profile Inactive Reasons. <p><strong>OperationId:</strong>putProfileInactiveReasons</p>
     * Change Profile Inactive Reasons
     */
    async putProfileInactiveReasonsRaw(requestParameters: PutProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileInactiveReasonsId === null || requestParameters.profileInactiveReasonsId === undefined) {
            throw new runtime.RequiredError('profileInactiveReasonsId','Required parameter requestParameters.profileInactiveReasonsId was null or undefined when calling putProfileInactiveReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putProfileInactiveReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putProfileInactiveReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putProfileInactiveReasons.');
        }

        if (requestParameters.profileInactiveReasonsToBeChanged === null || requestParameters.profileInactiveReasonsToBeChanged === undefined) {
            throw new runtime.RequiredError('profileInactiveReasonsToBeChanged','Required parameter requestParameters.profileInactiveReasonsToBeChanged was null or undefined when calling putProfileInactiveReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileInactiveReasons/{profileInactiveReasonsId}`.replace(`{${"profileInactiveReasonsId"}}`, encodeURIComponent(String(requestParameters.profileInactiveReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileInactiveReasonsToBeChangedToJSON(requestParameters.profileInactiveReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Profile Inactive Reasons. <p><strong>OperationId:</strong>putProfileInactiveReasons</p>
     * Change Profile Inactive Reasons
     */
    async putProfileInactiveReasons(requestParameters: PutProfileInactiveReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putProfileInactiveReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Profile Restriction Reasons. <p><strong>OperationId:</strong>putProfileRestrictionReasons</p>
     * Change Profile Restriction Reasons
     */
    async putProfileRestrictionReasonsRaw(requestParameters: PutProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.profileRestrictionReasonsId === null || requestParameters.profileRestrictionReasonsId === undefined) {
            throw new runtime.RequiredError('profileRestrictionReasonsId','Required parameter requestParameters.profileRestrictionReasonsId was null or undefined when calling putProfileRestrictionReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putProfileRestrictionReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putProfileRestrictionReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putProfileRestrictionReasons.');
        }

        if (requestParameters.profileRestrictionReasonsToBeChanged === null || requestParameters.profileRestrictionReasonsToBeChanged === undefined) {
            throw new runtime.RequiredError('profileRestrictionReasonsToBeChanged','Required parameter requestParameters.profileRestrictionReasonsToBeChanged was null or undefined when calling putProfileRestrictionReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profileRestrictionReasons/{profileRestrictionReasonsId}`.replace(`{${"profileRestrictionReasonsId"}}`, encodeURIComponent(String(requestParameters.profileRestrictionReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProfileRestrictionReasonsToBeChangedToJSON(requestParameters.profileRestrictionReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Profile Restriction Reasons. <p><strong>OperationId:</strong>putProfileRestrictionReasons</p>
     * Change Profile Restriction Reasons
     */
    async putProfileRestrictionReasons(requestParameters: PutProfileRestrictionReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putProfileRestrictionReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Sources. <p><strong>OperationId:</strong>putSources</p>
     * Change Sources
     */
    async putSourcesRaw(requestParameters: PutSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourcesId === null || requestParameters.sourcesId === undefined) {
            throw new runtime.RequiredError('sourcesId','Required parameter requestParameters.sourcesId was null or undefined when calling putSources.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putSources.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putSources.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putSources.');
        }

        if (requestParameters.sourcesToBeChanged === null || requestParameters.sourcesToBeChanged === undefined) {
            throw new runtime.RequiredError('sourcesToBeChanged','Required parameter requestParameters.sourcesToBeChanged was null or undefined when calling putSources.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/sources/{sourcesId}`.replace(`{${"sourcesId"}}`, encodeURIComponent(String(requestParameters.sourcesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SourcesToBeChangedToJSON(requestParameters.sourcesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Sources. <p><strong>OperationId:</strong>putSources</p>
     * Change Sources
     */
    async putSources(requestParameters: PutSourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putSourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Territories. <p><strong>OperationId:</strong>putTerritories</p>
     * Change Territories
     */
    async putTerritoriesRaw(requestParameters: PutTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.territoriesId === null || requestParameters.territoriesId === undefined) {
            throw new runtime.RequiredError('territoriesId','Required parameter requestParameters.territoriesId was null or undefined when calling putTerritories.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putTerritories.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putTerritories.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putTerritories.');
        }

        if (requestParameters.territoriesToBeChanged === null || requestParameters.territoriesToBeChanged === undefined) {
            throw new runtime.RequiredError('territoriesToBeChanged','Required parameter requestParameters.territoriesToBeChanged was null or undefined when calling putTerritories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/territories/{territoriesId}`.replace(`{${"territoriesId"}}`, encodeURIComponent(String(requestParameters.territoriesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TerritoriesToBeChangedToJSON(requestParameters.territoriesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Territories. <p><strong>OperationId:</strong>putTerritories</p>
     * Change Territories
     */
    async putTerritories(requestParameters: PutTerritoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTerritoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Titles. <p><strong>OperationId:</strong>putTitles</p>
     * Change Titles
     */
    async putTitlesRaw(requestParameters: PutTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.titlesId === null || requestParameters.titlesId === undefined) {
            throw new runtime.RequiredError('titlesId','Required parameter requestParameters.titlesId was null or undefined when calling putTitles.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putTitles.');
        }

        if (requestParameters.titlesToBeChanged === null || requestParameters.titlesToBeChanged === undefined) {
            throw new runtime.RequiredError('titlesToBeChanged','Required parameter requestParameters.titlesToBeChanged was null or undefined when calling putTitles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/titles/{titlesId}`.replace(`{${"titlesId"}}`, encodeURIComponent(String(requestParameters.titlesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TitlesToBeChangedToJSON(requestParameters.titlesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Titles. <p><strong>OperationId:</strong>putTitles</p>
     * Change Titles
     */
    async putTitles(requestParameters: PutTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update VIP Levels. <p><strong>OperationId:</strong>putVIPLevels</p>
     * Change VIP Levels
     */
    async putVIPLevelsRaw(requestParameters: PutVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.vipLevelsId === null || requestParameters.vipLevelsId === undefined) {
            throw new runtime.RequiredError('vipLevelsId','Required parameter requestParameters.vipLevelsId was null or undefined when calling putVIPLevels.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putVIPLevels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putVIPLevels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putVIPLevels.');
        }

        if (requestParameters.vIPLevelsToBeChanged === null || requestParameters.vIPLevelsToBeChanged === undefined) {
            throw new runtime.RequiredError('vIPLevelsToBeChanged','Required parameter requestParameters.vIPLevelsToBeChanged was null or undefined when calling putVIPLevels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/vipLevels/{vipLevelsId}`.replace(`{${"vipLevelsId"}}`, encodeURIComponent(String(requestParameters.vipLevelsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VIPLevelsToBeChangedToJSON(requestParameters.vIPLevelsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update VIP Levels. <p><strong>OperationId:</strong>putVIPLevels</p>
     * Change VIP Levels
     */
    async putVIPLevels(requestParameters: PutVIPLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putVIPLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Alternate Language Guest Titles. <p><strong>OperationId:</strong>removeAlternateLanguageGuestTitles</p>
     * Delete Alternate Language Guest Titles
     */
    async removeAlternateLanguageGuestTitlesRaw(requestParameters: RemoveAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestTitlesCode === null || requestParameters.guestTitlesCode === undefined) {
            throw new runtime.RequiredError('guestTitlesCode','Required parameter requestParameters.guestTitlesCode was null or undefined when calling removeAlternateLanguageGuestTitles.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeAlternateLanguageGuestTitles.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeAlternateLanguageGuestTitles.');
        }

        const queryParameters: any = {};

        if (requestParameters.languageCode) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        if (requestParameters.titleTypes) {
            queryParameters['titleTypes'] = requestParameters.titleTypes;
        }

        if (requestParameters.titleDescription) {
            queryParameters['titleDescription'] = requestParameters.titleDescription;
        }

        if (requestParameters.greeting) {
            queryParameters['greeting'] = requestParameters.greeting;
        }

        if (requestParameters.displayOrder) {
            queryParameters['displayOrder'] = requestParameters.displayOrder;
        }

        if (requestParameters.newTitleType) {
            queryParameters['newTitleType'] = requestParameters.newTitleType;
        }

        if (requestParameters.newLanguageCode) {
            queryParameters['newLanguageCode'] = requestParameters.newLanguageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alternateLanguages/{guestTitlesCode}`.replace(`{${"guestTitlesCode"}}`, encodeURIComponent(String(requestParameters.guestTitlesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Alternate Language Guest Titles. <p><strong>OperationId:</strong>removeAlternateLanguageGuestTitles</p>
     * Delete Alternate Language Guest Titles
     */
    async removeAlternateLanguageGuestTitles(requestParameters: RemoveAlternateLanguageGuestTitlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeAlternateLanguageGuestTitlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Business Segments. <p><strong>OperationId:</strong>removeBusinessSegments</p>
     * Delete Business Segments
     */
    async removeBusinessSegmentsRaw(requestParameters: RemoveBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.businessSegmentCode === null || requestParameters.businessSegmentCode === undefined) {
            throw new runtime.RequiredError('businessSegmentCode','Required parameter requestParameters.businessSegmentCode was null or undefined when calling removeBusinessSegments.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeBusinessSegments.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeBusinessSegments.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeBusinessSegments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/businessSegments/{businessSegmentCode}`.replace(`{${"businessSegmentCode"}}`, encodeURIComponent(String(requestParameters.businessSegmentCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Business Segments. <p><strong>OperationId:</strong>removeBusinessSegments</p>
     * Delete Business Segments
     */
    async removeBusinessSegments(requestParameters: RemoveBusinessSegmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeBusinessSegmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete City Postal Codes. <p><strong>OperationId:</strong>removeCityPostalCodes</p>
     * Delete City Postal Codes
     */
    async removeCityPostalCodesRaw(requestParameters: RemoveCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.postalCode === null || requestParameters.postalCode === undefined) {
            throw new runtime.RequiredError('postalCode','Required parameter requestParameters.postalCode was null or undefined when calling removeCityPostalCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeCityPostalCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeCityPostalCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeCityPostalCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cityPostalCodes/{postalCode}`.replace(`{${"postalCode"}}`, encodeURIComponent(String(requestParameters.postalCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete City Postal Codes. <p><strong>OperationId:</strong>removeCityPostalCodes</p>
     * Delete City Postal Codes
     */
    async removeCityPostalCodes(requestParameters: RemoveCityPostalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCityPostalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Ecertificate Location Types. <p><strong>OperationId:</strong>removeEcertificateLocationTypes</p>
     * Delete Ecertificate Location Types
     */
    async removeEcertificateLocationTypesRaw(requestParameters: RemoveEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locationId === null || requestParameters.locationId === undefined) {
            throw new runtime.RequiredError('locationId','Required parameter requestParameters.locationId was null or undefined when calling removeEcertificateLocationTypes.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeEcertificateLocationTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeEcertificateLocationTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeEcertificateLocationTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeEcertificateLocationTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eCertificateLocationTypes/{locationId}`.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters.locationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Ecertificate Location Types. <p><strong>OperationId:</strong>removeEcertificateLocationTypes</p>
     * Delete Ecertificate Location Types
     */
    async removeEcertificateLocationTypes(requestParameters: RemoveEcertificateLocationTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeEcertificateLocationTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Guest Statuses. <p><strong>OperationId:</strong>removeGuestStatuses</p>
     * Delete Guest Statuses
     */
    async removeGuestStatusesRaw(requestParameters: RemoveGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestStatusCode === null || requestParameters.guestStatusCode === undefined) {
            throw new runtime.RequiredError('guestStatusCode','Required parameter requestParameters.guestStatusCode was null or undefined when calling removeGuestStatuses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeGuestStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeGuestStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeGuestStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestStatuses/{guestStatusCode}`.replace(`{${"guestStatusCode"}}`, encodeURIComponent(String(requestParameters.guestStatusCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Guest Statuses. <p><strong>OperationId:</strong>removeGuestStatuses</p>
     * Delete Guest Statuses
     */
    async removeGuestStatuses(requestParameters: RemoveGuestStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeGuestStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Guest Types. <p><strong>OperationId:</strong>removeGuestTypes</p>
     * Delete Guest Types
     */
    async removeGuestTypesRaw(requestParameters: RemoveGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestTypeCode === null || requestParameters.guestTypeCode === undefined) {
            throw new runtime.RequiredError('guestTypeCode','Required parameter requestParameters.guestTypeCode was null or undefined when calling removeGuestTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeGuestTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeGuestTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeGuestTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestTypes/{guestTypeCode}`.replace(`{${"guestTypeCode"}}`, encodeURIComponent(String(requestParameters.guestTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Guest Types. <p><strong>OperationId:</strong>removeGuestTypes</p>
     * Delete Guest Types
     */
    async removeGuestTypes(requestParameters: RemoveGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Immigration Statuses. <p><strong>OperationId:</strong>removeImmigrationStatuses</p>
     * Delete Immigration Statuses
     */
    async removeImmigrationStatusesRaw(requestParameters: RemoveImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.immigrationStatusCode === null || requestParameters.immigrationStatusCode === undefined) {
            throw new runtime.RequiredError('immigrationStatusCode','Required parameter requestParameters.immigrationStatusCode was null or undefined when calling removeImmigrationStatuses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeImmigrationStatuses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeImmigrationStatuses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeImmigrationStatuses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/immigrationStatuses/{immigrationStatusCode}`.replace(`{${"immigrationStatusCode"}}`, encodeURIComponent(String(requestParameters.immigrationStatusCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Immigration Statuses. <p><strong>OperationId:</strong>removeImmigrationStatuses</p>
     * Delete Immigration Statuses
     */
    async removeImmigrationStatuses(requestParameters: RemoveImmigrationStatusesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeImmigrationStatusesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Mailing Action Codes. <p><strong>OperationId:</strong>removeMailingActionCodes</p>
     * Delete Mailing Action Codes
     */
    async removeMailingActionCodesRaw(requestParameters: RemoveMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.mailingActionCode === null || requestParameters.mailingActionCode === undefined) {
            throw new runtime.RequiredError('mailingActionCode','Required parameter requestParameters.mailingActionCode was null or undefined when calling removeMailingActionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeMailingActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeMailingActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeMailingActionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/mailingActionCodes/{mailingActionCode}`.replace(`{${"mailingActionCode"}}`, encodeURIComponent(String(requestParameters.mailingActionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Mailing Action Codes. <p><strong>OperationId:</strong>removeMailingActionCodes</p>
     * Delete Mailing Action Codes
     */
    async removeMailingActionCodes(requestParameters: RemoveMailingActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMailingActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Membership Claim Origins. <p><strong>OperationId:</strong>removeMembershipClaimOrigins</p>
     * Delete Membership Claim Origins
     */
    async removeMembershipClaimOriginsRaw(requestParameters: RemoveMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipClaimOriginCode === null || requestParameters.membershipClaimOriginCode === undefined) {
            throw new runtime.RequiredError('membershipClaimOriginCode','Required parameter requestParameters.membershipClaimOriginCode was null or undefined when calling removeMembershipClaimOrigins.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeMembershipClaimOrigins.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeMembershipClaimOrigins.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeMembershipClaimOrigins.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimOrigins/{membershipClaimOriginCode}`.replace(`{${"membershipClaimOriginCode"}}`, encodeURIComponent(String(requestParameters.membershipClaimOriginCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Membership Claim Origins. <p><strong>OperationId:</strong>removeMembershipClaimOrigins</p>
     * Delete Membership Claim Origins
     */
    async removeMembershipClaimOrigins(requestParameters: RemoveMembershipClaimOriginsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMembershipClaimOriginsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Membership Claim Types. <p><strong>OperationId:</strong>removeMembershipClaimTypes</p>
     * Delete Membership Claim Types
     */
    async removeMembershipClaimTypesRaw(requestParameters: RemoveMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipClaimTypeCode === null || requestParameters.membershipClaimTypeCode === undefined) {
            throw new runtime.RequiredError('membershipClaimTypeCode','Required parameter requestParameters.membershipClaimTypeCode was null or undefined when calling removeMembershipClaimTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeMembershipClaimTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeMembershipClaimTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeMembershipClaimTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipClaimTypes/{membershipClaimTypeCode}`.replace(`{${"membershipClaimTypeCode"}}`, encodeURIComponent(String(requestParameters.membershipClaimTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Membership Claim Types. <p><strong>OperationId:</strong>removeMembershipClaimTypes</p>
     * Delete Membership Claim Types
     */
    async removeMembershipClaimTypes(requestParameters: RemoveMembershipClaimTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMembershipClaimTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Membership Enrollment Codes. <p><strong>OperationId:</strong>removeMembershipEnrollmentCodes</p>
     * Delete Membership Enrollment Codes
     */
    async removeMembershipEnrollmentCodesRaw(requestParameters: RemoveMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.enrollmentCode === null || requestParameters.enrollmentCode === undefined) {
            throw new runtime.RequiredError('enrollmentCode','Required parameter requestParameters.enrollmentCode was null or undefined when calling removeMembershipEnrollmentCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeMembershipEnrollmentCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeMembershipEnrollmentCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeMembershipEnrollmentCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipEnrollmentCodes/{enrollmentCode}`.replace(`{${"enrollmentCode"}}`, encodeURIComponent(String(requestParameters.enrollmentCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Membership Enrollment Codes. <p><strong>OperationId:</strong>removeMembershipEnrollmentCodes</p>
     * Delete Membership Enrollment Codes
     */
    async removeMembershipEnrollmentCodes(requestParameters: RemoveMembershipEnrollmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMembershipEnrollmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Membership Status Codes. <p><strong>OperationId:</strong>removeMembershipStatusCodes</p>
     * Delete Membership Status Codes
     */
    async removeMembershipStatusCodesRaw(requestParameters: RemoveMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipStatusCode === null || requestParameters.membershipStatusCode === undefined) {
            throw new runtime.RequiredError('membershipStatusCode','Required parameter requestParameters.membershipStatusCode was null or undefined when calling removeMembershipStatusCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeMembershipStatusCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeMembershipStatusCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeMembershipStatusCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/membershipStatusCodes/{membershipStatusCode}`.replace(`{${"membershipStatusCode"}}`, encodeURIComponent(String(requestParameters.membershipStatusCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Membership Status Codes. <p><strong>OperationId:</strong>removeMembershipStatusCodes</p>
     * Delete Membership Status Codes
     */
    async removeMembershipStatusCodes(requestParameters: RemoveMembershipStatusCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMembershipStatusCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Owner Teams. <p><strong>OperationId:</strong>removeOwnerTeams</p>
     * Delete Owner Teams
     */
    async removeOwnerTeamsRaw(requestParameters: RemoveOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ownerTeamCode === null || requestParameters.ownerTeamCode === undefined) {
            throw new runtime.RequiredError('ownerTeamCode','Required parameter requestParameters.ownerTeamCode was null or undefined when calling removeOwnerTeams.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeOwnerTeams.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeOwnerTeams.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeOwnerTeams.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ownerTeams/{ownerTeamCode}`.replace(`{${"ownerTeamCode"}}`, encodeURIComponent(String(requestParameters.ownerTeamCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Owner Teams. <p><strong>OperationId:</strong>removeOwnerTeams</p>
     * Delete Owner Teams
     */
    async removeOwnerTeams(requestParameters: RemoveOwnerTeamsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeOwnerTeamsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Travel Agent Types. <p><strong>OperationId:</strong>removeTravelAgentTypes</p>
     * Delete Travel Agent Types
     */
    async removeTravelAgentTypesRaw(requestParameters: RemoveTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fiscalAgentTypeCode === null || requestParameters.fiscalAgentTypeCode === undefined) {
            throw new runtime.RequiredError('fiscalAgentTypeCode','Required parameter requestParameters.fiscalAgentTypeCode was null or undefined when calling removeTravelAgentTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeTravelAgentTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeTravelAgentTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeTravelAgentTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalAgentTypes/{fiscalAgentTypeCode}`.replace(`{${"fiscalAgentTypeCode"}}`, encodeURIComponent(String(requestParameters.fiscalAgentTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Travel Agent Types. <p><strong>OperationId:</strong>removeTravelAgentTypes</p>
     * Delete Travel Agent Types
     */
    async removeTravelAgentTypes(requestParameters: RemoveTravelAgentTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTravelAgentTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
