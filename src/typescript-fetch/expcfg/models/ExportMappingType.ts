/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportMappingConfigType } from './ExportMappingConfigType';
import {
    ExportMappingConfigTypeFromJSON,
    ExportMappingConfigTypeFromJSONTyped,
    ExportMappingConfigTypeToJSON,
} from './ExportMappingConfigType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details of one export.
 * @export
 * @interface ExportMappingType
 */
export interface ExportMappingType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ExportMappingType
     */
    exportMappingId?: UniqueIDType;
    /**
     * 
     * @type {ExportMappingConfigType}
     * @memberof ExportMappingType
     */
    configType?: ExportMappingConfigType;
    /**
     * Code for the export mapping type.
     * @type {string}
     * @memberof ExportMappingType
     */
    mappingType?: string;
    /**
     * Specify whether the mapping type has default value.
     * @type {boolean}
     * @memberof ExportMappingType
     */
    hasDefaultValue?: boolean;
    /**
     * Description of the export mapping type.
     * @type {string}
     * @memberof ExportMappingType
     */
    description?: string;
}

/**
 * Check if a given object implements the ExportMappingType interface.
 */
export function instanceOfExportMappingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportMappingTypeFromJSON(json: any): ExportMappingType {
    return ExportMappingTypeFromJSONTyped(json, false);
}

export function ExportMappingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportMappingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exportMappingId': !exists(json, 'exportMappingId') ? undefined : UniqueIDTypeFromJSON(json['exportMappingId']),
        'configType': !exists(json, 'configType') ? undefined : ExportMappingConfigTypeFromJSON(json['configType']),
        'mappingType': !exists(json, 'mappingType') ? undefined : json['mappingType'],
        'hasDefaultValue': !exists(json, 'hasDefaultValue') ? undefined : json['hasDefaultValue'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function ExportMappingTypeToJSON(value?: ExportMappingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exportMappingId': UniqueIDTypeToJSON(value.exportMappingId),
        'configType': ExportMappingConfigTypeToJSON(value.configType),
        'mappingType': value.mappingType,
        'hasDefaultValue': value.hasDefaultValue,
        'description': value.description,
    };
}

