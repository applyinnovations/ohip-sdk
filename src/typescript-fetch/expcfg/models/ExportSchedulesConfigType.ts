/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportScheduleType } from './ExportScheduleType';
import {
    ExportScheduleTypeFromJSON,
    ExportScheduleTypeFromJSONTyped,
    ExportScheduleTypeToJSON,
} from './ExportScheduleType';

/**
 * Export schedules information that are required to configure schedules
 * @export
 * @interface ExportSchedulesConfigType
 */
export interface ExportSchedulesConfigType {
    /**
     * Export Schedule
     * @type {Array<ExportScheduleType>}
     * @memberof ExportSchedulesConfigType
     */
    exportSchedules?: Array<ExportScheduleType>;
    /**
     * Time zone hour and minute specified in the format TZH:TZM example:-05:00
     * @type {string}
     * @memberof ExportSchedulesConfigType
     */
    timeZone?: string;
}

/**
 * Check if a given object implements the ExportSchedulesConfigType interface.
 */
export function instanceOfExportSchedulesConfigType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportSchedulesConfigTypeFromJSON(json: any): ExportSchedulesConfigType {
    return ExportSchedulesConfigTypeFromJSONTyped(json, false);
}

export function ExportSchedulesConfigTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportSchedulesConfigType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exportSchedules': !exists(json, 'exportSchedules') ? undefined : ((json['exportSchedules'] as Array<any>).map(ExportScheduleTypeFromJSON)),
        'timeZone': !exists(json, 'timeZone') ? undefined : json['timeZone'],
    };
}

export function ExportSchedulesConfigTypeToJSON(value?: ExportSchedulesConfigType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exportSchedules': value.exportSchedules === undefined ? undefined : ((value.exportSchedules as Array<any>).map(ExportScheduleTypeToJSON)),
        'timeZone': value.timeZone,
    };
}

