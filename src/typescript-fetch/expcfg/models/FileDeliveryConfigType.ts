/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FileDeliveryCommunicationType } from './FileDeliveryCommunicationType';
import {
    FileDeliveryCommunicationTypeFromJSON,
    FileDeliveryCommunicationTypeFromJSONTyped,
    FileDeliveryCommunicationTypeToJSON,
} from './FileDeliveryCommunicationType';

/**
 * 
 * @export
 * @interface FileDeliveryConfigType
 */
export interface FileDeliveryConfigType {
    /**
     * 
     * @type {FileDeliveryCommunicationType}
     * @memberof FileDeliveryConfigType
     */
    communicationType?: FileDeliveryCommunicationType;
    /**
     * Whether to compress the file before delivery.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    compressFile?: boolean;
    /**
     * Status of the last delivery.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    deliveryStatus?: string;
    /**
     * Time of day at which the file will be attempted to deliver, if desired.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    deliveryTime?: string;
    /**
     * Directory to which the file is delivered while using FTP or FILE_SYSTEM.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    directory?: string;
    /**
     * Whether to create a temporary file and move it to actual file once entire data is written to the file (to prevent consumers from reading incomplete files).
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    enableSafeCreate?: boolean;
    /**
     * Host address for FTP or URL for HTTP.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    hostURL?: string;
    /**
     * Password to authenticate while connecting through FTP or HTTP.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    password?: string;
    /**
     * Number of delivery attempts to be made each day, in case of failures.
     * @type {number}
     * @memberof FileDeliveryConfigType
     */
    retryCount?: number;
    /**
     * Number of seconds to wait between delivery attempts in case of failures.
     * @type {number}
     * @memberof FileDeliveryConfigType
     */
    retryInterval?: number;
    /**
     * For SOAP version 1.1, value of SOAPAction to be passed.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    sOAPAction?: string;
    /**
     * Version of SOAP protocol to use.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    sOAPVersion?: string;
    /**
     * In safe create mode, original directory where the file should be created.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    tempDirectory?: string;
    /**
     * Whether to transfer the file in ASCII or binary mode.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    useAsciiTransfer?: boolean;
    /**
     * Whether to deliver the file using SOAP protocol.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    useSOAPProtocol?: boolean;
    /**
     * User id to authenticate while connecting through FTP or HTTP.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    userId?: string;
    /**
     * Indicates if the authentication information in this configuration is valid.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    validAuthentication?: boolean;
    /**
     * Date and time when the last validation of connection information was performed.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    validUpdateDate?: string;
}

/**
 * Check if a given object implements the FileDeliveryConfigType interface.
 */
export function instanceOfFileDeliveryConfigType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FileDeliveryConfigTypeFromJSON(json: any): FileDeliveryConfigType {
    return FileDeliveryConfigTypeFromJSONTyped(json, false);
}

export function FileDeliveryConfigTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileDeliveryConfigType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'communicationType': !exists(json, 'communicationType') ? undefined : FileDeliveryCommunicationTypeFromJSON(json['communicationType']),
        'compressFile': !exists(json, 'compressFile') ? undefined : json['compressFile'],
        'deliveryStatus': !exists(json, 'deliveryStatus') ? undefined : json['deliveryStatus'],
        'deliveryTime': !exists(json, 'deliveryTime') ? undefined : json['deliveryTime'],
        'directory': !exists(json, 'directory') ? undefined : json['directory'],
        'enableSafeCreate': !exists(json, 'enableSafeCreate') ? undefined : json['enableSafeCreate'],
        'hostURL': !exists(json, 'hostURL') ? undefined : json['hostURL'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'retryCount': !exists(json, 'retryCount') ? undefined : json['retryCount'],
        'retryInterval': !exists(json, 'retryInterval') ? undefined : json['retryInterval'],
        'sOAPAction': !exists(json, 'sOAPAction') ? undefined : json['sOAPAction'],
        'sOAPVersion': !exists(json, 'sOAPVersion') ? undefined : json['sOAPVersion'],
        'tempDirectory': !exists(json, 'tempDirectory') ? undefined : json['tempDirectory'],
        'useAsciiTransfer': !exists(json, 'useAsciiTransfer') ? undefined : json['useAsciiTransfer'],
        'useSOAPProtocol': !exists(json, 'useSOAPProtocol') ? undefined : json['useSOAPProtocol'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'validAuthentication': !exists(json, 'validAuthentication') ? undefined : json['validAuthentication'],
        'validUpdateDate': !exists(json, 'validUpdateDate') ? undefined : json['validUpdateDate'],
    };
}

export function FileDeliveryConfigTypeToJSON(value?: FileDeliveryConfigType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'communicationType': FileDeliveryCommunicationTypeToJSON(value.communicationType),
        'compressFile': value.compressFile,
        'deliveryStatus': value.deliveryStatus,
        'deliveryTime': value.deliveryTime,
        'directory': value.directory,
        'enableSafeCreate': value.enableSafeCreate,
        'hostURL': value.hostURL,
        'password': value.password,
        'retryCount': value.retryCount,
        'retryInterval': value.retryInterval,
        'sOAPAction': value.sOAPAction,
        'sOAPVersion': value.sOAPVersion,
        'tempDirectory': value.tempDirectory,
        'useAsciiTransfer': value.useAsciiTransfer,
        'useSOAPProtocol': value.useSOAPProtocol,
        'userId': value.userId,
        'validAuthentication': value.validAuthentication,
        'validUpdateDate': value.validUpdateDate,
    };
}

