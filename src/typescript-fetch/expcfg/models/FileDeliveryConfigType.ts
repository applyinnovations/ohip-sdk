/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FileDeliveryCommunicationType } from './FileDeliveryCommunicationType';
import {
    FileDeliveryCommunicationTypeFromJSON,
    FileDeliveryCommunicationTypeFromJSONTyped,
    FileDeliveryCommunicationTypeToJSON,
} from './FileDeliveryCommunicationType';

/**
 * 
 * @export
 * @interface FileDeliveryConfigType
 */
export interface FileDeliveryConfigType {
    /**
     * 
     * @type {FileDeliveryCommunicationType}
     * @memberof FileDeliveryConfigType
     */
    communicationType?: FileDeliveryCommunicationType;
    /**
     * Host address for FTP or URL for HTTP.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    hostURL?: string;
    /**
     * User id to authenticate while connecting through FTP or HTTP.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    userId?: string;
    /**
     * Password to authenticate while connecting through FTP or HTTP.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    password?: string;
    /**
     * Directory to which the file is delivered while using FTP or FILE_SYSTEM.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    directory?: string;
    /**
     * Whether to create a temporary file and move it to actual file once entire data is written to the file (to prevent consumers from reading incomplete files).
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    enableSafeCreate?: boolean;
    /**
     * In safe create mode, original directory where the file should be created.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    tempDirectory?: string;
    /**
     * Whether to transfer the file in ASCII or binary mode.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    useAsciiTransfer?: boolean;
    /**
     * Whether to compress the file before delivery.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    compressFile?: boolean;
    /**
     * Whether to deliver the file using SOAP protocol.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    useSOAPProtocol?: boolean;
    /**
     * Version of SOAP protocol to use.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    sOAPVersion?: string;
    /**
     * For SOAP version 1.1, value of SOAPAction to be passed.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    sOAPAction?: string;
    /**
     * Number of delivery attempts to be made each day, in case of failures.
     * @type {number}
     * @memberof FileDeliveryConfigType
     */
    retryCount?: number;
    /**
     * Number of seconds to wait between delivery attempts in case of failures.
     * @type {number}
     * @memberof FileDeliveryConfigType
     */
    retryInterval?: number;
    /**
     * Time of day at which the file will be attempted to deliver, if desired.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    deliveryTime?: string;
    /**
     * Status of the last delivery.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    deliveryStatus?: string;
    /**
     * Indicates if the authentication information in this configuration is valid.
     * @type {boolean}
     * @memberof FileDeliveryConfigType
     */
    validAuthentication?: boolean;
    /**
     * Date and time when the last validation of connection information was performed.
     * @type {string}
     * @memberof FileDeliveryConfigType
     */
    validUpdateDate?: string;
}

/**
 * Check if a given object implements the FileDeliveryConfigType interface.
 */
export function instanceOfFileDeliveryConfigType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FileDeliveryConfigTypeFromJSON(json: any): FileDeliveryConfigType {
    return FileDeliveryConfigTypeFromJSONTyped(json, false);
}

export function FileDeliveryConfigTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileDeliveryConfigType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'communicationType': !exists(json, 'communicationType') ? undefined : FileDeliveryCommunicationTypeFromJSON(json['communicationType']),
        'hostURL': !exists(json, 'hostURL') ? undefined : json['hostURL'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'directory': !exists(json, 'directory') ? undefined : json['directory'],
        'enableSafeCreate': !exists(json, 'enableSafeCreate') ? undefined : json['enableSafeCreate'],
        'tempDirectory': !exists(json, 'tempDirectory') ? undefined : json['tempDirectory'],
        'useAsciiTransfer': !exists(json, 'useAsciiTransfer') ? undefined : json['useAsciiTransfer'],
        'compressFile': !exists(json, 'compressFile') ? undefined : json['compressFile'],
        'useSOAPProtocol': !exists(json, 'useSOAPProtocol') ? undefined : json['useSOAPProtocol'],
        'sOAPVersion': !exists(json, 'sOAPVersion') ? undefined : json['sOAPVersion'],
        'sOAPAction': !exists(json, 'sOAPAction') ? undefined : json['sOAPAction'],
        'retryCount': !exists(json, 'retryCount') ? undefined : json['retryCount'],
        'retryInterval': !exists(json, 'retryInterval') ? undefined : json['retryInterval'],
        'deliveryTime': !exists(json, 'deliveryTime') ? undefined : json['deliveryTime'],
        'deliveryStatus': !exists(json, 'deliveryStatus') ? undefined : json['deliveryStatus'],
        'validAuthentication': !exists(json, 'validAuthentication') ? undefined : json['validAuthentication'],
        'validUpdateDate': !exists(json, 'validUpdateDate') ? undefined : json['validUpdateDate'],
    };
}

export function FileDeliveryConfigTypeToJSON(value?: FileDeliveryConfigType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'communicationType': FileDeliveryCommunicationTypeToJSON(value.communicationType),
        'hostURL': value.hostURL,
        'userId': value.userId,
        'password': value.password,
        'directory': value.directory,
        'enableSafeCreate': value.enableSafeCreate,
        'tempDirectory': value.tempDirectory,
        'useAsciiTransfer': value.useAsciiTransfer,
        'compressFile': value.compressFile,
        'useSOAPProtocol': value.useSOAPProtocol,
        'sOAPVersion': value.sOAPVersion,
        'sOAPAction': value.sOAPAction,
        'retryCount': value.retryCount,
        'retryInterval': value.retryInterval,
        'deliveryTime': value.deliveryTime,
        'deliveryStatus': value.deliveryStatus,
        'validAuthentication': value.validAuthentication,
        'validUpdateDate': value.validUpdateDate,
    };
}

