/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportHeaderSummaryType } from './ExportHeaderSummaryType';
import {
    ExportHeaderSummaryTypeFromJSON,
    ExportHeaderSummaryTypeFromJSONTyped,
    ExportHeaderSummaryTypeToJSON,
} from './ExportHeaderSummaryType';
import type { GeneratedExportStatusType } from './GeneratedExportStatusType';
import {
    GeneratedExportStatusTypeFromJSON,
    GeneratedExportStatusTypeFromJSONTyped,
    GeneratedExportStatusTypeToJSON,
} from './GeneratedExportStatusType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information of one generated export.
 * @export
 * @interface GeneratedExportType
 */
export interface GeneratedExportType {
    /**
     * 
     * @type {ExportHeaderSummaryType}
     * @memberof GeneratedExportType
     */
    dataHeader?: ExportHeaderSummaryType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof GeneratedExportType
     */
    exportDataId?: UniqueIDType;
    /**
     * The date that the export was generated.
     * @type {string}
     * @memberof GeneratedExportType
     */
    generatedDate?: string;
    /**
     * The total number of records generated.
     * @type {number}
     * @memberof GeneratedExportType
     */
    totalRecords?: number;
    /**
     * A flag that shows whether the there is credit card information in the export. Certain restrictions apply when this is detected.
     * @type {boolean}
     * @memberof GeneratedExportType
     */
    hasCreditCardData?: boolean;
    /**
     * The generated file name.
     * @type {string}
     * @memberof GeneratedExportType
     */
    generatedFileName?: string;
    /**
     * The zip file name based on the formula used in the setup.
     * @type {string}
     * @memberof GeneratedExportType
     */
    zipFileName?: string;
    /**
     * The generated file extension.
     * @type {string}
     * @memberof GeneratedExportType
     */
    generatedFileExtension?: string;
    /**
     * The generated file location.
     * @type {string}
     * @memberof GeneratedExportType
     */
    generatedFileLocation?: string;
    /**
     * The generated file path.
     * @type {string}
     * @memberof GeneratedExportType
     */
    generatedFilePath?: string;
    /**
     * The beginning date for the export.
     * @type {string}
     * @memberof GeneratedExportType
     */
    dataFromDate?: string;
    /**
     * The ending date for the export.
     * @type {string}
     * @memberof GeneratedExportType
     */
    dataToDate?: string;
    /**
     * A flag that shows whether the checksum functionality is enabled.
     * @type {boolean}
     * @memberof GeneratedExportType
     */
    checksumEnabled?: boolean;
    /**
     * The errors generated during the export.
     * @type {string}
     * @memberof GeneratedExportType
     */
    generatedErrors?: string;
    /**
     * A flag to indicate if export file has to be uploaded automatically by IAS to HTTP site
     * @type {boolean}
     * @memberof GeneratedExportType
     */
    hTTPUpload?: boolean;
    /**
     * 
     * @type {GeneratedExportStatusType}
     * @memberof GeneratedExportType
     */
    status?: GeneratedExportStatusType;
    /**
     * A Flag that indicates whether job completed succesfully or not.
     * @type {boolean}
     * @memberof GeneratedExportType
     */
    jobCompleted?: boolean;
}

/**
 * Check if a given object implements the GeneratedExportType interface.
 */
export function instanceOfGeneratedExportType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GeneratedExportTypeFromJSON(json: any): GeneratedExportType {
    return GeneratedExportTypeFromJSONTyped(json, false);
}

export function GeneratedExportTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneratedExportType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dataHeader': !exists(json, 'dataHeader') ? undefined : ExportHeaderSummaryTypeFromJSON(json['dataHeader']),
        'exportDataId': !exists(json, 'exportDataId') ? undefined : UniqueIDTypeFromJSON(json['exportDataId']),
        'generatedDate': !exists(json, 'generatedDate') ? undefined : json['generatedDate'],
        'totalRecords': !exists(json, 'totalRecords') ? undefined : json['totalRecords'],
        'hasCreditCardData': !exists(json, 'hasCreditCardData') ? undefined : json['hasCreditCardData'],
        'generatedFileName': !exists(json, 'generatedFileName') ? undefined : json['generatedFileName'],
        'zipFileName': !exists(json, 'zipFileName') ? undefined : json['zipFileName'],
        'generatedFileExtension': !exists(json, 'generatedFileExtension') ? undefined : json['generatedFileExtension'],
        'generatedFileLocation': !exists(json, 'generatedFileLocation') ? undefined : json['generatedFileLocation'],
        'generatedFilePath': !exists(json, 'generatedFilePath') ? undefined : json['generatedFilePath'],
        'dataFromDate': !exists(json, 'dataFromDate') ? undefined : json['dataFromDate'],
        'dataToDate': !exists(json, 'dataToDate') ? undefined : json['dataToDate'],
        'checksumEnabled': !exists(json, 'checksumEnabled') ? undefined : json['checksumEnabled'],
        'generatedErrors': !exists(json, 'generatedErrors') ? undefined : json['generatedErrors'],
        'hTTPUpload': !exists(json, 'hTTPUpload') ? undefined : json['hTTPUpload'],
        'status': !exists(json, 'status') ? undefined : GeneratedExportStatusTypeFromJSON(json['status']),
        'jobCompleted': !exists(json, 'jobCompleted') ? undefined : json['jobCompleted'],
    };
}

export function GeneratedExportTypeToJSON(value?: GeneratedExportType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dataHeader': ExportHeaderSummaryTypeToJSON(value.dataHeader),
        'exportDataId': UniqueIDTypeToJSON(value.exportDataId),
        'generatedDate': value.generatedDate,
        'totalRecords': value.totalRecords,
        'hasCreditCardData': value.hasCreditCardData,
        'generatedFileName': value.generatedFileName,
        'zipFileName': value.zipFileName,
        'generatedFileExtension': value.generatedFileExtension,
        'generatedFileLocation': value.generatedFileLocation,
        'generatedFilePath': value.generatedFilePath,
        'dataFromDate': value.dataFromDate,
        'dataToDate': value.dataToDate,
        'checksumEnabled': value.checksumEnabled,
        'generatedErrors': value.generatedErrors,
        'hTTPUpload': value.hTTPUpload,
        'status': GeneratedExportStatusTypeToJSON(value.status),
        'jobCompleted': value.jobCompleted,
    };
}

