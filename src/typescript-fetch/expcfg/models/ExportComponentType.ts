/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details of a specific export component.
 * @export
 * @interface ExportComponentType
 */
export interface ExportComponentType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ExportComponentType
     */
    exportFileId?: UniqueIDType;
    /**
     * The file type of the export.
     * @type {string}
     * @memberof ExportComponentType
     */
    fileType?: string;
    /**
     * The description of the export.
     * @type {string}
     * @memberof ExportComponentType
     */
    description?: string;
    /**
     * The name of the parameter form used to collect runtime information.
     * @type {string}
     * @memberof ExportComponentType
     */
    parameterForm?: string;
    /**
     * Component export sequence
     * @type {number}
     * @memberof ExportComponentType
     */
    exportSequence?: number;
    /**
     * Indicates if the export has sensitive data
     * @type {boolean}
     * @memberof ExportComponentType
     */
    containsSensitiveData?: boolean;
}

/**
 * Check if a given object implements the ExportComponentType interface.
 */
export function instanceOfExportComponentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportComponentTypeFromJSON(json: any): ExportComponentType {
    return ExportComponentTypeFromJSONTyped(json, false);
}

export function ExportComponentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportComponentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exportFileId': !exists(json, 'exportFileId') ? undefined : UniqueIDTypeFromJSON(json['exportFileId']),
        'fileType': !exists(json, 'fileType') ? undefined : json['fileType'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'parameterForm': !exists(json, 'parameterForm') ? undefined : json['parameterForm'],
        'exportSequence': !exists(json, 'exportSequence') ? undefined : json['exportSequence'],
        'containsSensitiveData': !exists(json, 'containsSensitiveData') ? undefined : json['containsSensitiveData'],
    };
}

export function ExportComponentTypeToJSON(value?: ExportComponentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exportFileId': UniqueIDTypeToJSON(value.exportFileId),
        'fileType': value.fileType,
        'description': value.description,
        'parameterForm': value.parameterForm,
        'exportSequence': value.exportSequence,
        'containsSensitiveData': value.containsSensitiveData,
    };
}

