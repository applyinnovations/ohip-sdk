/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportMappingType } from './ExportMappingType';
import {
    ExportMappingTypeFromJSON,
    ExportMappingTypeFromJSONTyped,
    ExportMappingTypeToJSON,
} from './ExportMappingType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response to fetch the export definitions for a given export.
 * @export
 * @interface FetchExportMappings
 */
export interface FetchExportMappings {
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof FetchExportMappings
     */
    hotelId?: string;
    /**
     * The export file ID to delete definition.
     * @type {Array<ExportMappingType>}
     * @memberof FetchExportMappings
     */
    exportMappings?: Array<ExportMappingType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof FetchExportMappings
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof FetchExportMappings
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the FetchExportMappings interface.
 */
export function instanceOfFetchExportMappings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FetchExportMappingsFromJSON(json: any): FetchExportMappings {
    return FetchExportMappingsFromJSONTyped(json, false);
}

export function FetchExportMappingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchExportMappings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'exportMappings': !exists(json, 'exportMappings') ? undefined : ((json['exportMappings'] as Array<any>).map(ExportMappingTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function FetchExportMappingsToJSON(value?: FetchExportMappings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'exportMappings': value.exportMappings === undefined ? undefined : ((value.exportMappings as Array<any>).map(ExportMappingTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

