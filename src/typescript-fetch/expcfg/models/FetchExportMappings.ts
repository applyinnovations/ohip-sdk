/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportMappingType } from './ExportMappingType';
import {
    ExportMappingTypeFromJSON,
    ExportMappingTypeFromJSONTyped,
    ExportMappingTypeToJSON,
} from './ExportMappingType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response to fetch the export definitions for a given export.
 * @export
 * @interface FetchExportMappings
 */
export interface FetchExportMappings {
    /**
     * The export file ID to delete definition.
     * @type {Array<ExportMappingType>}
     * @memberof FetchExportMappings
     */
    exportMappings?: Array<ExportMappingType>;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof FetchExportMappings
     */
    hotelId?: string;
    /**
     * 
     * @type {Links}
     * @memberof FetchExportMappings
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof FetchExportMappings
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the FetchExportMappings interface.
 */
export function instanceOfFetchExportMappings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FetchExportMappingsFromJSON(json: any): FetchExportMappings {
    return FetchExportMappingsFromJSONTyped(json, false);
}

export function FetchExportMappingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FetchExportMappings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exportMappings': !exists(json, 'exportMappings') ? undefined : ((json['exportMappings'] as Array<any>).map(ExportMappingTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function FetchExportMappingsToJSON(value?: FetchExportMappings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exportMappings': value.exportMappings === undefined ? undefined : ((value.exportMappings as Array<any>).map(ExportMappingTypeToJSON)),
        'hotelId': value.hotelId,
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

