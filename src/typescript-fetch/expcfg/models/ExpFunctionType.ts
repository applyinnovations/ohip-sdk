/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExpFunctionParamType } from './ExpFunctionParamType';
import {
    ExpFunctionParamTypeFromJSON,
    ExpFunctionParamTypeFromJSONTyped,
    ExpFunctionParamTypeToJSON,
} from './ExpFunctionParamType';

/**
 * Information related to export function
 * @export
 * @interface ExpFunctionType
 */
export interface ExpFunctionType {
    /**
     * Name of the function
     * @type {string}
     * @memberof ExpFunctionType
     */
    functionName?: string;
    /**
     * Function parameters
     * @type {Array<ExpFunctionParamType>}
     * @memberof ExpFunctionType
     */
    functionParameter?: Array<ExpFunctionParamType>;
}

/**
 * Check if a given object implements the ExpFunctionType interface.
 */
export function instanceOfExpFunctionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExpFunctionTypeFromJSON(json: any): ExpFunctionType {
    return ExpFunctionTypeFromJSONTyped(json, false);
}

export function ExpFunctionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpFunctionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'functionName': !exists(json, 'functionName') ? undefined : json['functionName'],
        'functionParameter': !exists(json, 'functionParameter') ? undefined : ((json['functionParameter'] as Array<any>).map(ExpFunctionParamTypeFromJSON)),
    };
}

export function ExpFunctionTypeToJSON(value?: ExpFunctionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'functionName': value.functionName,
        'functionParameter': value.functionParameter === undefined ? undefined : ((value.functionParameter as Array<any>).map(ExpFunctionParamTypeToJSON)),
    };
}

