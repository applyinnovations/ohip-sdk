/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportType } from './ExportType';
import {
    ExportTypeFromJSON,
    ExportTypeFromJSONTyped,
    ExportTypeToJSON,
} from './ExportType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details of one export.
 * @export
 * @interface ExportHeaderSummaryType
 */
export interface ExportHeaderSummaryType {
    /**
     * Indicates if the export has sensitive data
     * @type {boolean}
     * @memberof ExportHeaderSummaryType
     */
    containsSensitiveData?: boolean;
    /**
     * The description of the export.
     * @type {string}
     * @memberof ExportHeaderSummaryType
     */
    description?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ExportHeaderSummaryType
     */
    exportFileId?: UniqueIDType;
    /**
     * Component export sequence
     * @type {number}
     * @memberof ExportHeaderSummaryType
     */
    exportSequence?: number;
    /**
     * 
     * @type {ExportType}
     * @memberof ExportHeaderSummaryType
     */
    exportType?: ExportType;
    /**
     * Indicates if the export is an XML file
     * @type {boolean}
     * @memberof ExportHeaderSummaryType
     */
    exportXml?: boolean;
    /**
     * The file type of the export.
     * @type {string}
     * @memberof ExportHeaderSummaryType
     */
    fileType?: string;
    /**
     * The hotel code for the export.
     * @type {string}
     * @memberof ExportHeaderSummaryType
     */
    hotelId?: string;
    /**
     * An indicator which show the active status of the export.
     * @type {boolean}
     * @memberof ExportHeaderSummaryType
     */
    inactive?: boolean;
    /**
     * Internal number to indicate the log level used when generating the export.
     * @type {number}
     * @memberof ExportHeaderSummaryType
     */
    logLevel?: number;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ExportHeaderSummaryType
     */
    masterExportId?: UniqueIDType;
    /**
     * The name of the parameter form used to collect runtime information.
     * @type {string}
     * @memberof ExportHeaderSummaryType
     */
    parameterForm?: string;
    /**
     * The description of the source file of the export.
     * @type {string}
     * @memberof ExportHeaderSummaryType
     */
    sourceDescription?: string;
}

/**
 * Check if a given object implements the ExportHeaderSummaryType interface.
 */
export function instanceOfExportHeaderSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportHeaderSummaryTypeFromJSON(json: any): ExportHeaderSummaryType {
    return ExportHeaderSummaryTypeFromJSONTyped(json, false);
}

export function ExportHeaderSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportHeaderSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'containsSensitiveData': !exists(json, 'containsSensitiveData') ? undefined : json['containsSensitiveData'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'exportFileId': !exists(json, 'exportFileId') ? undefined : UniqueIDTypeFromJSON(json['exportFileId']),
        'exportSequence': !exists(json, 'exportSequence') ? undefined : json['exportSequence'],
        'exportType': !exists(json, 'exportType') ? undefined : ExportTypeFromJSON(json['exportType']),
        'exportXml': !exists(json, 'exportXml') ? undefined : json['exportXml'],
        'fileType': !exists(json, 'fileType') ? undefined : json['fileType'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'logLevel': !exists(json, 'logLevel') ? undefined : json['logLevel'],
        'masterExportId': !exists(json, 'masterExportId') ? undefined : UniqueIDTypeFromJSON(json['masterExportId']),
        'parameterForm': !exists(json, 'parameterForm') ? undefined : json['parameterForm'],
        'sourceDescription': !exists(json, 'sourceDescription') ? undefined : json['sourceDescription'],
    };
}

export function ExportHeaderSummaryTypeToJSON(value?: ExportHeaderSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'containsSensitiveData': value.containsSensitiveData,
        'description': value.description,
        'exportFileId': UniqueIDTypeToJSON(value.exportFileId),
        'exportSequence': value.exportSequence,
        'exportType': ExportTypeToJSON(value.exportType),
        'exportXml': value.exportXml,
        'fileType': value.fileType,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'logLevel': value.logLevel,
        'masterExportId': UniqueIDTypeToJSON(value.masterExportId),
        'parameterForm': value.parameterForm,
        'sourceDescription': value.sourceDescription,
    };
}

