/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportColumnDetailType } from './ExportColumnDetailType';
import {
    ExportColumnDetailTypeFromJSON,
    ExportColumnDetailTypeFromJSONTyped,
    ExportColumnDetailTypeToJSON,
} from './ExportColumnDetailType';
import type { ExportComponentType } from './ExportComponentType';
import {
    ExportComponentTypeFromJSON,
    ExportComponentTypeFromJSONTyped,
    ExportComponentTypeToJSON,
} from './ExportComponentType';
import type { ExportDataSetupType } from './ExportDataSetupType';
import {
    ExportDataSetupTypeFromJSON,
    ExportDataSetupTypeFromJSONTyped,
    ExportDataSetupTypeToJSON,
} from './ExportDataSetupType';
import type { ExportDestinationType } from './ExportDestinationType';
import {
    ExportDestinationTypeFromJSON,
    ExportDestinationTypeFromJSONTyped,
    ExportDestinationTypeToJSON,
} from './ExportDestinationType';
import type { ExportGenerateConfigurationType } from './ExportGenerateConfigurationType';
import {
    ExportGenerateConfigurationTypeFromJSON,
    ExportGenerateConfigurationTypeFromJSONTyped,
    ExportGenerateConfigurationTypeToJSON,
} from './ExportGenerateConfigurationType';
import type { ExportHeaderSummaryType } from './ExportHeaderSummaryType';
import {
    ExportHeaderSummaryTypeFromJSON,
    ExportHeaderSummaryTypeFromJSONTyped,
    ExportHeaderSummaryTypeToJSON,
} from './ExportHeaderSummaryType';
import type { ExportXMLColumnsType } from './ExportXMLColumnsType';
import {
    ExportXMLColumnsTypeFromJSON,
    ExportXMLColumnsTypeFromJSONTyped,
    ExportXMLColumnsTypeToJSON,
} from './ExportXMLColumnsType';

/**
 * Type that hold configuration information related to export
 * @export
 * @interface ExportConfigurationType
 */
export interface ExportConfigurationType {
    /**
     * 
     * @type {ExportHeaderSummaryType}
     * @memberof ExportConfigurationType
     */
    summaryInfo?: ExportHeaderSummaryType;
    /**
     * 
     * @type {ExportDataSetupType}
     * @memberof ExportConfigurationType
     */
    dataSetup?: ExportDataSetupType;
    /**
     * 
     * @type {ExportGenerateConfigurationType}
     * @memberof ExportConfigurationType
     */
    generateConfigSetup?: ExportGenerateConfigurationType;
    /**
     * 
     * @type {ExportDestinationType}
     * @memberof ExportConfigurationType
     */
    destinationSetup?: ExportDestinationType;
    /**
     * A collection of export components.
     * @type {Array<ExportComponentType>}
     * @memberof ExportConfigurationType
     */
    components?: Array<ExportComponentType>;
    /**
     * A collection of export columns.
     * @type {Array<ExportColumnDetailType>}
     * @memberof ExportConfigurationType
     */
    columns?: Array<ExportColumnDetailType>;
    /**
     * 
     * @type {ExportXMLColumnsType}
     * @memberof ExportConfigurationType
     */
    xmlColumns?: ExportXMLColumnsType;
}

/**
 * Check if a given object implements the ExportConfigurationType interface.
 */
export function instanceOfExportConfigurationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportConfigurationTypeFromJSON(json: any): ExportConfigurationType {
    return ExportConfigurationTypeFromJSONTyped(json, false);
}

export function ExportConfigurationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportConfigurationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'summaryInfo': !exists(json, 'summaryInfo') ? undefined : ExportHeaderSummaryTypeFromJSON(json['summaryInfo']),
        'dataSetup': !exists(json, 'dataSetup') ? undefined : ExportDataSetupTypeFromJSON(json['dataSetup']),
        'generateConfigSetup': !exists(json, 'generateConfigSetup') ? undefined : ExportGenerateConfigurationTypeFromJSON(json['generateConfigSetup']),
        'destinationSetup': !exists(json, 'destinationSetup') ? undefined : ExportDestinationTypeFromJSON(json['destinationSetup']),
        'components': !exists(json, 'components') ? undefined : ((json['components'] as Array<any>).map(ExportComponentTypeFromJSON)),
        'columns': !exists(json, 'columns') ? undefined : ((json['columns'] as Array<any>).map(ExportColumnDetailTypeFromJSON)),
        'xmlColumns': !exists(json, 'xmlColumns') ? undefined : ExportXMLColumnsTypeFromJSON(json['xmlColumns']),
    };
}

export function ExportConfigurationTypeToJSON(value?: ExportConfigurationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'summaryInfo': ExportHeaderSummaryTypeToJSON(value.summaryInfo),
        'dataSetup': ExportDataSetupTypeToJSON(value.dataSetup),
        'generateConfigSetup': ExportGenerateConfigurationTypeToJSON(value.generateConfigSetup),
        'destinationSetup': ExportDestinationTypeToJSON(value.destinationSetup),
        'components': value.components === undefined ? undefined : ((value.components as Array<any>).map(ExportComponentTypeToJSON)),
        'columns': value.columns === undefined ? undefined : ((value.columns as Array<any>).map(ExportColumnDetailTypeToJSON)),
        'xmlColumns': ExportXMLColumnsTypeToJSON(value.xmlColumns),
    };
}

