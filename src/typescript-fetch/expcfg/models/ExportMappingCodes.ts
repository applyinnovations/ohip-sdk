/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportMappingCodeType } from './ExportMappingCodeType';
import {
    ExportMappingCodeTypeFromJSON,
    ExportMappingCodeTypeFromJSONTyped,
    ExportMappingCodeTypeToJSON,
} from './ExportMappingCodeType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request to create export mapping code for a given export.
 * @export
 * @interface ExportMappingCodes
 */
export interface ExportMappingCodes {
    /**
     * The details of the export mapping code being created.
     * @type {Array<ExportMappingCodeType>}
     * @memberof ExportMappingCodes
     */
    exportMappingCodes?: Array<ExportMappingCodeType>;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof ExportMappingCodes
     */
    hotelId?: string;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof ExportMappingCodes
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ExportMappingCodes
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ExportMappingCodes interface.
 */
export function instanceOfExportMappingCodes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportMappingCodesFromJSON(json: any): ExportMappingCodes {
    return ExportMappingCodesFromJSONTyped(json, false);
}

export function ExportMappingCodesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportMappingCodes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'exportMappingCodes': !exists(json, 'exportMappingCodes') ? undefined : ((json['exportMappingCodes'] as Array<any>).map(ExportMappingCodeTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ExportMappingCodesToJSON(value?: ExportMappingCodes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'exportMappingCodes': value.exportMappingCodes === undefined ? undefined : ((value.exportMappingCodes as Array<any>).map(ExportMappingCodeTypeToJSON)),
        'hotelId': value.hotelId,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

