/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Details of processing data for export being setup.
 * @export
 * @interface ExportDataSetupType
 */
export interface ExportDataSetupType {
    /**
     * The source view code.
     * @type {string}
     * @memberof ExportDataSetupType
     */
    dataSourceName?: string;
    /**
     * The code to execute prior to running the export in order to prepare the data.
     * @type {string}
     * @memberof ExportDataSetupType
     */
    preExportProcedure?: string;
    /**
     * The code to execute after running the export, usually to clean up data.
     * @type {string}
     * @memberof ExportDataSetupType
     */
    postExportProcedure?: string;
    /**
     * A flag to add new line character after every row of data generated.
     * @type {boolean}
     * @memberof ExportDataSetupType
     */
    addNewLine?: boolean;
    /**
     * A flag to indicate if Export header and footer should always be created even if no data is generated.
     * @type {boolean}
     * @memberof ExportDataSetupType
     */
    createHeaderFooter?: boolean;
    /**
     * A flag to indicate if the data should be appended to an existing file.
     * @type {boolean}
     * @memberof ExportDataSetupType
     */
    appendToFile?: boolean;
    /**
     * Column separator of the export file.
     * @type {string}
     * @memberof ExportDataSetupType
     */
    columnSeparator?: string;
    /**
     * A flag to indicate if this export contains export components.
     * @type {boolean}
     * @memberof ExportDataSetupType
     */
    componentExport?: boolean;
    /**
     * A flag to indicate if the export is compressed.
     * @type {boolean}
     * @memberof ExportDataSetupType
     */
    compressData?: boolean;
    /**
     * Where clause for the file to select data form the Source View.
     * @type {string}
     * @memberof ExportDataSetupType
     */
    filterCondition?: string;
    /**
     * Main tag for the xml document
     * @type {string}
     * @memberof ExportDataSetupType
     */
    xMLRootTag?: string;
    /**
     * For XML exports this allows to add the encoding attribute to the xml file header.
     * @type {string}
     * @memberof ExportDataSetupType
     */
    xMLEncoding?: string;
    /**
     * For XML exports this allows to add the additional processing instructions to the XML file header if needed.
     * @type {string}
     * @memberof ExportDataSetupType
     */
    xMLProcessingInstructions?: string;
    /**
     * For XML exports this defines the optional document type name
     * @type {string}
     * @memberof ExportDataSetupType
     */
    xMLDocumentTypeName?: string;
    /**
     * For XML exports this defines the optional system id in doc type tag
     * @type {string}
     * @memberof ExportDataSetupType
     */
    xMLDocumentTypeSystemId?: string;
    /**
     * For XML exports this defines the optional public id in doc type tag
     * @type {string}
     * @memberof ExportDataSetupType
     */
    xMLDocumentTypePublicId?: string;
}

/**
 * Check if a given object implements the ExportDataSetupType interface.
 */
export function instanceOfExportDataSetupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportDataSetupTypeFromJSON(json: any): ExportDataSetupType {
    return ExportDataSetupTypeFromJSONTyped(json, false);
}

export function ExportDataSetupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportDataSetupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dataSourceName': !exists(json, 'dataSourceName') ? undefined : json['dataSourceName'],
        'preExportProcedure': !exists(json, 'preExportProcedure') ? undefined : json['preExportProcedure'],
        'postExportProcedure': !exists(json, 'postExportProcedure') ? undefined : json['postExportProcedure'],
        'addNewLine': !exists(json, 'addNewLine') ? undefined : json['addNewLine'],
        'createHeaderFooter': !exists(json, 'createHeaderFooter') ? undefined : json['createHeaderFooter'],
        'appendToFile': !exists(json, 'appendToFile') ? undefined : json['appendToFile'],
        'columnSeparator': !exists(json, 'columnSeparator') ? undefined : json['columnSeparator'],
        'componentExport': !exists(json, 'componentExport') ? undefined : json['componentExport'],
        'compressData': !exists(json, 'compressData') ? undefined : json['compressData'],
        'filterCondition': !exists(json, 'filterCondition') ? undefined : json['filterCondition'],
        'xMLRootTag': !exists(json, 'xMLRootTag') ? undefined : json['xMLRootTag'],
        'xMLEncoding': !exists(json, 'xMLEncoding') ? undefined : json['xMLEncoding'],
        'xMLProcessingInstructions': !exists(json, 'xMLProcessingInstructions') ? undefined : json['xMLProcessingInstructions'],
        'xMLDocumentTypeName': !exists(json, 'xMLDocumentTypeName') ? undefined : json['xMLDocumentTypeName'],
        'xMLDocumentTypeSystemId': !exists(json, 'xMLDocumentTypeSystemId') ? undefined : json['xMLDocumentTypeSystemId'],
        'xMLDocumentTypePublicId': !exists(json, 'xMLDocumentTypePublicId') ? undefined : json['xMLDocumentTypePublicId'],
    };
}

export function ExportDataSetupTypeToJSON(value?: ExportDataSetupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dataSourceName': value.dataSourceName,
        'preExportProcedure': value.preExportProcedure,
        'postExportProcedure': value.postExportProcedure,
        'addNewLine': value.addNewLine,
        'createHeaderFooter': value.createHeaderFooter,
        'appendToFile': value.appendToFile,
        'columnSeparator': value.columnSeparator,
        'componentExport': value.componentExport,
        'compressData': value.compressData,
        'filterCondition': value.filterCondition,
        'xMLRootTag': value.xMLRootTag,
        'xMLEncoding': value.xMLEncoding,
        'xMLProcessingInstructions': value.xMLProcessingInstructions,
        'xMLDocumentTypeName': value.xMLDocumentTypeName,
        'xMLDocumentTypeSystemId': value.xMLDocumentTypeSystemId,
        'xMLDocumentTypePublicId': value.xMLDocumentTypePublicId,
    };
}

