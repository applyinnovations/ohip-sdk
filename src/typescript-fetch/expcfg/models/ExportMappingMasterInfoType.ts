/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportMappingCodeType } from './ExportMappingCodeType';
import {
    ExportMappingCodeTypeFromJSON,
    ExportMappingCodeTypeFromJSONTyped,
    ExportMappingCodeTypeToJSON,
} from './ExportMappingCodeType';
import type { ExportMappingType } from './ExportMappingType';
import {
    ExportMappingTypeFromJSON,
    ExportMappingTypeFromJSONTyped,
    ExportMappingTypeToJSON,
} from './ExportMappingType';

/**
 * Contains information about the various mapping types and the mapping codes.
 * @export
 * @interface ExportMappingMasterInfoType
 */
export interface ExportMappingMasterInfoType {
    /**
     * Provides information about the mapping type.
     * @type {Array<ExportMappingType>}
     * @memberof ExportMappingMasterInfoType
     */
    mappingTypes?: Array<ExportMappingType>;
    /**
     * Provides information about the mapping type.
     * @type {Array<ExportMappingCodeType>}
     * @memberof ExportMappingMasterInfoType
     */
    mappingCodes?: Array<ExportMappingCodeType>;
    /**
     * 
     * @type {number}
     * @memberof ExportMappingMasterInfoType
     */
    mappingTypesCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ExportMappingMasterInfoType
     */
    mappingCodesCount?: number;
}

/**
 * Check if a given object implements the ExportMappingMasterInfoType interface.
 */
export function instanceOfExportMappingMasterInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportMappingMasterInfoTypeFromJSON(json: any): ExportMappingMasterInfoType {
    return ExportMappingMasterInfoTypeFromJSONTyped(json, false);
}

export function ExportMappingMasterInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportMappingMasterInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mappingTypes': !exists(json, 'mappingTypes') ? undefined : ((json['mappingTypes'] as Array<any>).map(ExportMappingTypeFromJSON)),
        'mappingCodes': !exists(json, 'mappingCodes') ? undefined : ((json['mappingCodes'] as Array<any>).map(ExportMappingCodeTypeFromJSON)),
        'mappingTypesCount': !exists(json, 'mappingTypesCount') ? undefined : json['mappingTypesCount'],
        'mappingCodesCount': !exists(json, 'mappingCodesCount') ? undefined : json['mappingCodesCount'],
    };
}

export function ExportMappingMasterInfoTypeToJSON(value?: ExportMappingMasterInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mappingTypes': value.mappingTypes === undefined ? undefined : ((value.mappingTypes as Array<any>).map(ExportMappingTypeToJSON)),
        'mappingCodes': value.mappingCodes === undefined ? undefined : ((value.mappingCodes as Array<any>).map(ExportMappingCodeTypeToJSON)),
        'mappingTypesCount': value.mappingTypesCount,
        'mappingCodesCount': value.mappingCodesCount,
    };
}

