/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Export Configuration API
 * APIs catering to the managing export master data configuration. <br /><The exports feature in OPERA Cloud provides the ability to create and export data files, such as back office data, to third-party interfaces and receiving systems.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExportColumnLengthType } from './ExportColumnLengthType';
import {
    ExportColumnLengthTypeFromJSON,
    ExportColumnLengthTypeFromJSONTyped,
    ExportColumnLengthTypeToJSON,
} from './ExportColumnLengthType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Base type that holds information related to xml tag types
 * @export
 * @interface ExportXMLAttributeType
 */
export interface ExportXMLAttributeType {
    /**
     * XML Tag name
     * @type {string}
     * @memberof ExportXMLAttributeType
     */
    name?: string;
    /**
     * Value for XML tag
     * @type {string}
     * @memberof ExportXMLAttributeType
     */
    value?: string;
    /**
     * 
     * @type {ExportColumnLengthType}
     * @memberof ExportXMLAttributeType
     */
    length?: ExportColumnLengthType;
    /**
     * Determines if the tag need to be present in the data even if there is no value available
     * @type {boolean}
     * @memberof ExportXMLAttributeType
     */
    required?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ExportXMLAttributeType
     */
    exportDataId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ExportXMLAttributeType
     */
    parentDataID?: UniqueIDType;
}

/**
 * Check if a given object implements the ExportXMLAttributeType interface.
 */
export function instanceOfExportXMLAttributeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExportXMLAttributeTypeFromJSON(json: any): ExportXMLAttributeType {
    return ExportXMLAttributeTypeFromJSONTyped(json, false);
}

export function ExportXMLAttributeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportXMLAttributeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'length': !exists(json, 'length') ? undefined : ExportColumnLengthTypeFromJSON(json['length']),
        'required': !exists(json, 'required') ? undefined : json['required'],
        'exportDataId': !exists(json, 'exportDataId') ? undefined : UniqueIDTypeFromJSON(json['exportDataId']),
        'parentDataID': !exists(json, 'parentDataID') ? undefined : UniqueIDTypeFromJSON(json['parentDataID']),
    };
}

export function ExportXMLAttributeTypeToJSON(value?: ExportXMLAttributeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'value': value.value,
        'length': ExportColumnLengthTypeToJSON(value.length),
        'required': value.required,
        'exportDataId': UniqueIDTypeToJSON(value.exportDataId),
        'parentDataID': UniqueIDTypeToJSON(value.parentDataID),
    };
}

