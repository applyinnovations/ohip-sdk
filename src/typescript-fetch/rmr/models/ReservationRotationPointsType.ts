/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Individual reservation and associated rotation points information
 * @export
 * @interface ReservationRotationPointsType
 */
export interface ReservationRotationPointsType {
    /**
     * Room Number
     * @type {string}
     * @memberof ReservationRotationPointsType
     */
    roomId?: string;
    /**
     * Reservation arrival date
     * @type {string}
     * @memberof ReservationRotationPointsType
     */
    arrivalDate?: string;
    /**
     * Reservation departure date
     * @type {string}
     * @memberof ReservationRotationPointsType
     */
    departureDate?: string;
    /**
     * The number of nights of the reservation.
     * @type {number}
     * @memberof ReservationRotationPointsType
     */
    nights?: number;
    /**
     * Unique identifier of the reservation like Reservation Name Id, Confirmation Number.
     * @type {Array<UniqueIDType>}
     * @memberof ReservationRotationPointsType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * 
     * @type {ProfileId}
     * @memberof ReservationRotationPointsType
     */
    profileId?: ProfileId;
    /**
     * The guest name on the reservation.
     * @type {string}
     * @memberof ReservationRotationPointsType
     */
    guestName?: string;
    /**
     * Total rotation points for the room.
     * @type {number}
     * @memberof ReservationRotationPointsType
     */
    totalPoints?: number;
    /**
     * Whether rotation points for the room have been adjusted.
     * @type {boolean}
     * @memberof ReservationRotationPointsType
     */
    pointsAdjusted?: boolean;
}

/**
 * Check if a given object implements the ReservationRotationPointsType interface.
 */
export function instanceOfReservationRotationPointsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationRotationPointsTypeFromJSON(json: any): ReservationRotationPointsType {
    return ReservationRotationPointsTypeFromJSONTyped(json, false);
}

export function ReservationRotationPointsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationRotationPointsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'arrivalDate': !exists(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'departureDate': !exists(json, 'departureDate') ? undefined : json['departureDate'],
        'nights': !exists(json, 'nights') ? undefined : json['nights'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'guestName': !exists(json, 'guestName') ? undefined : json['guestName'],
        'totalPoints': !exists(json, 'totalPoints') ? undefined : json['totalPoints'],
        'pointsAdjusted': !exists(json, 'pointsAdjusted') ? undefined : json['pointsAdjusted'],
    };
}

export function ReservationRotationPointsTypeToJSON(value?: ReservationRotationPointsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomId': value.roomId,
        'arrivalDate': value.arrivalDate,
        'departureDate': value.departureDate,
        'nights': value.nights,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'profileId': ProfileIdToJSON(value.profileId),
        'guestName': value.guestName,
        'totalPoints': value.totalPoints,
        'pointsAdjusted': value.pointsAdjusted,
    };
}

