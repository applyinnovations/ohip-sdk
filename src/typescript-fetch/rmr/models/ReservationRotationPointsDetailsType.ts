/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationRotationPointsAdjustmentReasonType } from './ReservationRotationPointsAdjustmentReasonType';
import {
    ReservationRotationPointsAdjustmentReasonTypeFromJSON,
    ReservationRotationPointsAdjustmentReasonTypeFromJSONTyped,
    ReservationRotationPointsAdjustmentReasonTypeToJSON,
} from './ReservationRotationPointsAdjustmentReasonType';
import type { RotationRuleCalculationRuleType } from './RotationRuleCalculationRuleType';
import {
    RotationRuleCalculationRuleTypeFromJSON,
    RotationRuleCalculationRuleTypeFromJSONTyped,
    RotationRuleCalculationRuleTypeToJSON,
} from './RotationRuleCalculationRuleType';

/**
 * Rotation Points Details of a reservation
 * @export
 * @interface ReservationRotationPointsDetailsType
 */
export interface ReservationRotationPointsDetailsType {
    /**
     * Override the current points and enter a new value for the respective calculation rule up to 5 decimal places.
     * @type {number}
     * @memberof ReservationRotationPointsDetailsType
     */
    adjustPointsTo?: number;
    /**
     * 
     * @type {ReservationRotationPointsAdjustmentReasonType}
     * @memberof ReservationRotationPointsDetailsType
     */
    adjustmentReason?: ReservationRotationPointsAdjustmentReasonType;
    /**
     * Current applicable points for the shown calculation rule for the reservation.
     * @type {number}
     * @memberof ReservationRotationPointsDetailsType
     */
    currentPoints?: number;
    /**
     * End date of reservation
     * @type {Date}
     * @memberof ReservationRotationPointsDetailsType
     */
    endDate?: Date;
    /**
     * Start date of reservation
     * @type {Date}
     * @memberof ReservationRotationPointsDetailsType
     */
    startDate?: Date;
    /**
     * 
     * @type {RotationRuleCalculationRuleType}
     * @memberof ReservationRotationPointsDetailsType
     */
    type?: RotationRuleCalculationRuleType;
}

/**
 * Check if a given object implements the ReservationRotationPointsDetailsType interface.
 */
export function instanceOfReservationRotationPointsDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationRotationPointsDetailsTypeFromJSON(json: any): ReservationRotationPointsDetailsType {
    return ReservationRotationPointsDetailsTypeFromJSONTyped(json, false);
}

export function ReservationRotationPointsDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationRotationPointsDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'adjustPointsTo': !exists(json, 'adjustPointsTo') ? undefined : json['adjustPointsTo'],
        'adjustmentReason': !exists(json, 'adjustmentReason') ? undefined : ReservationRotationPointsAdjustmentReasonTypeFromJSON(json['adjustmentReason']),
        'currentPoints': !exists(json, 'currentPoints') ? undefined : json['currentPoints'],
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
        'type': !exists(json, 'type') ? undefined : RotationRuleCalculationRuleTypeFromJSON(json['type']),
    };
}

export function ReservationRotationPointsDetailsTypeToJSON(value?: ReservationRotationPointsDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'adjustPointsTo': value.adjustPointsTo,
        'adjustmentReason': ReservationRotationPointsAdjustmentReasonTypeToJSON(value.adjustmentReason),
        'currentPoints': value.currentPoints,
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
        'type': RotationRuleCalculationRuleTypeToJSON(value.type),
    };
}

