/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RoomRotationPointsAdjustmentInfoType } from './RoomRotationPointsAdjustmentInfoType';
import {
    RoomRotationPointsAdjustmentInfoTypeFromJSON,
    RoomRotationPointsAdjustmentInfoTypeFromJSONTyped,
    RoomRotationPointsAdjustmentInfoTypeToJSON,
} from './RoomRotationPointsAdjustmentInfoType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface RoomRotationPointsAdjustment
 */
export interface RoomRotationPointsAdjustment {
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof RoomRotationPointsAdjustment
     */
    links?: Array<InstanceLink>;
    /**
     * List of Room Rotation Points Information to update
     * @type {Array<RoomRotationPointsAdjustmentInfoType>}
     * @memberof RoomRotationPointsAdjustment
     */
    roomRotationPointsAdjustmentInfoTypeList?: Array<RoomRotationPointsAdjustmentInfoType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RoomRotationPointsAdjustment
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the RoomRotationPointsAdjustment interface.
 */
export function instanceOfRoomRotationPointsAdjustment(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomRotationPointsAdjustmentFromJSON(json: any): RoomRotationPointsAdjustment {
    return RoomRotationPointsAdjustmentFromJSONTyped(json, false);
}

export function RoomRotationPointsAdjustmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomRotationPointsAdjustment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'roomRotationPointsAdjustmentInfoTypeList': !exists(json, 'roomRotationPointsAdjustmentInfoTypeList') ? undefined : ((json['roomRotationPointsAdjustmentInfoTypeList'] as Array<any>).map(RoomRotationPointsAdjustmentInfoTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function RoomRotationPointsAdjustmentToJSON(value?: RoomRotationPointsAdjustment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'roomRotationPointsAdjustmentInfoTypeList': value.roomRotationPointsAdjustmentInfoTypeList === undefined ? undefined : ((value.roomRotationPointsAdjustmentInfoTypeList as Array<any>).map(RoomRotationPointsAdjustmentInfoTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

