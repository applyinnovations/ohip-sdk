/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssociatedRoomOwnershipInfoType } from './AssociatedRoomOwnershipInfoType';
import {
    AssociatedRoomOwnershipInfoTypeFromJSON,
    AssociatedRoomOwnershipInfoTypeFromJSONTyped,
    AssociatedRoomOwnershipInfoTypeToJSON,
} from './AssociatedRoomOwnershipInfoType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Associated Room Ownerships List
 * @export
 * @interface AssociatedRoomOwnershipListDetails
 */
export interface AssociatedRoomOwnershipListDetails {
    /**
     * List of Associated Room Ownerships
     * @type {Array<AssociatedRoomOwnershipInfoType>}
     * @memberof AssociatedRoomOwnershipListDetails
     */
    associatedRoomOwnershipInfoTypeList?: Array<AssociatedRoomOwnershipInfoType>;
    /**
     * 
     * @type {Links}
     * @memberof AssociatedRoomOwnershipListDetails
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof AssociatedRoomOwnershipListDetails
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the AssociatedRoomOwnershipListDetails interface.
 */
export function instanceOfAssociatedRoomOwnershipListDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AssociatedRoomOwnershipListDetailsFromJSON(json: any): AssociatedRoomOwnershipListDetails {
    return AssociatedRoomOwnershipListDetailsFromJSONTyped(json, false);
}

export function AssociatedRoomOwnershipListDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssociatedRoomOwnershipListDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'associatedRoomOwnershipInfoTypeList': !exists(json, 'associatedRoomOwnershipInfoTypeList') ? undefined : ((json['associatedRoomOwnershipInfoTypeList'] as Array<any>).map(AssociatedRoomOwnershipInfoTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function AssociatedRoomOwnershipListDetailsToJSON(value?: AssociatedRoomOwnershipListDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'associatedRoomOwnershipInfoTypeList': value.associatedRoomOwnershipInfoTypeList === undefined ? undefined : ((value.associatedRoomOwnershipInfoTypeList as Array<any>).map(AssociatedRoomOwnershipInfoTypeToJSON)),
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

