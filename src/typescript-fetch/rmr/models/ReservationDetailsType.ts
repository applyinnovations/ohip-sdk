/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Reservation Details
 * @export
 * @interface ReservationDetailsType
 */
export interface ReservationDetailsType {
    /**
     * Hotel Id
     * @type {string}
     * @memberof ReservationDetailsType
     */
    hotelId?: string;
    /**
     * Unique identifier of the reservation like Reservation Name Id, Confirmation Number.
     * @type {Array<UniqueIDType>}
     * @memberof ReservationDetailsType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Reservation arrival date
     * @type {string}
     * @memberof ReservationDetailsType
     */
    arrival?: string;
    /**
     * Reservation departure date
     * @type {string}
     * @memberof ReservationDetailsType
     */
    departure?: string;
    /**
     * The number of nights of the reservation.
     * @type {number}
     * @memberof ReservationDetailsType
     */
    nights?: number;
    /**
     * Room Number
     * @type {string}
     * @memberof ReservationDetailsType
     */
    roomId?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof ReservationDetailsType
     */
    profileId?: ProfileId;
    /**
     * Family name, last name.
     * @type {string}
     * @memberof ReservationDetailsType
     */
    surname?: string;
    /**
     * Given name, first name or names
     * @type {string}
     * @memberof ReservationDetailsType
     */
    givenName?: string;
}

/**
 * Check if a given object implements the ReservationDetailsType interface.
 */
export function instanceOfReservationDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationDetailsTypeFromJSON(json: any): ReservationDetailsType {
    return ReservationDetailsTypeFromJSONTyped(json, false);
}

export function ReservationDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'arrival': !exists(json, 'arrival') ? undefined : json['arrival'],
        'departure': !exists(json, 'departure') ? undefined : json['departure'],
        'nights': !exists(json, 'nights') ? undefined : json['nights'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'surname': !exists(json, 'surname') ? undefined : json['surname'],
        'givenName': !exists(json, 'givenName') ? undefined : json['givenName'],
    };
}

export function ReservationDetailsTypeToJSON(value?: ReservationDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'arrival': value.arrival,
        'departure': value.departure,
        'nights': value.nights,
        'roomId': value.roomId,
        'profileId': ProfileIdToJSON(value.profileId),
        'surname': value.surname,
        'givenName': value.givenName,
    };
}

