/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).
 * @export
 * @interface ProfileId
 */
export interface ProfileId {
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof ProfileId
     */
    id?: string;
    /**
     * Additional identifying value assigned by the creating system.
     * @type {number}
     * @memberof ProfileId
     */
    idExtension?: number;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof ProfileId
     */
    type?: string;
}

/**
 * Check if a given object implements the ProfileId interface.
 */
export function instanceOfProfileId(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileIdFromJSON(json: any): ProfileId {
    return ProfileIdFromJSONTyped(json, false);
}

export function ProfileIdFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProfileId {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function ProfileIdToJSON(value?: ProfileId | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'idExtension': value.idExtension,
        'type': value.type,
    };
}

