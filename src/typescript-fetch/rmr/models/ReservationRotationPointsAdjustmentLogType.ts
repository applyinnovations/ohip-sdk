/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Rotation Service API
 * APIs to facilitate Room Rotation functionality in OPERA Cloud. Api provides capability to handle Room Rotation in OPERA Cloud. Room Rotation provides room ownership options for automatic inventory rotation and prioritization for owner rooms assignment and occupancy.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationRotationPointsAdjustmentReasonType } from './ReservationRotationPointsAdjustmentReasonType';
import {
    ReservationRotationPointsAdjustmentReasonTypeFromJSON,
    ReservationRotationPointsAdjustmentReasonTypeFromJSONTyped,
    ReservationRotationPointsAdjustmentReasonTypeToJSON,
} from './ReservationRotationPointsAdjustmentReasonType';
import type { RotationRuleCalculationRuleType } from './RotationRuleCalculationRuleType';
import {
    RotationRuleCalculationRuleTypeFromJSON,
    RotationRuleCalculationRuleTypeFromJSONTyped,
    RotationRuleCalculationRuleTypeToJSON,
} from './RotationRuleCalculationRuleType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Reservation rotation points adjustment log.
 * @export
 * @interface ReservationRotationPointsAdjustmentLogType
 */
export interface ReservationRotationPointsAdjustmentLogType {
    /**
     * The date and time that the adjustment was made to the rotation points for the room.
     * @type {string}
     * @memberof ReservationRotationPointsAdjustmentLogType
     */
    logDate?: string;
    /**
     * 
     * @type {RotationRuleCalculationRuleType}
     * @memberof ReservationRotationPointsAdjustmentLogType
     */
    type?: RotationRuleCalculationRuleType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReservationRotationPointsAdjustmentLogType
     */
    userId?: UniqueIDType;
    /**
     * Unique application login of the user who made the adjustment.
     * @type {string}
     * @memberof ReservationRotationPointsAdjustmentLogType
     */
    userName?: string;
    /**
     * The points that were applicable for the specific calculation rule before the change of points.
     * @type {number}
     * @memberof ReservationRotationPointsAdjustmentLogType
     */
    originalPoints?: number;
    /**
     * The number of points for the specific calculation rule after the change of points.
     * @type {number}
     * @memberof ReservationRotationPointsAdjustmentLogType
     */
    adjustedPointsTo?: number;
    /**
     * 
     * @type {ReservationRotationPointsAdjustmentReasonType}
     * @memberof ReservationRotationPointsAdjustmentLogType
     */
    adjustmentReason?: ReservationRotationPointsAdjustmentReasonType;
}

/**
 * Check if a given object implements the ReservationRotationPointsAdjustmentLogType interface.
 */
export function instanceOfReservationRotationPointsAdjustmentLogType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationRotationPointsAdjustmentLogTypeFromJSON(json: any): ReservationRotationPointsAdjustmentLogType {
    return ReservationRotationPointsAdjustmentLogTypeFromJSONTyped(json, false);
}

export function ReservationRotationPointsAdjustmentLogTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationRotationPointsAdjustmentLogType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'logDate': !exists(json, 'logDate') ? undefined : json['logDate'],
        'type': !exists(json, 'type') ? undefined : RotationRuleCalculationRuleTypeFromJSON(json['type']),
        'userId': !exists(json, 'userId') ? undefined : UniqueIDTypeFromJSON(json['userId']),
        'userName': !exists(json, 'userName') ? undefined : json['userName'],
        'originalPoints': !exists(json, 'originalPoints') ? undefined : json['originalPoints'],
        'adjustedPointsTo': !exists(json, 'adjustedPointsTo') ? undefined : json['adjustedPointsTo'],
        'adjustmentReason': !exists(json, 'adjustmentReason') ? undefined : ReservationRotationPointsAdjustmentReasonTypeFromJSON(json['adjustmentReason']),
    };
}

export function ReservationRotationPointsAdjustmentLogTypeToJSON(value?: ReservationRotationPointsAdjustmentLogType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'logDate': value.logDate,
        'type': RotationRuleCalculationRuleTypeToJSON(value.type),
        'userId': UniqueIDTypeToJSON(value.userId),
        'userName': value.userName,
        'originalPoints': value.originalPoints,
        'adjustedPointsTo': value.adjustedPointsTo,
        'adjustmentReason': ReservationRotationPointsAdjustmentReasonTypeToJSON(value.adjustmentReason),
    };
}

