/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttendantSchedule,
  AutoGenerateTaskSheetsRequest,
  CancelServicingTaskRoomRequest,
  CanceledServicingTaskRoom,
  ChangedRoomMaintenance,
  ChangedTaskSheet,
  ChangedTaskSheetRooms,
  ChangedTaskSheetTemplate,
  CompleteOutOfOrderRoomsRequest,
  CompleteOutOfServiceRoomsRequest,
  CompleteRoomRepairStatus,
  CompletedServicingTaskRoom,
  EditReservationHousekeepingTasksRequest,
  EndedServiceBreak,
  ExceptionDetailType,
  FacilityForecast,
  GuestHousekeepingInstructions,
  GuestHousekeepingService,
  GuestHousekeepingServiceRequestStatus,
  HousekeepingBoard,
  HousekeepingRoomStatus,
  LockTaskSheetRequest,
  LockedTaskSheet,
  MergeTaskSheetRequest,
  MoveTaskRoomsRequest,
  MovedTaskRoomsRS,
  PostHousekeepingAttendantScheduleRequest,
  PostOutOfOrderRoomsRequest,
  PostOutOfServiceRoomsRequest,
  PostRoomMaintenanceRequest,
  PutRoomRelatedStatusRequest,
  PutTaskSheetRequest,
  PutTaskSheetTemplateRequest,
  ResetReservationHousekeepingScheduleRequest,
  ResolveRoomMaintenanceRequest,
  ResolvedRoomMaintenance,
  RoomCleaningPriorityRequestStatus,
  RoomConditionRequestStatus,
  RoomMaintenanceDetails,
  Rooms,
  Schedule,
  ScheduledSearch,
  ScheduledShiftRequest,
  ServiceTime,
  SetGuestHousekeepingNotesRequest,
  SetGuestHousekeepingServiceRequestRequest,
  SetRoomCleaningPriorityRequest,
  SetRoomConditionRequest,
  ShiftReservationHousekeepingScheduleRequest,
  SkipedServicingTaskRoom,
  StartedServiceBreak,
  Status,
  TaskAssignment,
  TaskCompanion,
  TaskSheetTemplate,
  UnlockTaskSheetRequest,
  UnlockedTaskSheet,
  UnresolvedRoomMaintenance,
} from '../models';
import {
    AttendantScheduleFromJSON,
    AttendantScheduleToJSON,
    AutoGenerateTaskSheetsRequestFromJSON,
    AutoGenerateTaskSheetsRequestToJSON,
    CancelServicingTaskRoomRequestFromJSON,
    CancelServicingTaskRoomRequestToJSON,
    CanceledServicingTaskRoomFromJSON,
    CanceledServicingTaskRoomToJSON,
    ChangedRoomMaintenanceFromJSON,
    ChangedRoomMaintenanceToJSON,
    ChangedTaskSheetFromJSON,
    ChangedTaskSheetToJSON,
    ChangedTaskSheetRoomsFromJSON,
    ChangedTaskSheetRoomsToJSON,
    ChangedTaskSheetTemplateFromJSON,
    ChangedTaskSheetTemplateToJSON,
    CompleteOutOfOrderRoomsRequestFromJSON,
    CompleteOutOfOrderRoomsRequestToJSON,
    CompleteOutOfServiceRoomsRequestFromJSON,
    CompleteOutOfServiceRoomsRequestToJSON,
    CompleteRoomRepairStatusFromJSON,
    CompleteRoomRepairStatusToJSON,
    CompletedServicingTaskRoomFromJSON,
    CompletedServicingTaskRoomToJSON,
    EditReservationHousekeepingTasksRequestFromJSON,
    EditReservationHousekeepingTasksRequestToJSON,
    EndedServiceBreakFromJSON,
    EndedServiceBreakToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FacilityForecastFromJSON,
    FacilityForecastToJSON,
    GuestHousekeepingInstructionsFromJSON,
    GuestHousekeepingInstructionsToJSON,
    GuestHousekeepingServiceFromJSON,
    GuestHousekeepingServiceToJSON,
    GuestHousekeepingServiceRequestStatusFromJSON,
    GuestHousekeepingServiceRequestStatusToJSON,
    HousekeepingBoardFromJSON,
    HousekeepingBoardToJSON,
    HousekeepingRoomStatusFromJSON,
    HousekeepingRoomStatusToJSON,
    LockTaskSheetRequestFromJSON,
    LockTaskSheetRequestToJSON,
    LockedTaskSheetFromJSON,
    LockedTaskSheetToJSON,
    MergeTaskSheetRequestFromJSON,
    MergeTaskSheetRequestToJSON,
    MoveTaskRoomsRequestFromJSON,
    MoveTaskRoomsRequestToJSON,
    MovedTaskRoomsRSFromJSON,
    MovedTaskRoomsRSToJSON,
    PostHousekeepingAttendantScheduleRequestFromJSON,
    PostHousekeepingAttendantScheduleRequestToJSON,
    PostOutOfOrderRoomsRequestFromJSON,
    PostOutOfOrderRoomsRequestToJSON,
    PostOutOfServiceRoomsRequestFromJSON,
    PostOutOfServiceRoomsRequestToJSON,
    PostRoomMaintenanceRequestFromJSON,
    PostRoomMaintenanceRequestToJSON,
    PutRoomRelatedStatusRequestFromJSON,
    PutRoomRelatedStatusRequestToJSON,
    PutTaskSheetRequestFromJSON,
    PutTaskSheetRequestToJSON,
    PutTaskSheetTemplateRequestFromJSON,
    PutTaskSheetTemplateRequestToJSON,
    ResetReservationHousekeepingScheduleRequestFromJSON,
    ResetReservationHousekeepingScheduleRequestToJSON,
    ResolveRoomMaintenanceRequestFromJSON,
    ResolveRoomMaintenanceRequestToJSON,
    ResolvedRoomMaintenanceFromJSON,
    ResolvedRoomMaintenanceToJSON,
    RoomCleaningPriorityRequestStatusFromJSON,
    RoomCleaningPriorityRequestStatusToJSON,
    RoomConditionRequestStatusFromJSON,
    RoomConditionRequestStatusToJSON,
    RoomMaintenanceDetailsFromJSON,
    RoomMaintenanceDetailsToJSON,
    RoomsFromJSON,
    RoomsToJSON,
    ScheduleFromJSON,
    ScheduleToJSON,
    ScheduledSearchFromJSON,
    ScheduledSearchToJSON,
    ScheduledShiftRequestFromJSON,
    ScheduledShiftRequestToJSON,
    ServiceTimeFromJSON,
    ServiceTimeToJSON,
    SetGuestHousekeepingNotesRequestFromJSON,
    SetGuestHousekeepingNotesRequestToJSON,
    SetGuestHousekeepingServiceRequestRequestFromJSON,
    SetGuestHousekeepingServiceRequestRequestToJSON,
    SetRoomCleaningPriorityRequestFromJSON,
    SetRoomCleaningPriorityRequestToJSON,
    SetRoomConditionRequestFromJSON,
    SetRoomConditionRequestToJSON,
    ShiftReservationHousekeepingScheduleRequestFromJSON,
    ShiftReservationHousekeepingScheduleRequestToJSON,
    SkipedServicingTaskRoomFromJSON,
    SkipedServicingTaskRoomToJSON,
    StartedServiceBreakFromJSON,
    StartedServiceBreakToJSON,
    StatusFromJSON,
    StatusToJSON,
    TaskAssignmentFromJSON,
    TaskAssignmentToJSON,
    TaskCompanionFromJSON,
    TaskCompanionToJSON,
    TaskSheetTemplateFromJSON,
    TaskSheetTemplateToJSON,
    UnlockTaskSheetRequestFromJSON,
    UnlockTaskSheetRequestToJSON,
    UnlockedTaskSheetFromJSON,
    UnlockedTaskSheetToJSON,
    UnresolvedRoomMaintenanceFromJSON,
    UnresolvedRoomMaintenanceToJSON,
} from '../models';

export interface AutoGenerateTaskSheetsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheets?: AutoGenerateTaskSheetsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CancelServicingTaskRoomOperationRequest {
    sheetNumber?: string;
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskRoom?: CancelServicingTaskRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CompleteOutOfOrderRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completeRoomRepair?: CompleteOutOfOrderRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CompleteOutOfServiceRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completeRoomRepair?: CompleteOutOfServiceRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CompleteServicingTaskRoomRequest {
    sheetNumber?: string;
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskRoom?: CancelServicingTaskRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHouseKeepingTaskSheetsRequest {
    hotelId?: string;
    taskCodesBreakOutId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHousekeepingAttendantScheduleRequest {
    hotelId?: string;
    scheduleDate?: Date;
    attendantId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteReservationHousekeepingTasksRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customized?: boolean;
    cycleStartDay?: number;
    endDate?: Date;
    startDate?: Date;
    facilityTaskCode?: string;
    facilityTaskDescription?: string;
    facilityTaskPriority?: number;
    taskDate?: Array<Date>;
    taskStartDate?: Array<Date>;
    taskEndDate?: Array<Date>;
    stayPeriod?: Set<DeleteReservationHousekeepingTasksStayPeriodEnum>;
    frequency?: Array<number>;
    taskCycleStartDay?: Array<number>;
    roomType?: Array<string>;
    roomId?: Array<string>;
    facilityCodes?: Array<string>;
    facilityCodesDescription?: Array<string>;
    facilityCodesQuantity?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoomMaintenanceRequest {
    mainteananceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTaskSheetRequest {
    hotelId?: string;
    sheetNumber?: number;
    taskCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    date?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTaskSheetRoomsRequest {
    hotelId?: string;
    sheetNumber?: number;
    taskCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    date?: Date;
    roomId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTaskSheetTemplateRequest {
    taskSheetTemplateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface EditReservationHousekeepingTasksOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    schedule?: EditReservationHousekeepingTasksRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface EndServiceBreakRequest {
    taskSheetNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskRoom?: CancelServicingTaskRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFacilityForecastRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    codes?: Array<string>;
    usePriority?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestHousekeepingNotesRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    room?: string;
    housekeepingInstruction?: Set<GetGuestHousekeepingNotesHousekeepingInstructionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHouseKeepingTasksRequest {
    hotelId?: string;
    taskDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attendantInRoomOnly?: boolean;
    generateCleaningSequence?: boolean;
    includeReservationInfo?: boolean;
    includeTaskSheetDetails?: boolean;
    includeTaskSheetsSummary?: boolean;
    sortByCleaningSequence?: boolean;
    taskCodes?: Array<string>;
    taskHotelCodes?: Array<string>;
    taskSequences?: Array<number>;
    taskDescriptions?: Array<string>;
    taskInstructions?: Array<string>;
    facilityDepartureTask?: Array<boolean>;
    linenChange?: Array<boolean>;
    taskCodesBreakOutId?: string;
    taskCodesBreakOutIdContext?: string;
    taskCodesBreakOutIdType?: string;
    attendantId?: string;
    taskSheetNumber?: Array<number>;
    housekeepingRoomStatus?: Set<GetHouseKeepingTasksHousekeepingRoomStatusEnum>;
    guestService?: Set<GetHouseKeepingTasksGuestServiceEnum>;
    roomStatusToChange?: Set<GetHouseKeepingTasksRoomStatusToChangeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHousekeepingAttendantsScheduleRequest {
    hotelId?: string;
    scheduleStartDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    scheduleEndDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHousekeepingDiscrepanciesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomDiscrepancyStatus?: Set<GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    roomClass?: Array<string>;
    housekeepingEndDate?: Date;
    housekeepingStartDate?: Date;
    floor?: Array<string>;
    dueOut?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHousekeepingOverviewRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    housekeepingRoomStatus?: Set<GetHousekeepingOverviewHousekeepingRoomStatusEnum>;
    frontOfficeRoomStatus?: Set<GetHousekeepingOverviewFrontOfficeRoomStatusEnum>;
    turndownStatus?: Set<GetHousekeepingOverviewTurndownStatusEnum>;
    roomParityStatus?: Set<GetHousekeepingOverviewRoomParityStatusEnum>;
    serviceRequestStatus?: Set<GetHousekeepingOverviewServiceRequestStatusEnum>;
    roomAssignmentStatus?: Set<GetHousekeepingOverviewRoomAssignmentStatusEnum>;
    fetchInstructions?: Set<GetHousekeepingOverviewFetchInstructionsEnum>;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    floor?: Array<string>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    building?: Array<string>;
    roomFeatures?: Array<string>;
    daySection?: Array<string>;
    eveningSection?: Array<string>;
    reservationStatus?: Array<string>;
    guestServiceRequest?: GetHousekeepingOverviewGuestServiceRequestEnum;
    roomIdText?: string;
    excludeCombo?: boolean;
    cleaningPriorityOnly?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOutOfOrderRoomsRequest {
    hotelId?: string;
    startDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomId?: string;
    endDate?: Date;
    roomTypes?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOutOfServiceRoomsRequest {
    hotelId?: string;
    startDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomId?: string;
    endDate?: Date;
    roomTypes?: Array<string>;
    roomClasses?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationHousekeepingScheduleRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    beginDate?: Date;
    endDate?: Date;
    fetchInstructions?: Set<GetReservationHousekeepingScheduleFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomConditionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomConditionsOnly?: boolean;
    roomWithoutConditionsOnly?: boolean;
    room?: string;
    fromRoomNumber?: string;
    toRoomNumber?: string;
    roomConditions?: Array<string>;
    roomTypes?: Array<string>;
    roomClasses?: Array<string>;
    frontOfficeRoomStatus?: Set<GetRoomConditionsFrontOfficeRoomStatusEnum>;
    reservationStatuses?: Array<string>;
    roomAssignmentStatus?: Set<GetRoomConditionsRoomAssignmentStatusEnum>;
    floors?: Array<string>;
    roomFeatures?: Array<string>;
    amSections?: Array<string>;
    pmSections?: Array<string>;
    buildings?: Array<string>;
    housekeepingRoomStatus?: Set<GetRoomConditionsHousekeepingRoomStatusEnum>;
    roomParityStatus?: Set<GetRoomConditionsRoomParityStatusEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomMaintenanceRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomIdText?: string;
    roomId?: string;
    roomClasses?: Array<string>;
    roomTypes?: Array<string>;
    maintenanceCodes?: Array<string>;
    roomMaintenanceStatus?: GetRoomMaintenanceRoomMaintenanceStatusEnum;
    assignedUserId?: Array<string>;
    assignedUserIdContext?: Array<string>;
    assignedUserIdType?: Array<string>;
    maintenanceId?: string;
    maintenanceIdContext?: string;
    maintenanceIdType?: string;
    resolvedEndDate?: Date;
    resolvedStartDate?: Date;
    includeImages?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaskCompanionRequest {
    sheetNumber?: string;
    hotelId?: string;
    taskCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskDate?: Date;
    roomId?: string;
    skipRoomNumbers?: Array<string>;
    roomStatusToChange?: Set<GetTaskCompanionRoomStatusToChangeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaskSheetTemplateRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface LockTaskSheetOperationRequest {
    sheetNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheetToLock?: LockTaskSheetRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface MergeTaskSheetOperationRequest {
    toTaskSequenceNo?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheetToMerge?: MergeTaskSheetRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface MoveTaskRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    moveTaskRooms?: MoveTaskRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHousekeepingAttendantScheduleOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    attendantSchedule?: PostHousekeepingAttendantScheduleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOutOfOrderRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRepairOutOfOrder?: PostOutOfOrderRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOutOfServiceRoomsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRepairOutOfService?: PostOutOfServiceRoomsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostReservationHousekeepingTasksRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    schedule?: EditReservationHousekeepingTasksRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomMaintenanceOperationRequest {
    maintenanceCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomMaintenanceRequest?: PostRoomMaintenanceRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTaskSheetRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheet?: PutTaskSheetRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTaskSheetRoomsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheet?: PutTaskSheetRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomCleaningPriorityRequest {
    hotelId?: string;
    roomId?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomMaintenanceRequest {
    maintenanceId?: string;
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomMaintenance?: ResolveRoomMaintenanceRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomRelatedStatusOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    housekeepingRoomStatusCriteria?: PutRoomRelatedStatusRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTaskSheetOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheet?: PutTaskSheetRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTaskSheetRoomsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheet?: PutTaskSheetRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTaskSheetTemplateOperationRequest {
    taskSheetTemplateCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheetTemplate?: PutTaskSheetTemplateRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ResetReservationHousekeepingScheduleOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    scheduleSearch?: ResetReservationHousekeepingScheduleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ResolveRoomMaintenanceOperationRequest {
    mainteananceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomMaintenance?: ResolveRoomMaintenanceRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetGuestHousekeepingNotesOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestHousekeepingServiceRequest?: SetGuestHousekeepingNotesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetGuestHousekeepingServiceRequestOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestHousekeepingServiceRequestCriteria?: SetGuestHousekeepingServiceRequestRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetRoomCleaningPriorityOperationRequest {
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomCleaningPriority?: SetRoomCleaningPriorityRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetRoomConditionOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomCondition?: SetRoomConditionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ShiftReservationHousekeepingScheduleOperationRequest {
    reservationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    scheduleShiftRequest?: ShiftReservationHousekeepingScheduleRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SkipServicingTaskRoomRequest {
    sheetNumber?: string;
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskRoom?: CancelServicingTaskRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartServiceBreakRequest {
    taskSheetNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskRoom?: CancelServicingTaskRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface StartServicingTaskRoomRequest {
    sheetNumber?: string;
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskRoom?: CancelServicingTaskRoomRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface UnResolveRoomMaintenanceRequest {
    mainteananceId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomMaintenance?: ResolveRoomMaintenanceRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface UnlockTaskSheetOperationRequest {
    sheetNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taskSheetToUnlock?: UnlockTaskSheetRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HousekeepingApi extends runtime.BaseAPI {

    /**
     * This API will allow you to Auto generate the task sheets. <p><strong>OperationId:</strong>autoGenerateTaskSheets</p>
     * Auto generate the task sheets
     */
    async autoGenerateTaskSheetsRaw(requestParameters: AutoGenerateTaskSheetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoTaskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoGenerateTaskSheetsRequestToJSON(requestParameters.taskSheets),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to Auto generate the task sheets. <p><strong>OperationId:</strong>autoGenerateTaskSheets</p>
     * Auto generate the task sheets
     */
    async autoGenerateTaskSheets(requestParameters: AutoGenerateTaskSheetsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.autoGenerateTaskSheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to cancel servicing task room. <p><strong>OperationId:</strong>cancelServicingTaskRoom</p>
     * Cancel servicing task room
     */
    async cancelServicingTaskRoomRaw(requestParameters: CancelServicingTaskRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CanceledServicingTaskRoom>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelServicingTaskRoomRequestToJSON(requestParameters.taskRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CanceledServicingTaskRoomFromJSON(jsonValue));
    }

    /**
     * This API will allow you to cancel servicing task room. <p><strong>OperationId:</strong>cancelServicingTaskRoom</p>
     * Cancel servicing task room
     */
    async cancelServicingTaskRoom(requestParameters: CancelServicingTaskRoomOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CanceledServicingTaskRoom> {
        const response = await this.cancelServicingTaskRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    async completeOutOfOrderRoomsRaw(requestParameters: CompleteOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteRoomRepairStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteOutOfOrderRoomsRequestToJSON(requestParameters.completeRoomRepair),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteRoomRepairStatusFromJSON(jsonValue));
    }

    /**
     * Use this API when one or more rooms are no longer Out Of Order, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfOrderRooms</p>
     * Complete rooms Out Of Order
     */
    async completeOutOfOrderRooms(requestParameters: CompleteOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteRoomRepairStatus> {
        const response = await this.completeOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    async completeOutOfServiceRoomsRaw(requestParameters: CompleteOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteRoomRepairStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompleteOutOfServiceRoomsRequestToJSON(requestParameters.completeRoomRepair),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteRoomRepairStatusFromJSON(jsonValue));
    }

    /**
     * Use this API when one or more rooms are no longer Out Of Service, and can now be available for a guest to stay in.  Specify in the request what status the room(s) should be returned to, such as clean, Inspected, dirty or Pickup. <p><strong>OperationId:</strong>completeOutOfServiceRooms</p>
     * Complete Rooms Out of Service
     */
    async completeOutOfServiceRooms(requestParameters: CompleteOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteRoomRepairStatus> {
        const response = await this.completeOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to complete servicing task room. <p><strong>OperationId:</strong>completeServicingTaskRoom</p>
     * Complete servicing task room
     */
    async completeServicingTaskRoomRaw(requestParameters: CompleteServicingTaskRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompletedServicingTaskRoom>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/complete`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelServicingTaskRoomRequestToJSON(requestParameters.taskRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompletedServicingTaskRoomFromJSON(jsonValue));
    }

    /**
     * This API will allow you to complete servicing task room. <p><strong>OperationId:</strong>completeServicingTaskRoom</p>
     * Complete servicing task room
     */
    async completeServicingTaskRoom(requestParameters: CompleteServicingTaskRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompletedServicingTaskRoom> {
        const response = await this.completeServicingTaskRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete all task sheets for an existing task sheet set for a specific property. Task Sheet Sets can be used to break out the rooms to be cleaned by the housekeeping attendants.<p><strong>OperationId:</strong>deleteHouseKeepingTaskSheets</p>
     * Delete all the hotel task sheets for an existing Task Sheet Set.
     */
    async deleteHouseKeepingTaskSheetsRaw(requestParameters: DeleteHouseKeepingTaskSheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/houseKeepingTasks/{taskCodesBreakOutId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"taskCodesBreakOutId"}}`, encodeURIComponent(String(requestParameters.taskCodesBreakOutId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete all task sheets for an existing task sheet set for a specific property. Task Sheet Sets can be used to break out the rooms to be cleaned by the housekeeping attendants.<p><strong>OperationId:</strong>deleteHouseKeepingTaskSheets</p>
     * Delete all the hotel task sheets for an existing Task Sheet Set.
     */
    async deleteHouseKeepingTaskSheets(requestParameters: DeleteHouseKeepingTaskSheetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHouseKeepingTaskSheetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to delete housekeeping attendant schedule. <p><strong>OperationId:</strong>deleteHousekeepingAttendantSchedule</p>
     * Delete housekeeping attendant schedule
     */
    async deleteHousekeepingAttendantScheduleRaw(requestParameters: DeleteHousekeepingAttendantScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.scheduleDate !== undefined) {
            queryParameters['scheduleDate'] = (requestParameters.scheduleDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.attendantId) {
            queryParameters['attendantId'] = requestParameters.attendantId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attendants/houseKeepingTasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete housekeeping attendant schedule. <p><strong>OperationId:</strong>deleteHousekeepingAttendantSchedule</p>
     * Delete housekeeping attendant schedule
     */
    async deleteHousekeepingAttendantSchedule(requestParameters: DeleteHousekeepingAttendantScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHousekeepingAttendantScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to delete reservation housekeeping task. <p><strong>OperationId:</strong>deleteReservationHousekeepingTasks</p>
     * Delete reservation housekeeping task
     */
    async deleteReservationHousekeepingTasksRaw(requestParameters: DeleteReservationHousekeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.customized !== undefined) {
            queryParameters['customized'] = requestParameters.customized;
        }

        if (requestParameters.cycleStartDay !== undefined) {
            queryParameters['cycleStartDay'] = requestParameters.cycleStartDay;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.facilityTaskCode !== undefined) {
            queryParameters['facilityTaskCode'] = requestParameters.facilityTaskCode;
        }

        if (requestParameters.facilityTaskDescription !== undefined) {
            queryParameters['facilityTaskDescription'] = requestParameters.facilityTaskDescription;
        }

        if (requestParameters.facilityTaskPriority !== undefined) {
            queryParameters['facilityTaskPriority'] = requestParameters.facilityTaskPriority;
        }

        if (requestParameters.taskDate) {
            queryParameters['taskDate'] = requestParameters.taskDate;
        }

        if (requestParameters.taskStartDate) {
            queryParameters['taskStartDate'] = requestParameters.taskStartDate;
        }

        if (requestParameters.taskEndDate) {
            queryParameters['taskEndDate'] = requestParameters.taskEndDate;
        }

        if (requestParameters.stayPeriod) {
            queryParameters['stayPeriod'] = requestParameters.stayPeriod;
        }

        if (requestParameters.frequency) {
            queryParameters['frequency'] = requestParameters.frequency;
        }

        if (requestParameters.taskCycleStartDay) {
            queryParameters['taskCycleStartDay'] = requestParameters.taskCycleStartDay;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.facilityCodes) {
            queryParameters['facilityCodes'] = requestParameters.facilityCodes;
        }

        if (requestParameters.facilityCodesDescription) {
            queryParameters['facilityCodesDescription'] = requestParameters.facilityCodesDescription;
        }

        if (requestParameters.facilityCodesQuantity) {
            queryParameters['facilityCodesQuantity'] = requestParameters.facilityCodesQuantity;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete reservation housekeeping task. <p><strong>OperationId:</strong>deleteReservationHousekeepingTasks</p>
     * Delete reservation housekeeping task
     */
    async deleteReservationHousekeepingTasks(requestParameters: DeleteReservationHousekeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteReservationHousekeepingTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete maintenances from rooms. <p><strong>OperationId:</strong>deleteRoomMaintenance</p>
     * Delete the maintenances for rooms
     */
    async deleteRoomMaintenanceRaw(requestParameters: DeleteRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/maintenances/{mainteananceId}`.replace(`{${"mainteananceId"}}`, encodeURIComponent(String(requestParameters.mainteananceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete maintenances from rooms. <p><strong>OperationId:</strong>deleteRoomMaintenance</p>
     * Delete the maintenances for rooms
     */
    async deleteRoomMaintenance(requestParameters: DeleteRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoomMaintenanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete the task sheet. <p><strong>OperationId:</strong>deleteTaskSheet</p>
     * Delete the task sheet
     */
    async deleteTaskSheetRaw(requestParameters: DeleteTaskSheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.sheetNumber !== undefined) {
            queryParameters['sheetNumber'] = requestParameters.sheetNumber;
        }

        if (requestParameters.taskCodes) {
            queryParameters['taskCodes'] = requestParameters.taskCodes;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = (requestParameters.date as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete the task sheet. <p><strong>OperationId:</strong>deleteTaskSheet</p>
     * Delete the task sheet
     */
    async deleteTaskSheet(requestParameters: DeleteTaskSheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTaskSheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete task sheet rooms. <p><strong>OperationId:</strong>deleteTaskSheetRooms</p>
     * Delete task sheet rooms
     */
    async deleteTaskSheetRoomsRaw(requestParameters: DeleteTaskSheetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.sheetNumber !== undefined) {
            queryParameters['sheetNumber'] = requestParameters.sheetNumber;
        }

        if (requestParameters.taskCodes) {
            queryParameters['taskCodes'] = requestParameters.taskCodes;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = (requestParameters.date as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete task sheet rooms. <p><strong>OperationId:</strong>deleteTaskSheetRooms</p>
     * Delete task sheet rooms
     */
    async deleteTaskSheetRooms(requestParameters: DeleteTaskSheetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTaskSheetRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete task sheet templates. <p><strong>OperationId:</strong>deleteTaskSheetTemplate</p>
     * Delete task sheet templates
     */
    async deleteTaskSheetTemplateRaw(requestParameters: DeleteTaskSheetTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheetTemplates/{taskSheetTemplateCode}`.replace(`{${"taskSheetTemplateCode"}}`, encodeURIComponent(String(requestParameters.taskSheetTemplateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete task sheet templates. <p><strong>OperationId:</strong>deleteTaskSheetTemplate</p>
     * Delete task sheet templates
     */
    async deleteTaskSheetTemplate(requestParameters: DeleteTaskSheetTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTaskSheetTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to update reservation housekeeping tasks. <p><strong>OperationId:</strong>editReservationHousekeepingTasks</p>
     * Update reservation housekeeping tasks
     */
    async editReservationHousekeepingTasksRaw(requestParameters: EditReservationHousekeepingTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Schedule>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EditReservationHousekeepingTasksRequestToJSON(requestParameters.schedule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleFromJSON(jsonValue));
    }

    /**
     * This API will allow you to update reservation housekeeping tasks. <p><strong>OperationId:</strong>editReservationHousekeepingTasks</p>
     * Update reservation housekeeping tasks
     */
    async editReservationHousekeepingTasks(requestParameters: EditReservationHousekeepingTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Schedule> {
        const response = await this.editReservationHousekeepingTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to end the Attendant\'s service break. <p><strong>OperationId:</strong>endServiceBreak</p>
     * End the service break
     */
    async endServiceBreakRaw(requestParameters: EndServiceBreakRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EndedServiceBreak>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/{taskSheetNumber}/end`.replace(`{${"taskSheetNumber"}}`, encodeURIComponent(String(requestParameters.taskSheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelServicingTaskRoomRequestToJSON(requestParameters.taskRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EndedServiceBreakFromJSON(jsonValue));
    }

    /**
     * This API allows you to end the Attendant\'s service break. <p><strong>OperationId:</strong>endServiceBreak</p>
     * End the service break
     */
    async endServiceBreak(requestParameters: EndServiceBreakRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EndedServiceBreak> {
        const response = await this.endServiceBreakRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to get facility forecast for Housekeeping attendants and tasks for a current or future start date . <p><strong>OperationId:</strong>getFacilityForecast</p>
     * Get facility forecast
     */
    async getFacilityForecastRaw(requestParameters: GetFacilityForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FacilityForecast>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.codes) {
            queryParameters['Codes'] = requestParameters.codes;
        }

        if (requestParameters.usePriority !== undefined) {
            queryParameters['usePriority'] = requestParameters.usePriority;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/forecastTaskSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FacilityForecastFromJSON(jsonValue));
    }

    /**
     * This API will allow you to get facility forecast for Housekeeping attendants and tasks for a current or future start date . <p><strong>OperationId:</strong>getFacilityForecast</p>
     * Get facility forecast
     */
    async getFacilityForecast(requestParameters: GetFacilityForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FacilityForecast> {
        const response = await this.getFacilityForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to get the guest housekeeping instructions. <p><strong>OperationId:</strong>getGuestHousekeepingNotes</p>
     * Get the guest housekeeping instructions
     */
    async getGuestHousekeepingNotesRaw(requestParameters: GetGuestHousekeepingNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestHousekeepingInstructions>> {
        const queryParameters: any = {};

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.housekeepingInstruction) {
            queryParameters['housekeepingInstruction'] = requestParameters.housekeepingInstruction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingNotes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestHousekeepingInstructionsFromJSON(jsonValue));
    }

    /**
     * This API will allow you to get the guest housekeeping instructions. <p><strong>OperationId:</strong>getGuestHousekeepingNotes</p>
     * Get the guest housekeeping instructions
     */
    async getGuestHousekeepingNotes(requestParameters: GetGuestHousekeepingNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestHousekeepingInstructions> {
        const response = await this.getGuestHousekeepingNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to get the existing task sheets. <p><strong>OperationId:</strong>getHouseKeepingTasks</p>
     * Get the existing task sheets
     */
    async getHouseKeepingTasksRaw(requestParameters: GetHouseKeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskAssignment>> {
        const queryParameters: any = {};

        if (requestParameters.taskDate !== undefined) {
            queryParameters['taskDate'] = (requestParameters.taskDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.attendantInRoomOnly !== undefined) {
            queryParameters['attendantInRoomOnly'] = requestParameters.attendantInRoomOnly;
        }

        if (requestParameters.generateCleaningSequence !== undefined) {
            queryParameters['generateCleaningSequence'] = requestParameters.generateCleaningSequence;
        }

        if (requestParameters.includeReservationInfo !== undefined) {
            queryParameters['includeReservationInfo'] = requestParameters.includeReservationInfo;
        }

        if (requestParameters.includeTaskSheetDetails !== undefined) {
            queryParameters['includeTaskSheetDetails'] = requestParameters.includeTaskSheetDetails;
        }

        if (requestParameters.includeTaskSheetsSummary !== undefined) {
            queryParameters['includeTaskSheetsSummary'] = requestParameters.includeTaskSheetsSummary;
        }

        if (requestParameters.sortByCleaningSequence !== undefined) {
            queryParameters['sortByCleaningSequence'] = requestParameters.sortByCleaningSequence;
        }

        if (requestParameters.taskCodes) {
            queryParameters['taskCodes'] = requestParameters.taskCodes;
        }

        if (requestParameters.taskHotelCodes) {
            queryParameters['taskHotelCodes'] = requestParameters.taskHotelCodes;
        }

        if (requestParameters.taskSequences) {
            queryParameters['taskSequences'] = requestParameters.taskSequences;
        }

        if (requestParameters.taskDescriptions) {
            queryParameters['taskDescriptions'] = requestParameters.taskDescriptions;
        }

        if (requestParameters.taskInstructions) {
            queryParameters['taskInstructions'] = requestParameters.taskInstructions;
        }

        if (requestParameters.facilityDepartureTask) {
            queryParameters['facilityDepartureTask'] = requestParameters.facilityDepartureTask;
        }

        if (requestParameters.linenChange) {
            queryParameters['linenChange'] = requestParameters.linenChange;
        }

        if (requestParameters.taskCodesBreakOutId !== undefined) {
            queryParameters['taskCodesBreakOutId'] = requestParameters.taskCodesBreakOutId;
        }

        if (requestParameters.taskCodesBreakOutIdContext !== undefined) {
            queryParameters['taskCodesBreakOutIdContext'] = requestParameters.taskCodesBreakOutIdContext;
        }

        if (requestParameters.taskCodesBreakOutIdType !== undefined) {
            queryParameters['taskCodesBreakOutIdType'] = requestParameters.taskCodesBreakOutIdType;
        }

        if (requestParameters.attendantId !== undefined) {
            queryParameters['attendantId'] = requestParameters.attendantId;
        }

        if (requestParameters.taskSheetNumber) {
            queryParameters['taskSheetNumber'] = requestParameters.taskSheetNumber;
        }

        if (requestParameters.housekeepingRoomStatus) {
            queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
        }

        if (requestParameters.guestService) {
            queryParameters['guestService'] = requestParameters.guestService;
        }

        if (requestParameters.roomStatusToChange) {
            queryParameters['roomStatusToChange'] = requestParameters.roomStatusToChange;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/houseKeepingtasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskAssignmentFromJSON(jsonValue));
    }

    /**
     * This API will allow you to get the existing task sheets. <p><strong>OperationId:</strong>getHouseKeepingTasks</p>
     * Get the existing task sheets
     */
    async getHouseKeepingTasks(requestParameters: GetHouseKeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskAssignment> {
        const response = await this.getHouseKeepingTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to get the housekeeping attendants schedule. <p><strong>OperationId:</strong>getHousekeepingAttendantsSchedule</p>
     * Get the housekeeping attendants schedule
     */
    async getHousekeepingAttendantsScheduleRaw(requestParameters: GetHousekeepingAttendantsScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttendantSchedule>> {
        const queryParameters: any = {};

        if (requestParameters.scheduleStartDate !== undefined) {
            queryParameters['scheduleStartDate'] = (requestParameters.scheduleStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.scheduleEndDate !== undefined) {
            queryParameters['scheduleEndDate'] = (requestParameters.scheduleEndDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/attendants/houseKeepingTasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttendantScheduleFromJSON(jsonValue));
    }

    /**
     * This API will allow you to get the housekeeping attendants schedule. <p><strong>OperationId:</strong>getHousekeepingAttendantsSchedule</p>
     * Get the housekeeping attendants schedule
     */
    async getHousekeepingAttendantsSchedule(requestParameters: GetHousekeepingAttendantsScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttendantSchedule> {
        const response = await this.getHousekeepingAttendantsScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    async getHousekeepingDiscrepanciesRaw(requestParameters: GetHousekeepingDiscrepanciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rooms>> {
        const queryParameters: any = {};

        if (requestParameters.roomDiscrepancyStatus) {
            queryParameters['roomDiscrepancyStatus'] = requestParameters.roomDiscrepancyStatus;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.housekeepingEndDate !== undefined) {
            queryParameters['housekeepingEndDate'] = (requestParameters.housekeepingEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.housekeepingStartDate !== undefined) {
            queryParameters['housekeepingStartDate'] = (requestParameters.housekeepingStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.floor) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.dueOut !== undefined) {
            queryParameters['dueOut'] = requestParameters.dueOut;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingDiscrepancies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to return the current housekeeping discrepant rooms for a specific property based on search parameters such as roomDiscrepancyStatus, roomClass, floor, dueOut, etc. These are rooms where the housekeeping status does not match the front office status.<p><strong>OperationId:</strong>getHousekeepingDiscrepancies</p>
     * Get hotel housekeeping discrepant rooms
     */
    async getHousekeepingDiscrepancies(requestParameters: GetHousekeepingDiscrepanciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rooms> {
        const response = await this.getHousekeepingDiscrepanciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    async getHousekeepingOverviewRaw(requestParameters: GetHousekeepingOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HousekeepingBoard>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.housekeepingRoomStatus) {
            queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
        }

        if (requestParameters.frontOfficeRoomStatus) {
            queryParameters['frontOfficeRoomStatus'] = requestParameters.frontOfficeRoomStatus;
        }

        if (requestParameters.turndownStatus) {
            queryParameters['turndownStatus'] = requestParameters.turndownStatus;
        }

        if (requestParameters.roomParityStatus) {
            queryParameters['roomParityStatus'] = requestParameters.roomParityStatus;
        }

        if (requestParameters.serviceRequestStatus) {
            queryParameters['serviceRequestStatus'] = requestParameters.serviceRequestStatus;
        }

        if (requestParameters.roomAssignmentStatus) {
            queryParameters['roomAssignmentStatus'] = requestParameters.roomAssignmentStatus;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.floor) {
            queryParameters['floor'] = requestParameters.floor;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.building) {
            queryParameters['building'] = requestParameters.building;
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.daySection) {
            queryParameters['daySection'] = requestParameters.daySection;
        }

        if (requestParameters.eveningSection) {
            queryParameters['eveningSection'] = requestParameters.eveningSection;
        }

        if (requestParameters.reservationStatus) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.guestServiceRequest !== undefined) {
            queryParameters['guestServiceRequest'] = requestParameters.guestServiceRequest;
        }

        if (requestParameters.roomIdText !== undefined) {
            queryParameters['roomIdText'] = requestParameters.roomIdText;
        }

        if (requestParameters.excludeCombo !== undefined) {
            queryParameters['excludeCombo'] = requestParameters.excludeCombo;
        }

        if (requestParameters.cleaningPriorityOnly !== undefined) {
            queryParameters['cleaningPriorityOnly'] = requestParameters.cleaningPriorityOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/housekeepingOverview`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HousekeepingBoardFromJSON(jsonValue));
    }

    /**
     * Use this API to return the status of rooms for a specific property based on search criteria such as hotelId, limit, housekeepingRoomStatus, frontOfficeRoomStatus, roomAssignmentStatus, roomType, roomFeatures. The results will give you a list of rooms, and their current housekeeping details.  You could then go ahead and update any of these rooms by using postOutOfOrderRoom for example. <p><strong>OperationId:</strong>getHousekeepingOverview</p>
     * Get housekeeping rooms overview
     */
    async getHousekeepingOverview(requestParameters: GetHousekeepingOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HousekeepingBoard> {
        const response = await this.getHousekeepingOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    async getOutOfOrderRoomsRaw(requestParameters: GetOutOfOrderRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rooms>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Order.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfOrderRooms</p>
     * Get Out of Order Rooms
     */
    async getOutOfOrderRooms(requestParameters: GetOutOfOrderRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rooms> {
        const response = await this.getOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    async getOutOfServiceRoomsRaw(requestParameters: GetOutOfServiceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rooms>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
    }

    /**
     * Use this API to get a list of rooms for a hotel that are Out of Service.  You can narrow down your results with search criteria such as Room class, Room Type, date range. <p><strong>OperationId:</strong>getOutOfServiceRooms</p>
     * Get Out of Service Rooms
     */
    async getOutOfServiceRooms(requestParameters: GetOutOfServiceRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rooms> {
        const response = await this.getOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to get reservation housekeeping schedule. <p><strong>OperationId:</strong>getReservationHousekeepingSchedule</p>
     * Get reservation housekeeping schedule
     */
    async getReservationHousekeepingScheduleRaw(requestParameters: GetReservationHousekeepingScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Schedule>> {
        const queryParameters: any = {};

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.beginDate !== undefined) {
            queryParameters['beginDate'] = (requestParameters.beginDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduleFromJSON(jsonValue));
    }

    /**
     * This API will allow you to get reservation housekeeping schedule. <p><strong>OperationId:</strong>getReservationHousekeepingSchedule</p>
     * Get reservation housekeeping schedule
     */
    async getReservationHousekeepingSchedule(requestParameters: GetReservationHousekeepingScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Schedule> {
        const response = await this.getReservationHousekeepingScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to get a list of rooms that have a condition set. <p><strong>OperationId:</strong>getRoomConditions</p>
     * Get rooms condition
     */
    async getRoomConditionsRaw(requestParameters: GetRoomConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Rooms>> {
        const queryParameters: any = {};

        if (requestParameters.roomConditionsOnly !== undefined) {
            queryParameters['roomConditionsOnly'] = requestParameters.roomConditionsOnly;
        }

        if (requestParameters.roomWithoutConditionsOnly !== undefined) {
            queryParameters['roomWithoutConditionsOnly'] = requestParameters.roomWithoutConditionsOnly;
        }

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.fromRoomNumber !== undefined) {
            queryParameters['fromRoomNumber'] = requestParameters.fromRoomNumber;
        }

        if (requestParameters.toRoomNumber !== undefined) {
            queryParameters['toRoomNumber'] = requestParameters.toRoomNumber;
        }

        if (requestParameters.roomConditions) {
            queryParameters['roomConditions'] = requestParameters.roomConditions;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.frontOfficeRoomStatus) {
            queryParameters['frontOfficeRoomStatus'] = requestParameters.frontOfficeRoomStatus;
        }

        if (requestParameters.reservationStatuses) {
            queryParameters['reservationStatuses'] = requestParameters.reservationStatuses;
        }

        if (requestParameters.roomAssignmentStatus) {
            queryParameters['roomAssignmentStatus'] = requestParameters.roomAssignmentStatus;
        }

        if (requestParameters.floors) {
            queryParameters['floors'] = requestParameters.floors;
        }

        if (requestParameters.roomFeatures) {
            queryParameters['roomFeatures'] = requestParameters.roomFeatures;
        }

        if (requestParameters.amSections) {
            queryParameters['amSections'] = requestParameters.amSections;
        }

        if (requestParameters.pmSections) {
            queryParameters['pmSections'] = requestParameters.pmSections;
        }

        if (requestParameters.buildings) {
            queryParameters['buildings'] = requestParameters.buildings;
        }

        if (requestParameters.housekeepingRoomStatus) {
            queryParameters['housekeepingRoomStatus'] = requestParameters.housekeepingRoomStatus;
        }

        if (requestParameters.roomParityStatus) {
            queryParameters['roomParityStatus'] = requestParameters.roomParityStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/conditions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomsFromJSON(jsonValue));
    }

    /**
     * This API will allow you to get a list of rooms that have a condition set. <p><strong>OperationId:</strong>getRoomConditions</p>
     * Get rooms condition
     */
    async getRoomConditions(requestParameters: GetRoomConditionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Rooms> {
        const response = await this.getRoomConditionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a list of rooms with maintenances. <p><strong>OperationId:</strong>getRoomMaintenance</p>
     * Get the maintenance rooms
     */
    async getRoomMaintenanceRaw(requestParameters: GetRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomMaintenanceDetails>> {
        const queryParameters: any = {};

        if (requestParameters.roomIdText !== undefined) {
            queryParameters['roomIdText'] = requestParameters.roomIdText;
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.roomClasses) {
            queryParameters['roomClasses'] = requestParameters.roomClasses;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.maintenanceCodes) {
            queryParameters['maintenanceCodes'] = requestParameters.maintenanceCodes;
        }

        if (requestParameters.roomMaintenanceStatus !== undefined) {
            queryParameters['roomMaintenanceStatus'] = requestParameters.roomMaintenanceStatus;
        }

        if (requestParameters.assignedUserId) {
            queryParameters['assignedUserId'] = requestParameters.assignedUserId;
        }

        if (requestParameters.assignedUserIdContext) {
            queryParameters['assignedUserIdContext'] = requestParameters.assignedUserIdContext;
        }

        if (requestParameters.assignedUserIdType) {
            queryParameters['assignedUserIdType'] = requestParameters.assignedUserIdType;
        }

        if (requestParameters.maintenanceId !== undefined) {
            queryParameters['maintenanceId'] = requestParameters.maintenanceId;
        }

        if (requestParameters.maintenanceIdContext !== undefined) {
            queryParameters['maintenanceIdContext'] = requestParameters.maintenanceIdContext;
        }

        if (requestParameters.maintenanceIdType !== undefined) {
            queryParameters['maintenanceIdType'] = requestParameters.maintenanceIdType;
        }

        if (requestParameters.resolvedEndDate !== undefined) {
            queryParameters['resolvedEndDate'] = (requestParameters.resolvedEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.resolvedStartDate !== undefined) {
            queryParameters['resolvedStartDate'] = (requestParameters.resolvedStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.includeImages !== undefined) {
            queryParameters['includeImages'] = requestParameters.includeImages;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/maintenances`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomMaintenanceDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get a list of rooms with maintenances. <p><strong>OperationId:</strong>getRoomMaintenance</p>
     * Get the maintenance rooms
     */
    async getRoomMaintenance(requestParameters: GetRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomMaintenanceDetails> {
        const response = await this.getRoomMaintenanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to get task companion. <p><strong>OperationId:</strong>getTaskCompanion</p>
     * Get task companion
     */
    async getTaskCompanionRaw(requestParameters: GetTaskCompanionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCompanion>> {
        const queryParameters: any = {};

        if (requestParameters.taskCodes) {
            queryParameters['taskCodes'] = requestParameters.taskCodes;
        }

        if (requestParameters.taskDate !== undefined) {
            queryParameters['taskDate'] = (requestParameters.taskDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomId !== undefined) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.skipRoomNumbers) {
            queryParameters['skipRoomNumbers'] = requestParameters.skipRoomNumbers;
        }

        if (requestParameters.roomStatusToChange) {
            queryParameters['roomStatusToChange'] = requestParameters.roomStatusToChange;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sheets/{sheetNumber}`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCompanionFromJSON(jsonValue));
    }

    /**
     * This API allows you to get task companion. <p><strong>OperationId:</strong>getTaskCompanion</p>
     * Get task companion
     */
    async getTaskCompanion(requestParameters: GetTaskCompanionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCompanion> {
        const response = await this.getTaskCompanionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to get the task sheet templates. <p><strong>OperationId:</strong>getTaskSheetTemplate</p>
     * Get the task sheet templates
     */
    async getTaskSheetTemplateRaw(requestParameters: GetTaskSheetTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskSheetTemplate>> {
        const queryParameters: any = {};

        if (requestParameters.templateCode !== undefined) {
            queryParameters['templateCode'] = requestParameters.templateCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheetTemplates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskSheetTemplateFromJSON(jsonValue));
    }

    /**
     * This API allows you to get the task sheet templates. <p><strong>OperationId:</strong>getTaskSheetTemplate</p>
     * Get the task sheet templates
     */
    async getTaskSheetTemplate(requestParameters: GetTaskSheetTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskSheetTemplate> {
        const response = await this.getTaskSheetTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Lock the task sheet. <p><strong>OperationId:</strong>lockTaskSheet</p>
     * Lock the task sheet
     */
    async lockTaskSheetRaw(requestParameters: LockTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LockedTaskSheet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/{sheetNumber}/lock`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LockTaskSheetRequestToJSON(requestParameters.taskSheetToLock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LockedTaskSheetFromJSON(jsonValue));
    }

    /**
     * This API allows you to Lock the task sheet. <p><strong>OperationId:</strong>lockTaskSheet</p>
     * Lock the task sheet
     */
    async lockTaskSheet(requestParameters: LockTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LockedTaskSheet> {
        const response = await this.lockTaskSheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to merge task sheet. <p><strong>OperationId:</strong>mergeTaskSheet</p>
     * Merge task sheet
     */
    async mergeTaskSheetRaw(requestParameters: MergeTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/{toTaskSequenceNo}/merge`.replace(`{${"toTaskSequenceNo"}}`, encodeURIComponent(String(requestParameters.toTaskSequenceNo))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergeTaskSheetRequestToJSON(requestParameters.taskSheetToMerge),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to merge task sheet. <p><strong>OperationId:</strong>mergeTaskSheet</p>
     * Merge task sheet
     */
    async mergeTaskSheet(requestParameters: MergeTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.mergeTaskSheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to Move the tasksheet rooms. <p><strong>OperationId:</strong>moveTaskRooms</p>
     * Move the task rooms
     */
    async moveTaskRoomsRaw(requestParameters: MoveTaskRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MovedTaskRoomsRS>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/moveTaskRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveTaskRoomsRequestToJSON(requestParameters.moveTaskRooms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MovedTaskRoomsRSFromJSON(jsonValue));
    }

    /**
     * This API will allow you to Move the tasksheet rooms. <p><strong>OperationId:</strong>moveTaskRooms</p>
     * Move the task rooms
     */
    async moveTaskRooms(requestParameters: MoveTaskRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MovedTaskRoomsRS> {
        const response = await this.moveTaskRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to create housekeeping attendant schedule. <p><strong>OperationId:</strong>postHousekeepingAttendantSchedule</p>
     * Create housekeeping attendant schedule
     */
    async postHousekeepingAttendantScheduleRaw(requestParameters: PostHousekeepingAttendantScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/schedules/houseKeepingTasks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHousekeepingAttendantScheduleRequestToJSON(requestParameters.attendantSchedule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to create housekeeping attendant schedule. <p><strong>OperationId:</strong>postHousekeepingAttendantSchedule</p>
     * Create housekeeping attendant schedule
     */
    async postHousekeepingAttendantSchedule(requestParameters: PostHousekeepingAttendantScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHousekeepingAttendantScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    async postOutOfOrderRoomsRaw(requestParameters: PostOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfOrderRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOutOfOrderRoomsRequestToJSON(requestParameters.roomRepairOutOfOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Order\' housekeeping status and update existing outOfOrderRooms. <p><strong>OperationId:</strong>postOutOfOrderRooms</p>
     * Set multiple rooms to Out Of Order
     */
    async postOutOfOrderRooms(requestParameters: PostOutOfOrderRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOutOfOrderRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    async postOutOfServiceRoomsRaw(requestParameters: PostOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/outOfServiceRooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOutOfServiceRoomsRequestToJSON(requestParameters.roomRepairOutOfService),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to initially set rooms to \'Out Of Service\' housekeeping status and update existing outOfServiceRooms. <p><strong>OperationId:</strong>postOutOfServiceRooms</p>
     * Set multiple rooms to Out Of Service
     */
    async postOutOfServiceRooms(requestParameters: PostOutOfServiceRoomsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOutOfServiceRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to create reservation housekeeping tasks. <p><strong>OperationId:</strong>postReservationHousekeepingTasks</p>
     * Create reservation housekeeping tasks
     */
    async postReservationHousekeepingTasksRaw(requestParameters: PostReservationHousekeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditReservationHousekeepingTasksRequestToJSON(requestParameters.schedule),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to create reservation housekeeping tasks. <p><strong>OperationId:</strong>postReservationHousekeepingTasks</p>
     * Create reservation housekeeping tasks
     */
    async postReservationHousekeepingTasks(requestParameters: PostReservationHousekeepingTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postReservationHousekeepingTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create maintenances for rooms. <p><strong>OperationId:</strong>postRoomMaintenance</p>
     * Create maintenances for rooms
     */
    async postRoomMaintenanceRaw(requestParameters: PostRoomMaintenanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/maintenanceCodes/{maintenanceCode}`.replace(`{${"maintenanceCode"}}`, encodeURIComponent(String(requestParameters.maintenanceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRoomMaintenanceRequestToJSON(requestParameters.roomMaintenanceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create maintenances for rooms. <p><strong>OperationId:</strong>postRoomMaintenance</p>
     * Create maintenances for rooms
     */
    async postRoomMaintenance(requestParameters: PostRoomMaintenanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomMaintenanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create the task sheet. <p><strong>OperationId:</strong>postTaskSheet</p>
     * Create the task sheet
     */
    async postTaskSheetRaw(requestParameters: PostTaskSheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutTaskSheetRequestToJSON(requestParameters.taskSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create the task sheet. <p><strong>OperationId:</strong>postTaskSheet</p>
     * Create the task sheet
     */
    async postTaskSheet(requestParameters: PostTaskSheetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTaskSheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create the task sheet rooms. <p><strong>OperationId:</strong>postTaskSheetRooms</p>
     * Create the task sheet rooms
     */
    async postTaskSheetRoomsRaw(requestParameters: PostTaskSheetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutTaskSheetRequestToJSON(requestParameters.taskSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create the task sheet rooms. <p><strong>OperationId:</strong>postTaskSheetRooms</p>
     * Create the task sheet rooms
     */
    async postTaskSheetRooms(requestParameters: PostTaskSheetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTaskSheetRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to delete room cleaning priority. <p><strong>OperationId:</strong>putRoomCleaningPriority</p>
     * Delete room cleaning priority
     */
    async putRoomCleaningPriorityRaw(requestParameters: PutRoomCleaningPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/cleaningPriority`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete room cleaning priority. <p><strong>OperationId:</strong>putRoomCleaningPriority</p>
     * Delete room cleaning priority
     */
    async putRoomCleaningPriority(requestParameters: PutRoomCleaningPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomCleaningPriorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change the maintenances for rooms. <p><strong>OperationId:</strong>putRoomMaintenance</p>
     * Change maintenances for rooms
     */
    async putRoomMaintenanceRaw(requestParameters: PutRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedRoomMaintenance>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/maintenances/{maintenanceId}`.replace(`{${"maintenanceId"}}`, encodeURIComponent(String(requestParameters.maintenanceId))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResolveRoomMaintenanceRequestToJSON(requestParameters.roomMaintenance),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedRoomMaintenanceFromJSON(jsonValue));
    }

    /**
     * Use this API to change the maintenances for rooms. <p><strong>OperationId:</strong>putRoomMaintenance</p>
     * Change maintenances for rooms
     */
    async putRoomMaintenance(requestParameters: PutRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedRoomMaintenance> {
        const response = await this.putRoomMaintenanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    async putRoomRelatedStatusRaw(requestParameters: PutRoomRelatedStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HousekeepingRoomStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/status`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomRelatedStatusRequestToJSON(requestParameters.housekeepingRoomStatusCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HousekeepingRoomStatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update the housekeeping room status for multiple rooms.  Statuses typically include Inspected, Clean, Pickup or Dirty. <p><strong>OperationId:</strong>putRoomRelatedStatus</p>
     * Update Housekeeping Room Status
     */
    async putRoomRelatedStatus(requestParameters: PutRoomRelatedStatusOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HousekeepingRoomStatus> {
        const response = await this.putRoomRelatedStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to change the task sheet. <p><strong>OperationId:</strong>putTaskSheet</p>
     * Change the task sheet
     */
    async putTaskSheetRaw(requestParameters: PutTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedTaskSheet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTaskSheetRequestToJSON(requestParameters.taskSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedTaskSheetFromJSON(jsonValue));
    }

    /**
     * This API allows you to change the task sheet. <p><strong>OperationId:</strong>putTaskSheet</p>
     * Change the task sheet
     */
    async putTaskSheet(requestParameters: PutTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedTaskSheet> {
        const response = await this.putTaskSheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to change the task sheet rooms. <p><strong>OperationId:</strong>putTaskSheetRooms</p>
     * Change the task sheet rooms
     */
    async putTaskSheetRoomsRaw(requestParameters: PutTaskSheetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedTaskSheetRooms>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/rooms`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTaskSheetRequestToJSON(requestParameters.taskSheet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedTaskSheetRoomsFromJSON(jsonValue));
    }

    /**
     * This API allows you to change the task sheet rooms. <p><strong>OperationId:</strong>putTaskSheetRooms</p>
     * Change the task sheet rooms
     */
    async putTaskSheetRooms(requestParameters: PutTaskSheetRoomsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedTaskSheetRooms> {
        const response = await this.putTaskSheetRoomsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to change the task sheet templates. <p><strong>OperationId:</strong>putTaskSheetTemplate</p>
     * Change the task sheet templates
     */
    async putTaskSheetTemplateRaw(requestParameters: PutTaskSheetTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangedTaskSheetTemplate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheetTemplates/{taskSheetTemplateCode}`.replace(`{${"taskSheetTemplateCode"}}`, encodeURIComponent(String(requestParameters.taskSheetTemplateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTaskSheetTemplateRequestToJSON(requestParameters.taskSheetTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangedTaskSheetTemplateFromJSON(jsonValue));
    }

    /**
     * This API allows you to change the task sheet templates. <p><strong>OperationId:</strong>putTaskSheetTemplate</p>
     * Change the task sheet templates
     */
    async putTaskSheetTemplate(requestParameters: PutTaskSheetTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangedTaskSheetTemplate> {
        const response = await this.putTaskSheetTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to reset reservation housekeeping schedule. <p><strong>OperationId:</strong>resetReservationHousekeepingSchedule</p>
     * Reset reservation housekeeping schedule
     */
    async resetReservationHousekeepingScheduleRaw(requestParameters: ResetReservationHousekeepingScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduledSearch>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules/reset`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResetReservationHousekeepingScheduleRequestToJSON(requestParameters.scheduleSearch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledSearchFromJSON(jsonValue));
    }

    /**
     * This API will allow you to reset reservation housekeeping schedule. <p><strong>OperationId:</strong>resetReservationHousekeepingSchedule</p>
     * Reset reservation housekeeping schedule
     */
    async resetReservationHousekeepingSchedule(requestParameters: ResetReservationHousekeepingScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduledSearch> {
        const response = await this.resetReservationHousekeepingScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Resolve maintenances for rooms. <p><strong>OperationId:</strong>resolveRoomMaintenance</p>
     * Resolve maintenances for rooms
     */
    async resolveRoomMaintenanceRaw(requestParameters: ResolveRoomMaintenanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResolvedRoomMaintenance>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/maintenances/{mainteananceId}/resolve`.replace(`{${"mainteananceId"}}`, encodeURIComponent(String(requestParameters.mainteananceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResolveRoomMaintenanceRequestToJSON(requestParameters.roomMaintenance),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResolvedRoomMaintenanceFromJSON(jsonValue));
    }

    /**
     * Use this API to Resolve maintenances for rooms. <p><strong>OperationId:</strong>resolveRoomMaintenance</p>
     * Resolve maintenances for rooms
     */
    async resolveRoomMaintenance(requestParameters: ResolveRoomMaintenanceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResolvedRoomMaintenance> {
        const response = await this.resolveRoomMaintenanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to Set guest housekeeping instructions. <p><strong>OperationId:</strong>setGuestHousekeepingNotes</p>
     * Set guest housekeeping instructions
     */
    async setGuestHousekeepingNotesRaw(requestParameters: SetGuestHousekeepingNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestHousekeepingService>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingNotes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetGuestHousekeepingNotesRequestToJSON(requestParameters.guestHousekeepingServiceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestHousekeepingServiceFromJSON(jsonValue));
    }

    /**
     * This API will allow you to Set guest housekeeping instructions. <p><strong>OperationId:</strong>setGuestHousekeepingNotes</p>
     * Set guest housekeeping instructions
     */
    async setGuestHousekeepingNotes(requestParameters: SetGuestHousekeepingNotesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestHousekeepingService> {
        const response = await this.setGuestHousekeepingNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Set the guest housekeeping service requests <p><strong>OperationId:</strong>setGuestHousekeepingServiceRequest</p>
     * Set the Guest housekeeping service requests
     */
    async setGuestHousekeepingServiceRequestRaw(requestParameters: SetGuestHousekeepingServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestHousekeepingServiceRequestStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequests`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetGuestHousekeepingServiceRequestRequestToJSON(requestParameters.guestHousekeepingServiceRequestCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestHousekeepingServiceRequestStatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to Set the guest housekeeping service requests <p><strong>OperationId:</strong>setGuestHousekeepingServiceRequest</p>
     * Set the Guest housekeeping service requests
     */
    async setGuestHousekeepingServiceRequest(requestParameters: SetGuestHousekeepingServiceRequestOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestHousekeepingServiceRequestStatus> {
        const response = await this.setGuestHousekeepingServiceRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to set the room cleaning priority. <p><strong>OperationId:</strong>setRoomCleaningPriority</p>
     * Set the room cleaning priority
     */
    async setRoomCleaningPriorityRaw(requestParameters: SetRoomCleaningPriorityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomCleaningPriorityRequestStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/cleaningPriority`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetRoomCleaningPriorityRequestToJSON(requestParameters.roomCleaningPriority),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomCleaningPriorityRequestStatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to set the room cleaning priority. <p><strong>OperationId:</strong>setRoomCleaningPriority</p>
     * Set the room cleaning priority
     */
    async setRoomCleaningPriority(requestParameters: SetRoomCleaningPriorityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomCleaningPriorityRequestStatus> {
        const response = await this.setRoomCleaningPriorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to set, change, or delete a condition on rooms. A condition is used to designate rooms that are available for show, set aside for special housekeeping attention, or are to be treated differently for any other reason. <p><strong>OperationId:</strong>setRoomCondition</p>
     * Set rooms condition
     */
    async setRoomConditionRaw(requestParameters: SetRoomConditionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomConditionRequestStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/conditions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetRoomConditionRequestToJSON(requestParameters.roomCondition),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomConditionRequestStatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to set, change, or delete a condition on rooms. A condition is used to designate rooms that are available for show, set aside for special housekeeping attention, or are to be treated differently for any other reason. <p><strong>OperationId:</strong>setRoomCondition</p>
     * Set rooms condition
     */
    async setRoomCondition(requestParameters: SetRoomConditionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomConditionRequestStatus> {
        const response = await this.setRoomConditionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to shift reservation housekeeping schedule. <p><strong>OperationId:</strong>shiftReservationHousekeepingSchedule</p>
     * Shift reservation housekeeping schedule
     */
    async shiftReservationHousekeepingScheduleRaw(requestParameters: ShiftReservationHousekeepingScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScheduledShiftRequest>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/houseKeepingTaskSchedules/shift`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShiftReservationHousekeepingScheduleRequestToJSON(requestParameters.scheduleShiftRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScheduledShiftRequestFromJSON(jsonValue));
    }

    /**
     * This API will allow you to shift reservation housekeeping schedule. <p><strong>OperationId:</strong>shiftReservationHousekeepingSchedule</p>
     * Shift reservation housekeeping schedule
     */
    async shiftReservationHousekeepingSchedule(requestParameters: ShiftReservationHousekeepingScheduleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScheduledShiftRequest> {
        const response = await this.shiftReservationHousekeepingScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to Skip servicing task room. <p><strong>OperationId:</strong>skipServicingTaskRoom</p>
     * Skip servicing task room
     */
    async skipServicingTaskRoomRaw(requestParameters: SkipServicingTaskRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SkipedServicingTaskRoom>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/skip`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelServicingTaskRoomRequestToJSON(requestParameters.taskRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SkipedServicingTaskRoomFromJSON(jsonValue));
    }

    /**
     * This API will allow you to Skip servicing task room. <p><strong>OperationId:</strong>skipServicingTaskRoom</p>
     * Skip servicing task room
     */
    async skipServicingTaskRoom(requestParameters: SkipServicingTaskRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SkipedServicingTaskRoom> {
        const response = await this.skipServicingTaskRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Start the Attendant\'s service break. <p><strong>OperationId:</strong>startServiceBreak</p>
     * Start the service break
     */
    async startServiceBreakRaw(requestParameters: StartServiceBreakRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StartedServiceBreak>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/{taskSheetNumber}/start`.replace(`{${"taskSheetNumber"}}`, encodeURIComponent(String(requestParameters.taskSheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelServicingTaskRoomRequestToJSON(requestParameters.taskRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartedServiceBreakFromJSON(jsonValue));
    }

    /**
     * This API allows you to Start the Attendant\'s service break. <p><strong>OperationId:</strong>startServiceBreak</p>
     * Start the service break
     */
    async startServiceBreak(requestParameters: StartServiceBreakRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StartedServiceBreak> {
        const response = await this.startServiceBreakRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to start servicing task room. <p><strong>OperationId:</strong>startServicingTaskRoom</p>
     * Start servicing task room
     */
    async startServicingTaskRoomRaw(requestParameters: StartServicingTaskRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceTime>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/sheets/{sheetNumber}/start`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancelServicingTaskRoomRequestToJSON(requestParameters.taskRoom),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceTimeFromJSON(jsonValue));
    }

    /**
     * This API will allow you to start servicing task room. <p><strong>OperationId:</strong>startServicingTaskRoom</p>
     * Start servicing task room
     */
    async startServicingTaskRoom(requestParameters: StartServicingTaskRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceTime> {
        const response = await this.startServicingTaskRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to unResolve maintenances for rooms. <p><strong>OperationId:</strong>unResolveRoomMaintenance</p>
     * unResolve the maintenances for rooms
     */
    async unResolveRoomMaintenanceRaw(requestParameters: UnResolveRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnresolvedRoomMaintenance>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/maintenances/{mainteananceId}/unResolve`.replace(`{${"mainteananceId"}}`, encodeURIComponent(String(requestParameters.mainteananceId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResolveRoomMaintenanceRequestToJSON(requestParameters.roomMaintenance),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnresolvedRoomMaintenanceFromJSON(jsonValue));
    }

    /**
     * Use this API to unResolve maintenances for rooms. <p><strong>OperationId:</strong>unResolveRoomMaintenance</p>
     * unResolve the maintenances for rooms
     */
    async unResolveRoomMaintenance(requestParameters: UnResolveRoomMaintenanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnresolvedRoomMaintenance> {
        const response = await this.unResolveRoomMaintenanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Unlock the task sheet. <p><strong>OperationId:</strong>unlockTaskSheet</p>
     * Unlock the task sheet
     */
    async unlockTaskSheetRaw(requestParameters: UnlockTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnlockedTaskSheet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/taskSheets/{sheetNumber}/unlock`.replace(`{${"sheetNumber"}}`, encodeURIComponent(String(requestParameters.sheetNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UnlockTaskSheetRequestToJSON(requestParameters.taskSheetToUnlock),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlockedTaskSheetFromJSON(jsonValue));
    }

    /**
     * This API allows you to Unlock the task sheet. <p><strong>OperationId:</strong>unlockTaskSheet</p>
     * Unlock the task sheet
     */
    async unlockTaskSheet(requestParameters: UnlockTaskSheetOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnlockedTaskSheet> {
        const response = await this.unlockTaskSheetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteReservationHousekeepingTasksStayPeriodEnum = {
    EntireStay: 'EntireStay',
    SpecificDates: 'SpecificDates'
} as const;
export type DeleteReservationHousekeepingTasksStayPeriodEnum = typeof DeleteReservationHousekeepingTasksStayPeriodEnum[keyof typeof DeleteReservationHousekeepingTasksStayPeriodEnum];
/**
 * @export
 */
export const GetGuestHousekeepingNotesHousekeepingInstructionEnum = {
    Turndown: 'Turndown',
    CleaningPriority: 'CleaningPriority',
    ServiceRequest: 'ServiceRequest'
} as const;
export type GetGuestHousekeepingNotesHousekeepingInstructionEnum = typeof GetGuestHousekeepingNotesHousekeepingInstructionEnum[keyof typeof GetGuestHousekeepingNotesHousekeepingInstructionEnum];
/**
 * @export
 */
export const GetHouseKeepingTasksHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHouseKeepingTasksHousekeepingRoomStatusEnum = typeof GetHouseKeepingTasksHousekeepingRoomStatusEnum[keyof typeof GetHouseKeepingTasksHousekeepingRoomStatusEnum];
/**
 * @export
 */
export const GetHouseKeepingTasksGuestServiceEnum = {
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom',
    NoStatusSelected: 'NoStatusSelected'
} as const;
export type GetHouseKeepingTasksGuestServiceEnum = typeof GetHouseKeepingTasksGuestServiceEnum[keyof typeof GetHouseKeepingTasksGuestServiceEnum];
/**
 * @export
 */
export const GetHouseKeepingTasksRoomStatusToChangeEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHouseKeepingTasksRoomStatusToChangeEnum = typeof GetHouseKeepingTasksRoomStatusToChangeEnum[keyof typeof GetHouseKeepingTasksRoomStatusToChangeEnum];
/**
 * @export
 */
export const GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = {
    Sleep: 'Sleep',
    Skip: 'Skip',
    PersonDiscrepancy: 'PersonDiscrepancy'
} as const;
export type GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum = typeof GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum[keyof typeof GetHousekeepingDiscrepanciesRoomDiscrepancyStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetHousekeepingOverviewHousekeepingRoomStatusEnum = typeof GetHousekeepingOverviewHousekeepingRoomStatusEnum[keyof typeof GetHousekeepingOverviewHousekeepingRoomStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewFrontOfficeRoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
} as const;
export type GetHousekeepingOverviewFrontOfficeRoomStatusEnum = typeof GetHousekeepingOverviewFrontOfficeRoomStatusEnum[keyof typeof GetHousekeepingOverviewFrontOfficeRoomStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewTurndownStatusEnum = {
    Required: 'Required',
    NotRequired: 'NotRequired',
    Compeleted: 'Compeleted'
} as const;
export type GetHousekeepingOverviewTurndownStatusEnum = typeof GetHousekeepingOverviewTurndownStatusEnum[keyof typeof GetHousekeepingOverviewTurndownStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewRoomParityStatusEnum = {
    Odd: 'Odd',
    Even: 'Even'
} as const;
export type GetHousekeepingOverviewRoomParityStatusEnum = typeof GetHousekeepingOverviewRoomParityStatusEnum[keyof typeof GetHousekeepingOverviewRoomParityStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewServiceRequestStatusEnum = {
    Open: 'Open',
    PendingFollowUp: 'PendingFollowUp',
    Closed: 'Closed',
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom'
} as const;
export type GetHousekeepingOverviewServiceRequestStatusEnum = typeof GetHousekeepingOverviewServiceRequestStatusEnum[keyof typeof GetHousekeepingOverviewServiceRequestStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewRoomAssignmentStatusEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
} as const;
export type GetHousekeepingOverviewRoomAssignmentStatusEnum = typeof GetHousekeepingOverviewRoomAssignmentStatusEnum[keyof typeof GetHousekeepingOverviewRoomAssignmentStatusEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewFetchInstructionsEnum = {
    Summary: 'Summary',
    ResvInfo: 'ResvInfo',
    TurndownInfo: 'TurndownInfo'
} as const;
export type GetHousekeepingOverviewFetchInstructionsEnum = typeof GetHousekeepingOverviewFetchInstructionsEnum[keyof typeof GetHousekeepingOverviewFetchInstructionsEnum];
/**
 * @export
 */
export const GetHousekeepingOverviewGuestServiceRequestEnum = {
    DoNotDisturb: 'DoNotDisturb',
    MakeUpRoom: 'MakeUpRoom',
    NoStatusSelected: 'NoStatusSelected'
} as const;
export type GetHousekeepingOverviewGuestServiceRequestEnum = typeof GetHousekeepingOverviewGuestServiceRequestEnum[keyof typeof GetHousekeepingOverviewGuestServiceRequestEnum];
/**
 * @export
 */
export const GetReservationHousekeepingScheduleFetchInstructionsEnum = {
    HousekeepingInstructions: 'HousekeepingInstructions',
    FacilitySchedule: 'FacilitySchedule'
} as const;
export type GetReservationHousekeepingScheduleFetchInstructionsEnum = typeof GetReservationHousekeepingScheduleFetchInstructionsEnum[keyof typeof GetReservationHousekeepingScheduleFetchInstructionsEnum];
/**
 * @export
 */
export const GetRoomConditionsFrontOfficeRoomStatusEnum = {
    Vacant: 'Vacant',
    Occupied: 'Occupied'
} as const;
export type GetRoomConditionsFrontOfficeRoomStatusEnum = typeof GetRoomConditionsFrontOfficeRoomStatusEnum[keyof typeof GetRoomConditionsFrontOfficeRoomStatusEnum];
/**
 * @export
 */
export const GetRoomConditionsRoomAssignmentStatusEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
} as const;
export type GetRoomConditionsRoomAssignmentStatusEnum = typeof GetRoomConditionsRoomAssignmentStatusEnum[keyof typeof GetRoomConditionsRoomAssignmentStatusEnum];
/**
 * @export
 */
export const GetRoomConditionsHousekeepingRoomStatusEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetRoomConditionsHousekeepingRoomStatusEnum = typeof GetRoomConditionsHousekeepingRoomStatusEnum[keyof typeof GetRoomConditionsHousekeepingRoomStatusEnum];
/**
 * @export
 */
export const GetRoomConditionsRoomParityStatusEnum = {
    Odd: 'Odd',
    Even: 'Even'
} as const;
export type GetRoomConditionsRoomParityStatusEnum = typeof GetRoomConditionsRoomParityStatusEnum[keyof typeof GetRoomConditionsRoomParityStatusEnum];
/**
 * @export
 */
export const GetRoomMaintenanceRoomMaintenanceStatusEnum = {
    All: 'All',
    UnResolved: 'UnResolved',
    Resolved: 'Resolved'
} as const;
export type GetRoomMaintenanceRoomMaintenanceStatusEnum = typeof GetRoomMaintenanceRoomMaintenanceStatusEnum[keyof typeof GetRoomMaintenanceRoomMaintenanceStatusEnum];
/**
 * @export
 */
export const GetTaskCompanionRoomStatusToChangeEnum = {
    Clean: 'Clean',
    Dirty: 'Dirty',
    Pickup: 'Pickup',
    Inspected: 'Inspected',
    OutOfOrder: 'OutOfOrder',
    OutOfService: 'OutOfService'
} as const;
export type GetTaskCompanionRoomStatusToChangeEnum = typeof GetTaskCompanionRoomStatusToChangeEnum[keyof typeof GetTaskCompanionRoomStatusToChangeEnum];
