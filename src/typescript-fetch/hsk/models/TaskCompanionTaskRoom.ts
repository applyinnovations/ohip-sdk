/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppUserOnBreakType } from './AppUserOnBreakType';
import {
    AppUserOnBreakTypeFromJSON,
    AppUserOnBreakTypeFromJSONTyped,
    AppUserOnBreakTypeToJSON,
} from './AppUserOnBreakType';
import type { DepartureTaskInfoType } from './DepartureTaskInfoType';
import {
    DepartureTaskInfoTypeFromJSON,
    DepartureTaskInfoTypeFromJSONTyped,
    DepartureTaskInfoTypeToJSON,
} from './DepartureTaskInfoType';
import type { FacilityCodeType } from './FacilityCodeType';
import {
    FacilityCodeTypeFromJSON,
    FacilityCodeTypeFromJSONTyped,
    FacilityCodeTypeToJSON,
} from './FacilityCodeType';
import type { HousekeepingCreditsType } from './HousekeepingCreditsType';
import {
    HousekeepingCreditsTypeFromJSON,
    HousekeepingCreditsTypeFromJSONTyped,
    HousekeepingCreditsTypeToJSON,
} from './HousekeepingCreditsType';
import type { HousekeepingTaskCodeType } from './HousekeepingTaskCodeType';
import {
    HousekeepingTaskCodeTypeFromJSON,
    HousekeepingTaskCodeTypeFromJSONTyped,
    HousekeepingTaskCodeTypeToJSON,
} from './HousekeepingTaskCodeType';
import type { HousekeepingTaskTypeAttendant } from './HousekeepingTaskTypeAttendant';
import {
    HousekeepingTaskTypeAttendantFromJSON,
    HousekeepingTaskTypeAttendantFromJSONTyped,
    HousekeepingTaskTypeAttendantToJSON,
} from './HousekeepingTaskTypeAttendant';
import type { HousekeepingTaskTypeRoomCountsInner } from './HousekeepingTaskTypeRoomCountsInner';
import {
    HousekeepingTaskTypeRoomCountsInnerFromJSON,
    HousekeepingTaskTypeRoomCountsInnerFromJSONTyped,
    HousekeepingTaskTypeRoomCountsInnerToJSON,
} from './HousekeepingTaskTypeRoomCountsInner';
import type { ServicingAttendantStatusType } from './ServicingAttendantStatusType';
import {
    ServicingAttendantStatusTypeFromJSON,
    ServicingAttendantStatusTypeFromJSONTyped,
    ServicingAttendantStatusTypeToJSON,
} from './ServicingAttendantStatusType';
import type { TaskCompanionTaskRoomRoomsInner } from './TaskCompanionTaskRoomRoomsInner';
import {
    TaskCompanionTaskRoomRoomsInnerFromJSON,
    TaskCompanionTaskRoomRoomsInnerFromJSONTyped,
    TaskCompanionTaskRoomRoomsInnerToJSON,
} from './TaskCompanionTaskRoomRoomsInner';
import type { TaskSheetType } from './TaskSheetType';
import {
    TaskSheetTypeFromJSON,
    TaskSheetTypeFromJSONTyped,
    TaskSheetTypeToJSON,
} from './TaskSheetType';

/**
 * Details of the room and the task sheet.
 * @export
 * @interface TaskCompanionTaskRoom
 */
export interface TaskCompanionTaskRoom {
    /**
     * Indicates if all the possible rooms to be evaluated have been skipped.
     * @type {boolean}
     * @memberof TaskCompanionTaskRoom
     */
    allEvaluatedRoomsSkipped?: boolean;
    /**
     * 
     * @type {AppUserOnBreakType}
     * @memberof TaskCompanionTaskRoom
     */
    appUserOnBreak?: AppUserOnBreakType;
    /**
     * 
     * @type {HousekeepingTaskTypeAttendant}
     * @memberof TaskCompanionTaskRoom
     */
    attendant?: HousekeepingTaskTypeAttendant;
    /**
     * 
     * @type {ServicingAttendantStatusType}
     * @memberof TaskCompanionTaskRoom
     */
    attendantStatus?: ServicingAttendantStatusType;
    /**
     * Indicates if the task sheet was automatically generated.
     * @type {boolean}
     * @memberof TaskCompanionTaskRoom
     */
    autoGenerated?: boolean;
    /**
     * Break out id of the task sheet.
     * @type {number}
     * @memberof TaskCompanionTaskRoom
     */
    breakOutId?: number;
    /**
     * Date the task was completed.
     * @type {string}
     * @memberof TaskCompanionTaskRoom
     */
    completedDate?: string;
    /**
     * Credits information for this Task Sheet. This could have the Total Credit information and the Travelling credits if required.
     * @type {Array<HousekeepingCreditsType>}
     * @memberof TaskCompanionTaskRoom
     */
    credits?: Array<HousekeepingCreditsType>;
    /**
     * The date for which the task sheet applies.
     * @type {string}
     * @memberof TaskCompanionTaskRoom
     */
    date?: string;
    /**
     * 
     * @type {DepartureTaskInfoType}
     * @memberof TaskCompanionTaskRoom
     */
    departureTaskInfo?: DepartureTaskInfoType;
    /**
     * Indicates if the task sheet has no rooms.
     * @type {boolean}
     * @memberof TaskCompanionTaskRoom
     */
    emptyTaskSheet?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TaskCompanionTaskRoom
     */
    hotelId?: string;
    /**
     * The total number of linen changes included in this task sheet.
     * @type {number}
     * @memberof TaskCompanionTaskRoom
     */
    linenChangeCount?: number;
    /**
     * Indicates if the task sheet was locked or not.
     * @type {boolean}
     * @memberof TaskCompanionTaskRoom
     */
    lockTaskSheet?: boolean;
    /**
     * Indicates the task sheet applies to Next Business Day.
     * @type {boolean}
     * @memberof TaskCompanionTaskRoom
     */
    nextDay?: boolean;
    /**
     * The total number of rooms included in this task sheet.
     * @type {number}
     * @memberof TaskCompanionTaskRoom
     */
    roomCount?: number;
    /**
     * 
     * @type {Array<HousekeepingTaskTypeRoomCountsInner>}
     * @memberof TaskCompanionTaskRoom
     */
    roomCounts?: Array<HousekeepingTaskTypeRoomCountsInner>;
    /**
     * This type represents the primary room attributes.
     * @type {Array<TaskCompanionTaskRoomRoomsInner>}
     * @memberof TaskCompanionTaskRoom
     */
    rooms?: Array<TaskCompanionTaskRoomRoomsInner>;
    /**
     * The Task Sheet number. This will be a sequential number for the task sheets generated for a particular Task Code.
     * @type {number}
     * @memberof TaskCompanionTaskRoom
     */
    sheetNumber?: number;
    /**
     * 
     * @type {TaskSheetType}
     * @memberof TaskCompanionTaskRoom
     */
    sheetType?: TaskSheetType;
    /**
     * The Task Code(s) used for this Task Sheet.
     * @type {Array<HousekeepingTaskCodeType>}
     * @memberof TaskCompanionTaskRoom
     */
    taskCodes?: Array<HousekeepingTaskCodeType>;
    /**
     * Task Sheet level instructions. These instructions are applicable to this task sheet only.
     * @type {string}
     * @memberof TaskCompanionTaskRoom
     */
    taskInstructions?: string;
    /**
     * The sequence no of the task sheet.
     * @type {number}
     * @memberof TaskCompanionTaskRoom
     */
    taskSeqNo?: number;
    /**
     * Indicates if all the rooms in the task sheet are Clean/Inspected i.e they do not have the Dirty or the Pickup status.
     * @type {boolean}
     * @memberof TaskCompanionTaskRoom
     */
    taskSheetCompleted?: boolean;
    /**
     * List of the facility codes.
     * @type {Array<FacilityCodeType>}
     * @memberof TaskCompanionTaskRoom
     */
    totalSupplies?: Array<FacilityCodeType>;
}

/**
 * Check if a given object implements the TaskCompanionTaskRoom interface.
 */
export function instanceOfTaskCompanionTaskRoom(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaskCompanionTaskRoomFromJSON(json: any): TaskCompanionTaskRoom {
    return TaskCompanionTaskRoomFromJSONTyped(json, false);
}

export function TaskCompanionTaskRoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskCompanionTaskRoom {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allEvaluatedRoomsSkipped': !exists(json, 'allEvaluatedRoomsSkipped') ? undefined : json['allEvaluatedRoomsSkipped'],
        'appUserOnBreak': !exists(json, 'appUserOnBreak') ? undefined : AppUserOnBreakTypeFromJSON(json['appUserOnBreak']),
        'attendant': !exists(json, 'attendant') ? undefined : HousekeepingTaskTypeAttendantFromJSON(json['attendant']),
        'attendantStatus': !exists(json, 'attendantStatus') ? undefined : ServicingAttendantStatusTypeFromJSON(json['attendantStatus']),
        'autoGenerated': !exists(json, 'autoGenerated') ? undefined : json['autoGenerated'],
        'breakOutId': !exists(json, 'breakOutId') ? undefined : json['breakOutId'],
        'completedDate': !exists(json, 'completedDate') ? undefined : json['completedDate'],
        'credits': !exists(json, 'credits') ? undefined : ((json['credits'] as Array<any>).map(HousekeepingCreditsTypeFromJSON)),
        'date': !exists(json, 'date') ? undefined : json['date'],
        'departureTaskInfo': !exists(json, 'departureTaskInfo') ? undefined : DepartureTaskInfoTypeFromJSON(json['departureTaskInfo']),
        'emptyTaskSheet': !exists(json, 'emptyTaskSheet') ? undefined : json['emptyTaskSheet'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'linenChangeCount': !exists(json, 'linenChangeCount') ? undefined : json['linenChangeCount'],
        'lockTaskSheet': !exists(json, 'lockTaskSheet') ? undefined : json['lockTaskSheet'],
        'nextDay': !exists(json, 'nextDay') ? undefined : json['nextDay'],
        'roomCount': !exists(json, 'roomCount') ? undefined : json['roomCount'],
        'roomCounts': !exists(json, 'roomCounts') ? undefined : ((json['roomCounts'] as Array<any>).map(HousekeepingTaskTypeRoomCountsInnerFromJSON)),
        'rooms': !exists(json, 'rooms') ? undefined : ((json['rooms'] as Array<any>).map(TaskCompanionTaskRoomRoomsInnerFromJSON)),
        'sheetNumber': !exists(json, 'sheetNumber') ? undefined : json['sheetNumber'],
        'sheetType': !exists(json, 'sheetType') ? undefined : TaskSheetTypeFromJSON(json['sheetType']),
        'taskCodes': !exists(json, 'taskCodes') ? undefined : ((json['taskCodes'] as Array<any>).map(HousekeepingTaskCodeTypeFromJSON)),
        'taskInstructions': !exists(json, 'taskInstructions') ? undefined : json['taskInstructions'],
        'taskSeqNo': !exists(json, 'taskSeqNo') ? undefined : json['taskSeqNo'],
        'taskSheetCompleted': !exists(json, 'taskSheetCompleted') ? undefined : json['taskSheetCompleted'],
        'totalSupplies': !exists(json, 'totalSupplies') ? undefined : ((json['totalSupplies'] as Array<any>).map(FacilityCodeTypeFromJSON)),
    };
}

export function TaskCompanionTaskRoomToJSON(value?: TaskCompanionTaskRoom | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allEvaluatedRoomsSkipped': value.allEvaluatedRoomsSkipped,
        'appUserOnBreak': AppUserOnBreakTypeToJSON(value.appUserOnBreak),
        'attendant': HousekeepingTaskTypeAttendantToJSON(value.attendant),
        'attendantStatus': ServicingAttendantStatusTypeToJSON(value.attendantStatus),
        'autoGenerated': value.autoGenerated,
        'breakOutId': value.breakOutId,
        'completedDate': value.completedDate,
        'credits': value.credits === undefined ? undefined : ((value.credits as Array<any>).map(HousekeepingCreditsTypeToJSON)),
        'date': value.date,
        'departureTaskInfo': DepartureTaskInfoTypeToJSON(value.departureTaskInfo),
        'emptyTaskSheet': value.emptyTaskSheet,
        'hotelId': value.hotelId,
        'linenChangeCount': value.linenChangeCount,
        'lockTaskSheet': value.lockTaskSheet,
        'nextDay': value.nextDay,
        'roomCount': value.roomCount,
        'roomCounts': value.roomCounts === undefined ? undefined : ((value.roomCounts as Array<any>).map(HousekeepingTaskTypeRoomCountsInnerToJSON)),
        'rooms': value.rooms === undefined ? undefined : ((value.rooms as Array<any>).map(TaskCompanionTaskRoomRoomsInnerToJSON)),
        'sheetNumber': value.sheetNumber,
        'sheetType': TaskSheetTypeToJSON(value.sheetType),
        'taskCodes': value.taskCodes === undefined ? undefined : ((value.taskCodes as Array<any>).map(HousekeepingTaskCodeTypeToJSON)),
        'taskInstructions': value.taskInstructions,
        'taskSeqNo': value.taskSeqNo,
        'taskSheetCompleted': value.taskSheetCompleted,
        'totalSupplies': value.totalSupplies === undefined ? undefined : ((value.totalSupplies as Array<any>).map(FacilityCodeTypeToJSON)),
    };
}

