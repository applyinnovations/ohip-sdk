/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomTypeTasksType } from './RoomTypeTasksType';
import {
    RoomTypeTasksTypeFromJSON,
    RoomTypeTasksTypeFromJSONTyped,
    RoomTypeTasksTypeToJSON,
} from './RoomTypeTasksType';

/**
 * Quatity data for a single day.
 * @export
 * @interface ForecastQuantityType
 */
export interface ForecastQuantityType {
    /**
     * Date of the statistic.
     * @type {Date}
     * @memberof ForecastQuantityType
     */
    date?: Date;
    /**
     * Indicates whether the day is a weekend day or not.
     * @type {boolean}
     * @memberof ForecastQuantityType
     */
    isWeekend?: boolean;
    /**
     * The actual quantity
     * @type {number}
     * @memberof ForecastQuantityType
     */
    quantity?: number;
    /**
     * 
     * @type {RoomTypeTasksType}
     * @memberof ForecastQuantityType
     */
    roomTypeBreakDown?: RoomTypeTasksType;
}

/**
 * Check if a given object implements the ForecastQuantityType interface.
 */
export function instanceOfForecastQuantityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ForecastQuantityTypeFromJSON(json: any): ForecastQuantityType {
    return ForecastQuantityTypeFromJSONTyped(json, false);
}

export function ForecastQuantityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ForecastQuantityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'isWeekend': !exists(json, 'isWeekend') ? undefined : json['isWeekend'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'roomTypeBreakDown': !exists(json, 'roomTypeBreakDown') ? undefined : RoomTypeTasksTypeFromJSON(json['roomTypeBreakDown']),
    };
}

export function ForecastQuantityTypeToJSON(value?: ForecastQuantityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'date': value.date === undefined ? undefined : (value.date.toISOString().substr(0,10)),
        'isWeekend': value.isWeekend,
        'quantity': value.quantity,
        'roomTypeBreakDown': RoomTypeTasksTypeToJSON(value.roomTypeBreakDown),
    };
}

