/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomTypeSuppliesType } from './RoomTypeSuppliesType';
import {
    RoomTypeSuppliesTypeFromJSON,
    RoomTypeSuppliesTypeFromJSONTyped,
    RoomTypeSuppliesTypeToJSON,
} from './RoomTypeSuppliesType';

/**
 * Facility task info related to the departure task.
 * @export
 * @interface DepartureTaskInfoType
 */
export interface DepartureTaskInfoType {
    /**
     * Facility task code of the departure task.
     * @type {string}
     * @memberof DepartureTaskInfoType
     */
    code?: string;
    /**
     * Supplies based on the room type.
     * @type {Array<RoomTypeSuppliesType>}
     * @memberof DepartureTaskInfoType
     */
    roomType?: Array<RoomTypeSuppliesType>;
}

/**
 * Check if a given object implements the DepartureTaskInfoType interface.
 */
export function instanceOfDepartureTaskInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DepartureTaskInfoTypeFromJSON(json: any): DepartureTaskInfoType {
    return DepartureTaskInfoTypeFromJSONTyped(json, false);
}

export function DepartureTaskInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DepartureTaskInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'roomType': !exists(json, 'roomType') ? undefined : ((json['roomType'] as Array<any>).map(RoomTypeSuppliesTypeFromJSON)),
    };
}

export function DepartureTaskInfoTypeToJSON(value?: DepartureTaskInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'roomType': value.roomType === undefined ? undefined : ((value.roomType as Array<any>).map(RoomTypeSuppliesTypeToJSON)),
    };
}

