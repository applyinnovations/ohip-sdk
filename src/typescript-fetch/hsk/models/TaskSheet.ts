/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HousekeepingTaskType } from './HousekeepingTaskType';
import {
    HousekeepingTaskTypeFromJSON,
    HousekeepingTaskTypeFromJSONTyped,
    HousekeepingTaskTypeToJSON,
} from './HousekeepingTaskType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Request of Changing a Task Sheet. The task instructions, total credits, attendant information and room information can be changed on a task sheet. Task Instructions , Total Credits and Attendants will be replaced with what is sent in this request. Example: If the task instructions is null in the request, the task instructions on the task sheet will be updated to null. If rooms are sent as part of this request, this will replace the existing rooms on the task sheet. If rooms are not sent, then the original rooms will remain. The task date, hotel code, task sheet number and task code is required to search for the task sheet which has to be changed
 * @export
 * @interface TaskSheet
 */
export interface TaskSheet {
    /**
     * 
     * @type {Links}
     * @memberof TaskSheet
     */
    links?: Links;
    /**
     * 
     * @type {HousekeepingTaskType}
     * @memberof TaskSheet
     */
    taskSheetDetails?: HousekeepingTaskType;
    /**
     * 
     * @type {WarningsType}
     * @memberof TaskSheet
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the TaskSheet interface.
 */
export function instanceOfTaskSheet(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaskSheetFromJSON(json: any): TaskSheet {
    return TaskSheetFromJSONTyped(json, false);
}

export function TaskSheetFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskSheet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'taskSheetDetails': !exists(json, 'taskSheetDetails') ? undefined : HousekeepingTaskTypeFromJSON(json['taskSheetDetails']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function TaskSheetToJSON(value?: TaskSheet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'taskSheetDetails': HousekeepingTaskTypeToJSON(value.taskSheetDetails),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

