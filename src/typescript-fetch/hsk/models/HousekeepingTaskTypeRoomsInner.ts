/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrentServicingAttendantType } from './CurrentServicingAttendantType';
import {
    CurrentServicingAttendantTypeFromJSON,
    CurrentServicingAttendantTypeFromJSONTyped,
    CurrentServicingAttendantTypeToJSON,
} from './CurrentServicingAttendantType';
import type { HousekeepingType } from './HousekeepingType';
import {
    HousekeepingTypeFromJSON,
    HousekeepingTypeFromJSONTyped,
    HousekeepingTypeToJSON,
} from './HousekeepingType';
import type { RatePlanRatingType } from './RatePlanRatingType';
import {
    RatePlanRatingTypeFromJSON,
    RatePlanRatingTypeFromJSONTyped,
    RatePlanRatingTypeToJSON,
} from './RatePlanRatingType';
import type { ReservationInfoType } from './ReservationInfoType';
import {
    ReservationInfoTypeFromJSON,
    ReservationInfoTypeFromJSONTyped,
    ReservationInfoTypeToJSON,
} from './ReservationInfoType';
import type { ReservationShortInfoType } from './ReservationShortInfoType';
import {
    ReservationShortInfoTypeFromJSON,
    ReservationShortInfoTypeFromJSONTyped,
    ReservationShortInfoTypeToJSON,
} from './ReservationShortInfoType';
import type { RoomDiscrepancyType } from './RoomDiscrepancyType';
import {
    RoomDiscrepancyTypeFromJSON,
    RoomDiscrepancyTypeFromJSONTyped,
    RoomDiscrepancyTypeToJSON,
} from './RoomDiscrepancyType';
import type { RoomFeatureType } from './RoomFeatureType';
import {
    RoomFeatureTypeFromJSON,
    RoomFeatureTypeFromJSONTyped,
    RoomFeatureTypeToJSON,
} from './RoomFeatureType';
import type { RoomHoldType } from './RoomHoldType';
import {
    RoomHoldTypeFromJSON,
    RoomHoldTypeFromJSONTyped,
    RoomHoldTypeToJSON,
} from './RoomHoldType';
import type { RoomOutOfOrderType } from './RoomOutOfOrderType';
import {
    RoomOutOfOrderTypeFromJSON,
    RoomOutOfOrderTypeFromJSONTyped,
    RoomOutOfOrderTypeToJSON,
} from './RoomOutOfOrderType';
import type { RoomRoomType } from './RoomRoomType';
import {
    RoomRoomTypeFromJSON,
    RoomRoomTypeFromJSONTyped,
    RoomRoomTypeToJSON,
} from './RoomRoomType';
import type { RoomSectionType } from './RoomSectionType';
import {
    RoomSectionTypeFromJSON,
    RoomSectionTypeFromJSONTyped,
    RoomSectionTypeToJSON,
} from './RoomSectionType';
import type { RoomTypeShortInfoType } from './RoomTypeShortInfoType';
import {
    RoomTypeShortInfoTypeFromJSON,
    RoomTypeShortInfoTypeFromJSONTyped,
    RoomTypeShortInfoTypeToJSON,
} from './RoomTypeShortInfoType';
import type { SitePlanSectionType } from './SitePlanSectionType';
import {
    SitePlanSectionTypeFromJSON,
    SitePlanSectionTypeFromJSONTyped,
    SitePlanSectionTypeToJSON,
} from './SitePlanSectionType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';
import type { TurndownInfoType } from './TurndownInfoType';
import {
    TurndownInfoTypeFromJSON,
    TurndownInfoTypeFromJSONTyped,
    TurndownInfoTypeToJSON,
} from './TurndownInfoType';

/**
 * This type represents the primary room attributes.
 * @export
 * @interface HousekeepingTaskTypeRoomsInner
 */
export interface HousekeepingTaskTypeRoomsInner {
    /**
     * 
     * @type {RoomTypeShortInfoType}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    roomType?: RoomTypeShortInfoType;
    /**
     * Floor of the Room.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    floor?: string;
    /**
     * Description for the Floor of the Room.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    floorDescription?: string;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    roomFeatures?: Array<RoomFeatureType>;
    /**
     * Detail Long Description Of The Room.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    roomDescription?: string;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    description?: TranslationTextType2000;
    /**
     * This indicates room smoking preference.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    smokingPreference?: string;
    /**
     * This indicates the description of the room smoking preference.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    smokingPreferenceDescription?: string;
    /**
     * Building associated with the room.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    building?: string;
    /**
     * 
     * @type {RatePlanRatingType}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    roomAssignmentRating?: RatePlanRatingType;
    /**
     * Indicates whether the room is accessibility compliant.
     * @type {boolean}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    isAccessible?: boolean;
    /**
     * Code of the room.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    roomId?: string;
    /**
     * Indicates whether the room is a Meeting Room
     * @type {boolean}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    meetingRoom?: boolean;
    /**
     * 
     * @type {RoomSectionType}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    roomSection?: RoomSectionType;
    /**
     * 
     * @type {HousekeepingType}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    housekeeping?: HousekeepingType;
    /**
     * Date Range and reasons for a room being Out of Order/Out Of Service (If the room is OO/OS).
     * @type {Array<RoomOutOfOrderType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    outOfOrder?: Array<RoomOutOfOrderType>;
    /**
     * Room Discrepancies between front office and housekeeping room status and number of persons in the room.
     * @type {Array<RoomDiscrepancyType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    discrepancy?: Array<RoomDiscrepancyType>;
    /**
     * 
     * @type {SitePlanSectionType}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    sitePlanSection?: SitePlanSectionType;
    /**
     * This flag indicates component room.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    componentRoomNumber?: string;
    /**
     * Collection of rooms.
     * @type {Array<RoomRoomType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    connectingRooms?: Array<RoomRoomType>;
    /**
     * Collection of rooms.
     * @type {Array<RoomRoomType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    componentRooms?: Array<RoomRoomType>;
    /**
     * 
     * @type {Array<CurrentServicingAttendantType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    attendant?: Array<CurrentServicingAttendantType>;
    /**
     * 
     * @type {RoomHoldType}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    hold?: RoomHoldType;
    /**
     * 
     * @type {TurndownInfoType}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    turndownInfo?: TurndownInfoType;
    /**
     * 
     * @type {Array<ReservationShortInfoType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    resvInfo?: Array<ReservationShortInfoType>;
    /**
     * 
     * @type {Array<ReservationShortInfoType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    scheduledRoomMoveResvInfo?: Array<ReservationShortInfoType>;
    /**
     * List of component room numbers.
     * @type {Array<string>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    componentRoomNumbers?: Array<string>;
    /**
     * 
     * @type {Array<ReservationInfoType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    reservationInfo?: Array<ReservationInfoType>;
    /**
     * Information regarding the current servicing of the room.
     * @type {Array<CurrentServicingAttendantType>}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    servicingInfo?: Array<CurrentServicingAttendantType>;
    /**
     * Task Sheet instructions at the room level.
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    instructions?: string;
    /**
     * Total credits for this room.
     * @type {number}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    totalCredits?: number;
    /**
     * The wake up time of the current date
     * @type {string}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    wakeUpTime?: string;
    /**
     * The sequence for cleaning this room in the task sheet. This would apply only for Pickup and Dirty rooms.
     * @type {number}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    cleaningSequence?: number;
    /**
     * The sequence for this room from configuration.
     * @type {number}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    defaultSequence?: number;
    /**
     * The sequence for this room from configuration.
     * @type {boolean}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    hasPriority?: boolean;
    /**
     * Flag if the Room, and the OperaV5 version, allows Room Maintenance or not.
     * @type {boolean}
     * @memberof HousekeepingTaskTypeRoomsInner
     */
    maintenanceAllowed?: boolean;
}

/**
 * Check if a given object implements the HousekeepingTaskTypeRoomsInner interface.
 */
export function instanceOfHousekeepingTaskTypeRoomsInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HousekeepingTaskTypeRoomsInnerFromJSON(json: any): HousekeepingTaskTypeRoomsInner {
    return HousekeepingTaskTypeRoomsInnerFromJSONTyped(json, false);
}

export function HousekeepingTaskTypeRoomsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): HousekeepingTaskTypeRoomsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomType': !exists(json, 'roomType') ? undefined : RoomTypeShortInfoTypeFromJSON(json['roomType']),
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'floorDescription': !exists(json, 'floorDescription') ? undefined : json['floorDescription'],
        'roomFeatures': !exists(json, 'roomFeatures') ? undefined : ((json['roomFeatures'] as Array<any>).map(RoomFeatureTypeFromJSON)),
        'roomDescription': !exists(json, 'roomDescription') ? undefined : json['roomDescription'],
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'smokingPreference': !exists(json, 'smokingPreference') ? undefined : json['smokingPreference'],
        'smokingPreferenceDescription': !exists(json, 'smokingPreferenceDescription') ? undefined : json['smokingPreferenceDescription'],
        'building': !exists(json, 'building') ? undefined : json['building'],
        'roomAssignmentRating': !exists(json, 'roomAssignmentRating') ? undefined : RatePlanRatingTypeFromJSON(json['roomAssignmentRating']),
        'isAccessible': !exists(json, 'isAccessible') ? undefined : json['isAccessible'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'meetingRoom': !exists(json, 'meetingRoom') ? undefined : json['meetingRoom'],
        'roomSection': !exists(json, 'roomSection') ? undefined : RoomSectionTypeFromJSON(json['roomSection']),
        'housekeeping': !exists(json, 'housekeeping') ? undefined : HousekeepingTypeFromJSON(json['housekeeping']),
        'outOfOrder': !exists(json, 'outOfOrder') ? undefined : ((json['outOfOrder'] as Array<any>).map(RoomOutOfOrderTypeFromJSON)),
        'discrepancy': !exists(json, 'discrepancy') ? undefined : ((json['discrepancy'] as Array<any>).map(RoomDiscrepancyTypeFromJSON)),
        'sitePlanSection': !exists(json, 'sitePlanSection') ? undefined : SitePlanSectionTypeFromJSON(json['sitePlanSection']),
        'componentRoomNumber': !exists(json, 'componentRoomNumber') ? undefined : json['componentRoomNumber'],
        'connectingRooms': !exists(json, 'connectingRooms') ? undefined : ((json['connectingRooms'] as Array<any>).map(RoomRoomTypeFromJSON)),
        'componentRooms': !exists(json, 'componentRooms') ? undefined : ((json['componentRooms'] as Array<any>).map(RoomRoomTypeFromJSON)),
        'attendant': !exists(json, 'attendant') ? undefined : ((json['attendant'] as Array<any>).map(CurrentServicingAttendantTypeFromJSON)),
        'hold': !exists(json, 'hold') ? undefined : RoomHoldTypeFromJSON(json['hold']),
        'turndownInfo': !exists(json, 'turndownInfo') ? undefined : TurndownInfoTypeFromJSON(json['turndownInfo']),
        'resvInfo': !exists(json, 'resvInfo') ? undefined : ((json['resvInfo'] as Array<any>).map(ReservationShortInfoTypeFromJSON)),
        'scheduledRoomMoveResvInfo': !exists(json, 'scheduledRoomMoveResvInfo') ? undefined : ((json['scheduledRoomMoveResvInfo'] as Array<any>).map(ReservationShortInfoTypeFromJSON)),
        'componentRoomNumbers': !exists(json, 'componentRoomNumbers') ? undefined : json['componentRoomNumbers'],
        'reservationInfo': !exists(json, 'reservationInfo') ? undefined : ((json['reservationInfo'] as Array<any>).map(ReservationInfoTypeFromJSON)),
        'servicingInfo': !exists(json, 'servicingInfo') ? undefined : ((json['servicingInfo'] as Array<any>).map(CurrentServicingAttendantTypeFromJSON)),
        'instructions': !exists(json, 'instructions') ? undefined : json['instructions'],
        'totalCredits': !exists(json, 'totalCredits') ? undefined : json['totalCredits'],
        'wakeUpTime': !exists(json, 'wakeUpTime') ? undefined : json['wakeUpTime'],
        'cleaningSequence': !exists(json, 'cleaningSequence') ? undefined : json['cleaningSequence'],
        'defaultSequence': !exists(json, 'defaultSequence') ? undefined : json['defaultSequence'],
        'hasPriority': !exists(json, 'hasPriority') ? undefined : json['hasPriority'],
        'maintenanceAllowed': !exists(json, 'maintenanceAllowed') ? undefined : json['maintenanceAllowed'],
    };
}

export function HousekeepingTaskTypeRoomsInnerToJSON(value?: HousekeepingTaskTypeRoomsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomType': RoomTypeShortInfoTypeToJSON(value.roomType),
        'floor': value.floor,
        'floorDescription': value.floorDescription,
        'roomFeatures': value.roomFeatures === undefined ? undefined : ((value.roomFeatures as Array<any>).map(RoomFeatureTypeToJSON)),
        'roomDescription': value.roomDescription,
        'description': TranslationTextType2000ToJSON(value.description),
        'smokingPreference': value.smokingPreference,
        'smokingPreferenceDescription': value.smokingPreferenceDescription,
        'building': value.building,
        'roomAssignmentRating': RatePlanRatingTypeToJSON(value.roomAssignmentRating),
        'isAccessible': value.isAccessible,
        'roomId': value.roomId,
        'meetingRoom': value.meetingRoom,
        'roomSection': RoomSectionTypeToJSON(value.roomSection),
        'housekeeping': HousekeepingTypeToJSON(value.housekeeping),
        'outOfOrder': value.outOfOrder === undefined ? undefined : ((value.outOfOrder as Array<any>).map(RoomOutOfOrderTypeToJSON)),
        'discrepancy': value.discrepancy === undefined ? undefined : ((value.discrepancy as Array<any>).map(RoomDiscrepancyTypeToJSON)),
        'sitePlanSection': SitePlanSectionTypeToJSON(value.sitePlanSection),
        'componentRoomNumber': value.componentRoomNumber,
        'connectingRooms': value.connectingRooms === undefined ? undefined : ((value.connectingRooms as Array<any>).map(RoomRoomTypeToJSON)),
        'componentRooms': value.componentRooms === undefined ? undefined : ((value.componentRooms as Array<any>).map(RoomRoomTypeToJSON)),
        'attendant': value.attendant === undefined ? undefined : ((value.attendant as Array<any>).map(CurrentServicingAttendantTypeToJSON)),
        'hold': RoomHoldTypeToJSON(value.hold),
        'turndownInfo': TurndownInfoTypeToJSON(value.turndownInfo),
        'resvInfo': value.resvInfo === undefined ? undefined : ((value.resvInfo as Array<any>).map(ReservationShortInfoTypeToJSON)),
        'scheduledRoomMoveResvInfo': value.scheduledRoomMoveResvInfo === undefined ? undefined : ((value.scheduledRoomMoveResvInfo as Array<any>).map(ReservationShortInfoTypeToJSON)),
        'componentRoomNumbers': value.componentRoomNumbers,
        'reservationInfo': value.reservationInfo === undefined ? undefined : ((value.reservationInfo as Array<any>).map(ReservationInfoTypeToJSON)),
        'servicingInfo': value.servicingInfo === undefined ? undefined : ((value.servicingInfo as Array<any>).map(CurrentServicingAttendantTypeToJSON)),
        'instructions': value.instructions,
        'totalCredits': value.totalCredits,
        'wakeUpTime': value.wakeUpTime,
        'cleaningSequence': value.cleaningSequence,
        'defaultSequence': value.defaultSequence,
        'hasPriority': value.hasPriority,
        'maintenanceAllowed': value.maintenanceAllowed,
    };
}

