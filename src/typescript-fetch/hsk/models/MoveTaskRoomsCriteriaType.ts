/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HousekeepingTaskCodeType } from './HousekeepingTaskCodeType';
import {
    HousekeepingTaskCodeTypeFromJSON,
    HousekeepingTaskCodeTypeFromJSONTyped,
    HousekeepingTaskCodeTypeToJSON,
} from './HousekeepingTaskCodeType';
import type { RoomType } from './RoomType';
import {
    RoomTypeFromJSON,
    RoomTypeFromJSONTyped,
    RoomTypeToJSON,
} from './RoomType';

/**
 * Type for moving rooms between two task sheets.
 * @export
 * @interface MoveTaskRoomsCriteriaType
 */
export interface MoveTaskRoomsCriteriaType {
    /**
     * The task sheet number from which the rooms are being moved.
     * @type {number}
     * @memberof MoveTaskRoomsCriteriaType
     */
    fromTaskSheetNumber?: number;
    /**
     * The property where the task sheets exist for which the rooms are being moved.
     * @type {string}
     * @memberof MoveTaskRoomsCriteriaType
     */
    hotelId?: string;
    /**
     * List of rooms which have to be moved from one task sheet to another.
     * @type {Array<RoomType>}
     * @memberof MoveTaskRoomsCriteriaType
     */
    rooms?: Array<RoomType>;
    /**
     * The task code for the task sheets, for which the rooms are being moved.
     * @type {Array<HousekeepingTaskCodeType>}
     * @memberof MoveTaskRoomsCriteriaType
     */
    taskCode?: Array<HousekeepingTaskCodeType>;
    /**
     * The date of the task sheet.
     * @type {string}
     * @memberof MoveTaskRoomsCriteriaType
     */
    taskDate?: string;
    /**
     * The task sheet number to which the rooms should be moved.
     * @type {number}
     * @memberof MoveTaskRoomsCriteriaType
     */
    toTaskSheetNumber?: number;
}

/**
 * Check if a given object implements the MoveTaskRoomsCriteriaType interface.
 */
export function instanceOfMoveTaskRoomsCriteriaType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MoveTaskRoomsCriteriaTypeFromJSON(json: any): MoveTaskRoomsCriteriaType {
    return MoveTaskRoomsCriteriaTypeFromJSONTyped(json, false);
}

export function MoveTaskRoomsCriteriaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MoveTaskRoomsCriteriaType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fromTaskSheetNumber': !exists(json, 'fromTaskSheetNumber') ? undefined : json['fromTaskSheetNumber'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'rooms': !exists(json, 'rooms') ? undefined : ((json['rooms'] as Array<any>).map(RoomTypeFromJSON)),
        'taskCode': !exists(json, 'taskCode') ? undefined : ((json['taskCode'] as Array<any>).map(HousekeepingTaskCodeTypeFromJSON)),
        'taskDate': !exists(json, 'taskDate') ? undefined : json['taskDate'],
        'toTaskSheetNumber': !exists(json, 'toTaskSheetNumber') ? undefined : json['toTaskSheetNumber'],
    };
}

export function MoveTaskRoomsCriteriaTypeToJSON(value?: MoveTaskRoomsCriteriaType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fromTaskSheetNumber': value.fromTaskSheetNumber,
        'hotelId': value.hotelId,
        'rooms': value.rooms === undefined ? undefined : ((value.rooms as Array<any>).map(RoomTypeToJSON)),
        'taskCode': value.taskCode === undefined ? undefined : ((value.taskCode as Array<any>).map(HousekeepingTaskCodeTypeToJSON)),
        'taskDate': value.taskDate,
        'toTaskSheetNumber': value.toTaskSheetNumber,
    };
}

