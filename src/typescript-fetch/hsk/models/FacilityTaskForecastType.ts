/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { FacilityCodesForecastType } from './FacilityCodesForecastType';
import {
    FacilityCodesForecastTypeFromJSON,
    FacilityCodesForecastTypeFromJSONTyped,
    FacilityCodesForecastTypeToJSON,
} from './FacilityCodesForecastType';
import type { ForecastQuantitiesType } from './ForecastQuantitiesType';
import {
    ForecastQuantitiesTypeFromJSON,
    ForecastQuantitiesTypeFromJSONTyped,
    ForecastQuantitiesTypeToJSON,
} from './ForecastQuantitiesType';

/**
 * A facility task and its forecast.
 * @export
 * @interface FacilityTaskForecastType
 */
export interface FacilityTaskForecastType {
    /**
     * 
     * @type {FacilityCodesForecastType}
     * @memberof FacilityTaskForecastType
     */
    facilityCodes?: FacilityCodesForecastType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof FacilityTaskForecastType
     */
    task?: CodeDescriptionType;
    /**
     * 
     * @type {ForecastQuantitiesType}
     * @memberof FacilityTaskForecastType
     */
    taskForecast?: ForecastQuantitiesType;
}

/**
 * Check if a given object implements the FacilityTaskForecastType interface.
 */
export function instanceOfFacilityTaskForecastType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacilityTaskForecastTypeFromJSON(json: any): FacilityTaskForecastType {
    return FacilityTaskForecastTypeFromJSONTyped(json, false);
}

export function FacilityTaskForecastTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FacilityTaskForecastType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'facilityCodes': !exists(json, 'facilityCodes') ? undefined : FacilityCodesForecastTypeFromJSON(json['facilityCodes']),
        'task': !exists(json, 'task') ? undefined : CodeDescriptionTypeFromJSON(json['task']),
        'taskForecast': !exists(json, 'taskForecast') ? undefined : ForecastQuantitiesTypeFromJSON(json['taskForecast']),
    };
}

export function FacilityTaskForecastTypeToJSON(value?: FacilityTaskForecastType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'facilityCodes': FacilityCodesForecastTypeToJSON(value.facilityCodes),
        'task': CodeDescriptionTypeToJSON(value.task),
        'taskForecast': ForecastQuantitiesTypeToJSON(value.taskForecast),
    };
}

