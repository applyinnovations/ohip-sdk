/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HousekeepingAttendantScheduleType } from './HousekeepingAttendantScheduleType';
import {
    HousekeepingAttendantScheduleTypeFromJSON,
    HousekeepingAttendantScheduleTypeFromJSONTyped,
    HousekeepingAttendantScheduleTypeToJSON,
} from './HousekeepingAttendantScheduleType';

/**
 * Collection of Attendants.
 * @export
 * @interface HousekeepingAttendantsScheduleType
 */
export interface HousekeepingAttendantsScheduleType {
    /**
     * 
     * @type {Array<HousekeepingAttendantScheduleType>}
     * @memberof HousekeepingAttendantsScheduleType
     */
    attendantsSchedule?: Array<HousekeepingAttendantScheduleType>;
    /**
     * Property code the Housekeeping Attendant belongs to.
     * @type {string}
     * @memberof HousekeepingAttendantsScheduleType
     */
    hotelId?: string;
    /**
     * Schedule date of attendants' assignment. Used when attendants to scheduled are of the same date.
     * @type {string}
     * @memberof HousekeepingAttendantsScheduleType
     */
    scheduleDate?: string;
}

/**
 * Check if a given object implements the HousekeepingAttendantsScheduleType interface.
 */
export function instanceOfHousekeepingAttendantsScheduleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HousekeepingAttendantsScheduleTypeFromJSON(json: any): HousekeepingAttendantsScheduleType {
    return HousekeepingAttendantsScheduleTypeFromJSONTyped(json, false);
}

export function HousekeepingAttendantsScheduleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HousekeepingAttendantsScheduleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attendantsSchedule': !exists(json, 'attendantsSchedule') ? undefined : ((json['attendantsSchedule'] as Array<any>).map(HousekeepingAttendantScheduleTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'scheduleDate': !exists(json, 'scheduleDate') ? undefined : json['scheduleDate'],
    };
}

export function HousekeepingAttendantsScheduleTypeToJSON(value?: HousekeepingAttendantsScheduleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attendantsSchedule': value.attendantsSchedule === undefined ? undefined : ((value.attendantsSchedule as Array<any>).map(HousekeepingAttendantScheduleTypeToJSON)),
        'hotelId': value.hotelId,
        'scheduleDate': value.scheduleDate,
    };
}

