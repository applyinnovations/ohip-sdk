/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { ForecastQuantityType } from './ForecastQuantityType';
import {
    ForecastQuantityTypeFromJSON,
    ForecastQuantityTypeFromJSONTyped,
    ForecastQuantityTypeToJSON,
} from './ForecastQuantityType';

/**
 * A facility code and its forecast.
 * @export
 * @interface FacilityCodeForecastType
 */
export interface FacilityCodeForecastType {
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof FacilityCodeForecastType
     */
    code?: CodeDescriptionType;
    /**
     * Collection of dates and their quantities.
     * @type {Array<ForecastQuantityType>}
     * @memberof FacilityCodeForecastType
     */
    forecast?: Array<ForecastQuantityType>;
}

/**
 * Check if a given object implements the FacilityCodeForecastType interface.
 */
export function instanceOfFacilityCodeForecastType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FacilityCodeForecastTypeFromJSON(json: any): FacilityCodeForecastType {
    return FacilityCodeForecastTypeFromJSONTyped(json, false);
}

export function FacilityCodeForecastTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FacilityCodeForecastType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : CodeDescriptionTypeFromJSON(json['code']),
        'forecast': !exists(json, 'forecast') ? undefined : ((json['forecast'] as Array<any>).map(ForecastQuantityTypeFromJSON)),
    };
}

export function FacilityCodeForecastTypeToJSON(value?: FacilityCodeForecastType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': CodeDescriptionTypeToJSON(value.code),
        'forecast': value.forecast === undefined ? undefined : ((value.forecast as Array<any>).map(ForecastQuantityTypeToJSON)),
    };
}

