/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssignedUserType } from './AssignedUserType';
import {
    AssignedUserTypeFromJSON,
    AssignedUserTypeFromJSONTyped,
    AssignedUserTypeToJSON,
} from './AssignedUserType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Base maintenance type
 * @export
 * @interface RoomMaintenanceChangeType
 */
export interface RoomMaintenanceChangeType {
    /**
     * 
     * @type {AssignedUserType}
     * @memberof RoomMaintenanceChangeType
     */
    assignedUserInfo?: AssignedUserType;
    /**
     * 
     * @type {string}
     * @memberof RoomMaintenanceChangeType
     */
    hotelId?: string;
    /**
     * Maintenance Code
     * @type {string}
     * @memberof RoomMaintenanceChangeType
     */
    maintenanceCode?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomMaintenanceChangeType
     */
    maintenanceId?: UniqueIDType;
    /**
     * Maintenance remarks
     * @type {string}
     * @memberof RoomMaintenanceChangeType
     */
    remarks?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomMaintenanceChangeType
     */
    roomId?: string;
}

/**
 * Check if a given object implements the RoomMaintenanceChangeType interface.
 */
export function instanceOfRoomMaintenanceChangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomMaintenanceChangeTypeFromJSON(json: any): RoomMaintenanceChangeType {
    return RoomMaintenanceChangeTypeFromJSONTyped(json, false);
}

export function RoomMaintenanceChangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomMaintenanceChangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assignedUserInfo': !exists(json, 'assignedUserInfo') ? undefined : AssignedUserTypeFromJSON(json['assignedUserInfo']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'maintenanceCode': !exists(json, 'maintenanceCode') ? undefined : json['maintenanceCode'],
        'maintenanceId': !exists(json, 'maintenanceId') ? undefined : UniqueIDTypeFromJSON(json['maintenanceId']),
        'remarks': !exists(json, 'remarks') ? undefined : json['remarks'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
    };
}

export function RoomMaintenanceChangeTypeToJSON(value?: RoomMaintenanceChangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assignedUserInfo': AssignedUserTypeToJSON(value.assignedUserInfo),
        'hotelId': value.hotelId,
        'maintenanceCode': value.maintenanceCode,
        'maintenanceId': UniqueIDTypeToJSON(value.maintenanceId),
        'remarks': value.remarks,
        'roomId': value.roomId,
    };
}

