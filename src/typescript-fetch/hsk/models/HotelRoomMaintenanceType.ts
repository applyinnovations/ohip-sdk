/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomMaintenanceType } from './RoomMaintenanceType';
import {
    RoomMaintenanceTypeFromJSON,
    RoomMaintenanceTypeFromJSONTyped,
    RoomMaintenanceTypeToJSON,
} from './RoomMaintenanceType';

/**
 * Hotel Rooms maintenance information type.
 * @export
 * @interface HotelRoomMaintenanceType
 */
export interface HotelRoomMaintenanceType {
    /**
     * 
     * @type {string}
     * @memberof HotelRoomMaintenanceType
     */
    hotelId?: string;
    /**
     * 
     * @type {Array<RoomMaintenanceType>}
     * @memberof HotelRoomMaintenanceType
     */
    roomMaintenance?: Array<RoomMaintenanceType>;
}

/**
 * Check if a given object implements the HotelRoomMaintenanceType interface.
 */
export function instanceOfHotelRoomMaintenanceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelRoomMaintenanceTypeFromJSON(json: any): HotelRoomMaintenanceType {
    return HotelRoomMaintenanceTypeFromJSONTyped(json, false);
}

export function HotelRoomMaintenanceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelRoomMaintenanceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'roomMaintenance': !exists(json, 'roomMaintenance') ? undefined : ((json['roomMaintenance'] as Array<any>).map(RoomMaintenanceTypeFromJSON)),
    };
}

export function HotelRoomMaintenanceTypeToJSON(value?: HotelRoomMaintenanceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'roomMaintenance': value.roomMaintenance === undefined ? undefined : ((value.roomMaintenance as Array<any>).map(RoomMaintenanceTypeToJSON)),
    };
}

