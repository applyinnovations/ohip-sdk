/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AutoGenerateTaskSheetsCriteriaType } from './AutoGenerateTaskSheetsCriteriaType';
import {
    AutoGenerateTaskSheetsCriteriaTypeFromJSON,
    AutoGenerateTaskSheetsCriteriaTypeFromJSONTyped,
    AutoGenerateTaskSheetsCriteriaTypeToJSON,
} from './AutoGenerateTaskSheetsCriteriaType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Request for generating housekeeping Task Sheets automatically. To generate task sheets automatically the minimum required criteria is the Task Date, Task Code, Number of Attendants/Tasksheets required and the Room Statuses. Based on the criteria defined, task sheets will be created and the rooms will be assigned to the Tasksheets. Example: if the criteria defines that Dirty room status to be used to generate 5 sheets, then only those rooms which have the status = Dirty will be used and will be assigned to the 5 sheets.
 * @export
 * @interface TaskSheets
 */
export interface TaskSheets {
    /**
     * 
     * @type {AutoGenerateTaskSheetsCriteriaType}
     * @memberof TaskSheets
     */
    criteria?: AutoGenerateTaskSheetsCriteriaType;
    /**
     * 
     * @type {Links}
     * @memberof TaskSheets
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof TaskSheets
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the TaskSheets interface.
 */
export function instanceOfTaskSheets(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaskSheetsFromJSON(json: any): TaskSheets {
    return TaskSheetsFromJSONTyped(json, false);
}

export function TaskSheetsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaskSheets {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'criteria': !exists(json, 'criteria') ? undefined : AutoGenerateTaskSheetsCriteriaTypeFromJSON(json['criteria']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function TaskSheetsToJSON(value?: TaskSheets | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'criteria': AutoGenerateTaskSheetsCriteriaTypeToJSON(value.criteria),
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

