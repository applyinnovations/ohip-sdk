/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br />Compatible with OPERA Cloud release 24.4.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020,2023 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FrontOfficeRoomStatusType } from './FrontOfficeRoomStatusType';
import {
    FrontOfficeRoomStatusTypeFromJSON,
    FrontOfficeRoomStatusTypeFromJSONTyped,
    FrontOfficeRoomStatusTypeToJSON,
} from './FrontOfficeRoomStatusType';
import type { HousekeepingRoomStatusType } from './HousekeepingRoomStatusType';
import {
    HousekeepingRoomStatusTypeFromJSON,
    HousekeepingRoomStatusTypeFromJSONTyped,
    HousekeepingRoomStatusTypeToJSON,
} from './HousekeepingRoomStatusType';

/**
 * Criteria for servicing a task room.
 * @export
 * @interface ServiceTaskRoomType
 */
export interface ServiceTaskRoomType {
    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceTaskRoomType
     */
    taskCodes?: Array<string>;
    /**
     * The allotted minutes for completing the task.
     * @type {number}
     * @memberof ServiceTaskRoomType
     */
    allottedMinutes?: number;
    /**
     * Property where the task sheet exists.
     * @type {string}
     * @memberof ServiceTaskRoomType
     */
    hotelId?: string;
    /**
     * Date for which the task sheet was created. By default this would be the current business date.
     * @type {string}
     * @memberof ServiceTaskRoomType
     */
    taskDate?: string;
    /**
     * The Task Sheet number where the room exists.
     * @type {number}
     * @memberof ServiceTaskRoomType
     */
    sheetNumber?: number;
    /**
     * The room number to service.
     * @type {string}
     * @memberof ServiceTaskRoomType
     */
    roomId?: string;
    /**
     * The Attendant ID who is currently servicing the room.
     * @type {string}
     * @memberof ServiceTaskRoomType
     */
    attendant?: string;
    /**
     * 
     * @type {FrontOfficeRoomStatusType}
     * @memberof ServiceTaskRoomType
     */
    frontOfficeStatus?: FrontOfficeRoomStatusType;
    /**
     * 
     * @type {HousekeepingRoomStatusType}
     * @memberof ServiceTaskRoomType
     */
    housekeepingRoomStatus?: HousekeepingRoomStatusType;
    /**
     * The task code for the current room which is to be done.
     * @type {string}
     * @memberof ServiceTaskRoomType
     */
    roomTaskCode?: string;
}

/**
 * Check if a given object implements the ServiceTaskRoomType interface.
 */
export function instanceOfServiceTaskRoomType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ServiceTaskRoomTypeFromJSON(json: any): ServiceTaskRoomType {
    return ServiceTaskRoomTypeFromJSONTyped(json, false);
}

export function ServiceTaskRoomTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceTaskRoomType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taskCodes': !exists(json, 'taskCodes') ? undefined : json['taskCodes'],
        'allottedMinutes': !exists(json, 'allottedMinutes') ? undefined : json['allottedMinutes'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'taskDate': !exists(json, 'taskDate') ? undefined : json['taskDate'],
        'sheetNumber': !exists(json, 'sheetNumber') ? undefined : json['sheetNumber'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'attendant': !exists(json, 'attendant') ? undefined : json['attendant'],
        'frontOfficeStatus': !exists(json, 'frontOfficeStatus') ? undefined : FrontOfficeRoomStatusTypeFromJSON(json['frontOfficeStatus']),
        'housekeepingRoomStatus': !exists(json, 'housekeepingRoomStatus') ? undefined : HousekeepingRoomStatusTypeFromJSON(json['housekeepingRoomStatus']),
        'roomTaskCode': !exists(json, 'roomTaskCode') ? undefined : json['roomTaskCode'],
    };
}

export function ServiceTaskRoomTypeToJSON(value?: ServiceTaskRoomType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taskCodes': value.taskCodes,
        'allottedMinutes': value.allottedMinutes,
        'hotelId': value.hotelId,
        'taskDate': value.taskDate,
        'sheetNumber': value.sheetNumber,
        'roomId': value.roomId,
        'attendant': value.attendant,
        'frontOfficeStatus': FrontOfficeRoomStatusTypeToJSON(value.frontOfficeStatus),
        'housekeepingRoomStatus': HousekeepingRoomStatusTypeToJSON(value.housekeepingRoomStatus),
        'roomTaskCode': value.roomTaskCode,
    };
}

