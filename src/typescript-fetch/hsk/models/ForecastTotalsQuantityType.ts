/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomTypeTaskType } from './RoomTypeTaskType';
import {
    RoomTypeTaskTypeFromJSON,
    RoomTypeTaskTypeFromJSONTyped,
    RoomTypeTaskTypeToJSON,
} from './RoomTypeTaskType';

/**
 * Quatity data for a single day.
 * @export
 * @interface ForecastTotalsQuantityType
 */
export interface ForecastTotalsQuantityType {
    /**
     * Date of the statistic.
     * @type {string}
     * @memberof ForecastTotalsQuantityType
     */
    date?: string;
    /**
     * Indicates whether the day is a weekend day or not.
     * @type {boolean}
     * @memberof ForecastTotalsQuantityType
     */
    isWeekend?: boolean;
    /**
     * The actual quantity
     * @type {number}
     * @memberof ForecastTotalsQuantityType
     */
    quantity?: number;
    /**
     * This is a break-down of the different room types and their tasks count on a date.
     * @type {Array<RoomTypeTaskType>}
     * @memberof ForecastTotalsQuantityType
     */
    roomTypeBreakDown?: Array<RoomTypeTaskType>;
    /**
     * Total Credits on the specified date.
     * @type {number}
     * @memberof ForecastTotalsQuantityType
     */
    totalCredits?: number;
}

/**
 * Check if a given object implements the ForecastTotalsQuantityType interface.
 */
export function instanceOfForecastTotalsQuantityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ForecastTotalsQuantityTypeFromJSON(json: any): ForecastTotalsQuantityType {
    return ForecastTotalsQuantityTypeFromJSONTyped(json, false);
}

export function ForecastTotalsQuantityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ForecastTotalsQuantityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'date': !exists(json, 'date') ? undefined : json['date'],
        'isWeekend': !exists(json, 'isWeekend') ? undefined : json['isWeekend'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'roomTypeBreakDown': !exists(json, 'roomTypeBreakDown') ? undefined : ((json['roomTypeBreakDown'] as Array<any>).map(RoomTypeTaskTypeFromJSON)),
        'totalCredits': !exists(json, 'totalCredits') ? undefined : json['totalCredits'],
    };
}

export function ForecastTotalsQuantityTypeToJSON(value?: ForecastTotalsQuantityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'date': value.date,
        'isWeekend': value.isWeekend,
        'quantity': value.quantity,
        'roomTypeBreakDown': value.roomTypeBreakDown === undefined ? undefined : ((value.roomTypeBreakDown as Array<any>).map(RoomTypeTaskTypeToJSON)),
        'totalCredits': value.totalCredits,
    };
}

