/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Housekeeping Service API
 * APIs to cater for Housekeeping functionality in OPERA Cloud. <br /><br />Housekeeping enables you to schedule daily room cleaning, maintenance, and housekeeping staff activities. It provides information on room status, out of order/out of service rooms, and forecasting.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeListType } from './CodeListType';
import {
    CodeListTypeFromJSON,
    CodeListTypeFromJSONTyped,
    CodeListTypeToJSON,
} from './CodeListType';
import type { RoomConditionType } from './RoomConditionType';
import {
    RoomConditionTypeFromJSON,
    RoomConditionTypeFromJSONTyped,
    RoomConditionTypeToJSON,
} from './RoomConditionType';

/**
 * 
 * @export
 * @interface SetRoomConditionType
 */
export interface SetRoomConditionType {
    /**
     * The hotel code of the room on where the condition is applied.
     * @type {string}
     * @memberof SetRoomConditionType
     */
    hotelId?: string;
    /**
     * If set to true, condition is applied even if the room is occupied.
     * @type {boolean}
     * @memberof SetRoomConditionType
     */
    includeOccupiedRooms?: boolean;
    /**
     * If set to true and the room is help by another user, then this lets the user override the room status.
     * @type {boolean}
     * @memberof SetRoomConditionType
     */
    overrideHoldRooms?: boolean;
    /**
     * 
     * @type {RoomConditionType}
     * @memberof SetRoomConditionType
     */
    roomCondition?: RoomConditionType;
    /**
     * 
     * @type {CodeListType}
     * @memberof SetRoomConditionType
     */
    roomNumberList?: CodeListType;
}

/**
 * Check if a given object implements the SetRoomConditionType interface.
 */
export function instanceOfSetRoomConditionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SetRoomConditionTypeFromJSON(json: any): SetRoomConditionType {
    return SetRoomConditionTypeFromJSONTyped(json, false);
}

export function SetRoomConditionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SetRoomConditionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'includeOccupiedRooms': !exists(json, 'includeOccupiedRooms') ? undefined : json['includeOccupiedRooms'],
        'overrideHoldRooms': !exists(json, 'overrideHoldRooms') ? undefined : json['overrideHoldRooms'],
        'roomCondition': !exists(json, 'roomCondition') ? undefined : RoomConditionTypeFromJSON(json['roomCondition']),
        'roomNumberList': !exists(json, 'roomNumberList') ? undefined : CodeListTypeFromJSON(json['roomNumberList']),
    };
}

export function SetRoomConditionTypeToJSON(value?: SetRoomConditionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'includeOccupiedRooms': value.includeOccupiedRooms,
        'overrideHoldRooms': value.overrideHoldRooms,
        'roomCondition': RoomConditionTypeToJSON(value.roomCondition),
        'roomNumberList': CodeListTypeToJSON(value.roomNumberList),
    };
}

