/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PropertyStatisticUnitType } from './PropertyStatisticUnitType';
import {
    PropertyStatisticUnitTypeFromJSON,
    PropertyStatisticUnitTypeFromJSONTyped,
    PropertyStatisticUnitTypeToJSON,
} from './PropertyStatisticUnitType';

/**
 * Unit type to hold statistic code and value pair e.g. [code - value] [Definite - 20] [Sales Allowance - 30] and its sub units.
 * @export
 * @interface StatisticUnitType
 */
export interface StatisticUnitType {
    /**
     * Code of the statistic unit.
     * @type {string}
     * @memberof StatisticUnitType
     */
    code?: string;
    /**
     * Statistic summary for a particular status for a particular property
     * @type {Array<PropertyStatisticUnitType>}
     * @memberof StatisticUnitType
     */
    propertyBookingSummaryStatistics?: Array<PropertyStatisticUnitType>;
    /**
     * Value of the statistic unit.
     * @type {string}
     * @memberof StatisticUnitType
     */
    value?: string;
}

/**
 * Check if a given object implements the StatisticUnitType interface.
 */
export function instanceOfStatisticUnitType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StatisticUnitTypeFromJSON(json: any): StatisticUnitType {
    return StatisticUnitTypeFromJSONTyped(json, false);
}

export function StatisticUnitTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatisticUnitType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'propertyBookingSummaryStatistics': !exists(json, 'propertyBookingSummaryStatistics') ? undefined : ((json['propertyBookingSummaryStatistics'] as Array<any>).map(PropertyStatisticUnitTypeFromJSON)),
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function StatisticUnitTypeToJSON(value?: StatisticUnitType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'propertyBookingSummaryStatistics': value.propertyBookingSummaryStatistics === undefined ? undefined : ((value.propertyBookingSummaryStatistics as Array<any>).map(PropertyStatisticUnitTypeToJSON)),
        'value': value.value,
    };
}

