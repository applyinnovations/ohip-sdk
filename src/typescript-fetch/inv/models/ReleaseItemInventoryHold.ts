/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HeldByType } from './HeldByType';
import {
    HeldByTypeFromJSON,
    HeldByTypeFromJSONTyped,
    HeldByTypeToJSON,
} from './HeldByType';
import type { ReleaseItemInventoryHoldType } from './ReleaseItemInventoryHoldType';
import {
    ReleaseItemInventoryHoldTypeFromJSON,
    ReleaseItemInventoryHoldTypeFromJSONTyped,
    ReleaseItemInventoryHoldTypeToJSON,
} from './ReleaseItemInventoryHoldType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for releasing a held item inventory/availability.
 * @export
 * @interface ReleaseItemInventoryHold
 */
export interface ReleaseItemInventoryHold {
    /**
     * 
     * @type {HeldByType}
     * @memberof ReleaseItemInventoryHold
     */
    heldBy?: HeldByType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReleaseItemInventoryHold
     */
    heldById?: UniqueIDType;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof ReleaseItemInventoryHold
     */
    hotelId?: string;
    /**
     * Used for codes in the OPERA Code tables. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof ReleaseItemInventoryHold
     */
    itemCode?: string;
    /**
     * ID reference for the one who hold the item. Used for releasing/reserving the item afterwards.
     * @type {number}
     * @memberof ReleaseItemInventoryHold
     */
    itemHoldId?: number;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReleaseItemInventoryHold
     */
    itemId?: UniqueIDType;
    /**
     * Collection of items for releasing an Items Inventory hold.
     * @type {Array<ReleaseItemInventoryHoldType>}
     * @memberof ReleaseItemInventoryHold
     */
    releaseItemsInventoryHoldInfo?: Array<ReleaseItemInventoryHoldType>;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof ReleaseItemInventoryHold
     */
    reserveDates?: TimeSpanType;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ReleaseItemInventoryHold
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ReleaseItemInventoryHold interface.
 */
export function instanceOfReleaseItemInventoryHold(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReleaseItemInventoryHoldFromJSON(json: any): ReleaseItemInventoryHold {
    return ReleaseItemInventoryHoldFromJSONTyped(json, false);
}

export function ReleaseItemInventoryHoldFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReleaseItemInventoryHold {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'heldBy': !exists(json, 'heldBy') ? undefined : HeldByTypeFromJSON(json['heldBy']),
        'heldById': !exists(json, 'heldById') ? undefined : UniqueIDTypeFromJSON(json['heldById']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'itemCode': !exists(json, 'itemCode') ? undefined : json['itemCode'],
        'itemHoldId': !exists(json, 'itemHoldId') ? undefined : json['itemHoldId'],
        'itemId': !exists(json, 'itemId') ? undefined : UniqueIDTypeFromJSON(json['itemId']),
        'releaseItemsInventoryHoldInfo': !exists(json, 'releaseItemsInventoryHoldInfo') ? undefined : ((json['releaseItemsInventoryHoldInfo'] as Array<any>).map(ReleaseItemInventoryHoldTypeFromJSON)),
        'reserveDates': !exists(json, 'reserveDates') ? undefined : TimeSpanTypeFromJSON(json['reserveDates']),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ReleaseItemInventoryHoldToJSON(value?: ReleaseItemInventoryHold | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'heldBy': HeldByTypeToJSON(value.heldBy),
        'heldById': UniqueIDTypeToJSON(value.heldById),
        'hotelId': value.hotelId,
        'itemCode': value.itemCode,
        'itemHoldId': value.itemHoldId,
        'itemId': UniqueIDTypeToJSON(value.itemId),
        'releaseItemsInventoryHoldInfo': value.releaseItemsInventoryHoldInfo === undefined ? undefined : ((value.releaseItemsInventoryHoldInfo as Array<any>).map(ReleaseItemInventoryHoldTypeToJSON)),
        'reserveDates': TimeSpanTypeToJSON(value.reserveDates),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

