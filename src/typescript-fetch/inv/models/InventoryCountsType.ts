/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Inventory counts for the given date range.
 * @export
 * @interface InventoryCountsType
 */
export interface InventoryCountsType {
    /**
     * Indicates whether enough inventory is available or not.
     * @type {boolean}
     * @memberof InventoryCountsType
     */
    available?: boolean;
    /**
     * Available Inventory count.
     * @type {number}
     * @memberof InventoryCountsType
     */
    availableCount?: number;
    /**
     * Available Tentative Inventory count.
     * @type {number}
     * @memberof InventoryCountsType
     */
    availableTentativeCount?: number;
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof InventoryCountsType
     */
    endDate?: Date;
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof InventoryCountsType
     */
    startDate?: Date;
}

/**
 * Check if a given object implements the InventoryCountsType interface.
 */
export function instanceOfInventoryCountsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InventoryCountsTypeFromJSON(json: any): InventoryCountsType {
    return InventoryCountsTypeFromJSONTyped(json, false);
}

export function InventoryCountsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InventoryCountsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'available': !exists(json, 'available') ? undefined : json['available'],
        'availableCount': !exists(json, 'availableCount') ? undefined : json['availableCount'],
        'availableTentativeCount': !exists(json, 'availableTentativeCount') ? undefined : json['availableTentativeCount'],
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'startDate': !exists(json, 'startDate') ? undefined : (new Date(json['startDate'])),
    };
}

export function InventoryCountsTypeToJSON(value?: InventoryCountsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'available': value.available,
        'availableCount': value.availableCount,
        'availableTentativeCount': value.availableTentativeCount,
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substr(0,10)),
        'startDate': value.startDate === undefined ? undefined : (value.startDate.toISOString().substr(0,10)),
    };
}

