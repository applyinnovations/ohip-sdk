/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InventoryCountsType } from './InventoryCountsType';
import {
    InventoryCountsTypeFromJSON,
    InventoryCountsTypeFromJSONTyped,
    InventoryCountsTypeToJSON,
} from './InventoryCountsType';
import type { InventoryLevelCountsListType } from './InventoryLevelCountsListType';
import {
    InventoryLevelCountsListTypeFromJSON,
    InventoryLevelCountsListTypeFromJSONTyped,
    InventoryLevelCountsListTypeToJSON,
} from './InventoryLevelCountsListType';

/**
 * A collection of Reservation objects and Unique IDs of Reservation.
 * @export
 * @interface HotelInventoryType
 */
export interface HotelInventoryType {
    /**
     * Collection of Inventory counts for the date ranges.
     * @type {Array<InventoryCountsType>}
     * @memberof HotelInventoryType
     */
    houseInventory?: Array<InventoryCountsType>;
    /**
     * Collection of Room Class level Inventory counts for the date ranges.
     * @type {Array<InventoryLevelCountsListType>}
     * @memberof HotelInventoryType
     */
    roomClassInventories?: Array<InventoryLevelCountsListType>;
    /**
     * Collection of Room type level Inventory counts for the date ranges.
     * @type {Array<InventoryLevelCountsListType>}
     * @memberof HotelInventoryType
     */
    roomTypeInventories?: Array<InventoryLevelCountsListType>;
}

/**
 * Check if a given object implements the HotelInventoryType interface.
 */
export function instanceOfHotelInventoryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelInventoryTypeFromJSON(json: any): HotelInventoryType {
    return HotelInventoryTypeFromJSONTyped(json, false);
}

export function HotelInventoryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelInventoryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'houseInventory': !exists(json, 'houseInventory') ? undefined : ((json['houseInventory'] as Array<any>).map(InventoryCountsTypeFromJSON)),
        'roomClassInventories': !exists(json, 'roomClassInventories') ? undefined : ((json['roomClassInventories'] as Array<any>).map(InventoryLevelCountsListTypeFromJSON)),
        'roomTypeInventories': !exists(json, 'roomTypeInventories') ? undefined : ((json['roomTypeInventories'] as Array<any>).map(InventoryLevelCountsListTypeFromJSON)),
    };
}

export function HotelInventoryTypeToJSON(value?: HotelInventoryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'houseInventory': value.houseInventory === undefined ? undefined : ((value.houseInventory as Array<any>).map(InventoryCountsTypeToJSON)),
        'roomClassInventories': value.roomClassInventories === undefined ? undefined : ((value.roomClassInventories as Array<any>).map(InventoryLevelCountsListTypeToJSON)),
        'roomTypeInventories': value.roomTypeInventories === undefined ? undefined : ((value.roomTypeInventories as Array<any>).map(InventoryLevelCountsListTypeToJSON)),
    };
}

