/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Inventory API
 * APIs to cater for Inventory functionality in OPERA Cloud. This includes sell limits for date ranges, viewing and updating the property&apos;s inventory, as well as item inventory (such as rollaways, microwaves etc.).<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatisticUnitType } from './StatisticUnitType';
import {
    StatisticUnitTypeFromJSON,
    StatisticUnitTypeFromJSONTyped,
    StatisticUnitTypeToJSON,
} from './StatisticUnitType';

/**
 * List of statistic units for a particular status.
 * @export
 * @interface StatusStatisticType
 */
export interface StatusStatisticType {
    /**
     * Unit type to hold statistic code and value pair.
     * @type {Array<StatisticUnitType>}
     * @memberof StatusStatisticType
     */
    statisticUnit?: Array<StatisticUnitType>;
    /**
     * Status type of statistic, e.g. Definite.
     * @type {string}
     * @memberof StatusStatisticType
     */
    status?: string;
}

/**
 * Check if a given object implements the StatusStatisticType interface.
 */
export function instanceOfStatusStatisticType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StatusStatisticTypeFromJSON(json: any): StatusStatisticType {
    return StatusStatisticTypeFromJSONTyped(json, false);
}

export function StatusStatisticTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatusStatisticType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'statisticUnit': !exists(json, 'statisticUnit') ? undefined : ((json['statisticUnit'] as Array<any>).map(StatisticUnitTypeFromJSON)),
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function StatusStatisticTypeToJSON(value?: StatusStatisticType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'statisticUnit': value.statisticUnit === undefined ? undefined : ((value.statisticUnit as Array<any>).map(StatisticUnitTypeToJSON)),
        'status': value.status,
    };
}

