/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud API for Customer Management Service
 * This API deals with the different aspect of the CustomerManagement.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CalendarTask,
  CalendarTaskAttachments,
  CalendarTasks,
  ExceptionDetailType,
  Status,
  TrackItItems,
} from '../models/index';
import {
    CalendarTaskFromJSON,
    CalendarTaskToJSON,
    CalendarTaskAttachmentsFromJSON,
    CalendarTaskAttachmentsToJSON,
    CalendarTasksFromJSON,
    CalendarTasksToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    StatusFromJSON,
    StatusToJSON,
    TrackItItemsFromJSON,
    TrackItItemsToJSON,
} from '../models/index';

export interface DeleteCalendarTaskRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCalendarTaskAttachmentRequest {
    linkedToId: string;
    attachId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTrackItItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItId?: Array<string>;
    trackItIdContext?: Array<string>;
    trackItIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCalendarTaskRequest {
    activityId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    idType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCalendarTaskAttachmentsRequest {
    taskId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    idType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCalendarTasksRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countSummary?: boolean;
    taskSummary?: boolean;
    hotelIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    duration?: string;
    completionStatus?: GetCalendarTasksCompletionStatusEnum;
    priorityCodes?: Array<string>;
    classCodes?: Set<GetCalendarTasksClassCodesEnum>;
    typeCodes?: Array<string>;
    purpose?: string;
    taskOwner?: string;
    author?: string;
    accountId?: string;
    accountIdContext?: string;
    accountIdType?: string;
    contactId?: string;
    contactIdContext?: string;
    contactIdType?: string;
    blockId?: string;
    blockIdContext?: string;
    blockIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ticketId?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    givenName?: string;
    surname?: string;
    trackItGroups?: Set<GetTrackItItemsTrackItGroupsEnum>;
    types?: Array<string>;
    locations?: Array<string>;
    actions?: Array<string>;
    actionStatuses?: Set<GetTrackItItemsActionStatusesEnum>;
    appUserId?: string;
    appUserIdContext?: string;
    appUserIdType?: string;
    assignedStatuses?: Set<GetTrackItItemsAssignedStatusesEnum>;
    room?: string;
    followUpDate?: string;
    createdOn?: string;
    createdByUserId?: string;
    createdByUserIdContext?: string;
    createdByUserIdType?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCalendarTaskRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    calendarTask: CalendarTask;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTrackItItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItItems: TrackItItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCalendarTaskRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    calendarTask: CalendarTask;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTrackItItemsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItItems: TrackItItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CustomerManagementApi extends runtime.BaseAPI {

    /**
     * This API will allow you to delete a Calendar Task. <p><strong>OperationId:</strong>deleteCalendarTask</p>
     * Delete a Calendar Task
     */
    async deleteCalendarTaskRaw(requestParameters: DeleteCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling deleteCalendarTask.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCalendarTask.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/task`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete a Calendar Task. <p><strong>OperationId:</strong>deleteCalendarTask</p>
     * Delete a Calendar Task
     */
    async deleteCalendarTask(requestParameters: DeleteCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an attachment associated with the calendar task <p><strong>OperationId:</strong>deleteCalendarTaskAttachment</p>
     * Delete a Calendar Task attachment 
     */
    async deleteCalendarTaskAttachmentRaw(requestParameters: DeleteCalendarTaskAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.linkedToId === null || requestParameters.linkedToId === undefined) {
            throw new runtime.RequiredError('linkedToId','Required parameter requestParameters.linkedToId was null or undefined when calling deleteCalendarTaskAttachment.');
        }
        
        if (requestParameters.attachId === null || requestParameters.attachId === undefined) {
            throw new runtime.RequiredError('attachId','Required parameter requestParameters.attachId was null or undefined when calling deleteCalendarTaskAttachment.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.linkedToId !== undefined) {
            queryParameters['linkedToId'] = requestParameters.linkedToId;
        }

        if (requestParameters.attachId !== undefined) {
            queryParameters['attachId'] = requestParameters.attachId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/tasks/attachment`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an attachment associated with the calendar task <p><strong>OperationId:</strong>deleteCalendarTaskAttachment</p>
     * Delete a Calendar Task attachment 
     */
    async deleteCalendarTaskAttachment(requestParameters: DeleteCalendarTaskAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCalendarTaskAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Track It Item for a property. <p><strong>OperationId:</strong>deleteTrackItItems</p>
     * Deletes track it items
     */
    async deleteTrackItItemsRaw(requestParameters: DeleteTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTrackItItems.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.trackItId) {
            queryParameters['trackItId'] = requestParameters.trackItId;
        }

        if (requestParameters.trackItIdContext) {
            queryParameters['trackItIdContext'] = requestParameters.trackItIdContext;
        }

        if (requestParameters.trackItIdType) {
            queryParameters['trackItIdType'] = requestParameters.trackItIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a Track It Item for a property. <p><strong>OperationId:</strong>deleteTrackItItems</p>
     * Deletes track it items
     */
    async deleteTrackItItems(requestParameters: DeleteTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * With this API you can get a Calendar Task. <p><strong>OperationId:</strong>getCalendarTask</p>
     * Get a Calendar Task
     */
    async getCalendarTaskRaw(requestParameters: GetCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalendarTask>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getCalendarTask.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/{activityId}/task`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalendarTaskFromJSON(jsonValue));
    }

    /**
     * With this API you can get a Calendar Task. <p><strong>OperationId:</strong>getCalendarTask</p>
     * Get a Calendar Task
     */
    async getCalendarTask(requestParameters: GetCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalendarTask> {
        const response = await this.getCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the attachments on a Calendar task. <p><strong>OperationId:</strong>getCalendarTaskAttachments</p>
     * Get calendar task attachments
     */
    async getCalendarTaskAttachmentsRaw(requestParameters: GetCalendarTaskAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalendarTaskAttachments>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getCalendarTaskAttachments.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCalendarTaskAttachments.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/tasks/{taskId}/attachments`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalendarTaskAttachmentsFromJSON(jsonValue));
    }

    /**
     * Retrieve the attachments on a Calendar task. <p><strong>OperationId:</strong>getCalendarTaskAttachments</p>
     * Get calendar task attachments
     */
    async getCalendarTaskAttachments(requestParameters: GetCalendarTaskAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalendarTaskAttachments> {
        const response = await this.getCalendarTaskAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can fetch a list of Calendar Tasks for with this API, for one or more properties. <p><strong>OperationId:</strong>getCalendarTasks</p>
     * Get Calendar Tasks
     */
    async getCalendarTasksRaw(requestParameters: GetCalendarTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalendarTasks>> {
        const queryParameters: any = {};

        if (requestParameters.countSummary !== undefined) {
            queryParameters['countSummary'] = requestParameters.countSummary;
        }

        if (requestParameters.taskSummary !== undefined) {
            queryParameters['taskSummary'] = requestParameters.taskSummary;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.completionStatus !== undefined) {
            queryParameters['completionStatus'] = requestParameters.completionStatus;
        }

        if (requestParameters.priorityCodes) {
            queryParameters['priorityCodes'] = requestParameters.priorityCodes;
        }

        if (requestParameters.classCodes) {
            queryParameters['classCodes'] = requestParameters.classCodes;
        }

        if (requestParameters.typeCodes) {
            queryParameters['typeCodes'] = requestParameters.typeCodes;
        }

        if (requestParameters.purpose !== undefined) {
            queryParameters['purpose'] = requestParameters.purpose;
        }

        if (requestParameters.taskOwner !== undefined) {
            queryParameters['taskOwner'] = requestParameters.taskOwner;
        }

        if (requestParameters.author !== undefined) {
            queryParameters['author'] = requestParameters.author;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.accountIdContext !== undefined) {
            queryParameters['accountIdContext'] = requestParameters.accountIdContext;
        }

        if (requestParameters.accountIdType !== undefined) {
            queryParameters['accountIdType'] = requestParameters.accountIdType;
        }

        if (requestParameters.contactId !== undefined) {
            queryParameters['contactId'] = requestParameters.contactId;
        }

        if (requestParameters.contactIdContext !== undefined) {
            queryParameters['contactIdContext'] = requestParameters.contactIdContext;
        }

        if (requestParameters.contactIdType !== undefined) {
            queryParameters['contactIdType'] = requestParameters.contactIdType;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdContext !== undefined) {
            queryParameters['blockIdContext'] = requestParameters.blockIdContext;
        }

        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/tasks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalendarTasksFromJSON(jsonValue));
    }

    /**
     * You can fetch a list of Calendar Tasks for with this API, for one or more properties. <p><strong>OperationId:</strong>getCalendarTasks</p>
     * Get Calendar Tasks
     */
    async getCalendarTasks(requestParameters: GetCalendarTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalendarTasks> {
        const response = await this.getCalendarTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of all Track It Items for a property. <p><strong>OperationId:</strong>getTrackItItems</p>
     * Fetches track it items
     */
    async getTrackItItemsRaw(requestParameters: GetTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItItems>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTrackItItems.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.ticketId !== undefined) {
            queryParameters['ticketId'] = requestParameters.ticketId;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.trackItGroups) {
            queryParameters['trackItGroups'] = requestParameters.trackItGroups;
        }

        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.locations) {
            queryParameters['locations'] = requestParameters.locations;
        }

        if (requestParameters.actions) {
            queryParameters['actions'] = requestParameters.actions;
        }

        if (requestParameters.actionStatuses) {
            queryParameters['actionStatuses'] = requestParameters.actionStatuses;
        }

        if (requestParameters.appUserId !== undefined) {
            queryParameters['appUserId'] = requestParameters.appUserId;
        }

        if (requestParameters.appUserIdContext !== undefined) {
            queryParameters['appUserIdContext'] = requestParameters.appUserIdContext;
        }

        if (requestParameters.appUserIdType !== undefined) {
            queryParameters['appUserIdType'] = requestParameters.appUserIdType;
        }

        if (requestParameters.assignedStatuses) {
            queryParameters['assignedStatuses'] = requestParameters.assignedStatuses;
        }

        if (requestParameters.room !== undefined) {
            queryParameters['room'] = requestParameters.room;
        }

        if (requestParameters.followUpDate !== undefined) {
            queryParameters['followUpDate'] = requestParameters.followUpDate;
        }

        if (requestParameters.createdOn !== undefined) {
            queryParameters['createdOn'] = requestParameters.createdOn;
        }

        if (requestParameters.createdByUserId !== undefined) {
            queryParameters['createdByUserId'] = requestParameters.createdByUserId;
        }

        if (requestParameters.createdByUserIdContext !== undefined) {
            queryParameters['createdByUserIdContext'] = requestParameters.createdByUserIdContext;
        }

        if (requestParameters.createdByUserIdType !== undefined) {
            queryParameters['createdByUserIdType'] = requestParameters.createdByUserIdType;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItItemsFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of all Track It Items for a property. <p><strong>OperationId:</strong>getTrackItItems</p>
     * Fetches track it items
     */
    async getTrackItItems(requestParameters: GetTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItItems> {
        const response = await this.getTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to create a new Calendar Task. <p><strong>OperationId:</strong>postCalendarTask</p>
     * Create Calendar Task
     */
    async postCalendarTaskRaw(requestParameters: PostCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCalendarTask.');
        }
        
        if (requestParameters.calendarTask === null || requestParameters.calendarTask === undefined) {
            throw new runtime.RequiredError('calendarTask','Required parameter requestParameters.calendarTask was null or undefined when calling postCalendarTask.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/task`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalendarTaskToJSON(requestParameters.calendarTask),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to create a new Calendar Task. <p><strong>OperationId:</strong>postCalendarTask</p>
     * Create Calendar Task
     */
    async postCalendarTask(requestParameters: PostCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Track It Item. Track It manages storage and delivery of guest luggage, parcels, vehicles (valet), and lost items.  They can optionally be linked to a reservation if related or an arrival, in-house or departure reservation. <p><strong>OperationId:</strong>postTrackItItems</p>
     * Creates track it items
     */
    async postTrackItItemsRaw(requestParameters: PostTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTrackItItems.');
        }
        
        if (requestParameters.trackItItems === null || requestParameters.trackItItems === undefined) {
            throw new runtime.RequiredError('trackItItems','Required parameter requestParameters.trackItItems was null or undefined when calling postTrackItItems.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItItemsToJSON(requestParameters.trackItItems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Track It Item. Track It manages storage and delivery of guest luggage, parcels, vehicles (valet), and lost items.  They can optionally be linked to a reservation if related or an arrival, in-house or departure reservation. <p><strong>OperationId:</strong>postTrackItItems</p>
     * Creates track it items
     */
    async postTrackItItems(requestParameters: PostTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to update an existing Calendar Task. <p><strong>OperationId:</strong>putCalendarTask</p>
     * Update Calendar Task
     */
    async putCalendarTaskRaw(requestParameters: PutCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalendarTask>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling putCalendarTask.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCalendarTask.');
        }
        
        if (requestParameters.calendarTask === null || requestParameters.calendarTask === undefined) {
            throw new runtime.RequiredError('calendarTask','Required parameter requestParameters.calendarTask was null or undefined when calling putCalendarTask.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/task`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CalendarTaskToJSON(requestParameters.calendarTask),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalendarTaskFromJSON(jsonValue));
    }

    /**
     * This API will allow you to update an existing Calendar Task. <p><strong>OperationId:</strong>putCalendarTask</p>
     * Update Calendar Task
     */
    async putCalendarTask(requestParameters: PutCalendarTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalendarTask> {
        const response = await this.putCalendarTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the details of a Track It Item for a property. <p><strong>OperationId:</strong>putTrackItItems</p>
     * Updates track it items
     */
    async putTrackItItemsRaw(requestParameters: PutTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItItems>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putTrackItItems.');
        }
        
        if (requestParameters.trackItItems === null || requestParameters.trackItItems === undefined) {
            throw new runtime.RequiredError('trackItItems','Required parameter requestParameters.trackItItems was null or undefined when calling putTrackItItems.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItItemsToJSON(requestParameters.trackItItems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItItemsFromJSON(jsonValue));
    }

    /**
     * Update the details of a Track It Item for a property. <p><strong>OperationId:</strong>putTrackItItems</p>
     * Updates track it items
     */
    async putTrackItItems(requestParameters: PutTrackItItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItItems> {
        const response = await this.putTrackItItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCalendarTasksCompletionStatusEnum = {
    All: 'All',
    Completed: 'Completed',
    Outstanding: 'Outstanding'
} as const;
export type GetCalendarTasksCompletionStatusEnum = typeof GetCalendarTasksCompletionStatusEnum[keyof typeof GetCalendarTasksCompletionStatusEnum];
/**
 * @export
 */
export const GetCalendarTasksClassCodesEnum = {
    Correspondence: 'Correspondence',
    Meeting: 'Meeting',
    Todolist: 'Todolist',
    Call: 'Call',
    Appointment: 'Appointment'
} as const;
export type GetCalendarTasksClassCodesEnum = typeof GetCalendarTasksClassCodesEnum[keyof typeof GetCalendarTasksClassCodesEnum];
/**
 * @export
 */
export const GetTrackItItemsTrackItGroupsEnum = {
    Parcel: 'Parcel',
    Valet: 'Valet',
    Baggage: 'Baggage',
    Lost: 'Lost'
} as const;
export type GetTrackItItemsTrackItGroupsEnum = typeof GetTrackItItemsTrackItGroupsEnum[keyof typeof GetTrackItItemsTrackItGroupsEnum];
/**
 * @export
 */
export const GetTrackItItemsActionStatusesEnum = {
    Open: 'Open',
    Closed: 'Closed'
} as const;
export type GetTrackItItemsActionStatusesEnum = typeof GetTrackItItemsActionStatusesEnum[keyof typeof GetTrackItItemsActionStatusesEnum];
/**
 * @export
 */
export const GetTrackItItemsAssignedStatusesEnum = {
    Assigned: 'Assigned',
    Unassigned: 'Unassigned'
} as const;
export type GetTrackItItemsAssignedStatusesEnum = typeof GetTrackItItemsAssignedStatusesEnum[keyof typeof GetTrackItItemsAssignedStatusesEnum];
