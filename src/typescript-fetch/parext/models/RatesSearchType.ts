/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Availability Extension API
 * APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CorporateRatesSearchType } from './CorporateRatesSearchType';
import {
    CorporateRatesSearchTypeFromJSON,
    CorporateRatesSearchTypeFromJSONTyped,
    CorporateRatesSearchTypeToJSON,
} from './CorporateRatesSearchType';

/**
 * 
 * @export
 * @interface RatesSearchType
 */
export interface RatesSearchType {
    /**
     * 
     * @type {CorporateRatesSearchType}
     * @memberof RatesSearchType
     */
    corporateRates?: CorporateRatesSearchType;
    /**
     * Available Rate Plan codes whose availability is requested.
     * @type {Array<string>}
     * @memberof RatesSearchType
     */
    ratePlanCodes?: Array<string>;
}

/**
 * Check if a given object implements the RatesSearchType interface.
 */
export function instanceOfRatesSearchType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatesSearchTypeFromJSON(json: any): RatesSearchType {
    return RatesSearchTypeFromJSONTyped(json, false);
}

export function RatesSearchTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatesSearchType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'corporateRates': !exists(json, 'corporateRates') ? undefined : CorporateRatesSearchTypeFromJSON(json['corporateRates']),
        'ratePlanCodes': !exists(json, 'ratePlanCodes') ? undefined : json['ratePlanCodes'],
    };
}

export function RatesSearchTypeToJSON(value?: RatesSearchType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'corporateRates': CorporateRatesSearchTypeToJSON(value.corporateRates),
        'ratePlanCodes': value.ratePlanCodes,
    };
}

