/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Availability Extension API
 * APIs to provide extended features for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br />Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p>This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2022 Oracle and/or its affiliates.</p><br /><br /> Compatible with OPERA Cloud release 23.2.0.0.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2.0.0
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  MultiRoomRateAvailabilityResponseType,
  PostMultiRoomRateAvailabilityRequest,
  SearchPropertyRequestType,
  SearchPropertyResponseType,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    MultiRoomRateAvailabilityResponseTypeFromJSON,
    MultiRoomRateAvailabilityResponseTypeToJSON,
    PostMultiRoomRateAvailabilityRequestFromJSON,
    PostMultiRoomRateAvailabilityRequestToJSON,
    SearchPropertyRequestTypeFromJSON,
    SearchPropertyRequestTypeToJSON,
    SearchPropertyResponseTypeFromJSON,
    SearchPropertyResponseTypeToJSON,
} from '../models/index';

export interface PostMinimumRateAvailabilityRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
    body?: SearchPropertyRequestType;
}

export interface PostMultiRoomRateAvailabilityOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    request?: PostMultiRoomRateAvailabilityRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class AvailabilityApi extends runtime.BaseAPI {

    /**
     * List the availability status and rate range at multiple properties for given list of properties and multiple combinations of rate plan codes and negotiated rates. <p><strong>OperationId:</strong>postMinimumRateAvailability</p>
     * Advanced Property Search with minimum rates.
     */
    async postMinimumRateAvailabilityRaw(requestParameters: PostMinimumRateAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchPropertyResponseType>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMinimumRateAvailability.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMinimumRateAvailability.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMinimumRateAvailability.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json; charset=utf-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/minimumRateAvailability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchPropertyRequestTypeToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchPropertyResponseTypeFromJSON(jsonValue));
    }

    /**
     * List the availability status and rate range at multiple properties for given list of properties and multiple combinations of rate plan codes and negotiated rates. <p><strong>OperationId:</strong>postMinimumRateAvailability</p>
     * Advanced Property Search with minimum rates.
     */
    async postMinimumRateAvailability(requestParameters: PostMinimumRateAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchPropertyResponseType> {
        const response = await this.postMinimumRateAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List availability across requested properties matching given rooms with quantity, occupancy and rates.
     * Advanced multi property search with multiple room and rates.
     */
    async postMultiRoomRateAvailabilityRaw(requestParameters: PostMultiRoomRateAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultiRoomRateAvailabilityResponseType>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMultiRoomRateAvailability.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMultiRoomRateAvailability.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMultiRoomRateAvailability.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling postMultiRoomRateAvailability.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/multiRoomRateAvailability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMultiRoomRateAvailabilityRequestToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MultiRoomRateAvailabilityResponseTypeFromJSON(jsonValue));
    }

    /**
     * List availability across requested properties matching given rooms with quantity, occupancy and rates.
     * Advanced multi property search with multiple room and rates.
     */
    async postMultiRoomRateAvailability(requestParameters: PostMultiRoomRateAvailabilityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultiRoomRateAvailabilityResponseType> {
        const response = await this.postMultiRoomRateAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
