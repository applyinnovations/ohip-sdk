/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssociateCommissionAgentToReservations,
  AssociateCommissionAgentToReservationsStatus,
  BankAccountsDetails,
  CalculateCommissions,
  CalculateCommissionsStatus,
  CommissionCheckStatus,
  CommissionCheckToBeChanged,
  CommissionDetails,
  CommissionNotesDetails,
  CommissionPaymentActivityByRangeStatus,
  CommissionPaymentActivityByRangeToBeChanged,
  CommissionPaymentDetails,
  CommissionPaymentsActivityDetails,
  CommissionStatus,
  CommissionToBeChanged,
  CommissionsDetails,
  ExceptionDetailType,
  ProcessCommissionPayments,
  ProcessCommissionPaymentsStatus,
  RecalculateCommissionOnCodeChange,
  RecalculateCommissionOnCodeChangeStatus,
  ReprintCommissionCheckByRange,
  ReprintCommissionCheckByRangeStatus,
  SetProcessingInstructions,
  Status,
} from '../models/index';
import {
    AssociateCommissionAgentToReservationsFromJSON,
    AssociateCommissionAgentToReservationsToJSON,
    AssociateCommissionAgentToReservationsStatusFromJSON,
    AssociateCommissionAgentToReservationsStatusToJSON,
    BankAccountsDetailsFromJSON,
    BankAccountsDetailsToJSON,
    CalculateCommissionsFromJSON,
    CalculateCommissionsToJSON,
    CalculateCommissionsStatusFromJSON,
    CalculateCommissionsStatusToJSON,
    CommissionCheckStatusFromJSON,
    CommissionCheckStatusToJSON,
    CommissionCheckToBeChangedFromJSON,
    CommissionCheckToBeChangedToJSON,
    CommissionDetailsFromJSON,
    CommissionDetailsToJSON,
    CommissionNotesDetailsFromJSON,
    CommissionNotesDetailsToJSON,
    CommissionPaymentActivityByRangeStatusFromJSON,
    CommissionPaymentActivityByRangeStatusToJSON,
    CommissionPaymentActivityByRangeToBeChangedFromJSON,
    CommissionPaymentActivityByRangeToBeChangedToJSON,
    CommissionPaymentDetailsFromJSON,
    CommissionPaymentDetailsToJSON,
    CommissionPaymentsActivityDetailsFromJSON,
    CommissionPaymentsActivityDetailsToJSON,
    CommissionStatusFromJSON,
    CommissionStatusToJSON,
    CommissionToBeChangedFromJSON,
    CommissionToBeChangedToJSON,
    CommissionsDetailsFromJSON,
    CommissionsDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ProcessCommissionPaymentsFromJSON,
    ProcessCommissionPaymentsToJSON,
    ProcessCommissionPaymentsStatusFromJSON,
    ProcessCommissionPaymentsStatusToJSON,
    RecalculateCommissionOnCodeChangeFromJSON,
    RecalculateCommissionOnCodeChangeToJSON,
    RecalculateCommissionOnCodeChangeStatusFromJSON,
    RecalculateCommissionOnCodeChangeStatusToJSON,
    ReprintCommissionCheckByRangeFromJSON,
    ReprintCommissionCheckByRangeToJSON,
    ReprintCommissionCheckByRangeStatusFromJSON,
    ReprintCommissionCheckByRangeStatusToJSON,
    SetProcessingInstructionsFromJSON,
    SetProcessingInstructionsToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface AssociateCommissionAgentToReservationsRequest {
    commissionAgentId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    associateCommissionAgentToReservations: AssociateCommissionAgentToReservations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CalculateCommissionsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    calculateCommissions: CalculateCommissions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCommissionRequest {
    commissionId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    commissionToBeChanged: CommissionToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCommissionCheckRequest {
    bankAccountId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    commissionCheckToBeChanged: CommissionCheckToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCommissionPaymentActivityByRangeRequest {
    bankAccountId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    commissionPaymentActivityByRangeToBeChanged: CommissionPaymentActivityByRangeToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DiscardCommissionChecksRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bankAccountId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    fromCheck?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBankAccountsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bankName?: string;
    bankAccountNo?: string;
    currency?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionRequest {
    commissionId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionNotesRequest {
    reservationId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionPaymentDetailsRequest {
    hotelId: string;
    reservationId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionPaymentsActivityRequest {
    bankAccountId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    fileName?: string;
    payee?: string;
    checkNo?: number;
    status?: Set<GetCommissionPaymentsActivityStatusEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCommissionsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bankAccountId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    agentId?: string;
    agentIdIdExtension?: number;
    agentIdIdContext?: string;
    agentIdType?: string;
    resvNameId?: string;
    resvNameIdIdExtension?: number;
    resvNameIdIdContext?: string;
    resvNameIdType?: string;
    commissionId?: string;
    commissionIdIdExtension?: number;
    commissionIdIdContext?: string;
    commissionIdType?: string;
    batchId?: string;
    batchIdIdExtension?: number;
    batchIdIdContext?: string;
    batchIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationsForCommissionsRequest {
    hotelId: string;
    bankAccountId: string;
    agentId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    guestName?: string;
    confirmationNo?: string;
    reservationStatus?: Set<GetReservationsForCommissionsReservationStatusEnum>;
    accountReceivableOffset?: boolean;
    onHold?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTravelAgentsForCommissionsRequest {
    hotelId: string;
    bankAccountId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ProcessCommissionPaymentsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    processCommissionPayments: ProcessCommissionPayments;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RecalculateCommissionOnCodeChangeRequest {
    commissionCode: string;
    commissionId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    recalculateCommissionOnCodeChange: RecalculateCommissionOnCodeChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCommissionRequest {
    commissionId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    detachDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCommissionAgentFromReservationsRequest {
    commissionAgentId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    commissionAgentType?: RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum;
    idExtension?: number;
    idContext?: string;
    type?: string;
    reservationId?: Array<string>;
    reservationIdIdExtension?: Array<number>;
    reservationIdIdContext?: Array<string>;
    reservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ReprintCommissionCheckByRangeRequest {
    bankAccountId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    reprintCommissionCheckByRange: ReprintCommissionCheckByRange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetProcessingInstructionsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    setProcessingInstructions: SetProcessingInstructions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CommissionsApi extends runtime.BaseAPI {

    /**
     *  <p><strong>OperationId:</strong>associateCommissionAgentToReservations</p>
     * Operation to associate commission agent to reservations.
     */
    async associateCommissionAgentToReservationsRaw(requestParameters: AssociateCommissionAgentToReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssociateCommissionAgentToReservationsStatus>> {
        if (requestParameters.commissionAgentId === null || requestParameters.commissionAgentId === undefined) {
            throw new runtime.RequiredError('commissionAgentId','Required parameter requestParameters.commissionAgentId was null or undefined when calling associateCommissionAgentToReservations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling associateCommissionAgentToReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling associateCommissionAgentToReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling associateCommissionAgentToReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling associateCommissionAgentToReservations.');
        }

        if (requestParameters.associateCommissionAgentToReservations === null || requestParameters.associateCommissionAgentToReservations === undefined) {
            throw new runtime.RequiredError('associateCommissionAgentToReservations','Required parameter requestParameters.associateCommissionAgentToReservations was null or undefined when calling associateCommissionAgentToReservations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionAgent/{commissionAgentId}/commissions`.replace(`{${"commissionAgentId"}}`, encodeURIComponent(String(requestParameters.commissionAgentId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssociateCommissionAgentToReservationsToJSON(requestParameters.associateCommissionAgentToReservations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssociateCommissionAgentToReservationsStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>associateCommissionAgentToReservations</p>
     * Operation to associate commission agent to reservations.
     */
    async associateCommissionAgentToReservations(requestParameters: AssociateCommissionAgentToReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssociateCommissionAgentToReservationsStatus> {
        const response = await this.associateCommissionAgentToReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>calculateCommissions</p>
     * Operation to calculate commissions.
     */
    async calculateCommissionsRaw(requestParameters: CalculateCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculateCommissionsStatus>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling calculateCommissions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling calculateCommissions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling calculateCommissions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling calculateCommissions.');
        }

        if (requestParameters.calculateCommissions === null || requestParameters.calculateCommissions === undefined) {
            throw new runtime.RequiredError('calculateCommissions','Required parameter requestParameters.calculateCommissions was null or undefined when calling calculateCommissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateCommissionsToJSON(requestParameters.calculateCommissions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculateCommissionsStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>calculateCommissions</p>
     * Operation to calculate commissions.
     */
    async calculateCommissions(requestParameters: CalculateCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculateCommissionsStatus> {
        const response = await this.calculateCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommission</p>
     * Operation to change commission.
     */
    async changeCommissionRaw(requestParameters: ChangeCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionStatus>> {
        if (requestParameters.commissionId === null || requestParameters.commissionId === undefined) {
            throw new runtime.RequiredError('commissionId','Required parameter requestParameters.commissionId was null or undefined when calling changeCommission.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeCommission.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeCommission.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeCommission.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeCommission.');
        }

        if (requestParameters.commissionToBeChanged === null || requestParameters.commissionToBeChanged === undefined) {
            throw new runtime.RequiredError('commissionToBeChanged','Required parameter requestParameters.commissionToBeChanged was null or undefined when calling changeCommission.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}`.replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommissionToBeChangedToJSON(requestParameters.commissionToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommission</p>
     * Operation to change commission.
     */
    async changeCommission(requestParameters: ChangeCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionStatus> {
        const response = await this.changeCommissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionCheck</p>
     * Operation to change commission check.
     */
    async changeCommissionCheckRaw(requestParameters: ChangeCommissionCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionCheckStatus>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling changeCommissionCheck.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeCommissionCheck.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeCommissionCheck.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeCommissionCheck.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeCommissionCheck.');
        }

        if (requestParameters.commissionCheckToBeChanged === null || requestParameters.commissionCheckToBeChanged === undefined) {
            throw new runtime.RequiredError('commissionCheckToBeChanged','Required parameter requestParameters.commissionCheckToBeChanged was null or undefined when calling changeCommissionCheck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionChecks`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommissionCheckToBeChangedToJSON(requestParameters.commissionCheckToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionCheckStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionCheck</p>
     * Operation to change commission check.
     */
    async changeCommissionCheck(requestParameters: ChangeCommissionCheckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionCheckStatus> {
        const response = await this.changeCommissionCheckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionPaymentActivityByRange</p>
     * Operation to change commission payment activity by range.
     */
    async changeCommissionPaymentActivityByRangeRaw(requestParameters: ChangeCommissionPaymentActivityByRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentActivityByRangeStatus>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling changeCommissionPaymentActivityByRange.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeCommissionPaymentActivityByRange.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeCommissionPaymentActivityByRange.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeCommissionPaymentActivityByRange.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeCommissionPaymentActivityByRange.');
        }

        if (requestParameters.commissionPaymentActivityByRangeToBeChanged === null || requestParameters.commissionPaymentActivityByRangeToBeChanged === undefined) {
            throw new runtime.RequiredError('commissionPaymentActivityByRangeToBeChanged','Required parameter requestParameters.commissionPaymentActivityByRangeToBeChanged was null or undefined when calling changeCommissionPaymentActivityByRange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionPayments`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CommissionPaymentActivityByRangeToBeChangedToJSON(requestParameters.commissionPaymentActivityByRangeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionPaymentActivityByRangeStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>changeCommissionPaymentActivityByRange</p>
     * Operation to change commission payment activity by range.
     */
    async changeCommissionPaymentActivityByRange(requestParameters: ChangeCommissionPaymentActivityByRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentActivityByRangeStatus> {
        const response = await this.changeCommissionPaymentActivityByRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>discardCommissionChecks</p>
     * Operation to discard commission checks.
     */
    async discardCommissionChecksRaw(requestParameters: DiscardCommissionChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling discardCommissionChecks.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling discardCommissionChecks.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling discardCommissionChecks.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling discardCommissionChecks.');
        }

        const queryParameters: any = {};

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['BatchId'] = requestParameters.batchId;
        }

        if (requestParameters.batchIdIdExtension !== undefined) {
            queryParameters['batchIdIdExtension'] = requestParameters.batchIdIdExtension;
        }

        if (requestParameters.batchIdIdContext !== undefined) {
            queryParameters['batchIdIdContext'] = requestParameters.batchIdIdContext;
        }

        if (requestParameters.batchIdType !== undefined) {
            queryParameters['batchIdType'] = requestParameters.batchIdType;
        }

        if (requestParameters.fromCheck !== undefined) {
            queryParameters['fromCheck'] = requestParameters.fromCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionChecks`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>discardCommissionChecks</p>
     * Operation to discard commission checks.
     */
    async discardCommissionChecks(requestParameters: DiscardCommissionChecksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.discardCommissionChecksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getBankAccounts</p>
     * Operation to fetch bank accounts.
     */
    async getBankAccountsRaw(requestParameters: GetBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BankAccountsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBankAccounts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getBankAccounts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getBankAccounts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getBankAccounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.bankName !== undefined) {
            queryParameters['bankName'] = requestParameters.bankName;
        }

        if (requestParameters.bankAccountNo !== undefined) {
            queryParameters['bankAccountNo'] = requestParameters.bankAccountNo;
        }

        if (requestParameters.currency !== undefined) {
            queryParameters['currency'] = requestParameters.currency;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BankAccountsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getBankAccounts</p>
     * Operation to fetch bank accounts.
     */
    async getBankAccounts(requestParameters: GetBankAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BankAccountsDetails> {
        const response = await this.getBankAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommission</p>
     * Operation to fetch commission.
     */
    async getCommissionRaw(requestParameters: GetCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionDetails>> {
        if (requestParameters.commissionId === null || requestParameters.commissionId === undefined) {
            throw new runtime.RequiredError('commissionId','Required parameter requestParameters.commissionId was null or undefined when calling getCommission.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCommission.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCommission.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCommission.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCommission.');
        }

        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}`.replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommission</p>
     * Operation to fetch commission.
     */
    async getCommission(requestParameters: GetCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionDetails> {
        const response = await this.getCommissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionNotes</p>
     * Operation to fetch commission notes.
     */
    async getCommissionNotesRaw(requestParameters: GetCommissionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionNotesDetails>> {
        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getCommissionNotes.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCommissionNotes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCommissionNotes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCommissionNotes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCommissionNotes.');
        }

        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/commissionNotes`.replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionNotesDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionNotes</p>
     * Operation to fetch commission notes.
     */
    async getCommissionNotes(requestParameters: GetCommissionNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionNotesDetails> {
        const response = await this.getCommissionNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch commission payment details. <p><strong>OperationId:</strong>getCommissionPaymentDetails</p>
     * Fetch Commission Payment Details
     */
    async getCommissionPaymentDetailsRaw(requestParameters: GetCommissionPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCommissionPaymentDetails.');
        }

        if (requestParameters.reservationId === null || requestParameters.reservationId === undefined) {
            throw new runtime.RequiredError('reservationId','Required parameter requestParameters.reservationId was null or undefined when calling getCommissionPaymentDetails.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCommissionPaymentDetails.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCommissionPaymentDetails.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCommissionPaymentDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/reservations/{reservationId}/commissionPaymentDetails`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"reservationId"}}`, encodeURIComponent(String(requestParameters.reservationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionPaymentDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch commission payment details. <p><strong>OperationId:</strong>getCommissionPaymentDetails</p>
     * Fetch Commission Payment Details
     */
    async getCommissionPaymentDetails(requestParameters: GetCommissionPaymentDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentDetails> {
        const response = await this.getCommissionPaymentDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionPaymentsActivity</p>
     * Operation to fetch commission payments activity.
     */
    async getCommissionPaymentsActivityRaw(requestParameters: GetCommissionPaymentsActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionPaymentsActivityDetails>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling getCommissionPaymentsActivity.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCommissionPaymentsActivity.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCommissionPaymentsActivity.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCommissionPaymentsActivity.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCommissionPaymentsActivity.');
        }

        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['batchId'] = requestParameters.batchId;
        }

        if (requestParameters.batchIdIdExtension !== undefined) {
            queryParameters['batchIdIdExtension'] = requestParameters.batchIdIdExtension;
        }

        if (requestParameters.batchIdIdContext !== undefined) {
            queryParameters['batchIdIdContext'] = requestParameters.batchIdIdContext;
        }

        if (requestParameters.batchIdType !== undefined) {
            queryParameters['batchIdType'] = requestParameters.batchIdType;
        }

        if (requestParameters.fileName !== undefined) {
            queryParameters['fileName'] = requestParameters.fileName;
        }

        if (requestParameters.payee !== undefined) {
            queryParameters['payee'] = requestParameters.payee;
        }

        if (requestParameters.checkNo !== undefined) {
            queryParameters['checkNo'] = requestParameters.checkNo;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/commissionPayments`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionPaymentsActivityDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissionPaymentsActivity</p>
     * Operation to fetch commission payments activity.
     */
    async getCommissionPaymentsActivity(requestParameters: GetCommissionPaymentsActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionPaymentsActivityDetails> {
        const response = await this.getCommissionPaymentsActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissions</p>
     * Operation to fetch commissions.
     */
    async getCommissionsRaw(requestParameters: GetCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCommissions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCommissions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCommissions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCommissions.');
        }

        const queryParameters: any = {};

        if (requestParameters.bankAccountId !== undefined) {
            queryParameters['bankAccountId'] = requestParameters.bankAccountId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.agentId !== undefined) {
            queryParameters['agentId'] = requestParameters.agentId;
        }

        if (requestParameters.agentIdIdExtension !== undefined) {
            queryParameters['agentIdIdExtension'] = requestParameters.agentIdIdExtension;
        }

        if (requestParameters.agentIdIdContext !== undefined) {
            queryParameters['agentIdIdContext'] = requestParameters.agentIdIdContext;
        }

        if (requestParameters.agentIdType !== undefined) {
            queryParameters['agentIdType'] = requestParameters.agentIdType;
        }

        if (requestParameters.resvNameId !== undefined) {
            queryParameters['resvNameId'] = requestParameters.resvNameId;
        }

        if (requestParameters.resvNameIdIdExtension !== undefined) {
            queryParameters['resvNameIdIdExtension'] = requestParameters.resvNameIdIdExtension;
        }

        if (requestParameters.resvNameIdIdContext !== undefined) {
            queryParameters['resvNameIdIdContext'] = requestParameters.resvNameIdIdContext;
        }

        if (requestParameters.resvNameIdType !== undefined) {
            queryParameters['resvNameIdType'] = requestParameters.resvNameIdType;
        }

        if (requestParameters.commissionId !== undefined) {
            queryParameters['commissionId'] = requestParameters.commissionId;
        }

        if (requestParameters.commissionIdIdExtension !== undefined) {
            queryParameters['commissionIdIdExtension'] = requestParameters.commissionIdIdExtension;
        }

        if (requestParameters.commissionIdIdContext !== undefined) {
            queryParameters['commissionIdIdContext'] = requestParameters.commissionIdIdContext;
        }

        if (requestParameters.commissionIdType !== undefined) {
            queryParameters['commissionIdType'] = requestParameters.commissionIdType;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['batchId'] = requestParameters.batchId;
        }

        if (requestParameters.batchIdIdExtension !== undefined) {
            queryParameters['batchIdIdExtension'] = requestParameters.batchIdIdExtension;
        }

        if (requestParameters.batchIdIdContext !== undefined) {
            queryParameters['batchIdIdContext'] = requestParameters.batchIdIdContext;
        }

        if (requestParameters.batchIdType !== undefined) {
            queryParameters['batchIdType'] = requestParameters.batchIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCommissions</p>
     * Operation to fetch commissions.
     */
    async getCommissions(requestParameters: GetCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails> {
        const response = await this.getCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getReservationsForCommissions</p>
     * Operation to fetch Reservations for Commissions associated to a Travel Agent
     */
    async getReservationsForCommissionsRaw(requestParameters: GetReservationsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationsForCommissions.');
        }

        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling getReservationsForCommissions.');
        }

        if (requestParameters.agentId === null || requestParameters.agentId === undefined) {
            throw new runtime.RequiredError('agentId','Required parameter requestParameters.agentId was null or undefined when calling getReservationsForCommissions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getReservationsForCommissions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getReservationsForCommissions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getReservationsForCommissions.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.guestName !== undefined) {
            queryParameters['guestName'] = requestParameters.guestName;
        }

        if (requestParameters.confirmationNo !== undefined) {
            queryParameters['confirmationNo'] = requestParameters.confirmationNo;
        }

        if (requestParameters.reservationStatus) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.accountReceivableOffset !== undefined) {
            queryParameters['accountReceivableOffset'] = requestParameters.accountReceivableOffset;
        }

        if (requestParameters.onHold !== undefined) {
            queryParameters['onHold'] = requestParameters.onHold;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/agents/{agentId}/reservationsForCommissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters.agentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getReservationsForCommissions</p>
     * Operation to fetch Reservations for Commissions associated to a Travel Agent
     */
    async getReservationsForCommissions(requestParameters: GetReservationsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails> {
        const response = await this.getReservationsForCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getTravelAgentsForCommissions</p>
     * Operation to fetch Travel Agents associated with commissions for the given bank Account.
     */
    async getTravelAgentsForCommissionsRaw(requestParameters: GetTravelAgentsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommissionsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTravelAgentsForCommissions.');
        }

        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling getTravelAgentsForCommissions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTravelAgentsForCommissions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTravelAgentsForCommissions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTravelAgentsForCommissions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/travelAgentsForCommissions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommissionsDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getTravelAgentsForCommissions</p>
     * Operation to fetch Travel Agents associated with commissions for the given bank Account.
     */
    async getTravelAgentsForCommissions(requestParameters: GetTravelAgentsForCommissionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommissionsDetails> {
        const response = await this.getTravelAgentsForCommissionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>processCommissionPayments</p>
     * Operation to process commission payments.
     */
    async processCommissionPaymentsRaw(requestParameters: ProcessCommissionPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessCommissionPaymentsStatus>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling processCommissionPayments.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling processCommissionPayments.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling processCommissionPayments.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling processCommissionPayments.');
        }

        if (requestParameters.processCommissionPayments === null || requestParameters.processCommissionPayments === undefined) {
            throw new runtime.RequiredError('processCommissionPayments','Required parameter requestParameters.processCommissionPayments was null or undefined when calling processCommissionPayments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionPayments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessCommissionPaymentsToJSON(requestParameters.processCommissionPayments),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessCommissionPaymentsStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>processCommissionPayments</p>
     * Operation to process commission payments.
     */
    async processCommissionPayments(requestParameters: ProcessCommissionPaymentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessCommissionPaymentsStatus> {
        const response = await this.processCommissionPaymentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>recalculateCommissionOnCodeChange</p>
     * Operation to recalculate commission on code change.
     */
    async recalculateCommissionOnCodeChangeRaw(requestParameters: RecalculateCommissionOnCodeChangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecalculateCommissionOnCodeChangeStatus>> {
        if (requestParameters.commissionCode === null || requestParameters.commissionCode === undefined) {
            throw new runtime.RequiredError('commissionCode','Required parameter requestParameters.commissionCode was null or undefined when calling recalculateCommissionOnCodeChange.');
        }

        if (requestParameters.commissionId === null || requestParameters.commissionId === undefined) {
            throw new runtime.RequiredError('commissionId','Required parameter requestParameters.commissionId was null or undefined when calling recalculateCommissionOnCodeChange.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling recalculateCommissionOnCodeChange.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling recalculateCommissionOnCodeChange.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling recalculateCommissionOnCodeChange.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling recalculateCommissionOnCodeChange.');
        }

        if (requestParameters.recalculateCommissionOnCodeChange === null || requestParameters.recalculateCommissionOnCodeChange === undefined) {
            throw new runtime.RequiredError('recalculateCommissionOnCodeChange','Required parameter requestParameters.recalculateCommissionOnCodeChange was null or undefined when calling recalculateCommissionOnCodeChange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}/commissionCodes/{commissionCode}/recalculate`.replace(`{${"commissionCode"}}`, encodeURIComponent(String(requestParameters.commissionCode))).replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RecalculateCommissionOnCodeChangeToJSON(requestParameters.recalculateCommissionOnCodeChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecalculateCommissionOnCodeChangeStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>recalculateCommissionOnCodeChange</p>
     * Operation to recalculate commission on code change.
     */
    async recalculateCommissionOnCodeChange(requestParameters: RecalculateCommissionOnCodeChangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecalculateCommissionOnCodeChangeStatus> {
        const response = await this.recalculateCommissionOnCodeChangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommission</p>
     * Operation to remove commission.
     */
    async removeCommissionRaw(requestParameters: RemoveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.commissionId === null || requestParameters.commissionId === undefined) {
            throw new runtime.RequiredError('commissionId','Required parameter requestParameters.commissionId was null or undefined when calling removeCommission.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeCommission.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeCommission.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeCommission.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeCommission.');
        }

        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.detachDescription !== undefined) {
            queryParameters['detachDescription'] = requestParameters.detachDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/{commissionId}`.replace(`{${"commissionId"}}`, encodeURIComponent(String(requestParameters.commissionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommission</p>
     * Operation to remove commission.
     */
    async removeCommission(requestParameters: RemoveCommissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCommissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommissionAgentFromReservations</p>
     * Operation to remove commission agent from reservations.
     */
    async removeCommissionAgentFromReservationsRaw(requestParameters: RemoveCommissionAgentFromReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.commissionAgentId === null || requestParameters.commissionAgentId === undefined) {
            throw new runtime.RequiredError('commissionAgentId','Required parameter requestParameters.commissionAgentId was null or undefined when calling removeCommissionAgentFromReservations.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeCommissionAgentFromReservations.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeCommissionAgentFromReservations.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeCommissionAgentFromReservations.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeCommissionAgentFromReservations.');
        }

        const queryParameters: any = {};

        if (requestParameters.commissionAgentType !== undefined) {
            queryParameters['commissionAgentType'] = requestParameters.commissionAgentType;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdIdExtension) {
            queryParameters['reservationIdIdExtension'] = requestParameters.reservationIdIdExtension;
        }

        if (requestParameters.reservationIdIdContext) {
            queryParameters['reservationIdIdContext'] = requestParameters.reservationIdIdContext;
        }

        if (requestParameters.reservationIdType) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissionAgent/{commissionAgentId}/commissions`.replace(`{${"commissionAgentId"}}`, encodeURIComponent(String(requestParameters.commissionAgentId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>removeCommissionAgentFromReservations</p>
     * Operation to remove commission agent from reservations.
     */
    async removeCommissionAgentFromReservations(requestParameters: RemoveCommissionAgentFromReservationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCommissionAgentFromReservationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>reprintCommissionCheckByRange</p>
     * Operation to reprint commission check by range.
     */
    async reprintCommissionCheckByRangeRaw(requestParameters: ReprintCommissionCheckByRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReprintCommissionCheckByRangeStatus>> {
        if (requestParameters.bankAccountId === null || requestParameters.bankAccountId === undefined) {
            throw new runtime.RequiredError('bankAccountId','Required parameter requestParameters.bankAccountId was null or undefined when calling reprintCommissionCheckByRange.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling reprintCommissionCheckByRange.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling reprintCommissionCheckByRange.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling reprintCommissionCheckByRange.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling reprintCommissionCheckByRange.');
        }

        if (requestParameters.reprintCommissionCheckByRange === null || requestParameters.reprintCommissionCheckByRange === undefined) {
            throw new runtime.RequiredError('reprintCommissionCheckByRange','Required parameter requestParameters.reprintCommissionCheckByRange was null or undefined when calling reprintCommissionCheckByRange.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bankAccounts/{bankAccountId}/reprintCommission`.replace(`{${"bankAccountId"}}`, encodeURIComponent(String(requestParameters.bankAccountId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReprintCommissionCheckByRangeToJSON(requestParameters.reprintCommissionCheckByRange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReprintCommissionCheckByRangeStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>reprintCommissionCheckByRange</p>
     * Operation to reprint commission check by range.
     */
    async reprintCommissionCheckByRange(requestParameters: ReprintCommissionCheckByRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReprintCommissionCheckByRangeStatus> {
        const response = await this.reprintCommissionCheckByRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>setProcessingInstructions</p>
     * Operation to set processing instructions.
     */
    async setProcessingInstructionsRaw(requestParameters: SetProcessingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling setProcessingInstructions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling setProcessingInstructions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling setProcessingInstructions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling setProcessingInstructions.');
        }

        if (requestParameters.setProcessingInstructions === null || requestParameters.setProcessingInstructions === undefined) {
            throw new runtime.RequiredError('setProcessingInstructions','Required parameter requestParameters.setProcessingInstructions was null or undefined when calling setProcessingInstructions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/commissions/instructions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetProcessingInstructionsToJSON(requestParameters.setProcessingInstructions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>setProcessingInstructions</p>
     * Operation to set processing instructions.
     */
    async setProcessingInstructions(requestParameters: SetProcessingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setProcessingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCommissionPaymentsActivityStatusEnum = {
    Outstanding: 'Outstanding',
    Reconciled: 'Reconciled',
    Unpresented: 'Unpresented',
    Void: 'Void',
    Failed: 'Failed'
} as const;
export type GetCommissionPaymentsActivityStatusEnum = typeof GetCommissionPaymentsActivityStatusEnum[keyof typeof GetCommissionPaymentsActivityStatusEnum];
/**
 * @export
 */
export const GetReservationsForCommissionsReservationStatusEnum = {
    Cancelled: 'Cancelled',
    CheckedOut: 'CheckedOut',
    NoShow: 'NoShow'
} as const;
export type GetReservationsForCommissionsReservationStatusEnum = typeof GetReservationsForCommissionsReservationStatusEnum[keyof typeof GetReservationsForCommissionsReservationStatusEnum];
/**
 * @export
 */
export const RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum = {
    Agent: 'Agent',
    Source: 'Source'
} as const;
export type RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum = typeof RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum[keyof typeof RemoveCommissionAgentFromReservationsCommissionAgentTypeEnum];
