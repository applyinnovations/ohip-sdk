/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Date Range with Start and End dates.
 * @export
 * @interface DateRangeType
 */
export interface DateRangeType {
    /**
     * The ending value of the date range.
     * @type {Date}
     * @memberof DateRangeType
     */
    end?: Date;
    /**
     * The starting value of the date range.
     * @type {Date}
     * @memberof DateRangeType
     */
    start?: Date;
}

/**
 * Check if a given object implements the DateRangeType interface.
 */
export function instanceOfDateRangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DateRangeTypeFromJSON(json: any): DateRangeType {
    return DateRangeTypeFromJSONTyped(json, false);
}

export function DateRangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DateRangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'end': !exists(json, 'end') ? undefined : (new Date(json['end'])),
        'start': !exists(json, 'start') ? undefined : (new Date(json['start'])),
    };
}

export function DateRangeTypeToJSON(value?: DateRangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'end': value.end === undefined ? undefined : (value.end.toISOString().substring(0,10)),
        'start': value.start === undefined ? undefined : (value.start.toISOString().substring(0,10)),
    };
}

