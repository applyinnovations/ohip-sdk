/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A Config Package Info type.
 * @export
 * @interface ConfigPackagePrimaryDetailsType
 */
export interface ConfigPackagePrimaryDetailsType {
    /**
     * The description of the package.
     * @type {string}
     * @memberof ConfigPackagePrimaryDetailsType
     */
    description?: string;
    /**
     * The short description of the package.
     * @type {string}
     * @memberof ConfigPackagePrimaryDetailsType
     */
    shortDescription?: string;
    /**
     * The Forecast group package belongs to.
     * @type {string}
     * @memberof ConfigPackagePrimaryDetailsType
     */
    forecastGroup?: string;
    /**
     * Arrangement Code.
     * @type {string}
     * @memberof ConfigPackagePrimaryDetailsType
     */
    arrangementCode?: string;
    /**
     * Indicates the begin sell date of the package.
     * @type {string}
     * @memberof ConfigPackagePrimaryDetailsType
     */
    beginSellDate?: string;
    /**
     * Indicates the end sell date of the package.
     * @type {string}
     * @memberof ConfigPackagePrimaryDetailsType
     */
    endSellDate?: string;
}

/**
 * Check if a given object implements the ConfigPackagePrimaryDetailsType interface.
 */
export function instanceOfConfigPackagePrimaryDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigPackagePrimaryDetailsTypeFromJSON(json: any): ConfigPackagePrimaryDetailsType {
    return ConfigPackagePrimaryDetailsTypeFromJSONTyped(json, false);
}

export function ConfigPackagePrimaryDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigPackagePrimaryDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'forecastGroup': !exists(json, 'forecastGroup') ? undefined : json['forecastGroup'],
        'arrangementCode': !exists(json, 'arrangementCode') ? undefined : json['arrangementCode'],
        'beginSellDate': !exists(json, 'beginSellDate') ? undefined : json['beginSellDate'],
        'endSellDate': !exists(json, 'endSellDate') ? undefined : json['endSellDate'],
    };
}

export function ConfigPackagePrimaryDetailsTypeToJSON(value?: ConfigPackagePrimaryDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'shortDescription': value.shortDescription,
        'forecastGroup': value.forecastGroup,
        'arrangementCode': value.arrangementCode,
        'beginSellDate': value.beginSellDate,
        'endSellDate': value.endSellDate,
    };
}

