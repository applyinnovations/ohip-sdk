/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { StayRoominfo } from './StayRoominfo';
import {
    StayRoominfoFromJSON,
    StayRoominfoFromJSONTyped,
    StayRoominfoToJSON,
} from './StayRoominfo';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * To quickly swap or shift rooms for two reservations that are for the same arrival date and room type
 * @export
 * @interface SwapRooms
 */
export interface SwapRooms {
    /**
     * 
     * @type {StayRoominfo}
     * @memberof SwapRooms
     */
    sourceRoom?: StayRoominfo;
    /**
     * 
     * @type {StayRoominfo}
     * @memberof SwapRooms
     */
    targetRoom?: StayRoominfo;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof SwapRooms
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof SwapRooms
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the SwapRooms interface.
 */
export function instanceOfSwapRooms(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SwapRoomsFromJSON(json: any): SwapRooms {
    return SwapRoomsFromJSONTyped(json, false);
}

export function SwapRoomsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SwapRooms {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceRoom': !exists(json, 'sourceRoom') ? undefined : StayRoominfoFromJSON(json['sourceRoom']),
        'targetRoom': !exists(json, 'targetRoom') ? undefined : StayRoominfoFromJSON(json['targetRoom']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function SwapRoomsToJSON(value?: SwapRooms | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceRoom': StayRoominfoToJSON(value.sourceRoom),
        'targetRoom': StayRoominfoToJSON(value.targetRoom),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

