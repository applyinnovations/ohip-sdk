/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelRoomsType } from './HotelRoomsType';
import {
    HotelRoomsTypeFromJSON,
    HotelRoomsTypeFromJSONTyped,
    HotelRoomsTypeToJSON,
} from './HotelRoomsType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface HotelRooms
 */
export interface HotelRooms {
    /**
     * 
     * @type {HotelRoomsType}
     * @memberof HotelRooms
     */
    hotelRoomsDetails?: HotelRoomsType;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof HotelRooms
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof HotelRooms
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof HotelRooms
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof HotelRooms
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof HotelRooms
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof HotelRooms
     */
    count?: number;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof HotelRooms
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof HotelRooms
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the HotelRooms interface.
 */
export function instanceOfHotelRooms(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelRoomsFromJSON(json: any): HotelRooms {
    return HotelRoomsFromJSONTyped(json, false);
}

export function HotelRoomsFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelRooms {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelRoomsDetails': !exists(json, 'hotelRoomsDetails') ? undefined : HotelRoomsTypeFromJSON(json['hotelRoomsDetails']),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function HotelRoomsToJSON(value?: HotelRooms | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelRoomsDetails': HotelRoomsTypeToJSON(value.hotelRoomsDetails),
        'totalPages': value.totalPages,
        'offset': value.offset,
        'limit': value.limit,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

