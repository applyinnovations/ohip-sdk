/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DailyRateType } from './DailyRateType';
import {
    DailyRateTypeFromJSON,
    DailyRateTypeFromJSONTyped,
    DailyRateTypeToJSON,
} from './DailyRateType';
import type { EffectiveRateType } from './EffectiveRateType';
import {
    EffectiveRateTypeFromJSON,
    EffectiveRateTypeFromJSONTyped,
    EffectiveRateTypeToJSON,
} from './EffectiveRateType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Possible errors that the operation will generate: The reservation is not in Reserved state. The room being requested does not exist.
 * @export
 * @interface AssignedRoom
 */
export interface AssignedRoom {
    /**
     * Collection of effective rate amount per guest on specific dates.
     * @type {Array<EffectiveRateType>}
     * @memberof AssignedRoom
     */
    effectiveRates?: Array<EffectiveRateType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof AssignedRoom
     */
    links?: Array<InstanceLink>;
    /**
     * Defines room rate information on a daily basis.
     * @type {Array<DailyRateType>}
     * @memberof AssignedRoom
     */
    newRates?: Array<DailyRateType>;
    /**
     * Defines room rate information on a daily basis.
     * @type {Array<DailyRateType>}
     * @memberof AssignedRoom
     */
    oldRates?: Array<DailyRateType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof AssignedRoom
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the AssignedRoom interface.
 */
export function instanceOfAssignedRoom(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AssignedRoomFromJSON(json: any): AssignedRoom {
    return AssignedRoomFromJSONTyped(json, false);
}

export function AssignedRoomFromJSONTyped(json: any, ignoreDiscriminator: boolean): AssignedRoom {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'effectiveRates': !exists(json, 'effectiveRates') ? undefined : ((json['effectiveRates'] as Array<any>).map(EffectiveRateTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'newRates': !exists(json, 'newRates') ? undefined : ((json['newRates'] as Array<any>).map(DailyRateTypeFromJSON)),
        'oldRates': !exists(json, 'oldRates') ? undefined : ((json['oldRates'] as Array<any>).map(DailyRateTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function AssignedRoomToJSON(value?: AssignedRoom | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'effectiveRates': value.effectiveRates === undefined ? undefined : ((value.effectiveRates as Array<any>).map(EffectiveRateTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'newRates': value.newRates === undefined ? undefined : ((value.newRates as Array<any>).map(DailyRateTypeToJSON)),
        'oldRates': value.oldRates === undefined ? undefined : ((value.oldRates as Array<any>).map(DailyRateTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

