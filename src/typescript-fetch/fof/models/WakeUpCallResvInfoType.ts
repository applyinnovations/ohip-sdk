/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockId } from './BlockId';
import {
    BlockIdFromJSON,
    BlockIdFromJSONTyped,
    BlockIdToJSON,
} from './BlockId';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { PMSResStatusType } from './PMSResStatusType';
import {
    PMSResStatusTypeFromJSON,
    PMSResStatusTypeFromJSONTyped,
    PMSResStatusTypeToJSON,
} from './PMSResStatusType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria to search and retrieve wake up calls.
 * @export
 * @interface WakeUpCallResvInfoType
 */
export interface WakeUpCallResvInfoType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof WakeUpCallResvInfoType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Hotel Code where wake up call is set.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    hotelId?: string;
    /**
     * Timezone of hotel.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    timezone?: string;
    /**
     * Guest Name.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    guestName?: string;
    /**
     * 
     * @type {ProfileId}
     * @memberof WakeUpCallResvInfoType
     */
    profileId?: ProfileId;
    /**
     * Guest Name.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    vip?: string;
    /**
     * Membership Level of the guest.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    membershipLevel?: string;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof WakeUpCallResvInfoType
     */
    membershipType?: CodeDescriptionType;
    /**
     * Reservation arrival date.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    arrival?: string;
    /**
     * Reservation departure date.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    departure?: string;
    /**
     * Hotel room in which wake up call is to ring.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    room?: string;
    /**
     * Room phone number which wake up call is to ring.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    roomPhoneNumber?: string;
    /**
     * Room Phone Extension Number.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    extensionNumber?: string;
    /**
     * 
     * @type {BlockId}
     * @memberof WakeUpCallResvInfoType
     */
    blockId?: BlockId;
    /**
     * Block code with which wake up call is associated.
     * @type {string}
     * @memberof WakeUpCallResvInfoType
     */
    blockCode?: string;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof WakeUpCallResvInfoType
     */
    reservationStatus?: PMSResStatusType;
}

/**
 * Check if a given object implements the WakeUpCallResvInfoType interface.
 */
export function instanceOfWakeUpCallResvInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WakeUpCallResvInfoTypeFromJSON(json: any): WakeUpCallResvInfoType {
    return WakeUpCallResvInfoTypeFromJSONTyped(json, false);
}

export function WakeUpCallResvInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WakeUpCallResvInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'timezone': !exists(json, 'timezone') ? undefined : json['timezone'],
        'guestName': !exists(json, 'guestName') ? undefined : json['guestName'],
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'vip': !exists(json, 'vip') ? undefined : json['vip'],
        'membershipLevel': !exists(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'membershipType': !exists(json, 'membershipType') ? undefined : CodeDescriptionTypeFromJSON(json['membershipType']),
        'arrival': !exists(json, 'arrival') ? undefined : json['arrival'],
        'departure': !exists(json, 'departure') ? undefined : json['departure'],
        'room': !exists(json, 'room') ? undefined : json['room'],
        'roomPhoneNumber': !exists(json, 'roomPhoneNumber') ? undefined : json['roomPhoneNumber'],
        'extensionNumber': !exists(json, 'extensionNumber') ? undefined : json['extensionNumber'],
        'blockId': !exists(json, 'blockId') ? undefined : BlockIdFromJSON(json['blockId']),
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['reservationStatus']),
    };
}

export function WakeUpCallResvInfoTypeToJSON(value?: WakeUpCallResvInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'hotelId': value.hotelId,
        'timezone': value.timezone,
        'guestName': value.guestName,
        'profileId': ProfileIdToJSON(value.profileId),
        'vip': value.vip,
        'membershipLevel': value.membershipLevel,
        'membershipType': CodeDescriptionTypeToJSON(value.membershipType),
        'arrival': value.arrival,
        'departure': value.departure,
        'room': value.room,
        'roomPhoneNumber': value.roomPhoneNumber,
        'extensionNumber': value.extensionNumber,
        'blockId': BlockIdToJSON(value.blockId),
        'blockCode': value.blockCode,
        'reservationStatus': PMSResStatusTypeToJSON(value.reservationStatus),
    };
}

