/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfDeliveryInfoType } from './ConfDeliveryInfoType';
import {
    ConfDeliveryInfoTypeFromJSON,
    ConfDeliveryInfoTypeFromJSONTyped,
    ConfDeliveryInfoTypeToJSON,
} from './ConfDeliveryInfoType';
import type { ConfRecipientInfoType } from './ConfRecipientInfoType';
import {
    ConfRecipientInfoTypeFromJSON,
    ConfRecipientInfoTypeFromJSONTyped,
    ConfRecipientInfoTypeToJSON,
} from './ConfRecipientInfoType';
import type { ConfirmationStyle } from './ConfirmationStyle';
import {
    ConfirmationStyleFromJSON,
    ConfirmationStyleFromJSONTyped,
    ConfirmationStyleToJSON,
} from './ConfirmationStyle';

/**
 * 
 * @export
 * @interface ConfirmationType
 */
export interface ConfirmationType {
    /**
     * 
     * @type {ConfRecipientInfoType}
     * @memberof ConfirmationType
     */
    recipientInfo?: ConfRecipientInfoType;
    /**
     * List of confirmation letter delivery methods and their status
     * @type {Array<ConfDeliveryInfoType>}
     * @memberof ConfirmationType
     */
    deliveryInfo?: Array<ConfDeliveryInfoType>;
    /**
     * 
     * @type {ConfirmationStyle}
     * @memberof ConfirmationType
     */
    confirmationStyleInfo?: ConfirmationStyle;
    /**
     * Senders Email address.
     * @type {string}
     * @memberof ConfirmationType
     */
    fromEmail?: string;
    /**
     * Flag to indicate sending confirmation letter as text message.
     * @type {boolean}
     * @memberof ConfirmationType
     */
    sendTextMessage?: boolean;
    /**
     * URL that identifies the location associated with the record identified by the UniqueID.
     * @type {string}
     * @memberof ConfirmationType
     */
    url?: string;
    /**
     * A reference to the type of object defined by the UniqueID element.
     * @type {string}
     * @memberof ConfirmationType
     */
    type?: string;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof ConfirmationType
     */
    instance?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof ConfirmationType
     */
    idContext?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof ConfirmationType
     */
    id?: string;
    /**
     * Additional identifying value assigned by the creating system.
     * @type {number}
     * @memberof ConfirmationType
     */
    idExtension?: number;
}

/**
 * Check if a given object implements the ConfirmationType interface.
 */
export function instanceOfConfirmationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfirmationTypeFromJSON(json: any): ConfirmationType {
    return ConfirmationTypeFromJSONTyped(json, false);
}

export function ConfirmationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfirmationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'recipientInfo': !exists(json, 'recipientInfo') ? undefined : ConfRecipientInfoTypeFromJSON(json['recipientInfo']),
        'deliveryInfo': !exists(json, 'deliveryInfo') ? undefined : ((json['deliveryInfo'] as Array<any>).map(ConfDeliveryInfoTypeFromJSON)),
        'confirmationStyleInfo': !exists(json, 'confirmationStyleInfo') ? undefined : ConfirmationStyleFromJSON(json['confirmationStyleInfo']),
        'fromEmail': !exists(json, 'fromEmail') ? undefined : json['fromEmail'],
        'sendTextMessage': !exists(json, 'sendTextMessage') ? undefined : json['sendTextMessage'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
    };
}

export function ConfirmationTypeToJSON(value?: ConfirmationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'recipientInfo': ConfRecipientInfoTypeToJSON(value.recipientInfo),
        'deliveryInfo': value.deliveryInfo === undefined ? undefined : ((value.deliveryInfo as Array<any>).map(ConfDeliveryInfoTypeToJSON)),
        'confirmationStyleInfo': ConfirmationStyleToJSON(value.confirmationStyleInfo),
        'fromEmail': value.fromEmail,
        'sendTextMessage': value.sendTextMessage,
        'url': value.url,
        'type': value.type,
        'instance': value.instance,
        'idContext': value.idContext,
        'id': value.id,
        'idExtension': value.idExtension,
    };
}

