/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommissionPaymentActivityStatusType } from './CommissionPaymentActivityStatusType';
import {
    CommissionPaymentActivityStatusTypeFromJSON,
    CommissionPaymentActivityStatusTypeFromJSONTyped,
    CommissionPaymentActivityStatusTypeToJSON,
} from './CommissionPaymentActivityStatusType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Base type for payment activity information
 * @export
 * @interface CommissionPaymentActivityType
 */
export interface CommissionPaymentActivityType {
    /**
     * Property of the commission record.
     * @type {string}
     * @memberof CommissionPaymentActivityType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CommissionPaymentActivityType
     */
    bankAccountId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CommissionPaymentActivityType
     */
    batchId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CommissionPaymentActivityType
     */
    paymentId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CommissionPaymentActivityType
     */
    agentId?: UniqueIDType;
    /**
     * Payment date of commission
     * @type {string}
     * @memberof CommissionPaymentActivityType
     */
    paymentDate?: string;
    /**
     * Check no of payment.
     * @type {number}
     * @memberof CommissionPaymentActivityType
     */
    checkNo?: number;
    /**
     * File name if payment method is EFT.
     * @type {string}
     * @memberof CommissionPaymentActivityType
     */
    fileName?: string;
    /**
     * 
     * @type {CommissionPaymentActivityStatusType}
     * @memberof CommissionPaymentActivityType
     */
    status?: CommissionPaymentActivityStatusType;
    /**
     * Payee of commission
     * @type {string}
     * @memberof CommissionPaymentActivityType
     */
    payee?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionPaymentActivityType
     */
    commissionAmount?: CurrencyAmountType;
    /**
     * Status date of payment activity
     * @type {string}
     * @memberof CommissionPaymentActivityType
     */
    statusDate?: string;
    /**
     * Whether this payment batch has related commission records. Commission records could be unlinked for check payments when it is reprinted.
     * @type {boolean}
     * @memberof CommissionPaymentActivityType
     */
    onCommission?: boolean;
}

/**
 * Check if a given object implements the CommissionPaymentActivityType interface.
 */
export function instanceOfCommissionPaymentActivityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommissionPaymentActivityTypeFromJSON(json: any): CommissionPaymentActivityType {
    return CommissionPaymentActivityTypeFromJSONTyped(json, false);
}

export function CommissionPaymentActivityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommissionPaymentActivityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'bankAccountId': !exists(json, 'bankAccountId') ? undefined : UniqueIDTypeFromJSON(json['bankAccountId']),
        'batchId': !exists(json, 'batchId') ? undefined : UniqueIDTypeFromJSON(json['batchId']),
        'paymentId': !exists(json, 'paymentId') ? undefined : UniqueIDTypeFromJSON(json['paymentId']),
        'agentId': !exists(json, 'agentId') ? undefined : UniqueIDTypeFromJSON(json['agentId']),
        'paymentDate': !exists(json, 'paymentDate') ? undefined : json['paymentDate'],
        'checkNo': !exists(json, 'checkNo') ? undefined : json['checkNo'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'status': !exists(json, 'status') ? undefined : CommissionPaymentActivityStatusTypeFromJSON(json['status']),
        'payee': !exists(json, 'payee') ? undefined : json['payee'],
        'commissionAmount': !exists(json, 'commissionAmount') ? undefined : CurrencyAmountTypeFromJSON(json['commissionAmount']),
        'statusDate': !exists(json, 'statusDate') ? undefined : json['statusDate'],
        'onCommission': !exists(json, 'onCommission') ? undefined : json['onCommission'],
    };
}

export function CommissionPaymentActivityTypeToJSON(value?: CommissionPaymentActivityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'bankAccountId': UniqueIDTypeToJSON(value.bankAccountId),
        'batchId': UniqueIDTypeToJSON(value.batchId),
        'paymentId': UniqueIDTypeToJSON(value.paymentId),
        'agentId': UniqueIDTypeToJSON(value.agentId),
        'paymentDate': value.paymentDate,
        'checkNo': value.checkNo,
        'fileName': value.fileName,
        'status': CommissionPaymentActivityStatusTypeToJSON(value.status),
        'payee': value.payee,
        'commissionAmount': CurrencyAmountTypeToJSON(value.commissionAmount),
        'statusDate': value.statusDate,
        'onCommission': value.onCommission,
    };
}

