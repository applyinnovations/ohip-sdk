/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';

/**
 * Room move history information.
 * @export
 * @interface RoomMoveDetailType
 */
export interface RoomMoveDetailType {
    /**
     * Business date on which room is moved.
     * @type {string}
     * @memberof RoomMoveDetailType
     */
    date?: string;
    /**
     * Description of why room is moved.
     * @type {string}
     * @memberof RoomMoveDetailType
     */
    description?: string;
    /**
     * Room from which guest is moved.
     * @type {string}
     * @memberof RoomMoveDetailType
     */
    fromRoom?: string;
    /**
     * Identifies the hotel code under which room is moved.
     * @type {string}
     * @memberof RoomMoveDetailType
     */
    hotelId?: string;
    /**
     * The user who moved the guest.
     * @type {string}
     * @memberof RoomMoveDetailType
     */
    movedBy?: string;
    /**
     * Identifies the room move reason code.
     * @type {string}
     * @memberof RoomMoveDetailType
     */
    reasonCode?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof RoomMoveDetailType
     */
    reservationId?: ReservationId;
    /**
     * Room to which guest is moved.
     * @type {string}
     * @memberof RoomMoveDetailType
     */
    toRoom?: string;
}

/**
 * Check if a given object implements the RoomMoveDetailType interface.
 */
export function instanceOfRoomMoveDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomMoveDetailTypeFromJSON(json: any): RoomMoveDetailType {
    return RoomMoveDetailTypeFromJSONTyped(json, false);
}

export function RoomMoveDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomMoveDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'date': !exists(json, 'date') ? undefined : json['date'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'fromRoom': !exists(json, 'fromRoom') ? undefined : json['fromRoom'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'movedBy': !exists(json, 'movedBy') ? undefined : json['movedBy'],
        'reasonCode': !exists(json, 'reasonCode') ? undefined : json['reasonCode'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'toRoom': !exists(json, 'toRoom') ? undefined : json['toRoom'],
    };
}

export function RoomMoveDetailTypeToJSON(value?: RoomMoveDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'date': value.date,
        'description': value.description,
        'fromRoom': value.fromRoom,
        'hotelId': value.hotelId,
        'movedBy': value.movedBy,
        'reasonCode': value.reasonCode,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'toRoom': value.toRoom,
    };
}

