/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Room Occupancy information.
 * @export
 * @interface RoomOccupancyType
 */
export interface RoomOccupancyType {
    /**
     * Room Id.
     * @type {string}
     * @memberof RoomOccupancyType
     */
    roomId?: string;
    /**
     * Room Type.
     * @type {string}
     * @memberof RoomOccupancyType
     */
    roomType?: string;
    /**
     * Indicates if the Room is currently occupied.
     * @type {boolean}
     * @memberof RoomOccupancyType
     */
    roomIsOccupied?: boolean;
    /**
     * Estimated Time of Departure of reservation when room status is occupied.
     * @type {string}
     * @memberof RoomOccupancyType
     */
    estimatedDepartureTime?: string;
    /**
     * Guest First/Given Name on reservation when room status is occupied.
     * @type {string}
     * @memberof RoomOccupancyType
     */
    guestFirstName?: string;
    /**
     * Guest Last Name /Surname on reservation when room status is occupied.
     * @type {string}
     * @memberof RoomOccupancyType
     */
    guestLastName?: string;
}

/**
 * Check if a given object implements the RoomOccupancyType interface.
 */
export function instanceOfRoomOccupancyType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomOccupancyTypeFromJSON(json: any): RoomOccupancyType {
    return RoomOccupancyTypeFromJSONTyped(json, false);
}

export function RoomOccupancyTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomOccupancyType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'roomIsOccupied': !exists(json, 'roomIsOccupied') ? undefined : json['roomIsOccupied'],
        'estimatedDepartureTime': !exists(json, 'estimatedDepartureTime') ? undefined : json['estimatedDepartureTime'],
        'guestFirstName': !exists(json, 'guestFirstName') ? undefined : json['guestFirstName'],
        'guestLastName': !exists(json, 'guestLastName') ? undefined : json['guestLastName'],
    };
}

export function RoomOccupancyTypeToJSON(value?: RoomOccupancyType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomId': value.roomId,
        'roomType': value.roomType,
        'roomIsOccupied': value.roomIsOccupied,
        'estimatedDepartureTime': value.estimatedDepartureTime,
        'guestFirstName': value.guestFirstName,
        'guestLastName': value.guestLastName,
    };
}

