/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { KeyTrackType } from './KeyTrackType';
import {
    KeyTrackTypeFromJSON,
    KeyTrackTypeFromJSONTyped,
    KeyTrackTypeToJSON,
} from './KeyTrackType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { RoomKeyGuest } from './RoomKeyGuest';
import {
    RoomKeyGuestFromJSON,
    RoomKeyGuestFromJSONTyped,
    RoomKeyGuestToJSON,
} from './RoomKeyGuest';

/**
 * Contains detail information of room keys .
 * @export
 * @interface RoomKeyInfoType
 */
export interface RoomKeyInfoType {
    /**
     * Name of the resort .
     * @type {string}
     * @memberof RoomKeyInfoType
     */
    hotelId?: string;
    /**
     * Number of keys has been created for the reservation .
     * @type {string}
     * @memberof RoomKeyInfoType
     */
    keyCount?: string;
    /**
     * Start date and time of the key.
     * @type {string}
     * @memberof RoomKeyInfoType
     */
    keyStartDate?: string;
    /**
     * Expiry date and time of the key.
     * @type {string}
     * @memberof RoomKeyInfoType
     */
    keyExpiryDate?: string;
    /**
     * PIN provided in keyTrack3 from the Door Lock System that is used to unlock a room. This is supported when Key Pin handling is active for the property and the Door Lock System in use.
     * @type {string}
     * @memberof RoomKeyInfoType
     */
    keyPin?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoomKeyInfoType
     */
    keyOptions?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RoomKeyInfoType
     */
    additionalRooms?: Array<string>;
    /**
     * Room Number.
     * @type {string}
     * @memberof RoomKeyInfoType
     */
    roomId?: string;
    /**
     * 
     * @type {ReservationId}
     * @memberof RoomKeyInfoType
     */
    reservationId?: ReservationId;
    /**
     * 
     * @type {KeyTrackType}
     * @memberof RoomKeyInfoType
     */
    keyTrack?: KeyTrackType;
    /**
     * 
     * @type {RoomKeyGuest}
     * @memberof RoomKeyInfoType
     */
    guestInfo?: RoomKeyGuest;
    /**
     * Flag indicates whether the key is back to back.
     * @type {boolean}
     * @memberof RoomKeyInfoType
     */
    backToBackKey?: boolean;
}

/**
 * Check if a given object implements the RoomKeyInfoType interface.
 */
export function instanceOfRoomKeyInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomKeyInfoTypeFromJSON(json: any): RoomKeyInfoType {
    return RoomKeyInfoTypeFromJSONTyped(json, false);
}

export function RoomKeyInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomKeyInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'keyCount': !exists(json, 'keyCount') ? undefined : json['keyCount'],
        'keyStartDate': !exists(json, 'keyStartDate') ? undefined : json['keyStartDate'],
        'keyExpiryDate': !exists(json, 'keyExpiryDate') ? undefined : json['keyExpiryDate'],
        'keyPin': !exists(json, 'keyPin') ? undefined : json['keyPin'],
        'keyOptions': !exists(json, 'keyOptions') ? undefined : json['keyOptions'],
        'additionalRooms': !exists(json, 'additionalRooms') ? undefined : json['additionalRooms'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'keyTrack': !exists(json, 'keyTrack') ? undefined : KeyTrackTypeFromJSON(json['keyTrack']),
        'guestInfo': !exists(json, 'guestInfo') ? undefined : RoomKeyGuestFromJSON(json['guestInfo']),
        'backToBackKey': !exists(json, 'backToBackKey') ? undefined : json['backToBackKey'],
    };
}

export function RoomKeyInfoTypeToJSON(value?: RoomKeyInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'keyCount': value.keyCount,
        'keyStartDate': value.keyStartDate,
        'keyExpiryDate': value.keyExpiryDate,
        'keyPin': value.keyPin,
        'keyOptions': value.keyOptions,
        'additionalRooms': value.additionalRooms,
        'roomId': value.roomId,
        'reservationId': ReservationIdToJSON(value.reservationId),
        'keyTrack': KeyTrackTypeToJSON(value.keyTrack),
        'guestInfo': RoomKeyGuestToJSON(value.guestInfo),
        'backToBackKey': value.backToBackKey,
    };
}

