/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { KeyTrackType } from './KeyTrackType';
import {
    KeyTrackTypeFromJSON,
    KeyTrackTypeFromJSONTyped,
    KeyTrackTypeToJSON,
} from './KeyTrackType';
import type { RequestType } from './RequestType';
import {
    RequestTypeFromJSON,
    RequestTypeFromJSONTyped,
    RequestTypeToJSON,
} from './RequestType';
import type { RoomKeyGuest } from './RoomKeyGuest';
import {
    RoomKeyGuestFromJSON,
    RoomKeyGuestFromJSONTyped,
    RoomKeyGuestToJSON,
} from './RoomKeyGuest';
import type { RoomKeyOutBoundType } from './RoomKeyOutBoundType';
import {
    RoomKeyOutBoundTypeFromJSON,
    RoomKeyOutBoundTypeFromJSONTyped,
    RoomKeyOutBoundTypeToJSON,
} from './RoomKeyOutBoundType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Request for generation of room key used for OutBound.
 * @export
 * @interface RoomKeyExternal
 */
export interface RoomKeyExternal {
    /**
     * Unique Id as defined by Door Lock System.
     * @type {string}
     * @memberof RoomKeyExternal
     */
    encoderId: string;
    /**
     * The Unique PMS encoder name linked with the encoderId
     * @type {string}
     * @memberof RoomKeyExternal
     */
    encoderTerminal: string;
    /**
     * The PMS room number to generate a key for.
     * @type {string}
     * @memberof RoomKeyExternal
     */
    roomId?: string;
    /**
     * Old Room Number is used when a room move (keyType RoomMove) is performed.
     * @type {string}
     * @memberof RoomKeyExternal
     */
    oldRoomId?: string;
    /**
     * Number of keys to be created.The value is always 1
     * @type {number}
     * @memberof RoomKeyExternal
     */
    noOfKeys?: number;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof RoomKeyExternal
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Indicates if Guest is a sharer or not
     * @type {boolean}
     * @memberof RoomKeyExternal
     */
    guestShareFlag?: boolean;
    /**
     * Indicates if old Guest room is a sharer or not when a room move (keyType RoomMove) is performed.
     * @type {boolean}
     * @memberof RoomKeyExternal
     */
    oldGuestShareFlag?: boolean;
    /**
     * Lists the access areas defined in PMS valid for the room key.
     * @type {string}
     * @memberof RoomKeyExternal
     */
    keyOptions?: string;
    /**
     * The date/time the room key is valid from.
     * @type {string}
     * @memberof RoomKeyExternal
     */
    keyValidityStart?: string;
    /**
     * The date/time the room key is valid to.
     * @type {string}
     * @memberof RoomKeyExternal
     */
    keyValidityEnd?: string;
    /**
     * 
     * @type {RoomKeyOutBoundType}
     * @memberof RoomKeyExternal
     */
    keyType: RoomKeyOutBoundType;
    /**
     * 
     * @type {KeyTrackType}
     * @memberof RoomKeyExternal
     */
    keyTrack?: KeyTrackType;
    /**
     * OutBound Code of the Door Lock System (DLS).
     * @type {string}
     * @memberof RoomKeyExternal
     */
    outBoundCode?: string;
    /**
     * Collection of additional rooms to be included in key creation of reservation room.
     * @type {Array<string>}
     * @memberof RoomKeyExternal
     */
    additionalRooms?: Array<string>;
    /**
     * Collection of old additional rooms in key creation of reservation room when a room move (keyType RoomMove) is performed.
     * @type {Array<string>}
     * @memberof RoomKeyExternal
     */
    oldAdditionalRooms?: Array<string>;
    /**
     * Unique identifier for the PMS user.
     * @type {string}
     * @memberof RoomKeyExternal
     */
    userId?: string;
    /**
     * 
     * @type {RequestType}
     * @memberof RoomKeyExternal
     */
    requestType?: RequestType;
    /**
     * Collection of of Room key guests for multiple guest room key functionality.
     * @type {Array<RoomKeyGuest>}
     * @memberof RoomKeyExternal
     */
    roomKeyGuests?: Array<RoomKeyGuest>;
}

/**
 * Check if a given object implements the RoomKeyExternal interface.
 */
export function instanceOfRoomKeyExternal(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "encoderId" in value;
    isInstance = isInstance && "encoderTerminal" in value;
    isInstance = isInstance && "keyType" in value;

    return isInstance;
}

export function RoomKeyExternalFromJSON(json: any): RoomKeyExternal {
    return RoomKeyExternalFromJSONTyped(json, false);
}

export function RoomKeyExternalFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomKeyExternal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'encoderId': json['encoderId'],
        'encoderTerminal': json['encoderTerminal'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'oldRoomId': !exists(json, 'oldRoomId') ? undefined : json['oldRoomId'],
        'noOfKeys': !exists(json, 'noOfKeys') ? undefined : json['noOfKeys'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'guestShareFlag': !exists(json, 'guestShareFlag') ? undefined : json['guestShareFlag'],
        'oldGuestShareFlag': !exists(json, 'OldGuestShareFlag') ? undefined : json['OldGuestShareFlag'],
        'keyOptions': !exists(json, 'keyOptions') ? undefined : json['keyOptions'],
        'keyValidityStart': !exists(json, 'keyValidityStart') ? undefined : json['keyValidityStart'],
        'keyValidityEnd': !exists(json, 'keyValidityEnd') ? undefined : json['keyValidityEnd'],
        'keyType': RoomKeyOutBoundTypeFromJSON(json['keyType']),
        'keyTrack': !exists(json, 'keyTrack') ? undefined : KeyTrackTypeFromJSON(json['keyTrack']),
        'outBoundCode': !exists(json, 'outBoundCode') ? undefined : json['outBoundCode'],
        'additionalRooms': !exists(json, 'additionalRooms') ? undefined : json['additionalRooms'],
        'oldAdditionalRooms': !exists(json, 'oldAdditionalRooms') ? undefined : json['oldAdditionalRooms'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'requestType': !exists(json, 'requestType') ? undefined : RequestTypeFromJSON(json['requestType']),
        'roomKeyGuests': !exists(json, 'roomKeyGuests') ? undefined : ((json['roomKeyGuests'] as Array<any>).map(RoomKeyGuestFromJSON)),
    };
}

export function RoomKeyExternalToJSON(value?: RoomKeyExternal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'encoderId': value.encoderId,
        'encoderTerminal': value.encoderTerminal,
        'roomId': value.roomId,
        'oldRoomId': value.oldRoomId,
        'noOfKeys': value.noOfKeys,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'guestShareFlag': value.guestShareFlag,
        'OldGuestShareFlag': value.oldGuestShareFlag,
        'keyOptions': value.keyOptions,
        'keyValidityStart': value.keyValidityStart,
        'keyValidityEnd': value.keyValidityEnd,
        'keyType': RoomKeyOutBoundTypeToJSON(value.keyType),
        'keyTrack': KeyTrackTypeToJSON(value.keyTrack),
        'outBoundCode': value.outBoundCode,
        'additionalRooms': value.additionalRooms,
        'oldAdditionalRooms': value.oldAdditionalRooms,
        'userId': value.userId,
        'requestType': RequestTypeToJSON(value.requestType),
        'roomKeyGuests': value.roomKeyGuests === undefined ? undefined : ((value.roomKeyGuests as Array<any>).map(RoomKeyGuestToJSON)),
    };
}

