/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OverrideInstructionType } from './OverrideInstructionType';
import {
    OverrideInstructionTypeFromJSON,
    OverrideInstructionTypeFromJSONTyped,
    OverrideInstructionTypeToJSON,
} from './OverrideInstructionType';
import type { RateChangeInstructionType } from './RateChangeInstructionType';
import {
    RateChangeInstructionTypeFromJSON,
    RateChangeInstructionTypeFromJSONTyped,
    RateChangeInstructionTypeToJSON,
} from './RateChangeInstructionType';
import type { ReservationRoomOwnershipType } from './ReservationRoomOwnershipType';
import {
    ReservationRoomOwnershipTypeFromJSON,
    ReservationRoomOwnershipTypeFromJSONTyped,
    ReservationRoomOwnershipTypeToJSON,
} from './ReservationRoomOwnershipType';

/**
 * Define the override flag which will be used when configuring a room to a reservation.
 * @export
 * @interface ReservationRoomSelectionOverrideType
 */
export interface ReservationRoomSelectionOverrideType {
    /**
     * Override the room selection even if the selected room has a "dirty" state.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    dirtyRoom?: boolean;
    /**
     * Override the room selection even if the selected room has an "out-of-service" state.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    outOfServiceRoom?: boolean;
    /**
     * Override the room selection even when HouseKeeping configured the room to still be occupied.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    sleepDiscrepantRoom?: boolean;
    /**
     * Override the room selection even when room occupancy is exceeded.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    occupancyRestriction?: boolean;
    /**
     * Override the room selection even when there is rate restriction present for this room type.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    rateRestriction?: boolean;
    /**
     * Override the room selection even when there is no inventory.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    inventoryRestriction?: boolean;
    /**
     * Override the room number locked flag in the database and use the value passed.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    roomNumberLocked?: boolean;
    /**
     * Override the Hold Room flag in the database and use the value passed.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    holdRoom?: boolean;
    /**
     * 
     * @type {RateChangeInstructionType}
     * @memberof ReservationRoomSelectionOverrideType
     */
    rateChange?: RateChangeInstructionType;
    /**
     * Forcefully override update. For real-time CRS interfaces, this element is used as force selling indicator.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    overrideExternalChecks?: boolean;
    /**
     * If the current reservation is a Day Use, then check on Reserved rooms can be overridden when assigning rooms.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    dayUseReserved?: boolean;
    /**
     * 
     * @type {OverrideInstructionType}
     * @memberof ReservationRoomSelectionOverrideType
     */
    overrideInstruction?: OverrideInstructionType;
    /**
     * Override the rotation room with the selected room when assigning rooms.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    overrideRotationRoom?: boolean;
    /**
     * Override the room ownership indicator in the reservation when assigning rooms. This is applicable when Room Rotation OPERA Control is active.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    overrideRoomOwnership?: boolean;
    /**
     * 
     * @type {ReservationRoomOwnershipType}
     * @memberof ReservationRoomSelectionOverrideType
     */
    roomOwnershipType?: ReservationRoomOwnershipType;
    /**
     * This flag indicates true/false. When this is true, it will allow to override the room feature preference validation while assigning rooms. The Reservation Room Features OPERA Control will determine which room feature preferences will be validated. When Reservation Room Features is on, the validation will be against the Room Feature preferences attached to the reservation. If the parameter is off, the validation will be against the room feature preferences attached to the profile. This is applicable when the Room Feature Validation OPERA Control is on.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    overrideRoomFeatures?: boolean;
    /**
     * This flag indicates true/false. When it is true, you will be allowed to override the room selection for a skip discrepancy. This flag is available when the Discrepant Rooms OPERA Control is active.
     * @type {boolean}
     * @memberof ReservationRoomSelectionOverrideType
     */
    skipDiscrepantRoom?: boolean;
}

/**
 * Check if a given object implements the ReservationRoomSelectionOverrideType interface.
 */
export function instanceOfReservationRoomSelectionOverrideType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationRoomSelectionOverrideTypeFromJSON(json: any): ReservationRoomSelectionOverrideType {
    return ReservationRoomSelectionOverrideTypeFromJSONTyped(json, false);
}

export function ReservationRoomSelectionOverrideTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationRoomSelectionOverrideType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dirtyRoom': !exists(json, 'dirtyRoom') ? undefined : json['dirtyRoom'],
        'outOfServiceRoom': !exists(json, 'outOfServiceRoom') ? undefined : json['outOfServiceRoom'],
        'sleepDiscrepantRoom': !exists(json, 'sleepDiscrepantRoom') ? undefined : json['sleepDiscrepantRoom'],
        'occupancyRestriction': !exists(json, 'occupancyRestriction') ? undefined : json['occupancyRestriction'],
        'rateRestriction': !exists(json, 'rateRestriction') ? undefined : json['rateRestriction'],
        'inventoryRestriction': !exists(json, 'inventoryRestriction') ? undefined : json['inventoryRestriction'],
        'roomNumberLocked': !exists(json, 'roomNumberLocked') ? undefined : json['roomNumberLocked'],
        'holdRoom': !exists(json, 'holdRoom') ? undefined : json['holdRoom'],
        'rateChange': !exists(json, 'rateChange') ? undefined : RateChangeInstructionTypeFromJSON(json['rateChange']),
        'overrideExternalChecks': !exists(json, 'overrideExternalChecks') ? undefined : json['overrideExternalChecks'],
        'dayUseReserved': !exists(json, 'dayUseReserved') ? undefined : json['dayUseReserved'],
        'overrideInstruction': !exists(json, 'overrideInstruction') ? undefined : OverrideInstructionTypeFromJSON(json['overrideInstruction']),
        'overrideRotationRoom': !exists(json, 'overrideRotationRoom') ? undefined : json['overrideRotationRoom'],
        'overrideRoomOwnership': !exists(json, 'overrideRoomOwnership') ? undefined : json['overrideRoomOwnership'],
        'roomOwnershipType': !exists(json, 'roomOwnershipType') ? undefined : ReservationRoomOwnershipTypeFromJSON(json['roomOwnershipType']),
        'overrideRoomFeatures': !exists(json, 'overrideRoomFeatures') ? undefined : json['overrideRoomFeatures'],
        'skipDiscrepantRoom': !exists(json, 'skipDiscrepantRoom') ? undefined : json['skipDiscrepantRoom'],
    };
}

export function ReservationRoomSelectionOverrideTypeToJSON(value?: ReservationRoomSelectionOverrideType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dirtyRoom': value.dirtyRoom,
        'outOfServiceRoom': value.outOfServiceRoom,
        'sleepDiscrepantRoom': value.sleepDiscrepantRoom,
        'occupancyRestriction': value.occupancyRestriction,
        'rateRestriction': value.rateRestriction,
        'inventoryRestriction': value.inventoryRestriction,
        'roomNumberLocked': value.roomNumberLocked,
        'holdRoom': value.holdRoom,
        'rateChange': RateChangeInstructionTypeToJSON(value.rateChange),
        'overrideExternalChecks': value.overrideExternalChecks,
        'dayUseReserved': value.dayUseReserved,
        'overrideInstruction': OverrideInstructionTypeToJSON(value.overrideInstruction),
        'overrideRotationRoom': value.overrideRotationRoom,
        'overrideRoomOwnership': value.overrideRoomOwnership,
        'roomOwnershipType': ReservationRoomOwnershipTypeToJSON(value.roomOwnershipType),
        'overrideRoomFeatures': value.overrideRoomFeatures,
        'skipDiscrepantRoom': value.skipDiscrepantRoom,
    };
}

