/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AmountDeterminationType } from './AmountDeterminationType';
import {
    AmountDeterminationTypeFromJSON,
    AmountDeterminationTypeFromJSONTyped,
    AmountDeterminationTypeToJSON,
} from './AmountDeterminationType';

/**
 * Applicable service charges or fees.
 * @export
 * @interface FeeType
 */
export interface FeeType {
    /**
     * A monetary amount.
     * @type {number}
     * @memberof FeeType
     */
    amount?: number;
    /**
     * Code identifying the fee (e.g.,agency fee, municipality fee).
     * @type {string}
     * @memberof FeeType
     */
    code?: string;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof FeeType
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof FeeType
     */
    description?: string;
    /**
     * 
     * @type {AmountDeterminationType}
     * @memberof FeeType
     */
    type?: AmountDeterminationType;
}

/**
 * Check if a given object implements the FeeType interface.
 */
export function instanceOfFeeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FeeTypeFromJSON(json: any): FeeType {
    return FeeTypeFromJSONTyped(json, false);
}

export function FeeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': !exists(json, 'type') ? undefined : AmountDeterminationTypeFromJSON(json['type']),
    };
}

export function FeeTypeToJSON(value?: FeeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'code': value.code,
        'currencyCode': value.currencyCode,
        'description': value.description,
        'type': AmountDeterminationTypeToJSON(value.type),
    };
}

