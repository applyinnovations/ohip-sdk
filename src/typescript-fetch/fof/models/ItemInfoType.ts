/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { TimeWindowType } from './TimeWindowType';
import {
    TimeWindowTypeFromJSON,
    TimeWindowTypeFromJSONTyped,
    TimeWindowTypeToJSON,
} from './TimeWindowType';

/**
 * Basic information regarding an Item.
 * @export
 * @interface ItemInfoType
 */
export interface ItemInfoType {
    /**
     * Detail description of an item.
     * @type {string}
     * @memberof ItemInfoType
     */
    description?: string;
    /**
     * 
     * @type {TimeWindowType}
     * @memberof ItemInfoType
     */
    availabilityPeriod?: TimeWindowType;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof ItemInfoType
     */
    timeSpan?: TimeSpanType;
    /**
     * Quantity of hold Item
     * @type {number}
     * @memberof ItemInfoType
     */
    quantity?: number;
    /**
     * ID reference for the hold Item
     * @type {number}
     * @memberof ItemInfoType
     */
    itemHoldId?: number;
    /**
     * Item Code.
     * @type {string}
     * @memberof ItemInfoType
     */
    code?: string;
    /**
     * Name of an item.
     * @type {string}
     * @memberof ItemInfoType
     */
    name?: string;
    /**
     * Indicates if it is an item pool. Not applicable for Item within the Item Pool.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    itemPool?: boolean;
    /**
     * If true indicates that item is allowed to sell separately.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    sellSeparate?: boolean;
    /**
     * If true indicates that item can be sold in reservation.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    sellInReservation?: boolean;
    /**
     * If true indicates that item can be sold in event.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    sellInEvent?: boolean;
    /**
     * If true indicates that item is required for the reservation.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    requiredForBooking?: boolean;
    /**
     * If true indicates that item has fixed charge when it is attached to a reservation.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    fixedCharge?: boolean;
    /**
     * If true indicates that item could be held outside of the reservation stay days.
     * @type {boolean}
     * @memberof ItemInfoType
     */
    outsideStay?: boolean;
    /**
     * Define the default duration in days when booking the item.
     * @type {number}
     * @memberof ItemInfoType
     */
    defaultDuration?: number;
}

/**
 * Check if a given object implements the ItemInfoType interface.
 */
export function instanceOfItemInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemInfoTypeFromJSON(json: any): ItemInfoType {
    return ItemInfoTypeFromJSONTyped(json, false);
}

export function ItemInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'availabilityPeriod': !exists(json, 'availabilityPeriod') ? undefined : TimeWindowTypeFromJSON(json['availabilityPeriod']),
        'timeSpan': !exists(json, 'timeSpan') ? undefined : TimeSpanTypeFromJSON(json['timeSpan']),
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'itemHoldId': !exists(json, 'itemHoldId') ? undefined : json['itemHoldId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'itemPool': !exists(json, 'itemPool') ? undefined : json['itemPool'],
        'sellSeparate': !exists(json, 'sellSeparate') ? undefined : json['sellSeparate'],
        'sellInReservation': !exists(json, 'sellInReservation') ? undefined : json['sellInReservation'],
        'sellInEvent': !exists(json, 'sellInEvent') ? undefined : json['sellInEvent'],
        'requiredForBooking': !exists(json, 'requiredForBooking') ? undefined : json['requiredForBooking'],
        'fixedCharge': !exists(json, 'fixedCharge') ? undefined : json['fixedCharge'],
        'outsideStay': !exists(json, 'outsideStay') ? undefined : json['outsideStay'],
        'defaultDuration': !exists(json, 'defaultDuration') ? undefined : json['defaultDuration'],
    };
}

export function ItemInfoTypeToJSON(value?: ItemInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'availabilityPeriod': TimeWindowTypeToJSON(value.availabilityPeriod),
        'timeSpan': TimeSpanTypeToJSON(value.timeSpan),
        'quantity': value.quantity,
        'itemHoldId': value.itemHoldId,
        'code': value.code,
        'name': value.name,
        'itemPool': value.itemPool,
        'sellSeparate': value.sellSeparate,
        'sellInReservation': value.sellInReservation,
        'sellInEvent': value.sellInEvent,
        'requiredForBooking': value.requiredForBooking,
        'fixedCharge': value.fixedCharge,
        'outsideStay': value.outsideStay,
        'defaultDuration': value.defaultDuration,
    };
}

