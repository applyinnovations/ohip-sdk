/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelRoomsOrderBy } from './HotelRoomsOrderBy';
import {
    HotelRoomsOrderByFromJSON,
    HotelRoomsOrderByFromJSONTyped,
    HotelRoomsOrderByToJSON,
} from './HotelRoomsOrderBy';
import type { ReservationRoomSelectionOverrideType } from './ReservationRoomSelectionOverrideType';
import {
    ReservationRoomSelectionOverrideTypeFromJSON,
    ReservationRoomSelectionOverrideTypeFromJSONTyped,
    ReservationRoomSelectionOverrideTypeToJSON,
} from './ReservationRoomSelectionOverrideType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Defines search criteria needed to configure a room to a reservation.
 * @export
 * @interface ReservationRoomSelectionType
 */
export interface ReservationRoomSelectionType {
    /**
     * 
     * @type {string}
     * @memberof ReservationRoomSelectionType
     */
    hotelId?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ReservationRoomSelectionType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Room identifier which the reservation will hold.
     * @type {string}
     * @memberof ReservationRoomSelectionType
     */
    roomId?: string;
    /**
     * 
     * @type {ReservationRoomSelectionOverrideType}
     * @memberof ReservationRoomSelectionType
     */
    overrideInstructions?: ReservationRoomSelectionOverrideType;
    /**
     * This list contains the Reservation IDs of the Back to Back Reservations that will be assigned to the same room. Back to Back Reservation functionality is available when the Back to Back Handling of Linked Reservations OPERA Control is active.
     * @type {Array<Array<UniqueIDType>>}
     * @memberof ReservationRoomSelectionType
     */
    includedBackToBack?: Array<Array<UniqueIDType>>;
    /**
     * Valid share reservation identifier.
     * @type {Array<Array<UniqueIDType>>}
     * @memberof ReservationRoomSelectionType
     */
    includedSharers?: Array<Array<UniqueIDType>>;
    /**
     * Update the Room Type used for the Rate calculation.
     * @type {boolean}
     * @memberof ReservationRoomSelectionType
     */
    updateRoomTypeCharged?: boolean;
    /**
     * Indicates if departure rooms are to be included for room assignment.
     * @type {boolean}
     * @memberof ReservationRoomSelectionType
     */
    includeDepartureRooms?: boolean;
    /**
     * Update the do not move flag used to locking the reservation room number.
     * @type {boolean}
     * @memberof ReservationRoomSelectionType
     */
    roomNumberLocked?: boolean;
    /**
     * 
     * @type {HotelRoomsOrderBy}
     * @memberof ReservationRoomSelectionType
     */
    orderBy?: HotelRoomsOrderBy;
    /**
     * Indicates the Room Segment number the room is assigned to.
     * @type {number}
     * @memberof ReservationRoomSelectionType
     */
    scheduledRoomSegmentNumber?: number;
    /**
     * Defines the start date of the room segment of the reservation.Room segments/scheduled room move functionality is available when the Advanced Daily Details OPERA Control is active.
     * @type {string}
     * @memberof ReservationRoomSelectionType
     */
    roomSegmentBeginDate?: string;
    /**
     * Defines the end date of the room segment of the reservation.Room segments/scheduled room move functionality is available when the Advanced Daily Details OPERA Control is active.
     * @type {string}
     * @memberof ReservationRoomSelectionType
     */
    roomSegmentEndDate?: string;
}

/**
 * Check if a given object implements the ReservationRoomSelectionType interface.
 */
export function instanceOfReservationRoomSelectionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationRoomSelectionTypeFromJSON(json: any): ReservationRoomSelectionType {
    return ReservationRoomSelectionTypeFromJSONTyped(json, false);
}

export function ReservationRoomSelectionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationRoomSelectionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'overrideInstructions': !exists(json, 'overrideInstructions') ? undefined : ReservationRoomSelectionOverrideTypeFromJSON(json['overrideInstructions']),
        'includedBackToBack': !exists(json, 'includedBackToBack') ? undefined : json['includedBackToBack'],
        'includedSharers': !exists(json, 'includedSharers') ? undefined : json['includedSharers'],
        'updateRoomTypeCharged': !exists(json, 'updateRoomTypeCharged') ? undefined : json['updateRoomTypeCharged'],
        'includeDepartureRooms': !exists(json, 'includeDepartureRooms') ? undefined : json['includeDepartureRooms'],
        'roomNumberLocked': !exists(json, 'roomNumberLocked') ? undefined : json['roomNumberLocked'],
        'orderBy': !exists(json, 'orderBy') ? undefined : HotelRoomsOrderByFromJSON(json['orderBy']),
        'scheduledRoomSegmentNumber': !exists(json, 'scheduledRoomSegmentNumber') ? undefined : json['scheduledRoomSegmentNumber'],
        'roomSegmentBeginDate': !exists(json, 'roomSegmentBeginDate') ? undefined : json['roomSegmentBeginDate'],
        'roomSegmentEndDate': !exists(json, 'roomSegmentEndDate') ? undefined : json['roomSegmentEndDate'],
    };
}

export function ReservationRoomSelectionTypeToJSON(value?: ReservationRoomSelectionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'roomId': value.roomId,
        'overrideInstructions': ReservationRoomSelectionOverrideTypeToJSON(value.overrideInstructions),
        'includedBackToBack': value.includedBackToBack,
        'includedSharers': value.includedSharers,
        'updateRoomTypeCharged': value.updateRoomTypeCharged,
        'includeDepartureRooms': value.includeDepartureRooms,
        'roomNumberLocked': value.roomNumberLocked,
        'orderBy': HotelRoomsOrderByToJSON(value.orderBy),
        'scheduledRoomSegmentNumber': value.scheduledRoomSegmentNumber,
        'roomSegmentBeginDate': value.roomSegmentBeginDate,
        'roomSegmentEndDate': value.roomSegmentEndDate,
    };
}

