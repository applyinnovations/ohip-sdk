/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { HousekeepingRoomStatusType } from './HousekeepingRoomStatusType';
import {
    HousekeepingRoomStatusTypeFromJSON,
    HousekeepingRoomStatusTypeFromJSONTyped,
    HousekeepingRoomStatusTypeToJSON,
} from './HousekeepingRoomStatusType';

/**
 * Out Of Order and Out Of Service Room information.
 * @export
 * @interface RoomOutOfOrderType
 */
export interface RoomOutOfOrderType {
    /**
     * The ending value of the date range.
     * @type {string}
     * @memberof RoomOutOfOrderType
     */
    end?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof RoomOutOfOrderType
     */
    newDateRange?: DateRangeType;
    /**
     * Reason Code why the room is OO/OS.
     * @type {string}
     * @memberof RoomOutOfOrderType
     */
    reasonCode?: string;
    /**
     * Reason Description why the room is OO/OS.
     * @type {string}
     * @memberof RoomOutOfOrderType
     */
    reasonDesc?: string;
    /**
     * Notes or Remarks on the OO/OS room
     * @type {string}
     * @memberof RoomOutOfOrderType
     */
    repairRemarks?: string;
    /**
     * 
     * @type {HousekeepingRoomStatusType}
     * @memberof RoomOutOfOrderType
     */
    returnStatus?: HousekeepingRoomStatusType;
    /**
     * 
     * @type {HousekeepingRoomStatusType}
     * @memberof RoomOutOfOrderType
     */
    roomStatus?: HousekeepingRoomStatusType;
    /**
     * The starting value of the date range.
     * @type {string}
     * @memberof RoomOutOfOrderType
     */
    start?: string;
}

/**
 * Check if a given object implements the RoomOutOfOrderType interface.
 */
export function instanceOfRoomOutOfOrderType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomOutOfOrderTypeFromJSON(json: any): RoomOutOfOrderType {
    return RoomOutOfOrderTypeFromJSONTyped(json, false);
}

export function RoomOutOfOrderTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomOutOfOrderType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'end': !exists(json, 'end') ? undefined : json['end'],
        'newDateRange': !exists(json, 'newDateRange') ? undefined : DateRangeTypeFromJSON(json['newDateRange']),
        'reasonCode': !exists(json, 'reasonCode') ? undefined : json['reasonCode'],
        'reasonDesc': !exists(json, 'reasonDesc') ? undefined : json['reasonDesc'],
        'repairRemarks': !exists(json, 'repairRemarks') ? undefined : json['repairRemarks'],
        'returnStatus': !exists(json, 'returnStatus') ? undefined : HousekeepingRoomStatusTypeFromJSON(json['returnStatus']),
        'roomStatus': !exists(json, 'roomStatus') ? undefined : HousekeepingRoomStatusTypeFromJSON(json['roomStatus']),
        'start': !exists(json, 'start') ? undefined : json['start'],
    };
}

export function RoomOutOfOrderTypeToJSON(value?: RoomOutOfOrderType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'end': value.end,
        'newDateRange': DateRangeTypeToJSON(value.newDateRange),
        'reasonCode': value.reasonCode,
        'reasonDesc': value.reasonDesc,
        'repairRemarks': value.repairRemarks,
        'returnStatus': HousekeepingRoomStatusTypeToJSON(value.returnStatus),
        'roomStatus': HousekeepingRoomStatusTypeToJSON(value.roomStatus),
        'start': value.start,
    };
}

