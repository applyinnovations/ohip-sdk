/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { CommissionCodeType } from './CommissionCodeType';
import {
    CommissionCodeTypeFromJSON,
    CommissionCodeTypeFromJSONTyped,
    CommissionCodeTypeToJSON,
} from './CommissionCodeType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ProfileTypeType } from './ProfileTypeType';
import {
    ProfileTypeTypeFromJSON,
    ProfileTypeTypeFromJSONTyped,
    ProfileTypeTypeToJSON,
} from './ProfileTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Agent or source commission information.
 * @export
 * @interface AgentInfoType
 */
export interface AgentInfoType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof AgentInfoType
     */
    bankAccountId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof AgentInfoType
     */
    agentId?: UniqueIDType;
    /**
     * Travel agent or source profile name.
     * @type {string}
     * @memberof AgentInfoType
     */
    name?: string;
    /**
     * Alternate name of the agent or source profile.
     * @type {string}
     * @memberof AgentInfoType
     */
    alternateName?: string;
    /**
     * City of the travel agency or source profile.
     * @type {string}
     * @memberof AgentInfoType
     */
    city?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof AgentInfoType
     */
    iATANo?: UniqueIDType;
    /**
     * 
     * @type {ProfileTypeType}
     * @memberof AgentInfoType
     */
    profileType?: ProfileTypeType;
    /**
     * 
     * @type {CommissionCodeType}
     * @memberof AgentInfoType
     */
    commissionCode?: CommissionCodeType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof AgentInfoType
     */
    commissionAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof AgentInfoType
     */
    holdReason?: CodeDescriptionType;
    /**
     * Whether this agent/source has been paid or will be paid for commission.
     * @type {boolean}
     * @memberof AgentInfoType
     */
    onCommission?: boolean;
    /**
     * When set to true, commission for all the reservations associated with this agent is flagged as on hold.
     * @type {boolean}
     * @memberof AgentInfoType
     */
    onHold?: boolean;
}

/**
 * Check if a given object implements the AgentInfoType interface.
 */
export function instanceOfAgentInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AgentInfoTypeFromJSON(json: any): AgentInfoType {
    return AgentInfoTypeFromJSONTyped(json, false);
}

export function AgentInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgentInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bankAccountId': !exists(json, 'bankAccountId') ? undefined : UniqueIDTypeFromJSON(json['bankAccountId']),
        'agentId': !exists(json, 'agentId') ? undefined : UniqueIDTypeFromJSON(json['agentId']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'alternateName': !exists(json, 'alternateName') ? undefined : json['alternateName'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'iATANo': !exists(json, 'iATANo') ? undefined : UniqueIDTypeFromJSON(json['iATANo']),
        'profileType': !exists(json, 'profileType') ? undefined : ProfileTypeTypeFromJSON(json['profileType']),
        'commissionCode': !exists(json, 'commissionCode') ? undefined : CommissionCodeTypeFromJSON(json['commissionCode']),
        'commissionAmount': !exists(json, 'commissionAmount') ? undefined : CurrencyAmountTypeFromJSON(json['commissionAmount']),
        'holdReason': !exists(json, 'holdReason') ? undefined : CodeDescriptionTypeFromJSON(json['holdReason']),
        'onCommission': !exists(json, 'onCommission') ? undefined : json['onCommission'],
        'onHold': !exists(json, 'onHold') ? undefined : json['onHold'],
    };
}

export function AgentInfoTypeToJSON(value?: AgentInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bankAccountId': UniqueIDTypeToJSON(value.bankAccountId),
        'agentId': UniqueIDTypeToJSON(value.agentId),
        'name': value.name,
        'alternateName': value.alternateName,
        'city': value.city,
        'iATANo': UniqueIDTypeToJSON(value.iATANo),
        'profileType': ProfileTypeTypeToJSON(value.profileType),
        'commissionCode': CommissionCodeTypeToJSON(value.commissionCode),
        'commissionAmount': CurrencyAmountTypeToJSON(value.commissionAmount),
        'holdReason': CodeDescriptionTypeToJSON(value.holdReason),
        'onCommission': value.onCommission,
        'onHold': value.onHold,
    };
}

