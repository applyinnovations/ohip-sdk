/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomKeyEncoderType } from './RoomKeyEncoderType';
import {
    RoomKeyEncoderTypeFromJSON,
    RoomKeyEncoderTypeFromJSONTyped,
    RoomKeyEncoderTypeToJSON,
} from './RoomKeyEncoderType';
import type { RoomKeyInterfaceRightType } from './RoomKeyInterfaceRightType';
import {
    RoomKeyInterfaceRightTypeFromJSON,
    RoomKeyInterfaceRightTypeFromJSONTyped,
    RoomKeyInterfaceRightTypeToJSON,
} from './RoomKeyInterfaceRightType';

/**
 * 
 * @export
 * @interface RoomKeyInterfaceDetailType
 */
export interface RoomKeyInterfaceDetailType {
    /**
     * Holds the key encoder right.
     * @type {Array<RoomKeyInterfaceRightType>}
     * @memberof RoomKeyInterfaceDetailType
     */
    interfaceRights?: Array<RoomKeyInterfaceRightType>;
    /**
     * Holds the key encoder right.
     * @type {Array<RoomKeyEncoderType>}
     * @memberof RoomKeyInterfaceDetailType
     */
    encoders?: Array<RoomKeyEncoderType>;
    /**
     * Hotel code of the interface.
     * @type {string}
     * @memberof RoomKeyInterfaceDetailType
     */
    hotelId?: string;
    /**
     * Name of the interface.
     * @type {string}
     * @memberof RoomKeyInterfaceDetailType
     */
    interfaceName?: string;
    /**
     * Description of the interface.
     * @type {string}
     * @memberof RoomKeyInterfaceDetailType
     */
    interfaceDescription?: string;
    /**
     * Indicator if the DLS Interface allows to send valid start date and time.
     * @type {boolean}
     * @memberof RoomKeyInterfaceDetailType
     */
    sendValidStartDateTime?: boolean;
    /**
     * Current property date and time.
     * @type {string}
     * @memberof RoomKeyInterfaceDetailType
     */
    propertyDateTime?: string;
    /**
     * Indicator if additional rooms are allowed to be included in key creation.
     * @type {boolean}
     * @memberof RoomKeyInterfaceDetailType
     */
    multipleRoomKeys?: boolean;
    /**
     * Maximum number of additional rooms allowed.
     * @type {number}
     * @memberof RoomKeyInterfaceDetailType
     */
    additionalRoomsLimit?: number;
    /**
     * Outbound Code linked to the property interface.
     * @type {string}
     * @memberof RoomKeyInterfaceDetailType
     */
    outboundCode?: string;
}

/**
 * Check if a given object implements the RoomKeyInterfaceDetailType interface.
 */
export function instanceOfRoomKeyInterfaceDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomKeyInterfaceDetailTypeFromJSON(json: any): RoomKeyInterfaceDetailType {
    return RoomKeyInterfaceDetailTypeFromJSONTyped(json, false);
}

export function RoomKeyInterfaceDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomKeyInterfaceDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'interfaceRights': !exists(json, 'interfaceRights') ? undefined : ((json['interfaceRights'] as Array<any>).map(RoomKeyInterfaceRightTypeFromJSON)),
        'encoders': !exists(json, 'encoders') ? undefined : ((json['encoders'] as Array<any>).map(RoomKeyEncoderTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceName': !exists(json, 'interfaceName') ? undefined : json['interfaceName'],
        'interfaceDescription': !exists(json, 'interfaceDescription') ? undefined : json['interfaceDescription'],
        'sendValidStartDateTime': !exists(json, 'sendValidStartDateTime') ? undefined : json['sendValidStartDateTime'],
        'propertyDateTime': !exists(json, 'propertyDateTime') ? undefined : json['propertyDateTime'],
        'multipleRoomKeys': !exists(json, 'multipleRoomKeys') ? undefined : json['multipleRoomKeys'],
        'additionalRoomsLimit': !exists(json, 'additionalRoomsLimit') ? undefined : json['additionalRoomsLimit'],
        'outboundCode': !exists(json, 'outboundCode') ? undefined : json['outboundCode'],
    };
}

export function RoomKeyInterfaceDetailTypeToJSON(value?: RoomKeyInterfaceDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'interfaceRights': value.interfaceRights === undefined ? undefined : ((value.interfaceRights as Array<any>).map(RoomKeyInterfaceRightTypeToJSON)),
        'encoders': value.encoders === undefined ? undefined : ((value.encoders as Array<any>).map(RoomKeyEncoderTypeToJSON)),
        'hotelId': value.hotelId,
        'interfaceName': value.interfaceName,
        'interfaceDescription': value.interfaceDescription,
        'sendValidStartDateTime': value.sendValidStartDateTime,
        'propertyDateTime': value.propertyDateTime,
        'multipleRoomKeys': value.multipleRoomKeys,
        'additionalRoomsLimit': value.additionalRoomsLimit,
        'outboundCode': value.outboundCode,
    };
}

