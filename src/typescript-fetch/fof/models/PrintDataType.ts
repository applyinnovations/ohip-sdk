/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Lists the text, file or picture to print onto a Guest room key (only for roomKeyType is HardKey).
 * @export
 * @interface PrintDataType
 */
export interface PrintDataType {
    /**
     * key options code.
     * @type {string}
     * @memberof PrintDataType
     */
    printText?: string;
    /**
     * Base64 format of file representing data to print.
     * @type {string}
     * @memberof PrintDataType
     */
    printFile?: string;
    /**
     * Base64 format of picture representing data to print.
     * @type {string}
     * @memberof PrintDataType
     */
    printPicture?: string;
}

/**
 * Check if a given object implements the PrintDataType interface.
 */
export function instanceOfPrintDataType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PrintDataTypeFromJSON(json: any): PrintDataType {
    return PrintDataTypeFromJSONTyped(json, false);
}

export function PrintDataTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrintDataType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'printText': !exists(json, 'printText') ? undefined : json['printText'],
        'printFile': !exists(json, 'printFile') ? undefined : json['printFile'],
        'printPicture': !exists(json, 'printPicture') ? undefined : json['printPicture'],
    };
}

export function PrintDataTypeToJSON(value?: PrintDataType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'printText': value.printText,
        'printFile': value.printFile,
        'printPicture': value.printPicture,
    };
}

