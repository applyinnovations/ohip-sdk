/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { CommissionCodeType } from './CommissionCodeType';
import {
    CommissionCodeTypeFromJSON,
    CommissionCodeTypeFromJSONTyped,
    CommissionCodeTypeToJSON,
} from './CommissionCodeType';
import type { CommissionStatusType } from './CommissionStatusType';
import {
    CommissionStatusTypeFromJSON,
    CommissionStatusTypeFromJSONTyped,
    CommissionStatusTypeToJSON,
} from './CommissionStatusType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { ResGuestInfoType } from './ResGuestInfoType';
import {
    ResGuestInfoTypeFromJSON,
    ResGuestInfoTypeFromJSONTyped,
    ResGuestInfoTypeToJSON,
} from './ResGuestInfoType';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Criteria for updating a commission record.
 * @export
 * @interface CommissionDetailType
 */
export interface CommissionDetailType {
    /**
     * When set to true, commission for this reservation is flagged to offset AR.
     * @type {boolean}
     * @memberof CommissionDetailType
     */
    aROffset?: boolean;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    aROffsetAmount?: CurrencyAmountType;
    /**
     * System generated logs to indicate changes of commission record.
     * @type {string}
     * @memberof CommissionDetailType
     */
    adjustmentNotes?: string;
    /**
     * Block code of the reservation.
     * @type {string}
     * @memberof CommissionDetailType
     */
    blockCode?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    commissionAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CommissionCodeType}
     * @memberof CommissionDetailType
     */
    commissionCode?: CommissionCodeType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CommissionDetailType
     */
    commissionId?: UniqueIDType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    commissionRevenue?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    commissionRevenueTaxAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CommissionStatusType}
     * @memberof CommissionDetailType
     */
    commissionStatus?: CommissionStatusType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    commissionTaxAmount?: CurrencyAmountType;
    /**
     * Exchange rate of the currency.
     * @type {number}
     * @memberof CommissionDetailType
     */
    exchangeRate?: number;
    /**
     * 
     * @type {ResGuestInfoType}
     * @memberof CommissionDetailType
     */
    guestInfo?: ResGuestInfoType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof CommissionDetailType
     */
    holdReason?: CodeDescriptionType;
    /**
     * When set to true, commission for this reservation is flagged as on hold.
     * @type {boolean}
     * @memberof CommissionDetailType
     */
    onHold?: boolean;
    /**
     * When set to true, commission for this reservation is flagged as prepaid.
     * @type {boolean}
     * @memberof CommissionDetailType
     */
    prepaid?: boolean;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    prepaidCommissionAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    rateAmount?: CurrencyAmountType;
    /**
     * Rate code of the reservation
     * @type {string}
     * @memberof CommissionDetailType
     */
    rateCode?: string;
    /**
     * TA Record locator
     * @type {string}
     * @memberof CommissionDetailType
     */
    recordLocator?: string;
    /**
     * Remarks for the commission record.
     * @type {string}
     * @memberof CommissionDetailType
     */
    remarks?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof CommissionDetailType
     */
    reservationIdList?: Array<UniqueIDType>;
    /**
     * Reservation status.
     * @type {string}
     * @memberof CommissionDetailType
     */
    reservationStatus?: string;
    /**
     * Room number assigned to the reservation
     * @type {string}
     * @memberof CommissionDetailType
     */
    roomId?: string;
    /**
     * Room type code of the reservation.
     * @type {string}
     * @memberof CommissionDetailType
     */
    roomType?: string;
    /**
     * When set to true, commission for this reservation is flagged as routing.
     * @type {boolean}
     * @memberof CommissionDetailType
     */
    routing?: boolean;
    /**
     * 
     * @type {TimeSpanType}
     * @memberof CommissionDetailType
     */
    timeSpan?: TimeSpanType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof CommissionDetailType
     */
    totalCommission?: CurrencyAmountType;
}

/**
 * Check if a given object implements the CommissionDetailType interface.
 */
export function instanceOfCommissionDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommissionDetailTypeFromJSON(json: any): CommissionDetailType {
    return CommissionDetailTypeFromJSONTyped(json, false);
}

export function CommissionDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommissionDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'aROffset': !exists(json, 'aROffset') ? undefined : json['aROffset'],
        'aROffsetAmount': !exists(json, 'aROffsetAmount') ? undefined : CurrencyAmountTypeFromJSON(json['aROffsetAmount']),
        'adjustmentNotes': !exists(json, 'adjustmentNotes') ? undefined : json['adjustmentNotes'],
        'blockCode': !exists(json, 'blockCode') ? undefined : json['blockCode'],
        'commissionAmount': !exists(json, 'commissionAmount') ? undefined : CurrencyAmountTypeFromJSON(json['commissionAmount']),
        'commissionCode': !exists(json, 'commissionCode') ? undefined : CommissionCodeTypeFromJSON(json['commissionCode']),
        'commissionId': !exists(json, 'commissionId') ? undefined : UniqueIDTypeFromJSON(json['commissionId']),
        'commissionRevenue': !exists(json, 'commissionRevenue') ? undefined : CurrencyAmountTypeFromJSON(json['commissionRevenue']),
        'commissionRevenueTaxAmount': !exists(json, 'commissionRevenueTaxAmount') ? undefined : CurrencyAmountTypeFromJSON(json['commissionRevenueTaxAmount']),
        'commissionStatus': !exists(json, 'commissionStatus') ? undefined : CommissionStatusTypeFromJSON(json['commissionStatus']),
        'commissionTaxAmount': !exists(json, 'commissionTaxAmount') ? undefined : CurrencyAmountTypeFromJSON(json['commissionTaxAmount']),
        'exchangeRate': !exists(json, 'exchangeRate') ? undefined : json['exchangeRate'],
        'guestInfo': !exists(json, 'guestInfo') ? undefined : ResGuestInfoTypeFromJSON(json['guestInfo']),
        'holdReason': !exists(json, 'holdReason') ? undefined : CodeDescriptionTypeFromJSON(json['holdReason']),
        'onHold': !exists(json, 'onHold') ? undefined : json['onHold'],
        'prepaid': !exists(json, 'prepaid') ? undefined : json['prepaid'],
        'prepaidCommissionAmount': !exists(json, 'prepaidCommissionAmount') ? undefined : CurrencyAmountTypeFromJSON(json['prepaidCommissionAmount']),
        'rateAmount': !exists(json, 'rateAmount') ? undefined : CurrencyAmountTypeFromJSON(json['rateAmount']),
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
        'recordLocator': !exists(json, 'recordLocator') ? undefined : json['recordLocator'],
        'remarks': !exists(json, 'remarks') ? undefined : json['remarks'],
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ((json['reservationIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : json['reservationStatus'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'routing': !exists(json, 'routing') ? undefined : json['routing'],
        'timeSpan': !exists(json, 'timeSpan') ? undefined : TimeSpanTypeFromJSON(json['timeSpan']),
        'totalCommission': !exists(json, 'totalCommission') ? undefined : CurrencyAmountTypeFromJSON(json['totalCommission']),
    };
}

export function CommissionDetailTypeToJSON(value?: CommissionDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'aROffset': value.aROffset,
        'aROffsetAmount': CurrencyAmountTypeToJSON(value.aROffsetAmount),
        'adjustmentNotes': value.adjustmentNotes,
        'blockCode': value.blockCode,
        'commissionAmount': CurrencyAmountTypeToJSON(value.commissionAmount),
        'commissionCode': CommissionCodeTypeToJSON(value.commissionCode),
        'commissionId': UniqueIDTypeToJSON(value.commissionId),
        'commissionRevenue': CurrencyAmountTypeToJSON(value.commissionRevenue),
        'commissionRevenueTaxAmount': CurrencyAmountTypeToJSON(value.commissionRevenueTaxAmount),
        'commissionStatus': CommissionStatusTypeToJSON(value.commissionStatus),
        'commissionTaxAmount': CurrencyAmountTypeToJSON(value.commissionTaxAmount),
        'exchangeRate': value.exchangeRate,
        'guestInfo': ResGuestInfoTypeToJSON(value.guestInfo),
        'holdReason': CodeDescriptionTypeToJSON(value.holdReason),
        'onHold': value.onHold,
        'prepaid': value.prepaid,
        'prepaidCommissionAmount': CurrencyAmountTypeToJSON(value.prepaidCommissionAmount),
        'rateAmount': CurrencyAmountTypeToJSON(value.rateAmount),
        'rateCode': value.rateCode,
        'recordLocator': value.recordLocator,
        'remarks': value.remarks,
        'reservationIdList': value.reservationIdList === undefined ? undefined : ((value.reservationIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'reservationStatus': value.reservationStatus,
        'roomId': value.roomId,
        'roomType': value.roomType,
        'routing': value.routing,
        'timeSpan': TimeSpanTypeToJSON(value.timeSpan),
        'totalCommission': CurrencyAmountTypeToJSON(value.totalCommission),
    };
}

