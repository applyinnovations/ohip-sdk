/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ErrorType } from './ErrorType';
import {
    ErrorTypeFromJSON,
    ErrorTypeFromJSONTyped,
    ErrorTypeToJSON,
} from './ErrorType';
import type { HousekeepingRoomStatusType } from './HousekeepingRoomStatusType';
import {
    HousekeepingRoomStatusTypeFromJSON,
    HousekeepingRoomStatusTypeFromJSONTyped,
    HousekeepingRoomStatusTypeToJSON,
} from './HousekeepingRoomStatusType';
import type { ReservationId } from './ReservationId';
import {
    ReservationIdFromJSON,
    ReservationIdFromJSONTyped,
    ReservationIdToJSON,
} from './ReservationId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Collection of error and warning if any.
 * @export
 * @interface AutoRoomAssignType
 */
export interface AutoRoomAssignType {
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof AutoRoomAssignType
     */
    warnings?: Array<WarningType>;
    /**
     * An error that occurred during the processing of a message.
     * @type {Array<ErrorType>}
     * @memberof AutoRoomAssignType
     */
    errors?: Array<ErrorType>;
    /**
     * 
     * @type {ReservationId}
     * @memberof AutoRoomAssignType
     */
    reservationId?: ReservationId;
    /**
     * Arrival date of the reservation.
     * @type {string}
     * @memberof AutoRoomAssignType
     */
    arrivalDate?: string;
    /**
     * Departure date of the reservation.
     * @type {string}
     * @memberof AutoRoomAssignType
     */
    departureDate?: string;
    /**
     * Guest name associated to the reservation.
     * @type {string}
     * @memberof AutoRoomAssignType
     */
    guestName?: string;
    /**
     * Room number associated to the reservation.
     * @type {string}
     * @memberof AutoRoomAssignType
     */
    roomId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof AutoRoomAssignType
     */
    confirmationNo?: UniqueIDType;
    /**
     * 
     * @type {HousekeepingRoomStatusType}
     * @memberof AutoRoomAssignType
     */
    roomStatus?: HousekeepingRoomStatusType;
}

/**
 * Check if a given object implements the AutoRoomAssignType interface.
 */
export function instanceOfAutoRoomAssignType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutoRoomAssignTypeFromJSON(json: any): AutoRoomAssignType {
    return AutoRoomAssignTypeFromJSONTyped(json, false);
}

export function AutoRoomAssignTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoRoomAssignType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ErrorTypeFromJSON)),
        'reservationId': !exists(json, 'reservationId') ? undefined : ReservationIdFromJSON(json['reservationId']),
        'arrivalDate': !exists(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'departureDate': !exists(json, 'departureDate') ? undefined : json['departureDate'],
        'guestName': !exists(json, 'guestName') ? undefined : json['guestName'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'confirmationNo': !exists(json, 'confirmationNo') ? undefined : UniqueIDTypeFromJSON(json['confirmationNo']),
        'roomStatus': !exists(json, 'roomStatus') ? undefined : HousekeepingRoomStatusTypeFromJSON(json['roomStatus']),
    };
}

export function AutoRoomAssignTypeToJSON(value?: AutoRoomAssignType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ErrorTypeToJSON)),
        'reservationId': ReservationIdToJSON(value.reservationId),
        'arrivalDate': value.arrivalDate,
        'departureDate': value.departureDate,
        'guestName': value.guestName,
        'roomId': value.roomId,
        'confirmationNo': UniqueIDTypeToJSON(value.confirmationNo),
        'roomStatus': HousekeepingRoomStatusTypeToJSON(value.roomStatus),
    };
}

