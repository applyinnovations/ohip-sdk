/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FacilityTaskType } from './FacilityTaskType';
import {
    FacilityTaskTypeFromJSON,
    FacilityTaskTypeFromJSONTyped,
    FacilityTaskTypeToJSON,
} from './FacilityTaskType';
import type { HousekeepingRoomStatusType } from './HousekeepingRoomStatusType';
import {
    HousekeepingRoomStatusTypeFromJSON,
    HousekeepingRoomStatusTypeFromJSONTyped,
    HousekeepingRoomStatusTypeToJSON,
} from './HousekeepingRoomStatusType';

/**
 * Holds housekeeping turndown service information for the room.
 * @export
 * @interface ResHousekeepingType
 */
export interface ResHousekeepingType {
    /**
     * Turndown instructions for the room.
     * @type {string}
     * @memberof ResHousekeepingType
     */
    instructions?: string;
    /**
     * 
     * @type {FacilityTaskType}
     * @memberof ResHousekeepingType
     */
    facilityTaskInfo?: FacilityTaskType;
    /**
     * Indicates if a linen change is necessary.
     * @type {boolean}
     * @memberof ResHousekeepingType
     */
    linenChange?: boolean;
    /**
     * Indicates whether guest wants turndown facility or not.
     * @type {boolean}
     * @memberof ResHousekeepingType
     */
    turndownRequested?: boolean;
    /**
     * This is the Turndown room service time.
     * @type {string}
     * @memberof ResHousekeepingType
     */
    serviceTime?: string;
    /**
     * Expected Start Time for housekeeping task(s).
     * @type {string}
     * @memberof ResHousekeepingType
     */
    expectedServiceTime?: string;
    /**
     * 
     * @type {HousekeepingRoomStatusType}
     * @memberof ResHousekeepingType
     */
    roomStatus?: HousekeepingRoomStatusType;
}

/**
 * Check if a given object implements the ResHousekeepingType interface.
 */
export function instanceOfResHousekeepingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResHousekeepingTypeFromJSON(json: any): ResHousekeepingType {
    return ResHousekeepingTypeFromJSONTyped(json, false);
}

export function ResHousekeepingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResHousekeepingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'instructions': !exists(json, 'instructions') ? undefined : json['instructions'],
        'facilityTaskInfo': !exists(json, 'facilityTaskInfo') ? undefined : FacilityTaskTypeFromJSON(json['facilityTaskInfo']),
        'linenChange': !exists(json, 'linenChange') ? undefined : json['linenChange'],
        'turndownRequested': !exists(json, 'turndownRequested') ? undefined : json['turndownRequested'],
        'serviceTime': !exists(json, 'serviceTime') ? undefined : json['serviceTime'],
        'expectedServiceTime': !exists(json, 'expectedServiceTime') ? undefined : json['expectedServiceTime'],
        'roomStatus': !exists(json, 'roomStatus') ? undefined : HousekeepingRoomStatusTypeFromJSON(json['roomStatus']),
    };
}

export function ResHousekeepingTypeToJSON(value?: ResHousekeepingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'instructions': value.instructions,
        'facilityTaskInfo': FacilityTaskTypeToJSON(value.facilityTaskInfo),
        'linenChange': value.linenChange,
        'turndownRequested': value.turndownRequested,
        'serviceTime': value.serviceTime,
        'expectedServiceTime': value.expectedServiceTime,
        'roomStatus': HousekeepingRoomStatusTypeToJSON(value.roomStatus),
    };
}

