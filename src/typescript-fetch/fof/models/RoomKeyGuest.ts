/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information about the guest for whom a key can be created.
 * @export
 * @interface RoomKeyGuest
 */
export interface RoomKeyGuest {
    /**
     * First Name of the guest.
     * @type {string}
     * @memberof RoomKeyGuest
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomKeyGuest
     */
    guestKeyOptions?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof RoomKeyGuest
     */
    guestNameId?: UniqueIDType;
    /**
     * Flag to indicate wheter the guest is an Adult or a child.
     * @type {boolean}
     * @memberof RoomKeyGuest
     */
    isAdult?: boolean;
    /**
     * Flag to indicate wheter the guest is an Adult or a child.
     * @type {boolean}
     * @memberof RoomKeyGuest
     */
    isInactive?: boolean;
    /**
     * Key Number of the card.
     * @type {number}
     * @memberof RoomKeyGuest
     */
    keyNumber?: number;
    /**
     * Last Name of the guest.
     * @type {string}
     * @memberof RoomKeyGuest
     */
    lastName?: string;
    /**
     * Original Balance on the Key card.
     * @type {number}
     * @memberof RoomKeyGuest
     */
    originalBalance?: number;
    /**
     * Remaining Balance on the Key card.
     * @type {number}
     * @memberof RoomKeyGuest
     */
    remainingBalance?: number;
}

/**
 * Check if a given object implements the RoomKeyGuest interface.
 */
export function instanceOfRoomKeyGuest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomKeyGuestFromJSON(json: any): RoomKeyGuest {
    return RoomKeyGuestFromJSONTyped(json, false);
}

export function RoomKeyGuestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomKeyGuest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'guestKeyOptions': !exists(json, 'guestKeyOptions') ? undefined : json['guestKeyOptions'],
        'guestNameId': !exists(json, 'guestNameId') ? undefined : UniqueIDTypeFromJSON(json['guestNameId']),
        'isAdult': !exists(json, 'isAdult') ? undefined : json['isAdult'],
        'isInactive': !exists(json, 'isInactive') ? undefined : json['isInactive'],
        'keyNumber': !exists(json, 'keyNumber') ? undefined : json['keyNumber'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'originalBalance': !exists(json, 'originalBalance') ? undefined : json['originalBalance'],
        'remainingBalance': !exists(json, 'remainingBalance') ? undefined : json['remainingBalance'],
    };
}

export function RoomKeyGuestToJSON(value?: RoomKeyGuest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'firstName': value.firstName,
        'guestKeyOptions': value.guestKeyOptions,
        'guestNameId': UniqueIDTypeToJSON(value.guestNameId),
        'isAdult': value.isAdult,
        'isInactive': value.isInactive,
        'keyNumber': value.keyNumber,
        'lastName': value.lastName,
        'originalBalance': value.originalBalance,
        'remainingBalance': value.remainingBalance,
    };
}

