/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Operations Service
 * APIs to cater for Front Desk Operations and Front Desk Statistic functionality in OPERA Cloud. <br /><br /> Front Desk features some of the most commonly used operations in OPERA Cloud, such as managing guest arrivals, managing in-house guests, and managing guest departures. Some additional tasks you can complete from the Front Desk menu are room searches, room assignments, and quick check outs as well as opening folios, creating registration cards, setting wake up calls, and sending messages to guests.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Configured Billing Instruction which represents a set of Transaction Codes.
 * @export
 * @interface BillingInstructionType
 */
export interface BillingInstructionType {
    /**
     * Unique identifier for the Billing Instruction.
     * @type {string}
     * @memberof BillingInstructionType
     */
    billingCode?: string;
    /**
     * Billing Instruction code description.
     * @type {string}
     * @memberof BillingInstructionType
     */
    desc?: string;
    /**
     * Hotel context of the Billing Instruction.
     * @type {string}
     * @memberof BillingInstructionType
     */
    hotelId?: string;
    /**
     * This is the Routing Instruction Id attached with Reservation. It is only used for internal purpose. It should not be used by external vendor or consumer.
     * @type {number}
     * @memberof BillingInstructionType
     */
    routingInstructionsId?: number;
}

/**
 * Check if a given object implements the BillingInstructionType interface.
 */
export function instanceOfBillingInstructionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BillingInstructionTypeFromJSON(json: any): BillingInstructionType {
    return BillingInstructionTypeFromJSONTyped(json, false);
}

export function BillingInstructionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BillingInstructionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'billingCode': !exists(json, 'billingCode') ? undefined : json['billingCode'],
        'desc': !exists(json, 'desc') ? undefined : json['desc'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'routingInstructionsId': !exists(json, 'routingInstructionsId') ? undefined : json['routingInstructionsId'],
    };
}

export function BillingInstructionTypeToJSON(value?: BillingInstructionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'billingCode': value.billingCode,
        'desc': value.desc,
        'hotelId': value.hotelId,
        'routingInstructionsId': value.routingInstructionsId,
    };
}

