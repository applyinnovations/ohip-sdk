/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  ExternalProfiles,
  FetchPlayerStatisticsRS,
  GamingOffers,
  IataNumberDetails,
  Profile,
  ValidateMembershipNumber,
  ValidatedAddress,
  ValidatedAddresses,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ExternalProfilesFromJSON,
    ExternalProfilesToJSON,
    FetchPlayerStatisticsRSFromJSON,
    FetchPlayerStatisticsRSToJSON,
    GamingOffersFromJSON,
    GamingOffersToJSON,
    IataNumberDetailsFromJSON,
    IataNumberDetailsToJSON,
    ProfileFromJSON,
    ProfileToJSON,
    ValidateMembershipNumberFromJSON,
    ValidateMembershipNumberToJSON,
    ValidatedAddressFromJSON,
    ValidatedAddressToJSON,
    ValidatedAddressesFromJSON,
    ValidatedAddressesToJSON,
} from '../models/index';

export interface CheckIataNumberRequest {
    iataNumber?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xTransactionId?: string;
    acceptLanguage?: string;
}

export interface DownloadExternalProfileRequest {
    extSystemCode?: string;
    chainCode?: string;
    profileExternalId?: string;
    authorization?: string;
    xAppKey?: string;
    externalDatabaseId?: string;
    hotelId?: string;
    xTransactionId?: string;
    acceptLanguage?: string;
}

export interface GetExternalProfilesRequest {
    extSystemCode?: string;
    chainCode?: string;
    authorization?: string;
    xAppKey?: string;
    externalDatabaseId?: string;
    hotelId?: string;
    profileType?: GetExternalProfilesProfileTypeEnum;
    profileId?: Array<string>;
    profileIdType?: Array<string>;
    name?: string;
    givenName?: string;
    city?: string;
    postalCode?: string;
    state?: string;
    countryCode?: string;
    keyword?: string;
    communication?: string;
    membershipNumber?: string;
    membershipType?: string;
    arNumber?: string;
    birthDate?: Date;
    acceptLanguage?: string;
}

export interface GetGamingOffersRequest {
    membershipNo?: string;
    extSystemCode?: string;
    authorization?: string;
    xAppKey?: string;
    hotelId?: string;
    startDate?: Date;
    endDate?: Date;
    acceptLanguage?: string;
}

export interface GetPlayerStatisticsRequest {
    profileId?: string;
    extSystemCode?: string;
    authorization?: string;
    xAppKey?: string;
    playerId?: string;
    hotelId?: string;
    reservationId?: string;
    reservationIdContext?: string;
    reservationIdType?: string;
    acceptLanguage?: string;
}

export interface GetValidatedAddressRequest {
    externalAddressId?: string;
    authorization?: string;
    xAppKey?: string;
    timeoutSeconds?: number;
    acceptLanguage?: string;
}

export interface GetValidatedAddressesRequest {
    addressText?: string;
    country?: string;
    authorization?: string;
    xAppKey?: string;
    language?: string;
    timeoutSeconds?: number;
    acceptLanguage?: string;
}

export interface ValidateMembershipNumberRequest {
    chainCode?: string;
    extSystemCode?: string;
    membershipNo?: string;
    membershipType?: string;
    authorization?: string;
    xAppKey?: string;
    hotelId?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ProfileExternalApi extends runtime.BaseAPI {

    /**
     * This API will validate and check an IATA number. <p><strong>OperationId:</strong>checkIataNumber</p>
     * Validate IATA number.
     */
    async checkIataNumberRaw(requestParameters: CheckIataNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IataNumberDetails>> {
        if (requestParameters.iataNumber === null || requestParameters.iataNumber === undefined) {
            throw new runtime.RequiredError('iataNumber','Required parameter requestParameters.iataNumber was null or undefined when calling checkIataNumber.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling checkIataNumber.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling checkIataNumber.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling checkIataNumber.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xTransactionId !== undefined && requestParameters.xTransactionId !== null) {
            headerParameters['x-transactionId'] = String(requestParameters.xTransactionId);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/travelAgents/{iataNumber}`.replace(`{${"iataNumber"}}`, encodeURIComponent(String(requestParameters.iataNumber))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IataNumberDetailsFromJSON(jsonValue));
    }

    /**
     * This API will validate and check an IATA number. <p><strong>OperationId:</strong>checkIataNumber</p>
     * Validate IATA number.
     */
    async checkIataNumber(requestParameters: CheckIataNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IataNumberDetails> {
        const response = await this.checkIataNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * After searching for profiles in an external system using getExternalProfiles, proceed to use this API knowing the external profile ID in the path.  The result will be a new profile created in OPERA. <p><strong>OperationId:</strong>downloadExternalProfile</p>
     * Download a Profile from external system
     */
    async downloadExternalProfileRaw(requestParameters: DownloadExternalProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Profile>> {
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling downloadExternalProfile.');
        }

        if (requestParameters.chainCode === null || requestParameters.chainCode === undefined) {
            throw new runtime.RequiredError('chainCode','Required parameter requestParameters.chainCode was null or undefined when calling downloadExternalProfile.');
        }

        if (requestParameters.profileExternalId === null || requestParameters.profileExternalId === undefined) {
            throw new runtime.RequiredError('profileExternalId','Required parameter requestParameters.profileExternalId was null or undefined when calling downloadExternalProfile.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling downloadExternalProfile.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling downloadExternalProfile.');
        }

        const queryParameters: any = {};

        if (requestParameters.externalDatabaseId !== undefined) {
            queryParameters['externalDatabaseId'] = requestParameters.externalDatabaseId;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xTransactionId !== undefined && requestParameters.xTransactionId !== null) {
            headerParameters['x-transactionId'] = String(requestParameters.xTransactionId);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/chains/{chainCode}/externalProfiles/{profileExternalId}`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))).replace(`{${"profileExternalId"}}`, encodeURIComponent(String(requestParameters.profileExternalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileFromJSON(jsonValue));
    }

    /**
     * After searching for profiles in an external system using getExternalProfiles, proceed to use this API knowing the external profile ID in the path.  The result will be a new profile created in OPERA. <p><strong>OperationId:</strong>downloadExternalProfile</p>
     * Download a Profile from external system
     */
    async downloadExternalProfile(requestParameters: DownloadExternalProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Profile> {
        const response = await this.downloadExternalProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you want to search for profiles in an external system. The response will include a list of profiles that exist in the external system, based on your search criteria.  For example, you want to see if the external system has a profile for Mr David Smith.  The GET API will send a request to external system, and the response will include a list of any profiles that exist for Mr Davis Smith in that system.  If a profile does exist, and the user would like to \'download\' that profile into OPERA, you would then proceed to use the downlodExternalProfiles API.
     * Retrieve profiles from external system
     */
    async getExternalProfilesRaw(requestParameters: GetExternalProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExternalProfiles>> {
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getExternalProfiles.');
        }

        if (requestParameters.chainCode === null || requestParameters.chainCode === undefined) {
            throw new runtime.RequiredError('chainCode','Required parameter requestParameters.chainCode was null or undefined when calling getExternalProfiles.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getExternalProfiles.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getExternalProfiles.');
        }

        const queryParameters: any = {};

        if (requestParameters.externalDatabaseId !== undefined) {
            queryParameters['externalDatabaseId'] = requestParameters.externalDatabaseId;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.profileType !== undefined) {
            queryParameters['profileType'] = requestParameters.profileType;
        }

        if (requestParameters.profileId) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileIdType) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.city !== undefined) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.postalCode !== undefined) {
            queryParameters['postalCode'] = requestParameters.postalCode;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        if (requestParameters.communication !== undefined) {
            queryParameters['communication'] = requestParameters.communication;
        }

        if (requestParameters.membershipNumber !== undefined) {
            queryParameters['membershipNumber'] = requestParameters.membershipNumber;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.arNumber !== undefined) {
            queryParameters['arNumber'] = requestParameters.arNumber;
        }

        if (requestParameters.birthDate !== undefined) {
            queryParameters['birthDate'] = (requestParameters.birthDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/chains/{chainCode}/externalProfiles`.replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExternalProfilesFromJSON(jsonValue));
    }

    /**
     * Use this API when you want to search for profiles in an external system. The response will include a list of profiles that exist in the external system, based on your search criteria.  For example, you want to see if the external system has a profile for Mr David Smith.  The GET API will send a request to external system, and the response will include a list of any profiles that exist for Mr Davis Smith in that system.  If a profile does exist, and the user would like to \'download\' that profile into OPERA, you would then proceed to use the downlodExternalProfiles API.
     * Retrieve profiles from external system
     */
    async getExternalProfiles(requestParameters: GetExternalProfilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExternalProfiles> {
        const response = await this.getExternalProfilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you have a guest profile and you want to get the offers available from an external system. <p><strong>OperationId:</strong>getGamingOffers</p>
     * Get offers that can be attached for a profile
     */
    async getGamingOffersRaw(requestParameters: GetGamingOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GamingOffers>> {
        if (requestParameters.membershipNo === null || requestParameters.membershipNo === undefined) {
            throw new runtime.RequiredError('membershipNo','Required parameter requestParameters.membershipNo was null or undefined when calling getGamingOffers.');
        }

        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getGamingOffers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGamingOffers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGamingOffers.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/gamingOffers/{membershipNo}`.replace(`{${"membershipNo"}}`, encodeURIComponent(String(requestParameters.membershipNo))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GamingOffersFromJSON(jsonValue));
    }

    /**
     * Use this API when you have a guest profile and you want to get the offers available from an external system. <p><strong>OperationId:</strong>getGamingOffers</p>
     * Get offers that can be attached for a profile
     */
    async getGamingOffers(requestParameters: GetGamingOffersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GamingOffers> {
        const response = await this.getGamingOffersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request for the fetch player statistics WS operation <p><strong>OperationId:</strong>getPlayerStatistics</p>
     * Retrieve player statistics
     */
    async getPlayerStatisticsRaw(requestParameters: GetPlayerStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchPlayerStatisticsRS>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getPlayerStatistics.');
        }

        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getPlayerStatistics.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPlayerStatistics.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPlayerStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.playerId !== undefined) {
            queryParameters['playerId'] = requestParameters.playerId;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdContext !== undefined) {
            queryParameters['reservationIdContext'] = requestParameters.reservationIdContext;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/playerStatistics/{profileId}`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchPlayerStatisticsRSFromJSON(jsonValue));
    }

    /**
     * Request for the fetch player statistics WS operation <p><strong>OperationId:</strong>getPlayerStatistics</p>
     * Retrieve player statistics
     */
    async getPlayerStatistics(requestParameters: GetPlayerStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchPlayerStatisticsRS> {
        const response = await this.getPlayerStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you want to fetch full address information for a given address Id. <p><strong>OperationId:</strong>getValidatedAddress</p>
     * Get full Address information from third party system for a given external Address ID. The external Address ID is fetched from valdatedAddresses service.
     */
    async getValidatedAddressRaw(requestParameters: GetValidatedAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatedAddress>> {
        if (requestParameters.externalAddressId === null || requestParameters.externalAddressId === undefined) {
            throw new runtime.RequiredError('externalAddressId','Required parameter requestParameters.externalAddressId was null or undefined when calling getValidatedAddress.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getValidatedAddress.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getValidatedAddress.');
        }

        const queryParameters: any = {};

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/validatedAddresses/{externalAddressId}`.replace(`{${"externalAddressId"}}`, encodeURIComponent(String(requestParameters.externalAddressId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatedAddressFromJSON(jsonValue));
    }

    /**
     * Use this API when you want to fetch full address information for a given address Id. <p><strong>OperationId:</strong>getValidatedAddress</p>
     * Get full Address information from third party system for a given external Address ID. The external Address ID is fetched from valdatedAddresses service.
     */
    async getValidatedAddress(requestParameters: GetValidatedAddressRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatedAddress> {
        const response = await this.getValidatedAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you want to validate address from a third party vendor. The response will be a list of addresses with its address ID based on the search criteria. <p><strong>OperationId:</strong>getValidatedAddresses</p>
     * Retrive valid addresses from a third party vendor.
     */
    async getValidatedAddressesRaw(requestParameters: GetValidatedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidatedAddresses>> {
        if (requestParameters.addressText === null || requestParameters.addressText === undefined) {
            throw new runtime.RequiredError('addressText','Required parameter requestParameters.addressText was null or undefined when calling getValidatedAddresses.');
        }

        if (requestParameters.country === null || requestParameters.country === undefined) {
            throw new runtime.RequiredError('country','Required parameter requestParameters.country was null or undefined when calling getValidatedAddresses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getValidatedAddresses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getValidatedAddresses.');
        }

        const queryParameters: any = {};

        if (requestParameters.addressText !== undefined) {
            queryParameters['addressText'] = requestParameters.addressText;
        }

        if (requestParameters.country !== undefined) {
            queryParameters['country'] = requestParameters.country;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/validatedAddresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatedAddressesFromJSON(jsonValue));
    }

    /**
     * Use this API when you want to validate address from a third party vendor. The response will be a list of addresses with its address ID based on the search criteria. <p><strong>OperationId:</strong>getValidatedAddresses</p>
     * Retrive valid addresses from a third party vendor.
     */
    async getValidatedAddresses(requestParameters: GetValidatedAddressesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidatedAddresses> {
        const response = await this.getValidatedAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API when you want to validate membership numbers from external system. <p><strong>OperationId:</strong>validateMembershipNumber</p>
     * Validate Membership Number attached to a membership
     */
    async validateMembershipNumberRaw(requestParameters: ValidateMembershipNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ValidateMembershipNumber>> {
        if (requestParameters.chainCode === null || requestParameters.chainCode === undefined) {
            throw new runtime.RequiredError('chainCode','Required parameter requestParameters.chainCode was null or undefined when calling validateMembershipNumber.');
        }

        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling validateMembershipNumber.');
        }

        if (requestParameters.membershipNo === null || requestParameters.membershipNo === undefined) {
            throw new runtime.RequiredError('membershipNo','Required parameter requestParameters.membershipNo was null or undefined when calling validateMembershipNumber.');
        }

        if (requestParameters.membershipType === null || requestParameters.membershipType === undefined) {
            throw new runtime.RequiredError('membershipType','Required parameter requestParameters.membershipType was null or undefined when calling validateMembershipNumber.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling validateMembershipNumber.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling validateMembershipNumber.');
        }

        const queryParameters: any = {};

        if (requestParameters.membershipNo !== undefined) {
            queryParameters['membershipNo'] = requestParameters.membershipNo;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/chains/{chainCode}/validateMembershipNumber`.replace(`{${"chainCode"}}`, encodeURIComponent(String(requestParameters.chainCode))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidateMembershipNumberFromJSON(jsonValue));
    }

    /**
     * Use this API when you want to validate membership numbers from external system. <p><strong>OperationId:</strong>validateMembershipNumber</p>
     * Validate Membership Number attached to a membership
     */
    async validateMembershipNumber(requestParameters: ValidateMembershipNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ValidateMembershipNumber> {
        const response = await this.validateMembershipNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetExternalProfilesProfileTypeEnum = {
    Guest: 'Guest',
    Agent: 'Agent',
    Company: 'Company',
    Group: 'Group',
    Source: 'Source',
    Employee: 'Employee',
    Hotel: 'Hotel',
    Vendor: 'Vendor',
    Contact: 'Contact',
    Purge: 'Purge',
    BusinessHeader: 'BusinessHeader',
    BillingAccount: 'BillingAccount',
    Activity: 'Activity',
    Potential: 'Potential',
    Account: 'Account'
} as const;
export type GetExternalProfilesProfileTypeEnum = typeof GetExternalProfilesProfileTypeEnum[keyof typeof GetExternalProfilesProfileTypeEnum];
