/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';
import type { MembershipTransactionExceptionComputePointsType } from './MembershipTransactionExceptionComputePointsType';
import {
    MembershipTransactionExceptionComputePointsTypeFromJSON,
    MembershipTransactionExceptionComputePointsTypeFromJSONTyped,
    MembershipTransactionExceptionComputePointsTypeToJSON,
} from './MembershipTransactionExceptionComputePointsType';
import type { MembershipTransactionId } from './MembershipTransactionId';
import {
    MembershipTransactionIdFromJSON,
    MembershipTransactionIdFromJSONTyped,
    MembershipTransactionIdToJSON,
} from './MembershipTransactionId';
import type { MembershipTransactionTierPointsType } from './MembershipTransactionTierPointsType';
import {
    MembershipTransactionTierPointsTypeFromJSON,
    MembershipTransactionTierPointsTypeFromJSONTyped,
    MembershipTransactionTierPointsTypeToJSON,
} from './MembershipTransactionTierPointsType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Details about a membership like ProfileID, Card Number, Type, Level, etc.
 * @export
 * @interface MembershipTransactionExceptionType
 */
export interface MembershipTransactionExceptionType {
    /**
     * 
     * @type {ProfileId}
     * @memberof MembershipTransactionExceptionType
     */
    profileId?: ProfileId;
    /**
     * The profile name associated with this membership.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    name?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof MembershipTransactionExceptionType
     */
    membershipId?: UniqueIDType;
    /**
     * The card number associated with this membership.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    membershipCardNo?: string;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof MembershipTransactionExceptionType
     */
    membershipType?: CodeDescriptionType;
    /**
     * The current level of the membership.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    membershipLevel?: string;
    /**
     * Date when the member enrolled for the membership.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    joinedDate?: string;
    /**
     * Membership card expiration date.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    cardExpirationDate?: string;
    /**
     * 
     * @type {MembershipTransactionId}
     * @memberof MembershipTransactionExceptionType
     */
    membershipTransactionId?: MembershipTransactionId;
    /**
     * Hotel code of the membership transaction exceptions.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    hotelId?: string;
    /**
     * 
     * @type {DateRangeType}
     * @memberof MembershipTransactionExceptionType
     */
    fromToRangeDate?: DateRangeType;
    /**
     * Any reference like reservation no etc against which the certificate was consumed.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    reservationNumber?: string;
    /**
     * If multiple room membership transaction exceptions occurred, the number of rooms booked.(MR)
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    roomsBooked?: number;
    /**
     * Indicates if back to back membership transaction exceptions have occurred or not.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    backToBack?: string;
    /**
     * The average rate of the stay.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    averageRate?: number;
    /**
     * Tier stay points associated with this membership points transaction.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    tierStays?: number;
    /**
     * Award points associated with this membership points transaction.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    totalAwardPoints?: number;
    /**
     * Tier night points associated with this membership points transaction.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    totalNights?: number;
    /**
     * Tier revenue points associated with this membership points transaction.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    totalRevenue?: number;
    /**
     * Points Calculated value(Y/N) for the selected transaction.
     * @type {boolean}
     * @memberof MembershipTransactionExceptionType
     */
    pointsCalculate?: boolean;
    /**
     * Notes regarding the resolution of the membership transaction exception or for any other reason.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    userNotes?: string;
    /**
     * The systems records and notes identifying the exception criteria.
     * @type {string}
     * @memberof MembershipTransactionExceptionType
     */
    processingMessages?: string;
    /**
     * The total number of award points associated with this transaction.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    totalPoints?: number;
    /**
     * The total number of base award points for this membership points transaction.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    awardBasePoints?: number;
    /**
     * Indicates if this transaction involves bonus points, The total number of bonus points.
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    awardBonusPoints?: number;
    /**
     * 
     * @type {MembershipTransactionTierPointsType}
     * @memberof MembershipTransactionExceptionType
     */
    tierPoints?: MembershipTransactionTierPointsType;
    /**
     * 
     * @type {MembershipTransactionExceptionComputePointsType}
     * @memberof MembershipTransactionExceptionType
     */
    computedPoints?: MembershipTransactionExceptionComputePointsType;
    /**
     * Indicates the type of Exception like Exception not resolved,Points Rejected on Exception etc.,
     * @type {number}
     * @memberof MembershipTransactionExceptionType
     */
    exceptionType?: number;
}

/**
 * Check if a given object implements the MembershipTransactionExceptionType interface.
 */
export function instanceOfMembershipTransactionExceptionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipTransactionExceptionTypeFromJSON(json: any): MembershipTransactionExceptionType {
    return MembershipTransactionExceptionTypeFromJSONTyped(json, false);
}

export function MembershipTransactionExceptionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipTransactionExceptionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'membershipId': !exists(json, 'membershipId') ? undefined : UniqueIDTypeFromJSON(json['membershipId']),
        'membershipCardNo': !exists(json, 'membershipCardNo') ? undefined : json['membershipCardNo'],
        'membershipType': !exists(json, 'membershipType') ? undefined : CodeDescriptionTypeFromJSON(json['membershipType']),
        'membershipLevel': !exists(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'joinedDate': !exists(json, 'joinedDate') ? undefined : json['joinedDate'],
        'cardExpirationDate': !exists(json, 'cardExpirationDate') ? undefined : json['cardExpirationDate'],
        'membershipTransactionId': !exists(json, 'membershipTransactionId') ? undefined : MembershipTransactionIdFromJSON(json['membershipTransactionId']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'fromToRangeDate': !exists(json, 'fromToRangeDate') ? undefined : DateRangeTypeFromJSON(json['fromToRangeDate']),
        'reservationNumber': !exists(json, 'reservationNumber') ? undefined : json['reservationNumber'],
        'roomsBooked': !exists(json, 'roomsBooked') ? undefined : json['roomsBooked'],
        'backToBack': !exists(json, 'backToBack') ? undefined : json['backToBack'],
        'averageRate': !exists(json, 'averageRate') ? undefined : json['averageRate'],
        'tierStays': !exists(json, 'tierStays') ? undefined : json['tierStays'],
        'totalAwardPoints': !exists(json, 'totalAwardPoints') ? undefined : json['totalAwardPoints'],
        'totalNights': !exists(json, 'totalNights') ? undefined : json['totalNights'],
        'totalRevenue': !exists(json, 'totalRevenue') ? undefined : json['totalRevenue'],
        'pointsCalculate': !exists(json, 'pointsCalculate') ? undefined : json['pointsCalculate'],
        'userNotes': !exists(json, 'userNotes') ? undefined : json['userNotes'],
        'processingMessages': !exists(json, 'processingMessages') ? undefined : json['processingMessages'],
        'totalPoints': !exists(json, 'totalPoints') ? undefined : json['totalPoints'],
        'awardBasePoints': !exists(json, 'awardBasePoints') ? undefined : json['awardBasePoints'],
        'awardBonusPoints': !exists(json, 'awardBonusPoints') ? undefined : json['awardBonusPoints'],
        'tierPoints': !exists(json, 'tierPoints') ? undefined : MembershipTransactionTierPointsTypeFromJSON(json['tierPoints']),
        'computedPoints': !exists(json, 'computedPoints') ? undefined : MembershipTransactionExceptionComputePointsTypeFromJSON(json['computedPoints']),
        'exceptionType': !exists(json, 'exceptionType') ? undefined : json['exceptionType'],
    };
}

export function MembershipTransactionExceptionTypeToJSON(value?: MembershipTransactionExceptionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profileId': ProfileIdToJSON(value.profileId),
        'name': value.name,
        'membershipId': UniqueIDTypeToJSON(value.membershipId),
        'membershipCardNo': value.membershipCardNo,
        'membershipType': CodeDescriptionTypeToJSON(value.membershipType),
        'membershipLevel': value.membershipLevel,
        'joinedDate': value.joinedDate,
        'cardExpirationDate': value.cardExpirationDate,
        'membershipTransactionId': MembershipTransactionIdToJSON(value.membershipTransactionId),
        'hotelId': value.hotelId,
        'fromToRangeDate': DateRangeTypeToJSON(value.fromToRangeDate),
        'reservationNumber': value.reservationNumber,
        'roomsBooked': value.roomsBooked,
        'backToBack': value.backToBack,
        'averageRate': value.averageRate,
        'tierStays': value.tierStays,
        'totalAwardPoints': value.totalAwardPoints,
        'totalNights': value.totalNights,
        'totalRevenue': value.totalRevenue,
        'pointsCalculate': value.pointsCalculate,
        'userNotes': value.userNotes,
        'processingMessages': value.processingMessages,
        'totalPoints': value.totalPoints,
        'awardBasePoints': value.awardBasePoints,
        'awardBonusPoints': value.awardBonusPoints,
        'tierPoints': MembershipTransactionTierPointsTypeToJSON(value.tierPoints),
        'computedPoints': MembershipTransactionExceptionComputePointsTypeToJSON(value.computedPoints),
        'exceptionType': value.exceptionType,
    };
}

