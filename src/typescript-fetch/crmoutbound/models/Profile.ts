/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { ProfileIdList } from './ProfileIdList';
import {
    ProfileIdListFromJSON,
    ProfileIdListFromJSONTyped,
    ProfileIdListToJSON,
} from './ProfileIdList';
import type { ProfileType } from './ProfileType';
import {
    ProfileTypeFromJSON,
    ProfileTypeFromJSONTyped,
    ProfileTypeToJSON,
} from './ProfileType';

/**
 * Object for creation of profiles. This object contains profile details with unique identifiers for each profile.
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {ProfileIdList}
     * @memberof Profile
     */
    profileIdList?: ProfileIdList;
    /**
     * 
     * @type {ProfileType}
     * @memberof Profile
     */
    profileDetails?: ProfileType;
    /**
     * 
     * @type {Links}
     * @memberof Profile
     */
    links?: Links;
}

/**
 * Check if a given object implements the Profile interface.
 */
export function instanceOfProfile(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ProfileFromJSON(json: any): Profile {
    return ProfileFromJSONTyped(json, false);
}

export function ProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): Profile {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'profileIdList': !exists(json, 'profileIdList') ? undefined : ProfileIdListFromJSON(json['profileIdList']),
        'profileDetails': !exists(json, 'profileDetails') ? undefined : ProfileTypeFromJSON(json['profileDetails']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
    };
}

export function ProfileToJSON(value?: Profile | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'profileIdList': ProfileIdListToJSON(value.profileIdList),
        'profileDetails': ProfileTypeToJSON(value.profileDetails),
        'links': LinksToJSON(value.links),
    };
}

