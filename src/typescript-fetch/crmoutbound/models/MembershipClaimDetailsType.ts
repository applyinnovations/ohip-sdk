/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ClaimActivityLogListType } from './ClaimActivityLogListType';
import {
    ClaimActivityLogListTypeFromJSON,
    ClaimActivityLogListTypeFromJSONTyped,
    ClaimActivityLogListTypeToJSON,
} from './ClaimActivityLogListType';
import type { ClaimAdjustmentPointsType } from './ClaimAdjustmentPointsType';
import {
    ClaimAdjustmentPointsTypeFromJSON,
    ClaimAdjustmentPointsTypeFromJSONTyped,
    ClaimAdjustmentPointsTypeToJSON,
} from './ClaimAdjustmentPointsType';
import type { ClaimApprovalStatusType } from './ClaimApprovalStatusType';
import {
    ClaimApprovalStatusTypeFromJSON,
    ClaimApprovalStatusTypeFromJSONTyped,
    ClaimApprovalStatusTypeToJSON,
} from './ClaimApprovalStatusType';
import type { ClaimMembershipType } from './ClaimMembershipType';
import {
    ClaimMembershipTypeFromJSON,
    ClaimMembershipTypeFromJSONTyped,
    ClaimMembershipTypeToJSON,
} from './ClaimMembershipType';
import type { ClaimRecordType } from './ClaimRecordType';
import {
    ClaimRecordTypeFromJSON,
    ClaimRecordTypeFromJSONTyped,
    ClaimRecordTypeToJSON,
} from './ClaimRecordType';
import type { ClaimReservationInfoType } from './ClaimReservationInfoType';
import {
    ClaimReservationInfoTypeFromJSON,
    ClaimReservationInfoTypeFromJSONTyped,
    ClaimReservationInfoTypeToJSON,
} from './ClaimReservationInfoType';
import type { ClaimSourceType } from './ClaimSourceType';
import {
    ClaimSourceTypeFromJSON,
    ClaimSourceTypeFromJSONTyped,
    ClaimSourceTypeToJSON,
} from './ClaimSourceType';
import type { ProfileId } from './ProfileId';
import {
    ProfileIdFromJSON,
    ProfileIdFromJSONTyped,
    ProfileIdToJSON,
} from './ProfileId';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Detailed information of a claim.
 * @export
 * @interface MembershipClaimDetailsType
 */
export interface MembershipClaimDetailsType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof MembershipClaimDetailsType
     */
    claimNo?: UniqueIDType;
    /**
     * Date the claim was made.
     * @type {Date}
     * @memberof MembershipClaimDetailsType
     */
    claimDate?: Date;
    /**
     * If the status is closed, the date the claim was closed.
     * @type {Date}
     * @memberof MembershipClaimDetailsType
     */
    closeDate?: Date;
    /**
     * 
     * @type {ClaimSourceType}
     * @memberof MembershipClaimDetailsType
     */
    source?: ClaimSourceType;
    /**
     * Name of the person placing the claim. This name may be different from the name on the membership card.
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    callerName?: string;
    /**
     * User who is assigned to handle this claim.
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    owner?: string;
    /**
     * Status of the claim.(Open, Closed, Pending Review, Waiting for Manager, etc.)
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    claimStatus?: string;
    /**
     * Type of user-definable claim such as New Card, Stay, etc.
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    claimType?: string;
    /**
     * Origin of the membership claim. User definable values like Email, Fax, Phone Call, etc.
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    origin?: string;
    /**
     * More information related to call that help to resolve the claim..
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    callerInformation?: string;
    /**
     * The date, if any, by which a response to the caller was promised.
     * @type {Date}
     * @memberof MembershipClaimDetailsType
     */
    replyBy?: Date;
    /**
     * Additional comments or steps taken to resolve the claim..
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    comments?: string;
    /**
     * 
     * @type {ClaimApprovalStatusType}
     * @memberof MembershipClaimDetailsType
     */
    approvalStatus?: ClaimApprovalStatusType;
    /**
     * 
     * @type {ClaimRecordType}
     * @memberof MembershipClaimDetailsType
     */
    recordType?: ClaimRecordType;
    /**
     * 
     * @type {ProfileId}
     * @memberof MembershipClaimDetailsType
     */
    profileId?: ProfileId;
    /**
     * 
     * @type {ClaimMembershipType}
     * @memberof MembershipClaimDetailsType
     */
    membership?: ClaimMembershipType;
    /**
     * 
     * @type {ClaimReservationInfoType}
     * @memberof MembershipClaimDetailsType
     */
    reservation?: ClaimReservationInfoType;
    /**
     * 
     * @type {ClaimAdjustmentPointsType}
     * @memberof MembershipClaimDetailsType
     */
    claimPoints?: ClaimAdjustmentPointsType;
    /**
     * 
     * @type {ClaimActivityLogListType}
     * @memberof MembershipClaimDetailsType
     */
    activityLog?: ClaimActivityLogListType;
    /**
     * User who entered this claim.
     * @type {string}
     * @memberof MembershipClaimDetailsType
     */
    submitter?: string;
}

/**
 * Check if a given object implements the MembershipClaimDetailsType interface.
 */
export function instanceOfMembershipClaimDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MembershipClaimDetailsTypeFromJSON(json: any): MembershipClaimDetailsType {
    return MembershipClaimDetailsTypeFromJSONTyped(json, false);
}

export function MembershipClaimDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MembershipClaimDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'claimNo': !exists(json, 'claimNo') ? undefined : UniqueIDTypeFromJSON(json['claimNo']),
        'claimDate': !exists(json, 'claimDate') ? undefined : (new Date(json['claimDate'])),
        'closeDate': !exists(json, 'closeDate') ? undefined : (new Date(json['closeDate'])),
        'source': !exists(json, 'source') ? undefined : ClaimSourceTypeFromJSON(json['source']),
        'callerName': !exists(json, 'callerName') ? undefined : json['callerName'],
        'owner': !exists(json, 'owner') ? undefined : json['owner'],
        'claimStatus': !exists(json, 'claimStatus') ? undefined : json['claimStatus'],
        'claimType': !exists(json, 'claimType') ? undefined : json['claimType'],
        'origin': !exists(json, 'origin') ? undefined : json['origin'],
        'callerInformation': !exists(json, 'callerInformation') ? undefined : json['callerInformation'],
        'replyBy': !exists(json, 'replyBy') ? undefined : (new Date(json['replyBy'])),
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'approvalStatus': !exists(json, 'approvalStatus') ? undefined : ClaimApprovalStatusTypeFromJSON(json['approvalStatus']),
        'recordType': !exists(json, 'recordType') ? undefined : ClaimRecordTypeFromJSON(json['recordType']),
        'profileId': !exists(json, 'profileId') ? undefined : ProfileIdFromJSON(json['profileId']),
        'membership': !exists(json, 'membership') ? undefined : ClaimMembershipTypeFromJSON(json['membership']),
        'reservation': !exists(json, 'reservation') ? undefined : ClaimReservationInfoTypeFromJSON(json['reservation']),
        'claimPoints': !exists(json, 'claimPoints') ? undefined : ClaimAdjustmentPointsTypeFromJSON(json['claimPoints']),
        'activityLog': !exists(json, 'activityLog') ? undefined : ClaimActivityLogListTypeFromJSON(json['activityLog']),
        'submitter': !exists(json, 'submitter') ? undefined : json['submitter'],
    };
}

export function MembershipClaimDetailsTypeToJSON(value?: MembershipClaimDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'claimNo': UniqueIDTypeToJSON(value.claimNo),
        'claimDate': value.claimDate === undefined ? undefined : (value.claimDate.toISOString().substring(0,10)),
        'closeDate': value.closeDate === undefined ? undefined : (value.closeDate.toISOString().substring(0,10)),
        'source': ClaimSourceTypeToJSON(value.source),
        'callerName': value.callerName,
        'owner': value.owner,
        'claimStatus': value.claimStatus,
        'claimType': value.claimType,
        'origin': value.origin,
        'callerInformation': value.callerInformation,
        'replyBy': value.replyBy === undefined ? undefined : (value.replyBy.toISOString().substring(0,10)),
        'comments': value.comments,
        'approvalStatus': ClaimApprovalStatusTypeToJSON(value.approvalStatus),
        'recordType': ClaimRecordTypeToJSON(value.recordType),
        'profileId': ProfileIdToJSON(value.profileId),
        'membership': ClaimMembershipTypeToJSON(value.membership),
        'reservation': ClaimReservationInfoTypeToJSON(value.reservation),
        'claimPoints': ClaimAdjustmentPointsTypeToJSON(value.claimPoints),
        'activityLog': ClaimActivityLogListTypeToJSON(value.activityLog),
        'submitter': value.submitter,
    };
}

