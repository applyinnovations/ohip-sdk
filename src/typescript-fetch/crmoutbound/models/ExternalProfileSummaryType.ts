/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Customer Relationship Management Outbound API
 * APIs to cater for Customer Relationship Management external (outbound) functionality with OPERA. These APIs facilitate various operations related to getting data from an external system, and inserting it into OPERA.<br /><br /> Compatible with OPERA Cloud release 20.99.99.99.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 20.99.99.99
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddressInfoType } from './AddressInfoType';
import {
    AddressInfoTypeFromJSON,
    AddressInfoTypeFromJSONTyped,
    AddressInfoTypeToJSON,
} from './AddressInfoType';
import type { EmailInfoType } from './EmailInfoType';
import {
    EmailInfoTypeFromJSON,
    EmailInfoTypeFromJSONTyped,
    EmailInfoTypeToJSON,
} from './EmailInfoType';
import type { ExternalProfileSummaryTypeFormerName } from './ExternalProfileSummaryTypeFormerName';
import {
    ExternalProfileSummaryTypeFormerNameFromJSON,
    ExternalProfileSummaryTypeFormerNameFromJSONTyped,
    ExternalProfileSummaryTypeFormerNameToJSON,
} from './ExternalProfileSummaryTypeFormerName';
import type { OwnerType } from './OwnerType';
import {
    OwnerTypeFromJSON,
    OwnerTypeFromJSONTyped,
    OwnerTypeToJSON,
} from './OwnerType';
import type { ProfileMembershipType } from './ProfileMembershipType';
import {
    ProfileMembershipTypeFromJSON,
    ProfileMembershipTypeFromJSONTyped,
    ProfileMembershipTypeToJSON,
} from './ProfileMembershipType';
import type { ProfileStatusType } from './ProfileStatusType';
import {
    ProfileStatusTypeFromJSON,
    ProfileStatusTypeFromJSONTyped,
    ProfileStatusTypeToJSON,
} from './ProfileStatusType';
import type { ProfileTypeType } from './ProfileTypeType';
import {
    ProfileTypeTypeFromJSON,
    ProfileTypeTypeFromJSONTyped,
    ProfileTypeTypeToJSON,
} from './ProfileTypeType';
import type { TelephoneInfoType } from './TelephoneInfoType';
import {
    TelephoneInfoTypeFromJSON,
    TelephoneInfoTypeFromJSONTyped,
    TelephoneInfoTypeToJSON,
} from './TelephoneInfoType';
import type { URLInfoType } from './URLInfoType';
import {
    URLInfoTypeFromJSON,
    URLInfoTypeFromJSONTyped,
    URLInfoTypeToJSON,
} from './URLInfoType';

/**
 * Type provides the basic information about the external profile.
 * @export
 * @interface ExternalProfileSummaryType
 */
export interface ExternalProfileSummaryType {
    /**
     * 
     * @type {ExternalProfileSummaryTypeFormerName}
     * @memberof ExternalProfileSummaryType
     */
    formerName?: ExternalProfileSummaryTypeFormerName;
    /**
     * 
     * @type {AddressInfoType}
     * @memberof ExternalProfileSummaryType
     */
    addressInfo?: AddressInfoType;
    /**
     * 
     * @type {TelephoneInfoType}
     * @memberof ExternalProfileSummaryType
     */
    telephoneInfo?: TelephoneInfoType;
    /**
     * 
     * @type {EmailInfoType}
     * @memberof ExternalProfileSummaryType
     */
    emailInfo?: EmailInfoType;
    /**
     * 
     * @type {ProfileMembershipType}
     * @memberof ExternalProfileSummaryType
     */
    profileMembership?: ProfileMembershipType;
    /**
     * 
     * @type {URLInfoType}
     * @memberof ExternalProfileSummaryType
     */
    urlInfo?: URLInfoType;
    /**
     * Generic type for a list of owners.
     * @type {Array<OwnerType>}
     * @memberof ExternalProfileSummaryType
     */
    owners?: Array<OwnerType>;
    /**
     * 
     * @type {ProfileTypeType}
     * @memberof ExternalProfileSummaryType
     */
    profileType?: ProfileTypeType;
    /**
     * 
     * @type {ProfileStatusType}
     * @memberof ExternalProfileSummaryType
     */
    statusCode?: ProfileStatusType;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof ExternalProfileSummaryType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof ExternalProfileSummaryType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof ExternalProfileSummaryType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof ExternalProfileSummaryType
     */
    lastModifierId?: string;
    /**
     * Property this profile is registered with.
     * @type {string}
     * @memberof ExternalProfileSummaryType
     */
    registeredProperty?: string;
}

/**
 * Check if a given object implements the ExternalProfileSummaryType interface.
 */
export function instanceOfExternalProfileSummaryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExternalProfileSummaryTypeFromJSON(json: any): ExternalProfileSummaryType {
    return ExternalProfileSummaryTypeFromJSONTyped(json, false);
}

export function ExternalProfileSummaryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalProfileSummaryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'formerName': !exists(json, 'formerName') ? undefined : ExternalProfileSummaryTypeFormerNameFromJSON(json['formerName']),
        'addressInfo': !exists(json, 'addressInfo') ? undefined : AddressInfoTypeFromJSON(json['addressInfo']),
        'telephoneInfo': !exists(json, 'telephoneInfo') ? undefined : TelephoneInfoTypeFromJSON(json['telephoneInfo']),
        'emailInfo': !exists(json, 'emailInfo') ? undefined : EmailInfoTypeFromJSON(json['emailInfo']),
        'profileMembership': !exists(json, 'profileMembership') ? undefined : ProfileMembershipTypeFromJSON(json['profileMembership']),
        'urlInfo': !exists(json, 'urlInfo') ? undefined : URLInfoTypeFromJSON(json['urlInfo']),
        'owners': !exists(json, 'owners') ? undefined : ((json['owners'] as Array<any>).map(OwnerTypeFromJSON)),
        'profileType': !exists(json, 'profileType') ? undefined : ProfileTypeTypeFromJSON(json['profileType']),
        'statusCode': !exists(json, 'statusCode') ? undefined : ProfileStatusTypeFromJSON(json['statusCode']),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'registeredProperty': !exists(json, 'registeredProperty') ? undefined : json['registeredProperty'],
    };
}

export function ExternalProfileSummaryTypeToJSON(value?: ExternalProfileSummaryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'formerName': ExternalProfileSummaryTypeFormerNameToJSON(value.formerName),
        'addressInfo': AddressInfoTypeToJSON(value.addressInfo),
        'telephoneInfo': TelephoneInfoTypeToJSON(value.telephoneInfo),
        'emailInfo': EmailInfoTypeToJSON(value.emailInfo),
        'profileMembership': ProfileMembershipTypeToJSON(value.profileMembership),
        'urlInfo': URLInfoTypeToJSON(value.urlInfo),
        'owners': value.owners === undefined ? undefined : ((value.owners as Array<any>).map(OwnerTypeToJSON)),
        'profileType': ProfileTypeTypeToJSON(value.profileType),
        'statusCode': ProfileStatusTypeToJSON(value.statusCode),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
        'registeredProperty': value.registeredProperty,
    };
}

