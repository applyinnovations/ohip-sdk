/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaseChannelParameterType } from './BaseChannelParameterType';
import {
    BaseChannelParameterTypeFromJSON,
    BaseChannelParameterTypeFromJSONTyped,
    BaseChannelParameterTypeToJSON,
} from './BaseChannelParameterType';
import type { ChannelParameterLevelType } from './ChannelParameterLevelType';
import {
    ChannelParameterLevelTypeFromJSON,
    ChannelParameterLevelTypeFromJSONTyped,
    ChannelParameterLevelTypeToJSON,
} from './ChannelParameterLevelType';
import type { ChannelParameterValueType } from './ChannelParameterValueType';
import {
    ChannelParameterValueTypeFromJSON,
    ChannelParameterValueTypeFromJSONTyped,
    ChannelParameterValueTypeToJSON,
} from './ChannelParameterValueType';

/**
 * Parameters details for the Channel.
 * @export
 * @interface ChannelParameterType
 */
export interface ChannelParameterType {
    /**
     * Hotel code identifying the parameters related to the Hotel.
     * @type {string}
     * @memberof ChannelParameterType
     */
    hotelId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelParameterType
     */
    levelCode?: string;
    /**
     * 
     * @type {ChannelParameterLevelType}
     * @memberof ChannelParameterType
     */
    levelType?: ChannelParameterLevelType;
    /**
     * The Description for the parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterDescription?: string;
    /**
     * The display name for the parameter in the channel.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterDisplay?: string;
    /**
     * Name of the parameter in the channel.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterName?: string;
    /**
     * The type of the parameter, the possible types are P (Parameter), Setting (S).
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterType?: ChannelParameterTypeParameterTypeEnum;
    /**
     * The Value of the parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    parameterValue?: string;
    /**
     * 
     * @type {Array<BaseChannelParameterType>}
     * @memberof ChannelParameterType
     */
    parameters?: Array<BaseChannelParameterType>;
    /**
     * Whether this is a global or property level parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    scope?: ChannelParameterTypeScopeEnum;
    /**
     * Sequence number for displaying the parameter in the channel.
     * @type {number}
     * @memberof ChannelParameterType
     */
    sequence?: number;
    /**
     * Short description for the parameter.
     * @type {string}
     * @memberof ChannelParameterType
     */
    shortDescription?: string;
    /**
     * 
     * @type {ChannelParameterValueType}
     * @memberof ChannelParameterType
     */
    valueType?: ChannelParameterValueType;
}


/**
 * @export
 */
export const ChannelParameterTypeParameterTypeEnum = {
    P: 'P',
    S: 'S'
} as const;
export type ChannelParameterTypeParameterTypeEnum = typeof ChannelParameterTypeParameterTypeEnum[keyof typeof ChannelParameterTypeParameterTypeEnum];

/**
 * @export
 */
export const ChannelParameterTypeScopeEnum = {
    H: 'H',
    P: 'P'
} as const;
export type ChannelParameterTypeScopeEnum = typeof ChannelParameterTypeScopeEnum[keyof typeof ChannelParameterTypeScopeEnum];


/**
 * Check if a given object implements the ChannelParameterType interface.
 */
export function instanceOfChannelParameterType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelParameterTypeFromJSON(json: any): ChannelParameterType {
    return ChannelParameterTypeFromJSONTyped(json, false);
}

export function ChannelParameterTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelParameterType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'levelCode': !exists(json, 'levelCode') ? undefined : json['levelCode'],
        'levelType': !exists(json, 'levelType') ? undefined : ChannelParameterLevelTypeFromJSON(json['levelType']),
        'parameterDescription': !exists(json, 'parameterDescription') ? undefined : json['parameterDescription'],
        'parameterDisplay': !exists(json, 'parameterDisplay') ? undefined : json['parameterDisplay'],
        'parameterName': !exists(json, 'parameterName') ? undefined : json['parameterName'],
        'parameterType': !exists(json, 'parameterType') ? undefined : json['parameterType'],
        'parameterValue': !exists(json, 'parameterValue') ? undefined : json['parameterValue'],
        'parameters': !exists(json, 'parameters') ? undefined : ((json['parameters'] as Array<any>).map(BaseChannelParameterTypeFromJSON)),
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'valueType': !exists(json, 'valueType') ? undefined : ChannelParameterValueTypeFromJSON(json['valueType']),
    };
}

export function ChannelParameterTypeToJSON(value?: ChannelParameterType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'levelCode': value.levelCode,
        'levelType': ChannelParameterLevelTypeToJSON(value.levelType),
        'parameterDescription': value.parameterDescription,
        'parameterDisplay': value.parameterDisplay,
        'parameterName': value.parameterName,
        'parameterType': value.parameterType,
        'parameterValue': value.parameterValue,
        'parameters': value.parameters === undefined ? undefined : ((value.parameters as Array<any>).map(BaseChannelParameterTypeToJSON)),
        'scope': value.scope,
        'sequence': value.sequence,
        'shortDescription': value.shortDescription,
        'valueType': ChannelParameterValueTypeToJSON(value.valueType),
    };
}

