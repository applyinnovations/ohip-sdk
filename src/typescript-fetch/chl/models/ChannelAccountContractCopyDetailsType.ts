/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Channel account contract type to hold account and contract details to copy.
 * @export
 * @interface ChannelAccountContractCopyDetailsType
 */
export interface ChannelAccountContractCopyDetailsType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChannelAccountContractCopyDetailsType
     */
    sourceProfileId?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChannelAccountContractCopyDetailsType
     */
    sourceContractId?: UniqueIDType;
    /**
     * Holds contract No of the new contract to create.
     * @type {string}
     * @memberof ChannelAccountContractCopyDetailsType
     */
    contractNo?: string;
    /**
     * Holds begin date of the new contract.
     * @type {string}
     * @memberof ChannelAccountContractCopyDetailsType
     */
    beginDate?: string;
    /**
     * Holds end date of the new contract.
     * @type {string}
     * @memberof ChannelAccountContractCopyDetailsType
     */
    endDate?: string;
    /**
     * Holds Note for the new contract.
     * @type {string}
     * @memberof ChannelAccountContractCopyDetailsType
     */
    note?: string;
    /**
     * Flag to retain contract No or generate new one.
     * @type {boolean}
     * @memberof ChannelAccountContractCopyDetailsType
     */
    retainContractNo?: boolean;
}

/**
 * Check if a given object implements the ChannelAccountContractCopyDetailsType interface.
 */
export function instanceOfChannelAccountContractCopyDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelAccountContractCopyDetailsTypeFromJSON(json: any): ChannelAccountContractCopyDetailsType {
    return ChannelAccountContractCopyDetailsTypeFromJSONTyped(json, false);
}

export function ChannelAccountContractCopyDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelAccountContractCopyDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sourceProfileId': !exists(json, 'sourceProfileId') ? undefined : UniqueIDTypeFromJSON(json['sourceProfileId']),
        'sourceContractId': !exists(json, 'sourceContractId') ? undefined : UniqueIDTypeFromJSON(json['sourceContractId']),
        'contractNo': !exists(json, 'contractNo') ? undefined : json['contractNo'],
        'beginDate': !exists(json, 'beginDate') ? undefined : json['beginDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'retainContractNo': !exists(json, 'retainContractNo') ? undefined : json['retainContractNo'],
    };
}

export function ChannelAccountContractCopyDetailsTypeToJSON(value?: ChannelAccountContractCopyDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sourceProfileId': UniqueIDTypeToJSON(value.sourceProfileId),
        'sourceContractId': UniqueIDTypeToJSON(value.sourceContractId),
        'contractNo': value.contractNo,
        'beginDate': value.beginDate,
        'endDate': value.endDate,
        'note': value.note,
        'retainContractNo': value.retainContractNo,
    };
}

