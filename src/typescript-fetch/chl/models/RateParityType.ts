/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingChannelInfoType } from './BookingChannelInfoType';
import {
    BookingChannelInfoTypeFromJSON,
    BookingChannelInfoTypeFromJSONTyped,
    BookingChannelInfoTypeToJSON,
} from './BookingChannelInfoType';
import type { HotelChannelInfoType } from './HotelChannelInfoType';
import {
    HotelChannelInfoTypeFromJSON,
    HotelChannelInfoTypeFromJSONTyped,
    HotelChannelInfoTypeToJSON,
} from './HotelChannelInfoType';
import type { ParityGroupType } from './ParityGroupType';
import {
    ParityGroupTypeFromJSON,
    ParityGroupTypeFromJSONTyped,
    ParityGroupTypeToJSON,
} from './ParityGroupType';

/**
 * Information on Room Rate Parity among Channels/Property
 * @export
 * @interface RateParityType
 */
export interface RateParityType {
    /**
     * Channels and Property combination.
     * @type {Array<ParityGroupType>}
     * @memberof RateParityType
     */
    parityGroups?: Array<ParityGroupType>;
    /**
     * 
     * @type {Array<HotelChannelInfoType>}
     * @memberof RateParityType
     */
    hotelsInfo?: Array<HotelChannelInfoType>;
    /**
     * 
     * @type {Array<BookingChannelInfoType>}
     * @memberof RateParityType
     */
    bookingChannelsInfo?: Array<BookingChannelInfoType>;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof RateParityType
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof RateParityType
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof RateParityType
     */
    count?: number;
}

/**
 * Check if a given object implements the RateParityType interface.
 */
export function instanceOfRateParityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateParityTypeFromJSON(json: any): RateParityType {
    return RateParityTypeFromJSONTyped(json, false);
}

export function RateParityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateParityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parityGroups': !exists(json, 'parityGroups') ? undefined : ((json['parityGroups'] as Array<any>).map(ParityGroupTypeFromJSON)),
        'hotelsInfo': !exists(json, 'hotelsInfo') ? undefined : ((json['hotelsInfo'] as Array<any>).map(HotelChannelInfoTypeFromJSON)),
        'bookingChannelsInfo': !exists(json, 'bookingChannelsInfo') ? undefined : ((json['bookingChannelsInfo'] as Array<any>).map(BookingChannelInfoTypeFromJSON)),
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
    };
}

export function RateParityTypeToJSON(value?: RateParityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parityGroups': value.parityGroups === undefined ? undefined : ((value.parityGroups as Array<any>).map(ParityGroupTypeToJSON)),
        'hotelsInfo': value.hotelsInfo === undefined ? undefined : ((value.hotelsInfo as Array<any>).map(HotelChannelInfoTypeToJSON)),
        'bookingChannelsInfo': value.bookingChannelsInfo === undefined ? undefined : ((value.bookingChannelsInfo as Array<any>).map(BookingChannelInfoTypeToJSON)),
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
    };
}

