/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelStatementAccountsType } from './ChannelStatementAccountsType';
import {
    ChannelStatementAccountsTypeFromJSON,
    ChannelStatementAccountsTypeFromJSONTyped,
    ChannelStatementAccountsTypeToJSON,
} from './ChannelStatementAccountsType';
import type { CodeListType } from './CodeListType';
import {
    CodeListTypeFromJSON,
    CodeListTypeFromJSONTyped,
    CodeListTypeToJSON,
} from './CodeListType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * To hold channel account statement detailed information.
 * @export
 * @interface ChannelBillingStatementType
 */
export interface ChannelBillingStatementType {
    /**
     * 
     * @type {CodeListType}
     * @memberof ChannelBillingStatementType
     */
    accountCodeList?: CodeListType;
    /**
     * Holds begin date of the statement.
     * @type {Date}
     * @memberof ChannelBillingStatementType
     */
    beginDate?: Date;
    /**
     * 
     * @type {ChannelStatementAccountsType}
     * @memberof ChannelBillingStatementType
     */
    channelAccountStatements?: ChannelStatementAccountsType;
    /**
     * Flag to identify Statements generated were dirty or not.
     * @type {boolean}
     * @memberof ChannelBillingStatementType
     */
    dirty?: boolean;
    /**
     * Holds end date of the statement.
     * @type {Date}
     * @memberof ChannelBillingStatementType
     */
    endDate?: Date;
    /**
     * Flag to identify Statements were generated or not.
     * @type {boolean}
     * @memberof ChannelBillingStatementType
     */
    generated?: boolean;
    /**
     * Holds date on which statement is locked.
     * @type {Date}
     * @memberof ChannelBillingStatementType
     */
    lockDate?: Date;
    /**
     * Holds Note for the statement.
     * @type {string}
     * @memberof ChannelBillingStatementType
     */
    note?: string;
    /**
     * Holds date on which statement is created.
     * @type {Date}
     * @memberof ChannelBillingStatementType
     */
    statementDate?: Date;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChannelBillingStatementType
     */
    statementId?: UniqueIDType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ChannelBillingStatementType
     */
    totalAmount?: CurrencyAmountType;
}

/**
 * Check if a given object implements the ChannelBillingStatementType interface.
 */
export function instanceOfChannelBillingStatementType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelBillingStatementTypeFromJSON(json: any): ChannelBillingStatementType {
    return ChannelBillingStatementTypeFromJSONTyped(json, false);
}

export function ChannelBillingStatementTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelBillingStatementType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountCodeList': !exists(json, 'accountCodeList') ? undefined : CodeListTypeFromJSON(json['accountCodeList']),
        'beginDate': !exists(json, 'beginDate') ? undefined : (new Date(json['beginDate'])),
        'channelAccountStatements': !exists(json, 'channelAccountStatements') ? undefined : ChannelStatementAccountsTypeFromJSON(json['channelAccountStatements']),
        'dirty': !exists(json, 'dirty') ? undefined : json['dirty'],
        'endDate': !exists(json, 'endDate') ? undefined : (new Date(json['endDate'])),
        'generated': !exists(json, 'generated') ? undefined : json['generated'],
        'lockDate': !exists(json, 'lockDate') ? undefined : (new Date(json['lockDate'])),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'statementDate': !exists(json, 'statementDate') ? undefined : (new Date(json['statementDate'])),
        'statementId': !exists(json, 'statementId') ? undefined : UniqueIDTypeFromJSON(json['statementId']),
        'totalAmount': !exists(json, 'totalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['totalAmount']),
    };
}

export function ChannelBillingStatementTypeToJSON(value?: ChannelBillingStatementType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountCodeList': CodeListTypeToJSON(value.accountCodeList),
        'beginDate': value.beginDate === undefined ? undefined : (value.beginDate.toISOString().substring(0,10)),
        'channelAccountStatements': ChannelStatementAccountsTypeToJSON(value.channelAccountStatements),
        'dirty': value.dirty,
        'endDate': value.endDate === undefined ? undefined : (value.endDate.toISOString().substring(0,10)),
        'generated': value.generated,
        'lockDate': value.lockDate === undefined ? undefined : (value.lockDate.toISOString().substring(0,10)),
        'note': value.note,
        'statementDate': value.statementDate === undefined ? undefined : (value.statementDate.toISOString().substring(0,10)),
        'statementId': UniqueIDTypeToJSON(value.statementId),
        'totalAmount': CurrencyAmountTypeToJSON(value.totalAmount),
    };
}

