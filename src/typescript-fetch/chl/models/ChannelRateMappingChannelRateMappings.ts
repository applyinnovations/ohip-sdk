/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelRateMappingType } from './ChannelRateMappingType';
import {
    ChannelRateMappingTypeFromJSON,
    ChannelRateMappingTypeFromJSONTyped,
    ChannelRateMappingTypeToJSON,
} from './ChannelRateMappingType';

/**
 * Information about the Rate mapping to be updated.
 * @export
 * @interface ChannelRateMappingChannelRateMappings
 */
export interface ChannelRateMappingChannelRateMappings {
    /**
     * Information about the Rate mapping to be updated.
     * @type {Array<ChannelRateMappingType>}
     * @memberof ChannelRateMappingChannelRateMappings
     */
    channelRateMapping?: Array<ChannelRateMappingType>;
    /**
     * 'Y' if warnings like "Channel Rate Code already exists in Channel" should be ignored and should proceed with creating a new mapping; otherwise, value is 'N'
     * @type {boolean}
     * @memberof ChannelRateMappingChannelRateMappings
     */
    ignoreChannelRateWarning?: boolean;
}

/**
 * Check if a given object implements the ChannelRateMappingChannelRateMappings interface.
 */
export function instanceOfChannelRateMappingChannelRateMappings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelRateMappingChannelRateMappingsFromJSON(json: any): ChannelRateMappingChannelRateMappings {
    return ChannelRateMappingChannelRateMappingsFromJSONTyped(json, false);
}

export function ChannelRateMappingChannelRateMappingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelRateMappingChannelRateMappings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelRateMapping': !exists(json, 'channelRateMapping') ? undefined : ((json['channelRateMapping'] as Array<any>).map(ChannelRateMappingTypeFromJSON)),
        'ignoreChannelRateWarning': !exists(json, 'ignoreChannelRateWarning') ? undefined : json['ignoreChannelRateWarning'],
    };
}

export function ChannelRateMappingChannelRateMappingsToJSON(value?: ChannelRateMappingChannelRateMappings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channelRateMapping': value.channelRateMapping === undefined ? undefined : ((value.channelRateMapping as Array<any>).map(ChannelRateMappingTypeToJSON)),
        'ignoreChannelRateWarning': value.ignoreChannelRateWarning,
    };
}

