/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ParityRateType } from './ParityRateType';
import {
    ParityRateTypeFromJSON,
    ParityRateTypeFromJSONTyped,
    ParityRateTypeToJSON,
} from './ParityRateType';

/**
 * Rate for Room Type and Rate Plan combination.
 * @export
 * @interface ParityRoomRateType
 */
export interface ParityRoomRateType {
    /**
     * Rate on specific arrival date.
     * @type {Array<ParityRateType>}
     * @memberof ParityRoomRateType
     */
    parityRates?: Array<ParityRateType>;
    /**
     * The code that identifies a Room Type.
     * @type {string}
     * @memberof ParityRoomRateType
     */
    roomType?: string;
    /**
     * The code that identifies a Rate Plan Code.
     * @type {string}
     * @memberof ParityRoomRateType
     */
    ratePlanCode?: string;
    /**
     * The code that identifies a Booking Channel Room Type.
     * @type {string}
     * @memberof ParityRoomRateType
     */
    channelRoomType?: string;
    /**
     * The code that identifies a Booking Channel Rate Plan Code.
     * @type {string}
     * @memberof ParityRoomRateType
     */
    channelRatePlanCode?: string;
}

/**
 * Check if a given object implements the ParityRoomRateType interface.
 */
export function instanceOfParityRoomRateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParityRoomRateTypeFromJSON(json: any): ParityRoomRateType {
    return ParityRoomRateTypeFromJSONTyped(json, false);
}

export function ParityRoomRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParityRoomRateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parityRates': !exists(json, 'parityRates') ? undefined : ((json['parityRates'] as Array<any>).map(ParityRateTypeFromJSON)),
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'channelRoomType': !exists(json, 'channelRoomType') ? undefined : json['channelRoomType'],
        'channelRatePlanCode': !exists(json, 'channelRatePlanCode') ? undefined : json['channelRatePlanCode'],
    };
}

export function ParityRoomRateTypeToJSON(value?: ParityRoomRateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parityRates': value.parityRates === undefined ? undefined : ((value.parityRates as Array<any>).map(ParityRateTypeToJSON)),
        'roomType': value.roomType,
        'ratePlanCode': value.ratePlanCode,
        'channelRoomType': value.channelRoomType,
        'channelRatePlanCode': value.channelRatePlanCode,
    };
}

