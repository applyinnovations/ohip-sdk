/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelSnapshotType } from './ChannelSnapshotType';
import {
    ChannelSnapshotTypeFromJSON,
    ChannelSnapshotTypeFromJSONTyped,
    ChannelSnapshotTypeToJSON,
} from './ChannelSnapshotType';

/**
 * Inventory statistics and restrictions. This can have no code (House level), BookingChannelCode, or ChannelRoomType to represent the different levels.
 * @export
 * @interface ChannelInventoryType
 */
export interface ChannelInventoryType {
    /**
     * Booking channel code that the snapshot belongs to.
     * @type {string}
     * @memberof ChannelInventoryType
     */
    bookingChannelCode?: string;
    /**
     * Booking channel room type that the snapshot belongs to.
     * @type {string}
     * @memberof ChannelInventoryType
     */
    channelRoomType?: string;
    /**
     * Inventory statistics and restriction details.
     * @type {Array<ChannelSnapshotType>}
     * @memberof ChannelInventoryType
     */
    snapshot?: Array<ChannelSnapshotType>;
}

/**
 * Check if a given object implements the ChannelInventoryType interface.
 */
export function instanceOfChannelInventoryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelInventoryTypeFromJSON(json: any): ChannelInventoryType {
    return ChannelInventoryTypeFromJSONTyped(json, false);
}

export function ChannelInventoryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelInventoryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingChannelCode': !exists(json, 'bookingChannelCode') ? undefined : json['bookingChannelCode'],
        'channelRoomType': !exists(json, 'channelRoomType') ? undefined : json['channelRoomType'],
        'snapshot': !exists(json, 'snapshot') ? undefined : ((json['snapshot'] as Array<any>).map(ChannelSnapshotTypeFromJSON)),
    };
}

export function ChannelInventoryTypeToJSON(value?: ChannelInventoryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingChannelCode': value.bookingChannelCode,
        'channelRoomType': value.channelRoomType,
        'snapshot': value.snapshot === undefined ? undefined : ((value.snapshot as Array<any>).map(ChannelSnapshotTypeToJSON)),
    };
}

