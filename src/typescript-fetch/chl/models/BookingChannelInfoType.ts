/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelMappingType } from './HotelMappingType';
import {
    HotelMappingTypeFromJSON,
    HotelMappingTypeFromJSONTyped,
    HotelMappingTypeToJSON,
} from './HotelMappingType';
import type { ParameterType } from './ParameterType';
import {
    ParameterTypeFromJSON,
    ParameterTypeFromJSONTyped,
    ParameterTypeToJSON,
} from './ParameterType';

/**
 * 
 * @export
 * @interface BookingChannelInfoType
 */
export interface BookingChannelInfoType {
    /**
     * 
     * @type {string}
     * @memberof BookingChannelInfoType
     */
    bookingChannelCode?: string;
    /**
     * 
     * @type {string}
     * @memberof BookingChannelInfoType
     */
    bookingChannelType?: string;
    /**
     * Collection of generic Name-Value-Pair parameters.
     * @type {Array<ParameterType>}
     * @memberof BookingChannelInfoType
     */
    configurationParameters?: Array<ParameterType>;
    /**
     * Hotel Code mapping for the Booking Channel.
     * @type {Array<HotelMappingType>}
     * @memberof BookingChannelInfoType
     */
    hotelMappings?: Array<HotelMappingType>;
    /**
     * 
     * @type {string}
     * @memberof BookingChannelInfoType
     */
    name?: string;
}

/**
 * Check if a given object implements the BookingChannelInfoType interface.
 */
export function instanceOfBookingChannelInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BookingChannelInfoTypeFromJSON(json: any): BookingChannelInfoType {
    return BookingChannelInfoTypeFromJSONTyped(json, false);
}

export function BookingChannelInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookingChannelInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingChannelCode': !exists(json, 'bookingChannelCode') ? undefined : json['bookingChannelCode'],
        'bookingChannelType': !exists(json, 'bookingChannelType') ? undefined : json['bookingChannelType'],
        'configurationParameters': !exists(json, 'configurationParameters') ? undefined : ((json['configurationParameters'] as Array<any>).map(ParameterTypeFromJSON)),
        'hotelMappings': !exists(json, 'hotelMappings') ? undefined : ((json['hotelMappings'] as Array<any>).map(HotelMappingTypeFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function BookingChannelInfoTypeToJSON(value?: BookingChannelInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingChannelCode': value.bookingChannelCode,
        'bookingChannelType': value.bookingChannelType,
        'configurationParameters': value.configurationParameters === undefined ? undefined : ((value.configurationParameters as Array<any>).map(ParameterTypeToJSON)),
        'hotelMappings': value.hotelMappings === undefined ? undefined : ((value.hotelMappings as Array<any>).map(HotelMappingTypeToJSON)),
        'name': value.name,
    };
}

