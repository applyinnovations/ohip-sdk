/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';
import type { TranslationTextType50 } from './TranslationTextType50';
import {
    TranslationTextType50FromJSON,
    TranslationTextType50FromJSONTyped,
    TranslationTextType50ToJSON,
} from './TranslationTextType50';

/**
 * This type holds enhanced room/rate description.
 * @export
 * @interface EnhancedDescriptionType
 */
export interface EnhancedDescriptionType {
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof EnhancedDescriptionType
     */
    shortDescription?: TranslationTextType2000;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof EnhancedDescriptionType
     */
    description?: TranslationTextType2000;
    /**
     * 
     * @type {TranslationTextType50}
     * @memberof EnhancedDescriptionType
     */
    enhancedDesc1?: TranslationTextType50;
    /**
     * 
     * @type {TranslationTextType50}
     * @memberof EnhancedDescriptionType
     */
    enhancedDesc2?: TranslationTextType50;
    /**
     * 
     * @type {TranslationTextType50}
     * @memberof EnhancedDescriptionType
     */
    enhancedDesc3?: TranslationTextType50;
    /**
     * 
     * @type {string}
     * @memberof EnhancedDescriptionType
     */
    source?: string;
}

/**
 * Check if a given object implements the EnhancedDescriptionType interface.
 */
export function instanceOfEnhancedDescriptionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EnhancedDescriptionTypeFromJSON(json: any): EnhancedDescriptionType {
    return EnhancedDescriptionTypeFromJSONTyped(json, false);
}

export function EnhancedDescriptionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnhancedDescriptionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shortDescription': !exists(json, 'shortDescription') ? undefined : TranslationTextType2000FromJSON(json['shortDescription']),
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'enhancedDesc1': !exists(json, 'enhancedDesc1') ? undefined : TranslationTextType50FromJSON(json['enhancedDesc1']),
        'enhancedDesc2': !exists(json, 'enhancedDesc2') ? undefined : TranslationTextType50FromJSON(json['enhancedDesc2']),
        'enhancedDesc3': !exists(json, 'enhancedDesc3') ? undefined : TranslationTextType50FromJSON(json['enhancedDesc3']),
        'source': !exists(json, 'source') ? undefined : json['source'],
    };
}

export function EnhancedDescriptionTypeToJSON(value?: EnhancedDescriptionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shortDescription': TranslationTextType2000ToJSON(value.shortDescription),
        'description': TranslationTextType2000ToJSON(value.description),
        'enhancedDesc1': TranslationTextType50ToJSON(value.enhancedDesc1),
        'enhancedDesc2': TranslationTextType50ToJSON(value.enhancedDesc2),
        'enhancedDesc3': TranslationTextType50ToJSON(value.enhancedDesc3),
        'source': value.source,
    };
}

