/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StatementDetailsStatisticType } from './StatementDetailsStatisticType';
import {
    StatementDetailsStatisticTypeFromJSON,
    StatementDetailsStatisticTypeFromJSONTyped,
    StatementDetailsStatisticTypeToJSON,
} from './StatementDetailsStatisticType';

/**
 * Channel statement details statistics .
 * @export
 * @interface StatementDetailsStatisticsType
 */
export interface StatementDetailsStatisticsType {
    /**
     * Holds the statistic details for the statement details.
     * @type {Array<StatementDetailsStatisticType>}
     * @memberof StatementDetailsStatisticsType
     */
    detailsByChannel?: Array<StatementDetailsStatisticType>;
    /**
     * Holds the statistic details for the statement details.
     * @type {Array<StatementDetailsStatisticType>}
     * @memberof StatementDetailsStatisticsType
     */
    detailsByChannelType?: Array<StatementDetailsStatisticType>;
    /**
     * Holds the statistic details for the statement details.
     * @type {Array<StatementDetailsStatisticType>}
     * @memberof StatementDetailsStatisticsType
     */
    detailsByFeeType?: Array<StatementDetailsStatisticType>;
    /**
     * Holds the statistic details for the statement details.
     * @type {Array<StatementDetailsStatisticType>}
     * @memberof StatementDetailsStatisticsType
     */
    detailsByResort?: Array<StatementDetailsStatisticType>;
}

/**
 * Check if a given object implements the StatementDetailsStatisticsType interface.
 */
export function instanceOfStatementDetailsStatisticsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StatementDetailsStatisticsTypeFromJSON(json: any): StatementDetailsStatisticsType {
    return StatementDetailsStatisticsTypeFromJSONTyped(json, false);
}

export function StatementDetailsStatisticsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatementDetailsStatisticsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'detailsByChannel': !exists(json, 'detailsByChannel') ? undefined : ((json['detailsByChannel'] as Array<any>).map(StatementDetailsStatisticTypeFromJSON)),
        'detailsByChannelType': !exists(json, 'detailsByChannelType') ? undefined : ((json['detailsByChannelType'] as Array<any>).map(StatementDetailsStatisticTypeFromJSON)),
        'detailsByFeeType': !exists(json, 'detailsByFeeType') ? undefined : ((json['detailsByFeeType'] as Array<any>).map(StatementDetailsStatisticTypeFromJSON)),
        'detailsByResort': !exists(json, 'detailsByResort') ? undefined : ((json['detailsByResort'] as Array<any>).map(StatementDetailsStatisticTypeFromJSON)),
    };
}

export function StatementDetailsStatisticsTypeToJSON(value?: StatementDetailsStatisticsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'detailsByChannel': value.detailsByChannel === undefined ? undefined : ((value.detailsByChannel as Array<any>).map(StatementDetailsStatisticTypeToJSON)),
        'detailsByChannelType': value.detailsByChannelType === undefined ? undefined : ((value.detailsByChannelType as Array<any>).map(StatementDetailsStatisticTypeToJSON)),
        'detailsByFeeType': value.detailsByFeeType === undefined ? undefined : ((value.detailsByFeeType as Array<any>).map(StatementDetailsStatisticTypeToJSON)),
        'detailsByResort': value.detailsByResort === undefined ? undefined : ((value.detailsByResort as Array<any>).map(StatementDetailsStatisticTypeToJSON)),
    };
}

