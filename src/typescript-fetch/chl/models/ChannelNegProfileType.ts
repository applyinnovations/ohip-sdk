/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelNegRateAccessType } from './ChannelNegRateAccessType';
import {
    ChannelNegRateAccessTypeFromJSON,
    ChannelNegRateAccessTypeFromJSONTyped,
    ChannelNegRateAccessTypeToJSON,
} from './ChannelNegRateAccessType';
import type { PersonNameType } from './PersonNameType';
import {
    PersonNameTypeFromJSON,
    PersonNameTypeFromJSONTyped,
    PersonNameTypeToJSON,
} from './PersonNameType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * A negotiated rate type
 * @export
 * @interface ChannelNegProfileType
 */
export interface ChannelNegProfileType {
    /**
     * 
     * @type {Array<ChannelNegRateAccessType>}
     * @memberof ChannelNegProfileType
     */
    accessInfoList?: Array<ChannelNegRateAccessType>;
    /**
     * 
     * @type {PersonNameType}
     * @memberof ChannelNegProfileType
     */
    formerName?: PersonNameType;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ChannelNegProfileType
     */
    uniqueId?: Array<UniqueIDType>;
}

/**
 * Check if a given object implements the ChannelNegProfileType interface.
 */
export function instanceOfChannelNegProfileType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelNegProfileTypeFromJSON(json: any): ChannelNegProfileType {
    return ChannelNegProfileTypeFromJSONTyped(json, false);
}

export function ChannelNegProfileTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelNegProfileType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessInfoList': !exists(json, 'accessInfoList') ? undefined : ((json['accessInfoList'] as Array<any>).map(ChannelNegRateAccessTypeFromJSON)),
        'formerName': !exists(json, 'formerName') ? undefined : PersonNameTypeFromJSON(json['formerName']),
        'uniqueId': !exists(json, 'uniqueId') ? undefined : ((json['uniqueId'] as Array<any>).map(UniqueIDTypeFromJSON)),
    };
}

export function ChannelNegProfileTypeToJSON(value?: ChannelNegProfileType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessInfoList': value.accessInfoList === undefined ? undefined : ((value.accessInfoList as Array<any>).map(ChannelNegRateAccessTypeToJSON)),
        'formerName': PersonNameTypeToJSON(value.formerName),
        'uniqueId': value.uniqueId === undefined ? undefined : ((value.uniqueId as Array<any>).map(UniqueIDTypeToJSON)),
    };
}

