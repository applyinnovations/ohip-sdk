/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Rate on specific arrival date.
 * @export
 * @interface RegionalParityRateType
 */
export interface RegionalParityRateType {
    /**
     * 
     * @type {number}
     * @memberof RegionalParityRateType
     */
    minimumRate?: number;
    /**
     * 
     * @type {number}
     * @memberof RegionalParityRateType
     */
    maximumRate?: number;
    /**
     * Arrival Date.
     * @type {string}
     * @memberof RegionalParityRateType
     */
    arrivalDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof RegionalParityRateType
     */
    weekendDay?: boolean;
    /**
     * 
     * @type {string}
     * @memberof RegionalParityRateType
     */
    currencyCode?: string;
    /**
     * Status Code related to functionality.
     * @type {string}
     * @memberof RegionalParityRateType
     */
    statusCode?: string;
    /**
     * Description of Status Code.
     * @type {string}
     * @memberof RegionalParityRateType
     */
    statusDescription?: string;
}

/**
 * Check if a given object implements the RegionalParityRateType interface.
 */
export function instanceOfRegionalParityRateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RegionalParityRateTypeFromJSON(json: any): RegionalParityRateType {
    return RegionalParityRateTypeFromJSONTyped(json, false);
}

export function RegionalParityRateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegionalParityRateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'minimumRate': !exists(json, 'minimumRate') ? undefined : json['minimumRate'],
        'maximumRate': !exists(json, 'maximumRate') ? undefined : json['maximumRate'],
        'arrivalDate': !exists(json, 'arrivalDate') ? undefined : json['arrivalDate'],
        'weekendDay': !exists(json, 'weekendDay') ? undefined : json['weekendDay'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'statusCode': !exists(json, 'statusCode') ? undefined : json['statusCode'],
        'statusDescription': !exists(json, 'statusDescription') ? undefined : json['statusDescription'],
    };
}

export function RegionalParityRateTypeToJSON(value?: RegionalParityRateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'minimumRate': value.minimumRate,
        'maximumRate': value.maximumRate,
        'arrivalDate': value.arrivalDate,
        'weekendDay': value.weekendDay,
        'currencyCode': value.currencyCode,
        'statusCode': value.statusCode,
        'statusDescription': value.statusDescription,
    };
}

