/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AdditionalAmountType
 */
export interface AdditionalAmountType {
    /**
     * A monetary amount.
     * @type {number}
     * @memberof AdditionalAmountType
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof AdditionalAmountType
     */
    amountType?: AdditionalAmountTypeAmountTypeEnum;
    /**
     * Provides a currency code to reflect the currency in which an amount may be expressed.
     * @type {string}
     * @memberof AdditionalAmountType
     */
    currencyCode?: string;
}


/**
 * @export
 */
export const AdditionalAmountTypeAmountTypeEnum = {
    AdditionalAdult: 'AdditionalAdult',
    AdditionalChild: 'AdditionalChild',
    AdditionalRollawayBed: 'AdditionalRollawayBed',
    AdditionalCrib: 'AdditionalCrib',
    AdditionalRollawayCrib: 'AdditionalRollawayCrib'
} as const;
export type AdditionalAmountTypeAmountTypeEnum = typeof AdditionalAmountTypeAmountTypeEnum[keyof typeof AdditionalAmountTypeAmountTypeEnum];


/**
 * Check if a given object implements the AdditionalAmountType interface.
 */
export function instanceOfAdditionalAmountType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AdditionalAmountTypeFromJSON(json: any): AdditionalAmountType {
    return AdditionalAmountTypeFromJSONTyped(json, false);
}

export function AdditionalAmountTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdditionalAmountType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'amountType': !exists(json, 'amountType') ? undefined : json['amountType'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
    };
}

export function AdditionalAmountTypeToJSON(value?: AdditionalAmountType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': value.amount,
        'amountType': value.amountType,
        'currencyCode': value.currencyCode,
    };
}

