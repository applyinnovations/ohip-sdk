/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingChannelInfoType } from './BookingChannelInfoType';
import {
    BookingChannelInfoTypeFromJSON,
    BookingChannelInfoTypeFromJSONTyped,
    BookingChannelInfoTypeToJSON,
} from './BookingChannelInfoType';
import type { ChannelRoomMappingSourceDescriptionsType } from './ChannelRoomMappingSourceDescriptionsType';
import {
    ChannelRoomMappingSourceDescriptionsTypeFromJSON,
    ChannelRoomMappingSourceDescriptionsTypeFromJSONTyped,
    ChannelRoomMappingSourceDescriptionsTypeToJSON,
} from './ChannelRoomMappingSourceDescriptionsType';

/**
 * Additional details about the booking channels and source descriptions for a hotel room type referenced within the fetched results.
 * @export
 * @interface ChannelRoomMappingMasterInfoType
 */
export interface ChannelRoomMappingMasterInfoType {
    /**
     * Additional detail about booking channel.
     * @type {Array<BookingChannelInfoType>}
     * @memberof ChannelRoomMappingMasterInfoType
     */
    bookingChannelsInfo?: Array<BookingChannelInfoType>;
    /**
     * This type holds hotel-channel room type mapping source descriptions.
     * @type {Array<ChannelRoomMappingSourceDescriptionsType>}
     * @memberof ChannelRoomMappingMasterInfoType
     */
    sourceDescriptions?: Array<ChannelRoomMappingSourceDescriptionsType>;
}

/**
 * Check if a given object implements the ChannelRoomMappingMasterInfoType interface.
 */
export function instanceOfChannelRoomMappingMasterInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelRoomMappingMasterInfoTypeFromJSON(json: any): ChannelRoomMappingMasterInfoType {
    return ChannelRoomMappingMasterInfoTypeFromJSONTyped(json, false);
}

export function ChannelRoomMappingMasterInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelRoomMappingMasterInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingChannelsInfo': !exists(json, 'bookingChannelsInfo') ? undefined : ((json['bookingChannelsInfo'] as Array<any>).map(BookingChannelInfoTypeFromJSON)),
        'sourceDescriptions': !exists(json, 'sourceDescriptions') ? undefined : ((json['sourceDescriptions'] as Array<any>).map(ChannelRoomMappingSourceDescriptionsTypeFromJSON)),
    };
}

export function ChannelRoomMappingMasterInfoTypeToJSON(value?: ChannelRoomMappingMasterInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingChannelsInfo': value.bookingChannelsInfo === undefined ? undefined : ((value.bookingChannelsInfo as Array<any>).map(BookingChannelInfoTypeToJSON)),
        'sourceDescriptions': value.sourceDescriptions === undefined ? undefined : ((value.sourceDescriptions as Array<any>).map(ChannelRoomMappingSourceDescriptionsTypeToJSON)),
    };
}

