/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelParameterGroupType } from './ChannelParameterGroupType';
import {
    ChannelParameterGroupTypeFromJSON,
    ChannelParameterGroupTypeFromJSONTyped,
    ChannelParameterGroupTypeToJSON,
} from './ChannelParameterGroupType';
import type { SystemInfoType } from './SystemInfoType';
import {
    SystemInfoTypeFromJSON,
    SystemInfoTypeFromJSONTyped,
    SystemInfoTypeToJSON,
} from './SystemInfoType';

/**
 * Includes information about the parametersTypes and system Information for the Channel/Hotel.
 * @export
 * @interface ChannelParameterMappingType
 */
export interface ChannelParameterMappingType {
    /**
     * 
     * @type {SystemInfoType}
     * @memberof ChannelParameterMappingType
     */
    systemInfo?: SystemInfoType;
    /**
     * Collection of channel parameters organized into groups.
     * @type {Array<ChannelParameterGroupType>}
     * @memberof ChannelParameterMappingType
     */
    groups?: Array<ChannelParameterGroupType>;
}

/**
 * Check if a given object implements the ChannelParameterMappingType interface.
 */
export function instanceOfChannelParameterMappingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelParameterMappingTypeFromJSON(json: any): ChannelParameterMappingType {
    return ChannelParameterMappingTypeFromJSONTyped(json, false);
}

export function ChannelParameterMappingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelParameterMappingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'systemInfo': !exists(json, 'systemInfo') ? undefined : SystemInfoTypeFromJSON(json['systemInfo']),
        'groups': !exists(json, 'groups') ? undefined : ((json['groups'] as Array<any>).map(ChannelParameterGroupTypeFromJSON)),
    };
}

export function ChannelParameterMappingTypeToJSON(value?: ChannelParameterMappingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'systemInfo': SystemInfoTypeToJSON(value.systemInfo),
        'groups': value.groups === undefined ? undefined : ((value.groups as Array<any>).map(ChannelParameterGroupTypeToJSON)),
    };
}

