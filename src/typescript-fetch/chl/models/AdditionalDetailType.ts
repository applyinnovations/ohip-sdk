/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AdditionalDetailType
 */
export interface AdditionalDetailType {
    /**
     * 
     * @type {string}
     * @memberof AdditionalDetailType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AdditionalDetailType
     */
    detailType?: AdditionalDetailTypeDetailTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AdditionalDetailType
     */
    otherDetailType?: string;
}


/**
 * @export
 */
export const AdditionalDetailTypeDetailTypeEnum = {
    CancelPolicy: 'CancelPolicy',
    CommissionPolicy: 'CommissionPolicy',
    GuaranteePolicy: 'GuaranteePolicy',
    DepositPolicy: 'DepositPolicy',
    PenaltyPolicy: 'PenaltyPolicy',
    MarketingInformation: 'MarketingInformation',
    Promotion: 'Promotion',
    TaxInformation: 'TaxInformation',
    Other: 'Other'
} as const;
export type AdditionalDetailTypeDetailTypeEnum = typeof AdditionalDetailTypeDetailTypeEnum[keyof typeof AdditionalDetailTypeDetailTypeEnum];


/**
 * Check if a given object implements the AdditionalDetailType interface.
 */
export function instanceOfAdditionalDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AdditionalDetailTypeFromJSON(json: any): AdditionalDetailType {
    return AdditionalDetailTypeFromJSONTyped(json, false);
}

export function AdditionalDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdditionalDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'detailType': !exists(json, 'detailType') ? undefined : json['detailType'],
        'otherDetailType': !exists(json, 'otherDetailType') ? undefined : json['otherDetailType'],
    };
}

export function AdditionalDetailTypeToJSON(value?: AdditionalDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'detailType': value.detailType,
        'otherDetailType': value.otherDetailType,
    };
}

