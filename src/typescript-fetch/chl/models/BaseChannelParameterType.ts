/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelParameterValueType } from './ChannelParameterValueType';
import {
    ChannelParameterValueTypeFromJSON,
    ChannelParameterValueTypeFromJSONTyped,
    ChannelParameterValueTypeToJSON,
} from './ChannelParameterValueType';

/**
 * Parameters details for the Channel.
 * @export
 * @interface BaseChannelParameterType
 */
export interface BaseChannelParameterType {
    /**
     * Name of the parameter in the channel.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterName?: string;
    /**
     * The display name for the parameter in the channel.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterDisplay?: string;
    /**
     * Short description for the parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    shortDescription?: string;
    /**
     * The Description for the parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterDescription?: string;
    /**
     * The Value of the parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterValue?: string;
    /**
     * Hotel code identifying the parameters related to the Hotel.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    hotelId?: string;
    /**
     * The type of the parameter, the possible types are P (Parameter), Setting (S).
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    parameterType?: BaseChannelParameterTypeParameterTypeEnum;
    /**
     * Whether this is a global or property level parameter.
     * @type {string}
     * @memberof BaseChannelParameterType
     */
    scope?: BaseChannelParameterTypeScopeEnum;
    /**
     * 
     * @type {ChannelParameterValueType}
     * @memberof BaseChannelParameterType
     */
    valueType?: ChannelParameterValueType;
    /**
     * Sequence number for displaying the parameter in the channel.
     * @type {number}
     * @memberof BaseChannelParameterType
     */
    sequence?: number;
}


/**
 * @export
 */
export const BaseChannelParameterTypeParameterTypeEnum = {
    P: 'P',
    S: 'S'
} as const;
export type BaseChannelParameterTypeParameterTypeEnum = typeof BaseChannelParameterTypeParameterTypeEnum[keyof typeof BaseChannelParameterTypeParameterTypeEnum];

/**
 * @export
 */
export const BaseChannelParameterTypeScopeEnum = {
    H: 'H',
    P: 'P'
} as const;
export type BaseChannelParameterTypeScopeEnum = typeof BaseChannelParameterTypeScopeEnum[keyof typeof BaseChannelParameterTypeScopeEnum];


/**
 * Check if a given object implements the BaseChannelParameterType interface.
 */
export function instanceOfBaseChannelParameterType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BaseChannelParameterTypeFromJSON(json: any): BaseChannelParameterType {
    return BaseChannelParameterTypeFromJSONTyped(json, false);
}

export function BaseChannelParameterTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseChannelParameterType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parameterName': !exists(json, 'parameterName') ? undefined : json['parameterName'],
        'parameterDisplay': !exists(json, 'parameterDisplay') ? undefined : json['parameterDisplay'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : json['shortDescription'],
        'parameterDescription': !exists(json, 'parameterDescription') ? undefined : json['parameterDescription'],
        'parameterValue': !exists(json, 'parameterValue') ? undefined : json['parameterValue'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'parameterType': !exists(json, 'parameterType') ? undefined : json['parameterType'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
        'valueType': !exists(json, 'valueType') ? undefined : ChannelParameterValueTypeFromJSON(json['valueType']),
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function BaseChannelParameterTypeToJSON(value?: BaseChannelParameterType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parameterName': value.parameterName,
        'parameterDisplay': value.parameterDisplay,
        'shortDescription': value.shortDescription,
        'parameterDescription': value.parameterDescription,
        'parameterValue': value.parameterValue,
        'hotelId': value.hotelId,
        'parameterType': value.parameterType,
        'scope': value.scope,
        'valueType': ChannelParameterValueTypeToJSON(value.valueType),
        'sequence': value.sequence,
    };
}

