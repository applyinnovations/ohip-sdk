/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RegionalParityRateType } from './RegionalParityRateType';
import {
    RegionalParityRateTypeFromJSON,
    RegionalParityRateTypeFromJSONTyped,
    RegionalParityRateTypeToJSON,
} from './RegionalParityRateType';

/**
 * Channels and Property Group wise Rates for Room Type and Rate Plan combination.
 * @export
 * @interface RegionalParityGroupType
 */
export interface RegionalParityGroupType {
    /**
     * Minimum and Maximum Rate on specific arrival date.
     * @type {Array<RegionalParityRateType>}
     * @memberof RegionalParityGroupType
     */
    regionalParityRates?: Array<RegionalParityRateType>;
    /**
     * The code that identifies a Hotel.
     * @type {string}
     * @memberof RegionalParityGroupType
     */
    hotelId?: string;
    /**
     * The code that identifies a Booking Channel.
     * @type {string}
     * @memberof RegionalParityGroupType
     */
    bookingChannelCode?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionalParityGroupType
     */
    bookingChannelURL?: string;
    /**
     * 
     * @type {string}
     * @memberof RegionalParityGroupType
     */
    bookingChannelIconURL?: string;
}

/**
 * Check if a given object implements the RegionalParityGroupType interface.
 */
export function instanceOfRegionalParityGroupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RegionalParityGroupTypeFromJSON(json: any): RegionalParityGroupType {
    return RegionalParityGroupTypeFromJSONTyped(json, false);
}

export function RegionalParityGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegionalParityGroupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'regionalParityRates': !exists(json, 'regionalParityRates') ? undefined : ((json['regionalParityRates'] as Array<any>).map(RegionalParityRateTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'bookingChannelCode': !exists(json, 'bookingChannelCode') ? undefined : json['bookingChannelCode'],
        'bookingChannelURL': !exists(json, 'bookingChannelURL') ? undefined : json['bookingChannelURL'],
        'bookingChannelIconURL': !exists(json, 'bookingChannelIconURL') ? undefined : json['bookingChannelIconURL'],
    };
}

export function RegionalParityGroupTypeToJSON(value?: RegionalParityGroupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'regionalParityRates': value.regionalParityRates === undefined ? undefined : ((value.regionalParityRates as Array<any>).map(RegionalParityRateTypeToJSON)),
        'hotelId': value.hotelId,
        'bookingChannelCode': value.bookingChannelCode,
        'bookingChannelURL': value.bookingChannelURL,
        'bookingChannelIconURL': value.bookingChannelIconURL,
    };
}

