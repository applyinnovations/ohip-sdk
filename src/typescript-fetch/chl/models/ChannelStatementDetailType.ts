/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContractFeeTypeType } from './ContractFeeTypeType';
import {
    ContractFeeTypeTypeFromJSON,
    ContractFeeTypeTypeFromJSONTyped,
    ContractFeeTypeTypeToJSON,
} from './ContractFeeTypeType';
import type { ContractPriceFrequencyType } from './ContractPriceFrequencyType';
import {
    ContractPriceFrequencyTypeFromJSON,
    ContractPriceFrequencyTypeFromJSONTyped,
    ContractPriceFrequencyTypeToJSON,
} from './ContractPriceFrequencyType';
import type { ContractPricingType } from './ContractPricingType';
import {
    ContractPricingTypeFromJSON,
    ContractPricingTypeFromJSONTyped,
    ContractPricingTypeToJSON,
} from './ContractPricingType';
import type { ContractRangeInformationType } from './ContractRangeInformationType';
import {
    ContractRangeInformationTypeFromJSON,
    ContractRangeInformationTypeFromJSONTyped,
    ContractRangeInformationTypeToJSON,
} from './ContractRangeInformationType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { OrderByListTypeInner } from './OrderByListTypeInner';
import {
    OrderByListTypeInnerFromJSON,
    OrderByListTypeInnerFromJSONTyped,
    OrderByListTypeInnerToJSON,
} from './OrderByListTypeInner';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * To hold channel account contract element detailed information.
 * @export
 * @interface ChannelStatementDetailType
 */
export interface ChannelStatementDetailType {
    /**
     * Holds channel of the contract element.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    bookingChannelCode?: string;
    /**
     * Holds channel type of the contract element.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    bookingChannelType?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ChannelStatementDetailType
     */
    contractAmount?: CurrencyAmountType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChannelStatementDetailType
     */
    contractId?: UniqueIDType;
    /**
     * 
     * @type {ContractPricingType}
     * @memberof ChannelStatementDetailType
     */
    contractPricing?: ContractPricingType;
    /**
     * 
     * @type {ContractRangeInformationType}
     * @memberof ChannelStatementDetailType
     */
    contractRangeInformation?: ContractRangeInformationType;
    /**
     * 
     * @type {ContractFeeTypeType}
     * @memberof ChannelStatementDetailType
     */
    feeType?: ContractFeeTypeType;
    /**
     * 
     * @type {ContractPriceFrequencyType}
     * @memberof ChannelStatementDetailType
     */
    frequency?: ContractPriceFrequencyType;
    /**
     * Holds the property for the statement detail.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    hotelId?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ChannelStatementDetailType
     */
    invoiceAmount?: CurrencyAmountType;
    /**
     * Holds Note for the contract element.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    note?: string;
    /**
     * Holds the value of property that user changed from to find and update.
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    oldHotelCode?: string;
    /**
     * 
     * @type {Array<OrderByListTypeInner>}
     * @memberof ChannelStatementDetailType
     */
    orderByList?: Array<OrderByListTypeInner>;
    /**
     * Number of Units (transactions, rooms or properties).
     * @type {number}
     * @memberof ChannelStatementDetailType
     */
    quantity?: number;
    /**
     * Holds Routing account. If no value is provided, it will be defaulted to *
     * @type {string}
     * @memberof ChannelStatementDetailType
     */
    routingAccount?: string;
    /**
     * Sequence identifies contract element per contract.
     * @type {number}
     * @memberof ChannelStatementDetailType
     */
    sequence?: number;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChannelStatementDetailType
     */
    statementId?: UniqueIDType;
}

/**
 * Check if a given object implements the ChannelStatementDetailType interface.
 */
export function instanceOfChannelStatementDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelStatementDetailTypeFromJSON(json: any): ChannelStatementDetailType {
    return ChannelStatementDetailTypeFromJSONTyped(json, false);
}

export function ChannelStatementDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelStatementDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingChannelCode': !exists(json, 'bookingChannelCode') ? undefined : json['bookingChannelCode'],
        'bookingChannelType': !exists(json, 'bookingChannelType') ? undefined : json['bookingChannelType'],
        'contractAmount': !exists(json, 'contractAmount') ? undefined : CurrencyAmountTypeFromJSON(json['contractAmount']),
        'contractId': !exists(json, 'contractId') ? undefined : UniqueIDTypeFromJSON(json['contractId']),
        'contractPricing': !exists(json, 'contractPricing') ? undefined : ContractPricingTypeFromJSON(json['contractPricing']),
        'contractRangeInformation': !exists(json, 'contractRangeInformation') ? undefined : ContractRangeInformationTypeFromJSON(json['contractRangeInformation']),
        'feeType': !exists(json, 'feeType') ? undefined : ContractFeeTypeTypeFromJSON(json['feeType']),
        'frequency': !exists(json, 'frequency') ? undefined : ContractPriceFrequencyTypeFromJSON(json['frequency']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'invoiceAmount': !exists(json, 'invoiceAmount') ? undefined : CurrencyAmountTypeFromJSON(json['invoiceAmount']),
        'note': !exists(json, 'note') ? undefined : json['note'],
        'oldHotelCode': !exists(json, 'oldHotelCode') ? undefined : json['oldHotelCode'],
        'orderByList': !exists(json, 'orderByList') ? undefined : ((json['orderByList'] as Array<any>).map(OrderByListTypeInnerFromJSON)),
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'routingAccount': !exists(json, 'routingAccount') ? undefined : json['routingAccount'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'statementId': !exists(json, 'statementId') ? undefined : UniqueIDTypeFromJSON(json['statementId']),
    };
}

export function ChannelStatementDetailTypeToJSON(value?: ChannelStatementDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingChannelCode': value.bookingChannelCode,
        'bookingChannelType': value.bookingChannelType,
        'contractAmount': CurrencyAmountTypeToJSON(value.contractAmount),
        'contractId': UniqueIDTypeToJSON(value.contractId),
        'contractPricing': ContractPricingTypeToJSON(value.contractPricing),
        'contractRangeInformation': ContractRangeInformationTypeToJSON(value.contractRangeInformation),
        'feeType': ContractFeeTypeTypeToJSON(value.feeType),
        'frequency': ContractPriceFrequencyTypeToJSON(value.frequency),
        'hotelId': value.hotelId,
        'invoiceAmount': CurrencyAmountTypeToJSON(value.invoiceAmount),
        'note': value.note,
        'oldHotelCode': value.oldHotelCode,
        'orderByList': value.orderByList === undefined ? undefined : ((value.orderByList as Array<any>).map(OrderByListTypeInnerToJSON)),
        'quantity': value.quantity,
        'routingAccount': value.routingAccount,
        'sequence': value.sequence,
        'statementId': UniqueIDTypeToJSON(value.statementId),
    };
}

