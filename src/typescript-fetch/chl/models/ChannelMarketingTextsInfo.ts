/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingChannelInfoType } from './BookingChannelInfoType';
import {
    BookingChannelInfoTypeFromJSON,
    BookingChannelInfoTypeFromJSONTyped,
    BookingChannelInfoTypeToJSON,
} from './BookingChannelInfoType';
import type { HotelChannelInfoType } from './HotelChannelInfoType';
import {
    HotelChannelInfoTypeFromJSON,
    HotelChannelInfoTypeFromJSONTyped,
    HotelChannelInfoTypeToJSON,
} from './HotelChannelInfoType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { MarketingTextsType } from './MarketingTextsType';
import {
    MarketingTextsTypeFromJSON,
    MarketingTextsTypeFromJSONTyped,
    MarketingTextsTypeToJSON,
} from './MarketingTextsType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response object for fetching channel marketing texts.
 * @export
 * @interface ChannelMarketingTextsInfo
 */
export interface ChannelMarketingTextsInfo {
    /**
     * Reference booking channel info for booking channels in the result set.
     * @type {Array<BookingChannelInfoType>}
     * @memberof ChannelMarketingTextsInfo
     */
    bookingChannelsInfo?: Array<BookingChannelInfoType>;
    /**
     * Reference hotel info for the hotels in the result set.
     * @type {Array<HotelChannelInfoType>}
     * @memberof ChannelMarketingTextsInfo
     */
    hotelsInfo?: Array<HotelChannelInfoType>;
    /**
     * 
     * @type {Links}
     * @memberof ChannelMarketingTextsInfo
     */
    links?: Links;
    /**
     * 
     * @type {MarketingTextsType}
     * @memberof ChannelMarketingTextsInfo
     */
    marketingTexts?: MarketingTextsType;
    /**
     * 
     * @type {WarningsType}
     * @memberof ChannelMarketingTextsInfo
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the ChannelMarketingTextsInfo interface.
 */
export function instanceOfChannelMarketingTextsInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelMarketingTextsInfoFromJSON(json: any): ChannelMarketingTextsInfo {
    return ChannelMarketingTextsInfoFromJSONTyped(json, false);
}

export function ChannelMarketingTextsInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelMarketingTextsInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingChannelsInfo': !exists(json, 'bookingChannelsInfo') ? undefined : ((json['bookingChannelsInfo'] as Array<any>).map(BookingChannelInfoTypeFromJSON)),
        'hotelsInfo': !exists(json, 'hotelsInfo') ? undefined : ((json['hotelsInfo'] as Array<any>).map(HotelChannelInfoTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'marketingTexts': !exists(json, 'marketingTexts') ? undefined : MarketingTextsTypeFromJSON(json['marketingTexts']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function ChannelMarketingTextsInfoToJSON(value?: ChannelMarketingTextsInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingChannelsInfo': value.bookingChannelsInfo === undefined ? undefined : ((value.bookingChannelsInfo as Array<any>).map(BookingChannelInfoTypeToJSON)),
        'hotelsInfo': value.hotelsInfo === undefined ? undefined : ((value.hotelsInfo as Array<any>).map(HotelChannelInfoTypeToJSON)),
        'links': LinksToJSON(value.links),
        'marketingTexts': MarketingTextsTypeToJSON(value.marketingTexts),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

