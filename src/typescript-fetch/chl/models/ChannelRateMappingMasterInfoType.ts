/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BookingChannelInfoType } from './BookingChannelInfoType';
import {
    BookingChannelInfoTypeFromJSON,
    BookingChannelInfoTypeFromJSONTyped,
    BookingChannelInfoTypeToJSON,
} from './BookingChannelInfoType';
import type { ChannelRateMappingSourceDescriptionsType } from './ChannelRateMappingSourceDescriptionsType';
import {
    ChannelRateMappingSourceDescriptionsTypeFromJSON,
    ChannelRateMappingSourceDescriptionsTypeFromJSONTyped,
    ChannelRateMappingSourceDescriptionsTypeToJSON,
} from './ChannelRateMappingSourceDescriptionsType';

/**
 * Additional details about the booking channels and source descriptions for a hotel rate code referenced within the fetched results.
 * @export
 * @interface ChannelRateMappingMasterInfoType
 */
export interface ChannelRateMappingMasterInfoType {
    /**
     * Additional detail about booking channel.
     * @type {Array<BookingChannelInfoType>}
     * @memberof ChannelRateMappingMasterInfoType
     */
    bookingChannelsInfo?: Array<BookingChannelInfoType>;
    /**
     * Source descriptions of a hotel-channel rate code mapping.
     * @type {Array<ChannelRateMappingSourceDescriptionsType>}
     * @memberof ChannelRateMappingMasterInfoType
     */
    sourceDescriptions?: Array<ChannelRateMappingSourceDescriptionsType>;
}

/**
 * Check if a given object implements the ChannelRateMappingMasterInfoType interface.
 */
export function instanceOfChannelRateMappingMasterInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelRateMappingMasterInfoTypeFromJSON(json: any): ChannelRateMappingMasterInfoType {
    return ChannelRateMappingMasterInfoTypeFromJSONTyped(json, false);
}

export function ChannelRateMappingMasterInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelRateMappingMasterInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookingChannelsInfo': !exists(json, 'bookingChannelsInfo') ? undefined : ((json['bookingChannelsInfo'] as Array<any>).map(BookingChannelInfoTypeFromJSON)),
        'sourceDescriptions': !exists(json, 'sourceDescriptions') ? undefined : ((json['sourceDescriptions'] as Array<any>).map(ChannelRateMappingSourceDescriptionsTypeFromJSON)),
    };
}

export function ChannelRateMappingMasterInfoTypeToJSON(value?: ChannelRateMappingMasterInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookingChannelsInfo': value.bookingChannelsInfo === undefined ? undefined : ((value.bookingChannelsInfo as Array<any>).map(BookingChannelInfoTypeToJSON)),
        'sourceDescriptions': value.sourceDescriptions === undefined ? undefined : ((value.sourceDescriptions as Array<any>).map(ChannelRateMappingSourceDescriptionsTypeToJSON)),
    };
}

