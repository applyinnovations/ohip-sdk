/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';

/**
 * 
 * @export
 * @interface ParityRateTypeRateAmounts
 */
export interface ParityRateTypeRateAmounts {
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ParityRateTypeRateAmounts
     */
    totalAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ParityRateTypeRateAmounts
     */
    taxAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ParityRateTypeRateAmounts
     */
    cancellationAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ParityRateTypeRateAmounts
     */
    commissionAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ParityRateTypeRateAmounts
     */
    depositAmount?: CurrencyAmountType;
}

/**
 * Check if a given object implements the ParityRateTypeRateAmounts interface.
 */
export function instanceOfParityRateTypeRateAmounts(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParityRateTypeRateAmountsFromJSON(json: any): ParityRateTypeRateAmounts {
    return ParityRateTypeRateAmountsFromJSONTyped(json, false);
}

export function ParityRateTypeRateAmountsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParityRateTypeRateAmounts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalAmount': !exists(json, 'totalAmount') ? undefined : CurrencyAmountTypeFromJSON(json['totalAmount']),
        'taxAmount': !exists(json, 'taxAmount') ? undefined : CurrencyAmountTypeFromJSON(json['taxAmount']),
        'cancellationAmount': !exists(json, 'cancellationAmount') ? undefined : CurrencyAmountTypeFromJSON(json['cancellationAmount']),
        'commissionAmount': !exists(json, 'commissionAmount') ? undefined : CurrencyAmountTypeFromJSON(json['commissionAmount']),
        'depositAmount': !exists(json, 'depositAmount') ? undefined : CurrencyAmountTypeFromJSON(json['depositAmount']),
    };
}

export function ParityRateTypeRateAmountsToJSON(value?: ParityRateTypeRateAmounts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalAmount': CurrencyAmountTypeToJSON(value.totalAmount),
        'taxAmount': CurrencyAmountTypeToJSON(value.taxAmount),
        'cancellationAmount': CurrencyAmountTypeToJSON(value.cancellationAmount),
        'commissionAmount': CurrencyAmountTypeToJSON(value.commissionAmount),
        'depositAmount': CurrencyAmountTypeToJSON(value.depositAmount),
    };
}

