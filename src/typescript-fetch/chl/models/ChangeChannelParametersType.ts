/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelParameterSimpleType } from './ChannelParameterSimpleType';
import {
    ChannelParameterSimpleTypeFromJSON,
    ChannelParameterSimpleTypeFromJSONTyped,
    ChannelParameterSimpleTypeToJSON,
} from './ChannelParameterSimpleType';

/**
 * 
 * @export
 * @interface ChangeChannelParametersType
 */
export interface ChangeChannelParametersType {
    /**
     * External system code.
     * @type {string}
     * @memberof ChangeChannelParametersType
     */
    systemCode?: string;
    /**
     * Collection of channel parameters simple information.
     * @type {Array<ChannelParameterSimpleType>}
     * @memberof ChangeChannelParametersType
     */
    channelParameters?: Array<ChannelParameterSimpleType>;
}

/**
 * Check if a given object implements the ChangeChannelParametersType interface.
 */
export function instanceOfChangeChannelParametersType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeChannelParametersTypeFromJSON(json: any): ChangeChannelParametersType {
    return ChangeChannelParametersTypeFromJSONTyped(json, false);
}

export function ChangeChannelParametersTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeChannelParametersType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'systemCode': !exists(json, 'systemCode') ? undefined : json['systemCode'],
        'channelParameters': !exists(json, 'channelParameters') ? undefined : ((json['channelParameters'] as Array<any>).map(ChannelParameterSimpleTypeFromJSON)),
    };
}

export function ChangeChannelParametersTypeToJSON(value?: ChangeChannelParametersType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'systemCode': value.systemCode,
        'channelParameters': value.channelParameters === undefined ? undefined : ((value.channelParameters as Array<any>).map(ChannelParameterSimpleTypeToJSON)),
    };
}

