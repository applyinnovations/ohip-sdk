/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelStatementDetailType } from './ChannelStatementDetailType';
import {
    ChannelStatementDetailTypeFromJSON,
    ChannelStatementDetailTypeFromJSONTyped,
    ChannelStatementDetailTypeToJSON,
} from './ChannelStatementDetailType';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Channel account statement type to hold statement details. WS wont update any statement account information except Note and account details information.
 * @export
 * @interface ChannelStatementAccountType
 */
export interface ChannelStatementAccountType {
    /**
     * Holds Account code of the channel account statement.
     * @type {string}
     * @memberof ChannelStatementAccountType
     */
    accountCode?: string;
    /**
     * Holds begin date of the account statement.
     * @type {string}
     * @memberof ChannelStatementAccountType
     */
    beginDate?: string;
    /**
     * Provides detailed information regarding Channel Account statements.
     * @type {Array<ChannelStatementDetailType>}
     * @memberof ChannelStatementAccountType
     */
    channelAccountStatementDetails?: Array<ChannelStatementDetailType>;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChannelStatementAccountType
     */
    contractId?: UniqueIDType;
    /**
     * Holds end date of the account statement.
     * @type {string}
     * @memberof ChannelStatementAccountType
     */
    endDate?: string;
    /**
     * Holds Note for the account statement.
     * @type {string}
     * @memberof ChannelStatementAccountType
     */
    note?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ChannelStatementAccountType
     */
    profileId?: UniqueIDType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof ChannelStatementAccountType
     */
    totalDetailsAmount?: CurrencyAmountType;
}

/**
 * Check if a given object implements the ChannelStatementAccountType interface.
 */
export function instanceOfChannelStatementAccountType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelStatementAccountTypeFromJSON(json: any): ChannelStatementAccountType {
    return ChannelStatementAccountTypeFromJSONTyped(json, false);
}

export function ChannelStatementAccountTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelStatementAccountType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountCode': !exists(json, 'accountCode') ? undefined : json['accountCode'],
        'beginDate': !exists(json, 'beginDate') ? undefined : json['beginDate'],
        'channelAccountStatementDetails': !exists(json, 'channelAccountStatementDetails') ? undefined : ((json['channelAccountStatementDetails'] as Array<any>).map(ChannelStatementDetailTypeFromJSON)),
        'contractId': !exists(json, 'contractId') ? undefined : UniqueIDTypeFromJSON(json['contractId']),
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'note': !exists(json, 'note') ? undefined : json['note'],
        'profileId': !exists(json, 'profileId') ? undefined : UniqueIDTypeFromJSON(json['profileId']),
        'totalDetailsAmount': !exists(json, 'totalDetailsAmount') ? undefined : CurrencyAmountTypeFromJSON(json['totalDetailsAmount']),
    };
}

export function ChannelStatementAccountTypeToJSON(value?: ChannelStatementAccountType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountCode': value.accountCode,
        'beginDate': value.beginDate,
        'channelAccountStatementDetails': value.channelAccountStatementDetails === undefined ? undefined : ((value.channelAccountStatementDetails as Array<any>).map(ChannelStatementDetailTypeToJSON)),
        'contractId': UniqueIDTypeToJSON(value.contractId),
        'endDate': value.endDate,
        'note': value.note,
        'profileId': UniqueIDTypeToJSON(value.profileId),
        'totalDetailsAmount': CurrencyAmountTypeToJSON(value.totalDetailsAmount),
    };
}

