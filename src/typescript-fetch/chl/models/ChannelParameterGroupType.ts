/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelParameterType } from './ChannelParameterType';
import {
    ChannelParameterTypeFromJSON,
    ChannelParameterTypeFromJSONTyped,
    ChannelParameterTypeToJSON,
} from './ChannelParameterType';

/**
 * 
 * @export
 * @interface ChannelParameterGroupType
 */
export interface ChannelParameterGroupType {
    /**
     * parameters details.
     * @type {Array<ChannelParameterType>}
     * @memberof ChannelParameterGroupType
     */
    channelParameters?: Array<ChannelParameterType>;
    /**
     * 
     * @type {string}
     * @memberof ChannelParameterGroupType
     */
    groupName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelParameterGroupType
     */
    groupDisplayName?: string;
}

/**
 * Check if a given object implements the ChannelParameterGroupType interface.
 */
export function instanceOfChannelParameterGroupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelParameterGroupTypeFromJSON(json: any): ChannelParameterGroupType {
    return ChannelParameterGroupTypeFromJSONTyped(json, false);
}

export function ChannelParameterGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelParameterGroupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelParameters': !exists(json, 'channelParameters') ? undefined : ((json['channelParameters'] as Array<any>).map(ChannelParameterTypeFromJSON)),
        'groupName': !exists(json, 'groupName') ? undefined : json['groupName'],
        'groupDisplayName': !exists(json, 'groupDisplayName') ? undefined : json['groupDisplayName'],
    };
}

export function ChannelParameterGroupTypeToJSON(value?: ChannelParameterGroupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channelParameters': value.channelParameters === undefined ? undefined : ((value.channelParameters as Array<any>).map(ChannelParameterTypeToJSON)),
        'groupName': value.groupName,
        'groupDisplayName': value.groupDisplayName,
    };
}

