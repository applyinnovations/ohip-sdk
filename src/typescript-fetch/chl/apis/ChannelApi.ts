/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Amenities,
  AmenitiesMapping,
  ChangeChannelParameters,
  Channel,
  ChannelAccount,
  ChannelAccountContractElements,
  ChannelAccountContracts,
  ChannelAccountContractsCopy,
  ChannelAccountContractsDetailsCopy,
  ChannelAccounts,
  ChannelAccountsSummary,
  ChannelAccountsToChange,
  ChannelAvailability,
  ChannelBillingStatement,
  ChannelBillingStatementDetails,
  ChannelBillingStatementSummaries,
  ChannelBillingStatements,
  ChannelCardTypeMappingDetails,
  ChannelCardTypeMappings,
  ChannelCarriers,
  ChannelEnhancedGlobalDescription,
  ChannelErrors,
  ChannelGlobalDescription,
  ChannelGlobalDescriptions,
  ChannelGuaranteeCodeMappingDetails,
  ChannelGuaranteeCodeMappings,
  ChannelHotelCodeMapping,
  ChannelHotelLettersToBeChanged,
  ChannelHotelLettersToBeCreated,
  ChannelMarketingText,
  ChannelMarketingTextCopy,
  ChannelMarketingTextToChange,
  ChannelMarketingTextsInfo,
  ChannelNegotiatedRateDetails,
  ChannelNegotiatedRates,
  ChannelOrgMapping,
  ChannelOrgMappingsDetails,
  ChannelParameterMapping,
  ChannelPolicies,
  ChannelRateCategories,
  ChannelRateLevels,
  ChannelRateMapping,
  ChannelRateMappings,
  ChannelRatePlans,
  ChannelRateRoomSequence,
  ChannelRateRoomSequenceDetails,
  ChannelRates,
  ChannelRestrictions,
  ChannelRoomMapping,
  ChannelRoomMappings,
  ChannelRoomMappingsSummary,
  ChannelRoomTypes,
  Channels,
  CreditCards,
  CreditCardsMapping,
  Currencies,
  CurrenciesMapping,
  DistributionTemplates,
  ExceptionDetailType,
  FetchedChannelHotelLetters,
  Guarantees,
  GuaranteesMapping,
  Properties,
  PropertiesMapping,
  StatementDetailsStatistics,
  Status,
  TotalPricingElements,
  TotalPricingElementsCopy,
} from '../models/index';
import {
    AmenitiesFromJSON,
    AmenitiesToJSON,
    AmenitiesMappingFromJSON,
    AmenitiesMappingToJSON,
    ChangeChannelParametersFromJSON,
    ChangeChannelParametersToJSON,
    ChannelFromJSON,
    ChannelToJSON,
    ChannelAccountFromJSON,
    ChannelAccountToJSON,
    ChannelAccountContractElementsFromJSON,
    ChannelAccountContractElementsToJSON,
    ChannelAccountContractsFromJSON,
    ChannelAccountContractsToJSON,
    ChannelAccountContractsCopyFromJSON,
    ChannelAccountContractsCopyToJSON,
    ChannelAccountContractsDetailsCopyFromJSON,
    ChannelAccountContractsDetailsCopyToJSON,
    ChannelAccountsFromJSON,
    ChannelAccountsToJSON,
    ChannelAccountsSummaryFromJSON,
    ChannelAccountsSummaryToJSON,
    ChannelAccountsToChangeFromJSON,
    ChannelAccountsToChangeToJSON,
    ChannelAvailabilityFromJSON,
    ChannelAvailabilityToJSON,
    ChannelBillingStatementFromJSON,
    ChannelBillingStatementToJSON,
    ChannelBillingStatementDetailsFromJSON,
    ChannelBillingStatementDetailsToJSON,
    ChannelBillingStatementSummariesFromJSON,
    ChannelBillingStatementSummariesToJSON,
    ChannelBillingStatementsFromJSON,
    ChannelBillingStatementsToJSON,
    ChannelCardTypeMappingDetailsFromJSON,
    ChannelCardTypeMappingDetailsToJSON,
    ChannelCardTypeMappingsFromJSON,
    ChannelCardTypeMappingsToJSON,
    ChannelCarriersFromJSON,
    ChannelCarriersToJSON,
    ChannelEnhancedGlobalDescriptionFromJSON,
    ChannelEnhancedGlobalDescriptionToJSON,
    ChannelErrorsFromJSON,
    ChannelErrorsToJSON,
    ChannelGlobalDescriptionFromJSON,
    ChannelGlobalDescriptionToJSON,
    ChannelGlobalDescriptionsFromJSON,
    ChannelGlobalDescriptionsToJSON,
    ChannelGuaranteeCodeMappingDetailsFromJSON,
    ChannelGuaranteeCodeMappingDetailsToJSON,
    ChannelGuaranteeCodeMappingsFromJSON,
    ChannelGuaranteeCodeMappingsToJSON,
    ChannelHotelCodeMappingFromJSON,
    ChannelHotelCodeMappingToJSON,
    ChannelHotelLettersToBeChangedFromJSON,
    ChannelHotelLettersToBeChangedToJSON,
    ChannelHotelLettersToBeCreatedFromJSON,
    ChannelHotelLettersToBeCreatedToJSON,
    ChannelMarketingTextFromJSON,
    ChannelMarketingTextToJSON,
    ChannelMarketingTextCopyFromJSON,
    ChannelMarketingTextCopyToJSON,
    ChannelMarketingTextToChangeFromJSON,
    ChannelMarketingTextToChangeToJSON,
    ChannelMarketingTextsInfoFromJSON,
    ChannelMarketingTextsInfoToJSON,
    ChannelNegotiatedRateDetailsFromJSON,
    ChannelNegotiatedRateDetailsToJSON,
    ChannelNegotiatedRatesFromJSON,
    ChannelNegotiatedRatesToJSON,
    ChannelOrgMappingFromJSON,
    ChannelOrgMappingToJSON,
    ChannelOrgMappingsDetailsFromJSON,
    ChannelOrgMappingsDetailsToJSON,
    ChannelParameterMappingFromJSON,
    ChannelParameterMappingToJSON,
    ChannelPoliciesFromJSON,
    ChannelPoliciesToJSON,
    ChannelRateCategoriesFromJSON,
    ChannelRateCategoriesToJSON,
    ChannelRateLevelsFromJSON,
    ChannelRateLevelsToJSON,
    ChannelRateMappingFromJSON,
    ChannelRateMappingToJSON,
    ChannelRateMappingsFromJSON,
    ChannelRateMappingsToJSON,
    ChannelRatePlansFromJSON,
    ChannelRatePlansToJSON,
    ChannelRateRoomSequenceFromJSON,
    ChannelRateRoomSequenceToJSON,
    ChannelRateRoomSequenceDetailsFromJSON,
    ChannelRateRoomSequenceDetailsToJSON,
    ChannelRatesFromJSON,
    ChannelRatesToJSON,
    ChannelRestrictionsFromJSON,
    ChannelRestrictionsToJSON,
    ChannelRoomMappingFromJSON,
    ChannelRoomMappingToJSON,
    ChannelRoomMappingsFromJSON,
    ChannelRoomMappingsToJSON,
    ChannelRoomMappingsSummaryFromJSON,
    ChannelRoomMappingsSummaryToJSON,
    ChannelRoomTypesFromJSON,
    ChannelRoomTypesToJSON,
    ChannelsFromJSON,
    ChannelsToJSON,
    CreditCardsFromJSON,
    CreditCardsToJSON,
    CreditCardsMappingFromJSON,
    CreditCardsMappingToJSON,
    CurrenciesFromJSON,
    CurrenciesToJSON,
    CurrenciesMappingFromJSON,
    CurrenciesMappingToJSON,
    DistributionTemplatesFromJSON,
    DistributionTemplatesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FetchedChannelHotelLettersFromJSON,
    FetchedChannelHotelLettersToJSON,
    GuaranteesFromJSON,
    GuaranteesToJSON,
    GuaranteesMappingFromJSON,
    GuaranteesMappingToJSON,
    PropertiesFromJSON,
    PropertiesToJSON,
    PropertiesMappingFromJSON,
    PropertiesMappingToJSON,
    StatementDetailsStatisticsFromJSON,
    StatementDetailsStatisticsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TotalPricingElementsFromJSON,
    TotalPricingElementsToJSON,
    TotalPricingElementsCopyFromJSON,
    TotalPricingElementsCopyToJSON,
} from '../models/index';

export interface CopyChannelAccountContractsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelAccountContractsCopy?: ChannelAccountContractsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyChannelMarketingTextRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelMarketingTextCopy?: ChannelMarketingTextCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTotalPricingElementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    totalPricingElementsCopy?: TotalPricingElementsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAmenitiesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    systemCode?: string;
    systemSubType?: string;
    systemType?: string;
    systemName?: string;
    websiteURL?: string;
    iconURL?: string;
    localSystemCode?: Array<string>;
    externalSystemCode?: Array<string>;
    description?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    amenityGroup?: Set<DeleteAmenitiesMappingAmenityGroupEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelAccountContractsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    id1?: Array<string>;
    idExtension1?: Array<number>;
    idContext1?: Array<string>;
    type1?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelBillingStatementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: Array<string>;
    idExtension?: Array<number>;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelCardTypeMappingRequest {
    cardTypeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelCardType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelCarriersRequest {
    bookingChannelCodes?: Array<string>;
    carriers?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelErrorsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bookingChannelCode?: Array<string>;
    error?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelGuaranteeCodeMappingRequest {
    guaranteeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelHotelLettersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: string;
    description?: string;
    hotelId?: Array<string>;
    code1?: string;
    description1?: string;
    letterType?: Set<DeleteChannelHotelLettersLetterTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelMarketingTextRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    beginDate?: Array<Date>;
    bookingChannelCode?: Array<string>;
    endDate?: Array<Date>;
    globalTextYN?: Array<boolean>;
    hotelId?: Array<string>;
    marketingText?: Array<string>;
    policyDetail?: Array<string>;
    policyType?: Array<string>;
    transactionType?: Array<string>;
    newHotelId?: Array<string>;
    newTransactionType?: Array<string>;
    newPolicyType?: Array<string>;
    newPolicyDetail?: Array<string>;
    newBeginDate?: Array<Date>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelNegotiatedRateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bookingChannelCode?: string;
    channelRatePlanCode?: string;
    hotelId?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    externalSystem?: string;
    language?: string;
    nameType?: DeleteChannelNegotiatedRateNameTypeEnum;
    namePrefix?: string;
    givenName?: string;
    middleName?: string;
    surname?: string;
    nameSuffix?: string;
    nameTitle?: string;
    nameTitleSuffix?: number;
    envelopeGreeting?: string;
    salutation?: string;
    accessCode?: Array<string>;
    end?: Array<Date>;
    start?: Array<Date>;
    newAccessCode?: string;
    channelRatePlanCodeOrder?: number;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelOrgMappingRequest {
    tenantCode?: string;
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    chainCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelRateCategoriesRequest {
    bookingChannelCodes?: Array<string>;
    rateCategories?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelRateLevelsRequest {
    bookingChannelCodes?: Array<string>;
    rateLevels?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelRateMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bookingChannelCode?: Array<string>;
    channelRatePlanCode?: Array<string>;
    hasChannelNegotiatedRates?: Array<boolean>;
    hasNegotiatedRates?: Array<boolean>;
    hotelId?: Array<string>;
    ratePlanCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelRatesGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    code?: string;
    description?: string;
    code1?: string;
    description1?: string;
    globalDescType?: Set<DeleteChannelRatesGlobalDescriptionsGlobalDescTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelRoomMappingRequest {
    roomTypeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    beginDate?: Date;
    channelRoomType?: string;
    endDate?: Date;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelRoomTypesRequest {
    bookingChannelCodes?: Array<string>;
    roomTypes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelRoomsGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    code?: string;
    description?: string;
    code1?: string;
    description1?: string;
    globalDescType?: Set<DeleteChannelRoomsGlobalDescriptionsGlobalDescTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCreditCardsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    systemCode?: string;
    systemSubType?: string;
    systemType?: string;
    systemName?: string;
    websiteURL?: string;
    iconURL?: string;
    localSystemCode?: Array<string>;
    externalSystemCode?: Array<string>;
    description?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCurrenciesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    systemCode?: string;
    systemSubType?: string;
    systemType?: string;
    systemName?: string;
    websiteURL?: string;
    iconURL?: string;
    localSystemCode?: Array<string>;
    externalSystemCode?: Array<string>;
    description?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    lanyonDecimalPosition?: Array<number>;
    channelDecimalPosition?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDistributionTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    code?: Array<string>;
    hotelId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuaranteesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    systemCode?: string;
    systemSubType?: string;
    systemType?: string;
    systemName?: string;
    websiteURL?: string;
    iconURL?: string;
    localSystemCode?: Array<string>;
    externalSystemCode?: Array<string>;
    description?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    requirementCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHotelsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    systemCode?: string;
    systemSubType?: string;
    systemType?: string;
    systemName?: string;
    websiteURL?: string;
    iconURL?: string;
    localSystemCode?: Array<string>;
    externalSystemCode?: Array<string>;
    description?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    city?: Array<string>;
    roomLimit?: Array<number>;
    bookingLimit?: Array<number>;
    hotelChainId?: Array<string>;
    chainCode?: Array<string>;
    prevailingRates?: Array<boolean>;
    aRIEnabled?: Array<boolean>;
    addOnLicense?: Array<string>;
    available?: boolean;
    defaultRateCode?: string;
    defaultRateCode1?: Array<string>;
    lowRevenueThreshold?: Array<number>;
    highRevenueThreshold?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTotalPricingElementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    code?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GenerateChannelBillingStatementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelBillingStatements?: ChannelBillingStatements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAmenitiesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    limit?: number;
    offset?: number;
    systemCode?: string;
    systemType?: string;
    systemSubType?: string;
    systemRateType?: string;
    localSystemCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: Array<boolean>;
    fetchInstructions?: Set<GetChannelFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelAccountRequest {
    accountProfileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    markAsRecentlyAccessed?: boolean;
    fetchInstructions?: Set<GetChannelAccountFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelAccountContractElementsRequest {
    contractId?: string;
    accountProfileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    attributeName?: Array<string>;
    orderType?: Set<GetChannelAccountContractElementsOrderTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelAccountsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeInactive?: boolean;
    limit?: number;
    offset?: number;
    hotelId?: Array<string>;
    accountType?: GetChannelAccountsAccountTypeEnum;
    accountName?: string;
    accountCode?: string;
    contractExpInDays?: number;
    attributeName?: Array<string>;
    orderType?: Set<GetChannelAccountsOrderTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelBillingStatementRequest {
    statementId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    idType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelBillingStatementDetailsRequest {
    statementId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    contractId?: string;
    contractIdType?: string;
    attributeName?: Array<string>;
    orderType?: Set<GetChannelBillingStatementDetailsOrderTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelBillingStatementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeLocked?: boolean;
    limit?: number;
    offset?: number;
    statementId?: string;
    statementIdType?: string;
    beginDate?: Date;
    endDate?: Date;
    profileId?: Array<string>;
    profileIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelCardTypeMappingsRequest {
    hotelIds?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    bookingChannelCodes?: Array<string>;
    cardTypes?: Array<string>;
    channelCardTypes?: Array<string>;
    includeInactive?: boolean;
    fetchUnmapped?: boolean;
    fetchMapped?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelGuaranteeCodeMappingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    bookingChannelCodes?: Array<string>;
    guaranteeCode?: Array<string>;
    channelGuaranteeCode?: Array<string>;
    includeInactive?: boolean;
    fetchUnmapped?: boolean;
    fetchMapped?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelHotelCodeMappingRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    channelHotelCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelHotelLettersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelCode?: Array<string>;
    hotelIds?: Array<string>;
    language?: string;
    letterType?: GetChannelHotelLettersLetterTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelMarketingTextRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionType?: string;
    policyType?: string;
    policyDetail?: string;
    beginDate?: Date;
    filterHotelIds?: Array<string>;
    bookingChannelCode?: Array<string>;
    transactionTypes?: Array<string>;
    policyTypesPolicyType?: Array<string>;
    policyDetailPolicyDetail?: Array<string>;
    showGlobal?: boolean;
    includeInactive?: boolean;
    fetchInstructions?: Set<GetChannelMarketingTextFetchInstructionsEnum>;
    hotelIds?: Array<string>;
    channelCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelNegotiatedRateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    hotelId?: string;
    bookingChannelCode?: string;
    channelRatePlanCode?: string;
    accessCode?: string;
    uniqueId?: Array<string>;
    uniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelOrgMappingRequest {
    tenantCode?: string;
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    chainCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelParametersRequest {
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    parameterNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelPoliciesRequest {
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    requestType?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    channelRatePlanCode?: Array<string>;
    channelRoomTypeCode?: Array<string>;
    ratePlanCode?: Array<string>;
    roomTypeCode?: Array<string>;
    corporateId?: string;
    corporateIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRateCodeGlobalDescRequest {
    ratePlanCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRateMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelId?: Array<string>;
    channelCode?: Array<string>;
    ratePlanCodes?: Array<string>;
    channelRatePlanCodes?: Array<string>;
    ratePlanCategories?: Array<string>;
    channelRatePlanCategories?: Array<string>;
    includeUnmappedRatePlans?: boolean;
    onlyUnmappedRatePlans?: boolean;
    includeInactiveMappings?: boolean;
    onlyNegotiatedRates?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRateRoomSeqRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    ratePlanCode?: string;
    roomType?: string;
    channelRatePlanCode?: string;
    channelRoomType?: string;
    channelRateRoomParameterName?: Set<GetChannelRateRoomSeqChannelRateRoomParameterNameEnum>;
    channelRateRoomParameterValue?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRatesGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    ratePlanCodes?: Array<string>;
    roomTypes?: Array<string>;
    globalDescriptionType?: GetChannelRatesGlobalDescriptionsGlobalDescriptionTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRoomMappingRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    bookingChannelCodes?: Array<string>;
    roomTypes?: Array<string>;
    channelRoomTypes?: Array<string>;
    includeInactiveMappings?: boolean;
    includeUnmappedRoomTypes?: boolean;
    onlyUnmappedRoomTypes?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRoomMappingByIdRequest {
    roomTypeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    beginDate?: Date;
    channelRoomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRoomTypeGlobalDescRequest {
    roomType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelRoomsGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    ratePlanCodes?: Array<string>;
    roomTypes?: Array<string>;
    globalDescriptionType?: GetChannelRoomsGlobalDescriptionsGlobalDescriptionTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    limit?: number;
    offset?: number;
    channelCode?: string;
    systemType?: string;
    systemSubType?: string;
    systemRateType?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditCardsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    limit?: number;
    offset?: number;
    systemCode?: string;
    systemType?: string;
    systemSubType?: string;
    systemRateType?: string;
    localSystemCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCurrenciesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    limit?: number;
    offset?: number;
    systemCode?: string;
    systemType?: string;
    systemSubType?: string;
    systemRateType?: string;
    localSystemCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDistributionTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    isChain?: boolean;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    types?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuaranteesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    limit?: number;
    offset?: number;
    systemCode?: string;
    systemType?: string;
    systemSubType?: string;
    systemRateType?: string;
    localSystemCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    inactive?: boolean;
    limit?: number;
    offset?: number;
    systemCode?: string;
    systemType?: string;
    systemSubType?: string;
    systemRateType?: string;
    localSystemCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetStatementDetailsStatisticsRequest {
    statementId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    contractId?: string;
    contractIdType?: string;
    fetchInstructions?: Set<GetStatementDetailsStatisticsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTotalPricingElementsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    elementCodes?: Array<string>;
    transactionCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ManageChannelRoomMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRoomMappings?: ChannelRoomMappings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAmenitiesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    amenities?: Amenities;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelAccountContractsRequest {
    accountProfileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelAccountContracts?: ChannelAccountContracts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelAccountsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelAccounts?: ChannelAccounts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelBillingStatementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelBillingStatements?: ChannelBillingStatements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelCardTypeMappingRequest {
    cardTypeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelCardTypeMappings?: ChannelCardTypeMappings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelCarriersRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelCarriers?: ChannelCarriers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelErrorsRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelErrors?: ChannelErrors;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelGuaranteeCodeMappingRequest {
    guaranteeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGuaranteeCodeMappings?: ChannelGuaranteeCodeMappings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelHotelLettersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelHotelLettersToBeCreated?: ChannelHotelLettersToBeCreated;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelMarketingTextRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelMarketingText?: ChannelMarketingText;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelNegotiatedRateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelNegotiatedRates?: ChannelNegotiatedRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelOrgMappingRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelOrgMapping?: ChannelOrgMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRateCategoriesRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRateCategories?: ChannelRateCategories;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRateLevelsRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRateLevels?: ChannelRateLevels;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRateMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRateMapping?: ChannelRateMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRatesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRates?: ChannelRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRatesGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGlobalDescriptions?: ChannelGlobalDescriptions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRoomMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRoomMappings?: ChannelRoomMappings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRoomTypeRateRequest {
    channelRoomType?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRates?: ChannelRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRoomTypesRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRoomTypes?: ChannelRoomTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelRoomsGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGlobalDescriptions?: ChannelGlobalDescriptions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostChannelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channels?: Channels;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCreditCardsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCards?: CreditCards;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCurrenciesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencies?: Currencies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDistributionTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    distributionTemplates?: DistributionTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuaranteesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guarantees?: Guarantees;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    properties?: Properties;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTotalPricingElementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    totalPricingElements?: TotalPricingElements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PublishChannelAvailabilityRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelAvailability?: ChannelAvailability;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PublishChannelRatePlansRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRatePlans?: ChannelRatePlans;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PublishChannelRestrictionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRestrictions?: ChannelRestrictions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PublishHotelChannelRatePlansRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRatePlans?: ChannelRatePlans;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAmenitiesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    amenities?: Amenities;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelAccountContractsRequest {
    accountProfileId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelAccountContracts?: ChannelAccountContracts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelAccountsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelAccountsToChange?: ChannelAccountsToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelBillingStatementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelBillingStatements?: ChannelBillingStatements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelCardTypeMappingRequest {
    cardTypeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelCardTypeMappings?: ChannelCardTypeMappings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelCarriersRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelCarriers?: ChannelCarriers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelErrorsRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelErrors?: ChannelErrors;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelGuaranteeCodeMappingRequest {
    guaranteeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGuaranteeCodeMappings?: ChannelGuaranteeCodeMappings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelHotelLettersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelHotelLettersToBeChanged?: ChannelHotelLettersToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelMarketingTextRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelMarketingTextToChange?: ChannelMarketingTextToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelNegotiatedRateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelNegotiatedRates?: ChannelNegotiatedRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelOrgMappingRequest {
    tenantCode?: string;
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelOrgMapping?: ChannelOrgMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelParametersRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeChannelParameters?: ChangeChannelParameters;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRateCategoriesRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRateCategories?: ChannelRateCategories;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRateLevelsRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRateLevels?: ChannelRateLevels;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRateMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRateMapping?: ChannelRateMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRateRoomSeqRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRateRoomSequence?: ChannelRateRoomSequence;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRatesGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGlobalDescriptions?: ChannelGlobalDescriptions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRoomMappingRequest {
    roomTypeCode?: string;
    channelCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRoomMapping?: ChannelRoomMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRoomTypesRequest {
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelRoomTypes?: ChannelRoomTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelRoomsGlobalDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGlobalDescriptions?: ChannelGlobalDescriptions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutChannelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channels?: Channels;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCreditCardsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    creditCards?: CreditCards;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCurrenciesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencies?: Currencies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDistributionTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    distributionTemplates?: DistributionTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGuaranteesMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guarantees?: Guarantees;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutHotelsMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    properties?: Properties;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRateGlobalDescriptionRequest {
    channelRateCode?: string;
    channelCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGlobalDescription?: ChannelGlobalDescription;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomDescriptionRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelGlobalDescription?: ChannelGlobalDescription;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTotalPricingElementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    totalPricingElements?: TotalPricingElements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChannelApi extends runtime.BaseAPI {

    /**
     * This API creates copy of channel account contracts. <p><strong>OperationId:</strong>copyChannelAccountContracts</p>
     * Creates copy of channel account contracts
     */
    async copyChannelAccountContractsRaw(requestParameters: CopyChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelAccountContractsDetailsCopy>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyChannelAccountContracts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyChannelAccountContracts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyChannelAccountContracts.');
        }

        if (requestParameters.channelAccountContractsCopy === null || requestParameters.channelAccountContractsCopy === undefined) {
            throw new runtime.RequiredError('channelAccountContractsCopy','Required parameter requestParameters.channelAccountContractsCopy was null or undefined when calling copyChannelAccountContracts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/account/contracts/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelAccountContractsCopyToJSON(requestParameters.channelAccountContractsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelAccountContractsDetailsCopyFromJSON(jsonValue));
    }

    /**
     * This API creates copy of channel account contracts. <p><strong>OperationId:</strong>copyChannelAccountContracts</p>
     * Creates copy of channel account contracts
     */
    async copyChannelAccountContracts(requestParameters: CopyChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelAccountContractsDetailsCopy> {
        const response = await this.copyChannelAccountContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to copy one channel\'s mapping for marketing messages to another channel and hotel mapping. <p><strong>OperationId:</strong>copyChannelMarketingText</p>
     * Allows to copy marketing message to another channel and hotel
     */
    async copyChannelMarketingTextRaw(requestParameters: CopyChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyChannelMarketingText.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyChannelMarketingText.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyChannelMarketingText.');
        }

        if (requestParameters.channelMarketingTextCopy === null || requestParameters.channelMarketingTextCopy === undefined) {
            throw new runtime.RequiredError('channelMarketingTextCopy','Required parameter requestParameters.channelMarketingTextCopy was null or undefined when calling copyChannelMarketingText.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/marketingText/copy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelMarketingTextCopyToJSON(requestParameters.channelMarketingTextCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to copy one channel\'s mapping for marketing messages to another channel and hotel mapping. <p><strong>OperationId:</strong>copyChannelMarketingText</p>
     * Allows to copy marketing message to another channel and hotel
     */
    async copyChannelMarketingText(requestParameters: CopyChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyChannelMarketingTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to copy global distribution system\'s fee and tax configurations from one hotel to another hotel within same chain/tenant <p><strong>OperationId:</strong>copyTotalPricingElements</p>
     * Allows to copy total pricing tax and fees to another hotel id
     */
    async copyTotalPricingElementsRaw(requestParameters: CopyTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyTotalPricingElements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyTotalPricingElements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyTotalPricingElements.');
        }

        if (requestParameters.totalPricingElementsCopy === null || requestParameters.totalPricingElementsCopy === undefined) {
            throw new runtime.RequiredError('totalPricingElementsCopy','Required parameter requestParameters.totalPricingElementsCopy was null or undefined when calling copyTotalPricingElements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/totalPricing/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TotalPricingElementsCopyToJSON(requestParameters.totalPricingElementsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to copy global distribution system\'s fee and tax configurations from one hotel to another hotel within same chain/tenant <p><strong>OperationId:</strong>copyTotalPricingElements</p>
     * Allows to copy total pricing tax and fees to another hotel id
     */
    async copyTotalPricingElements(requestParameters: CopyTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTotalPricingElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel amenities mapping <p><strong>OperationId:</strong>deleteAmenitiesMapping</p>
     * Deletes channel amenities configuration
     */
    async deleteAmenitiesMappingRaw(requestParameters: DeleteAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteAmenitiesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteAmenitiesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteAmenitiesMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemName !== undefined) {
            queryParameters['systemName'] = requestParameters.systemName;
        }

        if (requestParameters.websiteURL !== undefined) {
            queryParameters['websiteURL'] = requestParameters.websiteURL;
        }

        if (requestParameters.iconURL !== undefined) {
            queryParameters['iconURL'] = requestParameters.iconURL;
        }

        if (requestParameters.localSystemCode) {
            queryParameters['localSystemCode'] = requestParameters.localSystemCode;
        }

        if (requestParameters.externalSystemCode) {
            queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.amenityGroup) {
            queryParameters['amenityGroup'] = requestParameters.amenityGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/amenities`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel amenities mapping <p><strong>OperationId:</strong>deleteAmenitiesMapping</p>
     * Deletes channel amenities configuration
     */
    async deleteAmenitiesMapping(requestParameters: DeleteAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAmenitiesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API deletes channel account contracts. <p><strong>OperationId:</strong>deleteChannelAccountContracts</p>
     * Deletes channel account contracts.
     */
    async deleteChannelAccountContractsRaw(requestParameters: DeleteChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelAccountContracts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelAccountContracts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelAccountContracts.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.id1) {
            queryParameters['id1'] = requestParameters.id1;
        }

        if (requestParameters.idExtension1) {
            queryParameters['idExtension1'] = requestParameters.idExtension1;
        }

        if (requestParameters.idContext1) {
            queryParameters['idContext1'] = requestParameters.idContext1;
        }

        if (requestParameters.type1) {
            queryParameters['type1'] = requestParameters.type1;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/account/contracts`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API deletes channel account contracts. <p><strong>OperationId:</strong>deleteChannelAccountContracts</p>
     * Deletes channel account contracts.
     */
    async deleteChannelAccountContracts(requestParameters: DeleteChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelAccountContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API deletes channel billing statements. <p><strong>OperationId:</strong>deleteChannelBillingStatements</p>
     * Deletes channel billing statements.
     */
    async deleteChannelBillingStatementsRaw(requestParameters: DeleteChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelBillingStatements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelBillingStatements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelBillingStatements.');
        }

        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API deletes channel billing statements. <p><strong>OperationId:</strong>deleteChannelBillingStatements</p>
     * Deletes channel billing statements.
     */
    async deleteChannelBillingStatements(requestParameters: DeleteChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelBillingStatementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>deleteChannelCardTypeMapping</p>
     * Deletes channel credit card mapping for a hotel
     */
    async deleteChannelCardTypeMappingRaw(requestParameters: DeleteChannelCardTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cardTypeCode === null || requestParameters.cardTypeCode === undefined) {
            throw new runtime.RequiredError('cardTypeCode','Required parameter requestParameters.cardTypeCode was null or undefined when calling deleteChannelCardTypeMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelCardTypeMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteChannelCardTypeMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelCardTypeMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelCardTypeMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelCardTypeMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.channelCardType !== undefined) {
            queryParameters['channelCardType'] = requestParameters.channelCardType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/cardType/{cardTypeCode}`.replace(`{${"cardTypeCode"}}`, encodeURIComponent(String(requestParameters.cardTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>deleteChannelCardTypeMapping</p>
     * Deletes channel credit card mapping for a hotel
     */
    async deleteChannelCardTypeMapping(requestParameters: DeleteChannelCardTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelCardTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete sub-channel (carrier) configuration for a given channel code. <p><strong>OperationId:</strong>deleteChannelCarriers</p>
     * Deletes sub channel configuration
     */
    async deleteChannelCarriersRaw(requestParameters: DeleteChannelCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
            throw new runtime.RequiredError('bookingChannelCodes','Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelCarriers.');
        }

        if (requestParameters.carriers === null || requestParameters.carriers === undefined) {
            throw new runtime.RequiredError('carriers','Required parameter requestParameters.carriers was null or undefined when calling deleteChannelCarriers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelCarriers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelCarriers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelCarriers.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.carriers) {
            queryParameters['carriers'] = requestParameters.carriers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/subChannels`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete sub-channel (carrier) configuration for a given channel code. <p><strong>OperationId:</strong>deleteChannelCarriers</p>
     * Deletes sub channel configuration
     */
    async deleteChannelCarriers(requestParameters: DeleteChannelCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelCarriersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel error code mapping configurations. <p><strong>OperationId:</strong>deleteChannelErrors</p>
     * Deletes channel error codes
     */
    async deleteChannelErrorsRaw(requestParameters: DeleteChannelErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelErrors.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelErrors.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelErrors.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingChannelCode) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.error) {
            queryParameters['error'] = requestParameters.error;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/errorCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel error code mapping configurations. <p><strong>OperationId:</strong>deleteChannelErrors</p>
     * Deletes channel error codes
     */
    async deleteChannelErrors(requestParameters: DeleteChannelErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelErrorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel guarantee code mapping to OPERA guarantee code for a given property. <p><strong>OperationId:</strong>deleteChannelGuaranteeCodeMapping</p>
     * Deletes channel guarantee code mapping for a hotel
     */
    async deleteChannelGuaranteeCodeMappingRaw(requestParameters: DeleteChannelGuaranteeCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelGuaranteeCodeMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/guarantees/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel guarantee code mapping to OPERA guarantee code for a given property. <p><strong>OperationId:</strong>deleteChannelGuaranteeCodeMapping</p>
     * Deletes channel guarantee code mapping for a hotel
     */
    async deleteChannelGuaranteeCodeMapping(requestParameters: DeleteChannelGuaranteeCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel property confirmation letter configuration. <p><strong>OperationId:</strong>deleteChannelHotelLetters</p>
     * Deletes channel property confirmation letter mapping
     */
    async deleteChannelHotelLettersRaw(requestParameters: DeleteChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelHotelLetters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelHotelLetters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelHotelLetters.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code1 !== undefined) {
            queryParameters['code1'] = requestParameters.code1;
        }

        if (requestParameters.description1 !== undefined) {
            queryParameters['description1'] = requestParameters.description1;
        }

        if (requestParameters.letterType) {
            queryParameters['letterType'] = requestParameters.letterType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/confirmationLetters`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel property confirmation letter configuration. <p><strong>OperationId:</strong>deleteChannelHotelLetters</p>
     * Deletes channel property confirmation letter mapping
     */
    async deleteChannelHotelLetters(requestParameters: DeleteChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelHotelLettersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel mapping for marketing messages. <p><strong>OperationId:</strong>deleteChannelMarketingText</p>
     * Deletes channel marketing messages
     */
    async deleteChannelMarketingTextRaw(requestParameters: DeleteChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelMarketingText.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelMarketingText.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelMarketingText.');
        }

        const queryParameters: any = {};

        if (requestParameters.beginDate) {
            queryParameters['beginDate'] = requestParameters.beginDate;
        }

        if (requestParameters.bookingChannelCode) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.endDate) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.globalTextYN) {
            queryParameters['globalTextYN'] = requestParameters.globalTextYN;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.marketingText) {
            queryParameters['marketingText'] = requestParameters.marketingText;
        }

        if (requestParameters.policyDetail) {
            queryParameters['policyDetail'] = requestParameters.policyDetail;
        }

        if (requestParameters.policyType) {
            queryParameters['policyType'] = requestParameters.policyType;
        }

        if (requestParameters.transactionType) {
            queryParameters['transactionType'] = requestParameters.transactionType;
        }

        if (requestParameters.newHotelId) {
            queryParameters['newHotelId'] = requestParameters.newHotelId;
        }

        if (requestParameters.newTransactionType) {
            queryParameters['newTransactionType'] = requestParameters.newTransactionType;
        }

        if (requestParameters.newPolicyType) {
            queryParameters['newPolicyType'] = requestParameters.newPolicyType;
        }

        if (requestParameters.newPolicyDetail) {
            queryParameters['newPolicyDetail'] = requestParameters.newPolicyDetail;
        }

        if (requestParameters.newBeginDate) {
            queryParameters['newBeginDate'] = requestParameters.newBeginDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/marketingText`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel mapping for marketing messages. <p><strong>OperationId:</strong>deleteChannelMarketingText</p>
     * Deletes channel marketing messages
     */
    async deleteChannelMarketingText(requestParameters: DeleteChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelMarketingTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>deleteChannelNegotiatedRate</p>
     * Deletes channel negotiate rate
     */
    async deleteChannelNegotiatedRateRaw(requestParameters: DeleteChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelNegotiatedRate.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelNegotiatedRate.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelNegotiatedRate.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.channelRatePlanCode !== undefined) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.externalSystem !== undefined) {
            queryParameters['externalSystem'] = requestParameters.externalSystem;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.nameType !== undefined) {
            queryParameters['nameType'] = requestParameters.nameType;
        }

        if (requestParameters.namePrefix !== undefined) {
            queryParameters['namePrefix'] = requestParameters.namePrefix;
        }

        if (requestParameters.givenName !== undefined) {
            queryParameters['givenName'] = requestParameters.givenName;
        }

        if (requestParameters.middleName !== undefined) {
            queryParameters['middleName'] = requestParameters.middleName;
        }

        if (requestParameters.surname !== undefined) {
            queryParameters['surname'] = requestParameters.surname;
        }

        if (requestParameters.nameSuffix !== undefined) {
            queryParameters['nameSuffix'] = requestParameters.nameSuffix;
        }

        if (requestParameters.nameTitle !== undefined) {
            queryParameters['nameTitle'] = requestParameters.nameTitle;
        }

        if (requestParameters.nameTitleSuffix !== undefined) {
            queryParameters['nameTitleSuffix'] = requestParameters.nameTitleSuffix;
        }

        if (requestParameters.envelopeGreeting !== undefined) {
            queryParameters['envelopeGreeting'] = requestParameters.envelopeGreeting;
        }

        if (requestParameters.salutation !== undefined) {
            queryParameters['salutation'] = requestParameters.salutation;
        }

        if (requestParameters.accessCode) {
            queryParameters['accessCode'] = requestParameters.accessCode;
        }

        if (requestParameters.end) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.start) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.newAccessCode !== undefined) {
            queryParameters['newAccessCode'] = requestParameters.newAccessCode;
        }

        if (requestParameters.channelRatePlanCodeOrder !== undefined) {
            queryParameters['channelRatePlanCodeOrder'] = requestParameters.channelRatePlanCodeOrder;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/negotiatedRates`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>deleteChannelNegotiatedRate</p>
     * Deletes channel negotiate rate
     */
    async deleteChannelNegotiatedRate(requestParameters: DeleteChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelNegotiatedRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API deletes channel tenants mapping. <p><strong>OperationId:</strong>deleteChannelOrgMapping</p>
     * Deletes channel tenants mapping.
     */
    async deleteChannelOrgMappingRaw(requestParameters: DeleteChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.tenantCode === null || requestParameters.tenantCode === undefined) {
            throw new runtime.RequiredError('tenantCode','Required parameter requestParameters.tenantCode was null or undefined when calling deleteChannelOrgMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelOrgMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelOrgMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelOrgMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelOrgMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.chainCode !== undefined) {
            queryParameters['chainCode'] = requestParameters.chainCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/tenants/{tenantCode}`.replace(`{${"tenantCode"}}`, encodeURIComponent(String(requestParameters.tenantCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API deletes channel tenants mapping. <p><strong>OperationId:</strong>deleteChannelOrgMapping</p>
     * Deletes channel tenants mapping.
     */
    async deleteChannelOrgMapping(requestParameters: DeleteChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelOrgMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel rate categories for a given channel. <p><strong>OperationId:</strong>deleteChannelRateCategories</p>
     * Deletes given channel\'s rate categories
     */
    async deleteChannelRateCategoriesRaw(requestParameters: DeleteChannelRateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
            throw new runtime.RequiredError('bookingChannelCodes','Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelRateCategories.');
        }

        if (requestParameters.rateCategories === null || requestParameters.rateCategories === undefined) {
            throw new runtime.RequiredError('rateCategories','Required parameter requestParameters.rateCategories was null or undefined when calling deleteChannelRateCategories.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelRateCategories.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelRateCategories.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelRateCategories.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.rateCategories) {
            queryParameters['rateCategories'] = requestParameters.rateCategories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rateCategories`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel rate categories for a given channel. <p><strong>OperationId:</strong>deleteChannelRateCategories</p>
     * Deletes given channel\'s rate categories
     */
    async deleteChannelRateCategories(requestParameters: DeleteChannelRateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelRateCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel rate level code\'s description. <p><strong>OperationId:</strong>deleteChannelRateLevels</p>
     * Deletes channel rate level
     */
    async deleteChannelRateLevelsRaw(requestParameters: DeleteChannelRateLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
            throw new runtime.RequiredError('bookingChannelCodes','Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelRateLevels.');
        }

        if (requestParameters.rateLevels === null || requestParameters.rateLevels === undefined) {
            throw new runtime.RequiredError('rateLevels','Required parameter requestParameters.rateLevels was null or undefined when calling deleteChannelRateLevels.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelRateLevels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelRateLevels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelRateLevels.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.rateLevels) {
            queryParameters['rateLevels'] = requestParameters.rateLevels;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rateLevels`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel rate level code\'s description. <p><strong>OperationId:</strong>deleteChannelRateLevels</p>
     * Deletes channel rate level
     */
    async deleteChannelRateLevels(requestParameters: DeleteChannelRateLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelRateLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>deleteChannelRateMapping</p>
     * Deletes channel property rate mapping
     */
    async deleteChannelRateMappingRaw(requestParameters: DeleteChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelRateMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelRateMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelRateMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingChannelCode) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.channelRatePlanCode) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.hasChannelNegotiatedRates) {
            queryParameters['hasChannelNegotiatedRates'] = requestParameters.hasChannelNegotiatedRates;
        }

        if (requestParameters.hasNegotiatedRates) {
            queryParameters['hasNegotiatedRates'] = requestParameters.hasNegotiatedRates;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>deleteChannelRateMapping</p>
     * Deletes channel property rate mapping
     */
    async deleteChannelRateMapping(requestParameters: DeleteChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelRateMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>deleteChannelRatesGlobalDescriptions</p>
     * Deletes global rate descriptions
     */
    async deleteChannelRatesGlobalDescriptionsRaw(requestParameters: DeleteChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelRatesGlobalDescriptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.code1 !== undefined) {
            queryParameters['code1'] = requestParameters.code1;
        }

        if (requestParameters.description1 !== undefined) {
            queryParameters['description1'] = requestParameters.description1;
        }

        if (requestParameters.globalDescType) {
            queryParameters['globalDescType'] = requestParameters.globalDescType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates/globalDescriptions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>deleteChannelRatesGlobalDescriptions</p>
     * Deletes global rate descriptions
     */
    async deleteChannelRatesGlobalDescriptions(requestParameters: DeleteChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>deleteChannelRoomMapping</p>
     * Deletes channel property room mapping
     */
    async deleteChannelRoomMappingRaw(requestParameters: DeleteChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
            throw new runtime.RequiredError('roomTypeCode','Required parameter requestParameters.roomTypeCode was null or undefined when calling deleteChannelRoomMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling deleteChannelRoomMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteChannelRoomMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelRoomMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelRoomMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelRoomMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.beginDate !== undefined) {
            queryParameters['beginDate'] = (requestParameters.beginDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.channelRoomType !== undefined) {
            queryParameters['channelRoomType'] = requestParameters.channelRoomType;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>deleteChannelRoomMapping</p>
     * Deletes channel property room mapping
     */
    async deleteChannelRoomMapping(requestParameters: DeleteChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelRoomMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel configuration. <p><strong>OperationId:</strong>deleteChannelRoomTypes</p>
     * Delete channel configuration
     */
    async deleteChannelRoomTypesRaw(requestParameters: DeleteChannelRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.bookingChannelCodes === null || requestParameters.bookingChannelCodes === undefined) {
            throw new runtime.RequiredError('bookingChannelCodes','Required parameter requestParameters.bookingChannelCodes was null or undefined when calling deleteChannelRoomTypes.');
        }

        if (requestParameters.roomTypes === null || requestParameters.roomTypes === undefined) {
            throw new runtime.RequiredError('roomTypes','Required parameter requestParameters.roomTypes was null or undefined when calling deleteChannelRoomTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelRoomTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelRoomTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelRoomTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/roomTypes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel configuration. <p><strong>OperationId:</strong>deleteChannelRoomTypes</p>
     * Delete channel configuration
     */
    async deleteChannelRoomTypes(requestParameters: DeleteChannelRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelRoomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete global room description for given hotel id and room type code. <p><strong>OperationId:</strong>deleteChannelRoomsGlobalDescriptions</p>
     * Deletes global room descriptions
     */
    async deleteChannelRoomsGlobalDescriptionsRaw(requestParameters: DeleteChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteChannelRoomsGlobalDescriptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.code1 !== undefined) {
            queryParameters['code1'] = requestParameters.code1;
        }

        if (requestParameters.description1 !== undefined) {
            queryParameters['description1'] = requestParameters.description1;
        }

        if (requestParameters.globalDescType) {
            queryParameters['globalDescType'] = requestParameters.globalDescType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rooms/globalDescriptions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete global room description for given hotel id and room type code. <p><strong>OperationId:</strong>deleteChannelRoomsGlobalDescriptions</p>
     * Deletes global room descriptions
     */
    async deleteChannelRoomsGlobalDescriptions(requestParameters: DeleteChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>deleteCreditCardsMapping</p>
     * Deletes channel credit card mapping
     */
    async deleteCreditCardsMappingRaw(requestParameters: DeleteCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCreditCardsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCreditCardsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCreditCardsMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemName !== undefined) {
            queryParameters['systemName'] = requestParameters.systemName;
        }

        if (requestParameters.websiteURL !== undefined) {
            queryParameters['websiteURL'] = requestParameters.websiteURL;
        }

        if (requestParameters.iconURL !== undefined) {
            queryParameters['iconURL'] = requestParameters.iconURL;
        }

        if (requestParameters.localSystemCode) {
            queryParameters['localSystemCode'] = requestParameters.localSystemCode;
        }

        if (requestParameters.externalSystemCode) {
            queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/cardTypes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>deleteCreditCardsMapping</p>
     * Deletes channel credit card mapping
     */
    async deleteCreditCardsMapping(requestParameters: DeleteCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCreditCardsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>deleteCurrenciesMapping</p>
     * Deletes channel currency code mapping
     */
    async deleteCurrenciesMappingRaw(requestParameters: DeleteCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCurrenciesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCurrenciesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCurrenciesMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemName !== undefined) {
            queryParameters['systemName'] = requestParameters.systemName;
        }

        if (requestParameters.websiteURL !== undefined) {
            queryParameters['websiteURL'] = requestParameters.websiteURL;
        }

        if (requestParameters.iconURL !== undefined) {
            queryParameters['iconURL'] = requestParameters.iconURL;
        }

        if (requestParameters.localSystemCode) {
            queryParameters['localSystemCode'] = requestParameters.localSystemCode;
        }

        if (requestParameters.externalSystemCode) {
            queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.lanyonDecimalPosition) {
            queryParameters['lanyonDecimalPosition'] = requestParameters.lanyonDecimalPosition;
        }

        if (requestParameters.channelDecimalPosition) {
            queryParameters['channelDecimalPosition'] = requestParameters.channelDecimalPosition;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/currencies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>deleteCurrenciesMapping</p>
     * Deletes channel currency code mapping
     */
    async deleteCurrenciesMapping(requestParameters: DeleteCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCurrenciesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete existing distribution rate template. <p><strong>OperationId:</strong>deleteDistributionTemplates</p>
     * Deletes rate templates configurations
     */
    async deleteDistributionTemplatesRaw(requestParameters: DeleteDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDistributionTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteDistributionTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteDistributionTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/distributionTemplates`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete existing distribution rate template. <p><strong>OperationId:</strong>deleteDistributionTemplates</p>
     * Deletes rate templates configurations
     */
    async deleteDistributionTemplates(requestParameters: DeleteDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDistributionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteesMapping</p>
     * Deletes channel guarantee code mapping
     */
    async deleteGuaranteesMappingRaw(requestParameters: DeleteGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteGuaranteesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteGuaranteesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteGuaranteesMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemName !== undefined) {
            queryParameters['systemName'] = requestParameters.systemName;
        }

        if (requestParameters.websiteURL !== undefined) {
            queryParameters['websiteURL'] = requestParameters.websiteURL;
        }

        if (requestParameters.iconURL !== undefined) {
            queryParameters['iconURL'] = requestParameters.iconURL;
        }

        if (requestParameters.localSystemCode) {
            queryParameters['localSystemCode'] = requestParameters.localSystemCode;
        }

        if (requestParameters.externalSystemCode) {
            queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.requirementCode) {
            queryParameters['requirementCode'] = requestParameters.requirementCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/guarantees`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteesMapping</p>
     * Deletes channel guarantee code mapping
     */
    async deleteGuaranteesMapping(requestParameters: DeleteGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuaranteesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>deleteHotelsMapping</p>
     * Deletes channel hotel mapping
     */
    async deleteHotelsMappingRaw(requestParameters: DeleteHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteHotelsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteHotelsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteHotelsMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemName !== undefined) {
            queryParameters['systemName'] = requestParameters.systemName;
        }

        if (requestParameters.websiteURL !== undefined) {
            queryParameters['websiteURL'] = requestParameters.websiteURL;
        }

        if (requestParameters.iconURL !== undefined) {
            queryParameters['iconURL'] = requestParameters.iconURL;
        }

        if (requestParameters.localSystemCode) {
            queryParameters['localSystemCode'] = requestParameters.localSystemCode;
        }

        if (requestParameters.externalSystemCode) {
            queryParameters['externalSystemCode'] = requestParameters.externalSystemCode;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.city) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.roomLimit) {
            queryParameters['roomLimit'] = requestParameters.roomLimit;
        }

        if (requestParameters.bookingLimit) {
            queryParameters['bookingLimit'] = requestParameters.bookingLimit;
        }

        if (requestParameters.hotelChainId) {
            queryParameters['hotelChainId'] = requestParameters.hotelChainId;
        }

        if (requestParameters.chainCode) {
            queryParameters['chainCode'] = requestParameters.chainCode;
        }

        if (requestParameters.prevailingRates) {
            queryParameters['prevailingRates'] = requestParameters.prevailingRates;
        }

        if (requestParameters.aRIEnabled) {
            queryParameters['aRIEnabled'] = requestParameters.aRIEnabled;
        }

        if (requestParameters.addOnLicense) {
            queryParameters['addOnLicense'] = requestParameters.addOnLicense;
        }

        if (requestParameters.available !== undefined) {
            queryParameters['available'] = requestParameters.available;
        }

        if (requestParameters.defaultRateCode !== undefined) {
            queryParameters['defaultRateCode'] = requestParameters.defaultRateCode;
        }

        if (requestParameters.defaultRateCode1) {
            queryParameters['defaultRateCode1'] = requestParameters.defaultRateCode1;
        }

        if (requestParameters.lowRevenueThreshold) {
            queryParameters['lowRevenueThreshold'] = requestParameters.lowRevenueThreshold;
        }

        if (requestParameters.highRevenueThreshold) {
            queryParameters['highRevenueThreshold'] = requestParameters.highRevenueThreshold;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/hotels`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>deleteHotelsMapping</p>
     * Deletes channel hotel mapping
     */
    async deleteHotelsMapping(requestParameters: DeleteHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHotelsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>deleteTotalPricingElements</p>
     * Deletes total pricing tax and fee types
     */
    async deleteTotalPricingElementsRaw(requestParameters: DeleteTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteTotalPricingElements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteTotalPricingElements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteTotalPricingElements.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/totalPricing`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>deleteTotalPricingElements</p>
     * Deletes total pricing tax and fee types
     */
    async deleteTotalPricingElements(requestParameters: DeleteTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTotalPricingElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API generates channel billing statements. <p><strong>OperationId:</strong>generateChannelBillingStatements</p>
     * This API generates channel billing statements.
     */
    async generateChannelBillingStatementsRaw(requestParameters: GenerateChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling generateChannelBillingStatements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling generateChannelBillingStatements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling generateChannelBillingStatements.');
        }

        if (requestParameters.channelBillingStatements === null || requestParameters.channelBillingStatements === undefined) {
            throw new runtime.RequiredError('channelBillingStatements','Required parameter requestParameters.channelBillingStatements was null or undefined when calling generateChannelBillingStatements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements/generate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelBillingStatementsToJSON(requestParameters.channelBillingStatements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API generates channel billing statements. <p><strong>OperationId:</strong>generateChannelBillingStatements</p>
     * This API generates channel billing statements.
     */
    async generateChannelBillingStatements(requestParameters: GenerateChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.generateChannelBillingStatementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel amenities mapping. <p><strong>OperationId:</strong>getAmenitiesMapping</p>
     * Gets channel amenities configuration
     */
    async getAmenitiesMappingRaw(requestParameters: GetAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AmenitiesMapping>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAmenitiesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAmenitiesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAmenitiesMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemRateType !== undefined) {
            queryParameters['systemRateType'] = requestParameters.systemRateType;
        }

        if (requestParameters.localSystemCodes) {
            queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/amenities/mapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AmenitiesMappingFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel amenities mapping. <p><strong>OperationId:</strong>getAmenitiesMapping</p>
     * Gets channel amenities configuration
     */
    async getAmenitiesMapping(requestParameters: GetAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AmenitiesMapping> {
        const response = await this.getAmenitiesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves channel information for the given channel code. <p><strong>OperationId:</strong>getChannel</p>
     * Gets channel detail
     */
    async getChannelRaw(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channel>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannel.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannel.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannel.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannel.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeInactive) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelFromJSON(jsonValue));
    }

    /**
     * This API retrieves channel information for the given channel code. <p><strong>OperationId:</strong>getChannel</p>
     * Gets channel detail
     */
    async getChannel(requestParameters: GetChannelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channel> {
        const response = await this.getChannelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get existing channel account for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccount</p>
     * Gets channel accounts
     */
    async getChannelAccountRaw(requestParameters: GetChannelAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelAccount>> {
        if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
            throw new runtime.RequiredError('accountProfileId','Required parameter requestParameters.accountProfileId was null or undefined when calling getChannelAccount.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelAccount.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelAccount.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelAccount.');
        }

        const queryParameters: any = {};

        if (requestParameters.markAsRecentlyAccessed !== undefined) {
            queryParameters['markAsRecentlyAccessed'] = requestParameters.markAsRecentlyAccessed;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/accounts/{accountProfileId}`.replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelAccountFromJSON(jsonValue));
    }

    /**
     * Use this API to get existing channel account for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccount</p>
     * Gets channel accounts
     */
    async getChannelAccount(requestParameters: GetChannelAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelAccount> {
        const response = await this.getChannelAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get existing cannel account contract for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccountContractElements</p>
     * Gets channel account contracts for given profile Id.
     */
    async getChannelAccountContractElementsRaw(requestParameters: GetChannelAccountContractElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelAccountContractElements>> {
        if (requestParameters.contractId === null || requestParameters.contractId === undefined) {
            throw new runtime.RequiredError('contractId','Required parameter requestParameters.contractId was null or undefined when calling getChannelAccountContractElements.');
        }

        if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
            throw new runtime.RequiredError('accountProfileId','Required parameter requestParameters.accountProfileId was null or undefined when calling getChannelAccountContractElements.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelAccountContractElements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelAccountContractElements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelAccountContractElements.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/accounts/{accountProfileId}/contracts/{contractId}`.replace(`{${"contractId"}}`, encodeURIComponent(String(requestParameters.contractId))).replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelAccountContractElementsFromJSON(jsonValue));
    }

    /**
     * Use this API to get existing cannel account contract for a given OPERA profile id. <p><strong>OperationId:</strong>getChannelAccountContractElements</p>
     * Gets channel account contracts for given profile Id.
     */
    async getChannelAccountContractElements(requestParameters: GetChannelAccountContractElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelAccountContractElements> {
        const response = await this.getChannelAccountContractElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves channel accounts. <p><strong>OperationId:</strong>getChannelAccounts</p>
     * This API retrieves channel accounts.
     */
    async getChannelAccountsRaw(requestParameters: GetChannelAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelAccountsSummary>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelAccounts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelAccounts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelAccounts.');
        }

        const queryParameters: any = {};

        if (requestParameters.excludeInactive !== undefined) {
            queryParameters['excludeInactive'] = requestParameters.excludeInactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.accountName !== undefined) {
            queryParameters['accountName'] = requestParameters.accountName;
        }

        if (requestParameters.accountCode !== undefined) {
            queryParameters['accountCode'] = requestParameters.accountCode;
        }

        if (requestParameters.contractExpInDays !== undefined) {
            queryParameters['contractExpInDays'] = requestParameters.contractExpInDays;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelAccountsSummaryFromJSON(jsonValue));
    }

    /**
     * This API retrieves channel accounts. <p><strong>OperationId:</strong>getChannelAccounts</p>
     * This API retrieves channel accounts.
     */
    async getChannelAccounts(requestParameters: GetChannelAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelAccountsSummary> {
        const response = await this.getChannelAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves channel billing statement for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatement</p>
     * Retrieves channel billing statement for a given statement Id
     */
    async getChannelBillingStatementRaw(requestParameters: GetChannelBillingStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelBillingStatement>> {
        if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
            throw new runtime.RequiredError('statementId','Required parameter requestParameters.statementId was null or undefined when calling getChannelBillingStatement.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelBillingStatement.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelBillingStatement.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelBillingStatement.');
        }

        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.idType !== undefined) {
            queryParameters['idType'] = requestParameters.idType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements/{statementId}`.replace(`{${"statementId"}}`, encodeURIComponent(String(requestParameters.statementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelBillingStatementFromJSON(jsonValue));
    }

    /**
     * This API retrieves channel billing statement for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatement</p>
     * Retrieves channel billing statement for a given statement Id
     */
    async getChannelBillingStatement(requestParameters: GetChannelBillingStatementRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelBillingStatement> {
        const response = await this.getChannelBillingStatementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves channel billing statement details for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatementDetails</p>
     * Retrieves channel billing statement details for a given statement Id
     */
    async getChannelBillingStatementDetailsRaw(requestParameters: GetChannelBillingStatementDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelBillingStatementDetails>> {
        if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
            throw new runtime.RequiredError('statementId','Required parameter requestParameters.statementId was null or undefined when calling getChannelBillingStatementDetails.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelBillingStatementDetails.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelBillingStatementDetails.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelBillingStatementDetails.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.contractId !== undefined) {
            queryParameters['contractId'] = requestParameters.contractId;
        }

        if (requestParameters.contractIdType !== undefined) {
            queryParameters['contractIdType'] = requestParameters.contractIdType;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements/{statementId}/details`.replace(`{${"statementId"}}`, encodeURIComponent(String(requestParameters.statementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelBillingStatementDetailsFromJSON(jsonValue));
    }

    /**
     * This API retrieves channel billing statement details for a given statement Id. <p><strong>OperationId:</strong>getChannelBillingStatementDetails</p>
     * Retrieves channel billing statement details for a given statement Id
     */
    async getChannelBillingStatementDetails(requestParameters: GetChannelBillingStatementDetailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelBillingStatementDetails> {
        const response = await this.getChannelBillingStatementDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves channel billing statements. <p><strong>OperationId:</strong>getChannelBillingStatements</p>
     * Retrieves channel billing statements.
     */
    async getChannelBillingStatementsRaw(requestParameters: GetChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelBillingStatementSummaries>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelBillingStatements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelBillingStatements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelBillingStatements.');
        }

        const queryParameters: any = {};

        if (requestParameters.includeLocked !== undefined) {
            queryParameters['includeLocked'] = requestParameters.includeLocked;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.statementId !== undefined) {
            queryParameters['statementId'] = requestParameters.statementId;
        }

        if (requestParameters.statementIdType !== undefined) {
            queryParameters['statementIdType'] = requestParameters.statementIdType;
        }

        if (requestParameters.beginDate !== undefined) {
            queryParameters['beginDate'] = (requestParameters.beginDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.profileId) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.profileIdType) {
            queryParameters['profileIdType'] = requestParameters.profileIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelBillingStatementSummariesFromJSON(jsonValue));
    }

    /**
     * This API retrieves channel billing statements. <p><strong>OperationId:</strong>getChannelBillingStatements</p>
     * Retrieves channel billing statements.
     */
    async getChannelBillingStatements(requestParameters: GetChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelBillingStatementSummaries> {
        const response = await this.getChannelBillingStatementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>getChannelCardTypeMappings</p>
     * Gets channel credit card mapping for a hotel
     */
    async getChannelCardTypeMappingsRaw(requestParameters: GetChannelCardTypeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelCardTypeMappingDetails>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getChannelCardTypeMappings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelCardTypeMappings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelCardTypeMappings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelCardTypeMappings.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.cardTypes) {
            queryParameters['cardTypes'] = requestParameters.cardTypes;
        }

        if (requestParameters.channelCardTypes) {
            queryParameters['channelCardTypes'] = requestParameters.channelCardTypes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.fetchUnmapped !== undefined) {
            queryParameters['fetchUnmapped'] = requestParameters.fetchUnmapped;
        }

        if (requestParameters.fetchMapped !== undefined) {
            queryParameters['fetchMapped'] = requestParameters.fetchMapped;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/cardType/mappings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelCardTypeMappingDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel mapping for OPERA credit cards to channel for a given hotel id. <p><strong>OperationId:</strong>getChannelCardTypeMappings</p>
     * Gets channel credit card mapping for a hotel
     */
    async getChannelCardTypeMappings(requestParameters: GetChannelCardTypeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelCardTypeMappingDetails> {
        const response = await this.getChannelCardTypeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API  to get the list of the channel guarantee code mappings to the OPERA guarantee codes. <p><strong>OperationId:</strong>getChannelGuaranteeCodeMappings</p>
     * Gets channel guarantee code mappings
     */
    async getChannelGuaranteeCodeMappingsRaw(requestParameters: GetChannelGuaranteeCodeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGuaranteeCodeMappingDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelGuaranteeCodeMappings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelGuaranteeCodeMappings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelGuaranteeCodeMappings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelGuaranteeCodeMappings.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.guaranteeCode) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.channelGuaranteeCode) {
            queryParameters['channelGuaranteeCode'] = requestParameters.channelGuaranteeCode;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.fetchUnmapped !== undefined) {
            queryParameters['fetchUnmapped'] = requestParameters.fetchUnmapped;
        }

        if (requestParameters.fetchMapped !== undefined) {
            queryParameters['fetchMapped'] = requestParameters.fetchMapped;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/guarantees`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelGuaranteeCodeMappingDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API  to get the list of the channel guarantee code mappings to the OPERA guarantee codes. <p><strong>OperationId:</strong>getChannelGuaranteeCodeMappings</p>
     * Gets channel guarantee code mappings
     */
    async getChannelGuaranteeCodeMappings(requestParameters: GetChannelGuaranteeCodeMappingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGuaranteeCodeMappingDetails> {
        const response = await this.getChannelGuaranteeCodeMappingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the channel mappings to the OPERA hotel id, including hotel details for channel hotel code, room sell limit per reservation, city code and end date. <p><strong>OperationId:</strong>getChannelHotelCodeMapping</p>
     * Get channel hotel mappings
     */
    async getChannelHotelCodeMappingRaw(requestParameters: GetChannelHotelCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelHotelCodeMapping>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannelHotelCodeMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelHotelCodeMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelHotelCodeMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelHotelCodeMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.channelHotelCode !== undefined) {
            queryParameters['channelHotelCode'] = requestParameters.channelHotelCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/hotels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelHotelCodeMappingFromJSON(jsonValue));
    }

    /**
     * Use this API to get the channel mappings to the OPERA hotel id, including hotel details for channel hotel code, room sell limit per reservation, city code and end date. <p><strong>OperationId:</strong>getChannelHotelCodeMapping</p>
     * Get channel hotel mappings
     */
    async getChannelHotelCodeMapping(requestParameters: GetChannelHotelCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelHotelCodeMapping> {
        const response = await this.getChannelHotelCodeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel property confirmation letter configuration <p><strong>OperationId:</strong>getChannelHotelLetters</p>
     * Gets channel property confirmation letter mapping
     */
    async getChannelHotelLettersRaw(requestParameters: GetChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FetchedChannelHotelLetters>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelHotelLetters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelHotelLetters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelHotelLetters.');
        }

        const queryParameters: any = {};

        if (requestParameters.channelCode) {
            queryParameters['channelCode'] = requestParameters.channelCode;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.letterType !== undefined) {
            queryParameters['letterType'] = requestParameters.letterType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/confirmationLetters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FetchedChannelHotelLettersFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel property confirmation letter configuration <p><strong>OperationId:</strong>getChannelHotelLetters</p>
     * Gets channel property confirmation letter mapping
     */
    async getChannelHotelLetters(requestParameters: GetChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FetchedChannelHotelLetters> {
        const response = await this.getChannelHotelLettersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel mapping for marketing messages. <p><strong>OperationId:</strong>getChannelMarketingText</p>
     * Gets channel marketing messages
     */
    async getChannelMarketingTextRaw(requestParameters: GetChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelMarketingTextsInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelMarketingText.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelMarketingText.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelMarketingText.');
        }

        const queryParameters: any = {};

        if (requestParameters.transactionType !== undefined) {
            queryParameters['transactionType'] = requestParameters.transactionType;
        }

        if (requestParameters.policyType !== undefined) {
            queryParameters['policyType'] = requestParameters.policyType;
        }

        if (requestParameters.policyDetail !== undefined) {
            queryParameters['policyDetail'] = requestParameters.policyDetail;
        }

        if (requestParameters.beginDate !== undefined) {
            queryParameters['beginDate'] = (requestParameters.beginDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.filterHotelIds) {
            queryParameters['filterHotelIds'] = requestParameters.filterHotelIds;
        }

        if (requestParameters.bookingChannelCode) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.transactionTypes) {
            queryParameters['transactionTypes'] = requestParameters.transactionTypes;
        }

        if (requestParameters.policyTypesPolicyType) {
            queryParameters['policyTypesPolicyType'] = requestParameters.policyTypesPolicyType;
        }

        if (requestParameters.policyDetailPolicyDetail) {
            queryParameters['policyDetailPolicyDetail'] = requestParameters.policyDetailPolicyDetail;
        }

        if (requestParameters.showGlobal !== undefined) {
            queryParameters['showGlobal'] = requestParameters.showGlobal;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.channelCode) {
            queryParameters['channelCode'] = requestParameters.channelCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/marketingText`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelMarketingTextsInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel mapping for marketing messages. <p><strong>OperationId:</strong>getChannelMarketingText</p>
     * Gets channel marketing messages
     */
    async getChannelMarketingText(requestParameters: GetChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelMarketingTextsInfo> {
        const response = await this.getChannelMarketingTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>getChannelNegotiatedRate</p>
     * Gets channel negotiate rate
     */
    async getChannelNegotiatedRateRaw(requestParameters: GetChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelNegotiatedRateDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelNegotiatedRate.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelNegotiatedRate.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelNegotiatedRate.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.channelRatePlanCode !== undefined) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.accessCode !== undefined) {
            queryParameters['accessCode'] = requestParameters.accessCode;
        }

        if (requestParameters.uniqueId) {
            queryParameters['uniqueId'] = requestParameters.uniqueId;
        }

        if (requestParameters.uniqueIdType) {
            queryParameters['uniqueIdType'] = requestParameters.uniqueIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/negotiatedRates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelNegotiatedRateDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>getChannelNegotiatedRate</p>
     * Gets channel negotiate rate
     */
    async getChannelNegotiatedRate(requestParameters: GetChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelNegotiatedRateDetails> {
        const response = await this.getChannelNegotiatedRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves channel tenants mapping. <p><strong>OperationId:</strong>getChannelOrgMapping</p>
     * Retrieves channel tenants mapping.
     */
    async getChannelOrgMappingRaw(requestParameters: GetChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelOrgMappingsDetails>> {
        if (requestParameters.tenantCode === null || requestParameters.tenantCode === undefined) {
            throw new runtime.RequiredError('tenantCode','Required parameter requestParameters.tenantCode was null or undefined when calling getChannelOrgMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannelOrgMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelOrgMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelOrgMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelOrgMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.chainCode !== undefined) {
            queryParameters['chainCode'] = requestParameters.chainCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/tenants/{tenantCode}`.replace(`{${"tenantCode"}}`, encodeURIComponent(String(requestParameters.tenantCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelOrgMappingsDetailsFromJSON(jsonValue));
    }

    /**
     * This API retrieves channel tenants mapping. <p><strong>OperationId:</strong>getChannelOrgMapping</p>
     * Retrieves channel tenants mapping.
     */
    async getChannelOrgMapping(requestParameters: GetChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelOrgMappingsDetails> {
        const response = await this.getChannelOrgMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get list of channel parameters and their settings. <p><strong>OperationId:</strong>getChannelParameters</p>
     * Retrieves channel parameters.
     */
    async getChannelParametersRaw(requestParameters: GetChannelParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelParameterMapping>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannelParameters.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelParameters.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelParameters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelParameters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelParameters.');
        }

        const queryParameters: any = {};

        if (requestParameters.parameterNameWildCard !== undefined) {
            queryParameters['parameterNameWildCard'] = requestParameters.parameterNameWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/parameters`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelParameterMappingFromJSON(jsonValue));
    }

    /**
     * Use this API to get list of channel parameters and their settings. <p><strong>OperationId:</strong>getChannelParameters</p>
     * Retrieves channel parameters.
     */
    async getChannelParameters(requestParameters: GetChannelParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelParameterMapping> {
        const response = await this.getChannelParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve channel policies mapping. <p><strong>OperationId:</strong>getChannelPolicies</p>
     * Retrieves the channel policies
     */
    async getChannelPoliciesRaw(requestParameters: GetChannelPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelPolicies>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannelPolicies.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelPolicies.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelPolicies.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelPolicies.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelPolicies.');
        }

        const queryParameters: any = {};

        if (requestParameters.requestType !== undefined) {
            queryParameters['requestType'] = requestParameters.requestType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.channelRatePlanCode) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.channelRoomTypeCode) {
            queryParameters['channelRoomTypeCode'] = requestParameters.channelRoomTypeCode;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomTypeCode) {
            queryParameters['roomTypeCode'] = requestParameters.roomTypeCode;
        }

        if (requestParameters.corporateId !== undefined) {
            queryParameters['corporateId'] = requestParameters.corporateId;
        }

        if (requestParameters.corporateIdType !== undefined) {
            queryParameters['corporateIdType'] = requestParameters.corporateIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/policies`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelPoliciesFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve channel policies mapping. <p><strong>OperationId:</strong>getChannelPolicies</p>
     * Retrieves the channel policies
     */
    async getChannelPolicies(requestParameters: GetChannelPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelPolicies> {
        const response = await this.getChannelPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>getChannelRateCodeGlobalDesc</p>
     * Gets global rate descriptions
     */
    async getChannelRateCodeGlobalDescRaw(requestParameters: GetChannelRateCodeGlobalDescRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelEnhancedGlobalDescription>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling getChannelRateCodeGlobalDesc.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelRateCodeGlobalDesc.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRateCodeGlobalDesc.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRateCodeGlobalDesc.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRateCodeGlobalDesc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rates/{ratePlanCode}/globalDescription`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelEnhancedGlobalDescriptionFromJSON(jsonValue));
    }

    /**
     * Use this API to get global rate description for given hotel id and rate code. <p><strong>OperationId:</strong>getChannelRateCodeGlobalDesc</p>
     * Gets global rate descriptions
     */
    async getChannelRateCodeGlobalDesc(requestParameters: GetChannelRateCodeGlobalDescRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelEnhancedGlobalDescription> {
        const response = await this.getChannelRateCodeGlobalDescRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>getChannelRateMapping</p>
     * Gets channel property rate mapping
     */
    async getChannelRateMappingRaw(requestParameters: GetChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelRateMappings>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRateMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRateMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRateMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.channelCode) {
            queryParameters['channelCode'] = requestParameters.channelCode;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.channelRatePlanCodes) {
            queryParameters['channelRatePlanCodes'] = requestParameters.channelRatePlanCodes;
        }

        if (requestParameters.ratePlanCategories) {
            queryParameters['ratePlanCategories'] = requestParameters.ratePlanCategories;
        }

        if (requestParameters.channelRatePlanCategories) {
            queryParameters['channelRatePlanCategories'] = requestParameters.channelRatePlanCategories;
        }

        if (requestParameters.includeUnmappedRatePlans !== undefined) {
            queryParameters['includeUnmappedRatePlans'] = requestParameters.includeUnmappedRatePlans;
        }

        if (requestParameters.onlyUnmappedRatePlans !== undefined) {
            queryParameters['onlyUnmappedRatePlans'] = requestParameters.onlyUnmappedRatePlans;
        }

        if (requestParameters.includeInactiveMappings !== undefined) {
            queryParameters['includeInactiveMappings'] = requestParameters.includeInactiveMappings;
        }

        if (requestParameters.onlyNegotiatedRates !== undefined) {
            queryParameters['onlyNegotiatedRates'] = requestParameters.onlyNegotiatedRates;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelRateMappingsFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>getChannelRateMapping</p>
     * Gets channel property rate mapping
     */
    async getChannelRateMapping(requestParameters: GetChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelRateMappings> {
        const response = await this.getChannelRateMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get sequence for given channel property rate room mapping. <p><strong>OperationId:</strong>getChannelRateRoomSeq</p>
     * Gets channel property rateroom sequence
     */
    async getChannelRateRoomSeqRaw(requestParameters: GetChannelRateRoomSeqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelRateRoomSequenceDetails>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannelRateRoomSeq.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRateRoomSeq.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRateRoomSeq.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRateRoomSeq.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.channelRatePlanCode !== undefined) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.channelRoomType !== undefined) {
            queryParameters['channelRoomType'] = requestParameters.channelRoomType;
        }

        if (requestParameters.channelRateRoomParameterName) {
            queryParameters['channelRateRoomParameterName'] = requestParameters.channelRateRoomParameterName;
        }

        if (requestParameters.channelRateRoomParameterValue) {
            queryParameters['channelRateRoomParameterValue'] = requestParameters.channelRateRoomParameterValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/rateRoomSequences`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelRateRoomSequenceDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get sequence for given channel property rate room mapping. <p><strong>OperationId:</strong>getChannelRateRoomSeq</p>
     * Gets channel property rateroom sequence
     */
    async getChannelRateRoomSeq(requestParameters: GetChannelRateRoomSeqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelRateRoomSequenceDetails> {
        const response = await this.getChannelRateRoomSeqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get global rate description for given hotel id. <p><strong>OperationId:</strong>getChannelRatesGlobalDescriptions</p>
     * Gets global rate descriptions
     */
    async getChannelRatesGlobalDescriptionsRaw(requestParameters: GetChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGlobalDescriptions>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRatesGlobalDescriptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.globalDescriptionType !== undefined) {
            queryParameters['globalDescriptionType'] = requestParameters.globalDescriptionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates/globalDescriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelGlobalDescriptionsFromJSON(jsonValue));
    }

    /**
     * Use this API to get global rate description for given hotel id. <p><strong>OperationId:</strong>getChannelRatesGlobalDescriptions</p>
     * Gets global rate descriptions
     */
    async getChannelRatesGlobalDescriptions(requestParameters: GetChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGlobalDescriptions> {
        const response = await this.getChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>getChannelRoomMapping</p>
     * Gets channel property room mapping
     */
    async getChannelRoomMappingRaw(requestParameters: GetChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelRoomMappingsSummary>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelRoomMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRoomMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRoomMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRoomMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.channelRoomTypes) {
            queryParameters['channelRoomTypes'] = requestParameters.channelRoomTypes;
        }

        if (requestParameters.includeInactiveMappings !== undefined) {
            queryParameters['includeInactiveMappings'] = requestParameters.includeInactiveMappings;
        }

        if (requestParameters.includeUnmappedRoomTypes !== undefined) {
            queryParameters['includeUnmappedRoomTypes'] = requestParameters.includeUnmappedRoomTypes;
        }

        if (requestParameters.onlyUnmappedRoomTypes !== undefined) {
            queryParameters['onlyUnmappedRoomTypes'] = requestParameters.onlyUnmappedRoomTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/mapping`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelRoomMappingsSummaryFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>getChannelRoomMapping</p>
     * Gets channel property room mapping
     */
    async getChannelRoomMapping(requestParameters: GetChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelRoomMappingsSummary> {
        const response = await this.getChannelRoomMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves channel room mapping by room type. <p><strong>OperationId:</strong>getChannelRoomMappingById</p>
     * Gets channel room mapping by room type
     */
    async getChannelRoomMappingByIdRaw(requestParameters: GetChannelRoomMappingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelRoomMapping>> {
        if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
            throw new runtime.RequiredError('roomTypeCode','Required parameter requestParameters.roomTypeCode was null or undefined when calling getChannelRoomMappingById.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannelRoomMappingById.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelRoomMappingById.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRoomMappingById.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRoomMappingById.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRoomMappingById.');
        }

        const queryParameters: any = {};

        if (requestParameters.beginDate !== undefined) {
            queryParameters['beginDate'] = (requestParameters.beginDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.channelRoomType !== undefined) {
            queryParameters['channelRoomType'] = requestParameters.channelRoomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelRoomMappingFromJSON(jsonValue));
    }

    /**
     * This API retrieves channel room mapping by room type. <p><strong>OperationId:</strong>getChannelRoomMappingById</p>
     * Gets channel room mapping by room type
     */
    async getChannelRoomMappingById(requestParameters: GetChannelRoomMappingByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelRoomMapping> {
        const response = await this.getChannelRoomMappingByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomTypeGlobalDesc</p>
     * Gets global room descriptions
     */
    async getChannelRoomTypeGlobalDescRaw(requestParameters: GetChannelRoomTypeGlobalDescRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelEnhancedGlobalDescription>> {
        if (requestParameters.roomType === null || requestParameters.roomType === undefined) {
            throw new runtime.RequiredError('roomType','Required parameter requestParameters.roomType was null or undefined when calling getChannelRoomTypeGlobalDesc.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelRoomTypeGlobalDesc.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRoomTypeGlobalDesc.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRoomTypeGlobalDesc.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRoomTypeGlobalDesc.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomType}/globalDescription`.replace(`{${"roomType"}}`, encodeURIComponent(String(requestParameters.roomType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelEnhancedGlobalDescriptionFromJSON(jsonValue));
    }

    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomTypeGlobalDesc</p>
     * Gets global room descriptions
     */
    async getChannelRoomTypeGlobalDesc(requestParameters: GetChannelRoomTypeGlobalDescRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelEnhancedGlobalDescription> {
        const response = await this.getChannelRoomTypeGlobalDescRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomsGlobalDescriptions</p>
     * Gets global room descriptions
     */
    async getChannelRoomsGlobalDescriptionsRaw(requestParameters: GetChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelGlobalDescriptions>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelRoomsGlobalDescriptions.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.roomTypes) {
            queryParameters['roomTypes'] = requestParameters.roomTypes;
        }

        if (requestParameters.globalDescriptionType !== undefined) {
            queryParameters['globalDescriptionType'] = requestParameters.globalDescriptionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rooms/globalDescriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelGlobalDescriptionsFromJSON(jsonValue));
    }

    /**
     * Use this API to get global room description for given hotel id and room type code. <p><strong>OperationId:</strong>getChannelRoomsGlobalDescriptions</p>
     * Gets global room descriptions
     */
    async getChannelRoomsGlobalDescriptions(requestParameters: GetChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelGlobalDescriptions> {
        const response = await this.getChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get list of channels from OPERA. <p><strong>OperationId:</strong>getChannels</p>
     * Gets list of channels
     */
    async getChannelsRaw(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Channels>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannels.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.channelCode !== undefined) {
            queryParameters['channelCode'] = requestParameters.channelCode;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemRateType !== undefined) {
            queryParameters['systemRateType'] = requestParameters.systemRateType;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelsFromJSON(jsonValue));
    }

    /**
     * Use this API to get list of channels from OPERA. <p><strong>OperationId:</strong>getChannels</p>
     * Gets list of channels
     */
    async getChannels(requestParameters: GetChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Channels> {
        const response = await this.getChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>getCreditCardsMapping</p>
     * Gets channel credit card mapping
     */
    async getCreditCardsMappingRaw(requestParameters: GetCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardsMapping>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCreditCardsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCreditCardsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCreditCardsMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemRateType !== undefined) {
            queryParameters['systemRateType'] = requestParameters.systemRateType;
        }

        if (requestParameters.localSystemCodes) {
            queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/cardTypes/mapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardsMappingFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel credit card code mapping to OPERA credit card code. <p><strong>OperationId:</strong>getCreditCardsMapping</p>
     * Gets channel credit card mapping
     */
    async getCreditCardsMapping(requestParameters: GetCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardsMapping> {
        const response = await this.getCreditCardsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>getCurrenciesMapping</p>
     * Gets channel currency code mapping
     */
    async getCurrenciesMappingRaw(requestParameters: GetCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrenciesMapping>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCurrenciesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCurrenciesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCurrenciesMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemRateType !== undefined) {
            queryParameters['systemRateType'] = requestParameters.systemRateType;
        }

        if (requestParameters.localSystemCodes) {
            queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/currencies/mapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrenciesMappingFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel mapping to OPERA currency codes. <p><strong>OperationId:</strong>getCurrenciesMapping</p>
     * Gets channel currency code mapping
     */
    async getCurrenciesMapping(requestParameters: GetCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrenciesMapping> {
        const response = await this.getCurrenciesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves distribution templates. <p><strong>OperationId:</strong>getDistributionTemplates</p>
     * Retrieves distribution templates
     */
    async getDistributionTemplatesRaw(requestParameters: GetDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DistributionTemplates>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDistributionTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getDistributionTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getDistributionTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.isChain !== undefined) {
            queryParameters['isChain'] = requestParameters.isChain;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/distributionTemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionTemplatesFromJSON(jsonValue));
    }

    /**
     * This API retrieves distribution templates. <p><strong>OperationId:</strong>getDistributionTemplates</p>
     * Retrieves distribution templates
     */
    async getDistributionTemplates(requestParameters: GetDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DistributionTemplates> {
        const response = await this.getDistributionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel guarantee code mapping to OPERA guarantee code for a given hotel. <p><strong>OperationId:</strong>getGuaranteesMapping</p>
     * Gets channel guarantee code mapping for a hotel
     */
    async getGuaranteesMappingRaw(requestParameters: GetGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuaranteesMapping>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGuaranteesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGuaranteesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGuaranteesMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemRateType !== undefined) {
            queryParameters['systemRateType'] = requestParameters.systemRateType;
        }

        if (requestParameters.localSystemCodes) {
            queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/guarantees/mapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuaranteesMappingFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel guarantee code mapping to OPERA guarantee code for a given hotel. <p><strong>OperationId:</strong>getGuaranteesMapping</p>
     * Gets channel guarantee code mapping for a hotel
     */
    async getGuaranteesMapping(requestParameters: GetGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuaranteesMapping> {
        const response = await this.getGuaranteesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>getHotelsMapping</p>
     * Gets channel hotel mapping
     */
    async getHotelsMappingRaw(requestParameters: GetHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertiesMapping>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelsMapping.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.systemCode !== undefined) {
            queryParameters['systemCode'] = requestParameters.systemCode;
        }

        if (requestParameters.systemType !== undefined) {
            queryParameters['systemType'] = requestParameters.systemType;
        }

        if (requestParameters.systemSubType !== undefined) {
            queryParameters['systemSubType'] = requestParameters.systemSubType;
        }

        if (requestParameters.systemRateType !== undefined) {
            queryParameters['systemRateType'] = requestParameters.systemRateType;
        }

        if (requestParameters.localSystemCodes) {
            queryParameters['localSystemCodes'] = requestParameters.localSystemCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/hotels/mapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertiesMappingFromJSON(jsonValue));
    }

    /**
     * Use this API to get channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>getHotelsMapping</p>
     * Gets channel hotel mapping
     */
    async getHotelsMapping(requestParameters: GetHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertiesMapping> {
        const response = await this.getHotelsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API retrieves billing statement details statistics. <p><strong>OperationId:</strong>getStatementDetailsStatistics</p>
     * Retrieves billing statement details statistics.
     */
    async getStatementDetailsStatisticsRaw(requestParameters: GetStatementDetailsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatementDetailsStatistics>> {
        if (requestParameters.statementId === null || requestParameters.statementId === undefined) {
            throw new runtime.RequiredError('statementId','Required parameter requestParameters.statementId was null or undefined when calling getStatementDetailsStatistics.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getStatementDetailsStatistics.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getStatementDetailsStatistics.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getStatementDetailsStatistics.');
        }

        const queryParameters: any = {};

        if (requestParameters.contractId !== undefined) {
            queryParameters['contractId'] = requestParameters.contractId;
        }

        if (requestParameters.contractIdType !== undefined) {
            queryParameters['contractIdType'] = requestParameters.contractIdType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements/{statementId}/statistics`.replace(`{${"statementId"}}`, encodeURIComponent(String(requestParameters.statementId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatementDetailsStatisticsFromJSON(jsonValue));
    }

    /**
     * This API retrieves billing statement details statistics. <p><strong>OperationId:</strong>getStatementDetailsStatistics</p>
     * Retrieves billing statement details statistics.
     */
    async getStatementDetailsStatistics(requestParameters: GetStatementDetailsStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatementDetailsStatistics> {
        const response = await this.getStatementDetailsStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>getTotalPricingElements</p>
     * Gets total pricing tax and fee types
     */
    async getTotalPricingElementsRaw(requestParameters: GetTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TotalPricingElements>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTotalPricingElements.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getTotalPricingElements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getTotalPricingElements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getTotalPricingElements.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.elementCodes) {
            queryParameters['elementCodes'] = requestParameters.elementCodes;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/totalPricing`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TotalPricingElementsFromJSON(jsonValue));
    }

    /**
     * Use this API to get global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>getTotalPricingElements</p>
     * Gets total pricing tax and fee types
     */
    async getTotalPricingElements(requestParameters: GetTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TotalPricingElements> {
        const response = await this.getTotalPricingElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>manageChannelRoomMapping</p>
     * Updates channel room configuration
     */
    async manageChannelRoomMappingRaw(requestParameters: ManageChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling manageChannelRoomMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling manageChannelRoomMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling manageChannelRoomMapping.');
        }

        if (requestParameters.channelRoomMappings === null || requestParameters.channelRoomMappings === undefined) {
            throw new runtime.RequiredError('channelRoomMappings','Required parameter requestParameters.channelRoomMappings was null or undefined when calling manageChannelRoomMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rooms`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRoomMappingsToJSON(requestParameters.channelRoomMappings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>manageChannelRoomMapping</p>
     * Updates channel room configuration
     */
    async manageChannelRoomMapping(requestParameters: ManageChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.manageChannelRoomMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel amenities mapping <p><strong>OperationId:</strong>postAmenitiesMapping</p>
     * Adds channel amenities configuration
     */
    async postAmenitiesMappingRaw(requestParameters: PostAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postAmenitiesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postAmenitiesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postAmenitiesMapping.');
        }

        if (requestParameters.amenities === null || requestParameters.amenities === undefined) {
            throw new runtime.RequiredError('amenities','Required parameter requestParameters.amenities was null or undefined when calling postAmenitiesMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/amenities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AmenitiesToJSON(requestParameters.amenities),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel amenities mapping <p><strong>OperationId:</strong>postAmenitiesMapping</p>
     * Adds channel amenities configuration
     */
    async postAmenitiesMapping(requestParameters: PostAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAmenitiesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API adds channel account contracts for given profile Id. <p><strong>OperationId:</strong>postChannelAccountContracts</p>
     * Adds channel account contracts for given profile Id.
     */
    async postChannelAccountContractsRaw(requestParameters: PostChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
            throw new runtime.RequiredError('accountProfileId','Required parameter requestParameters.accountProfileId was null or undefined when calling postChannelAccountContracts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelAccountContracts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelAccountContracts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelAccountContracts.');
        }

        if (requestParameters.channelAccountContracts === null || requestParameters.channelAccountContracts === undefined) {
            throw new runtime.RequiredError('channelAccountContracts','Required parameter requestParameters.channelAccountContracts was null or undefined when calling postChannelAccountContracts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/accounts/{accountProfileId}/contracts`.replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelAccountContractsToJSON(requestParameters.channelAccountContracts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API adds channel account contracts for given profile Id. <p><strong>OperationId:</strong>postChannelAccountContracts</p>
     * Adds channel account contracts for given profile Id.
     */
    async postChannelAccountContracts(requestParameters: PostChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelAccountContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API adds channel accounts. <p><strong>OperationId:</strong>postChannelAccounts</p>
     * Adds channel accounts.
     */
    async postChannelAccountsRaw(requestParameters: PostChannelAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelAccounts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelAccounts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelAccounts.');
        }

        if (requestParameters.channelAccounts === null || requestParameters.channelAccounts === undefined) {
            throw new runtime.RequiredError('channelAccounts','Required parameter requestParameters.channelAccounts was null or undefined when calling postChannelAccounts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelAccountsToJSON(requestParameters.channelAccounts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API adds channel accounts. <p><strong>OperationId:</strong>postChannelAccounts</p>
     * Adds channel accounts.
     */
    async postChannelAccounts(requestParameters: PostChannelAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API adds channel billing statements. <p><strong>OperationId:</strong>postChannelBillingStatements</p>
     * Adds channel billing statements.
     */
    async postChannelBillingStatementsRaw(requestParameters: PostChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelBillingStatements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelBillingStatements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelBillingStatements.');
        }

        if (requestParameters.channelBillingStatements === null || requestParameters.channelBillingStatements === undefined) {
            throw new runtime.RequiredError('channelBillingStatements','Required parameter requestParameters.channelBillingStatements was null or undefined when calling postChannelBillingStatements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelBillingStatementsToJSON(requestParameters.channelBillingStatements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API adds channel billing statements. <p><strong>OperationId:</strong>postChannelBillingStatements</p>
     * Adds channel billing statements.
     */
    async postChannelBillingStatements(requestParameters: PostChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelBillingStatementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>postChannelCardTypeMapping</p>
     * Adds channel credit card mapping for a hotel
     */
    async postChannelCardTypeMappingRaw(requestParameters: PostChannelCardTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cardTypeCode === null || requestParameters.cardTypeCode === undefined) {
            throw new runtime.RequiredError('cardTypeCode','Required parameter requestParameters.cardTypeCode was null or undefined when calling postChannelCardTypeMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelCardTypeMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postChannelCardTypeMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelCardTypeMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelCardTypeMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelCardTypeMapping.');
        }

        if (requestParameters.channelCardTypeMappings === null || requestParameters.channelCardTypeMappings === undefined) {
            throw new runtime.RequiredError('channelCardTypeMappings','Required parameter requestParameters.channelCardTypeMappings was null or undefined when calling postChannelCardTypeMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/cardType/{cardTypeCode}`.replace(`{${"cardTypeCode"}}`, encodeURIComponent(String(requestParameters.cardTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelCardTypeMappingsToJSON(requestParameters.channelCardTypeMappings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>postChannelCardTypeMapping</p>
     * Adds channel credit card mapping for a hotel
     */
    async postChannelCardTypeMapping(requestParameters: PostChannelCardTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelCardTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>postChannelCarriers</p>
     * Adds sub channel configuration
     */
    async postChannelCarriersRaw(requestParameters: PostChannelCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelCarriers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelCarriers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelCarriers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelCarriers.');
        }

        if (requestParameters.channelCarriers === null || requestParameters.channelCarriers === undefined) {
            throw new runtime.RequiredError('channelCarriers','Required parameter requestParameters.channelCarriers was null or undefined when calling postChannelCarriers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/subChannels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelCarriersToJSON(requestParameters.channelCarriers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>postChannelCarriers</p>
     * Adds sub channel configuration
     */
    async postChannelCarriers(requestParameters: PostChannelCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelCarriersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel error code mapping configurations <p><strong>OperationId:</strong>postChannelErrors</p>
     * Adds channel error codes
     */
    async postChannelErrorsRaw(requestParameters: PostChannelErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelErrors.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelErrors.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelErrors.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelErrors.');
        }

        if (requestParameters.channelErrors === null || requestParameters.channelErrors === undefined) {
            throw new runtime.RequiredError('channelErrors','Required parameter requestParameters.channelErrors was null or undefined when calling postChannelErrors.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/errorCodes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelErrorsToJSON(requestParameters.channelErrors),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel error code mapping configurations <p><strong>OperationId:</strong>postChannelErrors</p>
     * Adds channel error codes
     */
    async postChannelErrors(requestParameters: PostChannelErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelErrorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>postChannelGuaranteeCodeMapping</p>
     * Adds channel guarantee code mapping for a hotel
     */
    async postChannelGuaranteeCodeMappingRaw(requestParameters: PostChannelGuaranteeCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling postChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.channelGuaranteeCodeMappings === null || requestParameters.channelGuaranteeCodeMappings === undefined) {
            throw new runtime.RequiredError('channelGuaranteeCodeMappings','Required parameter requestParameters.channelGuaranteeCodeMappings was null or undefined when calling postChannelGuaranteeCodeMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/guarantees/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGuaranteeCodeMappingsToJSON(requestParameters.channelGuaranteeCodeMappings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>postChannelGuaranteeCodeMapping</p>
     * Adds channel guarantee code mapping for a hotel
     */
    async postChannelGuaranteeCodeMapping(requestParameters: PostChannelGuaranteeCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel property confirmation letter configuration <p><strong>OperationId:</strong>postChannelHotelLetters</p>
     * Adds channel property confirmation letter mapping
     */
    async postChannelHotelLettersRaw(requestParameters: PostChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelHotelLetters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelHotelLetters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelHotelLetters.');
        }

        if (requestParameters.channelHotelLettersToBeCreated === null || requestParameters.channelHotelLettersToBeCreated === undefined) {
            throw new runtime.RequiredError('channelHotelLettersToBeCreated','Required parameter requestParameters.channelHotelLettersToBeCreated was null or undefined when calling postChannelHotelLetters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/confirmationLetters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelHotelLettersToBeCreatedToJSON(requestParameters.channelHotelLettersToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel property confirmation letter configuration <p><strong>OperationId:</strong>postChannelHotelLetters</p>
     * Adds channel property confirmation letter mapping
     */
    async postChannelHotelLetters(requestParameters: PostChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelHotelLettersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel mapping for marketing messages <p><strong>OperationId:</strong>postChannelMarketingText</p>
     * Adds channel marketing messages
     */
    async postChannelMarketingTextRaw(requestParameters: PostChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelMarketingText.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelMarketingText.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelMarketingText.');
        }

        if (requestParameters.channelMarketingText === null || requestParameters.channelMarketingText === undefined) {
            throw new runtime.RequiredError('channelMarketingText','Required parameter requestParameters.channelMarketingText was null or undefined when calling postChannelMarketingText.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/marketingText`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelMarketingTextToJSON(requestParameters.channelMarketingText),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel mapping for marketing messages <p><strong>OperationId:</strong>postChannelMarketingText</p>
     * Adds channel marketing messages
     */
    async postChannelMarketingText(requestParameters: PostChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelMarketingTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel\'s negotiated rate code mapping with an OPERA profile for a given hotel id <p><strong>OperationId:</strong>postChannelNegotiatedRate</p>
     * Adds channel negotiate rate
     */
    async postChannelNegotiatedRateRaw(requestParameters: PostChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelNegotiatedRate.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelNegotiatedRate.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelNegotiatedRate.');
        }

        if (requestParameters.channelNegotiatedRates === null || requestParameters.channelNegotiatedRates === undefined) {
            throw new runtime.RequiredError('channelNegotiatedRates','Required parameter requestParameters.channelNegotiatedRates was null or undefined when calling postChannelNegotiatedRate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/negotiatedRates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelNegotiatedRatesToJSON(requestParameters.channelNegotiatedRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel\'s negotiated rate code mapping with an OPERA profile for a given hotel id <p><strong>OperationId:</strong>postChannelNegotiatedRate</p>
     * Adds channel negotiate rate
     */
    async postChannelNegotiatedRate(requestParameters: PostChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelNegotiatedRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API adds channel tenants. <p><strong>OperationId:</strong>postChannelOrgMapping</p>
     * Adds channel tenants.
     */
    async postChannelOrgMappingRaw(requestParameters: PostChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelOrgMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelOrgMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelOrgMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelOrgMapping.');
        }

        if (requestParameters.channelOrgMapping === null || requestParameters.channelOrgMapping === undefined) {
            throw new runtime.RequiredError('channelOrgMapping','Required parameter requestParameters.channelOrgMapping was null or undefined when calling postChannelOrgMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/tenants`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelOrgMappingToJSON(requestParameters.channelOrgMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API adds channel tenants. <p><strong>OperationId:</strong>postChannelOrgMapping</p>
     * Adds channel tenants.
     */
    async postChannelOrgMapping(requestParameters: PostChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelOrgMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel rate categories for a given channel. <p><strong>OperationId:</strong>postChannelRateCategories</p>
     * Adds given channel\'s rate categories
     */
    async postChannelRateCategoriesRaw(requestParameters: PostChannelRateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelRateCategories.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRateCategories.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRateCategories.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRateCategories.');
        }

        if (requestParameters.channelRateCategories === null || requestParameters.channelRateCategories === undefined) {
            throw new runtime.RequiredError('channelRateCategories','Required parameter requestParameters.channelRateCategories was null or undefined when calling postChannelRateCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/rateCategories`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRateCategoriesToJSON(requestParameters.channelRateCategories),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel rate categories for a given channel. <p><strong>OperationId:</strong>postChannelRateCategories</p>
     * Adds given channel\'s rate categories
     */
    async postChannelRateCategories(requestParameters: PostChannelRateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRateCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel rate level configurations <p><strong>OperationId:</strong>postChannelRateLevels</p>
     * Adds channel rate level
     */
    async postChannelRateLevelsRaw(requestParameters: PostChannelRateLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelRateLevels.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRateLevels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRateLevels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRateLevels.');
        }

        if (requestParameters.channelRateLevels === null || requestParameters.channelRateLevels === undefined) {
            throw new runtime.RequiredError('channelRateLevels','Required parameter requestParameters.channelRateLevels was null or undefined when calling postChannelRateLevels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/rateLevels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRateLevelsToJSON(requestParameters.channelRateLevels),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel rate level configurations <p><strong>OperationId:</strong>postChannelRateLevels</p>
     * Adds channel rate level
     */
    async postChannelRateLevels(requestParameters: PostChannelRateLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRateLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel property rate mapping with OPERA hotel rate <p><strong>OperationId:</strong>postChannelRateMapping</p>
     * Adds channel property rate mapping
     */
    async postChannelRateMappingRaw(requestParameters: PostChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRateMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRateMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRateMapping.');
        }

        if (requestParameters.channelRateMapping === null || requestParameters.channelRateMapping === undefined) {
            throw new runtime.RequiredError('channelRateMapping','Required parameter requestParameters.channelRateMapping was null or undefined when calling postChannelRateMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRateMappingToJSON(requestParameters.channelRateMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel property rate mapping with OPERA hotel rate <p><strong>OperationId:</strong>postChannelRateMapping</p>
     * Adds channel property rate mapping
     */
    async postChannelRateMapping(requestParameters: PostChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRateMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to link (distribute) channel a rate code to channel room types. <p><strong>OperationId:</strong>postChannelRates</p>
     * Distributes channel rate mappings to channel room types
     */
    async postChannelRatesRaw(requestParameters: PostChannelRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postChannelRates.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRates.');
        }

        if (requestParameters.channelRates === null || requestParameters.channelRates === undefined) {
            throw new runtime.RequiredError('channelRates','Required parameter requestParameters.channelRates was null or undefined when calling postChannelRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/rates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRatesToJSON(requestParameters.channelRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to link (distribute) channel a rate code to channel room types. <p><strong>OperationId:</strong>postChannelRates</p>
     * Distributes channel rate mappings to channel room types
     */
    async postChannelRates(requestParameters: PostChannelRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to adds global room description for given hotel id and room type code <p><strong>OperationId:</strong>postChannelRatesGlobalDescriptions</p>
     * Adds global room descriptions
     */
    async postChannelRatesGlobalDescriptionsRaw(requestParameters: PostChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
            throw new runtime.RequiredError('channelGlobalDescriptions','Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling postChannelRatesGlobalDescriptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates/globalDescriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGlobalDescriptionsToJSON(requestParameters.channelGlobalDescriptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to adds global room description for given hotel id and room type code <p><strong>OperationId:</strong>postChannelRatesGlobalDescriptions</p>
     * Adds global room descriptions
     */
    async postChannelRatesGlobalDescriptions(requestParameters: PostChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel room mapping to OPERA hotel\'s room. <p><strong>OperationId:</strong>postChannelRoomMapping</p>
     * Adds channel property room mapping
     */
    async postChannelRoomMappingRaw(requestParameters: PostChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRoomMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRoomMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRoomMapping.');
        }

        if (requestParameters.channelRoomMappings === null || requestParameters.channelRoomMappings === undefined) {
            throw new runtime.RequiredError('channelRoomMappings','Required parameter requestParameters.channelRoomMappings was null or undefined when calling postChannelRoomMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRoomMappingsToJSON(requestParameters.channelRoomMappings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel room mapping to OPERA hotel\'s room. <p><strong>OperationId:</strong>postChannelRoomMapping</p>
     * Adds channel property room mapping
     */
    async postChannelRoomMapping(requestParameters: PostChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRoomMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to link (distribute) channel a room type to channel rate codes. <p><strong>OperationId:</strong>postChannelRoomTypeRate</p>
     * Distributes channel room rate mappings.
     */
    async postChannelRoomTypeRateRaw(requestParameters: PostChannelRoomTypeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelRoomType === null || requestParameters.channelRoomType === undefined) {
            throw new runtime.RequiredError('channelRoomType','Required parameter requestParameters.channelRoomType was null or undefined when calling postChannelRoomTypeRate.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelRoomTypeRate.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postChannelRoomTypeRate.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRoomTypeRate.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRoomTypeRate.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRoomTypeRate.');
        }

        if (requestParameters.channelRates === null || requestParameters.channelRates === undefined) {
            throw new runtime.RequiredError('channelRates','Required parameter requestParameters.channelRates was null or undefined when calling postChannelRoomTypeRate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{channelRoomType}/rates`.replace(`{${"channelRoomType"}}`, encodeURIComponent(String(requestParameters.channelRoomType))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRatesToJSON(requestParameters.channelRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to link (distribute) channel a room type to channel rate codes. <p><strong>OperationId:</strong>postChannelRoomTypeRate</p>
     * Distributes channel room rate mappings.
     */
    async postChannelRoomTypeRate(requestParameters: PostChannelRoomTypeRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRoomTypeRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel room configuration <p><strong>OperationId:</strong>postChannelRoomTypes</p>
     * Adds channel room
     */
    async postChannelRoomTypesRaw(requestParameters: PostChannelRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling postChannelRoomTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRoomTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRoomTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRoomTypes.');
        }

        if (requestParameters.channelRoomTypes === null || requestParameters.channelRoomTypes === undefined) {
            throw new runtime.RequiredError('channelRoomTypes','Required parameter requestParameters.channelRoomTypes was null or undefined when calling postChannelRoomTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/roomTypes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRoomTypesToJSON(requestParameters.channelRoomTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel room configuration <p><strong>OperationId:</strong>postChannelRoomTypes</p>
     * Adds channel room
     */
    async postChannelRoomTypes(requestParameters: PostChannelRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRoomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add global rate description for given hotel id and rate code <p><strong>OperationId:</strong>postChannelRoomsGlobalDescriptions</p>
     * Adds global rate descriptions
     */
    async postChannelRoomsGlobalDescriptionsRaw(requestParameters: PostChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
            throw new runtime.RequiredError('channelGlobalDescriptions','Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling postChannelRoomsGlobalDescriptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rooms/globalDescriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGlobalDescriptionsToJSON(requestParameters.channelGlobalDescriptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add global rate description for given hotel id and rate code <p><strong>OperationId:</strong>postChannelRoomsGlobalDescriptions</p>
     * Adds global rate descriptions
     */
    async postChannelRoomsGlobalDescriptions(requestParameters: PostChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add new channel code in OPERA <p><strong>OperationId:</strong>postChannels</p>
     * Adds new channel
     */
    async postChannelsRaw(requestParameters: PostChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postChannels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postChannels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postChannels.');
        }

        if (requestParameters.channels === null || requestParameters.channels === undefined) {
            throw new runtime.RequiredError('channels','Required parameter requestParameters.channels was null or undefined when calling postChannels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelsToJSON(requestParameters.channels),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add new channel code in OPERA <p><strong>OperationId:</strong>postChannels</p>
     * Adds new channel
     */
    async postChannels(requestParameters: PostChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel mapping for OPERA Credit cards <p><strong>OperationId:</strong>postCreditCardsMapping</p>
     * Adds channel credit card mapping
     */
    async postCreditCardsMappingRaw(requestParameters: PostCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCreditCardsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCreditCardsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCreditCardsMapping.');
        }

        if (requestParameters.creditCards === null || requestParameters.creditCards === undefined) {
            throw new runtime.RequiredError('creditCards','Required parameter requestParameters.creditCards was null or undefined when calling postCreditCardsMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/cardTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditCardsToJSON(requestParameters.creditCards),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel mapping for OPERA Credit cards <p><strong>OperationId:</strong>postCreditCardsMapping</p>
     * Adds channel credit card mapping
     */
    async postCreditCardsMapping(requestParameters: PostCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCreditCardsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel currency code mapping to OPERA currency codes. <p><strong>OperationId:</strong>postCurrenciesMapping</p>
     * Adds channel currency code mapping
     */
    async postCurrenciesMappingRaw(requestParameters: PostCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCurrenciesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCurrenciesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCurrenciesMapping.');
        }

        if (requestParameters.currencies === null || requestParameters.currencies === undefined) {
            throw new runtime.RequiredError('currencies','Required parameter requestParameters.currencies was null or undefined when calling postCurrenciesMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/currencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrenciesToJSON(requestParameters.currencies),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel currency code mapping to OPERA currency codes. <p><strong>OperationId:</strong>postCurrenciesMapping</p>
     * Adds channel currency code mapping
     */
    async postCurrenciesMapping(requestParameters: PostCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCurrenciesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add a distribution rate template. <p><strong>OperationId:</strong>postDistributionTemplates</p>
     * Adds rate templates configurations
     */
    async postDistributionTemplatesRaw(requestParameters: PostDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postDistributionTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postDistributionTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postDistributionTemplates.');
        }

        if (requestParameters.distributionTemplates === null || requestParameters.distributionTemplates === undefined) {
            throw new runtime.RequiredError('distributionTemplates','Required parameter requestParameters.distributionTemplates was null or undefined when calling postDistributionTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/distributionTemplates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DistributionTemplatesToJSON(requestParameters.distributionTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add a distribution rate template. <p><strong>OperationId:</strong>postDistributionTemplates</p>
     * Adds rate templates configurations
     */
    async postDistributionTemplates(requestParameters: PostDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDistributionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>postGuaranteesMapping</p>
     * Adds channel guarantee code mapping
     */
    async postGuaranteesMappingRaw(requestParameters: PostGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postGuaranteesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postGuaranteesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postGuaranteesMapping.');
        }

        if (requestParameters.guarantees === null || requestParameters.guarantees === undefined) {
            throw new runtime.RequiredError('guarantees','Required parameter requestParameters.guarantees was null or undefined when calling postGuaranteesMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/guarantees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuaranteesToJSON(requestParameters.guarantees),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel\'s guarantee codes mapping to OPERA guarantee codes. <p><strong>OperationId:</strong>postGuaranteesMapping</p>
     * Adds channel guarantee code mapping
     */
    async postGuaranteesMapping(requestParameters: PostGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuaranteesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>postHotelsMapping</p>
     * Adds channel hotel mapping
     */
    async postHotelsMappingRaw(requestParameters: PostHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postHotelsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postHotelsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postHotelsMapping.');
        }

        if (requestParameters.properties === null || requestParameters.properties === undefined) {
            throw new runtime.RequiredError('properties','Required parameter requestParameters.properties was null or undefined when calling postHotelsMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/hotels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertiesToJSON(requestParameters.properties),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date. <p><strong>OperationId:</strong>postHotelsMapping</p>
     * Adds channel hotel mapping
     */
    async postHotelsMapping(requestParameters: PostHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>postTotalPricingElements</p>
     * Adds total pricing tax and fee types
     */
    async postTotalPricingElementsRaw(requestParameters: PostTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postTotalPricingElements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postTotalPricingElements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postTotalPricingElements.');
        }

        if (requestParameters.totalPricingElements === null || requestParameters.totalPricingElements === undefined) {
            throw new runtime.RequiredError('totalPricingElements','Required parameter requestParameters.totalPricingElements was null or undefined when calling postTotalPricingElements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/totalPricing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TotalPricingElementsToJSON(requestParameters.totalPricingElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to add global distribution channels tax and fee configurations. <p><strong>OperationId:</strong>postTotalPricingElements</p>
     * Adds total pricing tax and fee types
     */
    async postTotalPricingElements(requestParameters: PostTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTotalPricingElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API changes publishes channel availability. <p><strong>OperationId:</strong>publishChannelAvailability</p>
     * Publishes channel availability.
     */
    async publishChannelAvailabilityRaw(requestParameters: PublishChannelAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling publishChannelAvailability.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling publishChannelAvailability.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling publishChannelAvailability.');
        }

        if (requestParameters.channelAvailability === null || requestParameters.channelAvailability === undefined) {
            throw new runtime.RequiredError('channelAvailability','Required parameter requestParameters.channelAvailability was null or undefined when calling publishChannelAvailability.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/availability/publish`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelAvailabilityToJSON(requestParameters.channelAvailability),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API changes publishes channel availability. <p><strong>OperationId:</strong>publishChannelAvailability</p>
     * Publishes channel availability.
     */
    async publishChannelAvailability(requestParameters: PublishChannelAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.publishChannelAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API changes the channel rate plans for given channel code. <p><strong>OperationId:</strong>publishChannelRatePlans</p>
     * Publishes channel rate plan codes
     */
    async publishChannelRatePlansRaw(requestParameters: PublishChannelRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling publishChannelRatePlans.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling publishChannelRatePlans.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling publishChannelRatePlans.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling publishChannelRatePlans.');
        }

        if (requestParameters.channelRatePlans === null || requestParameters.channelRatePlans === undefined) {
            throw new runtime.RequiredError('channelRatePlans','Required parameter requestParameters.channelRatePlans was null or undefined when calling publishChannelRatePlans.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/ratePlans`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRatePlansToJSON(requestParameters.channelRatePlans),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API changes the channel rate plans for given channel code. <p><strong>OperationId:</strong>publishChannelRatePlans</p>
     * Publishes channel rate plan codes
     */
    async publishChannelRatePlans(requestParameters: PublishChannelRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.publishChannelRatePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API changes the channel restrictions. <p><strong>OperationId:</strong>publishChannelRestrictions</p>
     * Publishes channel restrictions
     */
    async publishChannelRestrictionsRaw(requestParameters: PublishChannelRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling publishChannelRestrictions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling publishChannelRestrictions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling publishChannelRestrictions.');
        }

        if (requestParameters.channelRestrictions === null || requestParameters.channelRestrictions === undefined) {
            throw new runtime.RequiredError('channelRestrictions','Required parameter requestParameters.channelRestrictions was null or undefined when calling publishChannelRestrictions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/restrictions/publish`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRestrictionsToJSON(requestParameters.channelRestrictions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API changes the channel restrictions. <p><strong>OperationId:</strong>publishChannelRestrictions</p>
     * Publishes channel restrictions
     */
    async publishChannelRestrictions(requestParameters: PublishChannelRestrictionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.publishChannelRestrictionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API changes the channel rate plans for given Hotel Id. <p><strong>OperationId:</strong>publishHotelChannelRatePlans</p>
     * Publishes channel hotel rate plan codes
     */
    async publishHotelChannelRatePlansRaw(requestParameters: PublishHotelChannelRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling publishHotelChannelRatePlans.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling publishHotelChannelRatePlans.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling publishHotelChannelRatePlans.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling publishHotelChannelRatePlans.');
        }

        if (requestParameters.channelRatePlans === null || requestParameters.channelRatePlans === undefined) {
            throw new runtime.RequiredError('channelRatePlans','Required parameter requestParameters.channelRatePlans was null or undefined when calling publishHotelChannelRatePlans.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRatePlansToJSON(requestParameters.channelRatePlans),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API changes the channel rate plans for given Hotel Id. <p><strong>OperationId:</strong>publishHotelChannelRatePlans</p>
     * Publishes channel hotel rate plan codes
     */
    async publishHotelChannelRatePlans(requestParameters: PublishHotelChannelRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.publishHotelChannelRatePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel amenities mapping <p><strong>OperationId:</strong>putAmenitiesMapping</p>
     * Updates channel amenities configuration
     */
    async putAmenitiesMappingRaw(requestParameters: PutAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putAmenitiesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putAmenitiesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putAmenitiesMapping.');
        }

        if (requestParameters.amenities === null || requestParameters.amenities === undefined) {
            throw new runtime.RequiredError('amenities','Required parameter requestParameters.amenities was null or undefined when calling putAmenitiesMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/amenities`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AmenitiesToJSON(requestParameters.amenities),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel amenities mapping <p><strong>OperationId:</strong>putAmenitiesMapping</p>
     * Updates channel amenities configuration
     */
    async putAmenitiesMapping(requestParameters: PutAmenitiesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAmenitiesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update existing cannel account contract for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccountContracts</p>
     * Updates channel account contracts for given profile Id.
     */
    async putChannelAccountContractsRaw(requestParameters: PutChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.accountProfileId === null || requestParameters.accountProfileId === undefined) {
            throw new runtime.RequiredError('accountProfileId','Required parameter requestParameters.accountProfileId was null or undefined when calling putChannelAccountContracts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelAccountContracts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelAccountContracts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelAccountContracts.');
        }

        if (requestParameters.channelAccountContracts === null || requestParameters.channelAccountContracts === undefined) {
            throw new runtime.RequiredError('channelAccountContracts','Required parameter requestParameters.channelAccountContracts was null or undefined when calling putChannelAccountContracts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/accounts/{accountProfileId}/contracts`.replace(`{${"accountProfileId"}}`, encodeURIComponent(String(requestParameters.accountProfileId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelAccountContractsToJSON(requestParameters.channelAccountContracts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update existing cannel account contract for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccountContracts</p>
     * Updates channel account contracts for given profile Id.
     */
    async putChannelAccountContracts(requestParameters: PutChannelAccountContractsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelAccountContractsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update existing channel account for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccounts</p>
     * Updates channel accounts
     */
    async putChannelAccountsRaw(requestParameters: PutChannelAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelAccounts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelAccounts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelAccounts.');
        }

        if (requestParameters.channelAccountsToChange === null || requestParameters.channelAccountsToChange === undefined) {
            throw new runtime.RequiredError('channelAccountsToChange','Required parameter requestParameters.channelAccountsToChange was null or undefined when calling putChannelAccounts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/accounts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelAccountsToChangeToJSON(requestParameters.channelAccountsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update existing channel account for a given OPERA profile id <p><strong>OperationId:</strong>putChannelAccounts</p>
     * Updates channel accounts
     */
    async putChannelAccounts(requestParameters: PutChannelAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channels billing statements for a given OPERA statement id <p><strong>OperationId:</strong>putChannelBillingStatements</p>
     * Updates channel billing statement details
     */
    async putChannelBillingStatementsRaw(requestParameters: PutChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelBillingStatements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelBillingStatements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelBillingStatements.');
        }

        if (requestParameters.channelBillingStatements === null || requestParameters.channelBillingStatements === undefined) {
            throw new runtime.RequiredError('channelBillingStatements','Required parameter requestParameters.channelBillingStatements was null or undefined when calling putChannelBillingStatements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/billingStatements`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelBillingStatementsToJSON(requestParameters.channelBillingStatements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channels billing statements for a given OPERA statement id <p><strong>OperationId:</strong>putChannelBillingStatements</p>
     * Updates channel billing statement details
     */
    async putChannelBillingStatements(requestParameters: PutChannelBillingStatementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelBillingStatementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>putChannelCardTypeMapping</p>
     * Updates channel credit card mapping for a hotel
     */
    async putChannelCardTypeMappingRaw(requestParameters: PutChannelCardTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cardTypeCode === null || requestParameters.cardTypeCode === undefined) {
            throw new runtime.RequiredError('cardTypeCode','Required parameter requestParameters.cardTypeCode was null or undefined when calling putChannelCardTypeMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelCardTypeMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putChannelCardTypeMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelCardTypeMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelCardTypeMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelCardTypeMapping.');
        }

        if (requestParameters.channelCardTypeMappings === null || requestParameters.channelCardTypeMappings === undefined) {
            throw new runtime.RequiredError('channelCardTypeMappings','Required parameter requestParameters.channelCardTypeMappings was null or undefined when calling putChannelCardTypeMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/cardType/{cardTypeCode}`.replace(`{${"cardTypeCode"}}`, encodeURIComponent(String(requestParameters.cardTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelCardTypeMappingsToJSON(requestParameters.channelCardTypeMappings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel mapping for OPERA credit cards to channel for a given hotel id <p><strong>OperationId:</strong>putChannelCardTypeMapping</p>
     * Updates channel credit card mapping for a hotel
     */
    async putChannelCardTypeMapping(requestParameters: PutChannelCardTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelCardTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>putChannelCarriers</p>
     * Updates sub channel configuration
     */
    async putChannelCarriersRaw(requestParameters: PutChannelCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelCarriers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelCarriers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelCarriers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelCarriers.');
        }

        if (requestParameters.channelCarriers === null || requestParameters.channelCarriers === undefined) {
            throw new runtime.RequiredError('channelCarriers','Required parameter requestParameters.channelCarriers was null or undefined when calling putChannelCarriers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/subChannels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelCarriersToJSON(requestParameters.channelCarriers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update sub-channel (carrier) configuration for a given channel code <p><strong>OperationId:</strong>putChannelCarriers</p>
     * Updates sub channel configuration
     */
    async putChannelCarriers(requestParameters: PutChannelCarriersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelCarriersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel error code mapping configurations <p><strong>OperationId:</strong>putChannelErrors</p>
     * Updates channel error codes
     */
    async putChannelErrorsRaw(requestParameters: PutChannelErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelErrors.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelErrors.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelErrors.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelErrors.');
        }

        if (requestParameters.channelErrors === null || requestParameters.channelErrors === undefined) {
            throw new runtime.RequiredError('channelErrors','Required parameter requestParameters.channelErrors was null or undefined when calling putChannelErrors.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/errorCodes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelErrorsToJSON(requestParameters.channelErrors),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel error code mapping configurations <p><strong>OperationId:</strong>putChannelErrors</p>
     * Updates channel error codes
     */
    async putChannelErrors(requestParameters: PutChannelErrorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelErrorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>putChannelGuaranteeCodeMapping</p>
     * Updates channel guarantee code mapping for a hotel
     */
    async putChannelGuaranteeCodeMappingRaw(requestParameters: PutChannelGuaranteeCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling putChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelGuaranteeCodeMapping.');
        }

        if (requestParameters.channelGuaranteeCodeMappings === null || requestParameters.channelGuaranteeCodeMappings === undefined) {
            throw new runtime.RequiredError('channelGuaranteeCodeMappings','Required parameter requestParameters.channelGuaranteeCodeMappings was null or undefined when calling putChannelGuaranteeCodeMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/guarantees/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGuaranteeCodeMappingsToJSON(requestParameters.channelGuaranteeCodeMappings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel guarantee code mapping to OPERA guarantee code for a given hotel <p><strong>OperationId:</strong>putChannelGuaranteeCodeMapping</p>
     * Updates channel guarantee code mapping for a hotel
     */
    async putChannelGuaranteeCodeMapping(requestParameters: PutChannelGuaranteeCodeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelGuaranteeCodeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel property confirmation letter configuration <p><strong>OperationId:</strong>putChannelHotelLetters</p>
     * Updates channel property confirmation letter mapping
     */
    async putChannelHotelLettersRaw(requestParameters: PutChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelHotelLetters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelHotelLetters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelHotelLetters.');
        }

        if (requestParameters.channelHotelLettersToBeChanged === null || requestParameters.channelHotelLettersToBeChanged === undefined) {
            throw new runtime.RequiredError('channelHotelLettersToBeChanged','Required parameter requestParameters.channelHotelLettersToBeChanged was null or undefined when calling putChannelHotelLetters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/confirmationLetters`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelHotelLettersToBeChangedToJSON(requestParameters.channelHotelLettersToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel property confirmation letter configuration <p><strong>OperationId:</strong>putChannelHotelLetters</p>
     * Updates channel property confirmation letter mapping
     */
    async putChannelHotelLetters(requestParameters: PutChannelHotelLettersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelHotelLettersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel mapping for marketing messages <p><strong>OperationId:</strong>putChannelMarketingText</p>
     * Updates channel marketing messages
     */
    async putChannelMarketingTextRaw(requestParameters: PutChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelMarketingText.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelMarketingText.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelMarketingText.');
        }

        if (requestParameters.channelMarketingTextToChange === null || requestParameters.channelMarketingTextToChange === undefined) {
            throw new runtime.RequiredError('channelMarketingTextToChange','Required parameter requestParameters.channelMarketingTextToChange was null or undefined when calling putChannelMarketingText.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/marketingText`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelMarketingTextToChangeToJSON(requestParameters.channelMarketingTextToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel mapping for marketing messages <p><strong>OperationId:</strong>putChannelMarketingText</p>
     * Updates channel marketing messages
     */
    async putChannelMarketingText(requestParameters: PutChannelMarketingTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelMarketingTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>putChannelNegotiatedRate</p>
     * Updates channel negotiate rate
     */
    async putChannelNegotiatedRateRaw(requestParameters: PutChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelNegotiatedRate.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelNegotiatedRate.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelNegotiatedRate.');
        }

        if (requestParameters.channelNegotiatedRates === null || requestParameters.channelNegotiatedRates === undefined) {
            throw new runtime.RequiredError('channelNegotiatedRates','Required parameter requestParameters.channelNegotiatedRates was null or undefined when calling putChannelNegotiatedRate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/negotiatedRates`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelNegotiatedRatesToJSON(requestParameters.channelNegotiatedRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel\'s negotiated rate code mapping including negotiated profile, negotiate rate access code, start date, end date, and sequence. <p><strong>OperationId:</strong>putChannelNegotiatedRate</p>
     * Updates channel negotiate rate
     */
    async putChannelNegotiatedRate(requestParameters: PutChannelNegotiatedRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelNegotiatedRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API changes channel tenants mapping. <p><strong>OperationId:</strong>putChannelOrgMapping</p>
     * Updates channel tenants mapping.
     */
    async putChannelOrgMappingRaw(requestParameters: PutChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.tenantCode === null || requestParameters.tenantCode === undefined) {
            throw new runtime.RequiredError('tenantCode','Required parameter requestParameters.tenantCode was null or undefined when calling putChannelOrgMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelOrgMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelOrgMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelOrgMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelOrgMapping.');
        }

        if (requestParameters.channelOrgMapping === null || requestParameters.channelOrgMapping === undefined) {
            throw new runtime.RequiredError('channelOrgMapping','Required parameter requestParameters.channelOrgMapping was null or undefined when calling putChannelOrgMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/tenants/{tenantCode}`.replace(`{${"tenantCode"}}`, encodeURIComponent(String(requestParameters.tenantCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelOrgMappingToJSON(requestParameters.channelOrgMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API changes channel tenants mapping. <p><strong>OperationId:</strong>putChannelOrgMapping</p>
     * Updates channel tenants mapping.
     */
    async putChannelOrgMapping(requestParameters: PutChannelOrgMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelOrgMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to active/inactive channel controls. It also allows to update channel control settings. <p><strong>OperationId:</strong>putChannelParameters</p>
     * Updates channel control settings
     */
    async putChannelParametersRaw(requestParameters: PutChannelParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelParameters.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelParameters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelParameters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelParameters.');
        }

        if (requestParameters.changeChannelParameters === null || requestParameters.changeChannelParameters === undefined) {
            throw new runtime.RequiredError('changeChannelParameters','Required parameter requestParameters.changeChannelParameters was null or undefined when calling putChannelParameters.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/parameters`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeChannelParametersToJSON(requestParameters.changeChannelParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to active/inactive channel controls. It also allows to update channel control settings. <p><strong>OperationId:</strong>putChannelParameters</p>
     * Updates channel control settings
     */
    async putChannelParameters(requestParameters: PutChannelParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel rate categories for a given channel. <p><strong>OperationId:</strong>putChannelRateCategories</p>
     * Updates given channel\'s rate categories
     */
    async putChannelRateCategoriesRaw(requestParameters: PutChannelRateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelRateCategories.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRateCategories.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRateCategories.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRateCategories.');
        }

        if (requestParameters.channelRateCategories === null || requestParameters.channelRateCategories === undefined) {
            throw new runtime.RequiredError('channelRateCategories','Required parameter requestParameters.channelRateCategories was null or undefined when calling putChannelRateCategories.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/rateCategories`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRateCategoriesToJSON(requestParameters.channelRateCategories),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel rate categories for a given channel. <p><strong>OperationId:</strong>putChannelRateCategories</p>
     * Updates given channel\'s rate categories
     */
    async putChannelRateCategories(requestParameters: PutChannelRateCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRateCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel rate level code\'s description <p><strong>OperationId:</strong>putChannelRateLevels</p>
     * Updates channel rate level
     */
    async putChannelRateLevelsRaw(requestParameters: PutChannelRateLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelRateLevels.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRateLevels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRateLevels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRateLevels.');
        }

        if (requestParameters.channelRateLevels === null || requestParameters.channelRateLevels === undefined) {
            throw new runtime.RequiredError('channelRateLevels','Required parameter requestParameters.channelRateLevels was null or undefined when calling putChannelRateLevels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/rateLevels`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRateLevelsToJSON(requestParameters.channelRateLevels),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel rate level code\'s description <p><strong>OperationId:</strong>putChannelRateLevels</p>
     * Updates channel rate level
     */
    async putChannelRateLevels(requestParameters: PutChannelRateLevelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRateLevelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>putChannelRateMapping</p>
     * Updates channel property rate mapping
     */
    async putChannelRateMappingRaw(requestParameters: PutChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRateMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRateMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRateMapping.');
        }

        if (requestParameters.channelRateMapping === null || requestParameters.channelRateMapping === undefined) {
            throw new runtime.RequiredError('channelRateMapping','Required parameter requestParameters.channelRateMapping was null or undefined when calling putChannelRateMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRateMappingToJSON(requestParameters.channelRateMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel property rate mapping including channel rate code, start date, end date, rate level, channel rate description. <p><strong>OperationId:</strong>putChannelRateMapping</p>
     * Updates channel property rate mapping
     */
    async putChannelRateMapping(requestParameters: PutChannelRateMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRateMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update sequence for given channel property rate room mapping  <p><strong>OperationId:</strong>putChannelRateRoomSeq</p>
     * Updates channel property rateroom sequence
     */
    async putChannelRateRoomSeqRaw(requestParameters: PutChannelRateRoomSeqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRateRoomSeq.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRateRoomSeq.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRateRoomSeq.');
        }

        if (requestParameters.channelRateRoomSequence === null || requestParameters.channelRateRoomSequence === undefined) {
            throw new runtime.RequiredError('channelRateRoomSequence','Required parameter requestParameters.channelRateRoomSequence was null or undefined when calling putChannelRateRoomSeq.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates/roomSequence`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRateRoomSequenceToJSON(requestParameters.channelRateRoomSequence),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update sequence for given channel property rate room mapping  <p><strong>OperationId:</strong>putChannelRateRoomSeq</p>
     * Updates channel property rateroom sequence
     */
    async putChannelRateRoomSeq(requestParameters: PutChannelRateRoomSeqRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRateRoomSeqRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update global rate description for given hotel id and rate code <p><strong>OperationId:</strong>putChannelRatesGlobalDescriptions</p>
     * Updates global rate descriptions
     */
    async putChannelRatesGlobalDescriptionsRaw(requestParameters: PutChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRatesGlobalDescriptions.');
        }

        if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
            throw new runtime.RequiredError('channelGlobalDescriptions','Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling putChannelRatesGlobalDescriptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rates/globalDescriptions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGlobalDescriptionsToJSON(requestParameters.channelGlobalDescriptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update global rate description for given hotel id and rate code <p><strong>OperationId:</strong>putChannelRatesGlobalDescriptions</p>
     * Updates global rate descriptions
     */
    async putChannelRatesGlobalDescriptions(requestParameters: PutChannelRatesGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRatesGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>putChannelRoomMapping</p>
     * Updates channel property room mapping
     */
    async putChannelRoomMappingRaw(requestParameters: PutChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
            throw new runtime.RequiredError('roomTypeCode','Required parameter requestParameters.roomTypeCode was null or undefined when calling putChannelRoomMapping.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelRoomMapping.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putChannelRoomMapping.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRoomMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRoomMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRoomMapping.');
        }

        if (requestParameters.channelRoomMapping === null || requestParameters.channelRoomMapping === undefined) {
            throw new runtime.RequiredError('channelRoomMapping','Required parameter requestParameters.channelRoomMapping was null or undefined when calling putChannelRoomMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRoomMappingToJSON(requestParameters.channelRoomMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel room mapping to OPERA hotel\'s room mapping including channel room type code, start date, end date, room order. <p><strong>OperationId:</strong>putChannelRoomMapping</p>
     * Updates channel property room mapping
     */
    async putChannelRoomMapping(requestParameters: PutChannelRoomMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRoomMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>putChannelRoomTypes</p>
     * Updates channel room
     */
    async putChannelRoomTypesRaw(requestParameters: PutChannelRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putChannelRoomTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRoomTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRoomTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRoomTypes.');
        }

        if (requestParameters.channelRoomTypes === null || requestParameters.channelRoomTypes === undefined) {
            throw new runtime.RequiredError('channelRoomTypes','Required parameter requestParameters.channelRoomTypes was null or undefined when calling putChannelRoomTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/roomTypes`.replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelRoomTypesToJSON(requestParameters.channelRoomTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel room description <p><strong>OperationId:</strong>putChannelRoomTypes</p>
     * Updates channel room
     */
    async putChannelRoomTypes(requestParameters: PutChannelRoomTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRoomTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update global room description for given hotel id and room type code <p><strong>OperationId:</strong>putChannelRoomsGlobalDescriptions</p>
     * Updates global room descriptions
     */
    async putChannelRoomsGlobalDescriptionsRaw(requestParameters: PutChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannelRoomsGlobalDescriptions.');
        }

        if (requestParameters.channelGlobalDescriptions === null || requestParameters.channelGlobalDescriptions === undefined) {
            throw new runtime.RequiredError('channelGlobalDescriptions','Required parameter requestParameters.channelGlobalDescriptions was null or undefined when calling putChannelRoomsGlobalDescriptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rooms/globalDescriptions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGlobalDescriptionsToJSON(requestParameters.channelGlobalDescriptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update global room description for given hotel id and room type code <p><strong>OperationId:</strong>putChannelRoomsGlobalDescriptions</p>
     * Updates global room descriptions
     */
    async putChannelRoomsGlobalDescriptions(requestParameters: PutChannelRoomsGlobalDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelRoomsGlobalDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel configuration <p><strong>OperationId:</strong>putChannels</p>
     * Update channel configuration
     */
    async putChannelsRaw(requestParameters: PutChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putChannels.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putChannels.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putChannels.');
        }

        if (requestParameters.channels === null || requestParameters.channels === undefined) {
            throw new runtime.RequiredError('channels','Required parameter requestParameters.channels was null or undefined when calling putChannels.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelsToJSON(requestParameters.channels),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel configuration <p><strong>OperationId:</strong>putChannels</p>
     * Update channel configuration
     */
    async putChannels(requestParameters: PutChannelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putChannelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel credit card code mapping to OPERA credit card code <p><strong>OperationId:</strong>putCreditCardsMapping</p>
     * Updates channel credit card mapping
     */
    async putCreditCardsMappingRaw(requestParameters: PutCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCreditCardsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCreditCardsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCreditCardsMapping.');
        }

        if (requestParameters.creditCards === null || requestParameters.creditCards === undefined) {
            throw new runtime.RequiredError('creditCards','Required parameter requestParameters.creditCards was null or undefined when calling putCreditCardsMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/cardTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreditCardsToJSON(requestParameters.creditCards),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel credit card code mapping to OPERA credit card code <p><strong>OperationId:</strong>putCreditCardsMapping</p>
     * Updates channel credit card mapping
     */
    async putCreditCardsMapping(requestParameters: PutCreditCardsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCreditCardsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel mapping to OPERA currency codes <p><strong>OperationId:</strong>putCurrenciesMapping</p>
     * Updates channel currency code mapping
     */
    async putCurrenciesMappingRaw(requestParameters: PutCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCurrenciesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCurrenciesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCurrenciesMapping.');
        }

        if (requestParameters.currencies === null || requestParameters.currencies === undefined) {
            throw new runtime.RequiredError('currencies','Required parameter requestParameters.currencies was null or undefined when calling putCurrenciesMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/currencies`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurrenciesToJSON(requestParameters.currencies),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel mapping to OPERA currency codes <p><strong>OperationId:</strong>putCurrenciesMapping</p>
     * Updates channel currency code mapping
     */
    async putCurrenciesMapping(requestParameters: PutCurrenciesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCurrenciesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update existing distribution rate template <p><strong>OperationId:</strong>putDistributionTemplates</p>
     * Updates rate templates configurations
     */
    async putDistributionTemplatesRaw(requestParameters: PutDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putDistributionTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putDistributionTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putDistributionTemplates.');
        }

        if (requestParameters.distributionTemplates === null || requestParameters.distributionTemplates === undefined) {
            throw new runtime.RequiredError('distributionTemplates','Required parameter requestParameters.distributionTemplates was null or undefined when calling putDistributionTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/distributionTemplates`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DistributionTemplatesToJSON(requestParameters.distributionTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update existing distribution rate template <p><strong>OperationId:</strong>putDistributionTemplates</p>
     * Updates rate templates configurations
     */
    async putDistributionTemplates(requestParameters: PutDistributionTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDistributionTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel\'s guarantee codes mapping to OPERA guarantee codes <p><strong>OperationId:</strong>putGuaranteesMapping</p>
     * Updates channel guarantee code mapping
     */
    async putGuaranteesMappingRaw(requestParameters: PutGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putGuaranteesMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putGuaranteesMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putGuaranteesMapping.');
        }

        if (requestParameters.guarantees === null || requestParameters.guarantees === undefined) {
            throw new runtime.RequiredError('guarantees','Required parameter requestParameters.guarantees was null or undefined when calling putGuaranteesMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/guarantees`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuaranteesToJSON(requestParameters.guarantees),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel\'s guarantee codes mapping to OPERA guarantee codes <p><strong>OperationId:</strong>putGuaranteesMapping</p>
     * Updates channel guarantee code mapping
     */
    async putGuaranteesMapping(requestParameters: PutGuaranteesMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGuaranteesMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date <p><strong>OperationId:</strong>putHotelsMapping</p>
     * Updates channel hotel mapping
     */
    async putHotelsMappingRaw(requestParameters: PutHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putHotelsMapping.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putHotelsMapping.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putHotelsMapping.');
        }

        if (requestParameters.properties === null || requestParameters.properties === undefined) {
            throw new runtime.RequiredError('properties','Required parameter requestParameters.properties was null or undefined when calling putHotelsMapping.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/hotels`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PropertiesToJSON(requestParameters.properties),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel mapping to OPERA hotel id including channel hotel code, room sell limit per reservation, city code, end date <p><strong>OperationId:</strong>putHotelsMapping</p>
     * Updates channel hotel mapping
     */
    async putHotelsMapping(requestParameters: PutHotelsMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putHotelsMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update OPERA rate\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRateGlobalDescription</p>
     * Updates global descriptions for a rate
     */
    async putRateGlobalDescriptionRaw(requestParameters: PutRateGlobalDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelRateCode === null || requestParameters.channelRateCode === undefined) {
            throw new runtime.RequiredError('channelRateCode','Required parameter requestParameters.channelRateCode was null or undefined when calling putRateGlobalDescription.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling putRateGlobalDescription.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRateGlobalDescription.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRateGlobalDescription.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRateGlobalDescription.');
        }

        if (requestParameters.channelGlobalDescription === null || requestParameters.channelGlobalDescription === undefined) {
            throw new runtime.RequiredError('channelGlobalDescription','Required parameter requestParameters.channelGlobalDescription was null or undefined when calling putRateGlobalDescription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/{channelCode}/rates/{channelRateCode}/globalDescription`.replace(`{${"channelRateCode"}}`, encodeURIComponent(String(requestParameters.channelRateCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGlobalDescriptionToJSON(requestParameters.channelGlobalDescription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update OPERA rate\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRateGlobalDescription</p>
     * Updates global descriptions for a rate
     */
    async putRateGlobalDescription(requestParameters: PutRateGlobalDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRateGlobalDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update OPERA room\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRoomDescription</p>
     * Update global descriptions for a room
     */
    async putRoomDescriptionRaw(requestParameters: PutRoomDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRoomDescription.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRoomDescription.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRoomDescription.');
        }

        if (requestParameters.channelGlobalDescription === null || requestParameters.channelGlobalDescription === undefined) {
            throw new runtime.RequiredError('channelGlobalDescription','Required parameter requestParameters.channelGlobalDescription was null or undefined when calling putRoomDescription.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/channels/rooms/globalDescription`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelGlobalDescriptionToJSON(requestParameters.channelGlobalDescription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update OPERA room\'s global description for global distribution type channels <p><strong>OperationId:</strong>putRoomDescription</p>
     * Update global descriptions for a room
     */
    async putRoomDescription(requestParameters: PutRoomDescriptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomDescriptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update global distribution channels tax and fee configurations <p><strong>OperationId:</strong>putTotalPricingElements</p>
     * Updates total pricing tax and fee types
     */
    async putTotalPricingElementsRaw(requestParameters: PutTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putTotalPricingElements.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putTotalPricingElements.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putTotalPricingElements.');
        }

        if (requestParameters.totalPricingElements === null || requestParameters.totalPricingElements === undefined) {
            throw new runtime.RequiredError('totalPricingElements','Required parameter requestParameters.totalPricingElements was null or undefined when calling putTotalPricingElements.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/totalPricing`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TotalPricingElementsToJSON(requestParameters.totalPricingElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update global distribution channels tax and fee configurations <p><strong>OperationId:</strong>putTotalPricingElements</p>
     * Updates total pricing tax and fee types
     */
    async putTotalPricingElements(requestParameters: PutTotalPricingElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTotalPricingElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteAmenitiesMappingAmenityGroupEnum = {
    PropertyFeatures: 'PropertyFeatures',
    RoomFeatures: 'RoomFeatures',
    ProductsFeatures: 'ProductsFeatures',
    BedCodes: 'BedCodes'
} as const;
export type DeleteAmenitiesMappingAmenityGroupEnum = typeof DeleteAmenitiesMappingAmenityGroupEnum[keyof typeof DeleteAmenitiesMappingAmenityGroupEnum];
/**
 * @export
 */
export const DeleteChannelHotelLettersLetterTypeEnum = {
    Confirmation: 'Confirmation',
    Cancellation: 'Cancellation',
    BanquetEventOrder: 'BanquetEventOrder',
    Contract: 'Contract',
    Inquiry: 'Inquiry'
} as const;
export type DeleteChannelHotelLettersLetterTypeEnum = typeof DeleteChannelHotelLettersLetterTypeEnum[keyof typeof DeleteChannelHotelLettersLetterTypeEnum];
/**
 * @export
 */
export const DeleteChannelNegotiatedRateNameTypeEnum = {
    Primary: 'Primary',
    Alternate: 'Alternate',
    Incognito: 'Incognito',
    External: 'External',
    Phonetic: 'Phonetic'
} as const;
export type DeleteChannelNegotiatedRateNameTypeEnum = typeof DeleteChannelNegotiatedRateNameTypeEnum[keyof typeof DeleteChannelNegotiatedRateNameTypeEnum];
/**
 * @export
 */
export const DeleteChannelRatesGlobalDescriptionsGlobalDescTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
} as const;
export type DeleteChannelRatesGlobalDescriptionsGlobalDescTypeEnum = typeof DeleteChannelRatesGlobalDescriptionsGlobalDescTypeEnum[keyof typeof DeleteChannelRatesGlobalDescriptionsGlobalDescTypeEnum];
/**
 * @export
 */
export const DeleteChannelRoomsGlobalDescriptionsGlobalDescTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
} as const;
export type DeleteChannelRoomsGlobalDescriptionsGlobalDescTypeEnum = typeof DeleteChannelRoomsGlobalDescriptionsGlobalDescTypeEnum[keyof typeof DeleteChannelRoomsGlobalDescriptionsGlobalDescTypeEnum];
/**
 * @export
 */
export const GetChannelFetchInstructionsEnum = {
    RateLevel: 'RateLevel',
    Error: 'Error',
    RoomType: 'RoomType',
    Carrier: 'Carrier',
    RateCategory: 'RateCategory'
} as const;
export type GetChannelFetchInstructionsEnum = typeof GetChannelFetchInstructionsEnum[keyof typeof GetChannelFetchInstructionsEnum];
/**
 * @export
 */
export const GetChannelAccountFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    Communication: 'Communication',
    Contact: 'Contact',
    Notes: 'Notes',
    Contracts: 'Contracts',
    Statements: 'Statements',
    Indicators: 'Indicators'
} as const;
export type GetChannelAccountFetchInstructionsEnum = typeof GetChannelAccountFetchInstructionsEnum[keyof typeof GetChannelAccountFetchInstructionsEnum];
/**
 * @export
 */
export const GetChannelAccountContractElementsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetChannelAccountContractElementsOrderTypeEnum = typeof GetChannelAccountContractElementsOrderTypeEnum[keyof typeof GetChannelAccountContractElementsOrderTypeEnum];
/**
 * @export
 */
export const GetChannelAccountsAccountTypeEnum = {
    Property: 'Property',
    Chain: 'Chain',
    Dealer: 'Dealer',
    Subsidiary: 'Subsidiary',
    Routing: 'Routing',
    Template: 'Template'
} as const;
export type GetChannelAccountsAccountTypeEnum = typeof GetChannelAccountsAccountTypeEnum[keyof typeof GetChannelAccountsAccountTypeEnum];
/**
 * @export
 */
export const GetChannelAccountsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetChannelAccountsOrderTypeEnum = typeof GetChannelAccountsOrderTypeEnum[keyof typeof GetChannelAccountsOrderTypeEnum];
/**
 * @export
 */
export const GetChannelBillingStatementDetailsOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetChannelBillingStatementDetailsOrderTypeEnum = typeof GetChannelBillingStatementDetailsOrderTypeEnum[keyof typeof GetChannelBillingStatementDetailsOrderTypeEnum];
/**
 * @export
 */
export const GetChannelHotelLettersLetterTypeEnum = {
    Confirmation: 'Confirmation',
    Cancellation: 'Cancellation',
    BanquetEventOrder: 'BanquetEventOrder',
    Contract: 'Contract',
    Inquiry: 'Inquiry'
} as const;
export type GetChannelHotelLettersLetterTypeEnum = typeof GetChannelHotelLettersLetterTypeEnum[keyof typeof GetChannelHotelLettersLetterTypeEnum];
/**
 * @export
 */
export const GetChannelMarketingTextFetchInstructionsEnum = {
    Marketingtext: 'Marketingtext',
    Amenity: 'Amenity',
    Carrier: 'Carrier',
    Currency: 'Currency',
    Error: 'Error',
    Guarantee: 'Guarantee',
    Ratecategory: 'Ratecategory'
} as const;
export type GetChannelMarketingTextFetchInstructionsEnum = typeof GetChannelMarketingTextFetchInstructionsEnum[keyof typeof GetChannelMarketingTextFetchInstructionsEnum];
/**
 * @export
 */
export const GetChannelRateRoomSeqChannelRateRoomParameterNameEnum = {
    ShowInactive: 'ShowInactive'
} as const;
export type GetChannelRateRoomSeqChannelRateRoomParameterNameEnum = typeof GetChannelRateRoomSeqChannelRateRoomParameterNameEnum[keyof typeof GetChannelRateRoomSeqChannelRateRoomParameterNameEnum];
/**
 * @export
 */
export const GetChannelRatesGlobalDescriptionsGlobalDescriptionTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
} as const;
export type GetChannelRatesGlobalDescriptionsGlobalDescriptionTypeEnum = typeof GetChannelRatesGlobalDescriptionsGlobalDescriptionTypeEnum[keyof typeof GetChannelRatesGlobalDescriptionsGlobalDescriptionTypeEnum];
/**
 * @export
 */
export const GetChannelRoomsGlobalDescriptionsGlobalDescriptionTypeEnum = {
    RoomType: 'RoomType',
    RatePlan: 'RatePlan'
} as const;
export type GetChannelRoomsGlobalDescriptionsGlobalDescriptionTypeEnum = typeof GetChannelRoomsGlobalDescriptionsGlobalDescriptionTypeEnum[keyof typeof GetChannelRoomsGlobalDescriptionsGlobalDescriptionTypeEnum];
/**
 * @export
 */
export const GetStatementDetailsStatisticsFetchInstructionsEnum = {
    ByResort: 'ByResort',
    ByChannel: 'ByChannel',
    ByChannelType: 'ByChannelType',
    ByFeeType: 'ByFeeType'
} as const;
export type GetStatementDetailsStatisticsFetchInstructionsEnum = typeof GetStatementDetailsStatisticsFetchInstructionsEnum[keyof typeof GetStatementDetailsStatisticsFetchInstructionsEnum];
