/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelSellLimits,
  ChannelSellLimitsByDate,
  ChannelSellLimitsByDateRange,
  ExceptionDetailType,
  Status,
} from '../models/index';
import {
    ChannelSellLimitsFromJSON,
    ChannelSellLimitsToJSON,
    ChannelSellLimitsByDateFromJSON,
    ChannelSellLimitsByDateToJSON,
    ChannelSellLimitsByDateRangeFromJSON,
    ChannelSellLimitsByDateRangeToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface ChangeChannelSellLimitsByDateRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelSellLimitsByDate: ChannelSellLimitsByDate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeChannelSellLimitsByDateRangeRequest {
    channelId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    channelSellLimitsByDateRange: ChannelSellLimitsByDateRange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteChannelSellLimitsRequest {
    id: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelSellLimitsRequest {
    hotelId: string;
    fromDate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    bookingChannelCode?: string;
    channelRoomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class InventoryApi extends runtime.BaseAPI {

    /**
     * Use this API to update channel property sell limit mapping by given dates. <p><strong>OperationId:</strong>changeChannelSellLimitsByDate</p>
     * Updates channel sell limits by date
     * @deprecated
     */
    async changeChannelSellLimitsByDateRaw(requestParameters: ChangeChannelSellLimitsByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeChannelSellLimitsByDate.');
        }
        
        if (requestParameters.channelSellLimitsByDate === null || requestParameters.channelSellLimitsByDate === undefined) {
            throw new runtime.RequiredError('channelSellLimitsByDate','Required parameter requestParameters.channelSellLimitsByDate was null or undefined when calling changeChannelSellLimitsByDate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channelSellLimits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelSellLimitsByDateToJSON(requestParameters.channelSellLimitsByDate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel property sell limit mapping by given dates. <p><strong>OperationId:</strong>changeChannelSellLimitsByDate</p>
     * Updates channel sell limits by date
     * @deprecated
     */
    async changeChannelSellLimitsByDate(requestParameters: ChangeChannelSellLimitsByDateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeChannelSellLimitsByDateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update channel property sell limit mapping by given date range. <p><strong>OperationId:</strong>changeChannelSellLimitsByDateRange</p>
     * Updates channel sell limits by daterange
     * @deprecated
     */
    async changeChannelSellLimitsByDateRangeRaw(requestParameters: ChangeChannelSellLimitsByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling changeChannelSellLimitsByDateRange.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeChannelSellLimitsByDateRange.');
        }
        
        if (requestParameters.channelSellLimitsByDateRange === null || requestParameters.channelSellLimitsByDateRange === undefined) {
            throw new runtime.RequiredError('channelSellLimitsByDateRange','Required parameter requestParameters.channelSellLimitsByDateRange was null or undefined when calling changeChannelSellLimitsByDateRange.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelId}/channelSellLimitsByDateRange`.replace(`{${"channelId"}}`, encodeURIComponent(String(requestParameters.channelId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChannelSellLimitsByDateRangeToJSON(requestParameters.channelSellLimitsByDateRange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update channel property sell limit mapping by given date range. <p><strong>OperationId:</strong>changeChannelSellLimitsByDateRange</p>
     * Updates channel sell limits by daterange
     * @deprecated
     */
    async changeChannelSellLimitsByDateRange(requestParameters: ChangeChannelSellLimitsByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeChannelSellLimitsByDateRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete channel property sell limit mapping. <p><strong>OperationId:</strong>deleteChannelSellLimits</p>
     * Deletes channel sell limits
     * @deprecated
     */
    async deleteChannelSellLimitsRaw(requestParameters: DeleteChannelSellLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChannelSellLimits.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteChannelSellLimits.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channelSellLimits/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete channel property sell limit mapping. <p><strong>OperationId:</strong>deleteChannelSellLimits</p>
     * Deletes channel sell limits
     * @deprecated
     */
    async deleteChannelSellLimits(requestParameters: DeleteChannelSellLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteChannelSellLimitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve channel sell limit detail to get or review daily sell limits for a given hotel-channel combination. <p><strong>OperationId:</strong>getChannelSellLimits</p>
     * Gets sell limit detail for a given channel hotel combination
     * @deprecated
     */
    async getChannelSellLimitsRaw(requestParameters: GetChannelSellLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelSellLimits>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelSellLimits.');
        }
        
        if (requestParameters.fromDate === null || requestParameters.fromDate === undefined) {
            throw new runtime.RequiredError('fromDate','Required parameter requestParameters.fromDate was null or undefined when calling getChannelSellLimits.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.channelRoomType !== undefined) {
            queryParameters['channelRoomType'] = requestParameters.channelRoomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channel/sellLimits`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelSellLimitsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve channel sell limit detail to get or review daily sell limits for a given hotel-channel combination. <p><strong>OperationId:</strong>getChannelSellLimits</p>
     * Gets sell limit detail for a given channel hotel combination
     * @deprecated
     */
    async getChannelSellLimits(requestParameters: GetChannelSellLimitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelSellLimits> {
        const response = await this.getChannelSellLimitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
