/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Channel Configuration API
 * APIs to cater for Channel Management functionality in OPERA Cloud. <br /><br /> Channel Management allows a property to configure and administer channels such as OTAs, and web channels, covering functionality such as channel configuration, availability, inventory and restrictions.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelInventorySnapshot,
  ExceptionDetailType,
  GeneralAvailabilitySimulator,
  RateParity,
  RegionalRateParity,
} from '../models/index';
import {
    ChannelInventorySnapshotFromJSON,
    ChannelInventorySnapshotToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GeneralAvailabilitySimulatorFromJSON,
    GeneralAvailabilitySimulatorToJSON,
    RateParityFromJSON,
    RateParityToJSON,
    RegionalRateParityFromJSON,
    RegionalRateParityToJSON,
} from '../models/index';

export interface GetChannelInventorySnapshotRequest {
    hotelId: string;
    fromDate: Date;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    endDate?: Date;
    duration?: string;
    bookingChannelCodes?: Array<string>;
    channelRoomTypes?: Array<string>;
    snapshotLevel?: GetChannelInventorySnapshotSnapshotLevelEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetChannelInventorySnapshotByRoomTypeRequest {
    roomTypeCode: string;
    channelCode: string;
    hotelId: string;
    fromDate: Date;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    endDate?: Date;
    duration?: string;
    snapshotLevel?: GetChannelInventorySnapshotByRoomTypeSnapshotLevelEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGeneralAvailabilitySimulatorRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    bookingChannelCode?: string;
    arrival?: Date;
    adults?: number;
    nights?: number;
    children?: number;
    noOfRooms?: number;
    channelRatePlanCode?: Array<string>;
    rateAccessCode?: string;
    corpIdIATA?: string;
    inventoryBlockCode?: string;
    promotionCode?: string;
    currencyCode?: string;
    language?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateParityRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    comparisonType?: string;
    language?: string;
    limit?: number;
    numberOfDays?: number;
    channelCode?: Array<string>;
    roomType?: Array<string>;
    ratePlanCode?: Array<string>;
    channelRoomType?: Array<string>;
    channelRatePlanCode?: Array<string>;
    chainCode?: Array<string>;
    rateAccessCode?: string;
    inventoryBlockCode?: string;
    promotionCode?: string;
    qualifyingProfileCategory?: string;
    qualifyingProfileId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRegionalRateParityRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    language?: string;
    limit?: number;
    numberOfDays?: number;
    hotelIds?: Array<string>;
    channelCode?: Array<string>;
    ratePlanCode?: Array<string>;
    channelRatePlanCode?: Array<string>;
    chainCode?: string;
    rateAccessCode?: string;
    qualifyingProfileCategory?: string;
    qualifyingProfileId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class AvailabilityApi extends runtime.BaseAPI {

    /**
     * Operation to fetch the room availability and restrictions for a given property in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshot</p>
     * Gets hotel\'s rooms and restrictions channel availability
     */
    async getChannelInventorySnapshotRaw(requestParameters: GetChannelInventorySnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelInventorySnapshot>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelInventorySnapshot.');
        }

        if (requestParameters.fromDate === null || requestParameters.fromDate === undefined) {
            throw new runtime.RequiredError('fromDate','Required parameter requestParameters.fromDate was null or undefined when calling getChannelInventorySnapshot.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelInventorySnapshot.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelInventorySnapshot.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelInventorySnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.bookingChannelCodes) {
            queryParameters['bookingChannelCodes'] = requestParameters.bookingChannelCodes;
        }

        if (requestParameters.channelRoomTypes) {
            queryParameters['channelRoomTypes'] = requestParameters.channelRoomTypes;
        }

        if (requestParameters.snapshotLevel !== undefined) {
            queryParameters['snapshotLevel'] = requestParameters.snapshotLevel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/inventorySnapshot`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelInventorySnapshotFromJSON(jsonValue));
    }

    /**
     * Operation to fetch the room availability and restrictions for a given property in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshot</p>
     * Gets hotel\'s rooms and restrictions channel availability
     */
    async getChannelInventorySnapshot(requestParameters: GetChannelInventorySnapshotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelInventorySnapshot> {
        const response = await this.getChannelInventorySnapshotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch the room availability and restrictions for a given property and room type in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshotByRoomType</p>
     * Gets hotel room\'s restrictions and channel availability
     */
    async getChannelInventorySnapshotByRoomTypeRaw(requestParameters: GetChannelInventorySnapshotByRoomTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelInventorySnapshot>> {
        if (requestParameters.roomTypeCode === null || requestParameters.roomTypeCode === undefined) {
            throw new runtime.RequiredError('roomTypeCode','Required parameter requestParameters.roomTypeCode was null or undefined when calling getChannelInventorySnapshotByRoomType.');
        }

        if (requestParameters.channelCode === null || requestParameters.channelCode === undefined) {
            throw new runtime.RequiredError('channelCode','Required parameter requestParameters.channelCode was null or undefined when calling getChannelInventorySnapshotByRoomType.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getChannelInventorySnapshotByRoomType.');
        }

        if (requestParameters.fromDate === null || requestParameters.fromDate === undefined) {
            throw new runtime.RequiredError('fromDate','Required parameter requestParameters.fromDate was null or undefined when calling getChannelInventorySnapshotByRoomType.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getChannelInventorySnapshotByRoomType.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getChannelInventorySnapshotByRoomType.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getChannelInventorySnapshotByRoomType.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.snapshotLevel !== undefined) {
            queryParameters['snapshotLevel'] = requestParameters.snapshotLevel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/channels/{channelCode}/rooms/{roomTypeCode}/inventorySnapshot`.replace(`{${"roomTypeCode"}}`, encodeURIComponent(String(requestParameters.roomTypeCode))).replace(`{${"channelCode"}}`, encodeURIComponent(String(requestParameters.channelCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelInventorySnapshotFromJSON(jsonValue));
    }

    /**
     * Operation to fetch the room availability and restrictions for a given property and room type in relation to channels. <p><strong>OperationId:</strong>getChannelInventorySnapshotByRoomType</p>
     * Gets hotel room\'s restrictions and channel availability
     */
    async getChannelInventorySnapshotByRoomType(requestParameters: GetChannelInventorySnapshotByRoomTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelInventorySnapshot> {
        const response = await this.getChannelInventorySnapshotByRoomTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to fetch the General Availability Simulator. <p><strong>OperationId:</strong>getGeneralAvailabilitySimulator</p>
     * Gets the General Availability
     */
    async getGeneralAvailabilitySimulatorRaw(requestParameters: GetGeneralAvailabilitySimulatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GeneralAvailabilitySimulator>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getGeneralAvailabilitySimulator.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGeneralAvailabilitySimulator.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGeneralAvailabilitySimulator.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGeneralAvailabilitySimulator.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.arrival !== undefined) {
            queryParameters['arrival'] = (requestParameters.arrival as any).toISOString().substring(0,10);
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.nights !== undefined) {
            queryParameters['nights'] = requestParameters.nights;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.noOfRooms !== undefined) {
            queryParameters['noOfRooms'] = requestParameters.noOfRooms;
        }

        if (requestParameters.channelRatePlanCode) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.rateAccessCode !== undefined) {
            queryParameters['rateAccessCode'] = requestParameters.rateAccessCode;
        }

        if (requestParameters.corpIdIATA !== undefined) {
            queryParameters['corpIdIATA'] = requestParameters.corpIdIATA;
        }

        if (requestParameters.inventoryBlockCode !== undefined) {
            queryParameters['inventoryBlockCode'] = requestParameters.inventoryBlockCode;
        }

        if (requestParameters.promotionCode !== undefined) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/generalAvailabilitySimulator`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GeneralAvailabilitySimulatorFromJSON(jsonValue));
    }

    /**
     * Use this API to fetch the General Availability Simulator. <p><strong>OperationId:</strong>getGeneralAvailabilitySimulator</p>
     * Gets the General Availability
     */
    async getGeneralAvailabilitySimulator(requestParameters: GetGeneralAvailabilitySimulatorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GeneralAvailabilitySimulator> {
        const response = await this.getGeneralAvailabilitySimulatorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Fetch the Rate Parity. The rate parity search criteria can include room types, rate plans, promotion code, rate access code or chain codes. <p><strong>OperationId:</strong>getRateParity</p>
     * Gets channel\'s rate configuration
     */
    async getRateParityRaw(requestParameters: GetRateParityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateParity>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRateParity.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRateParity.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRateParity.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRateParity.');
        }

        const queryParameters: any = {};

        if (requestParameters.comparisonType !== undefined) {
            queryParameters['comparisonType'] = requestParameters.comparisonType;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.numberOfDays !== undefined) {
            queryParameters['numberOfDays'] = requestParameters.numberOfDays;
        }

        if (requestParameters.channelCode) {
            queryParameters['channelCode'] = requestParameters.channelCode;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.channelRoomType) {
            queryParameters['channelRoomType'] = requestParameters.channelRoomType;
        }

        if (requestParameters.channelRatePlanCode) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.chainCode) {
            queryParameters['chainCode'] = requestParameters.chainCode;
        }

        if (requestParameters.rateAccessCode !== undefined) {
            queryParameters['rateAccessCode'] = requestParameters.rateAccessCode;
        }

        if (requestParameters.inventoryBlockCode !== undefined) {
            queryParameters['inventoryBlockCode'] = requestParameters.inventoryBlockCode;
        }

        if (requestParameters.promotionCode !== undefined) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.qualifyingProfileCategory !== undefined) {
            queryParameters['qualifyingProfileCategory'] = requestParameters.qualifyingProfileCategory;
        }

        if (requestParameters.qualifyingProfileId !== undefined) {
            queryParameters['qualifyingProfileId'] = requestParameters.qualifyingProfileId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateParity`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateParityFromJSON(jsonValue));
    }

    /**
     * Operation to Fetch the Rate Parity. The rate parity search criteria can include room types, rate plans, promotion code, rate access code or chain codes. <p><strong>OperationId:</strong>getRateParity</p>
     * Gets channel\'s rate configuration
     */
    async getRateParity(requestParameters: GetRateParityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateParity> {
        const response = await this.getRateParityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Fetch the Regional Rate Parity. <p><strong>OperationId:</strong>getRegionalRateParity</p>
     * Gets the regional rate parity
     */
    async getRegionalRateParityRaw(requestParameters: GetRegionalRateParityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RegionalRateParity>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRegionalRateParity.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRegionalRateParity.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRegionalRateParity.');
        }

        const queryParameters: any = {};

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.numberOfDays !== undefined) {
            queryParameters['numberOfDays'] = requestParameters.numberOfDays;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.channelCode) {
            queryParameters['channelCode'] = requestParameters.channelCode;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.channelRatePlanCode) {
            queryParameters['channelRatePlanCode'] = requestParameters.channelRatePlanCode;
        }

        if (requestParameters.chainCode !== undefined) {
            queryParameters['chainCode'] = requestParameters.chainCode;
        }

        if (requestParameters.rateAccessCode !== undefined) {
            queryParameters['rateAccessCode'] = requestParameters.rateAccessCode;
        }

        if (requestParameters.qualifyingProfileCategory !== undefined) {
            queryParameters['qualifyingProfileCategory'] = requestParameters.qualifyingProfileCategory;
        }

        if (requestParameters.qualifyingProfileId !== undefined) {
            queryParameters['qualifyingProfileId'] = requestParameters.qualifyingProfileId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/availability/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionalRateParityFromJSON(jsonValue));
    }

    /**
     * Operation to Fetch the Regional Rate Parity. <p><strong>OperationId:</strong>getRegionalRateParity</p>
     * Gets the regional rate parity
     */
    async getRegionalRateParity(requestParameters: GetRegionalRateParityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RegionalRateParity> {
        const response = await this.getRegionalRateParityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetChannelInventorySnapshotSnapshotLevelEnum = {
    BookingChannel: 'BookingChannel',
    ChannelRoomType: 'ChannelRoomType'
} as const;
export type GetChannelInventorySnapshotSnapshotLevelEnum = typeof GetChannelInventorySnapshotSnapshotLevelEnum[keyof typeof GetChannelInventorySnapshotSnapshotLevelEnum];
/**
 * @export
 */
export const GetChannelInventorySnapshotByRoomTypeSnapshotLevelEnum = {
    BookingChannel: 'BookingChannel',
    ChannelRoomType: 'ChannelRoomType'
} as const;
export type GetChannelInventorySnapshotByRoomTypeSnapshotLevelEnum = typeof GetChannelInventorySnapshotByRoomTypeSnapshotLevelEnum[keyof typeof GetChannelInventorySnapshotByRoomTypeSnapshotLevelEnum];
