/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockAllocationSummaryType,
  Criteria,
  ExceptionDetailType,
} from '../models/index';
import {
    BlockAllocationSummaryTypeFromJSON,
    BlockAllocationSummaryTypeToJSON,
    CriteriaFromJSON,
    CriteriaToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
} from '../models/index';

export interface GetBlockAllocationSummaryRequest {
    requestId: string;
    hotelId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetBlockAllocationSummaryProcessStatusRequest {
    requestId: string;
    extSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface StartBlockAllocationSummaryProcessRequest {
    hotelId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: Criteria;
    acceptLanguage?: string;
}

/**
 * 
 */
export class BlockAsyncApi extends runtime.BaseAPI {

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationSummary</p>
     * This API returns a hotel\'s block allocation summary for a scheduled process.
     */
    async getBlockAllocationSummaryRaw(requestParameters: GetBlockAllocationSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlockAllocationSummaryType>>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationSummary.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationSummary.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getBlockAllocationSummary.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlockAllocationSummaryTypeFromJSON));
    }

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationSummary</p>
     * This API returns a hotel\'s block allocation summary for a scheduled process.
     */
    async getBlockAllocationSummary(requestParameters: GetBlockAllocationSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlockAllocationSummaryType>> {
        const response = await this.getBlockAllocationSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationSummaryProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getBlockAllocationSummaryProcessStatusRaw(requestParameters: GetBlockAllocationSummaryProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationSummaryProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getBlockAllocationSummaryProcessStatus(requestParameters: GetBlockAllocationSummaryProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBlockAllocationSummaryProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>startBlockAllocationSummaryProcess</p>
     * This API facilitates fetching block allocation summary for a Hotel.
     */
    async startBlockAllocationSummaryProcessRaw(requestParameters: StartBlockAllocationSummaryProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startBlockAllocationSummaryProcess.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling startBlockAllocationSummaryProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startBlockAllocationSummaryProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>startBlockAllocationSummaryProcess</p>
     * This API facilitates fetching block allocation summary for a Hotel.
     */
    async startBlockAllocationSummaryProcess(requestParameters: StartBlockAllocationSummaryProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.startBlockAllocationSummaryProcessRaw(requestParameters, initOverrides);
    }

}
