/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Allocation,
  AllocationRanges,
  BlockAllocationSummaryType,
  BlockToShift,
  Criteria,
  ExceptionDetailType,
  InstanceLink,
  ProcessDetails,
} from '../models/index';
import {
    AllocationFromJSON,
    AllocationToJSON,
    AllocationRangesFromJSON,
    AllocationRangesToJSON,
    BlockAllocationSummaryTypeFromJSON,
    BlockAllocationSummaryTypeToJSON,
    BlockToShiftFromJSON,
    BlockToShiftToJSON,
    CriteriaFromJSON,
    CriteriaToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    InstanceLinkFromJSON,
    InstanceLinkToJSON,
    ProcessDetailsFromJSON,
    ProcessDetailsToJSON,
} from '../models/index';

export interface GetAllocationRangesProcessInfoRequest {
    hotelId: string;
    blockId: string;
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetAllocationRangesProcessStatusRequest {
    hotelId: string;
    blockId: string;
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetBlockAllocationProcessInfoRequest {
    hotelId: string;
    blockId: string;
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetBlockAllocationProcessStatusRequest {
    hotelId: string;
    blockId: string;
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetBlockAllocationSummaryRequest {
    requestId: string;
    hotelId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetBlockAllocationSummaryProcessStatusRequest {
    requestId: string;
    extSystemCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetShiftBlockProcessInfoRequest {
    hotelId: string;
    blockId: string;
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface GetShiftBlockProcessStatusRequest {
    hotelId: string;
    blockId: string;
    requestId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    acceptLanguage?: string;
}

export interface StartAllocationRangesProcessRequest {
    hotelId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allocationRanges: AllocationRanges;
    acceptLanguage?: string;
}

export interface StartBlockAllocationProcessRequest {
    hotelId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    allocation: Allocation;
    acceptLanguage?: string;
}

export interface StartBlockAllocationSummaryProcessRequest {
    hotelId: string;
    extSystemCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    criteria: Criteria;
    acceptLanguage?: string;
}

export interface StartShiftBlockProcessRequest {
    hotelId: string;
    blockId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    blockToShift: BlockToShift;
    acceptLanguage?: string;
}

/**
 * 
 */
export class BlockAsyncApi extends runtime.BaseAPI {

    /**
     * This API will fetch Block allocation ranges warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getAllocationRangesProcessInfo</p>
     * This API returns information about the set allocation ranges process.
     */
    async getAllocationRangesProcessInfoRaw(requestParameters: GetAllocationRangesProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAllocationRangesProcessInfo.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getAllocationRangesProcessInfo.');
        }
        
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getAllocationRangesProcessInfo.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/allocationRanges/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDetailsFromJSON(jsonValue));
    }

    /**
     * This API will fetch Block allocation ranges warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getAllocationRangesProcessInfo</p>
     * This API returns information about the set allocation ranges process.
     */
    async getAllocationRangesProcessInfo(requestParameters: GetAllocationRangesProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDetails> {
        const response = await this.getAllocationRangesProcessInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getAllocationRangesProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getAllocationRangesProcessStatusRaw(requestParameters: GetAllocationRangesProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAllocationRangesProcessStatus.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getAllocationRangesProcessStatus.');
        }
        
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getAllocationRangesProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/allocationRanges/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  <p><strong>OperationId:</strong>getAllocationRangesProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getAllocationRangesProcessStatus(requestParameters: GetAllocationRangesProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getAllocationRangesProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * This API will fetch Block allocation warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationProcessInfo</p>
     * This API returns information about the set allocation process.
     */
    async getBlockAllocationProcessInfoRaw(requestParameters: GetBlockAllocationProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationProcessInfo.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getBlockAllocationProcessInfo.');
        }
        
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationProcessInfo.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/allocation/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDetailsFromJSON(jsonValue));
    }

    /**
     * This API will fetch Block allocation warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationProcessInfo</p>
     * This API returns information about the set allocation process.
     */
    async getBlockAllocationProcessInfo(requestParameters: GetBlockAllocationProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDetails> {
        const response = await this.getBlockAllocationProcessInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getBlockAllocationProcessStatusRaw(requestParameters: GetBlockAllocationProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationProcessStatus.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getBlockAllocationProcessStatus.');
        }
        
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/allocation/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getBlockAllocationProcessStatus(requestParameters: GetBlockAllocationProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBlockAllocationProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationSummary</p>
     * This API returns a hotel\'s block allocation summary for a scheduled process.
     */
    async getBlockAllocationSummaryRaw(requestParameters: GetBlockAllocationSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BlockAllocationSummaryType>>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationSummary.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationSummary.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getBlockAllocationSummary.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BlockAllocationSummaryTypeFromJSON));
    }

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationSummary</p>
     * This API returns a hotel\'s block allocation summary for a scheduled process.
     */
    async getBlockAllocationSummary(requestParameters: GetBlockAllocationSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BlockAllocationSummaryType>> {
        const response = await this.getBlockAllocationSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationSummaryProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getBlockAllocationSummaryProcessStatusRaw(requestParameters: GetBlockAllocationSummaryProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBlockAllocationSummaryProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary/{requestId}`.replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  <p><strong>OperationId:</strong>getBlockAllocationSummaryProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getBlockAllocationSummaryProcessStatus(requestParameters: GetBlockAllocationSummaryProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getBlockAllocationSummaryProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * This API will fetch shift Block warnings and errors to be returned as part of the response. <p><strong>OperationId:</strong>getShiftBlockProcessInfo</p>
     * This API returns information about the shift block process.
     */
    async getShiftBlockProcessInfoRaw(requestParameters: GetShiftBlockProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProcessDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getShiftBlockProcessInfo.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getShiftBlockProcessInfo.');
        }
        
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getShiftBlockProcessInfo.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/shift/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProcessDetailsFromJSON(jsonValue));
    }

    /**
     * This API will fetch shift Block warnings and errors to be returned as part of the response. <p><strong>OperationId:</strong>getShiftBlockProcessInfo</p>
     * This API returns information about the shift block process.
     */
    async getShiftBlockProcessInfo(requestParameters: GetShiftBlockProcessInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProcessDetails> {
        const response = await this.getShiftBlockProcessInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getShiftBlockProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getShiftBlockProcessStatusRaw(requestParameters: GetShiftBlockProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getShiftBlockProcessStatus.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling getShiftBlockProcessStatus.');
        }
        
        if (requestParameters.requestId === null || requestParameters.requestId === undefined) {
            throw new runtime.RequiredError('requestId','Required parameter requestParameters.requestId was null or undefined when calling getShiftBlockProcessStatus.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/shift/{requestId}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))).replace(`{${"requestId"}}`, encodeURIComponent(String(requestParameters.requestId))),
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *  <p><strong>OperationId:</strong>getShiftBlockProcessStatus</p>
     * This API returns the status of asynchronous process scheduled for given id.
     */
    async getShiftBlockProcessStatus(requestParameters: GetShiftBlockProcessStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getShiftBlockProcessStatusRaw(requestParameters, initOverrides);
    }

    /**
     * Use this API to set business block allocation for one or more date ranges, which are within business block date range, and for a list of room types. <p><strong>OperationId:</strong>startAllocationRangesProcess</p>
     * This API facilitates setting Block Allocation Ranges for a Hotel.
     */
    async startAllocationRangesProcessRaw(requestParameters: StartAllocationRangesProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLink>>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startAllocationRangesProcess.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling startAllocationRangesProcess.');
        }
        
        if (requestParameters.allocationRanges === null || requestParameters.allocationRanges === undefined) {
            throw new runtime.RequiredError('allocationRanges','Required parameter requestParameters.allocationRanges was null or undefined when calling startAllocationRangesProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/allocationRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllocationRangesToJSON(requestParameters.allocationRanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstanceLinkFromJSON));
    }

    /**
     * Use this API to set business block allocation for one or more date ranges, which are within business block date range, and for a list of room types. <p><strong>OperationId:</strong>startAllocationRangesProcess</p>
     * This API facilitates setting Block Allocation Ranges for a Hotel.
     */
    async startAllocationRangesProcess(requestParameters: StartAllocationRangesProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLink>> {
        const response = await this.startAllocationRangesProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>startBlockAllocationProcess</p>
     * This API facilitates setting Block Allocations for a Hotel.
     */
    async startBlockAllocationProcessRaw(requestParameters: StartBlockAllocationProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLink>>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startBlockAllocationProcess.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling startBlockAllocationProcess.');
        }
        
        if (requestParameters.allocation === null || requestParameters.allocation === undefined) {
            throw new runtime.RequiredError('allocation','Required parameter requestParameters.allocation was null or undefined when calling startBlockAllocationProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/allocation`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AllocationToJSON(requestParameters.allocation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstanceLinkFromJSON));
    }

    /**
     * Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>startBlockAllocationProcess</p>
     * This API facilitates setting Block Allocations for a Hotel.
     */
    async startBlockAllocationProcess(requestParameters: StartBlockAllocationProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLink>> {
        const response = await this.startBlockAllocationProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range. The block allocated inventory, rates and room type statistics are returned as part of the response. The maximum limit of date range (whether using start/endDate or startLastModifiedDate/endLastModifiedDate) is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel.   Every identical request (employing the same query parameters) for the getBlockAllocationSummary operation when requesting data with start/endDate or startLastModifiedDate/endLastModifiedDate, necessitates a mandatory 30-minute interval between submissions. Please note that this limit applies regardless of whether the POST, HEAD, and GET cycle has been completed. The API returns a header parameter location that can be used in the getBlockAllocationSummaryProcessStatus operation.  Use event-driven APIs -(see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) -to get real-time block updates. <p><strong>OperationId:</strong>startBlockAllocationSummaryProcess</p>
     * This API facilitates fetching block allocation summary for a Hotel.
     */
    async startBlockAllocationSummaryProcessRaw(requestParameters: StartBlockAllocationSummaryProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLink>>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startBlockAllocationSummaryProcess.');
        }
        
        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling startBlockAllocationSummaryProcess.');
        }
        
        if (requestParameters.criteria === null || requestParameters.criteria === undefined) {
            throw new runtime.RequiredError('criteria','Required parameter requestParameters.criteria was null or undefined when calling startBlockAllocationSummaryProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CriteriaToJSON(requestParameters.criteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstanceLinkFromJSON));
    }

    /**
     * This API will fetch Block allocation information for a hotel, and specified date range. The block allocated inventory, rates and room type statistics are returned as part of the response. The maximum limit of date range (whether using start/endDate or startLastModifiedDate/endLastModifiedDate) is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel.   Every identical request (employing the same query parameters) for the getBlockAllocationSummary operation when requesting data with start/endDate or startLastModifiedDate/endLastModifiedDate, necessitates a mandatory 30-minute interval between submissions. Please note that this limit applies regardless of whether the POST, HEAD, and GET cycle has been completed. The API returns a header parameter location that can be used in the getBlockAllocationSummaryProcessStatus operation.  Use event-driven APIs -(see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) -to get real-time block updates. <p><strong>OperationId:</strong>startBlockAllocationSummaryProcess</p>
     * This API facilitates fetching block allocation summary for a Hotel.
     */
    async startBlockAllocationSummaryProcess(requestParameters: StartBlockAllocationSummaryProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLink>> {
        const response = await this.startBlockAllocationSummaryProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to move or shift the dates of a block in OPERA. <p><strong>OperationId:</strong>startShiftBlockProcess</p>
     * Shifts the Block start date.
     */
    async startShiftBlockProcessRaw(requestParameters: StartShiftBlockProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstanceLink>>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling startShiftBlockProcess.');
        }
        
        if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
            throw new runtime.RequiredError('blockId','Required parameter requestParameters.blockId was null or undefined when calling startShiftBlockProcess.');
        }
        
        if (requestParameters.blockToShift === null || requestParameters.blockToShift === undefined) {
            throw new runtime.RequiredError('blockToShift','Required parameter requestParameters.blockToShift was null or undefined when calling startShiftBlockProcess.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/{blockId}/shift`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"blockId"}}`, encodeURIComponent(String(requestParameters.blockId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockToShiftToJSON(requestParameters.blockToShift),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstanceLinkFromJSON));
    }

    /**
     * Use this API to move or shift the dates of a block in OPERA. <p><strong>OperationId:</strong>startShiftBlockProcess</p>
     * Shifts the Block start date.
     */
    async startShiftBlockProcess(requestParameters: StartShiftBlockProcessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstanceLink>> {
        const response = await this.startShiftBlockProcessRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
