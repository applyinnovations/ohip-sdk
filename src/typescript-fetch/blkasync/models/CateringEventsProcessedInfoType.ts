/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockId } from './BlockId';
import {
    BlockIdFromJSON,
    BlockIdFromJSONTyped,
    BlockIdToJSON,
} from './BlockId';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';

/**
 * Status/Info of the processed events.
 * @export
 * @interface CateringEventsProcessedInfoType
 */
export interface CateringEventsProcessedInfoType {
    /**
     * Hotel code where event will be copied.
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {BlockId}
     * @memberof CateringEventsProcessedInfoType
     */
    blockId?: BlockId;
    /**
     * Name of event.
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    eventName?: string;
    /**
     * Type of event.
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    eventType?: string;
    /**
     * Date of the event
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    eventDate?: string;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof CateringEventsProcessedInfoType
     */
    room?: CodeDescriptionType;
    /**
     * Status of the processed event. e.g Completed, Not Processed.
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    status?: string;
    /**
     * Reason for not processing the event.
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    reason?: string;
    /**
     * Flag to indicate the warning messages from the API
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    processingInfoType?: string;
    /**
     * Erorr/Warning code for not processing th event.
     * @type {string}
     * @memberof CateringEventsProcessedInfoType
     */
    processingInfoCode?: string;
}

/**
 * Check if a given object implements the CateringEventsProcessedInfoType interface.
 */
export function instanceOfCateringEventsProcessedInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CateringEventsProcessedInfoTypeFromJSON(json: any): CateringEventsProcessedInfoType {
    return CateringEventsProcessedInfoTypeFromJSONTyped(json, false);
}

export function CateringEventsProcessedInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CateringEventsProcessedInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'blockId': !exists(json, 'blockId') ? undefined : BlockIdFromJSON(json['blockId']),
        'eventName': !exists(json, 'eventName') ? undefined : json['eventName'],
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'eventDate': !exists(json, 'eventDate') ? undefined : json['eventDate'],
        'room': !exists(json, 'room') ? undefined : CodeDescriptionTypeFromJSON(json['room']),
        'status': !exists(json, 'status') ? undefined : json['status'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'processingInfoType': !exists(json, 'processingInfoType') ? undefined : json['processingInfoType'],
        'processingInfoCode': !exists(json, 'processingInfoCode') ? undefined : json['processingInfoCode'],
    };
}

export function CateringEventsProcessedInfoTypeToJSON(value?: CateringEventsProcessedInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'blockId': BlockIdToJSON(value.blockId),
        'eventName': value.eventName,
        'eventType': value.eventType,
        'eventDate': value.eventDate,
        'room': CodeDescriptionTypeToJSON(value.room),
        'status': value.status,
        'reason': value.reason,
        'processingInfoType': value.processingInfoType,
        'processingInfoCode': value.processingInfoCode,
    };
}

