/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Indicates the inventory values ( occupancy or availability ) per person occupancy.
 * @export
 * @interface BlockGridInvType
 */
export interface BlockGridInvType {
    /**
     * Indicates the one person inventory value ( occupancy or availability ).
     * @type {number}
     * @memberof BlockGridInvType
     */
    onePerson?: number;
    /**
     * Indicates the two person inventory value ( occupancy or availability ).
     * @type {number}
     * @memberof BlockGridInvType
     */
    twoPerson?: number;
    /**
     * Indicates the three person inventory value ( occupancy or availability ).
     * @type {number}
     * @memberof BlockGridInvType
     */
    threePerson?: number;
    /**
     * Indicates the four person inventory value ( occupancy or availability ).
     * @type {number}
     * @memberof BlockGridInvType
     */
    fourPerson?: number;
    /**
     * Indicates the sell limit
     * @type {number}
     * @memberof BlockGridInvType
     */
    sellLimit?: number;
    /**
     * Indicates the cutoff date.Date when inventory left in the block will be cut-off.
     * @type {string}
     * @memberof BlockGridInvType
     */
    cutoffDate?: string;
}

/**
 * Check if a given object implements the BlockGridInvType interface.
 */
export function instanceOfBlockGridInvType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockGridInvTypeFromJSON(json: any): BlockGridInvType {
    return BlockGridInvTypeFromJSONTyped(json, false);
}

export function BlockGridInvTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockGridInvType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'onePerson': !exists(json, 'onePerson') ? undefined : json['onePerson'],
        'twoPerson': !exists(json, 'twoPerson') ? undefined : json['twoPerson'],
        'threePerson': !exists(json, 'threePerson') ? undefined : json['threePerson'],
        'fourPerson': !exists(json, 'fourPerson') ? undefined : json['fourPerson'],
        'sellLimit': !exists(json, 'sellLimit') ? undefined : json['sellLimit'],
        'cutoffDate': !exists(json, 'cutoffDate') ? undefined : json['cutoffDate'],
    };
}

export function BlockGridInvTypeToJSON(value?: BlockGridInvType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'onePerson': value.onePerson,
        'twoPerson': value.twoPerson,
        'threePerson': value.threePerson,
        'fourPerson': value.fourPerson,
        'sellLimit': value.sellLimit,
        'cutoffDate': value.cutoffDate,
    };
}

