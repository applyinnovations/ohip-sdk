/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AllocationGridByDateRangesType } from './AllocationGridByDateRangesType';
import {
    AllocationGridByDateRangesTypeFromJSON,
    AllocationGridByDateRangesTypeFromJSONTyped,
    AllocationGridByDateRangesTypeToJSON,
} from './AllocationGridByDateRangesType';
import type { SellLimitGridByDateRangeType } from './SellLimitGridByDateRangeType';
import {
    SellLimitGridByDateRangeTypeFromJSON,
    SellLimitGridByDateRangeTypeFromJSONTyped,
    SellLimitGridByDateRangeTypeToJSON,
} from './SellLimitGridByDateRangeType';

/**
 * A collection of Allocation objects for a block defined by room type.
 * @export
 * @interface AllocationGridByRoomTypeType
 */
export interface AllocationGridByRoomTypeType {
    /**
     * Allocation objects for a block by date ranges.
     * @type {Array<AllocationGridByDateRangesType>}
     * @memberof AllocationGridByRoomTypeType
     */
    allocationGridDates?: Array<AllocationGridByDateRangesType>;
    /**
     * Sell limits for a block by date ranges.
     * @type {Array<SellLimitGridByDateRangeType>}
     * @memberof AllocationGridByRoomTypeType
     */
    sellLimitGridDates?: Array<SellLimitGridByDateRangeType>;
    /**
     * Indicates the room type of the Allocation objects.
     * @type {string}
     * @memberof AllocationGridByRoomTypeType
     */
    roomType?: string;
}

/**
 * Check if a given object implements the AllocationGridByRoomTypeType interface.
 */
export function instanceOfAllocationGridByRoomTypeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AllocationGridByRoomTypeTypeFromJSON(json: any): AllocationGridByRoomTypeType {
    return AllocationGridByRoomTypeTypeFromJSONTyped(json, false);
}

export function AllocationGridByRoomTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AllocationGridByRoomTypeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocationGridDates': !exists(json, 'allocationGridDates') ? undefined : ((json['allocationGridDates'] as Array<any>).map(AllocationGridByDateRangesTypeFromJSON)),
        'sellLimitGridDates': !exists(json, 'sellLimitGridDates') ? undefined : ((json['sellLimitGridDates'] as Array<any>).map(SellLimitGridByDateRangeTypeFromJSON)),
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
    };
}

export function AllocationGridByRoomTypeTypeToJSON(value?: AllocationGridByRoomTypeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocationGridDates': value.allocationGridDates === undefined ? undefined : ((value.allocationGridDates as Array<any>).map(AllocationGridByDateRangesTypeToJSON)),
        'sellLimitGridDates': value.sellLimitGridDates === undefined ? undefined : ((value.sellLimitGridDates as Array<any>).map(SellLimitGridByDateRangeTypeToJSON)),
        'roomType': value.roomType,
    };
}

