/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockActualRevenueType } from './BlockActualRevenueType';
import {
    BlockActualRevenueTypeFromJSON,
    BlockActualRevenueTypeFromJSONTyped,
    BlockActualRevenueTypeToJSON,
} from './BlockActualRevenueType';
import type { BlockGridInvType } from './BlockGridInvType';
import {
    BlockGridInvTypeFromJSON,
    BlockGridInvTypeFromJSONTyped,
    BlockGridInvTypeToJSON,
} from './BlockGridInvType';
import type { BlockGridRatesType } from './BlockGridRatesType';
import {
    BlockGridRatesTypeFromJSON,
    BlockGridRatesTypeFromJSONTyped,
    BlockGridRatesTypeToJSON,
} from './BlockGridRatesType';
import type { BlockPotenitalRevenueType } from './BlockPotenitalRevenueType';
import {
    BlockPotenitalRevenueTypeFromJSON,
    BlockPotenitalRevenueTypeFromJSONTyped,
    BlockPotenitalRevenueTypeToJSON,
} from './BlockPotenitalRevenueType';

/**
 * 
 * @export
 * @interface RoomAllocationDetailsType
 */
export interface RoomAllocationDetailsType {
    /**
     * 
     * @type {BlockActualRevenueType}
     * @memberof RoomAllocationDetailsType
     */
    actualRevenue?: BlockActualRevenueType;
    /**
     * The total current( projected + pickup ) rooms for the block.
     * @type {number}
     * @memberof RoomAllocationDetailsType
     */
    currentRooms?: number;
    /**
     * 
     * @type {BlockGridInvType}
     * @memberof RoomAllocationDetailsType
     */
    inventory?: BlockGridInvType;
    /**
     * The total original( forecasted ) rooms for the block.
     * @type {number}
     * @memberof RoomAllocationDetailsType
     */
    originalRooms?: number;
    /**
     * The total pickup rooms for the block.
     * @type {number}
     * @memberof RoomAllocationDetailsType
     */
    pickupRooms?: number;
    /**
     * 
     * @type {BlockPotenitalRevenueType}
     * @memberof RoomAllocationDetailsType
     */
    potentialRevenue?: BlockPotenitalRevenueType;
    /**
     * 
     * @type {BlockGridRatesType}
     * @memberof RoomAllocationDetailsType
     */
    rates?: BlockGridRatesType;
    /**
     * The room type for which the allocation details are listed.
     * @type {string}
     * @memberof RoomAllocationDetailsType
     */
    roomType?: string;
}

/**
 * Check if a given object implements the RoomAllocationDetailsType interface.
 */
export function instanceOfRoomAllocationDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomAllocationDetailsTypeFromJSON(json: any): RoomAllocationDetailsType {
    return RoomAllocationDetailsTypeFromJSONTyped(json, false);
}

export function RoomAllocationDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomAllocationDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'actualRevenue': !exists(json, 'actualRevenue') ? undefined : BlockActualRevenueTypeFromJSON(json['actualRevenue']),
        'currentRooms': !exists(json, 'currentRooms') ? undefined : json['currentRooms'],
        'inventory': !exists(json, 'inventory') ? undefined : BlockGridInvTypeFromJSON(json['inventory']),
        'originalRooms': !exists(json, 'originalRooms') ? undefined : json['originalRooms'],
        'pickupRooms': !exists(json, 'pickupRooms') ? undefined : json['pickupRooms'],
        'potentialRevenue': !exists(json, 'potentialRevenue') ? undefined : BlockPotenitalRevenueTypeFromJSON(json['potentialRevenue']),
        'rates': !exists(json, 'rates') ? undefined : BlockGridRatesTypeFromJSON(json['rates']),
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
    };
}

export function RoomAllocationDetailsTypeToJSON(value?: RoomAllocationDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'actualRevenue': BlockActualRevenueTypeToJSON(value.actualRevenue),
        'currentRooms': value.currentRooms,
        'inventory': BlockGridInvTypeToJSON(value.inventory),
        'originalRooms': value.originalRooms,
        'pickupRooms': value.pickupRooms,
        'potentialRevenue': BlockPotenitalRevenueTypeToJSON(value.potentialRevenue),
        'rates': BlockGridRatesTypeToJSON(value.rates),
        'roomType': value.roomType,
    };
}

