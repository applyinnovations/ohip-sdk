/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Block Reservation Asynchronous API
 * APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlockAllocationRangeTypeOverbookListInner
 */
export interface BlockAllocationRangeTypeOverbookListInner {
    /**
     * Date which has to be overbooked or excluded.
     * @type {string}
     * @memberof BlockAllocationRangeTypeOverbookListInner
     */
    stayDate?: string;
    /**
     * Room type that has to be overbooked or excluded.
     * @type {string}
     * @memberof BlockAllocationRangeTypeOverbookListInner
     */
    roomType?: string;
    /**
     * A true value indicates that the date/room type should be overbooked for inventory. A false value indicates that this combination should be excluded from range.
     * @type {boolean}
     * @memberof BlockAllocationRangeTypeOverbookListInner
     */
    overbook?: boolean;
}

/**
 * Check if a given object implements the BlockAllocationRangeTypeOverbookListInner interface.
 */
export function instanceOfBlockAllocationRangeTypeOverbookListInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BlockAllocationRangeTypeOverbookListInnerFromJSON(json: any): BlockAllocationRangeTypeOverbookListInner {
    return BlockAllocationRangeTypeOverbookListInnerFromJSONTyped(json, false);
}

export function BlockAllocationRangeTypeOverbookListInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockAllocationRangeTypeOverbookListInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stayDate': !exists(json, 'stayDate') ? undefined : json['stayDate'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'overbook': !exists(json, 'overbook') ? undefined : json['overbook'],
    };
}

export function BlockAllocationRangeTypeOverbookListInnerToJSON(value?: BlockAllocationRangeTypeOverbookListInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stayDate': value.stayDate,
        'roomType': value.roomType,
        'overbook': value.overbook,
    };
}

