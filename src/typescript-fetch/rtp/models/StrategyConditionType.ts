/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateStrategyConditionType } from './RateStrategyConditionType';
import {
    RateStrategyConditionTypeFromJSON,
    RateStrategyConditionTypeFromJSONTyped,
    RateStrategyConditionTypeToJSON,
} from './RateStrategyConditionType';
import type { ThresholdType } from './ThresholdType';
import {
    ThresholdTypeFromJSON,
    ThresholdTypeFromJSONTyped,
    ThresholdTypeToJSON,
} from './ThresholdType';

/**
 * The Rate strategy condition details type.
 * @export
 * @interface StrategyConditionType
 */
export interface StrategyConditionType {
    /**
     * Consider the out of order rooms for the strategy
     * @type {boolean}
     * @memberof StrategyConditionType
     */
    considerOutOfOrderRooms?: boolean;
    /**
     * Consider the sell limit for the strategy
     * @type {boolean}
     * @memberof StrategyConditionType
     */
    considerSellLimits?: boolean;
    /**
     * 
     * @type {ThresholdType}
     * @memberof StrategyConditionType
     */
    threshold?: ThresholdType;
    /**
     * Flat or Percentage.
     * @type {string}
     * @memberof StrategyConditionType
     */
    thresholdType?: string;
    /**
     * 
     * @type {RateStrategyConditionType}
     * @memberof StrategyConditionType
     */
    type?: RateStrategyConditionType;
}

/**
 * Check if a given object implements the StrategyConditionType interface.
 */
export function instanceOfStrategyConditionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StrategyConditionTypeFromJSON(json: any): StrategyConditionType {
    return StrategyConditionTypeFromJSONTyped(json, false);
}

export function StrategyConditionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StrategyConditionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'considerOutOfOrderRooms': !exists(json, 'considerOutOfOrderRooms') ? undefined : json['considerOutOfOrderRooms'],
        'considerSellLimits': !exists(json, 'considerSellLimits') ? undefined : json['considerSellLimits'],
        'threshold': !exists(json, 'threshold') ? undefined : ThresholdTypeFromJSON(json['threshold']),
        'thresholdType': !exists(json, 'thresholdType') ? undefined : json['thresholdType'],
        'type': !exists(json, 'type') ? undefined : RateStrategyConditionTypeFromJSON(json['type']),
    };
}

export function StrategyConditionTypeToJSON(value?: StrategyConditionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'considerOutOfOrderRooms': value.considerOutOfOrderRooms,
        'considerSellLimits': value.considerSellLimits,
        'threshold': ThresholdTypeToJSON(value.threshold),
        'thresholdType': value.thresholdType,
        'type': RateStrategyConditionTypeToJSON(value.type),
    };
}

