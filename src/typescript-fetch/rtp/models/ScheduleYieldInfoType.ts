/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { YieldInfoType } from './YieldInfoType';
import {
    YieldInfoTypeFromJSON,
    YieldInfoTypeFromJSONTyped,
    YieldInfoTypeToJSON,
} from './YieldInfoType';

/**
 * The list of complete Yield adjustment information for the rate schedule.
 * @export
 * @interface ScheduleYieldInfoType
 */
export interface ScheduleYieldInfoType {
    /**
     * the hotel code for the yield adjustments.
     * @type {string}
     * @memberof ScheduleYieldInfoType
     */
    hotelId?: string;
    /**
     * A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.
     * @type {string}
     * @memberof ScheduleYieldInfoType
     */
    id?: string;
    /**
     * Used to identify the source of the identifier (e.g., IATA, ABTA).
     * @type {string}
     * @memberof ScheduleYieldInfoType
     */
    idContext?: string;
    /**
     * Additional identifying value assigned by the creating system.
     * @type {number}
     * @memberof ScheduleYieldInfoType
     */
    idExtension?: number;
    /**
     * The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.
     * @type {string}
     * @memberof ScheduleYieldInfoType
     */
    instance?: string;
    /**
     * A reference to the type of object defined by the UniqueID element. Refer to OpenTravel Code List Unique ID Type (UIT).
     * @type {string}
     * @memberof ScheduleYieldInfoType
     */
    type?: string;
    /**
     * URL that identifies the location associated with the record identified by the UniqueID.
     * @type {string}
     * @memberof ScheduleYieldInfoType
     */
    url?: string;
    /**
     * The detail info for the adjustment code.
     * @type {Array<YieldInfoType>}
     * @memberof ScheduleYieldInfoType
     */
    yieldInfo?: Array<YieldInfoType>;
}

/**
 * Check if a given object implements the ScheduleYieldInfoType interface.
 */
export function instanceOfScheduleYieldInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScheduleYieldInfoTypeFromJSON(json: any): ScheduleYieldInfoType {
    return ScheduleYieldInfoTypeFromJSONTyped(json, false);
}

export function ScheduleYieldInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduleYieldInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'yieldInfo': !exists(json, 'yieldInfo') ? undefined : ((json['yieldInfo'] as Array<any>).map(YieldInfoTypeFromJSON)),
    };
}

export function ScheduleYieldInfoTypeToJSON(value?: ScheduleYieldInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'id': value.id,
        'idContext': value.idContext,
        'idExtension': value.idExtension,
        'instance': value.instance,
        'type': value.type,
        'url': value.url,
        'yieldInfo': value.yieldInfo === undefined ? undefined : ((value.yieldInfo as Array<any>).map(YieldInfoTypeToJSON)),
    };
}

