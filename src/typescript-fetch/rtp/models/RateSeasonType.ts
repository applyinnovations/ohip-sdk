/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TimeSpanType } from './TimeSpanType';
import {
    TimeSpanTypeFromJSON,
    TimeSpanTypeFromJSONTyped,
    TimeSpanTypeToJSON,
} from './TimeSpanType';

/**
 * Base details common between hotel and template rate seasons.
 * @export
 * @interface RateSeasonType
 */
export interface RateSeasonType {
    /**
     * 
     * @type {TimeSpanType}
     * @memberof RateSeasonType
     */
    dateRange?: TimeSpanType;
    /**
     * Description of the rate season.
     * @type {string}
     * @memberof RateSeasonType
     */
    description?: string;
    /**
     * Hotel code that the rate season belongs to.
     * @type {string}
     * @memberof RateSeasonType
     */
    hotelId?: string;
    /**
     * Rate code associated with the rate season. When a rate code is provided, the season code is reserved exclusively for this rate code and cannot be used in other rate codes.
     * @type {string}
     * @memberof RateSeasonType
     */
    reservedForRateCode?: string;
    /**
     * Season code to identify the rate season.
     * @type {string}
     * @memberof RateSeasonType
     */
    seasonCode?: string;
}

/**
 * Check if a given object implements the RateSeasonType interface.
 */
export function instanceOfRateSeasonType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateSeasonTypeFromJSON(json: any): RateSeasonType {
    return RateSeasonTypeFromJSONTyped(json, false);
}

export function RateSeasonTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateSeasonType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dateRange': !exists(json, 'dateRange') ? undefined : TimeSpanTypeFromJSON(json['dateRange']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservedForRateCode': !exists(json, 'reservedForRateCode') ? undefined : json['reservedForRateCode'],
        'seasonCode': !exists(json, 'seasonCode') ? undefined : json['seasonCode'],
    };
}

export function RateSeasonTypeToJSON(value?: RateSeasonType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dateRange': TimeSpanTypeToJSON(value.dateRange),
        'description': value.description,
        'hotelId': value.hotelId,
        'reservedForRateCode': value.reservedForRateCode,
        'seasonCode': value.seasonCode,
    };
}

