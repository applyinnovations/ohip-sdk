/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { ScheduleYieldInfoType } from './ScheduleYieldInfoType';
import {
    ScheduleYieldInfoTypeFromJSON,
    ScheduleYieldInfoTypeFromJSONTyped,
    ScheduleYieldInfoTypeToJSON,
} from './ScheduleYieldInfoType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';
import type { YieldSummaryType } from './YieldSummaryType';
import {
    YieldSummaryTypeFromJSON,
    YieldSummaryTypeFromJSONTyped,
    YieldSummaryTypeToJSON,
} from './YieldSummaryType';

/**
 * Response object to fetch Yield adjustments for rate plan schedule.
 * @export
 * @interface RatePlanScheduleYieldAdjustments
 */
export interface RatePlanScheduleYieldAdjustments {
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof RatePlanScheduleYieldAdjustments
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RatePlanScheduleYieldAdjustments
     */
    warnings?: Array<WarningType>;
    /**
     * 
     * @type {ScheduleYieldInfoType}
     * @memberof RatePlanScheduleYieldAdjustments
     */
    yieldInfoList?: ScheduleYieldInfoType;
    /**
     * Yield summary for each adjutment type.
     * @type {Array<YieldSummaryType>}
     * @memberof RatePlanScheduleYieldAdjustments
     */
    yieldSummary?: Array<YieldSummaryType>;
}

/**
 * Check if a given object implements the RatePlanScheduleYieldAdjustments interface.
 */
export function instanceOfRatePlanScheduleYieldAdjustments(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlanScheduleYieldAdjustmentsFromJSON(json: any): RatePlanScheduleYieldAdjustments {
    return RatePlanScheduleYieldAdjustmentsFromJSONTyped(json, false);
}

export function RatePlanScheduleYieldAdjustmentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanScheduleYieldAdjustments {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
        'yieldInfoList': !exists(json, 'yieldInfoList') ? undefined : ScheduleYieldInfoTypeFromJSON(json['yieldInfoList']),
        'yieldSummary': !exists(json, 'yieldSummary') ? undefined : ((json['yieldSummary'] as Array<any>).map(YieldSummaryTypeFromJSON)),
    };
}

export function RatePlanScheduleYieldAdjustmentsToJSON(value?: RatePlanScheduleYieldAdjustments | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
        'yieldInfoList': ScheduleYieldInfoTypeToJSON(value.yieldInfoList),
        'yieldSummary': value.yieldSummary === undefined ? undefined : ((value.yieldSummary as Array<any>).map(YieldSummaryTypeToJSON)),
    };
}

