/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { MasterInfoType } from './MasterInfoType';
import {
    MasterInfoTypeFromJSON,
    MasterInfoTypeFromJSONTyped,
    MasterInfoTypeToJSON,
} from './MasterInfoType';
import type { RatePlanType } from './RatePlanType';
import {
    RatePlanTypeFromJSON,
    RatePlanTypeFromJSONTyped,
    RatePlanTypeToJSON,
} from './RatePlanType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response object to fetch rate plan's complete details.
 * @export
 * @interface RatePlanInfo
 */
export interface RatePlanInfo {
    /**
     * 
     * @type {Links}
     * @memberof RatePlanInfo
     */
    links?: Links;
    /**
     * Refer to Generic common types document.
     * @type {Array<MasterInfoType>}
     * @memberof RatePlanInfo
     */
    masterInfoList?: Array<MasterInfoType>;
    /**
     * Rate plan complete details such as primary details, classifications, room types etc.
     * @type {Array<RatePlanType>}
     * @memberof RatePlanInfo
     */
    ratePlans?: Array<RatePlanType>;
    /**
     * 
     * @type {WarningsType}
     * @memberof RatePlanInfo
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the RatePlanInfo interface.
 */
export function instanceOfRatePlanInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlanInfoFromJSON(json: any): RatePlanInfo {
    return RatePlanInfoFromJSONTyped(json, false);
}

export function RatePlanInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'masterInfoList': !exists(json, 'masterInfoList') ? undefined : ((json['masterInfoList'] as Array<any>).map(MasterInfoTypeFromJSON)),
        'ratePlans': !exists(json, 'ratePlans') ? undefined : ((json['ratePlans'] as Array<any>).map(RatePlanTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function RatePlanInfoToJSON(value?: RatePlanInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'masterInfoList': value.masterInfoList === undefined ? undefined : ((value.masterInfoList as Array<any>).map(MasterInfoTypeToJSON)),
        'ratePlans': value.ratePlans === undefined ? undefined : ((value.ratePlans as Array<any>).map(RatePlanTypeToJSON)),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

