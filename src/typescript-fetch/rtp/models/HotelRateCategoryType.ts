/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelRateCategoryTypeRateCategoryDetails } from './HotelRateCategoryTypeRateCategoryDetails';
import {
    HotelRateCategoryTypeRateCategoryDetailsFromJSON,
    HotelRateCategoryTypeRateCategoryDetailsFromJSONTyped,
    HotelRateCategoryTypeRateCategoryDetailsToJSON,
} from './HotelRateCategoryTypeRateCategoryDetails';

/**
 * This type represents the rate category type.
 * @export
 * @interface HotelRateCategoryType
 */
export interface HotelRateCategoryType {
    /**
     * Hotel Code for a rate category.
     * @type {string}
     * @memberof HotelRateCategoryType
     */
    hotelId?: string;
    /**
     * Rate category Code.
     * @type {string}
     * @memberof HotelRateCategoryType
     */
    rateCategory?: string;
    /**
     * 
     * @type {HotelRateCategoryTypeRateCategoryDetails}
     * @memberof HotelRateCategoryType
     */
    rateCategoryDetails?: HotelRateCategoryTypeRateCategoryDetails;
}

/**
 * Check if a given object implements the HotelRateCategoryType interface.
 */
export function instanceOfHotelRateCategoryType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelRateCategoryTypeFromJSON(json: any): HotelRateCategoryType {
    return HotelRateCategoryTypeFromJSONTyped(json, false);
}

export function HotelRateCategoryTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelRateCategoryType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'rateCategory': !exists(json, 'rateCategory') ? undefined : json['rateCategory'],
        'rateCategoryDetails': !exists(json, 'rateCategoryDetails') ? undefined : HotelRateCategoryTypeRateCategoryDetailsFromJSON(json['rateCategoryDetails']),
    };
}

export function HotelRateCategoryTypeToJSON(value?: HotelRateCategoryType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'rateCategory': value.rateCategory,
        'rateCategoryDetails': HotelRateCategoryTypeRateCategoryDetailsToJSON(value.rateCategoryDetails),
    };
}

