/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PackageCodeShortInfoType } from './PackageCodeShortInfoType';
import {
    PackageCodeShortInfoTypeFromJSON,
    PackageCodeShortInfoTypeFromJSONTyped,
    PackageCodeShortInfoTypeToJSON,
} from './PackageCodeShortInfoType';
import type { PackageCodeType } from './PackageCodeType';
import {
    PackageCodeTypeFromJSON,
    PackageCodeTypeFromJSONTyped,
    PackageCodeTypeToJSON,
} from './PackageCodeType';

/**
 * Depending on the fetch instructions either full details or basic details will be fetched
 * @export
 * @interface HotelPackageCodesType
 */
export interface HotelPackageCodesType {
    /**
     * Hotel code for the packages.
     * @type {string}
     * @memberof HotelPackageCodesType
     */
    hotelId?: string;
    /**
     * Full Details about each package code
     * @type {Array<PackageCodeType>}
     * @memberof HotelPackageCodesType
     */
    packageCodeInfo?: Array<PackageCodeType>;
    /**
     * Basic information about the each package code.
     * @type {Array<PackageCodeShortInfoType>}
     * @memberof HotelPackageCodesType
     */
    packageCodeShortInfo?: Array<PackageCodeShortInfoType>;
}

/**
 * Check if a given object implements the HotelPackageCodesType interface.
 */
export function instanceOfHotelPackageCodesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelPackageCodesTypeFromJSON(json: any): HotelPackageCodesType {
    return HotelPackageCodesTypeFromJSONTyped(json, false);
}

export function HotelPackageCodesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelPackageCodesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'packageCodeInfo': !exists(json, 'packageCodeInfo') ? undefined : ((json['packageCodeInfo'] as Array<any>).map(PackageCodeTypeFromJSON)),
        'packageCodeShortInfo': !exists(json, 'packageCodeShortInfo') ? undefined : ((json['packageCodeShortInfo'] as Array<any>).map(PackageCodeShortInfoTypeFromJSON)),
    };
}

export function HotelPackageCodesTypeToJSON(value?: HotelPackageCodesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'packageCodeInfo': value.packageCodeInfo === undefined ? undefined : ((value.packageCodeInfo as Array<any>).map(PackageCodeTypeToJSON)),
        'packageCodeShortInfo': value.packageCodeShortInfo === undefined ? undefined : ((value.packageCodeShortInfo as Array<any>).map(PackageCodeShortInfoTypeToJSON)),
    };
}

