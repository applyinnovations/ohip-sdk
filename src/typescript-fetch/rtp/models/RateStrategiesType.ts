/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateStrategyType } from './RateStrategyType';
import {
    RateStrategyTypeFromJSON,
    RateStrategyTypeFromJSONTyped,
    RateStrategyTypeToJSON,
} from './RateStrategyType';

/**
 * The Rate strategy type.
 * @export
 * @interface RateStrategiesType
 */
export interface RateStrategiesType {
    /**
     * Hotel code.
     * @type {string}
     * @memberof RateStrategiesType
     */
    hotelId?: string;
    /**
     * Rate Strategies.
     * @type {Array<RateStrategyType>}
     * @memberof RateStrategiesType
     */
    rateStrategy?: Array<RateStrategyType>;
}

/**
 * Check if a given object implements the RateStrategiesType interface.
 */
export function instanceOfRateStrategiesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateStrategiesTypeFromJSON(json: any): RateStrategiesType {
    return RateStrategiesTypeFromJSONTyped(json, false);
}

export function RateStrategiesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateStrategiesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'rateStrategy': !exists(json, 'rateStrategy') ? undefined : ((json['rateStrategy'] as Array<any>).map(RateStrategyTypeFromJSON)),
    };
}

export function RateStrategiesTypeToJSON(value?: RateStrategiesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'rateStrategy': value.rateStrategy === undefined ? undefined : ((value.rateStrategy as Array<any>).map(RateStrategyTypeToJSON)),
    };
}

