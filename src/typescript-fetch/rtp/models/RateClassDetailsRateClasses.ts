/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateClassType } from './RateClassType';
import {
    RateClassTypeFromJSON,
    RateClassTypeFromJSONTyped,
    RateClassTypeToJSON,
} from './RateClassType';

/**
 * Collection of rate classes.
 * @export
 * @interface RateClassDetailsRateClasses
 */
export interface RateClassDetailsRateClasses {
    /**
     * Collection of hotel rate classes.
     * @type {Array<RateClassType>}
     * @memberof RateClassDetailsRateClasses
     */
    rateClasses?: Array<RateClassType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof RateClassDetailsRateClasses
     */
    totalPages?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof RateClassDetailsRateClasses
     */
    offset?: number;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof RateClassDetailsRateClasses
     */
    limit?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof RateClassDetailsRateClasses
     */
    hasMore?: boolean;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof RateClassDetailsRateClasses
     */
    totalResults?: number;
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof RateClassDetailsRateClasses
     */
    count?: number;
}

/**
 * Check if a given object implements the RateClassDetailsRateClasses interface.
 */
export function instanceOfRateClassDetailsRateClasses(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateClassDetailsRateClassesFromJSON(json: any): RateClassDetailsRateClasses {
    return RateClassDetailsRateClassesFromJSONTyped(json, false);
}

export function RateClassDetailsRateClassesFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateClassDetailsRateClasses {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rateClasses': !exists(json, 'rateClasses') ? undefined : ((json['rateClasses'] as Array<any>).map(RateClassTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'count': !exists(json, 'count') ? undefined : json['count'],
    };
}

export function RateClassDetailsRateClassesToJSON(value?: RateClassDetailsRateClasses | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rateClasses': value.rateClasses === undefined ? undefined : ((value.rateClasses as Array<any>).map(RateClassTypeToJSON)),
        'totalPages': value.totalPages,
        'offset': value.offset,
        'limit': value.limit,
        'hasMore': value.hasMore,
        'totalResults': value.totalResults,
        'count': value.count,
    };
}

