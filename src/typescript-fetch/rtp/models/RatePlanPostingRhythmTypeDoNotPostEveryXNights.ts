/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Do not Post the Rate Code every X nights. This can be used to offer free nights after staying certain number of nights on the rate plan.
 * @export
 * @interface RatePlanPostingRhythmTypeDoNotPostEveryXNights
 */
export interface RatePlanPostingRhythmTypeDoNotPostEveryXNights {
    /**
     * The night the rate plan is not supposed to be posted.
     * @type {number}
     * @memberof RatePlanPostingRhythmTypeDoNotPostEveryXNights
     */
    xNight?: number;
    /**
     * Post the packages on free nights if the packages posting rhythm falls on the night rate plan is not getting posted.
     * @type {boolean}
     * @memberof RatePlanPostingRhythmTypeDoNotPostEveryXNights
     */
    postPackages?: boolean;
}

/**
 * Check if a given object implements the RatePlanPostingRhythmTypeDoNotPostEveryXNights interface.
 */
export function instanceOfRatePlanPostingRhythmTypeDoNotPostEveryXNights(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlanPostingRhythmTypeDoNotPostEveryXNightsFromJSON(json: any): RatePlanPostingRhythmTypeDoNotPostEveryXNights {
    return RatePlanPostingRhythmTypeDoNotPostEveryXNightsFromJSONTyped(json, false);
}

export function RatePlanPostingRhythmTypeDoNotPostEveryXNightsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanPostingRhythmTypeDoNotPostEveryXNights {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'xNight': !exists(json, 'xNight') ? undefined : json['xNight'],
        'postPackages': !exists(json, 'postPackages') ? undefined : json['postPackages'],
    };
}

export function RatePlanPostingRhythmTypeDoNotPostEveryXNightsToJSON(value?: RatePlanPostingRhythmTypeDoNotPostEveryXNights | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'xNight': value.xNight,
        'postPackages': value.postPackages,
    };
}

