/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RatePlanDistributionType
 */
export interface RatePlanDistributionType {
    /**
     * Rate plan Code is available for channels.
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    channelAllowed?: boolean;
    /**
     * Flag to indicate if Rate Plan is mapped to at least one Channel.
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    channelRateMappingExists?: boolean;
    /**
     * Rate plan to be uploaded to MyFidleio and published.
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    myFidelioUploadAllowed?: boolean;
    /**
     * Rate updates for the rate plan to be sent to channels?
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    rateUpdate?: boolean;
    /**
     * Consider the rate plan for regional availability to be used by channels?
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    regionalAvailability?: boolean;
    /**
     * Restriction updates for the rate plan to be sent to channels?
     * @type {boolean}
     * @memberof RatePlanDistributionType
     */
    restrictionUpdate?: boolean;
}

/**
 * Check if a given object implements the RatePlanDistributionType interface.
 */
export function instanceOfRatePlanDistributionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlanDistributionTypeFromJSON(json: any): RatePlanDistributionType {
    return RatePlanDistributionTypeFromJSONTyped(json, false);
}

export function RatePlanDistributionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanDistributionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelAllowed': !exists(json, 'channelAllowed') ? undefined : json['channelAllowed'],
        'channelRateMappingExists': !exists(json, 'channelRateMappingExists') ? undefined : json['channelRateMappingExists'],
        'myFidelioUploadAllowed': !exists(json, 'myFidelioUploadAllowed') ? undefined : json['myFidelioUploadAllowed'],
        'rateUpdate': !exists(json, 'rateUpdate') ? undefined : json['rateUpdate'],
        'regionalAvailability': !exists(json, 'regionalAvailability') ? undefined : json['regionalAvailability'],
        'restrictionUpdate': !exists(json, 'restrictionUpdate') ? undefined : json['restrictionUpdate'],
    };
}

export function RatePlanDistributionTypeToJSON(value?: RatePlanDistributionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channelAllowed': value.channelAllowed,
        'channelRateMappingExists': value.channelRateMappingExists,
        'myFidelioUploadAllowed': value.myFidelioUploadAllowed,
        'rateUpdate': value.rateUpdate,
        'regionalAvailability': value.regionalAvailability,
        'restrictionUpdate': value.restrictionUpdate,
    };
}

