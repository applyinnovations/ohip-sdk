/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Condition threshold value with incremental flag.
 * @export
 * @interface ThresholdType
 */
export interface ThresholdType {
    /**
     * Property Value
     * @type {number}
     * @memberof ThresholdType
     */
    value?: number;
    /**
     * If incremental flag is true, condition threshold value represents increment or decrement to be adjusted, otherwise it represents an absolute value.
     * @type {boolean}
     * @memberof ThresholdType
     */
    incremental?: boolean;
}

/**
 * Check if a given object implements the ThresholdType interface.
 */
export function instanceOfThresholdType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ThresholdTypeFromJSON(json: any): ThresholdType {
    return ThresholdTypeFromJSONTyped(json, false);
}

export function ThresholdTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThresholdType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': !exists(json, 'value') ? undefined : json['value'],
        'incremental': !exists(json, 'incremental') ? undefined : json['incremental'],
    };
}

export function ThresholdTypeToJSON(value?: ThresholdType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'incremental': value.incremental,
    };
}

