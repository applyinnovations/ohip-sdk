/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { YieldInfoType } from './YieldInfoType';
import {
    YieldInfoTypeFromJSON,
    YieldInfoTypeFromJSONTyped,
    YieldInfoTypeToJSON,
} from './YieldInfoType';

/**
 * The Yield adjustments defined in the system based on the request.
 * @export
 * @interface YieldAdjustmentsType
 */
export interface YieldAdjustmentsType {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof YieldAdjustmentsType
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof YieldAdjustmentsType
     */
    hasMore?: boolean;
    /**
     * Hotel code for the Adjustments.
     * @type {string}
     * @memberof YieldAdjustmentsType
     */
    hotelId?: string;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof YieldAdjustmentsType
     */
    totalResults?: number;
    /**
     * Details of the adjustment codes.
     * @type {Array<YieldInfoType>}
     * @memberof YieldAdjustmentsType
     */
    yieldAdjustment?: Array<YieldInfoType>;
}

/**
 * Check if a given object implements the YieldAdjustmentsType interface.
 */
export function instanceOfYieldAdjustmentsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function YieldAdjustmentsTypeFromJSON(json: any): YieldAdjustmentsType {
    return YieldAdjustmentsTypeFromJSONTyped(json, false);
}

export function YieldAdjustmentsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): YieldAdjustmentsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'yieldAdjustment': !exists(json, 'yieldAdjustment') ? undefined : ((json['yieldAdjustment'] as Array<any>).map(YieldInfoTypeFromJSON)),
    };
}

export function YieldAdjustmentsTypeToJSON(value?: YieldAdjustmentsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'hotelId': value.hotelId,
        'totalResults': value.totalResults,
        'yieldAdjustment': value.yieldAdjustment === undefined ? undefined : ((value.yieldAdjustment as Array<any>).map(YieldInfoTypeToJSON)),
    };
}

