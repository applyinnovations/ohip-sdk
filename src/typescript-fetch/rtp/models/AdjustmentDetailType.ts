/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The adjustment code details for the rate schedule.
 * @export
 * @interface AdjustmentDetailType
 */
export interface AdjustmentDetailType {
    /**
     * the adjustment code that needs to be attached to the rate schedule.
     * @type {string}
     * @memberof AdjustmentDetailType
     */
    adjustmentCode?: string;
    /**
     * Should this Adjustment code be deleted ?
     * @type {boolean}
     * @memberof AdjustmentDetailType
     */
    deleteAdjustment?: boolean;
    /**
     * The amount with which the actual adjustment will be overridden. if no amount is sent, default adjustment code's amount will be used.
     * @type {number}
     * @memberof AdjustmentDetailType
     */
    overriddenAmount?: number;
}

/**
 * Check if a given object implements the AdjustmentDetailType interface.
 */
export function instanceOfAdjustmentDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AdjustmentDetailTypeFromJSON(json: any): AdjustmentDetailType {
    return AdjustmentDetailTypeFromJSONTyped(json, false);
}

export function AdjustmentDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdjustmentDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'adjustmentCode': !exists(json, 'adjustmentCode') ? undefined : json['adjustmentCode'],
        'deleteAdjustment': !exists(json, 'deleteAdjustment') ? undefined : json['deleteAdjustment'],
        'overriddenAmount': !exists(json, 'overriddenAmount') ? undefined : json['overriddenAmount'],
    };
}

export function AdjustmentDetailTypeToJSON(value?: AdjustmentDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'adjustmentCode': value.adjustmentCode,
        'deleteAdjustment': value.deleteAdjustment,
        'overriddenAmount': value.overriddenAmount,
    };
}

