/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExchangePostingType } from './ExchangePostingType';
import {
    ExchangePostingTypeFromJSON,
    ExchangePostingTypeFromJSONTyped,
    ExchangePostingTypeToJSON,
} from './ExchangePostingType';
import type { RatePlanAdvancedPostingRhythmType } from './RatePlanAdvancedPostingRhythmType';
import {
    RatePlanAdvancedPostingRhythmTypeFromJSON,
    RatePlanAdvancedPostingRhythmTypeFromJSONTyped,
    RatePlanAdvancedPostingRhythmTypeToJSON,
} from './RatePlanAdvancedPostingRhythmType';
import type { RatePlanPostingRhythmType } from './RatePlanPostingRhythmType';
import {
    RatePlanPostingRhythmTypeFromJSON,
    RatePlanPostingRhythmTypeFromJSONTyped,
    RatePlanPostingRhythmTypeToJSON,
} from './RatePlanPostingRhythmType';
import type { RatePlanRoomTransactionCodeType } from './RatePlanRoomTransactionCodeType';
import {
    RatePlanRoomTransactionCodeTypeFromJSON,
    RatePlanRoomTransactionCodeTypeFromJSONTyped,
    RatePlanRoomTransactionCodeTypeToJSON,
} from './RatePlanRoomTransactionCodeType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * 
 * @export
 * @interface RatePlanTransactionDetailsType
 */
export interface RatePlanTransactionDetailsType {
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof RatePlanTransactionDetailsType
     */
    folioText?: TranslationTextType2000;
    /**
     * Transaction code used by the rate plan.
     * @type {string}
     * @memberof RatePlanTransactionDetailsType
     */
    transactionCode?: string;
    /**
     * Single transaction code and room type/class association.
     * @type {Array<RatePlanRoomTransactionCodeType>}
     * @memberof RatePlanTransactionDetailsType
     */
    roomTransactionCodes?: Array<RatePlanRoomTransactionCodeType>;
    /**
     * Package Transaction code used by the rate plan.
     * @type {string}
     * @memberof RatePlanTransactionDetailsType
     */
    packageTransactionCode?: string;
    /**
     * Currency code used by the rate plan.
     * @type {string}
     * @memberof RatePlanTransactionDetailsType
     */
    currencyCode?: string;
    /**
     * Is tax included in the rate plan?
     * @type {boolean}
     * @memberof RatePlanTransactionDetailsType
     */
    rateIncludesTax?: boolean;
    /**
     * 
     * @type {ExchangePostingType}
     * @memberof RatePlanTransactionDetailsType
     */
    exchangePosting?: ExchangePostingType;
    /**
     * 
     * @type {RatePlanPostingRhythmType}
     * @memberof RatePlanTransactionDetailsType
     */
    postingRhythm?: RatePlanPostingRhythmType;
    /**
     * Posting rhythm details for a rate plan containing Buy x Get y functionality.
     * @type {Array<RatePlanAdvancedPostingRhythmType>}
     * @memberof RatePlanTransactionDetailsType
     */
    advancedPostingRhythms?: Array<RatePlanAdvancedPostingRhythmType>;
}

/**
 * Check if a given object implements the RatePlanTransactionDetailsType interface.
 */
export function instanceOfRatePlanTransactionDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlanTransactionDetailsTypeFromJSON(json: any): RatePlanTransactionDetailsType {
    return RatePlanTransactionDetailsTypeFromJSONTyped(json, false);
}

export function RatePlanTransactionDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlanTransactionDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'folioText': !exists(json, 'folioText') ? undefined : TranslationTextType2000FromJSON(json['folioText']),
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'roomTransactionCodes': !exists(json, 'roomTransactionCodes') ? undefined : ((json['roomTransactionCodes'] as Array<any>).map(RatePlanRoomTransactionCodeTypeFromJSON)),
        'packageTransactionCode': !exists(json, 'packageTransactionCode') ? undefined : json['packageTransactionCode'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'rateIncludesTax': !exists(json, 'rateIncludesTax') ? undefined : json['rateIncludesTax'],
        'exchangePosting': !exists(json, 'exchangePosting') ? undefined : ExchangePostingTypeFromJSON(json['exchangePosting']),
        'postingRhythm': !exists(json, 'postingRhythm') ? undefined : RatePlanPostingRhythmTypeFromJSON(json['postingRhythm']),
        'advancedPostingRhythms': !exists(json, 'advancedPostingRhythms') ? undefined : ((json['advancedPostingRhythms'] as Array<any>).map(RatePlanAdvancedPostingRhythmTypeFromJSON)),
    };
}

export function RatePlanTransactionDetailsTypeToJSON(value?: RatePlanTransactionDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'folioText': TranslationTextType2000ToJSON(value.folioText),
        'transactionCode': value.transactionCode,
        'roomTransactionCodes': value.roomTransactionCodes === undefined ? undefined : ((value.roomTransactionCodes as Array<any>).map(RatePlanRoomTransactionCodeTypeToJSON)),
        'packageTransactionCode': value.packageTransactionCode,
        'currencyCode': value.currencyCode,
        'rateIncludesTax': value.rateIncludesTax,
        'exchangePosting': ExchangePostingTypeToJSON(value.exchangePosting),
        'postingRhythm': RatePlanPostingRhythmTypeToJSON(value.postingRhythm),
        'advancedPostingRhythms': value.advancedPostingRhythms === undefined ? undefined : ((value.advancedPostingRhythms as Array<any>).map(RatePlanAdvancedPostingRhythmTypeToJSON)),
    };
}

