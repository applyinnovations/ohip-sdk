/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RateClassDetailsRateClasses } from './RateClassDetailsRateClasses';
import {
    RateClassDetailsRateClassesFromJSON,
    RateClassDetailsRateClassesFromJSONTyped,
    RateClassDetailsRateClassesToJSON,
} from './RateClassDetailsRateClasses';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response for fetch rate classes.
 * @export
 * @interface RateClassDetails
 */
export interface RateClassDetails {
    /**
     * 
     * @type {RateClassDetailsRateClasses}
     * @memberof RateClassDetails
     */
    rateClasses?: RateClassDetailsRateClasses;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof RateClassDetails
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RateClassDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the RateClassDetails interface.
 */
export function instanceOfRateClassDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateClassDetailsFromJSON(json: any): RateClassDetails {
    return RateClassDetailsFromJSONTyped(json, false);
}

export function RateClassDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateClassDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rateClasses': !exists(json, 'rateClasses') ? undefined : RateClassDetailsRateClassesFromJSON(json['rateClasses']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function RateClassDetailsToJSON(value?: RateClassDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rateClasses': RateClassDetailsRateClassesToJSON(value.rateClasses),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

