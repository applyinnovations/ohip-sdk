/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateByAgeBucketType } from './RateByAgeBucketType';
import {
    RateByAgeBucketTypeFromJSON,
    RateByAgeBucketTypeFromJSONTyped,
    RateByAgeBucketTypeToJSON,
} from './RateByAgeBucketType';

/**
 * 
 * @export
 * @interface RateAmountsType
 */
export interface RateAmountsType {
    /**
     * 
     * @type {number}
     * @memberof RateAmountsType
     */
    baseAmount?: number;
    /**
     * Rate amount for the extra child..
     * @type {number}
     * @memberof RateAmountsType
     */
    extraChildRate?: number;
    /**
     * Rate amount for each extra person.
     * @type {number}
     * @memberof RateAmountsType
     */
    extraPersonRate?: number;
    /**
     * Rate amount for five persons.
     * @type {number}
     * @memberof RateAmountsType
     */
    fivePersonsRate?: number;
    /**
     * Rate amount for four Children.
     * @type {number}
     * @memberof RateAmountsType
     */
    fourChildrenRate?: number;
    /**
     * Rate amount for four persons.
     * @type {number}
     * @memberof RateAmountsType
     */
    fourPersonsRate?: number;
    /**
     * Rate amount for one Child.
     * @type {number}
     * @memberof RateAmountsType
     */
    oneChildRate?: number;
    /**
     * Rate amount for one person.
     * @type {number}
     * @memberof RateAmountsType
     */
    onePersonRate?: number;
    /**
     * Rate amount by age bucket.
     * @type {Array<RateByAgeBucketType>}
     * @memberof RateAmountsType
     */
    rateByAgeBuckets?: Array<RateByAgeBucketType>;
    /**
     * Rate amount for three Children.
     * @type {number}
     * @memberof RateAmountsType
     */
    threeChildrenRate?: number;
    /**
     * Rate amount for three persons.
     * @type {number}
     * @memberof RateAmountsType
     */
    threePersonsRate?: number;
    /**
     * Rate amount for two Children.
     * @type {number}
     * @memberof RateAmountsType
     */
    twoChildrenRate?: number;
    /**
     * Rate amount for two persons.
     * @type {number}
     * @memberof RateAmountsType
     */
    twoPersonsRate?: number;
}

/**
 * Check if a given object implements the RateAmountsType interface.
 */
export function instanceOfRateAmountsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateAmountsTypeFromJSON(json: any): RateAmountsType {
    return RateAmountsTypeFromJSONTyped(json, false);
}

export function RateAmountsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateAmountsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'baseAmount': !exists(json, 'baseAmount') ? undefined : json['baseAmount'],
        'extraChildRate': !exists(json, 'extraChildRate') ? undefined : json['extraChildRate'],
        'extraPersonRate': !exists(json, 'extraPersonRate') ? undefined : json['extraPersonRate'],
        'fivePersonsRate': !exists(json, 'fivePersonsRate') ? undefined : json['fivePersonsRate'],
        'fourChildrenRate': !exists(json, 'fourChildrenRate') ? undefined : json['fourChildrenRate'],
        'fourPersonsRate': !exists(json, 'fourPersonsRate') ? undefined : json['fourPersonsRate'],
        'oneChildRate': !exists(json, 'oneChildRate') ? undefined : json['oneChildRate'],
        'onePersonRate': !exists(json, 'onePersonRate') ? undefined : json['onePersonRate'],
        'rateByAgeBuckets': !exists(json, 'rateByAgeBuckets') ? undefined : ((json['rateByAgeBuckets'] as Array<any>).map(RateByAgeBucketTypeFromJSON)),
        'threeChildrenRate': !exists(json, 'threeChildrenRate') ? undefined : json['threeChildrenRate'],
        'threePersonsRate': !exists(json, 'threePersonsRate') ? undefined : json['threePersonsRate'],
        'twoChildrenRate': !exists(json, 'twoChildrenRate') ? undefined : json['twoChildrenRate'],
        'twoPersonsRate': !exists(json, 'twoPersonsRate') ? undefined : json['twoPersonsRate'],
    };
}

export function RateAmountsTypeToJSON(value?: RateAmountsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'baseAmount': value.baseAmount,
        'extraChildRate': value.extraChildRate,
        'extraPersonRate': value.extraPersonRate,
        'fivePersonsRate': value.fivePersonsRate,
        'fourChildrenRate': value.fourChildrenRate,
        'fourPersonsRate': value.fourPersonsRate,
        'oneChildRate': value.oneChildRate,
        'onePersonRate': value.onePersonRate,
        'rateByAgeBuckets': value.rateByAgeBuckets === undefined ? undefined : ((value.rateByAgeBuckets as Array<any>).map(RateByAgeBucketTypeToJSON)),
        'threeChildrenRate': value.threeChildrenRate,
        'threePersonsRate': value.threePersonsRate,
        'twoChildrenRate': value.twoChildrenRate,
        'twoPersonsRate': value.twoPersonsRate,
    };
}

