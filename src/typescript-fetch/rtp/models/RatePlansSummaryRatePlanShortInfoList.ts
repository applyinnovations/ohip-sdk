/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RatePlanShortInfoType } from './RatePlanShortInfoType';
import {
    RatePlanShortInfoTypeFromJSON,
    RatePlanShortInfoTypeFromJSONTyped,
    RatePlanShortInfoTypeToJSON,
} from './RatePlanShortInfoType';

/**
 * List of summary information for the rate plan code.
 * @export
 * @interface RatePlansSummaryRatePlanShortInfoList
 */
export interface RatePlansSummaryRatePlanShortInfoList {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof RatePlansSummaryRatePlanShortInfoList
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof RatePlansSummaryRatePlanShortInfoList
     */
    hasMore?: boolean;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof RatePlansSummaryRatePlanShortInfoList
     */
    limit?: number;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof RatePlansSummaryRatePlanShortInfoList
     */
    offset?: number;
    /**
     * List of summary information for the rate plan code.
     * @type {Array<RatePlanShortInfoType>}
     * @memberof RatePlansSummaryRatePlanShortInfoList
     */
    ratePlanShortInfo?: Array<RatePlanShortInfoType>;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof RatePlansSummaryRatePlanShortInfoList
     */
    totalPages?: number;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof RatePlansSummaryRatePlanShortInfoList
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the RatePlansSummaryRatePlanShortInfoList interface.
 */
export function instanceOfRatePlansSummaryRatePlanShortInfoList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RatePlansSummaryRatePlanShortInfoListFromJSON(json: any): RatePlansSummaryRatePlanShortInfoList {
    return RatePlansSummaryRatePlanShortInfoListFromJSONTyped(json, false);
}

export function RatePlansSummaryRatePlanShortInfoListFromJSONTyped(json: any, ignoreDiscriminator: boolean): RatePlansSummaryRatePlanShortInfoList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'ratePlanShortInfo': !exists(json, 'ratePlanShortInfo') ? undefined : ((json['ratePlanShortInfo'] as Array<any>).map(RatePlanShortInfoTypeFromJSON)),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function RatePlansSummaryRatePlanShortInfoListToJSON(value?: RatePlansSummaryRatePlanShortInfoList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'limit': value.limit,
        'offset': value.offset,
        'ratePlanShortInfo': value.ratePlanShortInfo === undefined ? undefined : ((value.ratePlanShortInfo as Array<any>).map(RatePlanShortInfoTypeToJSON)),
        'totalPages': value.totalPages,
        'totalResults': value.totalResults,
    };
}

