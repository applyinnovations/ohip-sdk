/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DisplaySetsCriteria,
  DisplaySetsDetails,
  DisplaySetsToBeChanged,
  ExceptionDetailType,
  Status,
} from '../models/index';
import {
    DisplaySetsCriteriaFromJSON,
    DisplaySetsCriteriaToJSON,
    DisplaySetsDetailsFromJSON,
    DisplaySetsDetailsToJSON,
    DisplaySetsToBeChangedFromJSON,
    DisplaySetsToBeChangedToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DeleteDisplaySetsRequest {
    displaySetsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDisplaySetsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDisplaySetsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    displaySetsCriteria: DisplaySetsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDisplaySetsRequest {
    displaySetsId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    displaySetsToBeChanged: DisplaySetsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to delete Display Sets. <p><strong>OperationId:</strong>deleteDisplaySets</p>
     * Delete Display Sets
     */
    async deleteDisplaySetsRaw(requestParameters: DeleteDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.displaySetsId === null || requestParameters.displaySetsId === undefined) {
            throw new runtime.RequiredError('displaySetsId','Required parameter requestParameters.displaySetsId was null or undefined when calling deleteDisplaySets.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/displaySets/{displaySetsId}`.replace(`{${"displaySetsId"}}`, encodeURIComponent(String(requestParameters.displaySetsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Display Sets. <p><strong>OperationId:</strong>deleteDisplaySets</p>
     * Delete Display Sets
     */
    async deleteDisplaySets(requestParameters: DeleteDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDisplaySetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Display Sets. <p><strong>OperationId:</strong>getDisplaySets</p>
     * Get Display Sets
     */
    async getDisplaySetsRaw(requestParameters: GetDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DisplaySetsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/displaySets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DisplaySetsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Display Sets. <p><strong>OperationId:</strong>getDisplaySets</p>
     * Get Display Sets
     */
    async getDisplaySets(requestParameters: GetDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DisplaySetsDetails> {
        const response = await this.getDisplaySetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Display Sets. <p><strong>OperationId:</strong>postDisplaySets</p>
     * Create Display Sets
     */
    async postDisplaySetsRaw(requestParameters: PostDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.displaySetsCriteria === null || requestParameters.displaySetsCriteria === undefined) {
            throw new runtime.RequiredError('displaySetsCriteria','Required parameter requestParameters.displaySetsCriteria was null or undefined when calling postDisplaySets.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/displaySets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DisplaySetsCriteriaToJSON(requestParameters.displaySetsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Display Sets. <p><strong>OperationId:</strong>postDisplaySets</p>
     * Create Display Sets
     */
    async postDisplaySets(requestParameters: PostDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDisplaySetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Display Sets. <p><strong>OperationId:</strong>putDisplaySets</p>
     * Change Display Sets
     */
    async putDisplaySetsRaw(requestParameters: PutDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.displaySetsId === null || requestParameters.displaySetsId === undefined) {
            throw new runtime.RequiredError('displaySetsId','Required parameter requestParameters.displaySetsId was null or undefined when calling putDisplaySets.');
        }
        
        if (requestParameters.displaySetsToBeChanged === null || requestParameters.displaySetsToBeChanged === undefined) {
            throw new runtime.RequiredError('displaySetsToBeChanged','Required parameter requestParameters.displaySetsToBeChanged was null or undefined when calling putDisplaySets.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/displaySets/{displaySetsId}`.replace(`{${"displaySetsId"}}`, encodeURIComponent(String(requestParameters.displaySetsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DisplaySetsToBeChangedToJSON(requestParameters.displaySetsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Display Sets. <p><strong>OperationId:</strong>putDisplaySets</p>
     * Change Display Sets
     */
    async putDisplaySets(requestParameters: PutDisplaySetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDisplaySetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
