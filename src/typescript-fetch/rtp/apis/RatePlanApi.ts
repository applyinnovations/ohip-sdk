/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Rate API
 * APIs to cater for Rate Availability functionality in OPERA Cloud. <br /><br /> Rate Management provides all the tools you need to effectively define and manage the rate structures for a property in OPERA Cloud. Some of the things you can do include creating and managing rate codes, rate classes, rate categories, display sets, rate strategies, as well as managing promotion groups and codes.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockRatePlans,
  CopyPackageCodesType,
  CreateBestAvailableRates,
  DailyRatePlanScheduleRange,
  DistributedNegotiatedRates,
  ExceptionDetailType,
  GetBestAvailableRatesDetails,
  HotelPackageForecastGroups,
  HotelPackageForecastGroupsToChange,
  HotelPackageForecastGroupsToCreate,
  MassRateChangeStatus,
  MassRatePlanSchedules,
  NegotiatedRates,
  NegotiatedRatesDetails,
  OperaVersion,
  PackageFormulaRanges,
  PackageGroup,
  PackageGroupsInfo,
  PackageInfo,
  PackageRates,
  PackagesInfo,
  PromotionGroup,
  PromotionGroups,
  PromotionGroupsCopy,
  PropertyPromotionCode,
  PropertyPromotionCodes,
  RateAccessExclusions,
  RateActivityLog,
  RateGroups,
  RateGroupsInfo,
  RatePlan,
  RatePlanInfo,
  RatePlanPackages,
  RatePlanPostingRhythms,
  RatePlanScheduleToSplit,
  RatePlanScheduleYieldAdjustments,
  RatePlanSchedules,
  RatePlanSchedulesInfo,
  RatePlanSchedulesToCreate,
  RatePlansCopy,
  RatePlansCopyDetails,
  RatePlansSchedulesToManage,
  RatePlansSummary,
  RateStrategies,
  RateStrategiesToSet,
  RateStrategy,
  Status,
  TemplatePackageForecastGroups,
  TemplatePromotionCode,
  TemplatePromotionCodes,
  TieredRateSchedulesCopy,
  YieldAdjustments,
} from '../models/index';
import {
    BlockRatePlansFromJSON,
    BlockRatePlansToJSON,
    CopyPackageCodesTypeFromJSON,
    CopyPackageCodesTypeToJSON,
    CreateBestAvailableRatesFromJSON,
    CreateBestAvailableRatesToJSON,
    DailyRatePlanScheduleRangeFromJSON,
    DailyRatePlanScheduleRangeToJSON,
    DistributedNegotiatedRatesFromJSON,
    DistributedNegotiatedRatesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GetBestAvailableRatesDetailsFromJSON,
    GetBestAvailableRatesDetailsToJSON,
    HotelPackageForecastGroupsFromJSON,
    HotelPackageForecastGroupsToJSON,
    HotelPackageForecastGroupsToChangeFromJSON,
    HotelPackageForecastGroupsToChangeToJSON,
    HotelPackageForecastGroupsToCreateFromJSON,
    HotelPackageForecastGroupsToCreateToJSON,
    MassRateChangeStatusFromJSON,
    MassRateChangeStatusToJSON,
    MassRatePlanSchedulesFromJSON,
    MassRatePlanSchedulesToJSON,
    NegotiatedRatesFromJSON,
    NegotiatedRatesToJSON,
    NegotiatedRatesDetailsFromJSON,
    NegotiatedRatesDetailsToJSON,
    OperaVersionFromJSON,
    OperaVersionToJSON,
    PackageFormulaRangesFromJSON,
    PackageFormulaRangesToJSON,
    PackageGroupFromJSON,
    PackageGroupToJSON,
    PackageGroupsInfoFromJSON,
    PackageGroupsInfoToJSON,
    PackageInfoFromJSON,
    PackageInfoToJSON,
    PackageRatesFromJSON,
    PackageRatesToJSON,
    PackagesInfoFromJSON,
    PackagesInfoToJSON,
    PromotionGroupFromJSON,
    PromotionGroupToJSON,
    PromotionGroupsFromJSON,
    PromotionGroupsToJSON,
    PromotionGroupsCopyFromJSON,
    PromotionGroupsCopyToJSON,
    PropertyPromotionCodeFromJSON,
    PropertyPromotionCodeToJSON,
    PropertyPromotionCodesFromJSON,
    PropertyPromotionCodesToJSON,
    RateAccessExclusionsFromJSON,
    RateAccessExclusionsToJSON,
    RateActivityLogFromJSON,
    RateActivityLogToJSON,
    RateGroupsFromJSON,
    RateGroupsToJSON,
    RateGroupsInfoFromJSON,
    RateGroupsInfoToJSON,
    RatePlanFromJSON,
    RatePlanToJSON,
    RatePlanInfoFromJSON,
    RatePlanInfoToJSON,
    RatePlanPackagesFromJSON,
    RatePlanPackagesToJSON,
    RatePlanPostingRhythmsFromJSON,
    RatePlanPostingRhythmsToJSON,
    RatePlanScheduleToSplitFromJSON,
    RatePlanScheduleToSplitToJSON,
    RatePlanScheduleYieldAdjustmentsFromJSON,
    RatePlanScheduleYieldAdjustmentsToJSON,
    RatePlanSchedulesFromJSON,
    RatePlanSchedulesToJSON,
    RatePlanSchedulesInfoFromJSON,
    RatePlanSchedulesInfoToJSON,
    RatePlanSchedulesToCreateFromJSON,
    RatePlanSchedulesToCreateToJSON,
    RatePlansCopyFromJSON,
    RatePlansCopyToJSON,
    RatePlansCopyDetailsFromJSON,
    RatePlansCopyDetailsToJSON,
    RatePlansSchedulesToManageFromJSON,
    RatePlansSchedulesToManageToJSON,
    RatePlansSummaryFromJSON,
    RatePlansSummaryToJSON,
    RateStrategiesFromJSON,
    RateStrategiesToJSON,
    RateStrategiesToSetFromJSON,
    RateStrategiesToSetToJSON,
    RateStrategyFromJSON,
    RateStrategyToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplatePackageForecastGroupsFromJSON,
    TemplatePackageForecastGroupsToJSON,
    TemplatePromotionCodeFromJSON,
    TemplatePromotionCodeToJSON,
    TemplatePromotionCodesFromJSON,
    TemplatePromotionCodesToJSON,
    TieredRateSchedulesCopyFromJSON,
    TieredRateSchedulesCopyToJSON,
    YieldAdjustmentsFromJSON,
    YieldAdjustmentsToJSON,
} from '../models/index';

export interface CopyPackagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packagesCopy: Array<CopyPackageCodesType>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyPromotionGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    promotionGroupsCopy: PromotionGroupsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyRatePlansRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlansCopy: RatePlansCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTieredRateSchedulesRequest {
    destinationTierId: string;
    sourceTierId: string;
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    tieredRateSchedulesCopy: TieredRateSchedulesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBestAvailableRatesRequest {
    hotelId: string;
    code: Array<string>;
    end: string;
    start: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    lOS1?: boolean;
    lOS2?: boolean;
    lOS3?: boolean;
    lOS4?: boolean;
    lOS5?: boolean;
    lOS6?: boolean;
    lOS7?: boolean;
    lOS8?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDailyRatePlanScheduleRangeRequest {
    ratePlanCode: string;
    hotelId: string;
    startDate: string;
    endDate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    duration?: string;
    advancedDailyBaseRatePlanCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHotelPackageForecastGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMassRateChangeLogRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteNegotiatedRatesRequest {
    ratePlanId: string;
    startDate: string;
    profileId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePackageRequest {
    packageCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePackageFormulaRangesRequest {
    packageFormulaRangeId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    amount?: number;
    currencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePackageGroupsRequest {
    packageCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePromotionGroupRequest {
    groupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRateAccessExclusionsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateCode?: string;
    allowCancelReservation?: Array<boolean>;
    allowCreateReservation?: Array<boolean>;
    allowModifyReservation?: Array<boolean>;
    excludeFromAvailability?: Array<boolean>;
    inactive?: Array<boolean>;
    sourceType?: Array<string>;
    sourceValue?: Array<string>;
    end?: string;
    start?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRateGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRatePlanRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRatePlanPackagesRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageCode?: Array<string>;
    packageGroup?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRatePlanPostingRhythmsRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRatePlanSchedulesRequest {
    ratePlanCode: string;
    hotelId: string;
    ratePlanScheduleIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    tierID?: number;
    seasonCode?: string;
    start?: string;
    end?: string;
    roomType?: Array<string>;
    sunday?: boolean;
    monday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    thursday?: boolean;
    friday?: boolean;
    saturday?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRatePlanServiceCacheRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRateStrategyRequest {
    rateStrategyId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplatePackageForecastGroupsRequest {
    packageForecastGroupCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DistributeNegotiatedRatesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    distributedNegotiatedRates: DistributedNegotiatedRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DownloadExternalRatePlanRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBestAvailableRatesRequest {
    hotelId: string;
    startDay: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    rateCode?: Array<string>;
    endDay?: string;
    daysOfWeek?: Set<GetBestAvailableRatesDaysOfWeekEnum>;
    lengthOfStay?: Set<GetBestAvailableRatesLengthOfStayEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelPackageForecastGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    packageForecastGroupCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMassRateChangeStatusRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    detailStatus?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRatesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: string;
    endDate?: string;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRatesForGivenHotelAndRateRequest {
    rateCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: string;
    endDate?: string;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNegotiatedRatesForGivenProfileRequest {
    profileId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    startDate?: string;
    endDate?: string;
    hotelCode?: string;
    ratePlanCode?: string;
    includeInactiveNegotiatedRates?: boolean;
    fetchInstructionsLimit?: number;
    fetchInstructions?: Set<GetNegotiatedRatesForGivenProfileFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageRequest {
    packageCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetPackageFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageFormulaRangesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxRangeType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    code?: string;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageRatesRequest {
    packageCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackagesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    hotelId?: Array<string>;
    packageCode?: Array<string>;
    descriptionWildCard?: string;
    startDate?: string;
    endDate?: string;
    adults?: number;
    children?: number;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    includeGroup?: boolean;
    sellSeparate?: boolean;
    ticketPostingRhythm?: boolean;
    excludeRedemptionPackages?: boolean;
    fetchInstructions?: Set<GetPackagesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPromotionCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    promotionCode?: Array<string>;
    promotionGroup?: Array<string>;
    rateCodes?: string;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPromotionGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    code?: Array<string>;
    promotionGroupListCode?: Array<string>;
    rateCodes?: string;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateActivityLogRequest {
    hotelId: string;
    module: GetRateActivityLogModuleEnum;
    parameterName: Array<string>;
    parameterValue: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    activityGroup?: string;
    activityType?: string;
    fromDate?: string;
    toDate?: string;
    searchText?: string;
    userId?: Array<number>;
    userForIdsUserId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    code?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetRatePlanFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanScheduleYieldAdjustmentsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    summaryInfo?: boolean;
    id?: string;
    ratePlanCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanSchedulesRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeRatePlanPackage?: boolean;
    limit?: number;
    tierId?: number;
    ratePlanScheduleId?: string;
    ratePlanScheduleIdType?: string;
    startDate?: string;
    endDate?: string;
    duration?: string;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlansRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeRateInformation?: boolean;
    limit?: number;
    offset?: number;
    ratePlanCode?: Array<string>;
    rateCategory?: Array<string>;
    sellDate?: string;
    displaySet?: string;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    attributeName?: Array<string>;
    orderType?: Set<GetRatePlansOrderTypeEnum>;
    includeInactive?: boolean;
    dayUseOnly?: boolean;
    approvalStatus?: GetRatePlansApprovalStatusEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlansByHotelRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCode?: string;
    fetchInstructions?: Set<GetRatePlansByHotelFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlansForBlockRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCode?: Array<string>;
    beginDate?: string;
    endDate?: string;
    companyId?: string;
    companyIdType?: string;
    sourceId?: string;
    sourceIdType?: string;
    agentId?: string;
    agentIdType?: string;
    negotiatedOnly?: boolean;
    currencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRateStrategiesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    restrictionDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplatePackageForecastGroupsRequest {
    includeInactive: boolean;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageForecastGroupCode?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplatePromotionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelId?: Array<string>;
    promotionCode?: Array<string>;
    promotionGroup?: Array<string>;
    rateCodes?: string;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetYieldAdjustmentsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    currencyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ManageRatePlansSchedulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlansSchedulesToManage: RatePlansSchedulesToManage;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PingRatePlanServiceRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBestAvailableRatesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createBestAvailableRates: CreateBestAvailableRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelPackageForecastGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelPackageForecastGroupsToCreate: HotelPackageForecastGroupsToCreate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostNegotiatedRatesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    negotiatedRates: NegotiatedRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPackageRequest {
    packageCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageInfo: PackageInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPackageFormulaRangesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageFormulaRanges: PackageFormulaRanges;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPackageGroupRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageGroup: PackageGroup;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPromotionCodeRequest {
    promotionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyPromotionCode: PropertyPromotionCode;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPromotionGroupRequest {
    groupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    promotionGroup: PromotionGroup;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRateGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateGroups: RateGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRatePlanRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlan: RatePlan;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRatePlanPackagesRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanPackages: RatePlanPackages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRatePlanPostingRhythmsRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanPostingRhythms: RatePlanPostingRhythms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRatePlanSchedulesRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanSchedulesToCreate: RatePlanSchedulesToCreate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRateStrategyRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateStrategy: RateStrategy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplatePackageForecastGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templatePackageForecastGroups: TemplatePackageForecastGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplatePromotionCodeRequest {
    promotionCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templatePromotionCode: TemplatePromotionCode;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutHotelPackageForecastGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelPackageForecastGroupsToChange: HotelPackageForecastGroupsToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutNegotiatedRatesRequest {
    rateCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    negotiatedRates: NegotiatedRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPackageRequest {
    packageCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageInfo: PackageInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPackageFormulaRangesRequest {
    packageFormulaRangeId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageFormulaRanges: PackageFormulaRanges;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPackageGroupRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageGroup: PackageGroup;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPromotionCodeRequest {
    promotionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    propertyPromotionCode: PropertyPromotionCode;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPromotionGroupRequest {
    groupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    promotionGroup: PromotionGroup;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRateGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateGroups: RateGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRatePlanRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlan: RatePlan;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRatePlanPackagesRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanPackages: RatePlanPackages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRatePlanPostingRhythmsRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanPostingRhythms: RatePlanPostingRhythms;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRatePlanSchedulesRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanSchedules: RatePlanSchedules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRateStrategyRequest {
    rateStrategyId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateStrategy: RateStrategy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplatePackageForecastGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templatePackageForecastGroups: TemplatePackageForecastGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplatePromotionCodeRequest {
    promotionCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templatePromotionCode: TemplatePromotionCode;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetDailyRatePlanScheduleRangeRequest {
    ratePlanCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyRatePlanScheduleRange: DailyRatePlanScheduleRange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetMassRatePlanSchedulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    massRatePlanSchedules: MassRatePlanSchedules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetRateAccessExclusionsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateAccessExclusions: RateAccessExclusions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetRateStrategiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    rateStrategiesToSet: RateStrategiesToSet;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SplitRatePlanScheduleRequest {
    scheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanScheduleToSplit: RatePlanScheduleToSplit;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class RatePlanApi extends runtime.BaseAPI {

    /**
     * This API allows you to copy package codes(s) from one hotel to another. <p><strong>OperationId:</strong>copyPackages</p>
     * Copy package code(s) 
     */
    async copyPackagesRaw(requestParameters: CopyPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packagesCopy === null || requestParameters.packagesCopy === undefined) {
            throw new runtime.RequiredError('packagesCopy','Required parameter requestParameters.packagesCopy was null or undefined when calling copyPackages.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packages/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.packagesCopy.map(CopyPackageCodesTypeToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to copy package codes(s) from one hotel to another. <p><strong>OperationId:</strong>copyPackages</p>
     * Copy package code(s) 
     */
    async copyPackages(requestParameters: CopyPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to copy promotions groups. <p><strong>OperationId:</strong>copyPromotionGroups</p>
     * Copy promotion groups
     */
    async copyPromotionGroupsRaw(requestParameters: CopyPromotionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyPromotionGroups.');
        }
        
        if (requestParameters.promotionGroupsCopy === null || requestParameters.promotionGroupsCopy === undefined) {
            throw new runtime.RequiredError('promotionGroupsCopy','Required parameter requestParameters.promotionGroupsCopy was null or undefined when calling copyPromotionGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionGroups/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PromotionGroupsCopyToJSON(requestParameters.promotionGroupsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to copy promotions groups. <p><strong>OperationId:</strong>copyPromotionGroups</p>
     * Copy promotion groups
     */
    async copyPromotionGroups(requestParameters: CopyPromotionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyPromotionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to copy Rate Plans. <p><strong>OperationId:</strong>copyRatePlans</p>
     * Copy rate plans
     */
    async copyRatePlansRaw(requestParameters: CopyRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlansCopyDetails>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling copyRatePlans.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyRatePlans.');
        }
        
        if (requestParameters.ratePlansCopy === null || requestParameters.ratePlansCopy === undefined) {
            throw new runtime.RequiredError('ratePlansCopy','Required parameter requestParameters.ratePlansCopy was null or undefined when calling copyRatePlans.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/copy`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlansCopyToJSON(requestParameters.ratePlansCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlansCopyDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows you to copy Rate Plans. <p><strong>OperationId:</strong>copyRatePlans</p>
     * Copy rate plans
     */
    async copyRatePlans(requestParameters: CopyRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlansCopyDetails> {
        const response = await this.copyRatePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to copy tiered rate schedules. <p><strong>OperationId:</strong>copyTieredRateSchedules</p>
     * Copy tiered rate schedules
     */
    async copyTieredRateSchedulesRaw(requestParameters: CopyTieredRateSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.destinationTierId === null || requestParameters.destinationTierId === undefined) {
            throw new runtime.RequiredError('destinationTierId','Required parameter requestParameters.destinationTierId was null or undefined when calling copyTieredRateSchedules.');
        }
        
        if (requestParameters.sourceTierId === null || requestParameters.sourceTierId === undefined) {
            throw new runtime.RequiredError('sourceTierId','Required parameter requestParameters.sourceTierId was null or undefined when calling copyTieredRateSchedules.');
        }
        
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling copyTieredRateSchedules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyTieredRateSchedules.');
        }
        
        if (requestParameters.tieredRateSchedulesCopy === null || requestParameters.tieredRateSchedulesCopy === undefined) {
            throw new runtime.RequiredError('tieredRateSchedulesCopy','Required parameter requestParameters.tieredRateSchedulesCopy was null or undefined when calling copyTieredRateSchedules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/sourceTiers/{sourceTierId}/destinationTiers/{destinationTierId}/schedules/copy`.replace(`{${"destinationTierId"}}`, encodeURIComponent(String(requestParameters.destinationTierId))).replace(`{${"sourceTierId"}}`, encodeURIComponent(String(requestParameters.sourceTierId))).replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TieredRateSchedulesCopyToJSON(requestParameters.tieredRateSchedulesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to copy tiered rate schedules. <p><strong>OperationId:</strong>copyTieredRateSchedules</p>
     * Copy tiered rate schedules
     */
    async copyTieredRateSchedules(requestParameters: CopyTieredRateSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTieredRateSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    async deleteBestAvailableRatesRaw(requestParameters: DeleteBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteBestAvailableRates.');
        }
        
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteBestAvailableRates.');
        }
        
        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling deleteBestAvailableRates.');
        }
        
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling deleteBestAvailableRates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.lOS1 !== undefined) {
            queryParameters['lOS1'] = requestParameters.lOS1;
        }

        if (requestParameters.lOS2 !== undefined) {
            queryParameters['lOS2'] = requestParameters.lOS2;
        }

        if (requestParameters.lOS3 !== undefined) {
            queryParameters['lOS3'] = requestParameters.lOS3;
        }

        if (requestParameters.lOS4 !== undefined) {
            queryParameters['lOS4'] = requestParameters.lOS4;
        }

        if (requestParameters.lOS5 !== undefined) {
            queryParameters['lOS5'] = requestParameters.lOS5;
        }

        if (requestParameters.lOS6 !== undefined) {
            queryParameters['lOS6'] = requestParameters.lOS6;
        }

        if (requestParameters.lOS7 !== undefined) {
            queryParameters['lOS7'] = requestParameters.lOS7;
        }

        if (requestParameters.lOS8 !== undefined) {
            queryParameters['lOS8'] = requestParameters.lOS8;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>deleteBestAvailableRates</p>
     * Delete Best Available Rates
     */
    async deleteBestAvailableRates(requestParameters: DeleteBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete daily Rate Plan schedules. <p><strong>OperationId:</strong>deleteDailyRatePlanScheduleRange</p>
     * Delete daily rate plan schedule range
     */
    async deleteDailyRatePlanScheduleRangeRaw(requestParameters: DeleteDailyRatePlanScheduleRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteDailyRatePlanScheduleRange.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteDailyRatePlanScheduleRange.');
        }
        
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling deleteDailyRatePlanScheduleRange.');
        }
        
        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling deleteDailyRatePlanScheduleRange.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.advancedDailyBaseRatePlanCode !== undefined) {
            queryParameters['advancedDailyBaseRatePlanCode'] = requestParameters.advancedDailyBaseRatePlanCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/dailySchedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete daily Rate Plan schedules. <p><strong>OperationId:</strong>deleteDailyRatePlanScheduleRange</p>
     * Delete daily rate plan schedule range
     */
    async deleteDailyRatePlanScheduleRange(requestParameters: DeleteDailyRatePlanScheduleRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDailyRatePlanScheduleRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete package forecast groups. <p><strong>OperationId:</strong>deleteHotelPackageForecastGroups</p>
     * Delete Hotel Package Forecast Groups
     */
    async deleteHotelPackageForecastGroupsRaw(requestParameters: DeleteHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteHotelPackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete package forecast groups. <p><strong>OperationId:</strong>deleteHotelPackageForecastGroups</p>
     * Delete Hotel Package Forecast Groups
     */
    async deleteHotelPackageForecastGroups(requestParameters: DeleteHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete mass rate change log. <p><strong>OperationId:</strong>deleteMassRateChangeLog</p>
     * Delete mass rate change log
     */
    async deleteMassRateChangeLogRaw(requestParameters: DeleteMassRateChangeLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteMassRateChangeLog.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/massRateChangeLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete mass rate change log. <p><strong>OperationId:</strong>deleteMassRateChangeLog</p>
     * Delete mass rate change log
     */
    async deleteMassRateChangeLog(requestParameters: DeleteMassRateChangeLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMassRateChangeLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete negotiated rate. <p><strong>OperationId:</strong>deleteNegotiatedRates</p>
     * Delete negotiated rates
     */
    async deleteNegotiatedRatesRaw(requestParameters: DeleteNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanId === null || requestParameters.ratePlanId === undefined) {
            throw new runtime.RequiredError('ratePlanId','Required parameter requestParameters.ratePlanId was null or undefined when calling deleteNegotiatedRates.');
        }
        
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling deleteNegotiatedRates.');
        }
        
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling deleteNegotiatedRates.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteNegotiatedRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/profiles/{profileId}/startDate/{startDate}/negotiatedRates/{ratePlanId}`.replace(`{${"ratePlanId"}}`, encodeURIComponent(String(requestParameters.ratePlanId))).replace(`{${"startDate"}}`, encodeURIComponent(String(requestParameters.startDate))).replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete negotiated rate. <p><strong>OperationId:</strong>deleteNegotiatedRates</p>
     * Delete negotiated rates
     */
    async deleteNegotiatedRates(requestParameters: DeleteNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete a package. <p><strong>OperationId:</strong>deletePackage</p>
     * Delete the package
     */
    async deletePackageRaw(requestParameters: DeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
            throw new runtime.RequiredError('packageCode','Required parameter requestParameters.packageCode was null or undefined when calling deletePackage.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePackage.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete a package. <p><strong>OperationId:</strong>deletePackage</p>
     * Delete the package
     */
    async deletePackage(requestParameters: DeletePackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete package formula ranges. <p><strong>OperationId:</strong>deletePackageFormulaRanges</p>
     * Delete package formula ranges
     */
    async deletePackageFormulaRangesRaw(requestParameters: DeletePackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageFormulaRangeId === null || requestParameters.packageFormulaRangeId === undefined) {
            throw new runtime.RequiredError('packageFormulaRangeId','Required parameter requestParameters.packageFormulaRangeId was null or undefined when calling deletePackageFormulaRanges.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePackageFormulaRanges.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageFormulaRanges/{packageFormulaRangeId}`.replace(`{${"packageFormulaRangeId"}}`, encodeURIComponent(String(requestParameters.packageFormulaRangeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete package formula ranges. <p><strong>OperationId:</strong>deletePackageFormulaRanges</p>
     * Delete package formula ranges
     */
    async deletePackageFormulaRanges(requestParameters: DeletePackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePackageFormulaRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete package group. <p><strong>OperationId:</strong>deletePackageGroups</p>
     * Delete package group
     */
    async deletePackageGroupsRaw(requestParameters: DeletePackageGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
            throw new runtime.RequiredError('packageCode','Required parameter requestParameters.packageCode was null or undefined when calling deletePackageGroups.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePackageGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageGroups/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete package group. <p><strong>OperationId:</strong>deletePackageGroups</p>
     * Delete package group
     */
    async deletePackageGroups(requestParameters: DeletePackageGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePackageGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete promotion groups. <p><strong>OperationId:</strong>deletePromotionGroup</p>
     * Delete promotion groups
     */
    async deletePromotionGroupRaw(requestParameters: DeletePromotionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling deletePromotionGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePromotionGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete promotion groups. <p><strong>OperationId:</strong>deletePromotionGroup</p>
     * Delete promotion groups
     */
    async deletePromotionGroup(requestParameters: DeletePromotionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePromotionGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete rate access exclusions. <p><strong>OperationId:</strong>deleteRateAccessExclusions</p>
     * Delete rate access exclusions
     */
    async deleteRateAccessExclusionsRaw(requestParameters: DeleteRateAccessExclusionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRateAccessExclusions.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.allowCancelReservation) {
            queryParameters['allowCancelReservation'] = requestParameters.allowCancelReservation;
        }

        if (requestParameters.allowCreateReservation) {
            queryParameters['allowCreateReservation'] = requestParameters.allowCreateReservation;
        }

        if (requestParameters.allowModifyReservation) {
            queryParameters['allowModifyReservation'] = requestParameters.allowModifyReservation;
        }

        if (requestParameters.excludeFromAvailability) {
            queryParameters['excludeFromAvailability'] = requestParameters.excludeFromAvailability;
        }

        if (requestParameters.inactive) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.sourceType) {
            queryParameters['sourceType'] = requestParameters.sourceType;
        }

        if (requestParameters.sourceValue) {
            queryParameters['sourceValue'] = requestParameters.sourceValue;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateAccessExclusions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete rate access exclusions. <p><strong>OperationId:</strong>deleteRateAccessExclusions</p>
     * Delete rate access exclusions
     */
    async deleteRateAccessExclusions(requestParameters: DeleteRateAccessExclusionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRateAccessExclusionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete rate groups. <p><strong>OperationId:</strong>deleteRateGroups</p>
     * Delete rate groups
     */
    async deleteRateGroupsRaw(requestParameters: DeleteRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRateGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete rate groups. <p><strong>OperationId:</strong>deleteRateGroups</p>
     * Delete rate groups
     */
    async deleteRateGroups(requestParameters: DeleteRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete Rate Plan for a given hotel id. <p><strong>OperationId:</strong>deleteRatePlan</p>
     * Delete rate plan 
     */
    async deleteRatePlanRaw(requestParameters: DeleteRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlan.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlan.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete Rate Plan for a given hotel id. <p><strong>OperationId:</strong>deleteRatePlan</p>
     * Delete rate plan 
     */
    async deleteRatePlan(requestParameters: DeleteRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete Rate Plan package. <p><strong>OperationId:</strong>deleteRatePlanPackages</p>
     * Delete rate plan packages
     */
    async deleteRatePlanPackagesRaw(requestParameters: DeleteRatePlanPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlanPackages.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlanPackages.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.packageGroup) {
            queryParameters['packageGroup'] = requestParameters.packageGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete Rate Plan package. <p><strong>OperationId:</strong>deleteRatePlanPackages</p>
     * Delete rate plan packages
     */
    async deleteRatePlanPackages(requestParameters: DeleteRatePlanPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRatePlanPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete Rate Plan posting rhythms. <p><strong>OperationId:</strong>deleteRatePlanPostingRhythms</p>
     * Delete rate plan posting rhythms
     */
    async deleteRatePlanPostingRhythmsRaw(requestParameters: DeleteRatePlanPostingRhythmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlanPostingRhythms.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlanPostingRhythms.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete Rate Plan posting rhythms. <p><strong>OperationId:</strong>deleteRatePlanPostingRhythms</p>
     * Delete rate plan posting rhythms
     */
    async deleteRatePlanPostingRhythms(requestParameters: DeleteRatePlanPostingRhythmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRatePlanPostingRhythmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    async deleteRatePlanSchedulesRaw(requestParameters: DeleteRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling deleteRatePlanSchedules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRatePlanSchedules.');
        }
        
        if (requestParameters.ratePlanScheduleIds === null || requestParameters.ratePlanScheduleIds === undefined) {
            throw new runtime.RequiredError('ratePlanScheduleIds','Required parameter requestParameters.ratePlanScheduleIds was null or undefined when calling deleteRatePlanSchedules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.ratePlanScheduleIds) {
            queryParameters['ratePlanScheduleIds'] = requestParameters.ratePlanScheduleIds;
        }

        if (requestParameters.tierID !== undefined) {
            queryParameters['tierID'] = requestParameters.tierID;
        }

        if (requestParameters.seasonCode !== undefined) {
            queryParameters['seasonCode'] = requestParameters.seasonCode;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Rate Plan schedules.<p><strong>OperationId:</strong>deleteRatePlanSchedules</p>
     * Delete rate plan schedule
     */
    async deleteRatePlanSchedules(requestParameters: DeleteRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete Rate Plan service cache. <p><strong>OperationId:</strong>deleteRatePlanServiceCache</p>
     * Delete the Rate plan service cache
     */
    async deleteRatePlanServiceCacheRaw(requestParameters: DeleteRatePlanServiceCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/rateplan/cache`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete Rate Plan service cache. <p><strong>OperationId:</strong>deleteRatePlanServiceCache</p>
     * Delete the Rate plan service cache
     */
    async deleteRatePlanServiceCache(requestParameters: DeleteRatePlanServiceCacheRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRatePlanServiceCacheRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete rate strategies. <p><strong>OperationId:</strong>deleteRateStrategy</p>
     * Delete rate strategies
     */
    async deleteRateStrategyRaw(requestParameters: DeleteRateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.rateStrategyId === null || requestParameters.rateStrategyId === undefined) {
            throw new runtime.RequiredError('rateStrategyId','Required parameter requestParameters.rateStrategyId was null or undefined when calling deleteRateStrategy.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRateStrategy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateStrategies/{rateStrategyId}`.replace(`{${"rateStrategyId"}}`, encodeURIComponent(String(requestParameters.rateStrategyId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete rate strategies. <p><strong>OperationId:</strong>deleteRateStrategy</p>
     * Delete rate strategies
     */
    async deleteRateStrategy(requestParameters: DeleteRateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRateStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete Package Forecast groups template. <p><strong>OperationId:</strong>deleteTemplatePackageForecastGroups</p>
     * Delete Template Package Forecast Groups
     */
    async deleteTemplatePackageForecastGroupsRaw(requestParameters: DeleteTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageForecastGroupCode === null || requestParameters.packageForecastGroupCode === undefined) {
            throw new runtime.RequiredError('packageForecastGroupCode','Required parameter requestParameters.packageForecastGroupCode was null or undefined when calling deleteTemplatePackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageForecastGroups/{packageForecastGroupCode}`.replace(`{${"packageForecastGroupCode"}}`, encodeURIComponent(String(requestParameters.packageForecastGroupCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete Package Forecast groups template. <p><strong>OperationId:</strong>deleteTemplatePackageForecastGroups</p>
     * Delete Template Package Forecast Groups
     */
    async deleteTemplatePackageForecastGroups(requestParameters: DeleteTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to distribute negotiated Rate. <p><strong>OperationId:</strong>distributeNegotiatedRates</p>
     * Distribute negotiated rates
     */
    async distributeNegotiatedRatesRaw(requestParameters: DistributeNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling distributeNegotiatedRates.');
        }
        
        if (requestParameters.distributedNegotiatedRates === null || requestParameters.distributedNegotiatedRates === undefined) {
            throw new runtime.RequiredError('distributedNegotiatedRates','Required parameter requestParameters.distributedNegotiatedRates was null or undefined when calling distributeNegotiatedRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates/distributions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DistributedNegotiatedRatesToJSON(requestParameters.distributedNegotiatedRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to distribute negotiated Rate. <p><strong>OperationId:</strong>distributeNegotiatedRates</p>
     * Distribute negotiated rates
     */
    async distributeNegotiatedRates(requestParameters: DistributeNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.distributeNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch external Rate Plan. <p><strong>OperationId:</strong>downloadExternalRatePlan</p>
     * Get external rate plan
     */
    async downloadExternalRatePlanRaw(requestParameters: DownloadExternalRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling downloadExternalRatePlan.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling downloadExternalRatePlan.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/externalRatePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch external Rate Plan. <p><strong>OperationId:</strong>downloadExternalRatePlan</p>
     * Get external rate plan
     */
    async downloadExternalRatePlan(requestParameters: DownloadExternalRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.downloadExternalRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    async getBestAvailableRatesRaw(requestParameters: GetBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetBestAvailableRatesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getBestAvailableRates.');
        }
        
        if (requestParameters.startDay === null || requestParameters.startDay === undefined) {
            throw new runtime.RequiredError('startDay','Required parameter requestParameters.startDay was null or undefined when calling getBestAvailableRates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.startDay !== undefined) {
            queryParameters['startDay'] = requestParameters.startDay;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.rateCode) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.endDay !== undefined) {
            queryParameters['endDay'] = requestParameters.endDay;
        }

        if (requestParameters.daysOfWeek) {
            queryParameters['daysOfWeek'] = requestParameters.daysOfWeek;
        }

        if (requestParameters.lengthOfStay) {
            queryParameters['lengthOfStay'] = requestParameters.lengthOfStay;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetBestAvailableRatesDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows to fetch Best Available rates for rate code(s). <p><strong>OperationId:</strong>getBestAvailableRates</p>
     * Fetch Best Available Rates
     */
    async getBestAvailableRates(requestParameters: GetBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetBestAvailableRatesDetails> {
        const response = await this.getBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch package forecast groups. <p><strong>OperationId:</strong>getHotelPackageForecastGroups</p>
     * Get Hotel Package Forecast Groups
     */
    async getHotelPackageForecastGroupsRaw(requestParameters: GetHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelPackageForecastGroups>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getHotelPackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.packageForecastGroupCodes) {
            queryParameters['PackageForecastGroupCodes'] = requestParameters.packageForecastGroupCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelPackageForecastGroupsFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch package forecast groups. <p><strong>OperationId:</strong>getHotelPackageForecastGroups</p>
     * Get Hotel Package Forecast Groups
     */
    async getHotelPackageForecastGroups(requestParameters: GetHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelPackageForecastGroups> {
        const response = await this.getHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch mass rate change status. <p><strong>OperationId:</strong>getMassRateChangeStatus</p>
     * Get mass rate change status
     */
    async getMassRateChangeStatusRaw(requestParameters: GetMassRateChangeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MassRateChangeStatus>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getMassRateChangeStatus.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.detailStatus !== undefined) {
            queryParameters['detailStatus'] = requestParameters.detailStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/massRateChangeStatus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MassRateChangeStatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch mass rate change status. <p><strong>OperationId:</strong>getMassRateChangeStatus</p>
     * Get mass rate change status
     */
    async getMassRateChangeStatus(requestParameters: GetMassRateChangeStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MassRateChangeStatus> {
        const response = await this.getMassRateChangeStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles 
     */
    async getNegotiatedRatesRaw(requestParameters: GetNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getNegotiatedRates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }

        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch negotiated rates and profile for a given hotel id. <p><strong>OperationId:</strong>getNegotiatedRates</p>
     * Get negotiated rates and profiles 
     */
    async getNegotiatedRates(requestParameters: GetNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates> {
        const response = await this.getNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    async getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters: GetNegotiatedRatesForGivenHotelAndRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>> {
        if (requestParameters.rateCode === null || requestParameters.rateCode === undefined) {
            throw new runtime.RequiredError('rateCode','Required parameter requestParameters.rateCode was null or undefined when calling getNegotiatedRatesForGivenHotelAndRate.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getNegotiatedRatesForGivenHotelAndRate.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }

        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates/{rateCode}/profiles`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch a Rate Plan and Profile for given hotel id and negotiated rate code. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenHotelAndRate</p>
     * Fetch Negotiated Rates
     */
    async getNegotiatedRatesForGivenHotelAndRate(requestParameters: GetNegotiatedRatesForGivenHotelAndRateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates> {
        const response = await this.getNegotiatedRatesForGivenHotelAndRateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    async getNegotiatedRatesForGivenProfileRaw(requestParameters: GetNegotiatedRatesForGivenProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRates>> {
        if (requestParameters.profileId === null || requestParameters.profileId === undefined) {
            throw new runtime.RequiredError('profileId','Required parameter requestParameters.profileId was null or undefined when calling getNegotiatedRatesForGivenProfile.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.hotelCode !== undefined) {
            queryParameters['hotelCode'] = requestParameters.hotelCode;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.includeInactiveNegotiatedRates !== undefined) {
            queryParameters['includeInactiveNegotiatedRates'] = requestParameters.includeInactiveNegotiatedRates;
        }

        if (requestParameters.fetchInstructionsLimit !== undefined) {
            queryParameters['fetchInstructionsLimit'] = requestParameters.fetchInstructionsLimit;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/profiles/{profileId}/negotiatedRates`.replace(`{${"profileId"}}`, encodeURIComponent(String(requestParameters.profileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch negotiated Rates for a given profile. <p><strong>OperationId:</strong>getNegotiatedRatesForGivenProfile</p>
     * Get negotiated rate details for given profile
     */
    async getNegotiatedRatesForGivenProfile(requestParameters: GetNegotiatedRatesForGivenProfileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRates> {
        const response = await this.getNegotiatedRatesForGivenProfileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch package details for a given package. <p><strong>OperationId:</strong>getPackage</p>
     * Get package for given package
     */
    async getPackageRaw(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageInfo>> {
        if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
            throw new runtime.RequiredError('packageCode','Required parameter requestParameters.packageCode was null or undefined when calling getPackage.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPackage.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch package details for a given package. <p><strong>OperationId:</strong>getPackage</p>
     * Get package for given package
     */
    async getPackage(requestParameters: GetPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageInfo> {
        const response = await this.getPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch package formula ranges. <p><strong>OperationId:</strong>getPackageFormulaRanges</p>
     * Get package formula ranges
     */
    async getPackageFormulaRangesRaw(requestParameters: GetPackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageFormulaRanges>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPackageFormulaRanges.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.taxRangeType !== undefined) {
            queryParameters['taxRangeType'] = requestParameters.taxRangeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageFormulaRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageFormulaRangesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch package formula ranges. <p><strong>OperationId:</strong>getPackageFormulaRanges</p>
     * Get package formula ranges
     */
    async getPackageFormulaRanges(requestParameters: GetPackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageFormulaRanges> {
        const response = await this.getPackageFormulaRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch package group. <p><strong>OperationId:</strong>getPackageGroups</p>
     * Get package groups
     */
    async getPackageGroupsRaw(requestParameters: GetPackageGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageGroupsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPackageGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageGroupsInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch package group. <p><strong>OperationId:</strong>getPackageGroups</p>
     * Get package groups
     */
    async getPackageGroups(requestParameters: GetPackageGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageGroupsInfo> {
        const response = await this.getPackageGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch rate plan codes associated for a package. <p><strong>OperationId:</strong>getPackageRates</p>
     * Get package rates
     */
    async getPackageRatesRaw(requestParameters: GetPackageRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageRates>> {
        if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
            throw new runtime.RequiredError('packageCode','Required parameter requestParameters.packageCode was null or undefined when calling getPackageRates.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPackageRates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{packageCode}/rates`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageRatesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch rate plan codes associated for a package. <p><strong>OperationId:</strong>getPackageRates</p>
     * Get package rates
     */
    async getPackageRates(requestParameters: GetPackageRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageRates> {
        const response = await this.getPackageRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    async getPackagesRaw(requestParameters: GetPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackagesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.includeGroup !== undefined) {
            queryParameters['includeGroup'] = requestParameters.includeGroup;
        }

        if (requestParameters.sellSeparate !== undefined) {
            queryParameters['sellSeparate'] = requestParameters.sellSeparate;
        }

        if (requestParameters.ticketPostingRhythm !== undefined) {
            queryParameters['ticketPostingRhythm'] = requestParameters.ticketPostingRhythm;
        }

        if (requestParameters.excludeRedemptionPackages !== undefined) {
            queryParameters['excludeRedemptionPackages'] = requestParameters.excludeRedemptionPackages;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackagesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API you to get configured packages for a hotel.<p><strong>OperationId:</strong>getPackages</p>
     * Get Packages
     */
    async getPackages(requestParameters: GetPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackagesInfo> {
        const response = await this.getPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionCodes</p>
     * Get promotion codes
     */
    async getPromotionCodesRaw(requestParameters: GetPromotionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyPromotionCodes>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPromotionCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.promotionCode) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.promotionGroup) {
            queryParameters['promotionGroup'] = requestParameters.promotionGroup;
        }

        if (requestParameters.rateCodes !== undefined) {
            queryParameters['rateCodes'] = requestParameters.rateCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyPromotionCodesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionCodes</p>
     * Get promotion codes
     */
    async getPromotionCodes(requestParameters: GetPromotionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyPromotionCodes> {
        const response = await this.getPromotionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionGroups</p>
     * Get promotion groups
     */
    async getPromotionGroupsRaw(requestParameters: GetPromotionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromotionGroups>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPromotionGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.promotionGroupListCode) {
            queryParameters['promotionGroupListCode'] = requestParameters.promotionGroupListCode;
        }

        if (requestParameters.rateCodes !== undefined) {
            queryParameters['rateCodes'] = requestParameters.rateCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromotionGroupsFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch promotion codes. <p><strong>OperationId:</strong>getPromotionGroups</p>
     * Get promotion groups
     */
    async getPromotionGroups(requestParameters: GetPromotionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromotionGroups> {
        const response = await this.getPromotionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Rate Activity Log. <p><strong>OperationId:</strong>getRateActivityLog</p>
     * Get rate activity log
     */
    async getRateActivityLogRaw(requestParameters: GetRateActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateActivityLog>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRateActivityLog.');
        }
        
        if (requestParameters.module === null || requestParameters.module === undefined) {
            throw new runtime.RequiredError('module','Required parameter requestParameters.module was null or undefined when calling getRateActivityLog.');
        }
        
        if (requestParameters.parameterName === null || requestParameters.parameterName === undefined) {
            throw new runtime.RequiredError('parameterName','Required parameter requestParameters.parameterName was null or undefined when calling getRateActivityLog.');
        }
        
        if (requestParameters.parameterValue === null || requestParameters.parameterValue === undefined) {
            throw new runtime.RequiredError('parameterValue','Required parameter requestParameters.parameterValue was null or undefined when calling getRateActivityLog.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.parameterName) {
            queryParameters['parameterName'] = requestParameters.parameterName;
        }

        if (requestParameters.parameterValue) {
            queryParameters['parameterValue'] = requestParameters.parameterValue;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = requestParameters.fromDate;
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = requestParameters.toDate;
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userId) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.userForIdsUserId) {
            queryParameters['userForIdsUserId'] = requestParameters.userForIdsUserId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rates/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateActivityLogFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Rate Activity Log. <p><strong>OperationId:</strong>getRateActivityLog</p>
     * Get rate activity log
     */
    async getRateActivityLog(requestParameters: GetRateActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateActivityLog> {
        const response = await this.getRateActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>getRateGroups</p>
     * Get rate groups
     */
    async getRateGroupsRaw(requestParameters: GetRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateGroupsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRateGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateGroupsInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>getRateGroups</p>
     * Get rate groups
     */
    async getRateGroups(requestParameters: GetRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateGroupsInfo> {
        const response = await this.getRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Rate Plan for a given hotel id and Rate Plan Code. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    async getRatePlanRaw(requestParameters: GetRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanInfo>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling getRatePlan.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRatePlan.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Rate Plan for a given hotel id and Rate Plan Code. <p><strong>OperationId:</strong>getRatePlan</p>
     * Get rate plan
     */
    async getRatePlan(requestParameters: GetRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanInfo> {
        const response = await this.getRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Rate Plan  schedules for yield adjustments. <p><strong>OperationId:</strong>getRatePlanScheduleYieldAdjustments</p>
     * Get rate plan schedule yield adjustments
     */
    async getRatePlanScheduleYieldAdjustmentsRaw(requestParameters: GetRatePlanScheduleYieldAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanScheduleYieldAdjustments>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRatePlanScheduleYieldAdjustments.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlan/schedule/yieldAdjustment`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanScheduleYieldAdjustmentsFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Rate Plan  schedules for yield adjustments. <p><strong>OperationId:</strong>getRatePlanScheduleYieldAdjustments</p>
     * Get rate plan schedule yield adjustments
     */
    async getRatePlanScheduleYieldAdjustments(requestParameters: GetRatePlanScheduleYieldAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanScheduleYieldAdjustments> {
        const response = await this.getRatePlanScheduleYieldAdjustmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    async getRatePlanSchedulesRaw(requestParameters: GetRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanSchedulesInfo>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling getRatePlanSchedules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRatePlanSchedules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.excludeRatePlanPackage !== undefined) {
            queryParameters['excludeRatePlanPackage'] = requestParameters.excludeRatePlanPackage;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.tierId !== undefined) {
            queryParameters['tierId'] = requestParameters.tierId;
        }

        if (requestParameters.ratePlanScheduleId !== undefined) {
            queryParameters['ratePlanScheduleId'] = requestParameters.ratePlanScheduleId;
        }

        if (requestParameters.ratePlanScheduleIdType !== undefined) {
            queryParameters['ratePlanScheduleIdType'] = requestParameters.ratePlanScheduleIdType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanSchedulesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to get a rate plan&apos;s pricing schedules. The information includes the date range and room types for which the price is valid, rate amounts for multiple persons, and associated packages.<p><strong>OperationId:</strong>getRatePlanSchedules</p>
     * Get rate plan schedules
     */
    async getRatePlanSchedules(requestParameters: GetRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanSchedulesInfo> {
        const response = await this.getRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    async getRatePlansRaw(requestParameters: GetRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlansSummary>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRatePlans.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.includeRateInformation !== undefined) {
            queryParameters['includeRateInformation'] = requestParameters.includeRateInformation;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.rateCategory) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.sellDate !== undefined) {
            queryParameters['sellDate'] = requestParameters.sellDate;
        }

        if (requestParameters.displaySet !== undefined) {
            queryParameters['displaySet'] = requestParameters.displaySet;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.attributeName) {
            queryParameters['attributeName'] = requestParameters.attributeName;
        }

        if (requestParameters.orderType) {
            queryParameters['orderType'] = requestParameters.orderType;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.dayUseOnly !== undefined) {
            queryParameters['dayUseOnly'] = requestParameters.dayUseOnly;
        }

        if (requestParameters.approvalStatus !== undefined) {
            queryParameters['approvalStatus'] = requestParameters.approvalStatus;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ratePlans`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlansSummaryFromJSON(jsonValue));
    }

    /**
     * Use this API to get configured Rate Plans for a property and filter this by search criteria.<p><strong>OperationId:</strong>getRatePlans</p>
     * Get rate plans
     */
    async getRatePlans(requestParameters: GetRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlansSummary> {
        const response = await this.getRatePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlansByHotel</p>
     * Get rate plans by Hotel Code
     */
    async getRatePlansByHotelRaw(requestParameters: GetRatePlansByHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRatePlansByHotel.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Rate Plans for a given hotel id. <p><strong>OperationId:</strong>getRatePlansByHotel</p>
     * Get rate plans by Hotel Code
     */
    async getRatePlansByHotel(requestParameters: GetRatePlansByHotelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanInfo> {
        const response = await this.getRatePlansByHotelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Rate Plans on a specific block. <p><strong>OperationId:</strong>getRatePlansForBlock</p>
     * Get rate plans for a given block
     */
    async getRatePlansForBlockRaw(requestParameters: GetRatePlansForBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRatePlans>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRatePlansForBlock.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.beginDate !== undefined) {
            queryParameters['beginDate'] = requestParameters.beginDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['companyId'] = requestParameters.companyId;
        }

        if (requestParameters.companyIdType !== undefined) {
            queryParameters['companyIdType'] = requestParameters.companyIdType;
        }

        if (requestParameters.sourceId !== undefined) {
            queryParameters['sourceId'] = requestParameters.sourceId;
        }

        if (requestParameters.sourceIdType !== undefined) {
            queryParameters['sourceIdType'] = requestParameters.sourceIdType;
        }

        if (requestParameters.agentId !== undefined) {
            queryParameters['agentId'] = requestParameters.agentId;
        }

        if (requestParameters.agentIdType !== undefined) {
            queryParameters['agentIdType'] = requestParameters.agentIdType;
        }

        if (requestParameters.negotiatedOnly !== undefined) {
            queryParameters['negotiatedOnly'] = requestParameters.negotiatedOnly;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/blocks/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockRatePlansFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Rate Plans on a specific block. <p><strong>OperationId:</strong>getRatePlansForBlock</p>
     * Get rate plans for a given block
     */
    async getRatePlansForBlock(requestParameters: GetRatePlansForBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRatePlans> {
        const response = await this.getRatePlansForBlockRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch rate strategies. <p><strong>OperationId:</strong>getRateStrategies</p>
     * Get rate strategies
     */
    async getRateStrategiesRaw(requestParameters: GetRateStrategiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateStrategies>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRateStrategies.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.restrictionDate !== undefined) {
            queryParameters['restrictionDate'] = requestParameters.restrictionDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateStrategies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateStrategiesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch rate strategies. <p><strong>OperationId:</strong>getRateStrategies</p>
     * Get rate strategies
     */
    async getRateStrategies(requestParameters: GetRateStrategiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateStrategies> {
        const response = await this.getRateStrategiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Package Forecast groups template. <p><strong>OperationId:</strong>getTemplatePackageForecastGroups</p>
     * Get Template Package Forecast Groups
     */
    async getTemplatePackageForecastGroupsRaw(requestParameters: GetTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatePackageForecastGroups>> {
        if (requestParameters.includeInactive === null || requestParameters.includeInactive === undefined) {
            throw new runtime.RequiredError('includeInactive','Required parameter requestParameters.includeInactive was null or undefined when calling getTemplatePackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.packageForecastGroupCode) {
            queryParameters['packageForecastGroupCode'] = requestParameters.packageForecastGroupCode;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageForecastGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatePackageForecastGroupsFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Package Forecast groups template. <p><strong>OperationId:</strong>getTemplatePackageForecastGroups</p>
     * Get Template Package Forecast Groups
     */
    async getTemplatePackageForecastGroups(requestParameters: GetTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatePackageForecastGroups> {
        const response = await this.getTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Promotion Code template. <p><strong>OperationId:</strong>getTemplatePromotionCodes</p>
     * Get Template Promotion Codes
     */
    async getTemplatePromotionCodesRaw(requestParameters: GetTemplatePromotionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplatePromotionCodes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.promotionCode) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.promotionGroup) {
            queryParameters['promotionGroup'] = requestParameters.promotionGroup;
        }

        if (requestParameters.rateCodes !== undefined) {
            queryParameters['rateCodes'] = requestParameters.rateCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/promotionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplatePromotionCodesFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Promotion Code template. <p><strong>OperationId:</strong>getTemplatePromotionCodes</p>
     * Get Template Promotion Codes
     */
    async getTemplatePromotionCodes(requestParameters: GetTemplatePromotionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplatePromotionCodes> {
        const response = await this.getTemplatePromotionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch yield adjustments. <p><strong>OperationId:</strong>getYieldAdjustments</p>
     * Get yield adjustments
     */
    async getYieldAdjustmentsRaw(requestParameters: GetYieldAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<YieldAdjustments>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getYieldAdjustments.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/yieldAdjustments`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => YieldAdjustmentsFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch yield adjustments. <p><strong>OperationId:</strong>getYieldAdjustments</p>
     * Get yield adjustments
     */
    async getYieldAdjustments(requestParameters: GetYieldAdjustmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<YieldAdjustments> {
        const response = await this.getYieldAdjustmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update Rate Plan schedules. <p><strong>OperationId:</strong>manageRatePlansSchedules</p>
     * Manages rate plan schedules
     */
    async manageRatePlansSchedulesRaw(requestParameters: ManageRatePlansSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlansSchedulesToManage === null || requestParameters.ratePlansSchedulesToManage === undefined) {
            throw new runtime.RequiredError('ratePlansSchedulesToManage','Required parameter requestParameters.ratePlansSchedulesToManage was null or undefined when calling manageRatePlansSchedules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ratePlanSchedules`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlansSchedulesToManageToJSON(requestParameters.ratePlansSchedulesToManage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update Rate Plan schedules. <p><strong>OperationId:</strong>manageRatePlansSchedules</p>
     * Manages rate plan schedules
     */
    async manageRatePlansSchedules(requestParameters: ManageRatePlansSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.manageRatePlansSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to fetch Rate Plan Service version. <p><strong>OperationId:</strong>pingRatePlanService</p>
     * Get Rate plan service version
     */
    async pingRatePlanServiceRaw(requestParameters: PingRatePlanServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaVersion>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/services/rateplan/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaVersionFromJSON(jsonValue));
    }

    /**
     * This API allows you to fetch Rate Plan Service version. <p><strong>OperationId:</strong>pingRatePlanService</p>
     * Get Rate plan service version
     */
    async pingRatePlanService(requestParameters: PingRatePlanServiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaVersion> {
        const response = await this.pingRatePlanServiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    async postBestAvailableRatesRaw(requestParameters: PostBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postBestAvailableRates.');
        }
        
        if (requestParameters.createBestAvailableRates === null || requestParameters.createBestAvailableRates === undefined) {
            throw new runtime.RequiredError('createBestAvailableRates','Required parameter requestParameters.createBestAvailableRates was null or undefined when calling postBestAvailableRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/bestavailablerates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBestAvailableRatesToJSON(requestParameters.createBestAvailableRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows to create Best Available rates for rate code(s). <p><strong>OperationId:</strong>postBestAvailableRates</p>
     * Create a Best Available Rates
     */
    async postBestAvailableRates(requestParameters: PostBestAvailableRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBestAvailableRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create package forecast groups. <p><strong>OperationId:</strong>postHotelPackageForecastGroups</p>
     * Create Hotel Package Forecast Groups
     */
    async postHotelPackageForecastGroupsRaw(requestParameters: PostHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postHotelPackageForecastGroups.');
        }
        
        if (requestParameters.hotelPackageForecastGroupsToCreate === null || requestParameters.hotelPackageForecastGroupsToCreate === undefined) {
            throw new runtime.RequiredError('hotelPackageForecastGroupsToCreate','Required parameter requestParameters.hotelPackageForecastGroupsToCreate was null or undefined when calling postHotelPackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelPackageForecastGroupsToCreateToJSON(requestParameters.hotelPackageForecastGroupsToCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create package forecast groups. <p><strong>OperationId:</strong>postHotelPackageForecastGroups</p>
     * Create Hotel Package Forecast Groups
     */
    async postHotelPackageForecastGroups(requestParameters: PostHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates 
     */
    async postNegotiatedRatesRaw(requestParameters: PostNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postNegotiatedRates.');
        }
        
        if (requestParameters.negotiatedRates === null || requestParameters.negotiatedRates === undefined) {
            throw new runtime.RequiredError('negotiatedRates','Required parameter requestParameters.negotiatedRates was null or undefined when calling postNegotiatedRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NegotiatedRatesToJSON(requestParameters.negotiatedRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create negotiated rate for a given profile. <p><strong>OperationId:</strong>postNegotiatedRates</p>
     * Create negotiated rates 
     */
    async postNegotiatedRates(requestParameters: PostNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create a package. <p><strong>OperationId:</strong>postPackage</p>
     * Create package
     */
    async postPackageRaw(requestParameters: PostPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
            throw new runtime.RequiredError('packageCode','Required parameter requestParameters.packageCode was null or undefined when calling postPackage.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPackage.');
        }
        
        if (requestParameters.packageInfo === null || requestParameters.packageInfo === undefined) {
            throw new runtime.RequiredError('packageInfo','Required parameter requestParameters.packageInfo was null or undefined when calling postPackage.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackageInfoToJSON(requestParameters.packageInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create a package. <p><strong>OperationId:</strong>postPackage</p>
     * Create package
     */
    async postPackage(requestParameters: PostPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create package formula ranges. <p><strong>OperationId:</strong>postPackageFormulaRanges</p>
     * Create package formula ranges
     */
    async postPackageFormulaRangesRaw(requestParameters: PostPackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPackageFormulaRanges.');
        }
        
        if (requestParameters.packageFormulaRanges === null || requestParameters.packageFormulaRanges === undefined) {
            throw new runtime.RequiredError('packageFormulaRanges','Required parameter requestParameters.packageFormulaRanges was null or undefined when calling postPackageFormulaRanges.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageFormulaRanges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackageFormulaRangesToJSON(requestParameters.packageFormulaRanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create package formula ranges. <p><strong>OperationId:</strong>postPackageFormulaRanges</p>
     * Create package formula ranges
     */
    async postPackageFormulaRanges(requestParameters: PostPackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPackageFormulaRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create package group. <p><strong>OperationId:</strong>postPackageGroup</p>
     * Create package group
     */
    async postPackageGroupRaw(requestParameters: PostPackageGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPackageGroup.');
        }
        
        if (requestParameters.packageGroup === null || requestParameters.packageGroup === undefined) {
            throw new runtime.RequiredError('packageGroup','Required parameter requestParameters.packageGroup was null or undefined when calling postPackageGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackageGroupToJSON(requestParameters.packageGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create package group. <p><strong>OperationId:</strong>postPackageGroup</p>
     * Create package group
     */
    async postPackageGroup(requestParameters: PostPackageGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPackageGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create promotion codes. <p><strong>OperationId:</strong>postPromotionCode</p>
     * Create promotion codes
     */
    async postPromotionCodeRaw(requestParameters: PostPromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
            throw new runtime.RequiredError('promotionCode','Required parameter requestParameters.promotionCode was null or undefined when calling postPromotionCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPromotionCode.');
        }
        
        if (requestParameters.propertyPromotionCode === null || requestParameters.propertyPromotionCode === undefined) {
            throw new runtime.RequiredError('propertyPromotionCode','Required parameter requestParameters.propertyPromotionCode was null or undefined when calling postPromotionCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyPromotionCodeToJSON(requestParameters.propertyPromotionCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create promotion codes. <p><strong>OperationId:</strong>postPromotionCode</p>
     * Create promotion codes
     */
    async postPromotionCode(requestParameters: PostPromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPromotionCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create promotion groups. <p><strong>OperationId:</strong>postPromotionGroup</p>
     * Create promotion groups
     */
    async postPromotionGroupRaw(requestParameters: PostPromotionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling postPromotionGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPromotionGroup.');
        }
        
        if (requestParameters.promotionGroup === null || requestParameters.promotionGroup === undefined) {
            throw new runtime.RequiredError('promotionGroup','Required parameter requestParameters.promotionGroup was null or undefined when calling postPromotionGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromotionGroupToJSON(requestParameters.promotionGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create promotion groups. <p><strong>OperationId:</strong>postPromotionGroup</p>
     * Create promotion groups
     */
    async postPromotionGroup(requestParameters: PostPromotionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPromotionGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create rate groups. <p><strong>OperationId:</strong>postRateGroups</p>
     * Create rate groups
     */
    async postRateGroupsRaw(requestParameters: PostRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRateGroups.');
        }
        
        if (requestParameters.rateGroups === null || requestParameters.rateGroups === undefined) {
            throw new runtime.RequiredError('rateGroups','Required parameter requestParameters.rateGroups was null or undefined when calling postRateGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateGroupsToJSON(requestParameters.rateGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create rate groups. <p><strong>OperationId:</strong>postRateGroups</p>
     * Create rate groups
     */
    async postRateGroups(requestParameters: PostRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API you to get Rate Plans for a given hotel.<p><strong>OperationId:</strong>postRatePlan</p>
     * Create rate plans
     */
    async postRatePlanRaw(requestParameters: PostRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRatePlan.');
        }
        
        if (requestParameters.ratePlan === null || requestParameters.ratePlan === undefined) {
            throw new runtime.RequiredError('ratePlan','Required parameter requestParameters.ratePlan was null or undefined when calling postRatePlan.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanToJSON(requestParameters.ratePlan),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API you to get Rate Plans for a given hotel.<p><strong>OperationId:</strong>postRatePlan</p>
     * Create rate plans
     */
    async postRatePlan(requestParameters: PostRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create Rate Plan package. <p><strong>OperationId:</strong>postRatePlanPackages</p>
     * Create rate plan package
     */
    async postRatePlanPackagesRaw(requestParameters: PostRatePlanPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling postRatePlanPackages.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRatePlanPackages.');
        }
        
        if (requestParameters.ratePlanPackages === null || requestParameters.ratePlanPackages === undefined) {
            throw new runtime.RequiredError('ratePlanPackages','Required parameter requestParameters.ratePlanPackages was null or undefined when calling postRatePlanPackages.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanPackagesToJSON(requestParameters.ratePlanPackages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create Rate Plan package. <p><strong>OperationId:</strong>postRatePlanPackages</p>
     * Create rate plan package
     */
    async postRatePlanPackages(requestParameters: PostRatePlanPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRatePlanPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create Rate Plan posting rhythms. <p><strong>OperationId:</strong>postRatePlanPostingRhythms</p>
     * Create rate plan posting rhythms
     */
    async postRatePlanPostingRhythmsRaw(requestParameters: PostRatePlanPostingRhythmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling postRatePlanPostingRhythms.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRatePlanPostingRhythms.');
        }
        
        if (requestParameters.ratePlanPostingRhythms === null || requestParameters.ratePlanPostingRhythms === undefined) {
            throw new runtime.RequiredError('ratePlanPostingRhythms','Required parameter requestParameters.ratePlanPostingRhythms was null or undefined when calling postRatePlanPostingRhythms.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanPostingRhythmsToJSON(requestParameters.ratePlanPostingRhythms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create Rate Plan posting rhythms. <p><strong>OperationId:</strong>postRatePlanPostingRhythms</p>
     * Create rate plan posting rhythms
     */
    async postRatePlanPostingRhythms(requestParameters: PostRatePlanPostingRhythmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRatePlanPostingRhythmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create Rate Plan pricing schedule. <p><strong>OperationId:</strong>postRatePlanSchedules</p>
     * Create rate plan schedules
     */
    async postRatePlanSchedulesRaw(requestParameters: PostRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling postRatePlanSchedules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRatePlanSchedules.');
        }
        
        if (requestParameters.ratePlanSchedulesToCreate === null || requestParameters.ratePlanSchedulesToCreate === undefined) {
            throw new runtime.RequiredError('ratePlanSchedulesToCreate','Required parameter requestParameters.ratePlanSchedulesToCreate was null or undefined when calling postRatePlanSchedules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanSchedulesToCreateToJSON(requestParameters.ratePlanSchedulesToCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create Rate Plan pricing schedule. <p><strong>OperationId:</strong>postRatePlanSchedules</p>
     * Create rate plan schedules
     */
    async postRatePlanSchedules(requestParameters: PostRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create rate strategies. <p><strong>OperationId:</strong>postRateStrategy</p>
     * Create rate strategies
     */
    async postRateStrategyRaw(requestParameters: PostRateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRateStrategy.');
        }
        
        if (requestParameters.rateStrategy === null || requestParameters.rateStrategy === undefined) {
            throw new runtime.RequiredError('rateStrategy','Required parameter requestParameters.rateStrategy was null or undefined when calling postRateStrategy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateStrategies`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateStrategyToJSON(requestParameters.rateStrategy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create rate strategies. <p><strong>OperationId:</strong>postRateStrategy</p>
     * Create rate strategies
     */
    async postRateStrategy(requestParameters: PostRateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRateStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create Package Forecast groups template. <p><strong>OperationId:</strong>postTemplatePackageForecastGroups</p>
     * Create Template Package Forecast Groups
     */
    async postTemplatePackageForecastGroupsRaw(requestParameters: PostTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templatePackageForecastGroups === null || requestParameters.templatePackageForecastGroups === undefined) {
            throw new runtime.RequiredError('templatePackageForecastGroups','Required parameter requestParameters.templatePackageForecastGroups was null or undefined when calling postTemplatePackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageForecastGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatePackageForecastGroupsToJSON(requestParameters.templatePackageForecastGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create Package Forecast groups template. <p><strong>OperationId:</strong>postTemplatePackageForecastGroups</p>
     * Create Template Package Forecast Groups
     */
    async postTemplatePackageForecastGroups(requestParameters: PostTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to create Promotion Code template. <p><strong>OperationId:</strong>postTemplatePromotionCode</p>
     * Create Template Promotion Code
     */
    async postTemplatePromotionCodeRaw(requestParameters: PostTemplatePromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
            throw new runtime.RequiredError('promotionCode','Required parameter requestParameters.promotionCode was null or undefined when calling postTemplatePromotionCode.');
        }
        
        if (requestParameters.templatePromotionCode === null || requestParameters.templatePromotionCode === undefined) {
            throw new runtime.RequiredError('templatePromotionCode','Required parameter requestParameters.templatePromotionCode was null or undefined when calling postTemplatePromotionCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatePromotionCodeToJSON(requestParameters.templatePromotionCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to create Promotion Code template. <p><strong>OperationId:</strong>postTemplatePromotionCode</p>
     * Create Template Promotion Code
     */
    async postTemplatePromotionCode(requestParameters: PostTemplatePromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplatePromotionCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update package forecast groups. <p><strong>OperationId:</strong>putHotelPackageForecastGroups</p>
     * Change Hotel Package Forecast Groups
     */
    async putHotelPackageForecastGroupsRaw(requestParameters: PutHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putHotelPackageForecastGroups.');
        }
        
        if (requestParameters.hotelPackageForecastGroupsToChange === null || requestParameters.hotelPackageForecastGroupsToChange === undefined) {
            throw new runtime.RequiredError('hotelPackageForecastGroupsToChange','Required parameter requestParameters.hotelPackageForecastGroupsToChange was null or undefined when calling putHotelPackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageForecastGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelPackageForecastGroupsToChangeToJSON(requestParameters.hotelPackageForecastGroupsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update package forecast groups. <p><strong>OperationId:</strong>putHotelPackageForecastGroups</p>
     * Change Hotel Package Forecast Groups
     */
    async putHotelPackageForecastGroups(requestParameters: PutHotelPackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putHotelPackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates 
     */
    async putNegotiatedRatesRaw(requestParameters: PutNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NegotiatedRatesDetails>> {
        if (requestParameters.rateCode === null || requestParameters.rateCode === undefined) {
            throw new runtime.RequiredError('rateCode','Required parameter requestParameters.rateCode was null or undefined when calling putNegotiatedRates.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putNegotiatedRates.');
        }
        
        if (requestParameters.negotiatedRates === null || requestParameters.negotiatedRates === undefined) {
            throw new runtime.RequiredError('negotiatedRates','Required parameter requestParameters.negotiatedRates was null or undefined when calling putNegotiatedRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/negotiatedRates/{rateCode}`.replace(`{${"rateCode"}}`, encodeURIComponent(String(requestParameters.rateCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NegotiatedRatesToJSON(requestParameters.negotiatedRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NegotiatedRatesDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows you to update negotiated rate for a given profile. <p><strong>OperationId:</strong>putNegotiatedRates</p>
     * Change negotiated rates 
     */
    async putNegotiatedRates(requestParameters: PutNegotiatedRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NegotiatedRatesDetails> {
        const response = await this.putNegotiatedRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update a package. <p><strong>OperationId:</strong>putPackage</p>
     * Change the package
     */
    async putPackageRaw(requestParameters: PutPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageCode === null || requestParameters.packageCode === undefined) {
            throw new runtime.RequiredError('packageCode','Required parameter requestParameters.packageCode was null or undefined when calling putPackage.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putPackage.');
        }
        
        if (requestParameters.packageInfo === null || requestParameters.packageInfo === undefined) {
            throw new runtime.RequiredError('packageInfo','Required parameter requestParameters.packageInfo was null or undefined when calling putPackage.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{packageCode}`.replace(`{${"packageCode"}}`, encodeURIComponent(String(requestParameters.packageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PackageInfoToJSON(requestParameters.packageInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update a package. <p><strong>OperationId:</strong>putPackage</p>
     * Change the package
     */
    async putPackage(requestParameters: PutPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update package formula ranges. <p><strong>OperationId:</strong>putPackageFormulaRanges</p>
     * Change package formula ranges
     */
    async putPackageFormulaRangesRaw(requestParameters: PutPackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageFormulaRangeId === null || requestParameters.packageFormulaRangeId === undefined) {
            throw new runtime.RequiredError('packageFormulaRangeId','Required parameter requestParameters.packageFormulaRangeId was null or undefined when calling putPackageFormulaRanges.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putPackageFormulaRanges.');
        }
        
        if (requestParameters.packageFormulaRanges === null || requestParameters.packageFormulaRanges === undefined) {
            throw new runtime.RequiredError('packageFormulaRanges','Required parameter requestParameters.packageFormulaRanges was null or undefined when calling putPackageFormulaRanges.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageFormulaRanges/{packageFormulaRangeId}`.replace(`{${"packageFormulaRangeId"}}`, encodeURIComponent(String(requestParameters.packageFormulaRangeId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PackageFormulaRangesToJSON(requestParameters.packageFormulaRanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update package formula ranges. <p><strong>OperationId:</strong>putPackageFormulaRanges</p>
     * Change package formula ranges
     */
    async putPackageFormulaRanges(requestParameters: PutPackageFormulaRangesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPackageFormulaRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to change package group. <p><strong>OperationId:</strong>putPackageGroup</p>
     * Change package group
     */
    async putPackageGroupRaw(requestParameters: PutPackageGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putPackageGroup.');
        }
        
        if (requestParameters.packageGroup === null || requestParameters.packageGroup === undefined) {
            throw new runtime.RequiredError('packageGroup','Required parameter requestParameters.packageGroup was null or undefined when calling putPackageGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PackageGroupToJSON(requestParameters.packageGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to change package group. <p><strong>OperationId:</strong>putPackageGroup</p>
     * Change package group
     */
    async putPackageGroup(requestParameters: PutPackageGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPackageGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update promotion codes. <p><strong>OperationId:</strong>putPromotionCode</p>
     * Change promotion codes
     */
    async putPromotionCodeRaw(requestParameters: PutPromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
            throw new runtime.RequiredError('promotionCode','Required parameter requestParameters.promotionCode was null or undefined when calling putPromotionCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putPromotionCode.');
        }
        
        if (requestParameters.propertyPromotionCode === null || requestParameters.propertyPromotionCode === undefined) {
            throw new runtime.RequiredError('propertyPromotionCode','Required parameter requestParameters.propertyPromotionCode was null or undefined when calling putPromotionCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyPromotionCodeToJSON(requestParameters.propertyPromotionCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update promotion codes. <p><strong>OperationId:</strong>putPromotionCode</p>
     * Change promotion codes
     */
    async putPromotionCode(requestParameters: PutPromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPromotionCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update promotion groups. <p><strong>OperationId:</strong>putPromotionGroup</p>
     * Change promotion groups
     */
    async putPromotionGroupRaw(requestParameters: PutPromotionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.groupCode === null || requestParameters.groupCode === undefined) {
            throw new runtime.RequiredError('groupCode','Required parameter requestParameters.groupCode was null or undefined when calling putPromotionGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putPromotionGroup.');
        }
        
        if (requestParameters.promotionGroup === null || requestParameters.promotionGroup === undefined) {
            throw new runtime.RequiredError('promotionGroup','Required parameter requestParameters.promotionGroup was null or undefined when calling putPromotionGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/promotionGroups/{groupCode}`.replace(`{${"groupCode"}}`, encodeURIComponent(String(requestParameters.groupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PromotionGroupToJSON(requestParameters.promotionGroup),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update promotion groups. <p><strong>OperationId:</strong>putPromotionGroup</p>
     * Change promotion groups
     */
    async putPromotionGroup(requestParameters: PutPromotionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPromotionGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>putRateGroups</p>
     * Change rate groups
     */
    async putRateGroupsRaw(requestParameters: PutRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRateGroups.');
        }
        
        if (requestParameters.rateGroups === null || requestParameters.rateGroups === undefined) {
            throw new runtime.RequiredError('rateGroups','Required parameter requestParameters.rateGroups was null or undefined when calling putRateGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RateGroupsToJSON(requestParameters.rateGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update rate groups. <p><strong>OperationId:</strong>putRateGroups</p>
     * Change rate groups
     */
    async putRateGroups(requestParameters: PutRateGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRateGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Rate Plan information such as date range, linked room types, and rate controls for a given hotel. Use the putRatePlanSchedules operation to add or update the rate plan pricing schedule.<p><strong>OperationId:</strong>putRatePlan</p>
     * Change rate plan
     */
    async putRatePlanRaw(requestParameters: PutRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlan.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRatePlan.');
        }
        
        if (requestParameters.ratePlan === null || requestParameters.ratePlan === undefined) {
            throw new runtime.RequiredError('ratePlan','Required parameter requestParameters.ratePlan was null or undefined when calling putRatePlan.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanToJSON(requestParameters.ratePlan),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Rate Plan information such as date range, linked room types, and rate controls for a given hotel. Use the putRatePlanSchedules operation to add or update the rate plan pricing schedule.<p><strong>OperationId:</strong>putRatePlan</p>
     * Change rate plan
     */
    async putRatePlan(requestParameters: PutRatePlanRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRatePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update Rate Plan package. <p><strong>OperationId:</strong>putRatePlanPackages</p>
     * Change rate plan package
     */
    async putRatePlanPackagesRaw(requestParameters: PutRatePlanPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlanPackages.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRatePlanPackages.');
        }
        
        if (requestParameters.ratePlanPackages === null || requestParameters.ratePlanPackages === undefined) {
            throw new runtime.RequiredError('ratePlanPackages','Required parameter requestParameters.ratePlanPackages was null or undefined when calling putRatePlanPackages.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/packages`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanPackagesToJSON(requestParameters.ratePlanPackages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update Rate Plan package. <p><strong>OperationId:</strong>putRatePlanPackages</p>
     * Change rate plan package
     */
    async putRatePlanPackages(requestParameters: PutRatePlanPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRatePlanPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update Rate Plan posting rhythms. <p><strong>OperationId:</strong>putRatePlanPostingRhythms</p>
     * Change rate plan posting rhythms
     */
    async putRatePlanPostingRhythmsRaw(requestParameters: PutRatePlanPostingRhythmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlanPostingRhythms.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRatePlanPostingRhythms.');
        }
        
        if (requestParameters.ratePlanPostingRhythms === null || requestParameters.ratePlanPostingRhythms === undefined) {
            throw new runtime.RequiredError('ratePlanPostingRhythms','Required parameter requestParameters.ratePlanPostingRhythms was null or undefined when calling putRatePlanPostingRhythms.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/postingRhythms`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanPostingRhythmsToJSON(requestParameters.ratePlanPostingRhythms),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update Rate Plan posting rhythms. <p><strong>OperationId:</strong>putRatePlanPostingRhythms</p>
     * Change rate plan posting rhythms
     */
    async putRatePlanPostingRhythms(requestParameters: PutRatePlanPostingRhythmsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRatePlanPostingRhythmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to  update Rate Plan pricing schedules.<p><strong>OperationId:</strong>putRatePlanSchedules</p>
     * Change rate plan schedules
     */
    async putRatePlanSchedulesRaw(requestParameters: PutRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling putRatePlanSchedules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRatePlanSchedules.');
        }
        
        if (requestParameters.ratePlanSchedules === null || requestParameters.ratePlanSchedules === undefined) {
            throw new runtime.RequiredError('ratePlanSchedules','Required parameter requestParameters.ratePlanSchedules was null or undefined when calling putRatePlanSchedules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/schedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanSchedulesToJSON(requestParameters.ratePlanSchedules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to  update Rate Plan pricing schedules.<p><strong>OperationId:</strong>putRatePlanSchedules</p>
     * Change rate plan schedules
     */
    async putRatePlanSchedules(requestParameters: PutRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update rate strategies. <p><strong>OperationId:</strong>putRateStrategy</p>
     * Change rate strategies
     */
    async putRateStrategyRaw(requestParameters: PutRateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.rateStrategyId === null || requestParameters.rateStrategyId === undefined) {
            throw new runtime.RequiredError('rateStrategyId','Required parameter requestParameters.rateStrategyId was null or undefined when calling putRateStrategy.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRateStrategy.');
        }
        
        if (requestParameters.rateStrategy === null || requestParameters.rateStrategy === undefined) {
            throw new runtime.RequiredError('rateStrategy','Required parameter requestParameters.rateStrategy was null or undefined when calling putRateStrategy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateStrategies/{rateStrategyId}`.replace(`{${"rateStrategyId"}}`, encodeURIComponent(String(requestParameters.rateStrategyId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RateStrategyToJSON(requestParameters.rateStrategy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update rate strategies. <p><strong>OperationId:</strong>putRateStrategy</p>
     * Change rate strategies
     */
    async putRateStrategy(requestParameters: PutRateStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRateStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update Package Forecast groups template. <p><strong>OperationId:</strong>putTemplatePackageForecastGroups</p>
     * Change Template Package Forecast Groups
     */
    async putTemplatePackageForecastGroupsRaw(requestParameters: PutTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templatePackageForecastGroups === null || requestParameters.templatePackageForecastGroups === undefined) {
            throw new runtime.RequiredError('templatePackageForecastGroups','Required parameter requestParameters.templatePackageForecastGroups was null or undefined when calling putTemplatePackageForecastGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageForecastGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatePackageForecastGroupsToJSON(requestParameters.templatePackageForecastGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update Package Forecast groups template. <p><strong>OperationId:</strong>putTemplatePackageForecastGroups</p>
     * Change Template Package Forecast Groups
     */
    async putTemplatePackageForecastGroups(requestParameters: PutTemplatePackageForecastGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplatePackageForecastGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update Promotion Code template. <p><strong>OperationId:</strong>putTemplatePromotionCode</p>
     * Change Template Promotion Code
     */
    async putTemplatePromotionCodeRaw(requestParameters: PutTemplatePromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.promotionCode === null || requestParameters.promotionCode === undefined) {
            throw new runtime.RequiredError('promotionCode','Required parameter requestParameters.promotionCode was null or undefined when calling putTemplatePromotionCode.');
        }
        
        if (requestParameters.templatePromotionCode === null || requestParameters.templatePromotionCode === undefined) {
            throw new runtime.RequiredError('templatePromotionCode','Required parameter requestParameters.templatePromotionCode was null or undefined when calling putTemplatePromotionCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/promotionCodes/{promotionCode}`.replace(`{${"promotionCode"}}`, encodeURIComponent(String(requestParameters.promotionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplatePromotionCodeToJSON(requestParameters.templatePromotionCode),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update Promotion Code template. <p><strong>OperationId:</strong>putTemplatePromotionCode</p>
     * Change Template Promotion Code
     */
    async putTemplatePromotionCode(requestParameters: PutTemplatePromotionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplatePromotionCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to set Rate Plan schedule range. <p><strong>OperationId:</strong>setDailyRatePlanScheduleRange</p>
     * Set daily rate plan schedule range
     */
    async setDailyRatePlanScheduleRangeRaw(requestParameters: SetDailyRatePlanScheduleRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ratePlanCode === null || requestParameters.ratePlanCode === undefined) {
            throw new runtime.RequiredError('ratePlanCode','Required parameter requestParameters.ratePlanCode was null or undefined when calling setDailyRatePlanScheduleRange.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling setDailyRatePlanScheduleRange.');
        }
        
        if (requestParameters.dailyRatePlanScheduleRange === null || requestParameters.dailyRatePlanScheduleRange === undefined) {
            throw new runtime.RequiredError('dailyRatePlanScheduleRange','Required parameter requestParameters.dailyRatePlanScheduleRange was null or undefined when calling setDailyRatePlanScheduleRange.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/{ratePlanCode}/dailySchedules`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DailyRatePlanScheduleRangeToJSON(requestParameters.dailyRatePlanScheduleRange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to set Rate Plan schedule range. <p><strong>OperationId:</strong>setDailyRatePlanScheduleRange</p>
     * Set daily rate plan schedule range
     */
    async setDailyRatePlanScheduleRange(requestParameters: SetDailyRatePlanScheduleRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setDailyRatePlanScheduleRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update mass Rate Plan schedules. <p><strong>OperationId:</strong>setMassRatePlanSchedules</p>
     * Set mass rate plan schedules
     */
    async setMassRatePlanSchedulesRaw(requestParameters: SetMassRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling setMassRatePlanSchedules.');
        }
        
        if (requestParameters.massRatePlanSchedules === null || requestParameters.massRatePlanSchedules === undefined) {
            throw new runtime.RequiredError('massRatePlanSchedules','Required parameter requestParameters.massRatePlanSchedules was null or undefined when calling setMassRatePlanSchedules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/massRatePlanSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MassRatePlanSchedulesToJSON(requestParameters.massRatePlanSchedules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update mass Rate Plan schedules. <p><strong>OperationId:</strong>setMassRatePlanSchedules</p>
     * Set mass rate plan schedules
     */
    async setMassRatePlanSchedules(requestParameters: SetMassRatePlanSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setMassRatePlanSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to set rate access exclusions. <p><strong>OperationId:</strong>setRateAccessExclusions</p>
     * Set rate access exclusions
     */
    async setRateAccessExclusionsRaw(requestParameters: SetRateAccessExclusionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling setRateAccessExclusions.');
        }
        
        if (requestParameters.rateAccessExclusions === null || requestParameters.rateAccessExclusions === undefined) {
            throw new runtime.RequiredError('rateAccessExclusions','Required parameter requestParameters.rateAccessExclusions was null or undefined when calling setRateAccessExclusions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rateAccessExclusions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RateAccessExclusionsToJSON(requestParameters.rateAccessExclusions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to set rate access exclusions. <p><strong>OperationId:</strong>setRateAccessExclusions</p>
     * Set rate access exclusions
     */
    async setRateAccessExclusions(requestParameters: SetRateAccessExclusionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setRateAccessExclusionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to set Rate strategies. <p><strong>OperationId:</strong>setRateStrategies</p>
     * Set rate strategies
     */
    async setRateStrategiesRaw(requestParameters: SetRateStrategiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.rateStrategiesToSet === null || requestParameters.rateStrategiesToSet === undefined) {
            throw new runtime.RequiredError('rateStrategiesToSet','Required parameter requestParameters.rateStrategiesToSet was null or undefined when calling setRateStrategies.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/rateStrategies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateStrategiesToSetToJSON(requestParameters.rateStrategiesToSet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to set Rate strategies. <p><strong>OperationId:</strong>setRateStrategies</p>
     * Set rate strategies
     */
    async setRateStrategies(requestParameters: SetRateStrategiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setRateStrategiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to split Rate Plan schedule. <p><strong>OperationId:</strong>splitRatePlanSchedule</p>
     * Split rate plan schedule
     */
    async splitRatePlanScheduleRaw(requestParameters: SplitRatePlanScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling splitRatePlanSchedule.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling splitRatePlanSchedule.');
        }
        
        if (requestParameters.ratePlanScheduleToSplit === null || requestParameters.ratePlanScheduleToSplit === undefined) {
            throw new runtime.RequiredError('ratePlanScheduleToSplit','Required parameter requestParameters.ratePlanScheduleToSplit was null or undefined when calling splitRatePlanSchedule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlanSchedules/{scheduleId}/split`.replace(`{${"scheduleId"}}`, encodeURIComponent(String(requestParameters.scheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanScheduleToSplitToJSON(requestParameters.ratePlanScheduleToSplit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to split Rate Plan schedule. <p><strong>OperationId:</strong>splitRatePlanSchedule</p>
     * Split rate plan schedule
     */
    async splitRatePlanSchedule(requestParameters: SplitRatePlanScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.splitRatePlanScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetBestAvailableRatesDaysOfWeekEnum = {
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday'
} as const;
export type GetBestAvailableRatesDaysOfWeekEnum = typeof GetBestAvailableRatesDaysOfWeekEnum[keyof typeof GetBestAvailableRatesDaysOfWeekEnum];
/**
 * @export
 */
export const GetBestAvailableRatesLengthOfStayEnum = {
    One: 'One',
    Two: 'Two',
    Three: 'Three',
    Four: 'Four',
    Five: 'Five',
    Six: 'Six',
    Seven: 'Seven',
    Eight: 'Eight'
} as const;
export type GetBestAvailableRatesLengthOfStayEnum = typeof GetBestAvailableRatesLengthOfStayEnum[keyof typeof GetBestAvailableRatesLengthOfStayEnum];
/**
 * @export
 */
export const GetNegotiatedRatesFetchInstructionsEnum = {
    Discounts: 'Discounts'
} as const;
export type GetNegotiatedRatesFetchInstructionsEnum = typeof GetNegotiatedRatesFetchInstructionsEnum[keyof typeof GetNegotiatedRatesFetchInstructionsEnum];
/**
 * @export
 */
export const GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = {
    Discounts: 'Discounts'
} as const;
export type GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum = typeof GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum[keyof typeof GetNegotiatedRatesForGivenHotelAndRateFetchInstructionsEnum];
/**
 * @export
 */
export const GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = {
    Discounts: 'Discounts'
} as const;
export type GetNegotiatedRatesForGivenProfileFetchInstructionsEnum = typeof GetNegotiatedRatesForGivenProfileFetchInstructionsEnum[keyof typeof GetNegotiatedRatesForGivenProfileFetchInstructionsEnum];
/**
 * @export
 */
export const GetPackageFetchInstructionsEnum = {
    Header: 'Header',
    PostingRules: 'PostingRules',
    CalculatedPrice: 'CalculatedPrice',
    Items: 'Items',
    Details: 'Details',
    UsageDetails: 'UsageDetails'
} as const;
export type GetPackageFetchInstructionsEnum = typeof GetPackageFetchInstructionsEnum[keyof typeof GetPackageFetchInstructionsEnum];
/**
 * @export
 */
export const GetPackagesFetchInstructionsEnum = {
    Header: 'Header',
    PostingRules: 'PostingRules',
    CalculatedPrice: 'CalculatedPrice',
    Items: 'Items',
    Details: 'Details',
    UsageDetails: 'UsageDetails'
} as const;
export type GetPackagesFetchInstructionsEnum = typeof GetPackagesFetchInstructionsEnum[keyof typeof GetPackagesFetchInstructionsEnum];
/**
 * @export
 */
export const GetRateActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
} as const;
export type GetRateActivityLogModuleEnum = typeof GetRateActivityLogModuleEnum[keyof typeof GetRateActivityLogModuleEnum];
/**
 * @export
 */
export const GetRatePlanFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    TransactionDetails: 'TransactionDetails',
    Packages: 'Packages',
    RateCommission: 'RateCommission',
    NegotiatedProfiles: 'NegotiatedProfiles',
    RateControls: 'RateControls',
    RoutingInstructions: 'RoutingInstructions',
    AccessExclusions: 'AccessExclusions',
    ApprovalNotes: 'ApprovalNotes'
} as const;
export type GetRatePlanFetchInstructionsEnum = typeof GetRatePlanFetchInstructionsEnum[keyof typeof GetRatePlanFetchInstructionsEnum];
/**
 * @export
 */
export const GetRatePlansOrderTypeEnum = {
    Asc: 'Asc',
    Desc: 'Desc'
} as const;
export type GetRatePlansOrderTypeEnum = typeof GetRatePlansOrderTypeEnum[keyof typeof GetRatePlansOrderTypeEnum];
/**
 * @export
 */
export const GetRatePlansApprovalStatusEnum = {
    NewUnapproved: 'NewUnapproved',
    ChangedUnapproved: 'ChangedUnapproved',
    Rejected: 'Rejected',
    Approved: 'Approved'
} as const;
export type GetRatePlansApprovalStatusEnum = typeof GetRatePlansApprovalStatusEnum[keyof typeof GetRatePlansApprovalStatusEnum];
/**
 * @export
 */
export const GetRatePlansByHotelFetchInstructionsEnum = {
    PrimaryDetails: 'PrimaryDetails',
    TransactionDetails: 'TransactionDetails',
    Packages: 'Packages',
    RateCommission: 'RateCommission',
    NegotiatedProfiles: 'NegotiatedProfiles',
    RateControls: 'RateControls',
    RoutingInstructions: 'RoutingInstructions',
    AccessExclusions: 'AccessExclusions',
    ApprovalNotes: 'ApprovalNotes'
} as const;
export type GetRatePlansByHotelFetchInstructionsEnum = typeof GetRatePlansByHotelFetchInstructionsEnum[keyof typeof GetRatePlansByHotelFetchInstructionsEnum];
