/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomFeatureType } from './RoomFeatureType';
import {
    RoomFeatureTypeFromJSON,
    RoomFeatureTypeFromJSONTyped,
    RoomFeatureTypeToJSON,
} from './RoomFeatureType';
import type { RoomTypeComponentType } from './RoomTypeComponentType';
import {
    RoomTypeComponentTypeFromJSON,
    RoomTypeComponentTypeFromJSONTyped,
    RoomTypeComponentTypeToJSON,
} from './RoomTypeComponentType';
import type { RoomTypeTypeSuite } from './RoomTypeTypeSuite';
import {
    RoomTypeTypeSuiteFromJSON,
    RoomTypeTypeSuiteFromJSONTyped,
    RoomTypeTypeSuiteToJSON,
} from './RoomTypeTypeSuite';
import type { RoomTypeYieldableType } from './RoomTypeYieldableType';
import {
    RoomTypeYieldableTypeFromJSON,
    RoomTypeYieldableTypeFromJSONTyped,
    RoomTypeYieldableTypeToJSON,
} from './RoomTypeYieldableType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * This type represents the room type attributes.
 * @export
 * @interface RoomTypeType
 */
export interface RoomTypeType {
    /**
     * Indicates if room type is accessible.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    accessible?: boolean;
    /**
     * Active date of the room type.
     * @type {string}
     * @memberof RoomTypeType
     */
    activeDate?: string;
    /**
     * Creates a new linked Reservation, and proceeds within check-in of the new reservation.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    autoCheckin?: boolean;
    /**
     * Room type is automatically attached when new rate codes are created.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    autoPopulate?: boolean;
    /**
     * Room number is automatically assigned when a reservation is made for this Room Type.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    autoRoomAssign?: boolean;
    /**
     * Bed type of room type.
     * @type {string}
     * @memberof RoomTypeType
     */
    bedType?: string;
    /**
     * Contains room components of a component room type.
     * @type {Array<RoomTypeComponentType>}
     * @memberof RoomTypeType
     */
    components?: Array<RoomTypeComponentType>;
    /**
     * Default occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeType
     */
    defaultOccupancy?: number;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof RoomTypeType
     */
    description?: TranslationTextType2000;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof RoomTypeType
     */
    features?: Array<RoomFeatureType>;
    /**
     * Indicates room type is generic.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    generic?: boolean;
    /**
     * Room type shows in house keeping.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    houseKeeping?: boolean;
    /**
     * Is Room type inactive?
     * @type {boolean}
     * @memberof RoomTypeType
     */
    inactive?: boolean;
    /**
     * Room type info URL.
     * @type {string}
     * @memberof RoomTypeType
     */
    infoURL?: string;
    /**
     * Indicates room type is available for maintenance request.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    maintenance?: boolean;
    /**
     * Maximum Adults for the room type.
     * @type {number}
     * @memberof RoomTypeType
     */
    maxAdults?: number;
    /**
     * Maximum Children for the room type.
     * @type {number}
     * @memberof RoomTypeType
     */
    maxChildren?: number;
    /**
     * Maximum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeType
     */
    maximumOccupancy?: number;
    /**
     * Indicates room type is meeting room. This Can be Meeting room flag cannot be unmarked at the property level. Can only be marked for non pseudo room types.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    meetingRoom?: boolean;
    /**
     * Minimum occupancy for the room type.
     * @type {number}
     * @memberof RoomTypeType
     */
    minimumOccupancy?: number;
    /**
     * New Room type code. (Used in change template room type operation)
     * @type {string}
     * @memberof RoomTypeType
     */
    newRoomType?: string;
    /**
     * Number of rooms for this room type.
     * @type {number}
     * @memberof RoomTypeType
     */
    numberOfRooms?: number;
    /**
     * Indicates if room type is pseudo.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    pseudo?: boolean;
    /**
     * This value will control the minimum amount that the selected room type can be sold
     * @type {number}
     * @memberof RoomTypeType
     */
    rateFloor?: number;
    /**
     * Room class for the room type code.
     * @type {string}
     * @memberof RoomTypeType
     */
    roomClass?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomTypeType
     */
    roomType?: string;
    /**
     * Indicates room types sell sequence.
     * @type {number}
     * @memberof RoomTypeType
     */
    sellSequence?: number;
    /**
     * Indicates room type is sent to interface.
     * @type {boolean}
     * @memberof RoomTypeType
     */
    sendToInterface?: boolean;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof RoomTypeType
     */
    shortDescription?: TranslationTextType2000;
    /**
     * Specifies the smoking preference for this room type. I.E. SM, NS.
     * @type {string}
     * @memberof RoomTypeType
     */
    smokingPreference?: string;
    /**
     * 
     * @type {RoomTypeTypeSuite}
     * @memberof RoomTypeType
     */
    suite?: RoomTypeTypeSuite;
    /**
     * Yield category for this room type (Available when a yield integration add-on license is active and when room type is Yieldable.)
     * @type {string}
     * @memberof RoomTypeType
     */
    yieldCategory?: string;
    /**
     * 
     * @type {RoomTypeYieldableType}
     * @memberof RoomTypeType
     */
    yieldStatus?: RoomTypeYieldableType;
}

/**
 * Check if a given object implements the RoomTypeType interface.
 */
export function instanceOfRoomTypeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomTypeTypeFromJSON(json: any): RoomTypeType {
    return RoomTypeTypeFromJSONTyped(json, false);
}

export function RoomTypeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomTypeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessible': !exists(json, 'accessible') ? undefined : json['accessible'],
        'activeDate': !exists(json, 'activeDate') ? undefined : json['activeDate'],
        'autoCheckin': !exists(json, 'autoCheckin') ? undefined : json['autoCheckin'],
        'autoPopulate': !exists(json, 'autoPopulate') ? undefined : json['autoPopulate'],
        'autoRoomAssign': !exists(json, 'autoRoomAssign') ? undefined : json['autoRoomAssign'],
        'bedType': !exists(json, 'bedType') ? undefined : json['bedType'],
        'components': !exists(json, 'components') ? undefined : ((json['components'] as Array<any>).map(RoomTypeComponentTypeFromJSON)),
        'defaultOccupancy': !exists(json, 'defaultOccupancy') ? undefined : json['defaultOccupancy'],
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'features': !exists(json, 'features') ? undefined : ((json['features'] as Array<any>).map(RoomFeatureTypeFromJSON)),
        'generic': !exists(json, 'generic') ? undefined : json['generic'],
        'houseKeeping': !exists(json, 'houseKeeping') ? undefined : json['houseKeeping'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'infoURL': !exists(json, 'infoURL') ? undefined : json['infoURL'],
        'maintenance': !exists(json, 'maintenance') ? undefined : json['maintenance'],
        'maxAdults': !exists(json, 'maxAdults') ? undefined : json['maxAdults'],
        'maxChildren': !exists(json, 'maxChildren') ? undefined : json['maxChildren'],
        'maximumOccupancy': !exists(json, 'maximumOccupancy') ? undefined : json['maximumOccupancy'],
        'meetingRoom': !exists(json, 'meetingRoom') ? undefined : json['meetingRoom'],
        'minimumOccupancy': !exists(json, 'minimumOccupancy') ? undefined : json['minimumOccupancy'],
        'newRoomType': !exists(json, 'newRoomType') ? undefined : json['newRoomType'],
        'numberOfRooms': !exists(json, 'numberOfRooms') ? undefined : json['numberOfRooms'],
        'pseudo': !exists(json, 'pseudo') ? undefined : json['pseudo'],
        'rateFloor': !exists(json, 'rateFloor') ? undefined : json['rateFloor'],
        'roomClass': !exists(json, 'roomClass') ? undefined : json['roomClass'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'sellSequence': !exists(json, 'sellSequence') ? undefined : json['sellSequence'],
        'sendToInterface': !exists(json, 'sendToInterface') ? undefined : json['sendToInterface'],
        'shortDescription': !exists(json, 'shortDescription') ? undefined : TranslationTextType2000FromJSON(json['shortDescription']),
        'smokingPreference': !exists(json, 'smokingPreference') ? undefined : json['smokingPreference'],
        'suite': !exists(json, 'suite') ? undefined : RoomTypeTypeSuiteFromJSON(json['suite']),
        'yieldCategory': !exists(json, 'yieldCategory') ? undefined : json['yieldCategory'],
        'yieldStatus': !exists(json, 'yieldStatus') ? undefined : RoomTypeYieldableTypeFromJSON(json['yieldStatus']),
    };
}

export function RoomTypeTypeToJSON(value?: RoomTypeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessible': value.accessible,
        'activeDate': value.activeDate,
        'autoCheckin': value.autoCheckin,
        'autoPopulate': value.autoPopulate,
        'autoRoomAssign': value.autoRoomAssign,
        'bedType': value.bedType,
        'components': value.components === undefined ? undefined : ((value.components as Array<any>).map(RoomTypeComponentTypeToJSON)),
        'defaultOccupancy': value.defaultOccupancy,
        'description': TranslationTextType2000ToJSON(value.description),
        'features': value.features === undefined ? undefined : ((value.features as Array<any>).map(RoomFeatureTypeToJSON)),
        'generic': value.generic,
        'houseKeeping': value.houseKeeping,
        'inactive': value.inactive,
        'infoURL': value.infoURL,
        'maintenance': value.maintenance,
        'maxAdults': value.maxAdults,
        'maxChildren': value.maxChildren,
        'maximumOccupancy': value.maximumOccupancy,
        'meetingRoom': value.meetingRoom,
        'minimumOccupancy': value.minimumOccupancy,
        'newRoomType': value.newRoomType,
        'numberOfRooms': value.numberOfRooms,
        'pseudo': value.pseudo,
        'rateFloor': value.rateFloor,
        'roomClass': value.roomClass,
        'roomType': value.roomType,
        'sellSequence': value.sellSequence,
        'sendToInterface': value.sendToInterface,
        'shortDescription': TranslationTextType2000ToJSON(value.shortDescription),
        'smokingPreference': value.smokingPreference,
        'suite': RoomTypeTypeSuiteToJSON(value.suite),
        'yieldCategory': value.yieldCategory,
        'yieldStatus': RoomTypeYieldableTypeToJSON(value.yieldStatus),
    };
}

