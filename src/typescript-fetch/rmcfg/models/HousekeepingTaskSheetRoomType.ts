/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HousekeepingCreditsType } from './HousekeepingCreditsType';
import {
    HousekeepingCreditsTypeFromJSON,
    HousekeepingCreditsTypeFromJSONTyped,
    HousekeepingCreditsTypeToJSON,
} from './HousekeepingCreditsType';
import type { HousekeepingTaskSheetRoomTypeRuleCredit } from './HousekeepingTaskSheetRoomTypeRuleCredit';
import {
    HousekeepingTaskSheetRoomTypeRuleCreditFromJSON,
    HousekeepingTaskSheetRoomTypeRuleCreditFromJSONTyped,
    HousekeepingTaskSheetRoomTypeRuleCreditToJSON,
} from './HousekeepingTaskSheetRoomTypeRuleCredit';

/**
 * Details used for storing information about a housekeeping room
 * @export
 * @interface HousekeepingTaskSheetRoomType
 */
export interface HousekeepingTaskSheetRoomType {
    /**
     * Specifies the hotel code of the housekeeping room
     * @type {string}
     * @memberof HousekeepingTaskSheetRoomType
     */
    hotelId?: string;
    /**
     * Specifies the housekeeping room code
     * @type {string}
     * @memberof HousekeepingTaskSheetRoomType
     */
    room?: string;
    /**
     * Specifies the housekeeping room type
     * @type {string}
     * @memberof HousekeepingTaskSheetRoomType
     */
    roomType?: string;
    /**
     * Specifies the building to which the housekeeping room is mapped to. This element will be used only if the BUILDINGS parameter is active.
     * @type {string}
     * @memberof HousekeepingTaskSheetRoomType
     */
    building?: string;
    /**
     * Specifies the floor to which the housekeeping room is mapped to
     * @type {string}
     * @memberof HousekeepingTaskSheetRoomType
     */
    floor?: string;
    /**
     * Specifies the day section code. This element will be used only if the HOUSEKEEPING_SECTIONS parameter is active.
     * @type {string}
     * @memberof HousekeepingTaskSheetRoomType
     */
    daySectionCode?: string;
    /**
     * Specifies the evening section code. This element will be used only if the HOUSEKEEPING_SECTIONS parameter is active.
     * @type {string}
     * @memberof HousekeepingTaskSheetRoomType
     */
    eveningSectionCode?: string;
    /**
     * 
     * @type {HousekeepingTaskSheetRoomTypeRuleCredit}
     * @memberof HousekeepingTaskSheetRoomType
     */
    ruleCredit?: HousekeepingTaskSheetRoomTypeRuleCredit;
    /**
     * This element will be used only if the value of HOUSEKEEPING_CREDITS setting is set to ROOM. Room credits can be defined for Stayover, Turndown, Departure and Pickup. For Turndown Credits to be used, the TURNDOWN parameter should be active and HOUSEKEEPING_CREDITS setting should be set to a value other than NONE. For Pickup Credits to be used, the PICKUP_STATUS parameter should be active.
     * @type {Array<HousekeepingCreditsType>}
     * @memberof HousekeepingTaskSheetRoomType
     */
    roomCredit?: Array<HousekeepingCreditsType>;
    /**
     * Specifies the sorting sequence number for the housekeeping room
     * @type {number}
     * @memberof HousekeepingTaskSheetRoomType
     */
    sequence?: number;
}

/**
 * Check if a given object implements the HousekeepingTaskSheetRoomType interface.
 */
export function instanceOfHousekeepingTaskSheetRoomType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HousekeepingTaskSheetRoomTypeFromJSON(json: any): HousekeepingTaskSheetRoomType {
    return HousekeepingTaskSheetRoomTypeFromJSONTyped(json, false);
}

export function HousekeepingTaskSheetRoomTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HousekeepingTaskSheetRoomType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'room': !exists(json, 'room') ? undefined : json['room'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'building': !exists(json, 'building') ? undefined : json['building'],
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'daySectionCode': !exists(json, 'daySectionCode') ? undefined : json['daySectionCode'],
        'eveningSectionCode': !exists(json, 'eveningSectionCode') ? undefined : json['eveningSectionCode'],
        'ruleCredit': !exists(json, 'ruleCredit') ? undefined : HousekeepingTaskSheetRoomTypeRuleCreditFromJSON(json['ruleCredit']),
        'roomCredit': !exists(json, 'roomCredit') ? undefined : ((json['roomCredit'] as Array<any>).map(HousekeepingCreditsTypeFromJSON)),
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function HousekeepingTaskSheetRoomTypeToJSON(value?: HousekeepingTaskSheetRoomType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'room': value.room,
        'roomType': value.roomType,
        'building': value.building,
        'floor': value.floor,
        'daySectionCode': value.daySectionCode,
        'eveningSectionCode': value.eveningSectionCode,
        'ruleCredit': HousekeepingTaskSheetRoomTypeRuleCreditToJSON(value.ruleCredit),
        'roomCredit': value.roomCredit === undefined ? undefined : ((value.roomCredit as Array<any>).map(HousekeepingCreditsTypeToJSON)),
        'sequence': value.sequence,
    };
}

