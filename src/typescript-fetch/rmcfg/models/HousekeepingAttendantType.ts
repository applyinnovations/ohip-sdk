/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DaysOfWeekAttrType } from './DaysOfWeekAttrType';
import {
    DaysOfWeekAttrTypeFromJSON,
    DaysOfWeekAttrTypeFromJSONTyped,
    DaysOfWeekAttrTypeToJSON,
} from './DaysOfWeekAttrType';

/**
 * Housekeeping Attendant Information.
 * @export
 * @interface HousekeepingAttendantType
 */
export interface HousekeepingAttendantType {
    /**
     * Application User ID assigned for the attendant.
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    appUser?: string;
    /**
     * An attendant ID.
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    attendantId?: string;
    /**
     * Floor where the attendant is assigned.
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    floor?: string;
    /**
     * Resort Code
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    hotelId?: string;
    /**
     * Indicates whether the attendant is active or not.
     * @type {boolean}
     * @memberof HousekeepingAttendantType
     */
    inactive?: boolean;
    /**
     * Job which the attendant is assigned.
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    job?: string;
    /**
     * An attendant ID.
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    name?: string;
    /**
     * An attendant's phone No.
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    phoneNo?: string;
    /**
     * Section where the attendant is assigned.
     * @type {string}
     * @memberof HousekeepingAttendantType
     */
    section?: string;
    /**
     * 
     * @type {DaysOfWeekAttrType}
     * @memberof HousekeepingAttendantType
     */
    workingDays?: DaysOfWeekAttrType;
}

/**
 * Check if a given object implements the HousekeepingAttendantType interface.
 */
export function instanceOfHousekeepingAttendantType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HousekeepingAttendantTypeFromJSON(json: any): HousekeepingAttendantType {
    return HousekeepingAttendantTypeFromJSONTyped(json, false);
}

export function HousekeepingAttendantTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HousekeepingAttendantType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appUser': !exists(json, 'appUser') ? undefined : json['appUser'],
        'attendantId': !exists(json, 'attendantId') ? undefined : json['attendantId'],
        'floor': !exists(json, 'floor') ? undefined : json['floor'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'job': !exists(json, 'job') ? undefined : json['job'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'phoneNo': !exists(json, 'phoneNo') ? undefined : json['phoneNo'],
        'section': !exists(json, 'section') ? undefined : json['section'],
        'workingDays': !exists(json, 'workingDays') ? undefined : DaysOfWeekAttrTypeFromJSON(json['workingDays']),
    };
}

export function HousekeepingAttendantTypeToJSON(value?: HousekeepingAttendantType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appUser': value.appUser,
        'attendantId': value.attendantId,
        'floor': value.floor,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'job': value.job,
        'name': value.name,
        'phoneNo': value.phoneNo,
        'section': value.section,
        'workingDays': DaysOfWeekAttrTypeToJSON(value.workingDays),
    };
}

