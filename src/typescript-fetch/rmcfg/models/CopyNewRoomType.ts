/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HousekeepingCreditsType } from './HousekeepingCreditsType';
import {
    HousekeepingCreditsTypeFromJSON,
    HousekeepingCreditsTypeFromJSONTyped,
    HousekeepingCreditsTypeToJSON,
} from './HousekeepingCreditsType';
import type { RoomFeatureType } from './RoomFeatureType';
import {
    RoomFeatureTypeFromJSON,
    RoomFeatureTypeFromJSONTyped,
    RoomFeatureTypeToJSON,
} from './RoomFeatureType';
import type { RoomSectionType } from './RoomSectionType';
import {
    RoomSectionTypeFromJSON,
    RoomSectionTypeFromJSONTyped,
    RoomSectionTypeToJSON,
} from './RoomSectionType';

/**
 * Room details that may differ from the base existing room. If any of Floor, RoomFeatures, HousekeepingCredits and RoomSection types is not passed together with this type, it means that it is expected to be empty for the new room; otherwise, they will have the value of the base existing room. Connecting rooms attached to the base existing room will not be created for the new room.
 * @export
 * @interface CopyNewRoomType
 */
export interface CopyNewRoomType {
    /**
     * 
     * @type {Array<string>}
     * @memberof CopyNewRoomType
     */
    floors?: Array<string>;
    /**
     * A recurring element that identifies the room features.
     * @type {Array<RoomFeatureType>}
     * @memberof CopyNewRoomType
     */
    roomFeatures?: Array<RoomFeatureType>;
    /**
     * Housekeeping credits of the room. This may include stayover, departure, pickup and turndown credits.
     * @type {Array<HousekeepingCreditsType>}
     * @memberof CopyNewRoomType
     */
    housekeepingCredits?: Array<HousekeepingCreditsType>;
    /**
     * 
     * @type {RoomSectionType}
     * @memberof CopyNewRoomType
     */
    roomSection?: RoomSectionType;
    /**
     * Room number of the new room to be created.
     * @type {string}
     * @memberof CopyNewRoomType
     */
    roomId?: string;
}

/**
 * Check if a given object implements the CopyNewRoomType interface.
 */
export function instanceOfCopyNewRoomType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyNewRoomTypeFromJSON(json: any): CopyNewRoomType {
    return CopyNewRoomTypeFromJSONTyped(json, false);
}

export function CopyNewRoomTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyNewRoomType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'floors': !exists(json, 'floors') ? undefined : json['floors'],
        'roomFeatures': !exists(json, 'roomFeatures') ? undefined : ((json['roomFeatures'] as Array<any>).map(RoomFeatureTypeFromJSON)),
        'housekeepingCredits': !exists(json, 'housekeepingCredits') ? undefined : ((json['housekeepingCredits'] as Array<any>).map(HousekeepingCreditsTypeFromJSON)),
        'roomSection': !exists(json, 'roomSection') ? undefined : RoomSectionTypeFromJSON(json['roomSection']),
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
    };
}

export function CopyNewRoomTypeToJSON(value?: CopyNewRoomType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'floors': value.floors,
        'roomFeatures': value.roomFeatures === undefined ? undefined : ((value.roomFeatures as Array<any>).map(RoomFeatureTypeToJSON)),
        'housekeepingCredits': value.housekeepingCredits === undefined ? undefined : ((value.housekeepingCredits as Array<any>).map(HousekeepingCreditsTypeToJSON)),
        'roomSection': RoomSectionTypeToJSON(value.roomSection),
        'roomId': value.roomId,
    };
}

