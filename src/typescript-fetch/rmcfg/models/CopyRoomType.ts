/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CopyNewRoomsType } from './CopyNewRoomsType';
import {
    CopyNewRoomsTypeFromJSON,
    CopyNewRoomsTypeFromJSONTyped,
    CopyNewRoomsTypeToJSON,
} from './CopyNewRoomsType';

/**
 * Primary details of room to be copied and collection of rooms to be created from it.
 * @export
 * @interface CopyRoomType
 */
export interface CopyRoomType {
    /**
     * Hotel code of an existing room that will serve as the basis for the new rooms.
     * @type {object}
     * @memberof CopyRoomType
     */
    hotelId?: object;
    /**
     * 
     * @type {CopyNewRoomsType}
     * @memberof CopyRoomType
     */
    newRooms?: CopyNewRoomsType;
    /**
     * Room number of an existing room that will serve as the basis for the new rooms.
     * @type {object}
     * @memberof CopyRoomType
     */
    roomId?: object;
}

/**
 * Check if a given object implements the CopyRoomType interface.
 */
export function instanceOfCopyRoomType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyRoomTypeFromJSON(json: any): CopyRoomType {
    return CopyRoomTypeFromJSONTyped(json, false);
}

export function CopyRoomTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyRoomType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'newRooms': !exists(json, 'newRooms') ? undefined : CopyNewRoomsTypeFromJSON(json['newRooms']),
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
    };
}

export function CopyRoomTypeToJSON(value?: CopyRoomType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'newRooms': CopyNewRoomsTypeToJSON(value.newRooms),
        'roomId': value.roomId,
    };
}

