/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RoomTypeInfoType } from './RoomTypeInfoType';
import {
    RoomTypeInfoTypeFromJSON,
    RoomTypeInfoTypeFromJSONTyped,
    RoomTypeInfoTypeToJSON,
} from './RoomTypeInfoType';

/**
 * The RoomType element is used to contain all the room type information for a single room type.
 * @export
 * @interface RoomTypeMasterInfoType
 */
export interface RoomTypeMasterInfoType {
    /**
     * Room type information
     * @type {Array<RoomTypeInfoType>}
     * @memberof RoomTypeMasterInfoType
     */
    roomType?: Array<RoomTypeInfoType>;
    /**
     * 
     * @type {string}
     * @memberof RoomTypeMasterInfoType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the RoomTypeMasterInfoType interface.
 */
export function instanceOfRoomTypeMasterInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomTypeMasterInfoTypeFromJSON(json: any): RoomTypeMasterInfoType {
    return RoomTypeMasterInfoTypeFromJSONTyped(json, false);
}

export function RoomTypeMasterInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomTypeMasterInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomType': !exists(json, 'roomType') ? undefined : ((json['roomType'] as Array<any>).map(RoomTypeInfoTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function RoomTypeMasterInfoTypeToJSON(value?: RoomTypeMasterInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomType': value.roomType === undefined ? undefined : ((value.roomType as Array<any>).map(RoomTypeInfoTypeToJSON)),
        'hotelId': value.hotelId,
    };
}

