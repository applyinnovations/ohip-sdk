/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HousekeepingRoomStatusType } from './HousekeepingRoomStatusType';
import {
    HousekeepingRoomStatusTypeFromJSON,
    HousekeepingRoomStatusTypeFromJSONTyped,
    HousekeepingRoomStatusTypeToJSON,
} from './HousekeepingRoomStatusType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * The request element used to create a vacant room statuses.
 * @export
 * @interface VacantRoomStatusDetails
 */
export interface VacantRoomStatusDetails {
    /**
     * Room Type of the room.
     * @type {Array<string>}
     * @memberof VacantRoomStatusDetails
     */
    roomTypes?: Array<string>;
    /**
     * The starting value of the date range. By default this would be the current business date.
     * @type {string}
     * @memberof VacantRoomStatusDetails
     */
    beginDate?: string;
    /**
     * The ending value of the date range. The time span between the endDate and the beginDate must not exceed two years.
     * @type {string}
     * @memberof VacantRoomStatusDetails
     */
    endDate?: string;
    /**
     * Number of days to change room status of those rooms that are vacant from X number of days.
     * @type {number}
     * @memberof VacantRoomStatusDetails
     */
    numberOfDays?: number;
    /**
     * 
     * @type {HousekeepingRoomStatusType}
     * @memberof VacantRoomStatusDetails
     */
    houseKeepingRoomStatus?: HousekeepingRoomStatusType;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof VacantRoomStatusDetails
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof VacantRoomStatusDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the VacantRoomStatusDetails interface.
 */
export function instanceOfVacantRoomStatusDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VacantRoomStatusDetailsFromJSON(json: any): VacantRoomStatusDetails {
    return VacantRoomStatusDetailsFromJSONTyped(json, false);
}

export function VacantRoomStatusDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): VacantRoomStatusDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomTypes': !exists(json, 'roomTypes') ? undefined : json['roomTypes'],
        'beginDate': !exists(json, 'beginDate') ? undefined : json['beginDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'numberOfDays': !exists(json, 'numberOfDays') ? undefined : json['numberOfDays'],
        'houseKeepingRoomStatus': !exists(json, 'houseKeepingRoomStatus') ? undefined : HousekeepingRoomStatusTypeFromJSON(json['houseKeepingRoomStatus']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function VacantRoomStatusDetailsToJSON(value?: VacantRoomStatusDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomTypes': value.roomTypes,
        'beginDate': value.beginDate,
        'endDate': value.endDate,
        'numberOfDays': value.numberOfDays,
        'houseKeepingRoomStatus': HousekeepingRoomStatusTypeToJSON(value.houseKeepingRoomStatus),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

