/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Room Configuration API
 * APIs to cater for room configuration, such as configuring room types, room Classes, creating new room features, or updating housekeeping room maintenance reasons.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { TemplateRoomMaintenanceReasonsType } from './TemplateRoomMaintenanceReasonsType';
import {
    TemplateRoomMaintenanceReasonsTypeFromJSON,
    TemplateRoomMaintenanceReasonsTypeFromJSONTyped,
    TemplateRoomMaintenanceReasonsTypeToJSON,
} from './TemplateRoomMaintenanceReasonsType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface ChangeTemplateRoomMaintenanceReasonsRequest
 */
export interface ChangeTemplateRoomMaintenanceReasonsRequest {
    /**
     * 
     * @type {Links}
     * @memberof ChangeTemplateRoomMaintenanceReasonsRequest
     */
    links?: Links;
    /**
     * 
     * @type {TemplateRoomMaintenanceReasonsType}
     * @memberof ChangeTemplateRoomMaintenanceReasonsRequest
     */
    templateRoomMaintenanceReasons?: TemplateRoomMaintenanceReasonsType;
    /**
     * 
     * @type {WarningsType}
     * @memberof ChangeTemplateRoomMaintenanceReasonsRequest
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the ChangeTemplateRoomMaintenanceReasonsRequest interface.
 */
export function instanceOfChangeTemplateRoomMaintenanceReasonsRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChangeTemplateRoomMaintenanceReasonsRequestFromJSON(json: any): ChangeTemplateRoomMaintenanceReasonsRequest {
    return ChangeTemplateRoomMaintenanceReasonsRequestFromJSONTyped(json, false);
}

export function ChangeTemplateRoomMaintenanceReasonsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChangeTemplateRoomMaintenanceReasonsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'templateRoomMaintenanceReasons': !exists(json, 'templateRoomMaintenanceReasons') ? undefined : TemplateRoomMaintenanceReasonsTypeFromJSON(json['templateRoomMaintenanceReasons']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function ChangeTemplateRoomMaintenanceReasonsRequestToJSON(value?: ChangeTemplateRoomMaintenanceReasonsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'templateRoomMaintenanceReasons': TemplateRoomMaintenanceReasonsTypeToJSON(value.templateRoomMaintenanceReasons),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

