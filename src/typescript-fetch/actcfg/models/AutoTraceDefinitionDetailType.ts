/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity Management API
 * APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AutoTraceBlockCategoryType } from './AutoTraceBlockCategoryType';
import {
    AutoTraceBlockCategoryTypeFromJSON,
    AutoTraceBlockCategoryTypeFromJSONTyped,
    AutoTraceBlockCategoryTypeToJSON,
} from './AutoTraceBlockCategoryType';
import type { AutoTraceGroupConfigType } from './AutoTraceGroupConfigType';
import {
    AutoTraceGroupConfigTypeFromJSON,
    AutoTraceGroupConfigTypeFromJSONTyped,
    AutoTraceGroupConfigTypeToJSON,
} from './AutoTraceGroupConfigType';
import type { AutoTraceId } from './AutoTraceId';
import {
    AutoTraceIdFromJSON,
    AutoTraceIdFromJSONTyped,
    AutoTraceIdToJSON,
} from './AutoTraceId';
import type { AutoTraceTriggerCategoryType } from './AutoTraceTriggerCategoryType';
import {
    AutoTraceTriggerCategoryTypeFromJSON,
    AutoTraceTriggerCategoryTypeFromJSONTyped,
    AutoTraceTriggerCategoryTypeToJSON,
} from './AutoTraceTriggerCategoryType';
import type { ConditionGroupType } from './ConditionGroupType';
import {
    ConditionGroupTypeFromJSON,
    ConditionGroupTypeFromJSONTyped,
    ConditionGroupTypeToJSON,
} from './ConditionGroupType';

/**
 * Auto Trace Definition detail information.
 * @export
 * @interface AutoTraceDefinitionDetailType
 */
export interface AutoTraceDefinitionDetailType {
    /**
     * 
     * @type {AutoTraceId}
     * @memberof AutoTraceDefinitionDetailType
     */
    autoTraceId?: AutoTraceId;
    /**
     * The hotel code where the Auto Trace should be created.
     * @type {string}
     * @memberof AutoTraceDefinitionDetailType
     */
    hotelId?: string;
    /**
     * Trace code
     * @type {string}
     * @memberof AutoTraceDefinitionDetailType
     */
    traceCode?: string;
    /**
     * 
     * @type {AutoTraceGroupConfigType}
     * @memberof AutoTraceDefinitionDetailType
     */
    traceGroup?: AutoTraceGroupConfigType;
    /**
     * 
     * @type {AutoTraceBlockCategoryType}
     * @memberof AutoTraceDefinitionDetailType
     */
    autoTraceBlockCategory?: AutoTraceBlockCategoryType;
    /**
     * 
     * @type {AutoTraceTriggerCategoryType}
     * @memberof AutoTraceDefinitionDetailType
     */
    autoTraceTrigger?: AutoTraceTriggerCategoryType;
    /**
     * Element to hold column name of relavant table on selection of Update in AutoTraceTriggerCategoryType.
     * @type {string}
     * @memberof AutoTraceDefinitionDetailType
     */
    fieldNameOnUpdate?: string;
    /**
     * Element to hold column ID of relavant table on selection of Update in AutoTraceTriggerCategoryType.
     * @type {string}
     * @memberof AutoTraceDefinitionDetailType
     */
    fieldNameOnUpdateId?: string;
    /**
     * 
     * @type {ConditionGroupType}
     * @memberof AutoTraceDefinitionDetailType
     */
    conditions?: ConditionGroupType;
}

/**
 * Check if a given object implements the AutoTraceDefinitionDetailType interface.
 */
export function instanceOfAutoTraceDefinitionDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutoTraceDefinitionDetailTypeFromJSON(json: any): AutoTraceDefinitionDetailType {
    return AutoTraceDefinitionDetailTypeFromJSONTyped(json, false);
}

export function AutoTraceDefinitionDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoTraceDefinitionDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'autoTraceId': !exists(json, 'autoTraceId') ? undefined : AutoTraceIdFromJSON(json['autoTraceId']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'traceCode': !exists(json, 'traceCode') ? undefined : json['traceCode'],
        'traceGroup': !exists(json, 'traceGroup') ? undefined : AutoTraceGroupConfigTypeFromJSON(json['traceGroup']),
        'autoTraceBlockCategory': !exists(json, 'autoTraceBlockCategory') ? undefined : AutoTraceBlockCategoryTypeFromJSON(json['autoTraceBlockCategory']),
        'autoTraceTrigger': !exists(json, 'autoTraceTrigger') ? undefined : AutoTraceTriggerCategoryTypeFromJSON(json['autoTraceTrigger']),
        'fieldNameOnUpdate': !exists(json, 'fieldNameOnUpdate') ? undefined : json['fieldNameOnUpdate'],
        'fieldNameOnUpdateId': !exists(json, 'fieldNameOnUpdateId') ? undefined : json['fieldNameOnUpdateId'],
        'conditions': !exists(json, 'conditions') ? undefined : ConditionGroupTypeFromJSON(json['conditions']),
    };
}

export function AutoTraceDefinitionDetailTypeToJSON(value?: AutoTraceDefinitionDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'autoTraceId': AutoTraceIdToJSON(value.autoTraceId),
        'hotelId': value.hotelId,
        'traceCode': value.traceCode,
        'traceGroup': AutoTraceGroupConfigTypeToJSON(value.traceGroup),
        'autoTraceBlockCategory': AutoTraceBlockCategoryTypeToJSON(value.autoTraceBlockCategory),
        'autoTraceTrigger': AutoTraceTriggerCategoryTypeToJSON(value.autoTraceTrigger),
        'fieldNameOnUpdate': value.fieldNameOnUpdate,
        'fieldNameOnUpdateId': value.fieldNameOnUpdateId,
        'conditions': ConditionGroupTypeToJSON(value.conditions),
    };
}

