/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity Management API
 * APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityConfigClassType } from './ActivityConfigClassType';
import {
    ActivityConfigClassTypeFromJSON,
    ActivityConfigClassTypeFromJSONTyped,
    ActivityConfigClassTypeToJSON,
} from './ActivityConfigClassType';

/**
 * Activity Type detail information.
 * @export
 * @interface ActivityConfigTypeDetailType
 */
export interface ActivityConfigTypeDetailType {
    /**
     * Element to hold Activity Class value.
     * @type {Array<ActivityConfigClassType>}
     * @memberof ActivityConfigTypeDetailType
     */
    activityClassList?: Array<ActivityConfigClassType>;
    /**
     * Type for the activity Type.
     * @type {string}
     * @memberof ActivityConfigTypeDetailType
     */
    activityTypeCode?: string;
    /**
     * To create an iCal file (.ics) automatically and send it to the email address of the activity owner on activity creation, update, and deletion.
     * @type {boolean}
     * @memberof ActivityConfigTypeDetailType
     */
    autoiCalendar?: boolean;
    /**
     * Description for the Activity Type.
     * @type {string}
     * @memberof ActivityConfigTypeDetailType
     */
    description?: string;
    /**
     * The hotel code where the activity type to be created.
     * @type {string}
     * @memberof ActivityConfigTypeDetailType
     */
    hotelId?: string;
    /**
     * When checked,the activity type will still be valid for existing activities and traces,but it cannot be selected for new activities and traces
     * @type {boolean}
     * @memberof ActivityConfigTypeDetailType
     */
    inactive?: boolean;
    /**
     * Check for whether to consider the activity type is internal.
     * @type {boolean}
     * @memberof ActivityConfigTypeDetailType
     */
    internal?: boolean;
    /**
     * Defines the number of minutes before the start time of an activity of this activity type, an alert should be issued.
     * @type {number}
     * @memberof ActivityConfigTypeDetailType
     */
    minutesBeforeAlert?: number;
    /**
     * Display sequence for the activity code type.
     * @type {number}
     * @memberof ActivityConfigTypeDetailType
     */
    sequence?: number;
}

/**
 * Check if a given object implements the ActivityConfigTypeDetailType interface.
 */
export function instanceOfActivityConfigTypeDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityConfigTypeDetailTypeFromJSON(json: any): ActivityConfigTypeDetailType {
    return ActivityConfigTypeDetailTypeFromJSONTyped(json, false);
}

export function ActivityConfigTypeDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityConfigTypeDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityClassList': !exists(json, 'activityClassList') ? undefined : ((json['activityClassList'] as Array<any>).map(ActivityConfigClassTypeFromJSON)),
        'activityTypeCode': !exists(json, 'activityTypeCode') ? undefined : json['activityTypeCode'],
        'autoiCalendar': !exists(json, 'autoiCalendar') ? undefined : json['autoiCalendar'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'internal': !exists(json, 'internal') ? undefined : json['internal'],
        'minutesBeforeAlert': !exists(json, 'minutesBeforeAlert') ? undefined : json['minutesBeforeAlert'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
    };
}

export function ActivityConfigTypeDetailTypeToJSON(value?: ActivityConfigTypeDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityClassList': value.activityClassList === undefined ? undefined : ((value.activityClassList as Array<any>).map(ActivityConfigClassTypeToJSON)),
        'activityTypeCode': value.activityTypeCode,
        'autoiCalendar': value.autoiCalendar,
        'description': value.description,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'internal': value.internal,
        'minutesBeforeAlert': value.minutesBeforeAlert,
        'sequence': value.sequence,
    };
}

