/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity Management API
 * APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExpressionFieldType
 */
export interface ExpressionFieldType {
    /**
     * 
     * @type {string}
     * @memberof ExpressionFieldType
     */
    fieldName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpressionFieldType
     */
    fieldDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpressionFieldType
     */
    tableName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExpressionFieldType
     */
    virtual?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExpressionFieldType
     */
    dataType?: string;
    /**
     * 
     * @type {string}
     * @memberof ExpressionFieldType
     */
    lovSelected?: string;
}

/**
 * Check if a given object implements the ExpressionFieldType interface.
 */
export function instanceOfExpressionFieldType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExpressionFieldTypeFromJSON(json: any): ExpressionFieldType {
    return ExpressionFieldTypeFromJSONTyped(json, false);
}

export function ExpressionFieldTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpressionFieldType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fieldName': !exists(json, 'fieldName') ? undefined : json['fieldName'],
        'fieldDescription': !exists(json, 'fieldDescription') ? undefined : json['fieldDescription'],
        'tableName': !exists(json, 'tableName') ? undefined : json['tableName'],
        'virtual': !exists(json, 'virtual') ? undefined : json['virtual'],
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'lovSelected': !exists(json, 'lovSelected') ? undefined : json['lovSelected'],
    };
}

export function ExpressionFieldTypeToJSON(value?: ExpressionFieldType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fieldName': value.fieldName,
        'fieldDescription': value.fieldDescription,
        'tableName': value.tableName,
        'virtual': value.virtual,
        'dataType': value.dataType,
        'lovSelected': value.lovSelected,
    };
}

