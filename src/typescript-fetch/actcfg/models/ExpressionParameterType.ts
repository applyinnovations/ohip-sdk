/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity Management API
 * APIs to cater for Activity Configuration functionality in OPERA Cloud. In this module you can retrieve, create, update Activity configuration codes, for example create a new Activity Type.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExpressionParameterType
 */
export interface ExpressionParameterType {
    /**
     * 
     * @type {number}
     * @memberof ExpressionParameterType
     */
    functionIdOne?: number;
    /**
     * 
     * @type {number}
     * @memberof ExpressionParameterType
     */
    functionIdTwo?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExpressionParameterType
     */
    parameter?: Array<string>;
}

/**
 * Check if a given object implements the ExpressionParameterType interface.
 */
export function instanceOfExpressionParameterType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExpressionParameterTypeFromJSON(json: any): ExpressionParameterType {
    return ExpressionParameterTypeFromJSONTyped(json, false);
}

export function ExpressionParameterTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpressionParameterType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'functionIdOne': !exists(json, 'functionIdOne') ? undefined : json['functionIdOne'],
        'functionIdTwo': !exists(json, 'functionIdTwo') ? undefined : json['functionIdTwo'],
        'parameter': !exists(json, 'parameter') ? undefined : json['parameter'],
    };
}

export function ExpressionParameterTypeToJSON(value?: ExpressionParameterType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'functionIdOne': value.functionIdOne,
        'functionIdTwo': value.functionIdTwo,
        'parameter': value.parameter,
    };
}

