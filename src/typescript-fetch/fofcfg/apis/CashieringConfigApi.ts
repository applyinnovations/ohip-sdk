/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdjustmentCodes,
  AdjustmentCodesCopy,
  Articles,
  ArticlesInfo,
  AuthorizationConfigRules,
  AuthorizationConfigRulesInfo,
  AuthorizerGroups,
  AuthorizerGroupsToChange,
  BudgetForecastInformation,
  BudgetForecastInformationBase,
  BudgetForecastToDelete,
  CalculatedPosting,
  CashierNumber,
  Cashiers,
  CashiersDetails,
  ChangeFiscalCommands,
  ChangeFiscalPartners,
  CollectingAgentTaxes,
  CompAuthorizer,
  CompAuthorizers,
  CompBucketRedemptionConfig,
  CompBucketRedemptionConfigDetails,
  CompTypesCriteria,
  CompTypesDetails,
  CompTypesStatus,
  CompTypesToBeChanged,
  CreateFiscalPartners,
  CurrencyExchangeServiceTaxes,
  CustomChargeExemptionsConfig,
  CustomChargeExemptionsConfigCopy,
  CustomChargeExemptionsConfigToBeChanged,
  CustomChargeExemptionsConfigToBeCreated,
  CustomChargesConfig,
  CustomChargesConfigDetails,
  CustomNumberConfigDetails,
  CustomNumberConfiguration,
  DailyPlanCodes,
  DefaultPaymentMethodRule,
  ExceptionDetailType,
  ExchangeRateType,
  ExchangeRates,
  ExchangeRatesDetails,
  ExpenseArrangementCodes,
  ExpenseArrangementCodesCopy,
  FiscalCommandsDetails,
  FiscalFolioParameters,
  FiscalFolioParametersCopy,
  FiscalPartnersDetails,
  FiscalPeriods,
  FiscalPeriodsEdit,
  FiscalPeriodsInfo,
  FiscalYears,
  FolioArrangementCodes,
  FolioArrangementCodesCopy,
  FolioCopyLegend,
  FolioCopyLegends,
  FolioPrintQueues,
  FolioTypeLegendMappingConfigCriteria,
  FolioTypeLegendMappingConfigStatus,
  FolioTypeLegendMappingConfigToBeChanged,
  FolioTypeLegendMappingsConfigDetails,
  FolioTypesConfig,
  ForeignCurrencies,
  GUINumberRulesDetails,
  GroupArrangementCodes,
  GroupArrangementCodesCopy,
  HotelTransactionCode,
  HotelTransactionCodes,
  HotelTransactionGenerates,
  HotelTransactionSubgroup,
  HotelTransactionSubgroups,
  NoShowPostingRules,
  NoShowPostingRulesEdit,
  NumberDescriptions,
  OperaControlSequences,
  PackageArrangementCodes,
  PackageArrangementCodesCopy,
  PaymentMethods,
  PaymentMethodsCopy,
  PaymentMethodsInfo,
  RevenueBucketCodes,
  RevenueBucketCodesCopy,
  RevenueBucketTypes,
  RevenueBucketTypesCopy,
  RevenueTypeMapping,
  RevenueTypeMappingCopy,
  RevenueTypeMappingList,
  RoutingInstructions,
  RoutingInstructionsCopy,
  Status,
  TaxBrackets,
  TaxBracketsCopy,
  TaxTypes,
  TaxTypesCopy,
  TaxTypesGenerate,
  TemplateCustomNumberConfig,
  TemplateCustomNumberConfigDetails,
  TemplateTransactionCodes,
  TemplateTransactionGroups,
  TemplateTransactionSubgroups,
  TransactionArrangementCodes,
  TransactionCodeAccessRoles,
  TransactionCodeOwnership,
  TransactionCodes,
  TransactionCodesCopy,
  TransactionDiscount,
  TransactionDiscounts,
  TransactionDiversionRules,
  TransactionGroup,
  TransactionGroups,
  TransactionGroupsCopy,
  TransactionSubgroupsCopy,
} from '../models/index';
import {
    AdjustmentCodesFromJSON,
    AdjustmentCodesToJSON,
    AdjustmentCodesCopyFromJSON,
    AdjustmentCodesCopyToJSON,
    ArticlesFromJSON,
    ArticlesToJSON,
    ArticlesInfoFromJSON,
    ArticlesInfoToJSON,
    AuthorizationConfigRulesFromJSON,
    AuthorizationConfigRulesToJSON,
    AuthorizationConfigRulesInfoFromJSON,
    AuthorizationConfigRulesInfoToJSON,
    AuthorizerGroupsFromJSON,
    AuthorizerGroupsToJSON,
    AuthorizerGroupsToChangeFromJSON,
    AuthorizerGroupsToChangeToJSON,
    BudgetForecastInformationFromJSON,
    BudgetForecastInformationToJSON,
    BudgetForecastInformationBaseFromJSON,
    BudgetForecastInformationBaseToJSON,
    BudgetForecastToDeleteFromJSON,
    BudgetForecastToDeleteToJSON,
    CalculatedPostingFromJSON,
    CalculatedPostingToJSON,
    CashierNumberFromJSON,
    CashierNumberToJSON,
    CashiersFromJSON,
    CashiersToJSON,
    CashiersDetailsFromJSON,
    CashiersDetailsToJSON,
    ChangeFiscalCommandsFromJSON,
    ChangeFiscalCommandsToJSON,
    ChangeFiscalPartnersFromJSON,
    ChangeFiscalPartnersToJSON,
    CollectingAgentTaxesFromJSON,
    CollectingAgentTaxesToJSON,
    CompAuthorizerFromJSON,
    CompAuthorizerToJSON,
    CompAuthorizersFromJSON,
    CompAuthorizersToJSON,
    CompBucketRedemptionConfigFromJSON,
    CompBucketRedemptionConfigToJSON,
    CompBucketRedemptionConfigDetailsFromJSON,
    CompBucketRedemptionConfigDetailsToJSON,
    CompTypesCriteriaFromJSON,
    CompTypesCriteriaToJSON,
    CompTypesDetailsFromJSON,
    CompTypesDetailsToJSON,
    CompTypesStatusFromJSON,
    CompTypesStatusToJSON,
    CompTypesToBeChangedFromJSON,
    CompTypesToBeChangedToJSON,
    CreateFiscalPartnersFromJSON,
    CreateFiscalPartnersToJSON,
    CurrencyExchangeServiceTaxesFromJSON,
    CurrencyExchangeServiceTaxesToJSON,
    CustomChargeExemptionsConfigFromJSON,
    CustomChargeExemptionsConfigToJSON,
    CustomChargeExemptionsConfigCopyFromJSON,
    CustomChargeExemptionsConfigCopyToJSON,
    CustomChargeExemptionsConfigToBeChangedFromJSON,
    CustomChargeExemptionsConfigToBeChangedToJSON,
    CustomChargeExemptionsConfigToBeCreatedFromJSON,
    CustomChargeExemptionsConfigToBeCreatedToJSON,
    CustomChargesConfigFromJSON,
    CustomChargesConfigToJSON,
    CustomChargesConfigDetailsFromJSON,
    CustomChargesConfigDetailsToJSON,
    CustomNumberConfigDetailsFromJSON,
    CustomNumberConfigDetailsToJSON,
    CustomNumberConfigurationFromJSON,
    CustomNumberConfigurationToJSON,
    DailyPlanCodesFromJSON,
    DailyPlanCodesToJSON,
    DefaultPaymentMethodRuleFromJSON,
    DefaultPaymentMethodRuleToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    ExchangeRateTypeFromJSON,
    ExchangeRateTypeToJSON,
    ExchangeRatesFromJSON,
    ExchangeRatesToJSON,
    ExchangeRatesDetailsFromJSON,
    ExchangeRatesDetailsToJSON,
    ExpenseArrangementCodesFromJSON,
    ExpenseArrangementCodesToJSON,
    ExpenseArrangementCodesCopyFromJSON,
    ExpenseArrangementCodesCopyToJSON,
    FiscalCommandsDetailsFromJSON,
    FiscalCommandsDetailsToJSON,
    FiscalFolioParametersFromJSON,
    FiscalFolioParametersToJSON,
    FiscalFolioParametersCopyFromJSON,
    FiscalFolioParametersCopyToJSON,
    FiscalPartnersDetailsFromJSON,
    FiscalPartnersDetailsToJSON,
    FiscalPeriodsFromJSON,
    FiscalPeriodsToJSON,
    FiscalPeriodsEditFromJSON,
    FiscalPeriodsEditToJSON,
    FiscalPeriodsInfoFromJSON,
    FiscalPeriodsInfoToJSON,
    FiscalYearsFromJSON,
    FiscalYearsToJSON,
    FolioArrangementCodesFromJSON,
    FolioArrangementCodesToJSON,
    FolioArrangementCodesCopyFromJSON,
    FolioArrangementCodesCopyToJSON,
    FolioCopyLegendFromJSON,
    FolioCopyLegendToJSON,
    FolioCopyLegendsFromJSON,
    FolioCopyLegendsToJSON,
    FolioPrintQueuesFromJSON,
    FolioPrintQueuesToJSON,
    FolioTypeLegendMappingConfigCriteriaFromJSON,
    FolioTypeLegendMappingConfigCriteriaToJSON,
    FolioTypeLegendMappingConfigStatusFromJSON,
    FolioTypeLegendMappingConfigStatusToJSON,
    FolioTypeLegendMappingConfigToBeChangedFromJSON,
    FolioTypeLegendMappingConfigToBeChangedToJSON,
    FolioTypeLegendMappingsConfigDetailsFromJSON,
    FolioTypeLegendMappingsConfigDetailsToJSON,
    FolioTypesConfigFromJSON,
    FolioTypesConfigToJSON,
    ForeignCurrenciesFromJSON,
    ForeignCurrenciesToJSON,
    GUINumberRulesDetailsFromJSON,
    GUINumberRulesDetailsToJSON,
    GroupArrangementCodesFromJSON,
    GroupArrangementCodesToJSON,
    GroupArrangementCodesCopyFromJSON,
    GroupArrangementCodesCopyToJSON,
    HotelTransactionCodeFromJSON,
    HotelTransactionCodeToJSON,
    HotelTransactionCodesFromJSON,
    HotelTransactionCodesToJSON,
    HotelTransactionGeneratesFromJSON,
    HotelTransactionGeneratesToJSON,
    HotelTransactionSubgroupFromJSON,
    HotelTransactionSubgroupToJSON,
    HotelTransactionSubgroupsFromJSON,
    HotelTransactionSubgroupsToJSON,
    NoShowPostingRulesFromJSON,
    NoShowPostingRulesToJSON,
    NoShowPostingRulesEditFromJSON,
    NoShowPostingRulesEditToJSON,
    NumberDescriptionsFromJSON,
    NumberDescriptionsToJSON,
    OperaControlSequencesFromJSON,
    OperaControlSequencesToJSON,
    PackageArrangementCodesFromJSON,
    PackageArrangementCodesToJSON,
    PackageArrangementCodesCopyFromJSON,
    PackageArrangementCodesCopyToJSON,
    PaymentMethodsFromJSON,
    PaymentMethodsToJSON,
    PaymentMethodsCopyFromJSON,
    PaymentMethodsCopyToJSON,
    PaymentMethodsInfoFromJSON,
    PaymentMethodsInfoToJSON,
    RevenueBucketCodesFromJSON,
    RevenueBucketCodesToJSON,
    RevenueBucketCodesCopyFromJSON,
    RevenueBucketCodesCopyToJSON,
    RevenueBucketTypesFromJSON,
    RevenueBucketTypesToJSON,
    RevenueBucketTypesCopyFromJSON,
    RevenueBucketTypesCopyToJSON,
    RevenueTypeMappingFromJSON,
    RevenueTypeMappingToJSON,
    RevenueTypeMappingCopyFromJSON,
    RevenueTypeMappingCopyToJSON,
    RevenueTypeMappingListFromJSON,
    RevenueTypeMappingListToJSON,
    RoutingInstructionsFromJSON,
    RoutingInstructionsToJSON,
    RoutingInstructionsCopyFromJSON,
    RoutingInstructionsCopyToJSON,
    StatusFromJSON,
    StatusToJSON,
    TaxBracketsFromJSON,
    TaxBracketsToJSON,
    TaxBracketsCopyFromJSON,
    TaxBracketsCopyToJSON,
    TaxTypesFromJSON,
    TaxTypesToJSON,
    TaxTypesCopyFromJSON,
    TaxTypesCopyToJSON,
    TaxTypesGenerateFromJSON,
    TaxTypesGenerateToJSON,
    TemplateCustomNumberConfigFromJSON,
    TemplateCustomNumberConfigToJSON,
    TemplateCustomNumberConfigDetailsFromJSON,
    TemplateCustomNumberConfigDetailsToJSON,
    TemplateTransactionCodesFromJSON,
    TemplateTransactionCodesToJSON,
    TemplateTransactionGroupsFromJSON,
    TemplateTransactionGroupsToJSON,
    TemplateTransactionSubgroupsFromJSON,
    TemplateTransactionSubgroupsToJSON,
    TransactionArrangementCodesFromJSON,
    TransactionArrangementCodesToJSON,
    TransactionCodeAccessRolesFromJSON,
    TransactionCodeAccessRolesToJSON,
    TransactionCodeOwnershipFromJSON,
    TransactionCodeOwnershipToJSON,
    TransactionCodesFromJSON,
    TransactionCodesToJSON,
    TransactionCodesCopyFromJSON,
    TransactionCodesCopyToJSON,
    TransactionDiscountFromJSON,
    TransactionDiscountToJSON,
    TransactionDiscountsFromJSON,
    TransactionDiscountsToJSON,
    TransactionDiversionRulesFromJSON,
    TransactionDiversionRulesToJSON,
    TransactionGroupFromJSON,
    TransactionGroupToJSON,
    TransactionGroupsFromJSON,
    TransactionGroupsToJSON,
    TransactionGroupsCopyFromJSON,
    TransactionGroupsCopyToJSON,
    TransactionSubgroupsCopyFromJSON,
    TransactionSubgroupsCopyToJSON,
} from '../models/index';

export interface CalculatePostingRequest {
    transactionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    postingAmount?: number;
    taxType?: string;
    guestBalance?: number;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCompTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypesToBeChanged: CompTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFiscalCommandsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeFiscalCommands: ChangeFiscalCommands;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFiscalPartnersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeFiscalPartners: ChangeFiscalPartners;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFolioTypeLegendMappingConfigRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypeLegendMappingConfigToBeChanged: FolioTypeLegendMappingConfigToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodesCopy: AdjustmentCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyCustomChargeExemptionsConfigRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customChargeExemptionsConfigCopy: CustomChargeExemptionsConfigCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyExpenseArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    expenseArrangementCodesCopy: ExpenseArrangementCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyFiscalFolioParametersRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalFolioParametersCopy: FiscalFolioParametersCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyFolioArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioArrangementCodesCopy: FolioArrangementCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyGroupArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupArrangementCodesCopy: GroupArrangementCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyPackageArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageArrangementCodesCopy: PackageArrangementCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyPaymentMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    paymentMethodsCopy: PaymentMethodsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyRevenueBucketCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueBucketCodesCopy: RevenueBucketCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyRevenueBucketTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueBucketTypesCopy: RevenueBucketTypesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyRevenueTypeMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueTypeMappingCopy: RevenueTypeMappingCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyRoutingInstructionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructionsCopy: RoutingInstructionsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTaxBracketsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxBracketsCopy: TaxBracketsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTaxTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxTypesCopy: TaxTypesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCodesCopy: TransactionCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupsCopy: TransactionGroupsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionSubgroupsCopy: TransactionSubgroupsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCode?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteArticlesRequest {
    hotelId: string;
    articleCodes: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articleHotelId?: Array<string>;
    inactive?: Array<boolean>;
    orderSequence?: Array<number>;
    description?: Array<string>;
    transactionCode?: Array<string>;
    amount?: number;
    currencyCode?: string;
    availableForPostIt?: boolean;
    color?: DeleteArticlesColorEnum;
    universalProductCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAuthorizationConfigRuleRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomType?: Array<string>;
    roomClassHotelId?: string;
    roomClassCode?: string;
    sourceCodeHotelId?: string;
    sourceCode?: string;
    rateCategory?: string;
    rateCode?: Array<string>;
    guaranteeCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAuthorizerGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroup?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBudgetForecastRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    budgetForecastToDelete: BudgetForecastToDelete;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCollectingAgentTaxesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxCode?: Array<number>;
    taxTypeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCompBucketRedemptionConfigRequest {
    redemptionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCurrencyExchangeServiceTaxesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCustomChargeExemptionsConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCustomChargesConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCustomNumberConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteExchangeRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exchangeRates: ExchangeRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteExpenseArrangementCodesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFiscalFolioParametersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    partner?: Array<string>;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFiscalPeriodsRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yearId?: Array<number>;
    startDate?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFiscalYearsRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    yearId?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFolioArrangementCodesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFolioPrintQueuesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    queueName?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteFolioTypesConfigRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteForeignCurrenciesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGlobalExchangeRatesRequest {
    authorization?: string;
    xAppKey?: string;
    exchangeRates: ExchangeRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGroupArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    hotelId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteNoShowPostingRulesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationType?: Array<string>;
    sourceCode?: Array<string>;
    postingRule?: Set<DeleteNoShowPostingRulesPostingRuleEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePackageArrangementCodesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRevenueBucketCodesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    revenueBucketType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRevenueBucketTypesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRevenueTypeMappingRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueTypeMappingID?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    revenueType?: string;
    eventType?: string;
    space?: string;
    transactionCode?: string;
    cateringOnly?: DeleteRevenueTypeMappingCateringOnlyEnum;
    serviceCharge?: number;
    serviceChargeTrxCode?: string;
    serviceChargeCalulationMethod?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRoutingInstructionsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTaxBracketsRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxPercentage?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTaxTypesRequest {
    taxTypeCode: Array<string>;
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateCustomNumberRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    configurationId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateCustomNumberConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateTransactionCodesRequest {
    transactionCodes: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateTransactionGroupsRequest {
    templateTransactionCodes: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subgroup?: Array<string>;
    group?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTransactionCodesRequest {
    transactionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTransactionDiscountsRequest {
    hotelId: string;
    transactionDiscountCode: string;
}

export interface DeleteTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    hotelId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    subgroup?: Array<string>;
    group?: Array<string>;
    hotelId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAdjustmentCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetArticlesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCodes?: Array<string>;
    articleCodes?: Array<string>;
    universalProductCode?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAuthorizationConfigRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAuthorizerGroupsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableCashierNumberRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBudgetForecastRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    year?: string;
    marketSegmentNights?: boolean;
    marketSegmentRevenue?: boolean;
    marketSegmentABVariance?: boolean;
    marketSegmentAFVariance?: boolean;
    marketSegmentActual?: boolean;
    marketSegmentBudget?: boolean;
    marketSegmentFBVariance?: boolean;
    marketSegmentForecast?: boolean;
    marketSegmentMarketCodes?: Array<string>;
    rateSegmentNights?: boolean;
    rateSegmentRevenue?: boolean;
    rateSegmentABVariance?: boolean;
    rateSegmentAFVariance?: boolean;
    rateSegmentActual?: boolean;
    rateSegmentBudget?: boolean;
    rateSegmentFBVariance?: boolean;
    rateSegmentForecast?: boolean;
    rateSegmentRateCodes?: Array<string>;
    customSegmentCustomValue?: boolean;
    customSegmentABVariance?: boolean;
    customSegmentAFVariance?: boolean;
    customSegmentActual?: boolean;
    customSegmentBudget?: boolean;
    customSegmentFBVariance?: boolean;
    customSegmentForecast?: boolean;
    customSegmentCustomCodes?: Array<string>;
    transactionSegmentRevenue?: boolean;
    transactionSegmentABVariance?: boolean;
    transactionSegmentAFVariance?: boolean;
    transactionSegmentActual?: boolean;
    transactionSegmentBudget?: boolean;
    transactionSegmentFBVariance?: boolean;
    transactionSegmentForecast?: boolean;
    transactionSegmentTransactionCodes?: Array<string>;
    transactionSegmentTransactionCodeGrp?: string;
    cateringSegmentCovers?: boolean;
    cateringSegmentRevenue?: boolean;
    cateringSegmentABVariance?: boolean;
    cateringSegmentAFVariance?: boolean;
    cateringSegmentActual?: boolean;
    cateringSegmentBudget?: boolean;
    cateringSegmentFBVariance?: boolean;
    cateringSegmentForecast?: boolean;
    cateringSegmentCateringCodeGrp?: string;
    cateringSegmentCateringCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashiersRequest {
    cashierIDs: Array<number>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    name?: string;
    includeInactive?: boolean;
    appUser?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCollectingAgentTaxesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    taxCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompAuthorizersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeCompAuthorizerDetails?: boolean;
    includeInactiveAuthorizers?: boolean;
    includeTerminatedAuthorizers?: boolean;
    authorizer?: string;
    firstName?: string;
    lastName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompBucketRedemptionCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    redemptionCode?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompBucketRedemptionConfigRequest {
    redemptionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCompTypesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypeCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCurrencyExchangeServiceTaxesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomChargeCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    configurationId?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomChargeExemptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    configurationId?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomChargeExemptionsConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomChargesConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomNumberConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    wildCard?: string;
    description?: string;
    area?: GetCustomNumberConfigAreaEnum;
    startDate?: string;
    endDate?: string;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomNumbersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    includeInactive?: boolean;
    configurationId?: Array<string>;
    wildCard?: string;
    description?: string;
    area?: GetCustomNumbersAreaEnum;
    startDate?: string;
    endDate?: string;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDailyPlanCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDefaultPaymentMethodRuleRequest {
    hotelIds: Array<string>;
    transactionCodes: Array<string>;
    paymentMethods: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    fetchInstructions?: Set<GetDefaultPaymentMethodRuleFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExchangeRatesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exchangeTypes?: Set<GetExchangeRatesExchangeTypesEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExchangeRatesInfoRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    exchangeTypes?: Set<GetExchangeRatesInfoExchangeTypesEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetExpenseArrangementCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalCommandsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    code?: Array<string>;
    partnerCode?: Array<string>;
    operationType?: GetFiscalCommandsOperationTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalFolioParametersRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    internal?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalPartnersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    partnerCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalPeriodsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    year?: number;
    periodType?: GetFiscalPeriodsPeriodTypeEnum;
    period?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalYearsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    year?: number;
    yearType?: GetFiscalYearsYearTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioArrangementCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioCopyLegendsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    languageCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioPrintQueuesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    queueName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTypeLegendMappingsConfigRequest {
    hotelId: string;
    legendCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFolioTypesConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypeNamesCodes?: Array<string>;
    taxTypeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetForeignCurrenciesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencies?: Array<string>;
    wildCard?: string;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFuturePastExchangeRatesRequest {
    currencyCode: string;
    hotelId: string;
    exchangeTypes: GetFuturePastExchangeRatesExchangeTypesEnum;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dateRangeStart?: string;
    dateRangeEnd?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGUINumberRulesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGenerateTaxTypesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGlobalExchangeRatesInfoRequest {
    authorization?: string;
    xAppKey?: string;
    exchangeTypes?: Set<GetGlobalExchangeRatesInfoExchangeTypesEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGroupArrangementCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeTransactionCodes?: boolean;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNoShowPostingRulesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sourceCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetNumberDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    numberCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOperaControlSequencesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    countryCode?: string;
    code?: Array<string>;
    hotelCode?: Array<string>;
    fetchInstruction?: Set<GetOperaControlSequencesFetchInstructionEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPackageArrangementCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arrangementCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPaymentMethodsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    transactionCodes?: Array<string>;
    paymentMethods?: Array<string>;
    fetchInstructions?: Set<GetPaymentMethodsFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueBucketCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trxCodeArrangementCodes?: Array<string>;
    wildCard?: string;
    trxCodeArrangementType?: GetRevenueBucketCodesTrxCodeArrangementTypeEnum;
    code?: Array<string>;
    revenueBucketTypesWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueBucketTypesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueBucketTypeCodes?: Array<string>;
    wildCard?: string;
    bucketType?: GetRevenueBucketTypesBucketTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueTypeMappingRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventTypeCodes?: Array<string>;
    revenueTypeCodes?: Array<string>;
    transactionCodes?: Array<string>;
    spaceCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoutingInstructionsRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trxCodeArrangementCode?: Array<string>;
    wildCard?: string;
    compAccounting?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaxBracketsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxPercentagesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaxTypesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxTypeCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateCustomNumberConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    wildCard?: string;
    startDate?: string;
    endDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateCustomNumbersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    configurationId?: Array<string>;
    wildCard?: string;
    startDate?: string;
    endDate?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTransactionCodes?: boolean;
    includeInactive?: boolean;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    transactionCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    brandCode?: string;
    universalProductCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    wildCard?: string;
    transactionGroupType?: GetTemplateTransactionGroupsTransactionGroupTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionArrangementCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodeRequest {
    transactionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetTransactionCodeFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodeAccessRolesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roleCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionCodesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTransactionCodes?: boolean;
    includeInactive?: boolean;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    transactionCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    brandCode?: string;
    universalProductCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionDiscountsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiscountCodes?: Array<string>;
    description?: string;
    ruleType?: GetTransactionDiscountsRuleTypeEnum;
    membershipTypes?: Array<string>;
    membershipLevels?: Array<string>;
    fetchInstructions?: Set<GetTransactionDiscountsFetchInstructionsEnum>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionDiversionRulesRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ruleCodes?: Array<string>;
    wildCard?: string;
    type?: GetTransactionDiversionRulesTypeEnum;
    description?: string;
    level?: GetTransactionDiversionRulesLevelEnum;
    membershipTypeCodes?: Array<string>;
    membershipTypeLevels?: Array<string>;
    vipCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionGroupRequest {
    transactionGroupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetTransactionGroupFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionGroupsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    wildCard?: string;
    transactionGroupType?: GetTransactionGroupsTransactionGroupTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionSubgroupRequest {
    transactionGroupCode: string;
    transactionSubGroupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetTransactionSubgroupFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTransactionSubgroupsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroupCodes?: Array<string>;
    transactionSubgroupsCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes: AdjustmentCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostArticlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articles: Articles;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAuthorizationConfigRuleRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizationConfigRules: AuthorizationConfigRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAuthorizerGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroups: AuthorizerGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCashiersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashiers: Cashiers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCollectingAgentTaxesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    collectingAgentTaxes: CollectingAgentTaxes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompBucketRedemptionConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compBucketRedemptionConfig: CompBucketRedemptionConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCompTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compTypesCriteria: CompTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCurrencyExchangeServiceTaxesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxes: CurrencyExchangeServiceTaxes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCustomChargeExemptionsConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customChargeExemptionsConfigToBeCreated: CustomChargeExemptionsConfigToBeCreated;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCustomChargesConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customChargesConfig: CustomChargesConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCustomNumberConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customNumberConfiguration: CustomNumberConfiguration;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostExpenseArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    expenseArrangementCodes: ExpenseArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalPartnersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createFiscalPartners: CreateFiscalPartners;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalPeriodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalPeriods: FiscalPeriods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalYearsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalYears: FiscalYears;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFolioArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioArrangementCodes: FolioArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFolioPrintQueuesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioPrintQueues: FolioPrintQueues;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFolioTypeLegendMappingConfigRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypeLegendMappingConfigCriteria: FolioTypeLegendMappingConfigCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFolioTypesConfigRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypesConfig: FolioTypesConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostForeignCurrenciesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    foreignCurrencies: ForeignCurrencies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGroupArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupArrangementCodes: GroupArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostNoShowPostingRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    noShowPostingRules: NoShowPostingRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPackageArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageArrangementCodes: PackageArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPaymentMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    paymentMethods: PaymentMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRevenueBucketCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueBucketCodes: RevenueBucketCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRevenueBucketTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueBucketTypes: RevenueBucketTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRevenueTypeMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueTypeMapping: RevenueTypeMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoutingInstructionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructions: RoutingInstructions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTaxBracketsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxBrackets: TaxBrackets;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTaxTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxTypes: TaxTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateCustomNumberRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCustomNumberConfig: TemplateCustomNumberConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateCustomNumberConfigRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCustomNumberConfig: TemplateCustomNumberConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionCodes: TemplateTransactionCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionGroups: TemplateTransactionGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionSubgroups: TemplateTransactionSubgroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionCodes: HotelTransactionCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionDiscountsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiscount: TransactionDiscount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionDiversionRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionRules: TransactionDiversionRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionGeneratesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionGenerates: HotelTransactionGenerates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroups: TransactionGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionSubgroups: HotelTransactionSubgroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAdjustmentCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    adjustmentCodes: AdjustmentCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutArticlesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    articles: Articles;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAuthorizationConfigRuleRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizationConfigRules: AuthorizationConfigRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAuthorizerGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    authorizerGroupsToChange: AuthorizerGroupsToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCashiersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashiers: Cashiers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCollectingAgentTaxesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    collectingAgentTaxes: CollectingAgentTaxes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCompBucketRedemptionConfigRequest {
    redemptionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compBucketRedemptionConfig: CompBucketRedemptionConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCurrencyExchangeServiceTaxesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    currencyExchangeServiceTaxes: CurrencyExchangeServiceTaxes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCustomChargeExemptionsConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customChargeExemptionsConfigToBeChanged: CustomChargeExemptionsConfigToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCustomChargesConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customChargesConfig: CustomChargesConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCustomNumberConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customNumberConfiguration: CustomNumberConfiguration;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDailyPlanCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    dailyPlanCodes: DailyPlanCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutExpenseArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    expenseArrangementCodes: ExpenseArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFiscalFolioParametersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalFolioParameters: FiscalFolioParameters;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFiscalPeriodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalPeriodsEdit: FiscalPeriodsEdit;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFiscalYearsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalYears: FiscalYears;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFolioArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioArrangementCodes: FolioArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFolioCopyLegendsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioCopyLegend: FolioCopyLegend;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFolioPrintQueuesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioPrintQueues: FolioPrintQueues;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutFolioTypesConfigRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    folioTypesConfig: FolioTypesConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutForeignCurrenciesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    foreignCurrencies: ForeignCurrencies;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGUINumberRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    gUINumberRulesDetails: GUINumberRulesDetails;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGroupArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    groupArrangementCodes: GroupArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutNoShowPostingRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    noShowPostingRulesEdit: NoShowPostingRulesEdit;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutNumberDescriptionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    numberDescriptions: NumberDescriptions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutOperaControlSequencesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    operaControlSequences: OperaControlSequences;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPackageArrangementCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    packageArrangementCodes: PackageArrangementCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPaymentMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    paymentMethods: PaymentMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueBucketCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueBucketCodes: RevenueBucketCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueBucketTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueBucketTypes: RevenueBucketTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueTypeMappingRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    revenueTypeMapping: RevenueTypeMapping;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoutingInstructionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    routingInstructions: RoutingInstructions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTaxBracketsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxBrackets: TaxBrackets;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTaxTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxTypes: TaxTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateCustomNumberRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCustomNumberConfig: TemplateCustomNumberConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateCustomNumberConfigRequest {
    configurationId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCustomNumberConfig: TemplateCustomNumberConfig;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionCodes: TemplateTransactionCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionGroups: TemplateTransactionGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTransactionSubgroups: TemplateTransactionSubgroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionCodeOwnershipRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCodeOwnership: TransactionCodeOwnership;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionCodes: HotelTransactionCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionDiscountsRequest {
    hotelId: string;
    transactionDiscountCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiscount: TransactionDiscount;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionDiversionRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionRules: TransactionDiversionRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionGeneratesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionGenerates: HotelTransactionGenerates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionGroups: TransactionGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTransactionSubgroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionSubgroups: HotelTransactionSubgroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCompTypesRequest {
    compTypesCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFiscalPartnersRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    partnerCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFolioTypeLegendMappingConfigRequest {
    legendCode: string;
    folioType: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemovePaymentMethodsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    paymentMethods: PaymentMethods;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTransactionDiversionRulesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionDiversionRules: TransactionDiversionRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTransactionGeneratesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTransactionGenerates: HotelTransactionGenerates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetBudgetForecastRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    budgetForecastInformationBase: BudgetForecastInformationBase;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetCompAuthorizerRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    compAuthorizer: CompAuthorizer;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetExchangeRatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    exchangeRates: ExchangeRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetGlobalExchangeRatesRequest {
    authorization?: string;
    xAppKey?: string;
    exchangeRates: ExchangeRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface SetTransactionCodeAccessRolesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    transactionCodeAccessRoles: TransactionCodeAccessRoles;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CashieringConfigApi extends runtime.BaseAPI {

    /**
     * Operation to test posting amount. <p><strong>OperationId:</strong>calculatePosting</p>
     * Operation to CalculatePosting.
     */
    async calculatePostingRaw(requestParameters: CalculatePostingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CalculatedPosting>> {
        if (requestParameters.transactionCode === null || requestParameters.transactionCode === undefined) {
            throw new runtime.RequiredError('transactionCode','Required parameter requestParameters.transactionCode was null or undefined when calling calculatePosting.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling calculatePosting.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.postingAmount !== undefined) {
            queryParameters['postingAmount'] = requestParameters.postingAmount;
        }

        if (requestParameters.taxType !== undefined) {
            queryParameters['taxType'] = requestParameters.taxType;
        }

        if (requestParameters.guestBalance !== undefined) {
            queryParameters['guestBalance'] = requestParameters.guestBalance;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodes/{transactionCode}/chargeSimulations`.replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculatedPostingFromJSON(jsonValue));
    }

    /**
     * Operation to test posting amount. <p><strong>OperationId:</strong>calculatePosting</p>
     * Operation to CalculatePosting.
     */
    async calculatePosting(requestParameters: CalculatePostingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CalculatedPosting> {
        const response = await this.calculatePostingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Change Comp Types. <p><strong>OperationId:</strong>changeCompTypes</p>
     * Operation to Change Comp Types.
     */
    async changeCompTypesRaw(requestParameters: ChangeCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompTypesStatus>> {
        if (requestParameters.compTypesToBeChanged === null || requestParameters.compTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('compTypesToBeChanged','Required parameter requestParameters.compTypesToBeChanged was null or undefined when calling changeCompTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompTypesToBeChangedToJSON(requestParameters.compTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompTypesStatusFromJSON(jsonValue));
    }

    /**
     * Operation to Change Comp Types. <p><strong>OperationId:</strong>changeCompTypes</p>
     * Operation to Change Comp Types.
     */
    async changeCompTypes(requestParameters: ChangeCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompTypesStatus> {
        const response = await this.changeCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update configuration fiscal commands. <p><strong>OperationId:</strong>changeFiscalCommands</p>
     * Change configuration fiscal commands
     */
    async changeFiscalCommandsRaw(requestParameters: ChangeFiscalCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeFiscalCommands.');
        }
        
        if (requestParameters.changeFiscalCommands === null || requestParameters.changeFiscalCommands === undefined) {
            throw new runtime.RequiredError('changeFiscalCommands','Required parameter requestParameters.changeFiscalCommands was null or undefined when calling changeFiscalCommands.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalCommands`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeFiscalCommandsToJSON(requestParameters.changeFiscalCommands),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update configuration fiscal commands. <p><strong>OperationId:</strong>changeFiscalCommands</p>
     * Change configuration fiscal commands
     */
    async changeFiscalCommands(requestParameters: ChangeFiscalCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFiscalCommandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update configuration fiscal partners. <p><strong>OperationId:</strong>changeFiscalPartners</p>
     * Change configuration fiscal partners
     */
    async changeFiscalPartnersRaw(requestParameters: ChangeFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeFiscalPartners.');
        }
        
        if (requestParameters.changeFiscalPartners === null || requestParameters.changeFiscalPartners === undefined) {
            throw new runtime.RequiredError('changeFiscalPartners','Required parameter requestParameters.changeFiscalPartners was null or undefined when calling changeFiscalPartners.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalPartners`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeFiscalPartnersToJSON(requestParameters.changeFiscalPartners),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update configuration fiscal partners. <p><strong>OperationId:</strong>changeFiscalPartners</p>
     * Change configuration fiscal partners
     */
    async changeFiscalPartners(requestParameters: ChangeFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFiscalPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change folio type legend mappings config. <p><strong>OperationId:</strong>changeFolioTypeLegendMappingConfig</p>
     * Operation to change folio type legend mappings config.
     */
    async changeFolioTypeLegendMappingConfigRaw(requestParameters: ChangeFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypeLegendMappingConfigStatus>> {
        if (requestParameters.folioTypeLegendMappingConfigToBeChanged === null || requestParameters.folioTypeLegendMappingConfigToBeChanged === undefined) {
            throw new runtime.RequiredError('folioTypeLegendMappingConfigToBeChanged','Required parameter requestParameters.folioTypeLegendMappingConfigToBeChanged was null or undefined when calling changeFolioTypeLegendMappingConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypeLegendMappings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolioTypeLegendMappingConfigToBeChangedToJSON(requestParameters.folioTypeLegendMappingConfigToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTypeLegendMappingConfigStatusFromJSON(jsonValue));
    }

    /**
     * Operation to change folio type legend mappings config. <p><strong>OperationId:</strong>changeFolioTypeLegendMappingConfig</p>
     * Operation to change folio type legend mappings config.
     */
    async changeFolioTypeLegendMappingConfig(requestParameters: ChangeFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypeLegendMappingConfigStatus> {
        const response = await this.changeFolioTypeLegendMappingConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy Adjustment Codes. <p><strong>OperationId:</strong>copyAdjustmentCodes</p>
     * Operation to copy AdjustmentCodes.
     */
    async copyAdjustmentCodesRaw(requestParameters: CopyAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.adjustmentCodesCopy === null || requestParameters.adjustmentCodesCopy === undefined) {
            throw new runtime.RequiredError('adjustmentCodesCopy','Required parameter requestParameters.adjustmentCodesCopy was null or undefined when calling copyAdjustmentCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentCodesCopyToJSON(requestParameters.adjustmentCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy Adjustment Codes. <p><strong>OperationId:</strong>copyAdjustmentCodes</p>
     * Operation to copy AdjustmentCodes.
     */
    async copyAdjustmentCodes(requestParameters: CopyAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy Custom Charge Exemptions Config. <p><strong>OperationId:</strong>copyCustomChargeExemptionsConfig</p>
     * Operation to copy Custom Charge Exemptions Config.
     */
    async copyCustomChargeExemptionsConfigRaw(requestParameters: CopyCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyCustomChargeExemptionsConfig.');
        }
        
        if (requestParameters.customChargeExemptionsConfigCopy === null || requestParameters.customChargeExemptionsConfigCopy === undefined) {
            throw new runtime.RequiredError('customChargeExemptionsConfigCopy','Required parameter requestParameters.customChargeExemptionsConfigCopy was null or undefined when calling copyCustomChargeExemptionsConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/customCharges/exemptions/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomChargeExemptionsConfigCopyToJSON(requestParameters.customChargeExemptionsConfigCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy Custom Charge Exemptions Config. <p><strong>OperationId:</strong>copyCustomChargeExemptionsConfig</p>
     * Operation to copy Custom Charge Exemptions Config.
     */
    async copyCustomChargeExemptionsConfig(requestParameters: CopyCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyCustomChargeExemptionsConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>copyExpenseArrangementCodes</p>
     * Operation to copy ExpenseArrangementCodes.
     */
    async copyExpenseArrangementCodesRaw(requestParameters: CopyExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.expenseArrangementCodesCopy === null || requestParameters.expenseArrangementCodesCopy === undefined) {
            throw new runtime.RequiredError('expenseArrangementCodesCopy','Required parameter requestParameters.expenseArrangementCodesCopy was null or undefined when calling copyExpenseArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseArrangementCodesCopyToJSON(requestParameters.expenseArrangementCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>copyExpenseArrangementCodes</p>
     * Operation to copy ExpenseArrangementCodes.
     */
    async copyExpenseArrangementCodes(requestParameters: CopyExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy Fiscal Folio Parameters. <p><strong>OperationId:</strong>copyFiscalFolioParameters</p>
     * Operation to copy FiscalFolioParameters.
     */
    async copyFiscalFolioParametersRaw(requestParameters: CopyFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyFiscalFolioParameters.');
        }
        
        if (requestParameters.fiscalFolioParametersCopy === null || requestParameters.fiscalFolioParametersCopy === undefined) {
            throw new runtime.RequiredError('fiscalFolioParametersCopy','Required parameter requestParameters.fiscalFolioParametersCopy was null or undefined when calling copyFiscalFolioParameters.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/fiscalFolioParameters/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FiscalFolioParametersCopyToJSON(requestParameters.fiscalFolioParametersCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy Fiscal Folio Parameters. <p><strong>OperationId:</strong>copyFiscalFolioParameters</p>
     * Operation to copy FiscalFolioParameters.
     */
    async copyFiscalFolioParameters(requestParameters: CopyFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyFiscalFolioParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>copyFolioArrangementCodes</p>
     * Operation to copy FolioArrangementCodes.
     */
    async copyFolioArrangementCodesRaw(requestParameters: CopyFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioArrangementCodesCopy === null || requestParameters.folioArrangementCodesCopy === undefined) {
            throw new runtime.RequiredError('folioArrangementCodesCopy','Required parameter requestParameters.folioArrangementCodesCopy was null or undefined when calling copyFolioArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioArrangementCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolioArrangementCodesCopyToJSON(requestParameters.folioArrangementCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>copyFolioArrangementCodes</p>
     * Operation to copy FolioArrangementCodes.
     */
    async copyFolioArrangementCodes(requestParameters: CopyFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyFolioArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>copyGroupArrangementCodes</p>
     * Operation to copy GroupArrangementCodes.
     */
    async copyGroupArrangementCodesRaw(requestParameters: CopyGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.groupArrangementCodesCopy === null || requestParameters.groupArrangementCodesCopy === undefined) {
            throw new runtime.RequiredError('groupArrangementCodesCopy','Required parameter requestParameters.groupArrangementCodesCopy was null or undefined when calling copyGroupArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/groupArrangementCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupArrangementCodesCopyToJSON(requestParameters.groupArrangementCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>copyGroupArrangementCodes</p>
     * Operation to copy GroupArrangementCodes.
     */
    async copyGroupArrangementCodes(requestParameters: CopyGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyGroupArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>copyPackageArrangementCodes</p>
     * Operation to copy PackageArrangementCodes.
     */
    async copyPackageArrangementCodesRaw(requestParameters: CopyPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageArrangementCodesCopy === null || requestParameters.packageArrangementCodesCopy === undefined) {
            throw new runtime.RequiredError('packageArrangementCodesCopy','Required parameter requestParameters.packageArrangementCodesCopy was null or undefined when calling copyPackageArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageArrangementCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PackageArrangementCodesCopyToJSON(requestParameters.packageArrangementCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>copyPackageArrangementCodes</p>
     * Operation to copy PackageArrangementCodes.
     */
    async copyPackageArrangementCodes(requestParameters: CopyPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyPackageArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy payment methods. <p><strong>OperationId:</strong>copyPaymentMethods</p>
     * Operation to copy PaymentMethods.
     */
    async copyPaymentMethodsRaw(requestParameters: CopyPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.paymentMethodsCopy === null || requestParameters.paymentMethodsCopy === undefined) {
            throw new runtime.RequiredError('paymentMethodsCopy','Required parameter requestParameters.paymentMethodsCopy was null or undefined when calling copyPaymentMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelPaymentMethods/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentMethodsCopyToJSON(requestParameters.paymentMethodsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy payment methods. <p><strong>OperationId:</strong>copyPaymentMethods</p>
     * Operation to copy PaymentMethods.
     */
    async copyPaymentMethods(requestParameters: CopyPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy Revenue Bucket Codes. <p><strong>OperationId:</strong>copyRevenueBucketCodes</p>
     * Operation to copy RevenueBucketCodes.
     */
    async copyRevenueBucketCodesRaw(requestParameters: CopyRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueBucketCodesCopy === null || requestParameters.revenueBucketCodesCopy === undefined) {
            throw new runtime.RequiredError('revenueBucketCodesCopy','Required parameter requestParameters.revenueBucketCodesCopy was null or undefined when calling copyRevenueBucketCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueBucketCodesCopyToJSON(requestParameters.revenueBucketCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy Revenue Bucket Codes. <p><strong>OperationId:</strong>copyRevenueBucketCodes</p>
     * Operation to copy RevenueBucketCodes.
     */
    async copyRevenueBucketCodes(requestParameters: CopyRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyRevenueBucketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy Revenue Bucket Types. <p><strong>OperationId:</strong>copyRevenueBucketTypes</p>
     * Operation to copy RevenueBucketTypes.
     */
    async copyRevenueBucketTypesRaw(requestParameters: CopyRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueBucketTypesCopy === null || requestParameters.revenueBucketTypesCopy === undefined) {
            throw new runtime.RequiredError('revenueBucketTypesCopy','Required parameter requestParameters.revenueBucketTypesCopy was null or undefined when calling copyRevenueBucketTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketTypes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueBucketTypesCopyToJSON(requestParameters.revenueBucketTypesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy Revenue Bucket Types. <p><strong>OperationId:</strong>copyRevenueBucketTypes</p>
     * Operation to copy RevenueBucketTypes.
     */
    async copyRevenueBucketTypes(requestParameters: CopyRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyRevenueBucketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>copyRevenueTypeMapping</p>
     * Operation to copy RevenueTypeMapping.
     */
    async copyRevenueTypeMappingRaw(requestParameters: CopyRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueTypeMappingCopy === null || requestParameters.revenueTypeMappingCopy === undefined) {
            throw new runtime.RequiredError('revenueTypeMappingCopy','Required parameter requestParameters.revenueTypeMappingCopy was null or undefined when calling copyRevenueTypeMapping.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypeMapping/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueTypeMappingCopyToJSON(requestParameters.revenueTypeMappingCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>copyRevenueTypeMapping</p>
     * Operation to copy RevenueTypeMapping.
     */
    async copyRevenueTypeMapping(requestParameters: CopyRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyRevenueTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy routing instructions. <p><strong>OperationId:</strong>copyRoutingInstructions</p>
     * Operation to copy RoutingInstructions.
     */
    async copyRoutingInstructionsRaw(requestParameters: CopyRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.routingInstructionsCopy === null || requestParameters.routingInstructionsCopy === undefined) {
            throw new runtime.RequiredError('routingInstructionsCopy','Required parameter requestParameters.routingInstructionsCopy was null or undefined when calling copyRoutingInstructions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/routingInstructions/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingInstructionsCopyToJSON(requestParameters.routingInstructionsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy routing instructions. <p><strong>OperationId:</strong>copyRoutingInstructions</p>
     * Operation to copy RoutingInstructions.
     */
    async copyRoutingInstructions(requestParameters: CopyRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>copyTaxBrackets</p>
     * Operation to copy TaxBrackets.
     */
    async copyTaxBracketsRaw(requestParameters: CopyTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.taxBracketsCopy === null || requestParameters.taxBracketsCopy === undefined) {
            throw new runtime.RequiredError('taxBracketsCopy','Required parameter requestParameters.taxBracketsCopy was null or undefined when calling copyTaxBrackets.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxBrackets/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaxBracketsCopyToJSON(requestParameters.taxBracketsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>copyTaxBrackets</p>
     * Operation to copy TaxBrackets.
     */
    async copyTaxBrackets(requestParameters: CopyTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTaxBracketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy Tax Types. <p><strong>OperationId:</strong>copyTaxTypes</p>
     * Operation to copy TaxTypes.
     */
    async copyTaxTypesRaw(requestParameters: CopyTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.taxTypesCopy === null || requestParameters.taxTypesCopy === undefined) {
            throw new runtime.RequiredError('taxTypesCopy','Required parameter requestParameters.taxTypesCopy was null or undefined when calling copyTaxTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelTaxTypes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaxTypesCopyToJSON(requestParameters.taxTypesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy Tax Types. <p><strong>OperationId:</strong>copyTaxTypes</p>
     * Operation to copy TaxTypes.
     */
    async copyTaxTypes(requestParameters: CopyTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy transaction codes. <p><strong>OperationId:</strong>copyTransactionCodes</p>
     * Operation to copy TransactionCodes.
     */
    async copyTransactionCodesRaw(requestParameters: CopyTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionCodesCopy === null || requestParameters.transactionCodesCopy === undefined) {
            throw new runtime.RequiredError('transactionCodesCopy','Required parameter requestParameters.transactionCodesCopy was null or undefined when calling copyTransactionCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodes/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionCodesCopyToJSON(requestParameters.transactionCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy transaction codes. <p><strong>OperationId:</strong>copyTransactionCodes</p>
     * Operation to copy TransactionCodes.
     */
    async copyTransactionCodes(requestParameters: CopyTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy transaction groups. <p><strong>OperationId:</strong>copyTransactionGroups</p>
     * Operation to copy TransactionGroups.
     */
    async copyTransactionGroupsRaw(requestParameters: CopyTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionGroupsCopy === null || requestParameters.transactionGroupsCopy === undefined) {
            throw new runtime.RequiredError('transactionGroupsCopy','Required parameter requestParameters.transactionGroupsCopy was null or undefined when calling copyTransactionGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGroups/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionGroupsCopyToJSON(requestParameters.transactionGroupsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy transaction groups. <p><strong>OperationId:</strong>copyTransactionGroups</p>
     * Operation to copy TransactionGroups.
     */
    async copyTransactionGroups(requestParameters: CopyTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to copy transaction subgroups <p><strong>OperationId:</strong>copyTransactionSubgroups</p>
     * Operation to copy TransactionSubgroups.
     */
    async copyTransactionSubgroupsRaw(requestParameters: CopyTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionSubgroupsCopy === null || requestParameters.transactionSubgroupsCopy === undefined) {
            throw new runtime.RequiredError('transactionSubgroupsCopy','Required parameter requestParameters.transactionSubgroupsCopy was null or undefined when calling copyTransactionSubgroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionSubGroups/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionSubgroupsCopyToJSON(requestParameters.transactionSubgroupsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to copy transaction subgroups <p><strong>OperationId:</strong>copyTransactionSubgroups</p>
     * Operation to copy TransactionSubgroups.
     */
    async copyTransactionSubgroups(requestParameters: CopyTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Adjustment Codes. <p><strong>OperationId:</strong>deleteAdjustmentCodes</p>
     * Operation to delete AdjustmentCodes.
     */
    async deleteAdjustmentCodesRaw(requestParameters: DeleteAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.adjustmentCode !== undefined) {
            queryParameters['adjustmentCode'] = requestParameters.adjustmentCode;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Adjustment Codes. <p><strong>OperationId:</strong>deleteAdjustmentCodes</p>
     * Operation to delete AdjustmentCodes.
     */
    async deleteAdjustmentCodes(requestParameters: DeleteAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove articles. <p><strong>OperationId:</strong>deleteArticles</p>
     * Operation to delete Articles.
     */
    async deleteArticlesRaw(requestParameters: DeleteArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteArticles.');
        }
        
        if (requestParameters.articleCodes === null || requestParameters.articleCodes === undefined) {
            throw new runtime.RequiredError('articleCodes','Required parameter requestParameters.articleCodes was null or undefined when calling deleteArticles.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.articleCodes) {
            queryParameters['articleCodes'] = requestParameters.articleCodes;
        }

        if (requestParameters.articleHotelId) {
            queryParameters['articleHotelId'] = requestParameters.articleHotelId;
        }

        if (requestParameters.inactive) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.orderSequence) {
            queryParameters['orderSequence'] = requestParameters.orderSequence;
        }

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.transactionCode) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.availableForPostIt !== undefined) {
            queryParameters['availableForPostIt'] = requestParameters.availableForPostIt;
        }

        if (requestParameters.color !== undefined) {
            queryParameters['color'] = requestParameters.color;
        }

        if (requestParameters.universalProductCode) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove articles. <p><strong>OperationId:</strong>deleteArticles</p>
     * Operation to delete Articles.
     */
    async deleteArticles(requestParameters: DeleteArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteAuthorizationConfigRule</p>
     * Operation to delete AuthorizationConfigRule.
     */
    async deleteAuthorizationConfigRuleRaw(requestParameters: DeleteAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteAuthorizationConfigRule.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClassHotelId !== undefined) {
            queryParameters['roomClassHotelId'] = requestParameters.roomClassHotelId;
        }

        if (requestParameters.roomClassCode !== undefined) {
            queryParameters['roomClassCode'] = requestParameters.roomClassCode;
        }

        if (requestParameters.sourceCodeHotelId !== undefined) {
            queryParameters['sourceCodeHotelId'] = requestParameters.sourceCodeHotelId;
        }

        if (requestParameters.sourceCode !== undefined) {
            queryParameters['sourceCode'] = requestParameters.sourceCode;
        }

        if (requestParameters.rateCategory !== undefined) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.rateCode) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.guaranteeCode) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationConfigRule`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteAuthorizationConfigRule</p>
     * Operation to delete AuthorizationConfigRule.
     */
    async deleteAuthorizationConfigRule(requestParameters: DeleteAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAuthorizationConfigRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Authorizer Groups. <p><strong>OperationId:</strong>deleteAuthorizerGroups</p>
     * Operation to delete AuthorizerGroups.
     */
    async deleteAuthorizerGroupsRaw(requestParameters: DeleteAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.authorizerGroup !== undefined) {
            queryParameters['authorizerGroup'] = requestParameters.authorizerGroup;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Authorizer Groups. <p><strong>OperationId:</strong>deleteAuthorizerGroups</p>
     * Operation to delete AuthorizerGroups.
     */
    async deleteAuthorizerGroups(requestParameters: DeleteAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Delete Budget Forecast information. <p><strong>OperationId:</strong>deleteBudgetForecast</p>
     * Operation to delete BudgetForecast.
     */
    async deleteBudgetForecastRaw(requestParameters: DeleteBudgetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.budgetForecastToDelete === null || requestParameters.budgetForecastToDelete === undefined) {
            throw new runtime.RequiredError('budgetForecastToDelete','Required parameter requestParameters.budgetForecastToDelete was null or undefined when calling deleteBudgetForecast.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/budgetForecast`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetForecastToDeleteToJSON(requestParameters.budgetForecastToDelete),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Delete Budget Forecast information. <p><strong>OperationId:</strong>deleteBudgetForecast</p>
     * Operation to delete BudgetForecast.
     */
    async deleteBudgetForecast(requestParameters: DeleteBudgetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBudgetForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Collecting Agent Taxes. <p><strong>OperationId:</strong>deleteCollectingAgentTaxes</p>
     * Operation to delete CollectingAgentTaxes.
     */
    async deleteCollectingAgentTaxesRaw(requestParameters: DeleteCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCollectingAgentTaxes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.taxCode) {
            queryParameters['taxCode'] = requestParameters.taxCode;
        }

        if (requestParameters.taxTypeCodes) {
            queryParameters['taxTypeCodes'] = requestParameters.taxTypeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/collectingAgentTaxes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Collecting Agent Taxes. <p><strong>OperationId:</strong>deleteCollectingAgentTaxes</p>
     * Operation to delete CollectingAgentTaxes.
     */
    async deleteCollectingAgentTaxes(requestParameters: DeleteCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCollectingAgentTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>deleteCompBucketRedemptionConfig</p>
     * Operation to remove Comp Bucket Redemption Codes.
     */
    async deleteCompBucketRedemptionConfigRaw(requestParameters: DeleteCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.redemptionCode === null || requestParameters.redemptionCode === undefined) {
            throw new runtime.RequiredError('redemptionCode','Required parameter requestParameters.redemptionCode was null or undefined when calling deleteCompBucketRedemptionConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCompBucketRedemptionConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compBucket/redemption/{redemptionCode}`.replace(`{${"redemptionCode"}}`, encodeURIComponent(String(requestParameters.redemptionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>deleteCompBucketRedemptionConfig</p>
     * Operation to remove Comp Bucket Redemption Codes.
     */
    async deleteCompBucketRedemptionConfig(requestParameters: DeleteCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCompBucketRedemptionConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove currency exchange service taxes. <p><strong>OperationId:</strong>deleteCurrencyExchangeServiceTaxes</p>
     * Operation to delete CurrencyExchangeServiceTaxes.
     */
    async deleteCurrencyExchangeServiceTaxesRaw(requestParameters: DeleteCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCurrencyExchangeServiceTaxes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.currencyExchangeServiceTaxCode) {
            queryParameters['currencyExchangeServiceTaxCode'] = requestParameters.currencyExchangeServiceTaxCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove currency exchange service taxes. <p><strong>OperationId:</strong>deleteCurrencyExchangeServiceTaxes</p>
     * Operation to delete CurrencyExchangeServiceTaxes.
     */
    async deleteCurrencyExchangeServiceTaxes(requestParameters: DeleteCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Custom Charge Exemptions Config. <p><strong>OperationId:</strong>deleteCustomChargeExemptionsConfig</p>
     * Operation to remove Custom Charge Exemptions Config.
     */
    async deleteCustomChargeExemptionsConfigRaw(requestParameters: DeleteCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling deleteCustomChargeExemptionsConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCustomChargeExemptionsConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges/exemptions/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Custom Charge Exemptions Config. <p><strong>OperationId:</strong>deleteCustomChargeExemptionsConfig</p>
     * Operation to remove Custom Charge Exemptions Config.
     */
    async deleteCustomChargeExemptionsConfig(requestParameters: DeleteCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCustomChargeExemptionsConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Custom Charge Codes. <p><strong>OperationId:</strong>deleteCustomChargesConfig</p>
     * Operation to remove Custom Charge Codes.
     */
    async deleteCustomChargesConfigRaw(requestParameters: DeleteCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling deleteCustomChargesConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCustomChargesConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Custom Charge Codes. <p><strong>OperationId:</strong>deleteCustomChargesConfig</p>
     * Operation to remove Custom Charge Codes.
     */
    async deleteCustomChargesConfig(requestParameters: DeleteCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCustomChargesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteCustomNumberConfig</p>
     * Operation to remove custom number config.
     */
    async deleteCustomNumberConfigRaw(requestParameters: DeleteCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling deleteCustomNumberConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customNumbers/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteCustomNumberConfig</p>
     * Operation to remove custom number config.
     */
    async deleteCustomNumberConfig(requestParameters: DeleteCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Delete Exchange Rates. <p><strong>OperationId:</strong>deleteExchangeRates</p>
     * Operation to delete ExchangeRates.
     */
    async deleteExchangeRatesRaw(requestParameters: DeleteExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.exchangeRates === null || requestParameters.exchangeRates === undefined) {
            throw new runtime.RequiredError('exchangeRates','Required parameter requestParameters.exchangeRates was null or undefined when calling deleteExchangeRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exchangeRates`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeRatesToJSON(requestParameters.exchangeRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Delete Exchange Rates. <p><strong>OperationId:</strong>deleteExchangeRates</p>
     * Operation to delete ExchangeRates.
     */
    async deleteExchangeRates(requestParameters: DeleteExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteExpenseArrangementCodes</p>
     * Operation to delete ExpenseArrangementCodes.
     */
    async deleteExpenseArrangementCodesRaw(requestParameters: DeleteExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteExpenseArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteExpenseArrangementCodes</p>
     * Operation to delete ExpenseArrangementCodes.
     */
    async deleteExpenseArrangementCodes(requestParameters: DeleteExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Fiscal Folio Parameters. <p><strong>OperationId:</strong>deleteFiscalFolioParameters</p>
     * Operation to delete FiscalFolioParameters.
     */
    async deleteFiscalFolioParametersRaw(requestParameters: DeleteFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.partner) {
            queryParameters['partner'] = requestParameters.partner;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalFolioParameters`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Fiscal Folio Parameters. <p><strong>OperationId:</strong>deleteFiscalFolioParameters</p>
     * Operation to delete FiscalFolioParameters.
     */
    async deleteFiscalFolioParameters(requestParameters: DeleteFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFiscalFolioParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Fiscal Periods. <p><strong>OperationId:</strong>deleteFiscalPeriods</p>
     * Operation to delete FiscalPeriods.
     */
    async deleteFiscalPeriodsRaw(requestParameters: DeleteFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteFiscalPeriods.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.yearId) {
            queryParameters['yearId'] = requestParameters.yearId;
        }

        if (requestParameters.startDate) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalPeriods`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Fiscal Periods. <p><strong>OperationId:</strong>deleteFiscalPeriods</p>
     * Operation to delete FiscalPeriods.
     */
    async deleteFiscalPeriods(requestParameters: DeleteFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFiscalPeriodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Fiscal Years. <p><strong>OperationId:</strong>deleteFiscalYears</p>
     * Operation to delete FiscalYears.
     */
    async deleteFiscalYearsRaw(requestParameters: DeleteFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteFiscalYears.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.yearId) {
            queryParameters['yearId'] = requestParameters.yearId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalYears`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Fiscal Years. <p><strong>OperationId:</strong>deleteFiscalYears</p>
     * Operation to delete FiscalYears.
     */
    async deleteFiscalYears(requestParameters: DeleteFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFiscalYearsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteFolioArrangementCodes</p>
     * Operation to delete FolioArrangementCodes.
     */
    async deleteFolioArrangementCodesRaw(requestParameters: DeleteFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteFolioArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioArrangementCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteFolioArrangementCodes</p>
     * Operation to delete FolioArrangementCodes.
     */
    async deleteFolioArrangementCodes(requestParameters: DeleteFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFolioArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove folio print queues. <p><strong>OperationId:</strong>deleteFolioPrintQueues</p>
     * Operation to delete FolioPrintQueues.
     */
    async deleteFolioPrintQueuesRaw(requestParameters: DeleteFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteFolioPrintQueues.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.queueName) {
            queryParameters['queueName'] = requestParameters.queueName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioPrintQueues`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove folio print queues. <p><strong>OperationId:</strong>deleteFolioPrintQueues</p>
     * Operation to delete FolioPrintQueues.
     */
    async deleteFolioPrintQueues(requestParameters: DeleteFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFolioPrintQueuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Folio Type Names. <p><strong>OperationId:</strong>deleteFolioTypesConfig</p>
     * Operation to delete FolioTypesConfig.
     */
    async deleteFolioTypesConfigRaw(requestParameters: DeleteFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteFolioTypesConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypesConfig`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Folio Type Names. <p><strong>OperationId:</strong>deleteFolioTypesConfig</p>
     * Operation to delete FolioTypesConfig.
     */
    async deleteFolioTypesConfig(requestParameters: DeleteFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteFolioTypesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Foreign Currencies. <p><strong>OperationId:</strong>deleteForeignCurrencies</p>
     * Operation to delete ForeignCurrencies.
     */
    async deleteForeignCurrenciesRaw(requestParameters: DeleteForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.currencyCodes) {
            queryParameters['currencyCodes'] = requestParameters.currencyCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/foreignCurrencies`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Foreign Currencies. <p><strong>OperationId:</strong>deleteForeignCurrencies</p>
     * Operation to delete ForeignCurrencies.
     */
    async deleteForeignCurrencies(requestParameters: DeleteForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteForeignCurrenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Delete Global Exchange Rates. <p><strong>OperationId:</strong>deleteGlobalExchangeRates</p>
     * Operation to delete GlobalExchangeRates.
     */
    async deleteGlobalExchangeRatesRaw(requestParameters: DeleteGlobalExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.exchangeRates === null || requestParameters.exchangeRates === undefined) {
            throw new runtime.RequiredError('exchangeRates','Required parameter requestParameters.exchangeRates was null or undefined when calling deleteGlobalExchangeRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalExchangeRates`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeRatesToJSON(requestParameters.exchangeRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Delete Global Exchange Rates. <p><strong>OperationId:</strong>deleteGlobalExchangeRates</p>
     * Operation to delete GlobalExchangeRates.
     */
    async deleteGlobalExchangeRates(requestParameters: DeleteGlobalExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGlobalExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteGroupArrangementCodes</p>
     * Operation to delete GroupArrangementCodes.
     */
    async deleteGroupArrangementCodesRaw(requestParameters: DeleteGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/groupArrangementCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteGroupArrangementCodes</p>
     * Operation to delete GroupArrangementCodes.
     */
    async deleteGroupArrangementCodes(requestParameters: DeleteGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGroupArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove No Show Posting Rules. <p><strong>OperationId:</strong>deleteNoShowPostingRules</p>
     * Operation to delete NoShowPostingRules.
     */
    async deleteNoShowPostingRulesRaw(requestParameters: DeleteNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteNoShowPostingRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.reservationType) {
            queryParameters['reservationType'] = requestParameters.reservationType;
        }

        if (requestParameters.sourceCode) {
            queryParameters['sourceCode'] = requestParameters.sourceCode;
        }

        if (requestParameters.postingRule) {
            queryParameters['postingRule'] = requestParameters.postingRule;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noShowPostingRules`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove No Show Posting Rules. <p><strong>OperationId:</strong>deleteNoShowPostingRules</p>
     * Operation to delete NoShowPostingRules.
     */
    async deleteNoShowPostingRules(requestParameters: DeleteNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteNoShowPostingRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deletePackageArrangementCodes</p>
     * Operation to delete PackageArrangementCodes.
     */
    async deletePackageArrangementCodesRaw(requestParameters: DeletePackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePackageArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageArrangementCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deletePackageArrangementCodes</p>
     * Operation to delete PackageArrangementCodes.
     */
    async deletePackageArrangementCodes(requestParameters: DeletePackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePackageArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Revenue Bucket Codes. <p><strong>OperationId:</strong>deleteRevenueBucketCodes</p>
     * Operation to delete RevenueBucketCodes.
     */
    async deleteRevenueBucketCodesRaw(requestParameters: DeleteRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRevenueBucketCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.revenueBucketType) {
            queryParameters['revenueBucketType'] = requestParameters.revenueBucketType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Revenue Bucket Codes. <p><strong>OperationId:</strong>deleteRevenueBucketCodes</p>
     * Operation to delete RevenueBucketCodes.
     */
    async deleteRevenueBucketCodes(requestParameters: DeleteRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRevenueBucketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Revenue Bucket Types. <p><strong>OperationId:</strong>deleteRevenueBucketTypes</p>
     * Operation to delete RevenueBucketTypes.
     */
    async deleteRevenueBucketTypesRaw(requestParameters: DeleteRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRevenueBucketTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketTypes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Revenue Bucket Types. <p><strong>OperationId:</strong>deleteRevenueBucketTypes</p>
     * Operation to delete RevenueBucketTypes.
     */
    async deleteRevenueBucketTypes(requestParameters: DeleteRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRevenueBucketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteRevenueTypeMapping</p>
     * Operation to delete RevenueTypeMapping.
     */
    async deleteRevenueTypeMappingRaw(requestParameters: DeleteRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRevenueTypeMapping.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.revenueTypeMappingID !== undefined) {
            queryParameters['revenueTypeMappingID'] = requestParameters.revenueTypeMappingID;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.revenueType !== undefined) {
            queryParameters['revenueType'] = requestParameters.revenueType;
        }

        if (requestParameters.eventType !== undefined) {
            queryParameters['eventType'] = requestParameters.eventType;
        }

        if (requestParameters.space !== undefined) {
            queryParameters['space'] = requestParameters.space;
        }

        if (requestParameters.transactionCode !== undefined) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        if (requestParameters.cateringOnly !== undefined) {
            queryParameters['cateringOnly'] = requestParameters.cateringOnly;
        }

        if (requestParameters.serviceCharge !== undefined) {
            queryParameters['serviceCharge'] = requestParameters.serviceCharge;
        }

        if (requestParameters.serviceChargeTrxCode !== undefined) {
            queryParameters['serviceChargeTrxCode'] = requestParameters.serviceChargeTrxCode;
        }

        if (requestParameters.serviceChargeCalulationMethod !== undefined) {
            queryParameters['serviceChargeCalulationMethod'] = requestParameters.serviceChargeCalulationMethod;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypeMapping`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteRevenueTypeMapping</p>
     * Operation to delete RevenueTypeMapping.
     */
    async deleteRevenueTypeMapping(requestParameters: DeleteRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRevenueTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove routing instructions. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Operation to delete RoutingInstructions.
     */
    async deleteRoutingInstructionsRaw(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteRoutingInstructions.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/routingInstructions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove routing instructions. <p><strong>OperationId:</strong>deleteRoutingInstructions</p>
     * Operation to delete RoutingInstructions.
     */
    async deleteRoutingInstructions(requestParameters: DeleteRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>deleteTaxBrackets</p>
     * Operation to delete TaxBrackets.
     */
    async deleteTaxBracketsRaw(requestParameters: DeleteTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTaxBrackets.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.taxPercentage) {
            queryParameters['taxPercentage'] = requestParameters.taxPercentage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxBrackets`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>deleteTaxBrackets</p>
     * Operation to delete TaxBrackets.
     */
    async deleteTaxBrackets(requestParameters: DeleteTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTaxBracketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Tax Types. <p><strong>OperationId:</strong>deleteTaxTypes</p>
     * Operation to delete TaxTypes.
     */
    async deleteTaxTypesRaw(requestParameters: DeleteTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.taxTypeCode === null || requestParameters.taxTypeCode === undefined) {
            throw new runtime.RequiredError('taxTypeCode','Required parameter requestParameters.taxTypeCode was null or undefined when calling deleteTaxTypes.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTaxTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.taxTypeCode) {
            queryParameters['taxTypeCode'] = requestParameters.taxTypeCode;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelTaxTypes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Tax Types. <p><strong>OperationId:</strong>deleteTaxTypes</p>
     * Operation to delete TaxTypes.
     */
    async deleteTaxTypes(requestParameters: DeleteTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to remove template custom number configuration. <p><strong>OperationId:</strong>deleteTemplateCustomNumber</p>
     * Operation to remove template custom number configuration.
     */
    async deleteTemplateCustomNumberRaw(requestParameters: DeleteTemplateCustomNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.configurationId !== undefined) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/template/customNumbers`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to remove template custom number configuration. <p><strong>OperationId:</strong>deleteTemplateCustomNumber</p>
     * Operation to remove template custom number configuration.
     */
    async deleteTemplateCustomNumber(requestParameters: DeleteTemplateCustomNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateCustomNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to remove template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use deleteTemplateCustomNumber instead</mark></strong></p> <p><strong>OperationId:</strong>deleteTemplateCustomNumberConfig</p>
     * Operation to remove template custom number configuration.
     * @deprecated
     */
    async deleteTemplateCustomNumberConfigRaw(requestParameters: DeleteTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling deleteTemplateCustomNumberConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTemplateCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/template/customNumbers/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to remove template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use deleteTemplateCustomNumber instead</mark></strong></p> <p><strong>OperationId:</strong>deleteTemplateCustomNumberConfig</p>
     * Operation to remove template custom number configuration.
     * @deprecated
     */
    async deleteTemplateCustomNumberConfig(requestParameters: DeleteTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove template transaction codes. <p><strong>OperationId:</strong>deleteTemplateTransactionCodes</p>
     * Operation to delete TemplateTransactionCodes.
     */
    async deleteTemplateTransactionCodesRaw(requestParameters: DeleteTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionCodes === null || requestParameters.transactionCodes === undefined) {
            throw new runtime.RequiredError('transactionCodes','Required parameter requestParameters.transactionCodes was null or undefined when calling deleteTemplateTransactionCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove template transaction codes. <p><strong>OperationId:</strong>deleteTemplateTransactionCodes</p>
     * Operation to delete TemplateTransactionCodes.
     */
    async deleteTemplateTransactionCodes(requestParameters: DeleteTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove existing template transaction group. <p><strong>OperationId:</strong>deleteTemplateTransactionGroups</p>
     * Operation to delete TemplateTransactionGroups.
     */
    async deleteTemplateTransactionGroupsRaw(requestParameters: DeleteTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTransactionCodes === null || requestParameters.templateTransactionCodes === undefined) {
            throw new runtime.RequiredError('templateTransactionCodes','Required parameter requestParameters.templateTransactionCodes was null or undefined when calling deleteTemplateTransactionGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.templateTransactionCodes) {
            queryParameters['templateTransactionCodes'] = requestParameters.templateTransactionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove existing template transaction group. <p><strong>OperationId:</strong>deleteTemplateTransactionGroups</p>
     * Operation to delete TemplateTransactionGroups.
     */
    async deleteTemplateTransactionGroups(requestParameters: DeleteTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove template transaction subgroups <p><strong>OperationId:</strong>deleteTemplateTransactionSubgroups</p>
     * Operation to delete TemplateTransactionSubgroups.
     */
    async deleteTemplateTransactionSubgroupsRaw(requestParameters: DeleteTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.subgroup) {
            queryParameters['subgroup'] = requestParameters.subgroup;
        }

        if (requestParameters.group) {
            queryParameters['group'] = requestParameters.group;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionSubGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove template transaction subgroups <p><strong>OperationId:</strong>deleteTemplateTransactionSubgroups</p>
     * Operation to delete TemplateTransactionSubgroups.
     */
    async deleteTemplateTransactionSubgroups(requestParameters: DeleteTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove transaction codes. <p><strong>OperationId:</strong>deleteTransactionCodes</p>
     * Operation to delete TransactionCodes.
     */
    async deleteTransactionCodesRaw(requestParameters: DeleteTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionCode === null || requestParameters.transactionCode === undefined) {
            throw new runtime.RequiredError('transactionCode','Required parameter requestParameters.transactionCode was null or undefined when calling deleteTransactionCodes.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTransactionCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodes/{transactionCode}/transactionCodes`.replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove transaction codes. <p><strong>OperationId:</strong>deleteTransactionCodes</p>
     * Operation to delete TransactionCodes.
     */
    async deleteTransactionCodes(requestParameters: DeleteTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Transaction Discounts. <p><strong>OperationId:</strong>deleteTransactionDiscounts</p>
     * Operation to delete TransactionDiscounts.
     */
    async deleteTransactionDiscountsRaw(requestParameters: DeleteTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteTransactionDiscounts.');
        }
        
        if (requestParameters.transactionDiscountCode === null || requestParameters.transactionDiscountCode === undefined) {
            throw new runtime.RequiredError('transactionDiscountCode','Required parameter requestParameters.transactionDiscountCode was null or undefined when calling deleteTransactionDiscounts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionDiscounts/{transactionDiscountCode}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"transactionDiscountCode"}}`, encodeURIComponent(String(requestParameters.transactionDiscountCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Transaction Discounts. <p><strong>OperationId:</strong>deleteTransactionDiscounts</p>
     * Operation to delete TransactionDiscounts.
     */
    async deleteTransactionDiscounts(requestParameters: DeleteTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTransactionDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove transaction groups. <p><strong>OperationId:</strong>deleteTransactionGroups</p>
     * Operation to delete TransactionGroups.
     */
    async deleteTransactionGroupsRaw(requestParameters: DeleteTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove transaction groups. <p><strong>OperationId:</strong>deleteTransactionGroups</p>
     * Operation to delete TransactionGroups.
     */
    async deleteTransactionGroups(requestParameters: DeleteTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove transaction sub groups. <p><strong>OperationId:</strong>deleteTransactionSubgroups</p>
     * Operation to delete TransactionSubgroups.
     */
    async deleteTransactionSubgroupsRaw(requestParameters: DeleteTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.subgroup) {
            queryParameters['subgroup'] = requestParameters.subgroup;
        }

        if (requestParameters.group) {
            queryParameters['group'] = requestParameters.group;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionSubGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove transaction sub groups. <p><strong>OperationId:</strong>deleteTransactionSubgroups</p>
     * Operation to delete TransactionSubgroups.
     */
    async deleteTransactionSubgroups(requestParameters: DeleteTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Adjustment Codes. <p><strong>OperationId:</strong>getAdjustmentCodes</p>
     * Operation to fetch AdjustmentCodes.
     */
    async getAdjustmentCodesRaw(requestParameters: GetAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdjustmentCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getAdjustmentCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.adjustmentCodes) {
            queryParameters['adjustmentCodes'] = requestParameters.adjustmentCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdjustmentCodesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Adjustment Codes. <p><strong>OperationId:</strong>getAdjustmentCodes</p>
     * Operation to fetch AdjustmentCodes.
     */
    async getAdjustmentCodes(requestParameters: GetAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdjustmentCodes> {
        const response = await this.getAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return articles for one or multiple properties based on search criteria such as hotelIds, transactionCodes, articleCodes, etc. One transaction code can sometimes serve as an umbrella for multiple articles, which can be posted using that transaction code.  For example, a single mini bar food transaction code might cover potato chips, crackers, peanuts, pretzels, and so on.<p><strong>OperationId:</strong>getArticles</p>
     * Get articles
     */
    async getArticlesRaw(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticlesInfo>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getArticles.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.articleCodes) {
            queryParameters['articleCodes'] = requestParameters.articleCodes;
        }

        if (requestParameters.universalProductCode !== undefined) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to return articles for one or multiple properties based on search criteria such as hotelIds, transactionCodes, articleCodes, etc. One transaction code can sometimes serve as an umbrella for multiple articles, which can be posted using that transaction code.  For example, a single mini bar food transaction code might cover potato chips, crackers, peanuts, pretzels, and so on.<p><strong>OperationId:</strong>getArticles</p>
     * Get articles
     */
    async getArticles(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticlesInfo> {
        const response = await this.getArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getAuthorizationConfigRules</p>
     * Operation to fetch AuthorizationConfigRules.
     */
    async getAuthorizationConfigRulesRaw(requestParameters: GetAuthorizationConfigRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizationConfigRulesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationConfigRules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationConfigRulesInfoFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getAuthorizationConfigRules</p>
     * Operation to fetch AuthorizationConfigRules.
     */
    async getAuthorizationConfigRules(requestParameters: GetAuthorizationConfigRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizationConfigRulesInfo> {
        const response = await this.getAuthorizationConfigRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getAuthorizerGroups</p>
     * Operation to fetch AuthorizerGroups.
     */
    async getAuthorizerGroupsRaw(requestParameters: GetAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizerGroups>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getAuthorizerGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.authorizerGroupsCodes) {
            queryParameters['authorizerGroupsCodes'] = requestParameters.authorizerGroupsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizerGroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getAuthorizerGroups</p>
     * Operation to fetch AuthorizerGroups.
     */
    async getAuthorizerGroups(requestParameters: GetAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizerGroups> {
        const response = await this.getAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The operation returns a next available Cashier Number to be used while creating a new Cashier. <p><strong>OperationId:</strong>getAvailableCashierNumber</p>
     * Operation to fetch AvailableCashierNumber.
     */
    async getAvailableCashierNumberRaw(requestParameters: GetAvailableCashierNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierNumber>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers/nextAvailable`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierNumberFromJSON(jsonValue));
    }

    /**
     * The operation returns a next available Cashier Number to be used while creating a new Cashier. <p><strong>OperationId:</strong>getAvailableCashierNumber</p>
     * Operation to fetch AvailableCashierNumber.
     */
    async getAvailableCashierNumber(requestParameters: GetAvailableCashierNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierNumber> {
        const response = await this.getAvailableCashierNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Budget Forecast information. <p><strong>OperationId:</strong>getBudgetForecast</p>
     * Operation to fetch BudgetForecast.
     */
    async getBudgetForecastRaw(requestParameters: GetBudgetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetForecastInformation>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.marketSegmentNights !== undefined) {
            queryParameters['marketSegmentNights'] = requestParameters.marketSegmentNights;
        }

        if (requestParameters.marketSegmentRevenue !== undefined) {
            queryParameters['marketSegmentRevenue'] = requestParameters.marketSegmentRevenue;
        }

        if (requestParameters.marketSegmentABVariance !== undefined) {
            queryParameters['marketSegmentABVariance'] = requestParameters.marketSegmentABVariance;
        }

        if (requestParameters.marketSegmentAFVariance !== undefined) {
            queryParameters['marketSegmentAFVariance'] = requestParameters.marketSegmentAFVariance;
        }

        if (requestParameters.marketSegmentActual !== undefined) {
            queryParameters['marketSegmentActual'] = requestParameters.marketSegmentActual;
        }

        if (requestParameters.marketSegmentBudget !== undefined) {
            queryParameters['marketSegmentBudget'] = requestParameters.marketSegmentBudget;
        }

        if (requestParameters.marketSegmentFBVariance !== undefined) {
            queryParameters['marketSegmentFBVariance'] = requestParameters.marketSegmentFBVariance;
        }

        if (requestParameters.marketSegmentForecast !== undefined) {
            queryParameters['marketSegmentForecast'] = requestParameters.marketSegmentForecast;
        }

        if (requestParameters.marketSegmentMarketCodes) {
            queryParameters['marketSegmentMarketCodes'] = requestParameters.marketSegmentMarketCodes;
        }

        if (requestParameters.rateSegmentNights !== undefined) {
            queryParameters['rateSegmentNights'] = requestParameters.rateSegmentNights;
        }

        if (requestParameters.rateSegmentRevenue !== undefined) {
            queryParameters['rateSegmentRevenue'] = requestParameters.rateSegmentRevenue;
        }

        if (requestParameters.rateSegmentABVariance !== undefined) {
            queryParameters['rateSegmentABVariance'] = requestParameters.rateSegmentABVariance;
        }

        if (requestParameters.rateSegmentAFVariance !== undefined) {
            queryParameters['rateSegmentAFVariance'] = requestParameters.rateSegmentAFVariance;
        }

        if (requestParameters.rateSegmentActual !== undefined) {
            queryParameters['rateSegmentActual'] = requestParameters.rateSegmentActual;
        }

        if (requestParameters.rateSegmentBudget !== undefined) {
            queryParameters['rateSegmentBudget'] = requestParameters.rateSegmentBudget;
        }

        if (requestParameters.rateSegmentFBVariance !== undefined) {
            queryParameters['rateSegmentFBVariance'] = requestParameters.rateSegmentFBVariance;
        }

        if (requestParameters.rateSegmentForecast !== undefined) {
            queryParameters['rateSegmentForecast'] = requestParameters.rateSegmentForecast;
        }

        if (requestParameters.rateSegmentRateCodes) {
            queryParameters['rateSegmentRateCodes'] = requestParameters.rateSegmentRateCodes;
        }

        if (requestParameters.customSegmentCustomValue !== undefined) {
            queryParameters['customSegmentCustomValue'] = requestParameters.customSegmentCustomValue;
        }

        if (requestParameters.customSegmentABVariance !== undefined) {
            queryParameters['customSegmentABVariance'] = requestParameters.customSegmentABVariance;
        }

        if (requestParameters.customSegmentAFVariance !== undefined) {
            queryParameters['customSegmentAFVariance'] = requestParameters.customSegmentAFVariance;
        }

        if (requestParameters.customSegmentActual !== undefined) {
            queryParameters['customSegmentActual'] = requestParameters.customSegmentActual;
        }

        if (requestParameters.customSegmentBudget !== undefined) {
            queryParameters['customSegmentBudget'] = requestParameters.customSegmentBudget;
        }

        if (requestParameters.customSegmentFBVariance !== undefined) {
            queryParameters['customSegmentFBVariance'] = requestParameters.customSegmentFBVariance;
        }

        if (requestParameters.customSegmentForecast !== undefined) {
            queryParameters['customSegmentForecast'] = requestParameters.customSegmentForecast;
        }

        if (requestParameters.customSegmentCustomCodes) {
            queryParameters['customSegmentCustomCodes'] = requestParameters.customSegmentCustomCodes;
        }

        if (requestParameters.transactionSegmentRevenue !== undefined) {
            queryParameters['transactionSegmentRevenue'] = requestParameters.transactionSegmentRevenue;
        }

        if (requestParameters.transactionSegmentABVariance !== undefined) {
            queryParameters['transactionSegmentABVariance'] = requestParameters.transactionSegmentABVariance;
        }

        if (requestParameters.transactionSegmentAFVariance !== undefined) {
            queryParameters['transactionSegmentAFVariance'] = requestParameters.transactionSegmentAFVariance;
        }

        if (requestParameters.transactionSegmentActual !== undefined) {
            queryParameters['transactionSegmentActual'] = requestParameters.transactionSegmentActual;
        }

        if (requestParameters.transactionSegmentBudget !== undefined) {
            queryParameters['transactionSegmentBudget'] = requestParameters.transactionSegmentBudget;
        }

        if (requestParameters.transactionSegmentFBVariance !== undefined) {
            queryParameters['transactionSegmentFBVariance'] = requestParameters.transactionSegmentFBVariance;
        }

        if (requestParameters.transactionSegmentForecast !== undefined) {
            queryParameters['transactionSegmentForecast'] = requestParameters.transactionSegmentForecast;
        }

        if (requestParameters.transactionSegmentTransactionCodes) {
            queryParameters['transactionSegmentTransactionCodes'] = requestParameters.transactionSegmentTransactionCodes;
        }

        if (requestParameters.transactionSegmentTransactionCodeGrp !== undefined) {
            queryParameters['transactionSegmentTransactionCodeGrp'] = requestParameters.transactionSegmentTransactionCodeGrp;
        }

        if (requestParameters.cateringSegmentCovers !== undefined) {
            queryParameters['cateringSegmentCovers'] = requestParameters.cateringSegmentCovers;
        }

        if (requestParameters.cateringSegmentRevenue !== undefined) {
            queryParameters['cateringSegmentRevenue'] = requestParameters.cateringSegmentRevenue;
        }

        if (requestParameters.cateringSegmentABVariance !== undefined) {
            queryParameters['cateringSegmentABVariance'] = requestParameters.cateringSegmentABVariance;
        }

        if (requestParameters.cateringSegmentAFVariance !== undefined) {
            queryParameters['cateringSegmentAFVariance'] = requestParameters.cateringSegmentAFVariance;
        }

        if (requestParameters.cateringSegmentActual !== undefined) {
            queryParameters['cateringSegmentActual'] = requestParameters.cateringSegmentActual;
        }

        if (requestParameters.cateringSegmentBudget !== undefined) {
            queryParameters['cateringSegmentBudget'] = requestParameters.cateringSegmentBudget;
        }

        if (requestParameters.cateringSegmentFBVariance !== undefined) {
            queryParameters['cateringSegmentFBVariance'] = requestParameters.cateringSegmentFBVariance;
        }

        if (requestParameters.cateringSegmentForecast !== undefined) {
            queryParameters['cateringSegmentForecast'] = requestParameters.cateringSegmentForecast;
        }

        if (requestParameters.cateringSegmentCateringCodeGrp !== undefined) {
            queryParameters['cateringSegmentCateringCodeGrp'] = requestParameters.cateringSegmentCateringCodeGrp;
        }

        if (requestParameters.cateringSegmentCateringCodes) {
            queryParameters['cateringSegmentCateringCodes'] = requestParameters.cateringSegmentCateringCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/budgetForecast`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetForecastInformationFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Budget Forecast information. <p><strong>OperationId:</strong>getBudgetForecast</p>
     * Operation to fetch BudgetForecast.
     */
    async getBudgetForecast(requestParameters: GetBudgetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetForecastInformation> {
        const response = await this.getBudgetForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return Cashier information based on search criteria such as cashierIDs, limit, name. <p><strong>OperationId:</strong>getCashiers</p>
     * Get cashiers
     */
    async getCashiersRaw(requestParameters: GetCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashiersDetails>> {
        if (requestParameters.cashierIDs === null || requestParameters.cashierIDs === undefined) {
            throw new runtime.RequiredError('cashierIDs','Required parameter requestParameters.cashierIDs was null or undefined when calling getCashiers.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.cashierIDs) {
            queryParameters['cashierIDs'] = requestParameters.cashierIDs;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.appUser !== undefined) {
            queryParameters['appUser'] = requestParameters.appUser;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashierDetails/cashiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashiersDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to return Cashier information based on search criteria such as cashierIDs, limit, name. <p><strong>OperationId:</strong>getCashiers</p>
     * Get cashiers
     */
    async getCashiers(requestParameters: GetCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashiersDetails> {
        const response = await this.getCashiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Collecting Agent Taxes. <p><strong>OperationId:</strong>getCollectingAgentTaxes</p>
     * Operation to fetch CollectingAgentTaxes.
     */
    async getCollectingAgentTaxesRaw(requestParameters: GetCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CollectingAgentTaxes>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.taxCodes) {
            queryParameters['taxCodes'] = requestParameters.taxCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/collectingAgentTaxes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectingAgentTaxesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Collecting Agent Taxes. <p><strong>OperationId:</strong>getCollectingAgentTaxes</p>
     * Operation to fetch CollectingAgentTaxes.
     */
    async getCollectingAgentTaxes(requestParameters: GetCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CollectingAgentTaxes> {
        const response = await this.getCollectingAgentTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getCompAuthorizers</p>
     * Operation to fetch CompAuthorizers.
     */
    async getCompAuthorizersRaw(requestParameters: GetCompAuthorizersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompAuthorizers>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCompAuthorizers.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.includeCompAuthorizerDetails !== undefined) {
            queryParameters['includeCompAuthorizerDetails'] = requestParameters.includeCompAuthorizerDetails;
        }

        if (requestParameters.includeInactiveAuthorizers !== undefined) {
            queryParameters['includeInactiveAuthorizers'] = requestParameters.includeInactiveAuthorizers;
        }

        if (requestParameters.includeTerminatedAuthorizers !== undefined) {
            queryParameters['includeTerminatedAuthorizers'] = requestParameters.includeTerminatedAuthorizers;
        }

        if (requestParameters.authorizer !== undefined) {
            queryParameters['authorizer'] = requestParameters.authorizer;
        }

        if (requestParameters.firstName !== undefined) {
            queryParameters['firstName'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['lastName'] = requestParameters.lastName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compAuthorizers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompAuthorizersFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Authorizer Groups. <p><strong>OperationId:</strong>getCompAuthorizers</p>
     * Operation to fetch CompAuthorizers.
     */
    async getCompAuthorizers(requestParameters: GetCompAuthorizersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompAuthorizers> {
        const response = await this.getCompAuthorizersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>getCompBucketRedemptionCodes</p>
     * Operation to fetch Comp Bucket Redemption Codes.
     */
    async getCompBucketRedemptionCodesRaw(requestParameters: GetCompBucketRedemptionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompBucketRedemptionConfigDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCompBucketRedemptionCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.redemptionCode) {
            queryParameters['redemptionCode'] = requestParameters.redemptionCode;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compBucket/redemption`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompBucketRedemptionConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>getCompBucketRedemptionCodes</p>
     * Operation to fetch Comp Bucket Redemption Codes.
     */
    async getCompBucketRedemptionCodes(requestParameters: GetCompBucketRedemptionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompBucketRedemptionConfigDetails> {
        const response = await this.getCompBucketRedemptionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch Comp Bucket Redemption Codes.<br><p><strong><mark>This API is deprecated. Please use getCompBucketRedemptionCodes instead</mark></strong></p> <p><strong>OperationId:</strong>getCompBucketRedemptionConfig</p>
     * Operation to fetch Comp Bucket Redemption Codes.
     * @deprecated
     */
    async getCompBucketRedemptionConfigRaw(requestParameters: GetCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompBucketRedemptionConfigDetails>> {
        if (requestParameters.redemptionCode === null || requestParameters.redemptionCode === undefined) {
            throw new runtime.RequiredError('redemptionCode','Required parameter requestParameters.redemptionCode was null or undefined when calling getCompBucketRedemptionConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCompBucketRedemptionConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compBucket/redemption/{redemptionCode}`.replace(`{${"redemptionCode"}}`, encodeURIComponent(String(requestParameters.redemptionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompBucketRedemptionConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch Comp Bucket Redemption Codes.<br><p><strong><mark>This API is deprecated. Please use getCompBucketRedemptionCodes instead</mark></strong></p> <p><strong>OperationId:</strong>getCompBucketRedemptionConfig</p>
     * Operation to fetch Comp Bucket Redemption Codes.
     * @deprecated
     */
    async getCompBucketRedemptionConfig(requestParameters: GetCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompBucketRedemptionConfigDetails> {
        const response = await this.getCompBucketRedemptionConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Fetch Comp TYpes. <p><strong>OperationId:</strong>getCompTypes</p>
     * Operation to Fetch Comp Types.
     */
    async getCompTypesRaw(requestParameters: GetCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompTypesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCompTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.compTypeCode !== undefined) {
            queryParameters['compTypeCode'] = requestParameters.compTypeCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Operation to Fetch Comp TYpes. <p><strong>OperationId:</strong>getCompTypes</p>
     * Operation to Fetch Comp Types.
     */
    async getCompTypes(requestParameters: GetCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompTypesDetails> {
        const response = await this.getCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch currency exchange service taxes. <p><strong>OperationId:</strong>getCurrencyExchangeServiceTaxes</p>
     * Operation to fetch CurrencyExchangeServiceTaxes.
     */
    async getCurrencyExchangeServiceTaxesRaw(requestParameters: GetCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrencyExchangeServiceTaxes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getCurrencyExchangeServiceTaxes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrencyExchangeServiceTaxesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch currency exchange service taxes. <p><strong>OperationId:</strong>getCurrencyExchangeServiceTaxes</p>
     * Operation to fetch CurrencyExchangeServiceTaxes.
     */
    async getCurrencyExchangeServiceTaxes(requestParameters: GetCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrencyExchangeServiceTaxes> {
        const response = await this.getCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch Custom Charge Codes. <p><strong>OperationId:</strong>getCustomChargeCodes</p>
     * Operation to fetch Custom Charge Codes.
     */
    async getCustomChargeCodesRaw(requestParameters: GetCustomChargeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomChargesConfigDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCustomChargeCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.configurationId) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomChargesConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch Custom Charge Codes. <p><strong>OperationId:</strong>getCustomChargeCodes</p>
     * Operation to fetch Custom Charge Codes.
     */
    async getCustomChargeCodes(requestParameters: GetCustomChargeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomChargesConfigDetails> {
        const response = await this.getCustomChargeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch Custom Charge Exemptions Config. <p><strong>OperationId:</strong>getCustomChargeExemptions</p>
     * Operation to fetch Custom Charge Exemptions Config.
     */
    async getCustomChargeExemptionsRaw(requestParameters: GetCustomChargeExemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomChargeExemptionsConfig>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.configurationId) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/customCharges/exemptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomChargeExemptionsConfigFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch Custom Charge Exemptions Config. <p><strong>OperationId:</strong>getCustomChargeExemptions</p>
     * Operation to fetch Custom Charge Exemptions Config.
     */
    async getCustomChargeExemptions(requestParameters: GetCustomChargeExemptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomChargeExemptionsConfig> {
        const response = await this.getCustomChargeExemptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch Custom Charge Exemptions Config.<br><p><strong><mark>This API is deprecated. Please use getCustomChargeExemptions instead</mark></strong></p> <p><strong>OperationId:</strong>getCustomChargeExemptionsConfig</p>
     * Operation to fetch Custom Charge Exemptions Config.
     * @deprecated
     */
    async getCustomChargeExemptionsConfigRaw(requestParameters: GetCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomChargeExemptionsConfig>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling getCustomChargeExemptionsConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCustomChargeExemptionsConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges/exemptions/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomChargeExemptionsConfigFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch Custom Charge Exemptions Config.<br><p><strong><mark>This API is deprecated. Please use getCustomChargeExemptions instead</mark></strong></p> <p><strong>OperationId:</strong>getCustomChargeExemptionsConfig</p>
     * Operation to fetch Custom Charge Exemptions Config.
     * @deprecated
     */
    async getCustomChargeExemptionsConfig(requestParameters: GetCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomChargeExemptionsConfig> {
        const response = await this.getCustomChargeExemptionsConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch Custom Charge Codes.<br><p><strong><mark>This API is deprecated. Please use getCustomChargeCodes instead</mark></strong></p> <p><strong>OperationId:</strong>getCustomChargesConfig</p>
     * Operation to fetch Custom Charge Codes.
     * @deprecated
     */
    async getCustomChargesConfigRaw(requestParameters: GetCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomChargesConfigDetails>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling getCustomChargesConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCustomChargesConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomChargesConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch Custom Charge Codes.<br><p><strong><mark>This API is deprecated. Please use getCustomChargeCodes instead</mark></strong></p> <p><strong>OperationId:</strong>getCustomChargesConfig</p>
     * Operation to fetch Custom Charge Codes.
     * @deprecated
     */
    async getCustomChargesConfig(requestParameters: GetCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomChargesConfigDetails> {
        const response = await this.getCustomChargesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch custom number config.<br><p><strong><mark>This API is deprecated. Please use getCustomNumbers instead</mark></strong></p> <p><strong>OperationId:</strong>getCustomNumberConfig</p>
     * Operation to fetch custom number config.
     * @deprecated
     */
    async getCustomNumberConfigRaw(requestParameters: GetCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomNumberConfigDetails>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling getCustomNumberConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.area !== undefined) {
            queryParameters['area'] = requestParameters.area;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customNumbers/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomNumberConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch custom number config.<br><p><strong><mark>This API is deprecated. Please use getCustomNumbers instead</mark></strong></p> <p><strong>OperationId:</strong>getCustomNumberConfig</p>
     * Operation to fetch custom number config.
     * @deprecated
     */
    async getCustomNumberConfig(requestParameters: GetCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomNumberConfigDetails> {
        const response = await this.getCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch custom number config. <p><strong>OperationId:</strong>getCustomNumbers</p>
     * Operation to fetch custom number config.
     */
    async getCustomNumbersRaw(requestParameters: GetCustomNumbersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomNumberConfigDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCustomNumbers.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.configurationId) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.area !== undefined) {
            queryParameters['area'] = requestParameters.area;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customNumbers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomNumberConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch custom number config. <p><strong>OperationId:</strong>getCustomNumbers</p>
     * Operation to fetch custom number config.
     */
    async getCustomNumbers(requestParameters: GetCustomNumbersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomNumberConfigDetails> {
        const response = await this.getCustomNumbersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getDailyPlanCodes</p>
     * Operation to fetch DailyPlanCodes.
     */
    async getDailyPlanCodesRaw(requestParameters: GetDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyPlanCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getDailyPlanCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }

        if (requestParameters.arrangementCodes) {
            queryParameters['arrangementCodes'] = requestParameters.arrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dailyPlanCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DailyPlanCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getDailyPlanCodes</p>
     * Operation to fetch DailyPlanCodes.
     */
    async getDailyPlanCodes(requestParameters: GetDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyPlanCodes> {
        const response = await this.getDailyPlanCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch payment method rule. <p><strong>OperationId:</strong>getDefaultPaymentMethodRule</p>
     * Operation to fetch DefaultPaymentMethodRule.
     */
    async getDefaultPaymentMethodRuleRaw(requestParameters: GetDefaultPaymentMethodRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultPaymentMethodRule>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getDefaultPaymentMethodRule.');
        }
        
        if (requestParameters.transactionCodes === null || requestParameters.transactionCodes === undefined) {
            throw new runtime.RequiredError('transactionCodes','Required parameter requestParameters.transactionCodes was null or undefined when calling getDefaultPaymentMethodRule.');
        }
        
        if (requestParameters.paymentMethods === null || requestParameters.paymentMethods === undefined) {
            throw new runtime.RequiredError('paymentMethods','Required parameter requestParameters.paymentMethods was null or undefined when calling getDefaultPaymentMethodRule.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.paymentMethods) {
            queryParameters['paymentMethods'] = requestParameters.paymentMethods;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/defaultPaymentMethodRules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultPaymentMethodRuleFromJSON(jsonValue));
    }

    /**
     * Operation to fetch payment method rule. <p><strong>OperationId:</strong>getDefaultPaymentMethodRule</p>
     * Operation to fetch DefaultPaymentMethodRule.
     */
    async getDefaultPaymentMethodRule(requestParameters: GetDefaultPaymentMethodRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultPaymentMethodRule> {
        const response = await this.getDefaultPaymentMethodRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve exchange rate information for a hotel. You can search by hotel, Currency Code and exchange types. Results can include past, current and future exchange rate information for a currency.<br><p><strong><mark>This API is deprecated. Please use getExchangeRatesInfo instead</mark></strong></p> <p><strong>OperationId:</strong>getExchangeRates</p>
     * Operation to fetch ExchangeRates.
     * @deprecated
     */
    async getExchangeRatesRaw(requestParameters: GetExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeRatesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getExchangeRates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.exchangeTypes) {
            queryParameters['exchangeTypes'] = requestParameters.exchangeTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/exchangeRates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeRatesDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve exchange rate information for a hotel. You can search by hotel, Currency Code and exchange types. Results can include past, current and future exchange rate information for a currency.<br><p><strong><mark>This API is deprecated. Please use getExchangeRatesInfo instead</mark></strong></p> <p><strong>OperationId:</strong>getExchangeRates</p>
     * Operation to fetch ExchangeRates.
     * @deprecated
     */
    async getExchangeRates(requestParameters: GetExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeRatesDetails> {
        const response = await this.getExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve exchange rate information for a hotel. You can search by hotel, Currency Code and exchange types. Results can include past, current and future exchange rate information for a currency. <p><strong>OperationId:</strong>getExchangeRatesInfo</p>
     * Operation to fetch ExchangeRates.
     */
    async getExchangeRatesInfoRaw(requestParameters: GetExchangeRatesInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeRatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.exchangeTypes) {
            queryParameters['exchangeTypes'] = requestParameters.exchangeTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exchangeRates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeRatesDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve exchange rate information for a hotel. You can search by hotel, Currency Code and exchange types. Results can include past, current and future exchange rate information for a currency. <p><strong>OperationId:</strong>getExchangeRatesInfo</p>
     * Operation to fetch ExchangeRates.
     */
    async getExchangeRatesInfo(requestParameters: GetExchangeRatesInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeRatesDetails> {
        const response = await this.getExchangeRatesInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getExpenseArrangementCodes</p>
     * Operation to fetch ExpenseArrangementCodes.
     */
    async getExpenseArrangementCodesRaw(requestParameters: GetExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpenseArrangementCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getExpenseArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }

        if (requestParameters.arrangementCodes) {
            queryParameters['arrangementCodes'] = requestParameters.arrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseArrangementCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getExpenseArrangementCodes</p>
     * Operation to fetch ExpenseArrangementCodes.
     */
    async getExpenseArrangementCodes(requestParameters: GetExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpenseArrangementCodes> {
        const response = await this.getExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get fiscal commands. <p><strong>OperationId:</strong>getFiscalCommands</p>
     * Get Fiscal Commands
     */
    async getFiscalCommandsRaw(requestParameters: GetFiscalCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalCommandsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFiscalCommands.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.partnerCode) {
            queryParameters['partnerCode'] = requestParameters.partnerCode;
        }

        if (requestParameters.operationType !== undefined) {
            queryParameters['operationType'] = requestParameters.operationType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalCommands`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalCommandsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get fiscal commands. <p><strong>OperationId:</strong>getFiscalCommands</p>
     * Get Fiscal Commands
     */
    async getFiscalCommands(requestParameters: GetFiscalCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalCommandsDetails> {
        const response = await this.getFiscalCommandsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Fiscal Folio Parameters. <p><strong>OperationId:</strong>getFiscalFolioParameters</p>
     * Operation to fetch FiscalFolioParameters.
     */
    async getFiscalFolioParametersRaw(requestParameters: GetFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalFolioParameters>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getFiscalFolioParameters.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.internal !== undefined) {
            queryParameters['internal'] = requestParameters.internal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalFolioParameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalFolioParametersFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Fiscal Folio Parameters. <p><strong>OperationId:</strong>getFiscalFolioParameters</p>
     * Operation to fetch FiscalFolioParameters.
     */
    async getFiscalFolioParameters(requestParameters: GetFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalFolioParameters> {
        const response = await this.getFiscalFolioParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get fiscal partners. <p><strong>OperationId:</strong>getFiscalPartners</p>
     * Get fiscal partners
     */
    async getFiscalPartnersRaw(requestParameters: GetFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalPartnersDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFiscalPartners.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.partnerCode) {
            queryParameters['partnerCode'] = requestParameters.partnerCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalPartners`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalPartnersDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get fiscal partners. <p><strong>OperationId:</strong>getFiscalPartners</p>
     * Get fiscal partners
     */
    async getFiscalPartners(requestParameters: GetFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalPartnersDetails> {
        const response = await this.getFiscalPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Fiscal Periods. <p><strong>OperationId:</strong>getFiscalPeriods</p>
     * Operation to fetch FiscalPeriods.
     */
    async getFiscalPeriodsRaw(requestParameters: GetFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalPeriodsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFiscalPeriods.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.periodType !== undefined) {
            queryParameters['periodType'] = requestParameters.periodType;
        }

        if (requestParameters.period !== undefined) {
            queryParameters['period'] = requestParameters.period;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalPeriods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalPeriodsInfoFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Fiscal Periods. <p><strong>OperationId:</strong>getFiscalPeriods</p>
     * Operation to fetch FiscalPeriods.
     */
    async getFiscalPeriods(requestParameters: GetFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalPeriodsInfo> {
        const response = await this.getFiscalPeriodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Fiscal Years. <p><strong>OperationId:</strong>getFiscalYears</p>
     * Operation to fetch FiscalYears.
     */
    async getFiscalYearsRaw(requestParameters: GetFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalYears>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFiscalYears.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.yearType !== undefined) {
            queryParameters['yearType'] = requestParameters.yearType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalYears`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalYearsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Fiscal Years. <p><strong>OperationId:</strong>getFiscalYears</p>
     * Operation to fetch FiscalYears.
     */
    async getFiscalYears(requestParameters: GetFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalYears> {
        const response = await this.getFiscalYearsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getFolioArrangementCodes</p>
     * Operation to fetch FolioArrangementCodes.
     */
    async getFolioArrangementCodesRaw(requestParameters: GetFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioArrangementCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getFolioArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }

        if (requestParameters.arrangementCodes) {
            queryParameters['arrangementCodes'] = requestParameters.arrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioArrangementCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioArrangementCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getFolioArrangementCodes</p>
     * Operation to fetch FolioArrangementCodes.
     */
    async getFolioArrangementCodes(requestParameters: GetFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioArrangementCodes> {
        const response = await this.getFolioArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch folio copy legends. <p><strong>OperationId:</strong>getFolioCopyLegends</p>
     * Operation to fetch FolioCopyLegends.
     */
    async getFolioCopyLegendsRaw(requestParameters: GetFolioCopyLegendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioCopyLegends>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.languageCode !== undefined) {
            queryParameters['languageCode'] = requestParameters.languageCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioCopyLegends`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioCopyLegendsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch folio copy legends. <p><strong>OperationId:</strong>getFolioCopyLegends</p>
     * Operation to fetch FolioCopyLegends.
     */
    async getFolioCopyLegends(requestParameters: GetFolioCopyLegendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioCopyLegends> {
        const response = await this.getFolioCopyLegendsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to folio fetch print queues. <p><strong>OperationId:</strong>getFolioPrintQueues</p>
     * Operation to fetch FolioPrintQueues.
     */
    async getFolioPrintQueuesRaw(requestParameters: GetFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioPrintQueues>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFolioPrintQueues.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.queueName !== undefined) {
            queryParameters['queueName'] = requestParameters.queueName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioPrintQueues`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioPrintQueuesFromJSON(jsonValue));
    }

    /**
     * Operation to folio fetch print queues. <p><strong>OperationId:</strong>getFolioPrintQueues</p>
     * Operation to fetch FolioPrintQueues.
     */
    async getFolioPrintQueues(requestParameters: GetFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioPrintQueues> {
        const response = await this.getFolioPrintQueuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch folio type legend mappings config. <p><strong>OperationId:</strong>getFolioTypeLegendMappingsConfig</p>
     * Operation to fetch folio type legend mappings config.
     */
    async getFolioTypeLegendMappingsConfigRaw(requestParameters: GetFolioTypeLegendMappingsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypeLegendMappingsConfigDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFolioTypeLegendMappingsConfig.');
        }
        
        if (requestParameters.legendCode === null || requestParameters.legendCode === undefined) {
            throw new runtime.RequiredError('legendCode','Required parameter requestParameters.legendCode was null or undefined when calling getFolioTypeLegendMappingsConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.legendCode !== undefined) {
            queryParameters['legendCode'] = requestParameters.legendCode;
        }

        if (requestParameters.folioType !== undefined) {
            queryParameters['folioType'] = requestParameters.folioType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypeLegendMappings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTypeLegendMappingsConfigDetailsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch folio type legend mappings config. <p><strong>OperationId:</strong>getFolioTypeLegendMappingsConfig</p>
     * Operation to fetch folio type legend mappings config.
     */
    async getFolioTypeLegendMappingsConfig(requestParameters: GetFolioTypeLegendMappingsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypeLegendMappingsConfigDetails> {
        const response = await this.getFolioTypeLegendMappingsConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Folio Type Names. <p><strong>OperationId:</strong>getFolioTypesConfig</p>
     * Operation to fetch FolioTypesConfig.
     */
    async getFolioTypesConfigRaw(requestParameters: GetFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolioTypesConfig>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFolioTypesConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.folioTypeNamesCodes) {
            queryParameters['folioTypeNamesCodes'] = requestParameters.folioTypeNamesCodes;
        }

        if (requestParameters.taxTypeCodes) {
            queryParameters['taxTypeCodes'] = requestParameters.taxTypeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypesConfig`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolioTypesConfigFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Folio Type Names. <p><strong>OperationId:</strong>getFolioTypesConfig</p>
     * Operation to fetch FolioTypesConfig.
     */
    async getFolioTypesConfig(requestParameters: GetFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolioTypesConfig> {
        const response = await this.getFolioTypesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Foreign Currencies. <p><strong>OperationId:</strong>getForeignCurrencies</p>
     * Operation to fetch ForeignCurrencies.
     */
    async getForeignCurrenciesRaw(requestParameters: GetForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ForeignCurrencies>> {
        const queryParameters: any = {};

        if (requestParameters.currencies) {
            queryParameters['currencies'] = requestParameters.currencies;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/foreignCurrencies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ForeignCurrenciesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Foreign Currencies. <p><strong>OperationId:</strong>getForeignCurrencies</p>
     * Operation to fetch ForeignCurrencies.
     */
    async getForeignCurrencies(requestParameters: GetForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ForeignCurrencies> {
        const response = await this.getForeignCurrenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Fetch Future Past Exchange Rates. <p><strong>OperationId:</strong>getFuturePastExchangeRates</p>
     * Operation to fetch FuturePastExchangeRates.
     */
    async getFuturePastExchangeRatesRaw(requestParameters: GetFuturePastExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ExchangeRateType>>> {
        if (requestParameters.currencyCode === null || requestParameters.currencyCode === undefined) {
            throw new runtime.RequiredError('currencyCode','Required parameter requestParameters.currencyCode was null or undefined when calling getFuturePastExchangeRates.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFuturePastExchangeRates.');
        }
        
        if (requestParameters.exchangeTypes === null || requestParameters.exchangeTypes === undefined) {
            throw new runtime.RequiredError('exchangeTypes','Required parameter requestParameters.exchangeTypes was null or undefined when calling getFuturePastExchangeRates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.exchangeTypes !== undefined) {
            queryParameters['exchangeTypes'] = requestParameters.exchangeTypes;
        }

        if (requestParameters.dateRangeStart !== undefined) {
            queryParameters['dateRangeStart'] = requestParameters.dateRangeStart;
        }

        if (requestParameters.dateRangeEnd !== undefined) {
            queryParameters['dateRangeEnd'] = requestParameters.dateRangeEnd;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/exchangeRates/{currencyCode}`.replace(`{${"currencyCode"}}`, encodeURIComponent(String(requestParameters.currencyCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExchangeRateTypeFromJSON));
    }

    /**
     * Operation to Fetch Future Past Exchange Rates. <p><strong>OperationId:</strong>getFuturePastExchangeRates</p>
     * Operation to fetch FuturePastExchangeRates.
     */
    async getFuturePastExchangeRates(requestParameters: GetFuturePastExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ExchangeRateType>> {
        const response = await this.getFuturePastExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch GUI Number rules <p><strong>OperationId:</strong>getGUINumberRules</p>
     * Operation to fetch GUINumberRules.
     */
    async getGUINumberRulesRaw(requestParameters: GetGUINumberRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GUINumberRulesDetails>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getGUINumberRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guiNumberRules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GUINumberRulesDetailsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch GUI Number rules <p><strong>OperationId:</strong>getGUINumberRules</p>
     * Operation to fetch GUINumberRules.
     */
    async getGUINumberRules(requestParameters: GetGUINumberRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GUINumberRulesDetails> {
        const response = await this.getGUINumberRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch tax types. <p><strong>OperationId:</strong>getGenerateTaxTypes</p>
     * Operation to fetch GenerateTaxTypes.
     */
    async getGenerateTaxTypesRaw(requestParameters: GetGenerateTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxTypesGenerate>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getGenerateTaxTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.transactionCode !== undefined) {
            queryParameters['transactionCode'] = requestParameters.transactionCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/generates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxTypesGenerateFromJSON(jsonValue));
    }

    /**
     * Operation to fetch tax types. <p><strong>OperationId:</strong>getGenerateTaxTypes</p>
     * Operation to fetch GenerateTaxTypes.
     */
    async getGenerateTaxTypes(requestParameters: GetGenerateTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxTypesGenerate> {
        const response = await this.getGenerateTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve global exchange rate information for a chain. You can search by Currency Code and exchange types. Results can include past, current and future exchange rate information for a currency. <p><strong>OperationId:</strong>getGlobalExchangeRatesInfo</p>
     * Operation to fetch GlobalExchangeRates.
     */
    async getGlobalExchangeRatesInfoRaw(requestParameters: GetGlobalExchangeRatesInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeRatesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.exchangeTypes) {
            queryParameters['exchangeTypes'] = requestParameters.exchangeTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalExchangeRates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeRatesDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve global exchange rate information for a chain. You can search by Currency Code and exchange types. Results can include past, current and future exchange rate information for a currency. <p><strong>OperationId:</strong>getGlobalExchangeRatesInfo</p>
     * Operation to fetch GlobalExchangeRates.
     */
    async getGlobalExchangeRatesInfo(requestParameters: GetGlobalExchangeRatesInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeRatesDetails> {
        const response = await this.getGlobalExchangeRatesInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getGroupArrangementCodes</p>
     * Operation to create GroupArrangementCodes.
     */
    async getGroupArrangementCodesRaw(requestParameters: GetGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupArrangementCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getGroupArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeTransactionCodes !== undefined) {
            queryParameters['includeTransactionCodes'] = requestParameters.includeTransactionCodes;
        }

        if (requestParameters.arrangementCodes) {
            queryParameters['arrangementCodes'] = requestParameters.arrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/groupArrangementCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupArrangementCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getGroupArrangementCodes</p>
     * Operation to create GroupArrangementCodes.
     */
    async getGroupArrangementCodes(requestParameters: GetGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupArrangementCodes> {
        const response = await this.getGroupArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch No Show Posting Rules. <p><strong>OperationId:</strong>getNoShowPostingRules</p>
     * Operation to fetch NoShowPostingRules.
     */
    async getNoShowPostingRulesRaw(requestParameters: GetNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NoShowPostingRules>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getNoShowPostingRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noShowPostingRules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoShowPostingRulesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch No Show Posting Rules. <p><strong>OperationId:</strong>getNoShowPostingRules</p>
     * Operation to fetch NoShowPostingRules.
     */
    async getNoShowPostingRules(requestParameters: GetNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NoShowPostingRules> {
        const response = await this.getNoShowPostingRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The operation accepts code and/or descriptions for numbers as search criteria in fetch request and returns numbers, descriptions that match the criteria. <p><strong>OperationId:</strong>getNumberDescriptions</p>
     * Operation to fetch NumberDescriptions.
     */
    async getNumberDescriptionsRaw(requestParameters: GetNumberDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NumberDescriptions>> {
        const queryParameters: any = {};

        if (requestParameters.numberCodes) {
            queryParameters['numberCodes'] = requestParameters.numberCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/numberDescriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NumberDescriptionsFromJSON(jsonValue));
    }

    /**
     * The operation accepts code and/or descriptions for numbers as search criteria in fetch request and returns numbers, descriptions that match the criteria. <p><strong>OperationId:</strong>getNumberDescriptions</p>
     * Operation to fetch NumberDescriptions.
     */
    async getNumberDescriptions(requestParameters: GetNumberDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NumberDescriptions> {
        const response = await this.getNumberDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Opera Document Sequences. <p><strong>OperationId:</strong>getOperaControlSequences</p>
     * Operation to fetch OperaControlSequences.
     */
    async getOperaControlSequencesRaw(requestParameters: GetOperaControlSequencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperaControlSequences>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getOperaControlSequences.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.countryCode !== undefined) {
            queryParameters['countryCode'] = requestParameters.countryCode;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.hotelCode) {
            queryParameters['HotelCode'] = requestParameters.hotelCode;
        }

        if (requestParameters.fetchInstruction) {
            queryParameters['fetchInstruction'] = requestParameters.fetchInstruction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/operaControlSequences`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperaControlSequencesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Opera Document Sequences. <p><strong>OperationId:</strong>getOperaControlSequences</p>
     * Operation to fetch OperaControlSequences.
     */
    async getOperaControlSequences(requestParameters: GetOperaControlSequencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperaControlSequences> {
        const response = await this.getOperaControlSequencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getPackageArrangementCodes</p>
     * Operation to fetch PackageArrangementCodes.
     */
    async getPackageArrangementCodesRaw(requestParameters: GetPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PackageArrangementCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getPackageArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.arrangementCodes) {
            queryParameters['arrangementCodes'] = requestParameters.arrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageArrangementCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PackageArrangementCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getPackageArrangementCodes</p>
     * Operation to fetch PackageArrangementCodes.
     */
    async getPackageArrangementCodes(requestParameters: GetPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PackageArrangementCodes> {
        const response = await this.getPackageArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch payment methods. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Operation to fetch PaymentMethods.
     */
    async getPaymentMethodsRaw(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentMethodsInfo>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getPaymentMethods.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.paymentMethods) {
            queryParameters['paymentMethods'] = requestParameters.paymentMethods;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelPaymentMethods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentMethodsInfoFromJSON(jsonValue));
    }

    /**
     * Operation to fetch payment methods. <p><strong>OperationId:</strong>getPaymentMethods</p>
     * Operation to fetch PaymentMethods.
     */
    async getPaymentMethods(requestParameters: GetPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentMethodsInfo> {
        const response = await this.getPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Revenue Bucket Codes. <p><strong>OperationId:</strong>getRevenueBucketCodes</p>
     * Operation to fetch RevenueBucketCodes.
     */
    async getRevenueBucketCodesRaw(requestParameters: GetRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueBucketCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getRevenueBucketCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.trxCodeArrangementCodes) {
            queryParameters['trxCodeArrangementCodes'] = requestParameters.trxCodeArrangementCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.trxCodeArrangementType !== undefined) {
            queryParameters['trxCodeArrangementType'] = requestParameters.trxCodeArrangementType;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.revenueBucketTypesWildCard !== undefined) {
            queryParameters['revenueBucketTypesWildCard'] = requestParameters.revenueBucketTypesWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueBucketCodesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Revenue Bucket Codes. <p><strong>OperationId:</strong>getRevenueBucketCodes</p>
     * Operation to fetch RevenueBucketCodes.
     */
    async getRevenueBucketCodes(requestParameters: GetRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueBucketCodes> {
        const response = await this.getRevenueBucketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Revenue Bucket Types. <p><strong>OperationId:</strong>getRevenueBucketTypes</p>
     * Operation to fetch RevenueBucketTypes.
     */
    async getRevenueBucketTypesRaw(requestParameters: GetRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueBucketTypes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getRevenueBucketTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.revenueBucketTypeCodes) {
            queryParameters['revenueBucketTypeCodes'] = requestParameters.revenueBucketTypeCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.bucketType !== undefined) {
            queryParameters['bucketType'] = requestParameters.bucketType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueBucketTypesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Revenue Bucket Types. <p><strong>OperationId:</strong>getRevenueBucketTypes</p>
     * Operation to fetch RevenueBucketTypes.
     */
    async getRevenueBucketTypes(requestParameters: GetRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueBucketTypes> {
        const response = await this.getRevenueBucketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getRevenueTypeMapping</p>
     * Operation to fetch RevenueTypeMapping.
     */
    async getRevenueTypeMappingRaw(requestParameters: GetRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueTypeMappingList>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getRevenueTypeMapping.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.eventTypeCodes) {
            queryParameters['eventTypeCodes'] = requestParameters.eventTypeCodes;
        }

        if (requestParameters.revenueTypeCodes) {
            queryParameters['revenueTypeCodes'] = requestParameters.revenueTypeCodes;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.spaceCodes) {
            queryParameters['spaceCodes'] = requestParameters.spaceCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypeMapping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueTypeMappingListFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getRevenueTypeMapping</p>
     * Operation to fetch RevenueTypeMapping.
     */
    async getRevenueTypeMapping(requestParameters: GetRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueTypeMappingList> {
        const response = await this.getRevenueTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return routing instructions based on search criteria such as hotelId, trxCodeArrangementCode, wildCard.  Routing instructions are used to route specific charges to different destinations.<p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructionsRaw(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoutingInstructions>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoutingInstructions.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.trxCodeArrangementCode) {
            queryParameters['trxCodeArrangementCode'] = requestParameters.trxCodeArrangementCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.compAccounting !== undefined) {
            queryParameters['compAccounting'] = requestParameters.compAccounting;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/routingInstructions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoutingInstructionsFromJSON(jsonValue));
    }

    /**
     * Use this API to return routing instructions based on search criteria such as hotelId, trxCodeArrangementCode, wildCard.  Routing instructions are used to route specific charges to different destinations.<p><strong>OperationId:</strong>getRoutingInstructions</p>
     * Get routing instructions
     */
    async getRoutingInstructions(requestParameters: GetRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoutingInstructions> {
        const response = await this.getRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>getTaxBrackets</p>
     * Operation to fetch TaxBrackets.
     */
    async getTaxBracketsRaw(requestParameters: GetTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxBrackets>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getTaxBrackets.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.taxPercentagesCodes) {
            queryParameters['taxPercentagesCodes'] = requestParameters.taxPercentagesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxBrackets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxBracketsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>getTaxBrackets</p>
     * Operation to fetch TaxBrackets.
     */
    async getTaxBrackets(requestParameters: GetTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxBrackets> {
        const response = await this.getTaxBracketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Tax Types. <p><strong>OperationId:</strong>getTaxTypes</p>
     * Operation to fetch TaxTypes.
     */
    async getTaxTypesRaw(requestParameters: GetTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxTypes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getTaxTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.taxTypeCodes) {
            queryParameters['taxTypeCodes'] = requestParameters.taxTypeCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelTaxTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxTypesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Tax Types. <p><strong>OperationId:</strong>getTaxTypes</p>
     * Operation to fetch TaxTypes.
     */
    async getTaxTypes(requestParameters: GetTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxTypes> {
        const response = await this.getTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use getTemplateCustomNumbers instead</mark></strong></p> <p><strong>OperationId:</strong>getTemplateCustomNumberConfig</p>
     * Operation to fetch template custom number configuration.
     * @deprecated
     */
    async getTemplateCustomNumberConfigRaw(requestParameters: GetTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateCustomNumberConfigDetails>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling getTemplateCustomNumberConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTemplateCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/template/customNumbers/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateCustomNumberConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use getTemplateCustomNumbers instead</mark></strong></p> <p><strong>OperationId:</strong>getTemplateCustomNumberConfig</p>
     * Operation to fetch template custom number configuration.
     * @deprecated
     */
    async getTemplateCustomNumberConfig(requestParameters: GetTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateCustomNumberConfigDetails> {
        const response = await this.getTemplateCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to fetch template custom number configuration. <p><strong>OperationId:</strong>getTemplateCustomNumbers</p>
     * Operation to fetch template custom number configuration.
     */
    async getTemplateCustomNumbersRaw(requestParameters: GetTemplateCustomNumbersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateCustomNumberConfigDetails>> {
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.configurationId) {
            queryParameters['configurationId'] = requestParameters.configurationId;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/template/customNumbers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateCustomNumberConfigDetailsFromJSON(jsonValue));
    }

    /**
     * You can use this API to fetch template custom number configuration. <p><strong>OperationId:</strong>getTemplateCustomNumbers</p>
     * Operation to fetch template custom number configuration.
     */
    async getTemplateCustomNumbers(requestParameters: GetTemplateCustomNumbersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateCustomNumberConfigDetails> {
        const response = await this.getTemplateCustomNumbersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return template transaction codes summaries based on search criteria such as transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, wildCard, etc.<p><strong>OperationId:</strong>getTemplateTransactionCodes</p>
     * Get template transaction codes
     */
    async getTemplateTransactionCodesRaw(requestParameters: GetTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTransactionCodes>> {
        const queryParameters: any = {};

        if (requestParameters.compTransactionCodes !== undefined) {
            queryParameters['compTransactionCodes'] = requestParameters.compTransactionCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.brandCode !== undefined) {
            queryParameters['brandCode'] = requestParameters.brandCode;
        }

        if (requestParameters.universalProductCode !== undefined) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTransactionCodesFromJSON(jsonValue));
    }

    /**
     * Use this API to return template transaction codes summaries based on search criteria such as transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, wildCard, etc.<p><strong>OperationId:</strong>getTemplateTransactionCodes</p>
     * Get template transaction codes
     */
    async getTemplateTransactionCodes(requestParameters: GetTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTransactionCodes> {
        const response = await this.getTemplateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch template transaction group. <p><strong>OperationId:</strong>getTemplateTransactionGroups</p>
     * Operation to fetch TemplateTransactionGroups.
     */
    async getTemplateTransactionGroupsRaw(requestParameters: GetTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTransactionGroups>> {
        const queryParameters: any = {};

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.transactionGroupType !== undefined) {
            queryParameters['transactionGroupType'] = requestParameters.transactionGroupType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTransactionGroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch template transaction group. <p><strong>OperationId:</strong>getTemplateTransactionGroups</p>
     * Operation to fetch TemplateTransactionGroups.
     */
    async getTemplateTransactionGroups(requestParameters: GetTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTransactionGroups> {
        const response = await this.getTemplateTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch template transaction subgroups <p><strong>OperationId:</strong>getTemplateTransactionSubgroups</p>
     * Operation to fetch TemplateTransactionSubgroups.
     */
    async getTemplateTransactionSubgroupsRaw(requestParameters: GetTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTransactionSubgroups>> {
        const queryParameters: any = {};

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionSubGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTransactionSubgroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch template transaction subgroups <p><strong>OperationId:</strong>getTemplateTransactionSubgroups</p>
     * Operation to fetch TemplateTransactionSubgroups.
     */
    async getTemplateTransactionSubgroups(requestParameters: GetTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTransactionSubgroups> {
        const response = await this.getTemplateTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getTransactionArrangementCodes</p>
     * Operation to fetch TransactionArrangementCodes.
     */
    async getTransactionArrangementCodesRaw(requestParameters: GetTransactionArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionArrangementCodes>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTransactionArrangementCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionArrangementCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionArrangementCodesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getTransactionArrangementCodes</p>
     * Operation to fetch TransactionArrangementCodes.
     */
    async getTransactionArrangementCodes(requestParameters: GetTransactionArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionArrangementCodes> {
        const response = await this.getTransactionArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return transaction codes based on search criteria such as hotelIds, transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, description, etc.<p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get transaction codes
     */
    async getTransactionCodeRaw(requestParameters: GetTransactionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTransactionCode>> {
        if (requestParameters.transactionCode === null || requestParameters.transactionCode === undefined) {
            throw new runtime.RequiredError('transactionCode','Required parameter requestParameters.transactionCode was null or undefined when calling getTransactionCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTransactionCode.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodes/{transactionCode}/hotelTransactionCode`.replace(`{${"transactionCode"}}`, encodeURIComponent(String(requestParameters.transactionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTransactionCodeFromJSON(jsonValue));
    }

    /**
     * Use this API to return transaction codes based on search criteria such as hotelIds, transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, description, etc.<p><strong>OperationId:</strong>getTransactionCodes</p>
     * Get transaction codes
     */
    async getTransactionCode(requestParameters: GetTransactionCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTransactionCode> {
        const response = await this.getTransactionCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Fetch Transaction Code Access Roles. <p><strong>OperationId:</strong>getTransactionCodeAccessRoles</p>
     * Operation to fetch TransactionCodeAccessRoles.
     */
    async getTransactionCodeAccessRolesRaw(requestParameters: GetTransactionCodeAccessRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCodeAccessRoles>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTransactionCodeAccessRoles.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.roleCode !== undefined) {
            queryParameters['roleCode'] = requestParameters.roleCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionCodeAccessRoles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCodeAccessRolesFromJSON(jsonValue));
    }

    /**
     * Operation to Fetch Transaction Code Access Roles. <p><strong>OperationId:</strong>getTransactionCodeAccessRoles</p>
     * Operation to fetch TransactionCodeAccessRoles.
     */
    async getTransactionCodeAccessRoles(requestParameters: GetTransactionCodeAccessRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCodeAccessRoles> {
        const response = await this.getTransactionCodeAccessRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return transaction codes based on search criteria such as hotelIds, transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, description, etc.. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Operation to fetch TransactionCodes.
     */
    async getTransactionCodesRaw(requestParameters: GetTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTransactionCodes>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getTransactionCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.compTransactionCodes !== undefined) {
            queryParameters['compTransactionCodes'] = requestParameters.compTransactionCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.transactionCodes) {
            queryParameters['transactionCodes'] = requestParameters.transactionCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.brandCode !== undefined) {
            queryParameters['brandCode'] = requestParameters.brandCode;
        }

        if (requestParameters.universalProductCode !== undefined) {
            queryParameters['universalProductCode'] = requestParameters.universalProductCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTransactionCodesFromJSON(jsonValue));
    }

    /**
     * Use this API to return transaction codes based on search criteria such as hotelIds, transactionGroupCodes, transactionSubgroupsCodes, transactionCodes, description, etc.. <p><strong>OperationId:</strong>getTransactionCodes</p>
     * Operation to fetch TransactionCodes.
     */
    async getTransactionCodes(requestParameters: GetTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTransactionCodes> {
        const response = await this.getTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Transaction Discounts. <p><strong>OperationId:</strong>getTransactionDiscounts</p>
     * Operation to fetch TransactionDiscounts.
     */
    async getTransactionDiscountsRaw(requestParameters: GetTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDiscounts>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getTransactionDiscounts.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionDiscountCodes) {
            queryParameters['transactionDiscountCodes'] = requestParameters.transactionDiscountCodes;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.ruleType !== undefined) {
            queryParameters['ruleType'] = requestParameters.ruleType;
        }

        if (requestParameters.membershipTypes) {
            queryParameters['membershipTypes'] = requestParameters.membershipTypes;
        }

        if (requestParameters.membershipLevels) {
            queryParameters['membershipLevels'] = requestParameters.membershipLevels;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionDiscounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDiscountsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Transaction Discounts. <p><strong>OperationId:</strong>getTransactionDiscounts</p>
     * Operation to fetch TransactionDiscounts.
     */
    async getTransactionDiscounts(requestParameters: GetTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDiscounts> {
        const response = await this.getTransactionDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch Transaction Diversion Rules. <p><strong>OperationId:</strong>getTransactionDiversionRules</p>
     * Operation to fetch TransactionDiversionRules.
     */
    async getTransactionDiversionRulesRaw(requestParameters: GetTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDiversionRules>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getTransactionDiversionRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.ruleCodes) {
            queryParameters['ruleCodes'] = requestParameters.ruleCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.level !== undefined) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.membershipTypeCodes) {
            queryParameters['membershipTypeCodes'] = requestParameters.membershipTypeCodes;
        }

        if (requestParameters.membershipTypeLevels) {
            queryParameters['membershipTypeLevels'] = requestParameters.membershipTypeLevels;
        }

        if (requestParameters.vipCodes) {
            queryParameters['vipCodes'] = requestParameters.vipCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionDiversionRules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDiversionRulesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch Transaction Diversion Rules. <p><strong>OperationId:</strong>getTransactionDiversionRules</p>
     * Operation to fetch TransactionDiversionRules.
     */
    async getTransactionDiversionRules(requestParameters: GetTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDiversionRules> {
        const response = await this.getTransactionDiversionRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch detailed transaction group. <p><strong>OperationId:</strong>getTransactionGroup</p>
     * Operation to fetch TransactionGroup.
     */
    async getTransactionGroupRaw(requestParameters: GetTransactionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionGroup>> {
        if (requestParameters.transactionGroupCode === null || requestParameters.transactionGroupCode === undefined) {
            throw new runtime.RequiredError('transactionGroupCode','Required parameter requestParameters.transactionGroupCode was null or undefined when calling getTransactionGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTransactionGroup.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionGroupCode/{transactionGroupCode}/transactionGroup`.replace(`{${"transactionGroupCode"}}`, encodeURIComponent(String(requestParameters.transactionGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionGroupFromJSON(jsonValue));
    }

    /**
     * Operation to fetch detailed transaction group. <p><strong>OperationId:</strong>getTransactionGroup</p>
     * Operation to fetch TransactionGroup.
     */
    async getTransactionGroup(requestParameters: GetTransactionGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionGroup> {
        const response = await this.getTransactionGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch transaction groups. <p><strong>OperationId:</strong>getTransactionGroups</p>
     * Operation to fetch TransactionGroups.
     */
    async getTransactionGroupsRaw(requestParameters: GetTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionGroups>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getTransactionGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.transactionGroupType !== undefined) {
            queryParameters['transactionGroupType'] = requestParameters.transactionGroupType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionGroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch transaction groups. <p><strong>OperationId:</strong>getTransactionGroups</p>
     * Operation to fetch TransactionGroups.
     */
    async getTransactionGroups(requestParameters: GetTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionGroups> {
        const response = await this.getTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch detailed transaction sub group. <p><strong>OperationId:</strong>getTransactionSubgroup</p>
     * Operation to fetch TransactionGroup.
     */
    async getTransactionSubgroupRaw(requestParameters: GetTransactionSubgroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTransactionSubgroup>> {
        if (requestParameters.transactionGroupCode === null || requestParameters.transactionGroupCode === undefined) {
            throw new runtime.RequiredError('transactionGroupCode','Required parameter requestParameters.transactionGroupCode was null or undefined when calling getTransactionSubgroup.');
        }
        
        if (requestParameters.transactionSubGroupCode === null || requestParameters.transactionSubGroupCode === undefined) {
            throw new runtime.RequiredError('transactionSubGroupCode','Required parameter requestParameters.transactionSubGroupCode was null or undefined when calling getTransactionSubgroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTransactionSubgroup.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionSubGroupCodes/{transactionSubGroupCode}/transactionGroupCodes/{transactionGroupCode}/transactionSubGroup`.replace(`{${"transactionGroupCode"}}`, encodeURIComponent(String(requestParameters.transactionGroupCode))).replace(`{${"transactionSubGroupCode"}}`, encodeURIComponent(String(requestParameters.transactionSubGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTransactionSubgroupFromJSON(jsonValue));
    }

    /**
     * Operation to fetch detailed transaction sub group. <p><strong>OperationId:</strong>getTransactionSubgroup</p>
     * Operation to fetch TransactionGroup.
     */
    async getTransactionSubgroup(requestParameters: GetTransactionSubgroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTransactionSubgroup> {
        const response = await this.getTransactionSubgroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch transaction sub groups. <p><strong>OperationId:</strong>getTransactionSubgroups</p>
     * Operation to fetch TransactionSubgroups.
     */
    async getTransactionSubgroupsRaw(requestParameters: GetTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTransactionSubgroups>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling getTransactionSubgroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.transactionGroupCodes) {
            queryParameters['transactionGroupCodes'] = requestParameters.transactionGroupCodes;
        }

        if (requestParameters.transactionSubgroupsCodes) {
            queryParameters['transactionSubgroupsCodes'] = requestParameters.transactionSubgroupsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionSubGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTransactionSubgroupsFromJSON(jsonValue));
    }

    /**
     * Operation to fetch transaction sub groups. <p><strong>OperationId:</strong>getTransactionSubgroups</p>
     * Operation to fetch TransactionSubgroups.
     */
    async getTransactionSubgroups(requestParameters: GetTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTransactionSubgroups> {
        const response = await this.getTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Adjustment Codes. <p><strong>OperationId:</strong>postAdjustmentCodes</p>
     * Operation to create AdjustmentCodes.
     */
    async postAdjustmentCodesRaw(requestParameters: PostAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.adjustmentCodes === null || requestParameters.adjustmentCodes === undefined) {
            throw new runtime.RequiredError('adjustmentCodes','Required parameter requestParameters.adjustmentCodes was null or undefined when calling postAdjustmentCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentCodesToJSON(requestParameters.adjustmentCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Adjustment Codes. <p><strong>OperationId:</strong>postAdjustmentCodes</p>
     * Operation to create AdjustmentCodes.
     */
    async postAdjustmentCodes(requestParameters: PostAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create articles. <p><strong>OperationId:</strong>postArticles</p>
     * Operation to create Articles.
     */
    async postArticlesRaw(requestParameters: PostArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.articles === null || requestParameters.articles === undefined) {
            throw new runtime.RequiredError('articles','Required parameter requestParameters.articles was null or undefined when calling postArticles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesToJSON(requestParameters.articles),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create articles. <p><strong>OperationId:</strong>postArticles</p>
     * Operation to create Articles.
     */
    async postArticles(requestParameters: PostArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postAuthorizationConfigRule</p>
     * Operation to create AuthorizationConfigRule.
     */
    async postAuthorizationConfigRuleRaw(requestParameters: PostAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorizationConfigRules === null || requestParameters.authorizationConfigRules === undefined) {
            throw new runtime.RequiredError('authorizationConfigRules','Required parameter requestParameters.authorizationConfigRules was null or undefined when calling postAuthorizationConfigRule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationConfigRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizationConfigRulesToJSON(requestParameters.authorizationConfigRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postAuthorizationConfigRule</p>
     * Operation to create AuthorizationConfigRule.
     */
    async postAuthorizationConfigRule(requestParameters: PostAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAuthorizationConfigRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Authorizer Groups. <p><strong>OperationId:</strong>postAuthorizerGroups</p>
     * Operation to create AuthorizerGroups.
     */
    async postAuthorizerGroupsRaw(requestParameters: PostAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorizerGroups === null || requestParameters.authorizerGroups === undefined) {
            throw new runtime.RequiredError('authorizerGroups','Required parameter requestParameters.authorizerGroups was null or undefined when calling postAuthorizerGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizerGroupsToJSON(requestParameters.authorizerGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Authorizer Groups. <p><strong>OperationId:</strong>postAuthorizerGroups</p>
     * Operation to create AuthorizerGroups.
     */
    async postAuthorizerGroups(requestParameters: PostAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Create Cashier. <p><strong>OperationId:</strong>postCashiers</p>
     * Operation to create Cashiers.
     */
    async postCashiersRaw(requestParameters: PostCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cashiers === null || requestParameters.cashiers === undefined) {
            throw new runtime.RequiredError('cashiers','Required parameter requestParameters.cashiers was null or undefined when calling postCashiers.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CashiersToJSON(requestParameters.cashiers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Create Cashier. <p><strong>OperationId:</strong>postCashiers</p>
     * Operation to create Cashiers.
     */
    async postCashiers(requestParameters: PostCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCashiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Collecting Agent Taxes. <p><strong>OperationId:</strong>postCollectingAgentTaxes</p>
     * Operation to create CollectingAgentTaxes.
     */
    async postCollectingAgentTaxesRaw(requestParameters: PostCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.collectingAgentTaxes === null || requestParameters.collectingAgentTaxes === undefined) {
            throw new runtime.RequiredError('collectingAgentTaxes','Required parameter requestParameters.collectingAgentTaxes was null or undefined when calling postCollectingAgentTaxes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/collectingAgentTaxes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CollectingAgentTaxesToJSON(requestParameters.collectingAgentTaxes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Collecting Agent Taxes. <p><strong>OperationId:</strong>postCollectingAgentTaxes</p>
     * Operation to create CollectingAgentTaxes.
     */
    async postCollectingAgentTaxes(requestParameters: PostCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCollectingAgentTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>postCompBucketRedemptionConfig</p>
     * Operation to create Comp Bucket Redemption Codes.
     */
    async postCompBucketRedemptionConfigRaw(requestParameters: PostCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCompBucketRedemptionConfig.');
        }
        
        if (requestParameters.compBucketRedemptionConfig === null || requestParameters.compBucketRedemptionConfig === undefined) {
            throw new runtime.RequiredError('compBucketRedemptionConfig','Required parameter requestParameters.compBucketRedemptionConfig was null or undefined when calling postCompBucketRedemptionConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compBucket/redemption`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompBucketRedemptionConfigToJSON(requestParameters.compBucketRedemptionConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>postCompBucketRedemptionConfig</p>
     * Operation to create Comp Bucket Redemption Codes.
     */
    async postCompBucketRedemptionConfig(requestParameters: PostCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompBucketRedemptionConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Create Comp Types <p><strong>OperationId:</strong>postCompTypes</p>
     * Operation to Create Comp Types
     */
    async postCompTypesRaw(requestParameters: PostCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.compTypesCriteria === null || requestParameters.compTypesCriteria === undefined) {
            throw new runtime.RequiredError('compTypesCriteria','Required parameter requestParameters.compTypesCriteria was null or undefined when calling postCompTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompTypesCriteriaToJSON(requestParameters.compTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Create Comp Types <p><strong>OperationId:</strong>postCompTypes</p>
     * Operation to Create Comp Types
     */
    async postCompTypes(requestParameters: PostCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create currency exchange service taxes. <p><strong>OperationId:</strong>postCurrencyExchangeServiceTaxes</p>
     * Operation to create CurrencyExchangeServiceTaxes.
     */
    async postCurrencyExchangeServiceTaxesRaw(requestParameters: PostCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.currencyExchangeServiceTaxes === null || requestParameters.currencyExchangeServiceTaxes === undefined) {
            throw new runtime.RequiredError('currencyExchangeServiceTaxes','Required parameter requestParameters.currencyExchangeServiceTaxes was null or undefined when calling postCurrencyExchangeServiceTaxes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyExchangeServiceTaxesToJSON(requestParameters.currencyExchangeServiceTaxes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create currency exchange service taxes. <p><strong>OperationId:</strong>postCurrencyExchangeServiceTaxes</p>
     * Operation to create CurrencyExchangeServiceTaxes.
     */
    async postCurrencyExchangeServiceTaxes(requestParameters: PostCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Custom Charge Exemptions Config. <p><strong>OperationId:</strong>postCustomChargeExemptionsConfig</p>
     * Operation to create Custom Charge Exemptions Config.
     */
    async postCustomChargeExemptionsConfigRaw(requestParameters: PostCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCustomChargeExemptionsConfig.');
        }
        
        if (requestParameters.customChargeExemptionsConfigToBeCreated === null || requestParameters.customChargeExemptionsConfigToBeCreated === undefined) {
            throw new runtime.RequiredError('customChargeExemptionsConfigToBeCreated','Required parameter requestParameters.customChargeExemptionsConfigToBeCreated was null or undefined when calling postCustomChargeExemptionsConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges/exemptions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomChargeExemptionsConfigToBeCreatedToJSON(requestParameters.customChargeExemptionsConfigToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Custom Charge Exemptions Config. <p><strong>OperationId:</strong>postCustomChargeExemptionsConfig</p>
     * Operation to create Custom Charge Exemptions Config.
     */
    async postCustomChargeExemptionsConfig(requestParameters: PostCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCustomChargeExemptionsConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Custom Charge Codes. <p><strong>OperationId:</strong>postCustomChargesConfig</p>
     * Operation to create Custom Charge Codes.
     */
    async postCustomChargesConfigRaw(requestParameters: PostCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCustomChargesConfig.');
        }
        
        if (requestParameters.customChargesConfig === null || requestParameters.customChargesConfig === undefined) {
            throw new runtime.RequiredError('customChargesConfig','Required parameter requestParameters.customChargesConfig was null or undefined when calling postCustomChargesConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomChargesConfigToJSON(requestParameters.customChargesConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Custom Charge Codes. <p><strong>OperationId:</strong>postCustomChargesConfig</p>
     * Operation to create Custom Charge Codes.
     */
    async postCustomChargesConfig(requestParameters: PostCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCustomChargesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postCustomNumberConfig</p>
     * Operation to create custom number config.
     */
    async postCustomNumberConfigRaw(requestParameters: PostCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCustomNumberConfig.');
        }
        
        if (requestParameters.customNumberConfiguration === null || requestParameters.customNumberConfiguration === undefined) {
            throw new runtime.RequiredError('customNumberConfiguration','Required parameter requestParameters.customNumberConfiguration was null or undefined when calling postCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customNumbers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomNumberConfigurationToJSON(requestParameters.customNumberConfiguration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postCustomNumberConfig</p>
     * Operation to create custom number config.
     */
    async postCustomNumberConfig(requestParameters: PostCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postExpenseArrangementCodes</p>
     * Operation to create ExpenseArrangementCodes.
     */
    async postExpenseArrangementCodesRaw(requestParameters: PostExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.expenseArrangementCodes === null || requestParameters.expenseArrangementCodes === undefined) {
            throw new runtime.RequiredError('expenseArrangementCodes','Required parameter requestParameters.expenseArrangementCodes was null or undefined when calling postExpenseArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseArrangementCodesToJSON(requestParameters.expenseArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postExpenseArrangementCodes</p>
     * Operation to create ExpenseArrangementCodes.
     */
    async postExpenseArrangementCodes(requestParameters: PostExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create fiscal partners. <p><strong>OperationId:</strong>postFiscalPartners</p>
     * Create fiscal partners
     */
    async postFiscalPartnersRaw(requestParameters: PostFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postFiscalPartners.');
        }
        
        if (requestParameters.createFiscalPartners === null || requestParameters.createFiscalPartners === undefined) {
            throw new runtime.RequiredError('createFiscalPartners','Required parameter requestParameters.createFiscalPartners was null or undefined when calling postFiscalPartners.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalPartners`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFiscalPartnersToJSON(requestParameters.createFiscalPartners),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create fiscal partners. <p><strong>OperationId:</strong>postFiscalPartners</p>
     * Create fiscal partners
     */
    async postFiscalPartners(requestParameters: PostFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFiscalPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Fiscal Periods. <p><strong>OperationId:</strong>postFiscalPeriods</p>
     * Operation to create FiscalPeriods.
     */
    async postFiscalPeriodsRaw(requestParameters: PostFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fiscalPeriods === null || requestParameters.fiscalPeriods === undefined) {
            throw new runtime.RequiredError('fiscalPeriods','Required parameter requestParameters.fiscalPeriods was null or undefined when calling postFiscalPeriods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalPeriods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FiscalPeriodsToJSON(requestParameters.fiscalPeriods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Fiscal Periods. <p><strong>OperationId:</strong>postFiscalPeriods</p>
     * Operation to create FiscalPeriods.
     */
    async postFiscalPeriods(requestParameters: PostFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFiscalPeriodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Fiscal Years. <p><strong>OperationId:</strong>postFiscalYears</p>
     * Operation to create FiscalYears.
     */
    async postFiscalYearsRaw(requestParameters: PostFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fiscalYears === null || requestParameters.fiscalYears === undefined) {
            throw new runtime.RequiredError('fiscalYears','Required parameter requestParameters.fiscalYears was null or undefined when calling postFiscalYears.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalYears`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FiscalYearsToJSON(requestParameters.fiscalYears),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Fiscal Years. <p><strong>OperationId:</strong>postFiscalYears</p>
     * Operation to create FiscalYears.
     */
    async postFiscalYears(requestParameters: PostFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFiscalYearsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postFolioArrangementCodes</p>
     * Operation to create FolioArrangementCodes.
     */
    async postFolioArrangementCodesRaw(requestParameters: PostFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioArrangementCodes === null || requestParameters.folioArrangementCodes === undefined) {
            throw new runtime.RequiredError('folioArrangementCodes','Required parameter requestParameters.folioArrangementCodes was null or undefined when calling postFolioArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioArrangementCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolioArrangementCodesToJSON(requestParameters.folioArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postFolioArrangementCodes</p>
     * Operation to create FolioArrangementCodes.
     */
    async postFolioArrangementCodes(requestParameters: PostFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFolioArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create folio print queues. <p><strong>OperationId:</strong>postFolioPrintQueues</p>
     * Operation to create FolioPrintQueues.
     */
    async postFolioPrintQueuesRaw(requestParameters: PostFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioPrintQueues === null || requestParameters.folioPrintQueues === undefined) {
            throw new runtime.RequiredError('folioPrintQueues','Required parameter requestParameters.folioPrintQueues was null or undefined when calling postFolioPrintQueues.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioPrintQueues`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolioPrintQueuesToJSON(requestParameters.folioPrintQueues),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create folio print queues. <p><strong>OperationId:</strong>postFolioPrintQueues</p>
     * Operation to create FolioPrintQueues.
     */
    async postFolioPrintQueues(requestParameters: PostFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFolioPrintQueuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create folio type legend mappings config. <p><strong>OperationId:</strong>postFolioTypeLegendMappingConfig</p>
     * Operation to create folio type legend mappings config.
     */
    async postFolioTypeLegendMappingConfigRaw(requestParameters: PostFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioTypeLegendMappingConfigCriteria === null || requestParameters.folioTypeLegendMappingConfigCriteria === undefined) {
            throw new runtime.RequiredError('folioTypeLegendMappingConfigCriteria','Required parameter requestParameters.folioTypeLegendMappingConfigCriteria was null or undefined when calling postFolioTypeLegendMappingConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypeLegendMappings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolioTypeLegendMappingConfigCriteriaToJSON(requestParameters.folioTypeLegendMappingConfigCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create folio type legend mappings config. <p><strong>OperationId:</strong>postFolioTypeLegendMappingConfig</p>
     * Operation to create folio type legend mappings config.
     */
    async postFolioTypeLegendMappingConfig(requestParameters: PostFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFolioTypeLegendMappingConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Create Folio Type Names. <p><strong>OperationId:</strong>postFolioTypesConfig</p>
     * Operation to create FolioTypesConfig.
     */
    async postFolioTypesConfigRaw(requestParameters: PostFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioTypesConfig === null || requestParameters.folioTypesConfig === undefined) {
            throw new runtime.RequiredError('folioTypesConfig','Required parameter requestParameters.folioTypesConfig was null or undefined when calling postFolioTypesConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypesConfig`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolioTypesConfigToJSON(requestParameters.folioTypesConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Create Folio Type Names. <p><strong>OperationId:</strong>postFolioTypesConfig</p>
     * Operation to create FolioTypesConfig.
     */
    async postFolioTypesConfig(requestParameters: PostFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFolioTypesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Foreign Currencies. <p><strong>OperationId:</strong>postForeignCurrencies</p>
     * Operation to create ForeignCurrencies.
     */
    async postForeignCurrenciesRaw(requestParameters: PostForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.foreignCurrencies === null || requestParameters.foreignCurrencies === undefined) {
            throw new runtime.RequiredError('foreignCurrencies','Required parameter requestParameters.foreignCurrencies was null or undefined when calling postForeignCurrencies.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/foreignCurrencies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ForeignCurrenciesToJSON(requestParameters.foreignCurrencies),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Foreign Currencies. <p><strong>OperationId:</strong>postForeignCurrencies</p>
     * Operation to create ForeignCurrencies.
     */
    async postForeignCurrencies(requestParameters: PostForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postForeignCurrenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postGroupArrangementCodes</p>
     * Operation to create GroupArrangementCodes.
     */
    async postGroupArrangementCodesRaw(requestParameters: PostGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.groupArrangementCodes === null || requestParameters.groupArrangementCodes === undefined) {
            throw new runtime.RequiredError('groupArrangementCodes','Required parameter requestParameters.groupArrangementCodes was null or undefined when calling postGroupArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/groupArrangementCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupArrangementCodesToJSON(requestParameters.groupArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postGroupArrangementCodes</p>
     * Operation to create GroupArrangementCodes.
     */
    async postGroupArrangementCodes(requestParameters: PostGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGroupArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create No Show Posting Rules. <p><strong>OperationId:</strong>postNoShowPostingRules</p>
     * Operation to create NoShowPostingRules.
     */
    async postNoShowPostingRulesRaw(requestParameters: PostNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.noShowPostingRules === null || requestParameters.noShowPostingRules === undefined) {
            throw new runtime.RequiredError('noShowPostingRules','Required parameter requestParameters.noShowPostingRules was null or undefined when calling postNoShowPostingRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noShowPostingRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoShowPostingRulesToJSON(requestParameters.noShowPostingRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create No Show Posting Rules. <p><strong>OperationId:</strong>postNoShowPostingRules</p>
     * Operation to create NoShowPostingRules.
     */
    async postNoShowPostingRules(requestParameters: PostNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postNoShowPostingRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postPackageArrangementCodes</p>
     * Operation to create PackageArrangementCodes.
     */
    async postPackageArrangementCodesRaw(requestParameters: PostPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageArrangementCodes === null || requestParameters.packageArrangementCodes === undefined) {
            throw new runtime.RequiredError('packageArrangementCodes','Required parameter requestParameters.packageArrangementCodes was null or undefined when calling postPackageArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageArrangementCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackageArrangementCodesToJSON(requestParameters.packageArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postPackageArrangementCodes</p>
     * Operation to create PackageArrangementCodes.
     */
    async postPackageArrangementCodes(requestParameters: PostPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPackageArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create payment methods. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Operation to create PaymentMethods.
     */
    async postPaymentMethodsRaw(requestParameters: PostPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.paymentMethods === null || requestParameters.paymentMethods === undefined) {
            throw new runtime.RequiredError('paymentMethods','Required parameter requestParameters.paymentMethods was null or undefined when calling postPaymentMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelPaymentMethods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentMethodsToJSON(requestParameters.paymentMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create payment methods. <p><strong>OperationId:</strong>postPaymentMethods</p>
     * Operation to create PaymentMethods.
     */
    async postPaymentMethods(requestParameters: PostPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Revenue Bucket Codes. <p><strong>OperationId:</strong>postRevenueBucketCodes</p>
     * Operation to create RevenueBucketCodes.
     */
    async postRevenueBucketCodesRaw(requestParameters: PostRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueBucketCodes === null || requestParameters.revenueBucketCodes === undefined) {
            throw new runtime.RequiredError('revenueBucketCodes','Required parameter requestParameters.revenueBucketCodes was null or undefined when calling postRevenueBucketCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueBucketCodesToJSON(requestParameters.revenueBucketCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Revenue Bucket Codes. <p><strong>OperationId:</strong>postRevenueBucketCodes</p>
     * Operation to create RevenueBucketCodes.
     */
    async postRevenueBucketCodes(requestParameters: PostRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRevenueBucketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Revenue Bucket Types. <p><strong>OperationId:</strong>postRevenueBucketTypes</p>
     * Operation to create RevenueBucketTypes.
     */
    async postRevenueBucketTypesRaw(requestParameters: PostRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueBucketTypes === null || requestParameters.revenueBucketTypes === undefined) {
            throw new runtime.RequiredError('revenueBucketTypes','Required parameter requestParameters.revenueBucketTypes was null or undefined when calling postRevenueBucketTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueBucketTypesToJSON(requestParameters.revenueBucketTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Revenue Bucket Types. <p><strong>OperationId:</strong>postRevenueBucketTypes</p>
     * Operation to create RevenueBucketTypes.
     */
    async postRevenueBucketTypes(requestParameters: PostRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRevenueBucketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update transaction generates for a specific property.  Generates are rules used to calculate and post additional charges, such as service charges and taxes, when a particular sales charge transaction code is posted to guest, package or AR ledgers.<p><strong>OperationId:</strong>putTransactionGenerates</p>
     * Post revenue type mapping
     */
    async postRevenueTypeMappingRaw(requestParameters: PostRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueTypeMapping === null || requestParameters.revenueTypeMapping === undefined) {
            throw new runtime.RequiredError('revenueTypeMapping','Required parameter requestParameters.revenueTypeMapping was null or undefined when calling postRevenueTypeMapping.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypeMapping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueTypeMappingToJSON(requestParameters.revenueTypeMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update transaction generates for a specific property.  Generates are rules used to calculate and post additional charges, such as service charges and taxes, when a particular sales charge transaction code is posted to guest, package or AR ledgers.<p><strong>OperationId:</strong>putTransactionGenerates</p>
     * Post revenue type mapping
     */
    async postRevenueTypeMapping(requestParameters: PostRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRevenueTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create routing instructions. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Operation to create RoutingInstructions.
     */
    async postRoutingInstructionsRaw(requestParameters: PostRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.routingInstructions === null || requestParameters.routingInstructions === undefined) {
            throw new runtime.RequiredError('routingInstructions','Required parameter requestParameters.routingInstructions was null or undefined when calling postRoutingInstructions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/routingInstructions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingInstructionsToJSON(requestParameters.routingInstructions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create routing instructions. <p><strong>OperationId:</strong>postRoutingInstructions</p>
     * Operation to create RoutingInstructions.
     */
    async postRoutingInstructions(requestParameters: PostRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Create Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>postTaxBrackets</p>
     * Operation to create TaxBrackets.
     */
    async postTaxBracketsRaw(requestParameters: PostTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.taxBrackets === null || requestParameters.taxBrackets === undefined) {
            throw new runtime.RequiredError('taxBrackets','Required parameter requestParameters.taxBrackets was null or undefined when calling postTaxBrackets.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxBrackets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxBracketsToJSON(requestParameters.taxBrackets),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Create Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>postTaxBrackets</p>
     * Operation to create TaxBrackets.
     */
    async postTaxBrackets(requestParameters: PostTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTaxBracketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Tax Types. <p><strong>OperationId:</strong>postTaxTypes</p>
     * Operation to create TaxTypes.
     */
    async postTaxTypesRaw(requestParameters: PostTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.taxTypes === null || requestParameters.taxTypes === undefined) {
            throw new runtime.RequiredError('taxTypes','Required parameter requestParameters.taxTypes was null or undefined when calling postTaxTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelTaxTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaxTypesToJSON(requestParameters.taxTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Tax Types. <p><strong>OperationId:</strong>postTaxTypes</p>
     * Operation to create TaxTypes.
     */
    async postTaxTypes(requestParameters: PostTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new template custom number configuration. <p><strong>OperationId:</strong>postTemplateCustomNumber</p>
     * Operation to create a new template custom number configuration.
     */
    async postTemplateCustomNumberRaw(requestParameters: PostTemplateCustomNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateCustomNumberConfig === null || requestParameters.templateCustomNumberConfig === undefined) {
            throw new runtime.RequiredError('templateCustomNumberConfig','Required parameter requestParameters.templateCustomNumberConfig was null or undefined when calling postTemplateCustomNumber.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/template/customNumbers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateCustomNumberConfigToJSON(requestParameters.templateCustomNumberConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new template custom number configuration. <p><strong>OperationId:</strong>postTemplateCustomNumber</p>
     * Operation to create a new template custom number configuration.
     */
    async postTemplateCustomNumber(requestParameters: PostTemplateCustomNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateCustomNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use postTemplateCustomNumber instead</mark></strong></p> <p><strong>OperationId:</strong>postTemplateCustomNumberConfig</p>
     * Operation to create a new template custom number configuration.
     * @deprecated
     */
    async postTemplateCustomNumberConfigRaw(requestParameters: PostTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTemplateCustomNumberConfig.');
        }
        
        if (requestParameters.templateCustomNumberConfig === null || requestParameters.templateCustomNumberConfig === undefined) {
            throw new runtime.RequiredError('templateCustomNumberConfig','Required parameter requestParameters.templateCustomNumberConfig was null or undefined when calling postTemplateCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/template/customNumbers`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateCustomNumberConfigToJSON(requestParameters.templateCustomNumberConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use postTemplateCustomNumber instead</mark></strong></p> <p><strong>OperationId:</strong>postTemplateCustomNumberConfig</p>
     * Operation to create a new template custom number configuration.
     * @deprecated
     */
    async postTemplateCustomNumberConfig(requestParameters: PostTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create template transaction codes.<p><strong>OperationId:</strong>postTemplateTransactionCodes</p>
     * Post template transaction codes
     */
    async postTemplateTransactionCodesRaw(requestParameters: PostTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTransactionCodes === null || requestParameters.templateTransactionCodes === undefined) {
            throw new runtime.RequiredError('templateTransactionCodes','Required parameter requestParameters.templateTransactionCodes was null or undefined when calling postTemplateTransactionCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTransactionCodesToJSON(requestParameters.templateTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create template transaction codes.<p><strong>OperationId:</strong>postTemplateTransactionCodes</p>
     * Post template transaction codes
     */
    async postTemplateTransactionCodes(requestParameters: PostTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create new template transaction group. <p><strong>OperationId:</strong>postTemplateTransactionGroups</p>
     * Operation to create TemplateTransactionGroups.
     */
    async postTemplateTransactionGroupsRaw(requestParameters: PostTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTransactionGroups === null || requestParameters.templateTransactionGroups === undefined) {
            throw new runtime.RequiredError('templateTransactionGroups','Required parameter requestParameters.templateTransactionGroups was null or undefined when calling postTemplateTransactionGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTransactionGroupsToJSON(requestParameters.templateTransactionGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create new template transaction group. <p><strong>OperationId:</strong>postTemplateTransactionGroups</p>
     * Operation to create TemplateTransactionGroups.
     */
    async postTemplateTransactionGroups(requestParameters: PostTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create template transaction subgroups <p><strong>OperationId:</strong>postTemplateTransactionSubgroups</p>
     * Operation to create TemplateTransactionSubgroups.
     */
    async postTemplateTransactionSubgroupsRaw(requestParameters: PostTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTransactionSubgroups === null || requestParameters.templateTransactionSubgroups === undefined) {
            throw new runtime.RequiredError('templateTransactionSubgroups','Required parameter requestParameters.templateTransactionSubgroups was null or undefined when calling postTemplateTransactionSubgroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionSubGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTransactionSubgroupsToJSON(requestParameters.templateTransactionSubgroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create template transaction subgroups <p><strong>OperationId:</strong>postTemplateTransactionSubgroups</p>
     * Operation to create TemplateTransactionSubgroups.
     */
    async postTemplateTransactionSubgroups(requestParameters: PostTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transaction codes for a specific property.<p><strong>OperationId:</strong>postTransactionCodes</p>
     * Post transaction codes
     */
    async postTransactionCodesRaw(requestParameters: PostTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelTransactionCodes === null || requestParameters.hotelTransactionCodes === undefined) {
            throw new runtime.RequiredError('hotelTransactionCodes','Required parameter requestParameters.hotelTransactionCodes was null or undefined when calling postTransactionCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTransactionCodesToJSON(requestParameters.hotelTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transaction codes for a specific property.<p><strong>OperationId:</strong>postTransactionCodes</p>
     * Post transaction codes
     */
    async postTransactionCodes(requestParameters: PostTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transaction discounts for a specific hotel. <p><strong>OperationId:</strong>postTransactionDiscounts</p>
     * Operation to create TransactionDiscounts.
     */
    async postTransactionDiscountsRaw(requestParameters: PostTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionDiscount === null || requestParameters.transactionDiscount === undefined) {
            throw new runtime.RequiredError('transactionDiscount','Required parameter requestParameters.transactionDiscount was null or undefined when calling postTransactionDiscounts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionDiscounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDiscountToJSON(requestParameters.transactionDiscount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transaction discounts for a specific hotel. <p><strong>OperationId:</strong>postTransactionDiscounts</p>
     * Operation to create TransactionDiscounts.
     */
    async postTransactionDiscounts(requestParameters: PostTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create Transaction Diversion Rules. <p><strong>OperationId:</strong>postTransactionDiversionRules</p>
     * Operation to create TransactionDiversionRules.
     */
    async postTransactionDiversionRulesRaw(requestParameters: PostTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionDiversionRules === null || requestParameters.transactionDiversionRules === undefined) {
            throw new runtime.RequiredError('transactionDiversionRules','Required parameter requestParameters.transactionDiversionRules was null or undefined when calling postTransactionDiversionRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionDiversionRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDiversionRulesToJSON(requestParameters.transactionDiversionRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create Transaction Diversion Rules. <p><strong>OperationId:</strong>postTransactionDiversionRules</p>
     * Operation to create TransactionDiversionRules.
     */
    async postTransactionDiversionRules(requestParameters: PostTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionDiversionRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create transaction generates for a specific property.  Generates are rules used to calculate and post additional charges, such as service charges and taxes, when a particular sales charge transaction code is posted to guest, package or AR ledgers.<p><strong>OperationId:</strong>postTransactionGenerates</p>
     * Post transaction generates
     */
    async postTransactionGeneratesRaw(requestParameters: PostTransactionGeneratesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelTransactionGenerates === null || requestParameters.hotelTransactionGenerates === undefined) {
            throw new runtime.RequiredError('hotelTransactionGenerates','Required parameter requestParameters.hotelTransactionGenerates was null or undefined when calling postTransactionGenerates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/generates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTransactionGeneratesToJSON(requestParameters.hotelTransactionGenerates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create transaction generates for a specific property.  Generates are rules used to calculate and post additional charges, such as service charges and taxes, when a particular sales charge transaction code is posted to guest, package or AR ledgers.<p><strong>OperationId:</strong>postTransactionGenerates</p>
     * Post transaction generates
     */
    async postTransactionGenerates(requestParameters: PostTransactionGeneratesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionGeneratesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create transaction groups. <p><strong>OperationId:</strong>postTransactionGroups</p>
     * Operation to create TransactionGroups.
     */
    async postTransactionGroupsRaw(requestParameters: PostTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionGroups === null || requestParameters.transactionGroups === undefined) {
            throw new runtime.RequiredError('transactionGroups','Required parameter requestParameters.transactionGroups was null or undefined when calling postTransactionGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionGroupsToJSON(requestParameters.transactionGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create transaction groups. <p><strong>OperationId:</strong>postTransactionGroups</p>
     * Operation to create TransactionGroups.
     */
    async postTransactionGroups(requestParameters: PostTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create transaction sub groups. <p><strong>OperationId:</strong>postTransactionSubgroups</p>
     * Operation to create TransactionSubgroups.
     */
    async postTransactionSubgroupsRaw(requestParameters: PostTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelTransactionSubgroups === null || requestParameters.hotelTransactionSubgroups === undefined) {
            throw new runtime.RequiredError('hotelTransactionSubgroups','Required parameter requestParameters.hotelTransactionSubgroups was null or undefined when calling postTransactionSubgroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionSubGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTransactionSubgroupsToJSON(requestParameters.hotelTransactionSubgroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create transaction sub groups. <p><strong>OperationId:</strong>postTransactionSubgroups</p>
     * Operation to create TransactionSubgroups.
     */
    async postTransactionSubgroups(requestParameters: PostTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Adjustment Codes. <p><strong>OperationId:</strong>putAdjustmentCodes</p>
     * Operation to change AdjustmentCodes.
     */
    async putAdjustmentCodesRaw(requestParameters: PutAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.adjustmentCodes === null || requestParameters.adjustmentCodes === undefined) {
            throw new runtime.RequiredError('adjustmentCodes','Required parameter requestParameters.adjustmentCodes was null or undefined when calling putAdjustmentCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelAdjustmentCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AdjustmentCodesToJSON(requestParameters.adjustmentCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Adjustment Codes. <p><strong>OperationId:</strong>putAdjustmentCodes</p>
     * Operation to change AdjustmentCodes.
     */
    async putAdjustmentCodes(requestParameters: PutAdjustmentCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAdjustmentCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change articles. <p><strong>OperationId:</strong>putArticles</p>
     * Operation to change Articles.
     */
    async putArticlesRaw(requestParameters: PutArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.articles === null || requestParameters.articles === undefined) {
            throw new runtime.RequiredError('articles','Required parameter requestParameters.articles was null or undefined when calling putArticles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesToJSON(requestParameters.articles),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change articles. <p><strong>OperationId:</strong>putArticles</p>
     * Operation to change Articles.
     */
    async putArticles(requestParameters: PutArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putAuthorizationConfigRule</p>
     * Operation to change AuthorizationConfigRule.
     */
    async putAuthorizationConfigRuleRaw(requestParameters: PutAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorizationConfigRules === null || requestParameters.authorizationConfigRules === undefined) {
            throw new runtime.RequiredError('authorizationConfigRules','Required parameter requestParameters.authorizationConfigRules was null or undefined when calling putAuthorizationConfigRule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationConfigRule`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizationConfigRulesToJSON(requestParameters.authorizationConfigRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putAuthorizationConfigRule</p>
     * Operation to change AuthorizationConfigRule.
     */
    async putAuthorizationConfigRule(requestParameters: PutAuthorizationConfigRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAuthorizationConfigRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Authorizer Groups. <p><strong>OperationId:</strong>putAuthorizerGroups</p>
     * Operation to change AuthorizerGroups.
     */
    async putAuthorizerGroupsRaw(requestParameters: PutAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorizerGroupsToChange === null || requestParameters.authorizerGroupsToChange === undefined) {
            throw new runtime.RequiredError('authorizerGroupsToChange','Required parameter requestParameters.authorizerGroupsToChange was null or undefined when calling putAuthorizerGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizerGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizerGroupsToChangeToJSON(requestParameters.authorizerGroupsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Authorizer Groups. <p><strong>OperationId:</strong>putAuthorizerGroups</p>
     * Operation to change AuthorizerGroups.
     */
    async putAuthorizerGroups(requestParameters: PutAuthorizerGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAuthorizerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This Operation to Change a Cashier. <p><strong>OperationId:</strong>putCashiers</p>
     * Operation to change CashiersDetails.
     */
    async putCashiersRaw(requestParameters: PutCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cashiers === null || requestParameters.cashiers === undefined) {
            throw new runtime.RequiredError('cashiers','Required parameter requestParameters.cashiers was null or undefined when calling putCashiers.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashiers`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CashiersToJSON(requestParameters.cashiers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This Operation to Change a Cashier. <p><strong>OperationId:</strong>putCashiers</p>
     * Operation to change CashiersDetails.
     */
    async putCashiers(requestParameters: PutCashiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCashiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Collecting Agent Taxes. <p><strong>OperationId:</strong>putCollectingAgentTaxes</p>
     * Operation to change CollectingAgentTaxes.
     */
    async putCollectingAgentTaxesRaw(requestParameters: PutCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.collectingAgentTaxes === null || requestParameters.collectingAgentTaxes === undefined) {
            throw new runtime.RequiredError('collectingAgentTaxes','Required parameter requestParameters.collectingAgentTaxes was null or undefined when calling putCollectingAgentTaxes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/collectingAgentTaxes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CollectingAgentTaxesToJSON(requestParameters.collectingAgentTaxes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Collecting Agent Taxes. <p><strong>OperationId:</strong>putCollectingAgentTaxes</p>
     * Operation to change CollectingAgentTaxes.
     */
    async putCollectingAgentTaxes(requestParameters: PutCollectingAgentTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCollectingAgentTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>putCompBucketRedemptionConfig</p>
     * Operation to change Comp Bucket Redemption Codes.
     */
    async putCompBucketRedemptionConfigRaw(requestParameters: PutCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.redemptionCode === null || requestParameters.redemptionCode === undefined) {
            throw new runtime.RequiredError('redemptionCode','Required parameter requestParameters.redemptionCode was null or undefined when calling putCompBucketRedemptionConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCompBucketRedemptionConfig.');
        }
        
        if (requestParameters.compBucketRedemptionConfig === null || requestParameters.compBucketRedemptionConfig === undefined) {
            throw new runtime.RequiredError('compBucketRedemptionConfig','Required parameter requestParameters.compBucketRedemptionConfig was null or undefined when calling putCompBucketRedemptionConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/compBucket/redemption/{redemptionCode}`.replace(`{${"redemptionCode"}}`, encodeURIComponent(String(requestParameters.redemptionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompBucketRedemptionConfigToJSON(requestParameters.compBucketRedemptionConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Comp Bucket Redemption Codes. <p><strong>OperationId:</strong>putCompBucketRedemptionConfig</p>
     * Operation to change Comp Bucket Redemption Codes.
     */
    async putCompBucketRedemptionConfig(requestParameters: PutCompBucketRedemptionConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCompBucketRedemptionConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change currency exchange service taxes. <p><strong>OperationId:</strong>putCurrencyExchangeServiceTaxes</p>
     * Operation to change ExchangeServiceTaxes.
     */
    async putCurrencyExchangeServiceTaxesRaw(requestParameters: PutCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.currencyExchangeServiceTaxes === null || requestParameters.currencyExchangeServiceTaxes === undefined) {
            throw new runtime.RequiredError('currencyExchangeServiceTaxes','Required parameter requestParameters.currencyExchangeServiceTaxes was null or undefined when calling putCurrencyExchangeServiceTaxes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/currencyExchangeServiceTaxes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurrencyExchangeServiceTaxesToJSON(requestParameters.currencyExchangeServiceTaxes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change currency exchange service taxes. <p><strong>OperationId:</strong>putCurrencyExchangeServiceTaxes</p>
     * Operation to change ExchangeServiceTaxes.
     */
    async putCurrencyExchangeServiceTaxes(requestParameters: PutCurrencyExchangeServiceTaxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCurrencyExchangeServiceTaxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Custom Charge Exemptions Config. <p><strong>OperationId:</strong>putCustomChargeExemptionsConfig</p>
     * Operation to change Custom Charge Exemptions Config.
     */
    async putCustomChargeExemptionsConfigRaw(requestParameters: PutCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling putCustomChargeExemptionsConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCustomChargeExemptionsConfig.');
        }
        
        if (requestParameters.customChargeExemptionsConfigToBeChanged === null || requestParameters.customChargeExemptionsConfigToBeChanged === undefined) {
            throw new runtime.RequiredError('customChargeExemptionsConfigToBeChanged','Required parameter requestParameters.customChargeExemptionsConfigToBeChanged was null or undefined when calling putCustomChargeExemptionsConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges/exemptions/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomChargeExemptionsConfigToBeChangedToJSON(requestParameters.customChargeExemptionsConfigToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Custom Charge Exemptions Config. <p><strong>OperationId:</strong>putCustomChargeExemptionsConfig</p>
     * Operation to change Custom Charge Exemptions Config.
     */
    async putCustomChargeExemptionsConfig(requestParameters: PutCustomChargeExemptionsConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCustomChargeExemptionsConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Custom ChargeCodes. <p><strong>OperationId:</strong>putCustomChargesConfig</p>
     * Operation to change Custom Charge Codes.
     */
    async putCustomChargesConfigRaw(requestParameters: PutCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling putCustomChargesConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCustomChargesConfig.');
        }
        
        if (requestParameters.customChargesConfig === null || requestParameters.customChargesConfig === undefined) {
            throw new runtime.RequiredError('customChargesConfig','Required parameter requestParameters.customChargesConfig was null or undefined when calling putCustomChargesConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customCharges/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomChargesConfigToJSON(requestParameters.customChargesConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Custom ChargeCodes. <p><strong>OperationId:</strong>putCustomChargesConfig</p>
     * Operation to change Custom Charge Codes.
     */
    async putCustomChargesConfig(requestParameters: PutCustomChargesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCustomChargesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putCustomNumberConfig</p>
     * Operation to change custom number config.
     */
    async putCustomNumberConfigRaw(requestParameters: PutCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling putCustomNumberConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCustomNumberConfig.');
        }
        
        if (requestParameters.customNumberConfiguration === null || requestParameters.customNumberConfiguration === undefined) {
            throw new runtime.RequiredError('customNumberConfiguration','Required parameter requestParameters.customNumberConfiguration was null or undefined when calling putCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/customNumbers/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomNumberConfigurationToJSON(requestParameters.customNumberConfiguration),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putCustomNumberConfig</p>
     * Operation to change custom number config.
     */
    async putCustomNumberConfig(requestParameters: PutCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putDailyPlanCodes</p>
     * Operation to change DailyPlanCodes.
     */
    async putDailyPlanCodesRaw(requestParameters: PutDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.dailyPlanCodes === null || requestParameters.dailyPlanCodes === undefined) {
            throw new runtime.RequiredError('dailyPlanCodes','Required parameter requestParameters.dailyPlanCodes was null or undefined when calling putDailyPlanCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/dailyPlanCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DailyPlanCodesToJSON(requestParameters.dailyPlanCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putDailyPlanCodes</p>
     * Operation to change DailyPlanCodes.
     */
    async putDailyPlanCodes(requestParameters: PutDailyPlanCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDailyPlanCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putExpenseArrangementCodes</p>
     * Operation to change ExpenseArrangementCodes.
     */
    async putExpenseArrangementCodesRaw(requestParameters: PutExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.expenseArrangementCodes === null || requestParameters.expenseArrangementCodes === undefined) {
            throw new runtime.RequiredError('expenseArrangementCodes','Required parameter requestParameters.expenseArrangementCodes was null or undefined when calling putExpenseArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/expenseArrangementCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseArrangementCodesToJSON(requestParameters.expenseArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putExpenseArrangementCodes</p>
     * Operation to change ExpenseArrangementCodes.
     */
    async putExpenseArrangementCodes(requestParameters: PutExpenseArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putExpenseArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Fiscal Folio Parameters. <p><strong>OperationId:</strong>putFiscalFolioParameters</p>
     * Operation to change FiscalFolioParameters.
     */
    async putFiscalFolioParametersRaw(requestParameters: PutFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fiscalFolioParameters === null || requestParameters.fiscalFolioParameters === undefined) {
            throw new runtime.RequiredError('fiscalFolioParameters','Required parameter requestParameters.fiscalFolioParameters was null or undefined when calling putFiscalFolioParameters.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalFolioParameters`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FiscalFolioParametersToJSON(requestParameters.fiscalFolioParameters),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Fiscal Folio Parameters. <p><strong>OperationId:</strong>putFiscalFolioParameters</p>
     * Operation to change FiscalFolioParameters.
     */
    async putFiscalFolioParameters(requestParameters: PutFiscalFolioParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFiscalFolioParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Fiscal Periods. <p><strong>OperationId:</strong>putFiscalPeriods</p>
     * Operation to change FiscalPeriods.
     */
    async putFiscalPeriodsRaw(requestParameters: PutFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fiscalPeriodsEdit === null || requestParameters.fiscalPeriodsEdit === undefined) {
            throw new runtime.RequiredError('fiscalPeriodsEdit','Required parameter requestParameters.fiscalPeriodsEdit was null or undefined when calling putFiscalPeriods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalPeriods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FiscalPeriodsEditToJSON(requestParameters.fiscalPeriodsEdit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Fiscal Periods. <p><strong>OperationId:</strong>putFiscalPeriods</p>
     * Operation to change FiscalPeriods.
     */
    async putFiscalPeriods(requestParameters: PutFiscalPeriodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFiscalPeriodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Fiscal Years. <p><strong>OperationId:</strong>putFiscalYears</p>
     * Operation to change FiscalYears.
     */
    async putFiscalYearsRaw(requestParameters: PutFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.fiscalYears === null || requestParameters.fiscalYears === undefined) {
            throw new runtime.RequiredError('fiscalYears','Required parameter requestParameters.fiscalYears was null or undefined when calling putFiscalYears.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalYears`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FiscalYearsToJSON(requestParameters.fiscalYears),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Fiscal Years. <p><strong>OperationId:</strong>putFiscalYears</p>
     * Operation to change FiscalYears.
     */
    async putFiscalYears(requestParameters: PutFiscalYearsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFiscalYearsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putFolioArrangementCodes</p>
     * Operation to change FolioArrangementCodes.
     */
    async putFolioArrangementCodesRaw(requestParameters: PutFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioArrangementCodes === null || requestParameters.folioArrangementCodes === undefined) {
            throw new runtime.RequiredError('folioArrangementCodes','Required parameter requestParameters.folioArrangementCodes was null or undefined when calling putFolioArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioArrangementCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolioArrangementCodesToJSON(requestParameters.folioArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putFolioArrangementCodes</p>
     * Operation to change FolioArrangementCodes.
     */
    async putFolioArrangementCodes(requestParameters: PutFolioArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFolioArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change folio copy legends information <p><strong>OperationId:</strong>putFolioCopyLegends</p>
     * Operation to change FolioCopyLegends.
     */
    async putFolioCopyLegendsRaw(requestParameters: PutFolioCopyLegendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioCopyLegend === null || requestParameters.folioCopyLegend === undefined) {
            throw new runtime.RequiredError('folioCopyLegend','Required parameter requestParameters.folioCopyLegend was null or undefined when calling putFolioCopyLegends.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioCopyLegends`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolioCopyLegendToJSON(requestParameters.folioCopyLegend),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change folio copy legends information <p><strong>OperationId:</strong>putFolioCopyLegends</p>
     * Operation to change FolioCopyLegends.
     */
    async putFolioCopyLegends(requestParameters: PutFolioCopyLegendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFolioCopyLegendsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change folio print queues. <p><strong>OperationId:</strong>putFolioPrintQueues</p>
     * Operation to change FolioPrintQueues.
     */
    async putFolioPrintQueuesRaw(requestParameters: PutFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioPrintQueues === null || requestParameters.folioPrintQueues === undefined) {
            throw new runtime.RequiredError('folioPrintQueues','Required parameter requestParameters.folioPrintQueues was null or undefined when calling putFolioPrintQueues.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioPrintQueues`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolioPrintQueuesToJSON(requestParameters.folioPrintQueues),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change folio print queues. <p><strong>OperationId:</strong>putFolioPrintQueues</p>
     * Operation to change FolioPrintQueues.
     */
    async putFolioPrintQueues(requestParameters: PutFolioPrintQueuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFolioPrintQueuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Folio Type Names. <p><strong>OperationId:</strong>putFolioTypesConfig</p>
     * Operation to change FolioTypesConfig.
     */
    async putFolioTypesConfigRaw(requestParameters: PutFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.folioTypesConfig === null || requestParameters.folioTypesConfig === undefined) {
            throw new runtime.RequiredError('folioTypesConfig','Required parameter requestParameters.folioTypesConfig was null or undefined when calling putFolioTypesConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/folioTypesConfig`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolioTypesConfigToJSON(requestParameters.folioTypesConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Folio Type Names. <p><strong>OperationId:</strong>putFolioTypesConfig</p>
     * Operation to change FolioTypesConfig.
     */
    async putFolioTypesConfig(requestParameters: PutFolioTypesConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putFolioTypesConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Foreign Currencies. <p><strong>OperationId:</strong>putForeignCurrencies</p>
     * Operation to change ForeignCurrencies.
     */
    async putForeignCurrenciesRaw(requestParameters: PutForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.foreignCurrencies === null || requestParameters.foreignCurrencies === undefined) {
            throw new runtime.RequiredError('foreignCurrencies','Required parameter requestParameters.foreignCurrencies was null or undefined when calling putForeignCurrencies.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/foreignCurrencies`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ForeignCurrenciesToJSON(requestParameters.foreignCurrencies),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Foreign Currencies. <p><strong>OperationId:</strong>putForeignCurrencies</p>
     * Operation to change ForeignCurrencies.
     */
    async putForeignCurrencies(requestParameters: PutForeignCurrenciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putForeignCurrenciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change GUI Number rules <p><strong>OperationId:</strong>putGUINumberRules</p>
     * Operation to change GUINumberRules.
     */
    async putGUINumberRulesRaw(requestParameters: PutGUINumberRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.gUINumberRulesDetails === null || requestParameters.gUINumberRulesDetails === undefined) {
            throw new runtime.RequiredError('gUINumberRulesDetails','Required parameter requestParameters.gUINumberRulesDetails was null or undefined when calling putGUINumberRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guiNumberRules`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GUINumberRulesDetailsToJSON(requestParameters.gUINumberRulesDetails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change GUI Number rules <p><strong>OperationId:</strong>putGUINumberRules</p>
     * Operation to change GUINumberRules.
     */
    async putGUINumberRules(requestParameters: PutGUINumberRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGUINumberRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putGroupArrangementCodes</p>
     * Operation to change GroupArrangementCodes.
     */
    async putGroupArrangementCodesRaw(requestParameters: PutGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.groupArrangementCodes === null || requestParameters.groupArrangementCodes === undefined) {
            throw new runtime.RequiredError('groupArrangementCodes','Required parameter requestParameters.groupArrangementCodes was null or undefined when calling putGroupArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/groupArrangementCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupArrangementCodesToJSON(requestParameters.groupArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putGroupArrangementCodes</p>
     * Operation to change GroupArrangementCodes.
     */
    async putGroupArrangementCodes(requestParameters: PutGroupArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGroupArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change No Show Posting Rules. <p><strong>OperationId:</strong>putNoShowPostingRules</p>
     * Operation to change NoShowPostingRules.
     */
    async putNoShowPostingRulesRaw(requestParameters: PutNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.noShowPostingRulesEdit === null || requestParameters.noShowPostingRulesEdit === undefined) {
            throw new runtime.RequiredError('noShowPostingRulesEdit','Required parameter requestParameters.noShowPostingRulesEdit was null or undefined when calling putNoShowPostingRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/noShowPostingRules`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NoShowPostingRulesEditToJSON(requestParameters.noShowPostingRulesEdit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change No Show Posting Rules. <p><strong>OperationId:</strong>putNoShowPostingRules</p>
     * Operation to change NoShowPostingRules.
     */
    async putNoShowPostingRules(requestParameters: PutNoShowPostingRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putNoShowPostingRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The operation is to change the description corresponding to a number. <p><strong>OperationId:</strong>putNumberDescriptions</p>
     * Operation to change NumberDescriptions.
     */
    async putNumberDescriptionsRaw(requestParameters: PutNumberDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.numberDescriptions === null || requestParameters.numberDescriptions === undefined) {
            throw new runtime.RequiredError('numberDescriptions','Required parameter requestParameters.numberDescriptions was null or undefined when calling putNumberDescriptions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/numberDescriptions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NumberDescriptionsToJSON(requestParameters.numberDescriptions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * The operation is to change the description corresponding to a number. <p><strong>OperationId:</strong>putNumberDescriptions</p>
     * Operation to change NumberDescriptions.
     */
    async putNumberDescriptions(requestParameters: PutNumberDescriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putNumberDescriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Opera Document Sequences. <p><strong>OperationId:</strong>putOperaControlSequences</p>
     * Operation to change OperaControlSequences.
     */
    async putOperaControlSequencesRaw(requestParameters: PutOperaControlSequencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.operaControlSequences === null || requestParameters.operaControlSequences === undefined) {
            throw new runtime.RequiredError('operaControlSequences','Required parameter requestParameters.operaControlSequences was null or undefined when calling putOperaControlSequences.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/operaControlSequences`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OperaControlSequencesToJSON(requestParameters.operaControlSequences),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Opera Document Sequences. <p><strong>OperationId:</strong>putOperaControlSequences</p>
     * Operation to change OperaControlSequences.
     */
    async putOperaControlSequences(requestParameters: PutOperaControlSequencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putOperaControlSequencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putPackageArrangementCodes</p>
     * Operation to change PackageArrangementCodes.
     */
    async putPackageArrangementCodesRaw(requestParameters: PutPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageArrangementCodes === null || requestParameters.packageArrangementCodes === undefined) {
            throw new runtime.RequiredError('packageArrangementCodes','Required parameter requestParameters.packageArrangementCodes was null or undefined when calling putPackageArrangementCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/packageArrangementCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PackageArrangementCodesToJSON(requestParameters.packageArrangementCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putPackageArrangementCodes</p>
     * Operation to change PackageArrangementCodes.
     */
    async putPackageArrangementCodes(requestParameters: PutPackageArrangementCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPackageArrangementCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change payment methods. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Operation to change PaymentMethods.
     */
    async putPaymentMethodsRaw(requestParameters: PutPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.paymentMethods === null || requestParameters.paymentMethods === undefined) {
            throw new runtime.RequiredError('paymentMethods','Required parameter requestParameters.paymentMethods was null or undefined when calling putPaymentMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelPaymentMethods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentMethodsToJSON(requestParameters.paymentMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change payment methods. <p><strong>OperationId:</strong>putPaymentMethods</p>
     * Operation to change PaymentMethods.
     */
    async putPaymentMethods(requestParameters: PutPaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Revenue Bucket Codes. <p><strong>OperationId:</strong>putRevenueBucketCodes</p>
     * Operation to change RevenueBucketCodes.
     */
    async putRevenueBucketCodesRaw(requestParameters: PutRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueBucketCodes === null || requestParameters.revenueBucketCodes === undefined) {
            throw new runtime.RequiredError('revenueBucketCodes','Required parameter requestParameters.revenueBucketCodes was null or undefined when calling putRevenueBucketCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueBucketCodesToJSON(requestParameters.revenueBucketCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Revenue Bucket Codes. <p><strong>OperationId:</strong>putRevenueBucketCodes</p>
     * Operation to change RevenueBucketCodes.
     */
    async putRevenueBucketCodes(requestParameters: PutRevenueBucketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRevenueBucketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Revenue Bucket Types. <p><strong>OperationId:</strong>putRevenueBucketTypes</p>
     * Operation to change RevenueBucketTypes.
     */
    async putRevenueBucketTypesRaw(requestParameters: PutRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueBucketTypes === null || requestParameters.revenueBucketTypes === undefined) {
            throw new runtime.RequiredError('revenueBucketTypes','Required parameter requestParameters.revenueBucketTypes was null or undefined when calling putRevenueBucketTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueBucketTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueBucketTypesToJSON(requestParameters.revenueBucketTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Revenue Bucket Types. <p><strong>OperationId:</strong>putRevenueBucketTypes</p>
     * Operation to change RevenueBucketTypes.
     */
    async putRevenueBucketTypes(requestParameters: PutRevenueBucketTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRevenueBucketTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putRevenueTypeMapping</p>
     * Operation to change RevenueTypeMapping.
     */
    async putRevenueTypeMappingRaw(requestParameters: PutRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueTypeMapping === null || requestParameters.revenueTypeMapping === undefined) {
            throw new runtime.RequiredError('revenueTypeMapping','Required parameter requestParameters.revenueTypeMapping was null or undefined when calling putRevenueTypeMapping.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypeMapping`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueTypeMappingToJSON(requestParameters.revenueTypeMapping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putRevenueTypeMapping</p>
     * Operation to change RevenueTypeMapping.
     */
    async putRevenueTypeMapping(requestParameters: PutRevenueTypeMappingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRevenueTypeMappingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change routing instructions. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Operation to change RoutingInstructions.
     */
    async putRoutingInstructionsRaw(requestParameters: PutRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.routingInstructions === null || requestParameters.routingInstructions === undefined) {
            throw new runtime.RequiredError('routingInstructions','Required parameter requestParameters.routingInstructions was null or undefined when calling putRoutingInstructions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/routingInstructions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoutingInstructionsToJSON(requestParameters.routingInstructions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change routing instructions. <p><strong>OperationId:</strong>putRoutingInstructions</p>
     * Operation to change RoutingInstructions.
     */
    async putRoutingInstructions(requestParameters: PutRoutingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoutingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>putTaxBrackets</p>
     * Operation to change TaxBrackets.
     */
    async putTaxBracketsRaw(requestParameters: PutTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.taxBrackets === null || requestParameters.taxBrackets === undefined) {
            throw new runtime.RequiredError('taxBrackets','Required parameter requestParameters.taxBrackets was null or undefined when calling putTaxBrackets.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxBrackets`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaxBracketsToJSON(requestParameters.taxBrackets),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Tax Brackets. This function only be available when the parameter \"Tax Bracket Calculation\" is on. <p><strong>OperationId:</strong>putTaxBrackets</p>
     * Operation to change TaxBrackets.
     */
    async putTaxBrackets(requestParameters: PutTaxBracketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTaxBracketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Tax Types. <p><strong>OperationId:</strong>putTaxTypes</p>
     * Operation to change TaxTypes.
     */
    async putTaxTypesRaw(requestParameters: PutTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.taxTypes === null || requestParameters.taxTypes === undefined) {
            throw new runtime.RequiredError('taxTypes','Required parameter requestParameters.taxTypes was null or undefined when calling putTaxTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotelTaxTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaxTypesToJSON(requestParameters.taxTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Tax Types. <p><strong>OperationId:</strong>putTaxTypes</p>
     * Operation to change TaxTypes.
     */
    async putTaxTypes(requestParameters: PutTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change template custom number configuration. <p><strong>OperationId:</strong>putTemplateCustomNumber</p>
     * Operation to change template custom number configuration.
     */
    async putTemplateCustomNumberRaw(requestParameters: PutTemplateCustomNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateCustomNumberConfig === null || requestParameters.templateCustomNumberConfig === undefined) {
            throw new runtime.RequiredError('templateCustomNumberConfig','Required parameter requestParameters.templateCustomNumberConfig was null or undefined when calling putTemplateCustomNumber.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/template/customNumbers`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateCustomNumberConfigToJSON(requestParameters.templateCustomNumberConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change template custom number configuration. <p><strong>OperationId:</strong>putTemplateCustomNumber</p>
     * Operation to change template custom number configuration.
     */
    async putTemplateCustomNumber(requestParameters: PutTemplateCustomNumberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateCustomNumberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use putTemplateCustomNumber instead</mark></strong></p> <p><strong>OperationId:</strong>putTemplateCustomNumberConfig</p>
     * Operation to change template custom number configuration.
     * @deprecated
     */
    async putTemplateCustomNumberConfigRaw(requestParameters: PutTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.configurationId === null || requestParameters.configurationId === undefined) {
            throw new runtime.RequiredError('configurationId','Required parameter requestParameters.configurationId was null or undefined when calling putTemplateCustomNumberConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putTemplateCustomNumberConfig.');
        }
        
        if (requestParameters.templateCustomNumberConfig === null || requestParameters.templateCustomNumberConfig === undefined) {
            throw new runtime.RequiredError('templateCustomNumberConfig','Required parameter requestParameters.templateCustomNumberConfig was null or undefined when calling putTemplateCustomNumberConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/template/customNumbers/configuration/{configurationId}`.replace(`{${"configurationId"}}`, encodeURIComponent(String(requestParameters.configurationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateCustomNumberConfigToJSON(requestParameters.templateCustomNumberConfig),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change template custom number configuration.<br><p><strong><mark>This API is deprecated. Please use putTemplateCustomNumber instead</mark></strong></p> <p><strong>OperationId:</strong>putTemplateCustomNumberConfig</p>
     * Operation to change template custom number configuration.
     * @deprecated
     */
    async putTemplateCustomNumberConfig(requestParameters: PutTemplateCustomNumberConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateCustomNumberConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change template transaction codes. <p><strong>OperationId:</strong>putTemplateTransactionCodes</p>
     * Operation to change TemplateTransactionCodes.
     */
    async putTemplateTransactionCodesRaw(requestParameters: PutTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTransactionCodes === null || requestParameters.templateTransactionCodes === undefined) {
            throw new runtime.RequiredError('templateTransactionCodes','Required parameter requestParameters.templateTransactionCodes was null or undefined when calling putTemplateTransactionCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTransactionCodesToJSON(requestParameters.templateTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change template transaction codes. <p><strong>OperationId:</strong>putTemplateTransactionCodes</p>
     * Operation to change TemplateTransactionCodes.
     */
    async putTemplateTransactionCodes(requestParameters: PutTemplateTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change existing template transaction group. <p><strong>OperationId:</strong>putTemplateTransactionGroups</p>
     * Operation to change TemplateTransactionGroups.
     */
    async putTemplateTransactionGroupsRaw(requestParameters: PutTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTransactionGroups === null || requestParameters.templateTransactionGroups === undefined) {
            throw new runtime.RequiredError('templateTransactionGroups','Required parameter requestParameters.templateTransactionGroups was null or undefined when calling putTemplateTransactionGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTransactionGroupsToJSON(requestParameters.templateTransactionGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change existing template transaction group. <p><strong>OperationId:</strong>putTemplateTransactionGroups</p>
     * Operation to change TemplateTransactionGroups.
     */
    async putTemplateTransactionGroups(requestParameters: PutTemplateTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change template transaction subgroups <p><strong>OperationId:</strong>putTemplateTransactionSubgroups</p>
     * Operation to change TemplateTransactionSubgroups.
     */
    async putTemplateTransactionSubgroupsRaw(requestParameters: PutTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTransactionSubgroups === null || requestParameters.templateTransactionSubgroups === undefined) {
            throw new runtime.RequiredError('templateTransactionSubgroups','Required parameter requestParameters.templateTransactionSubgroups was null or undefined when calling putTemplateTransactionSubgroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templateTransactionSubGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTransactionSubgroupsToJSON(requestParameters.templateTransactionSubgroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change template transaction subgroups <p><strong>OperationId:</strong>putTemplateTransactionSubgroups</p>
     * Operation to change TemplateTransactionSubgroups.
     */
    async putTemplateTransactionSubgroups(requestParameters: PutTemplateTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change ownership of transaction code. <p><strong>OperationId:</strong>putTransactionCodeOwnership</p>
     * Operation to change TransactionCodeOwnership.
     */
    async putTransactionCodeOwnershipRaw(requestParameters: PutTransactionCodeOwnershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionCodeOwnership === null || requestParameters.transactionCodeOwnership === undefined) {
            throw new runtime.RequiredError('transactionCodeOwnership','Required parameter requestParameters.transactionCodeOwnership was null or undefined when calling putTransactionCodeOwnership.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodeOwnership`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionCodeOwnershipToJSON(requestParameters.transactionCodeOwnership),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change ownership of transaction code. <p><strong>OperationId:</strong>putTransactionCodeOwnership</p>
     * Operation to change TransactionCodeOwnership.
     */
    async putTransactionCodeOwnership(requestParameters: PutTransactionCodeOwnershipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTransactionCodeOwnershipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update transaction codes for a specific property.<p><strong>OperationId:</strong>putTransactionCodes</p>
     * Put transaction codes
     */
    async putTransactionCodesRaw(requestParameters: PutTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCodes>> {
        if (requestParameters.hotelTransactionCodes === null || requestParameters.hotelTransactionCodes === undefined) {
            throw new runtime.RequiredError('hotelTransactionCodes','Required parameter requestParameters.hotelTransactionCodes was null or undefined when calling putTransactionCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTransactionCodesToJSON(requestParameters.hotelTransactionCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCodesFromJSON(jsonValue));
    }

    /**
     * Use this API to update transaction codes for a specific property.<p><strong>OperationId:</strong>putTransactionCodes</p>
     * Put transaction codes
     */
    async putTransactionCodes(requestParameters: PutTransactionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCodes> {
        const response = await this.putTransactionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Transaction Discounts. <p><strong>OperationId:</strong>putTransactionDiscounts</p>
     * Operation to change TransactionDiscounts.
     */
    async putTransactionDiscountsRaw(requestParameters: PutTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putTransactionDiscounts.');
        }
        
        if (requestParameters.transactionDiscountCode === null || requestParameters.transactionDiscountCode === undefined) {
            throw new runtime.RequiredError('transactionDiscountCode','Required parameter requestParameters.transactionDiscountCode was null or undefined when calling putTransactionDiscounts.');
        }
        
        if (requestParameters.transactionDiscount === null || requestParameters.transactionDiscount === undefined) {
            throw new runtime.RequiredError('transactionDiscount','Required parameter requestParameters.transactionDiscount was null or undefined when calling putTransactionDiscounts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/transactionDiscounts/{transactionDiscountCode}`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))).replace(`{${"transactionDiscountCode"}}`, encodeURIComponent(String(requestParameters.transactionDiscountCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDiscountToJSON(requestParameters.transactionDiscount),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Transaction Discounts. <p><strong>OperationId:</strong>putTransactionDiscounts</p>
     * Operation to change TransactionDiscounts.
     */
    async putTransactionDiscounts(requestParameters: PutTransactionDiscountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTransactionDiscountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change Transaction Diversion Rules. <p><strong>OperationId:</strong>putTransactionDiversionRules</p>
     * Operation to change TransactionDiversionRules.
     */
    async putTransactionDiversionRulesRaw(requestParameters: PutTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionDiversionRules === null || requestParameters.transactionDiversionRules === undefined) {
            throw new runtime.RequiredError('transactionDiversionRules','Required parameter requestParameters.transactionDiversionRules was null or undefined when calling putTransactionDiversionRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionDiversionRules`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDiversionRulesToJSON(requestParameters.transactionDiversionRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change Transaction Diversion Rules. <p><strong>OperationId:</strong>putTransactionDiversionRules</p>
     * Operation to change TransactionDiversionRules.
     */
    async putTransactionDiversionRules(requestParameters: PutTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTransactionDiversionRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update transaction generates for a specific property.<p><strong>OperationId:</strong>putTransactionGenerates</p>
     * Put transaction generates
     */
    async putTransactionGeneratesRaw(requestParameters: PutTransactionGeneratesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelTransactionGenerates === null || requestParameters.hotelTransactionGenerates === undefined) {
            throw new runtime.RequiredError('hotelTransactionGenerates','Required parameter requestParameters.hotelTransactionGenerates was null or undefined when calling putTransactionGenerates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/generates`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTransactionGeneratesToJSON(requestParameters.hotelTransactionGenerates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update transaction generates for a specific property.<p><strong>OperationId:</strong>putTransactionGenerates</p>
     * Put transaction generates
     */
    async putTransactionGenerates(requestParameters: PutTransactionGeneratesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTransactionGeneratesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change transaction groups. <p><strong>OperationId:</strong>putTransactionGroups</p>
     * Operation to change TransactionGroups.
     */
    async putTransactionGroupsRaw(requestParameters: PutTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionGroups === null || requestParameters.transactionGroups === undefined) {
            throw new runtime.RequiredError('transactionGroups','Required parameter requestParameters.transactionGroups was null or undefined when calling putTransactionGroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionGroupsToJSON(requestParameters.transactionGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change transaction groups. <p><strong>OperationId:</strong>putTransactionGroups</p>
     * Operation to change TransactionGroups.
     */
    async putTransactionGroups(requestParameters: PutTransactionGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTransactionGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change transaction sub groups. <p><strong>OperationId:</strong>putTransactionSubgroups</p>
     * Operation to change TransactionSubgroups.
     */
    async putTransactionSubgroupsRaw(requestParameters: PutTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelTransactionSubgroups === null || requestParameters.hotelTransactionSubgroups === undefined) {
            throw new runtime.RequiredError('hotelTransactionSubgroups','Required parameter requestParameters.hotelTransactionSubgroups was null or undefined when calling putTransactionSubgroups.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionSubGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTransactionSubgroupsToJSON(requestParameters.hotelTransactionSubgroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change transaction sub groups. <p><strong>OperationId:</strong>putTransactionSubgroups</p>
     * Operation to change TransactionSubgroups.
     */
    async putTransactionSubgroups(requestParameters: PutTransactionSubgroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTransactionSubgroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Remove Comp Types. <p><strong>OperationId:</strong>removeCompTypes</p>
     * Operation to Remove Comp Types.
     */
    async removeCompTypesRaw(requestParameters: RemoveCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.compTypesCode === null || requestParameters.compTypesCode === undefined) {
            throw new runtime.RequiredError('compTypesCode','Required parameter requestParameters.compTypesCode was null or undefined when calling removeCompTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compTypes/codes/{compTypesCode}`.replace(`{${"compTypesCode"}}`, encodeURIComponent(String(requestParameters.compTypesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Remove Comp Types. <p><strong>OperationId:</strong>removeCompTypes</p>
     * Operation to Remove Comp Types.
     */
    async removeCompTypes(requestParameters: RemoveCompTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCompTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete configuration fiscal partners. <p><strong>OperationId:</strong>removeFiscalPartners</p>
     * Delete configuration fiscal partners
     */
    async removeFiscalPartnersRaw(requestParameters: RemoveFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeFiscalPartners.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.partnerCode) {
            queryParameters['partnerCode'] = requestParameters.partnerCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/fiscalPartners`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete configuration fiscal partners. <p><strong>OperationId:</strong>removeFiscalPartners</p>
     * Delete configuration fiscal partners
     */
    async removeFiscalPartners(requestParameters: RemoveFiscalPartnersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFiscalPartnersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove folio type legend mappings config. <p><strong>OperationId:</strong>removeFolioTypeLegendMappingConfig</p>
     * Operation to remove folio type legend mappings config.
     */
    async removeFolioTypeLegendMappingConfigRaw(requestParameters: RemoveFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.legendCode === null || requestParameters.legendCode === undefined) {
            throw new runtime.RequiredError('legendCode','Required parameter requestParameters.legendCode was null or undefined when calling removeFolioTypeLegendMappingConfig.');
        }
        
        if (requestParameters.folioType === null || requestParameters.folioType === undefined) {
            throw new runtime.RequiredError('folioType','Required parameter requestParameters.folioType was null or undefined when calling removeFolioTypeLegendMappingConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeFolioTypeLegendMappingConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/folios/{folioType}/legends/{legendCode}`.replace(`{${"legendCode"}}`, encodeURIComponent(String(requestParameters.legendCode))).replace(`{${"folioType"}}`, encodeURIComponent(String(requestParameters.folioType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove folio type legend mappings config. <p><strong>OperationId:</strong>removeFolioTypeLegendMappingConfig</p>
     * Operation to remove folio type legend mappings config.
     */
    async removeFolioTypeLegendMappingConfig(requestParameters: RemoveFolioTypeLegendMappingConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFolioTypeLegendMappingConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove payment methods. <p><strong>OperationId:</strong>removePaymentMethods</p>
     * Operation to delete TransactionArrangementCodes.
     */
    async removePaymentMethodsRaw(requestParameters: RemovePaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.paymentMethods === null || requestParameters.paymentMethods === undefined) {
            throw new runtime.RequiredError('paymentMethods','Required parameter requestParameters.paymentMethods was null or undefined when calling removePaymentMethods.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/paymentMethods`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentMethodsToJSON(requestParameters.paymentMethods),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove payment methods. <p><strong>OperationId:</strong>removePaymentMethods</p>
     * Operation to delete TransactionArrangementCodes.
     */
    async removePaymentMethods(requestParameters: RemovePaymentMethodsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removePaymentMethodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove Transaction Diversion Rules. <p><strong>OperationId:</strong>removeTransactionDiversionRules</p>
     * Operation to delete TransactionDiversionRules.
     */
    async removeTransactionDiversionRulesRaw(requestParameters: RemoveTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionDiversionRules === null || requestParameters.transactionDiversionRules === undefined) {
            throw new runtime.RequiredError('transactionDiversionRules','Required parameter requestParameters.transactionDiversionRules was null or undefined when calling removeTransactionDiversionRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionDiversionRules/remove`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionDiversionRulesToJSON(requestParameters.transactionDiversionRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove Transaction Diversion Rules. <p><strong>OperationId:</strong>removeTransactionDiversionRules</p>
     * Operation to delete TransactionDiversionRules.
     */
    async removeTransactionDiversionRules(requestParameters: RemoveTransactionDiversionRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTransactionDiversionRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to remove transaction generates. <p><strong>OperationId:</strong>removeTransactionGenerates</p>
     * Operation to delete TransactionGenerates.
     */
    async removeTransactionGeneratesRaw(requestParameters: RemoveTransactionGeneratesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelTransactionGenerates === null || requestParameters.hotelTransactionGenerates === undefined) {
            throw new runtime.RequiredError('hotelTransactionGenerates','Required parameter requestParameters.hotelTransactionGenerates was null or undefined when calling removeTransactionGenerates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionGenerates`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTransactionGeneratesToJSON(requestParameters.hotelTransactionGenerates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove transaction generates. <p><strong>OperationId:</strong>removeTransactionGenerates</p>
     * Operation to delete TransactionGenerates.
     */
    async removeTransactionGenerates(requestParameters: RemoveTransactionGeneratesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTransactionGeneratesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to add/update Budget Forecast information. <p><strong>OperationId:</strong>setBudgetForecast</p>
     * Operation to set BudgetForecast.
     */
    async setBudgetForecastRaw(requestParameters: SetBudgetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.budgetForecastInformationBase === null || requestParameters.budgetForecastInformationBase === undefined) {
            throw new runtime.RequiredError('budgetForecastInformationBase','Required parameter requestParameters.budgetForecastInformationBase was null or undefined when calling setBudgetForecast.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/budgetForecast/set`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetForecastInformationBaseToJSON(requestParameters.budgetForecastInformationBase),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to add/update Budget Forecast information. <p><strong>OperationId:</strong>setBudgetForecast</p>
     * Operation to set BudgetForecast.
     */
    async setBudgetForecast(requestParameters: SetBudgetForecastRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setBudgetForecastRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Set Comp Authorizer. <p><strong>OperationId:</strong>setCompAuthorizer</p>
     * Operation to set CompAuthorizer.
     */
    async setCompAuthorizerRaw(requestParameters: SetCompAuthorizerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.compAuthorizer === null || requestParameters.compAuthorizer === undefined) {
            throw new runtime.RequiredError('compAuthorizer','Required parameter requestParameters.compAuthorizer was null or undefined when calling setCompAuthorizer.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/compAuthorizers/set`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompAuthorizerToJSON(requestParameters.compAuthorizer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Set Comp Authorizer. <p><strong>OperationId:</strong>setCompAuthorizer</p>
     * Operation to set CompAuthorizer.
     */
    async setCompAuthorizer(requestParameters: SetCompAuthorizerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setCompAuthorizerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The operation sets exchange rates. <p><strong>OperationId:</strong>setExchangeRates</p>
     * Operation to set ExchangeRates.
     */
    async setExchangeRatesRaw(requestParameters: SetExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.exchangeRates === null || requestParameters.exchangeRates === undefined) {
            throw new runtime.RequiredError('exchangeRates','Required parameter requestParameters.exchangeRates was null or undefined when calling setExchangeRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/exchangeRates/set`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeRatesToJSON(requestParameters.exchangeRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * The operation sets exchange rates. <p><strong>OperationId:</strong>setExchangeRates</p>
     * Operation to set ExchangeRates.
     */
    async setExchangeRates(requestParameters: SetExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * The operation sets global exchange rates. <p><strong>OperationId:</strong>setGlobalExchangeRates</p>
     * Operation to set GlobalExchangeRates.
     */
    async setGlobalExchangeRatesRaw(requestParameters: SetGlobalExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.exchangeRates === null || requestParameters.exchangeRates === undefined) {
            throw new runtime.RequiredError('exchangeRates','Required parameter requestParameters.exchangeRates was null or undefined when calling setGlobalExchangeRates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalExchangeRates/set`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExchangeRatesToJSON(requestParameters.exchangeRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * The operation sets global exchange rates. <p><strong>OperationId:</strong>setGlobalExchangeRates</p>
     * Operation to set GlobalExchangeRates.
     */
    async setGlobalExchangeRates(requestParameters: SetGlobalExchangeRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setGlobalExchangeRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to Set Transaction Code Access Roles. <p><strong>OperationId:</strong>setTransactionCodeAccessRoles</p>
     * Operation to set TransactionCodeAccessRoles.
     */
    async setTransactionCodeAccessRolesRaw(requestParameters: SetTransactionCodeAccessRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.transactionCodeAccessRoles === null || requestParameters.transactionCodeAccessRoles === undefined) {
            throw new runtime.RequiredError('transactionCodeAccessRoles','Required parameter requestParameters.transactionCodeAccessRoles was null or undefined when calling setTransactionCodeAccessRoles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/transactionCodeAccessRoles/set`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionCodeAccessRolesToJSON(requestParameters.transactionCodeAccessRoles),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to Set Transaction Code Access Roles. <p><strong>OperationId:</strong>setTransactionCodeAccessRoles</p>
     * Operation to set TransactionCodeAccessRoles.
     */
    async setTransactionCodeAccessRoles(requestParameters: SetTransactionCodeAccessRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.setTransactionCodeAccessRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteArticlesColorEnum = {
    Red: 'Red',
    DarkRed: 'DarkRed',
    Green: 'Green',
    DarkGreen: 'DarkGreen',
    LightGreen: 'LightGreen',
    Orange: 'Orange',
    White: 'White',
    Yellow: 'Yellow',
    DarkYellow: 'DarkYellow',
    Purple: 'Purple',
    Brown: 'Brown',
    Gray: 'Gray',
    Aqua: 'Aqua',
    Chocolate: 'Chocolate',
    Blue: 'Blue',
    LightBlue: 'LightBlue',
    DarkBlue: 'DarkBlue',
    Cyan: 'Cyan',
    DarkCyan: 'DarkCyan',
    Magenta: 'Magenta',
    DarkMagenta: 'DarkMagenta',
    Black: 'Black'
} as const;
export type DeleteArticlesColorEnum = typeof DeleteArticlesColorEnum[keyof typeof DeleteArticlesColorEnum];
/**
 * @export
 */
export const DeleteNoShowPostingRulesPostingRuleEnum = {
    AllNights: 'AllNights',
    DepositOnly: 'DepositOnly',
    FirstNight: 'FirstNight'
} as const;
export type DeleteNoShowPostingRulesPostingRuleEnum = typeof DeleteNoShowPostingRulesPostingRuleEnum[keyof typeof DeleteNoShowPostingRulesPostingRuleEnum];
/**
 * @export
 */
export const DeleteRevenueTypeMappingCateringOnlyEnum = {
    Yes: 'Yes',
    No: 'No',
    Both: 'Both'
} as const;
export type DeleteRevenueTypeMappingCateringOnlyEnum = typeof DeleteRevenueTypeMappingCateringOnlyEnum[keyof typeof DeleteRevenueTypeMappingCateringOnlyEnum];
/**
 * @export
 */
export const GetCustomNumberConfigAreaEnum = {
    Folio: 'Folio',
    Receipt: 'Receipt'
} as const;
export type GetCustomNumberConfigAreaEnum = typeof GetCustomNumberConfigAreaEnum[keyof typeof GetCustomNumberConfigAreaEnum];
/**
 * @export
 */
export const GetCustomNumbersAreaEnum = {
    Folio: 'Folio',
    Receipt: 'Receipt'
} as const;
export type GetCustomNumbersAreaEnum = typeof GetCustomNumbersAreaEnum[keyof typeof GetCustomNumbersAreaEnum];
/**
 * @export
 */
export const GetDefaultPaymentMethodRuleFetchInstructionsEnum = {
    CardRanges: 'CardRanges'
} as const;
export type GetDefaultPaymentMethodRuleFetchInstructionsEnum = typeof GetDefaultPaymentMethodRuleFetchInstructionsEnum[keyof typeof GetDefaultPaymentMethodRuleFetchInstructionsEnum];
/**
 * @export
 */
export const GetExchangeRatesExchangeTypesEnum = {
    Cash: 'Cash',
    Settlement: 'Settlement',
    Posting: 'Posting',
    Check: 'Check',
    TaCommission: 'TACommission',
    Membership: 'Membership',
    Certificate: 'Certificate'
} as const;
export type GetExchangeRatesExchangeTypesEnum = typeof GetExchangeRatesExchangeTypesEnum[keyof typeof GetExchangeRatesExchangeTypesEnum];
/**
 * @export
 */
export const GetExchangeRatesInfoExchangeTypesEnum = {
    Cash: 'Cash',
    Settlement: 'Settlement',
    Posting: 'Posting',
    Check: 'Check',
    TaCommission: 'TACommission',
    Membership: 'Membership',
    Certificate: 'Certificate'
} as const;
export type GetExchangeRatesInfoExchangeTypesEnum = typeof GetExchangeRatesInfoExchangeTypesEnum[keyof typeof GetExchangeRatesInfoExchangeTypesEnum];
/**
 * @export
 */
export const GetFiscalCommandsOperationTypeEnum = {
    FiscalCommand: 'FiscalCommand',
    Operation: 'Operation'
} as const;
export type GetFiscalCommandsOperationTypeEnum = typeof GetFiscalCommandsOperationTypeEnum[keyof typeof GetFiscalCommandsOperationTypeEnum];
/**
 * @export
 */
export const GetFiscalPeriodsPeriodTypeEnum = {
    Calendar: 'Calendar',
    Fiscal: 'Fiscal'
} as const;
export type GetFiscalPeriodsPeriodTypeEnum = typeof GetFiscalPeriodsPeriodTypeEnum[keyof typeof GetFiscalPeriodsPeriodTypeEnum];
/**
 * @export
 */
export const GetFiscalYearsYearTypeEnum = {
    Calendar: 'Calendar',
    Fiscal: 'Fiscal'
} as const;
export type GetFiscalYearsYearTypeEnum = typeof GetFiscalYearsYearTypeEnum[keyof typeof GetFiscalYearsYearTypeEnum];
/**
 * @export
 */
export const GetFuturePastExchangeRatesExchangeTypesEnum = {
    Cash: 'Cash',
    Settlement: 'Settlement',
    Posting: 'Posting',
    Check: 'Check',
    TaCommission: 'TACommission',
    Membership: 'Membership',
    Certificate: 'Certificate'
} as const;
export type GetFuturePastExchangeRatesExchangeTypesEnum = typeof GetFuturePastExchangeRatesExchangeTypesEnum[keyof typeof GetFuturePastExchangeRatesExchangeTypesEnum];
/**
 * @export
 */
export const GetGlobalExchangeRatesInfoExchangeTypesEnum = {
    Membership: 'Membership'
} as const;
export type GetGlobalExchangeRatesInfoExchangeTypesEnum = typeof GetGlobalExchangeRatesInfoExchangeTypesEnum[keyof typeof GetGlobalExchangeRatesInfoExchangeTypesEnum];
/**
 * @export
 */
export const GetOperaControlSequencesFetchInstructionEnum = {
    BillFolioTypes: 'BillFolioTypes',
    ArInvoice: 'ArInvoice',
    SequenceNumbers: 'SequenceNumbers'
} as const;
export type GetOperaControlSequencesFetchInstructionEnum = typeof GetOperaControlSequencesFetchInstructionEnum[keyof typeof GetOperaControlSequencesFetchInstructionEnum];
/**
 * @export
 */
export const GetPaymentMethodsFetchInstructionsEnum = {
    CardRanges: 'CardRanges'
} as const;
export type GetPaymentMethodsFetchInstructionsEnum = typeof GetPaymentMethodsFetchInstructionsEnum[keyof typeof GetPaymentMethodsFetchInstructionsEnum];
/**
 * @export
 */
export const GetRevenueBucketCodesTrxCodeArrangementTypeEnum = {
    Default: 'Default',
    Fiscal: 'Fiscal'
} as const;
export type GetRevenueBucketCodesTrxCodeArrangementTypeEnum = typeof GetRevenueBucketCodesTrxCodeArrangementTypeEnum[keyof typeof GetRevenueBucketCodesTrxCodeArrangementTypeEnum];
/**
 * @export
 */
export const GetRevenueBucketTypesBucketTypeEnum = {
    Default: 'Default',
    Fiscal: 'Fiscal'
} as const;
export type GetRevenueBucketTypesBucketTypeEnum = typeof GetRevenueBucketTypesBucketTypeEnum[keyof typeof GetRevenueBucketTypesBucketTypeEnum];
/**
 * @export
 */
export const GetTemplateTransactionGroupsTransactionGroupTypeEnum = {
    Revenue: 'Revenue',
    Payment: 'Payment',
    Wrapper: 'Wrapper'
} as const;
export type GetTemplateTransactionGroupsTransactionGroupTypeEnum = typeof GetTemplateTransactionGroupsTransactionGroupTypeEnum[keyof typeof GetTemplateTransactionGroupsTransactionGroupTypeEnum];
/**
 * @export
 */
export const GetTransactionCodeFetchInstructionsEnum = {
    Header: 'Header',
    Generates: 'Generates',
    Glmapping: 'Glmapping',
    AssociatedTrxCodes: 'AssociatedTrxCodes',
    MappingCodes: 'MappingCodes'
} as const;
export type GetTransactionCodeFetchInstructionsEnum = typeof GetTransactionCodeFetchInstructionsEnum[keyof typeof GetTransactionCodeFetchInstructionsEnum];
/**
 * @export
 */
export const GetTransactionDiscountsRuleTypeEnum = {
    Membership: 'Membership'
} as const;
export type GetTransactionDiscountsRuleTypeEnum = typeof GetTransactionDiscountsRuleTypeEnum[keyof typeof GetTransactionDiscountsRuleTypeEnum];
/**
 * @export
 */
export const GetTransactionDiscountsFetchInstructionsEnum = {
    IncludeCodes: 'IncludeCodes'
} as const;
export type GetTransactionDiscountsFetchInstructionsEnum = typeof GetTransactionDiscountsFetchInstructionsEnum[keyof typeof GetTransactionDiscountsFetchInstructionsEnum];
/**
 * @export
 */
export const GetTransactionDiversionRulesTypeEnum = {
    Vip: 'Vip',
    Membership: 'Membership'
} as const;
export type GetTransactionDiversionRulesTypeEnum = typeof GetTransactionDiversionRulesTypeEnum[keyof typeof GetTransactionDiversionRulesTypeEnum];
/**
 * @export
 */
export const GetTransactionDiversionRulesLevelEnum = {
    Property: 'Property',
    Reservation: 'Reservation'
} as const;
export type GetTransactionDiversionRulesLevelEnum = typeof GetTransactionDiversionRulesLevelEnum[keyof typeof GetTransactionDiversionRulesLevelEnum];
/**
 * @export
 */
export const GetTransactionGroupFetchInstructionsEnum = {
    Header: 'Header',
    Generates: 'Generates'
} as const;
export type GetTransactionGroupFetchInstructionsEnum = typeof GetTransactionGroupFetchInstructionsEnum[keyof typeof GetTransactionGroupFetchInstructionsEnum];
/**
 * @export
 */
export const GetTransactionGroupsTransactionGroupTypeEnum = {
    Revenue: 'Revenue',
    Payment: 'Payment',
    Wrapper: 'Wrapper'
} as const;
export type GetTransactionGroupsTransactionGroupTypeEnum = typeof GetTransactionGroupsTransactionGroupTypeEnum[keyof typeof GetTransactionGroupsTransactionGroupTypeEnum];
/**
 * @export
 */
export const GetTransactionSubgroupFetchInstructionsEnum = {
    Header: 'Header',
    Generates: 'Generates'
} as const;
export type GetTransactionSubgroupFetchInstructionsEnum = typeof GetTransactionSubgroupFetchInstructionsEnum[keyof typeof GetTransactionSubgroupFetchInstructionsEnum];
