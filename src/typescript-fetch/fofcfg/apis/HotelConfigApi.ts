/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeTrackItActionsRequest,
  ChangeTrackItLocationsRequest,
  ChangeTrackItTypesRequest,
  CopyTrackItActionsRequest,
  CopyTrackItLocationsRequest,
  CopyTrackItTypesRequest,
  ExceptionDetailType,
  PostTrackItActionsRequest,
  PostTrackItLocationsRequest,
  PostTrackItTypesRequest,
  Status,
  TrackItActionsDetails,
  TrackItLocationsDetails,
  TrackItTypesDetails,
} from '../models';
import {
    ChangeTrackItActionsRequestFromJSON,
    ChangeTrackItActionsRequestToJSON,
    ChangeTrackItLocationsRequestFromJSON,
    ChangeTrackItLocationsRequestToJSON,
    ChangeTrackItTypesRequestFromJSON,
    ChangeTrackItTypesRequestToJSON,
    CopyTrackItActionsRequestFromJSON,
    CopyTrackItActionsRequestToJSON,
    CopyTrackItLocationsRequestFromJSON,
    CopyTrackItLocationsRequestToJSON,
    CopyTrackItTypesRequestFromJSON,
    CopyTrackItTypesRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    PostTrackItActionsRequestFromJSON,
    PostTrackItActionsRequestToJSON,
    PostTrackItLocationsRequestFromJSON,
    PostTrackItLocationsRequestToJSON,
    PostTrackItTypesRequestFromJSON,
    PostTrackItTypesRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
    TrackItActionsDetailsFromJSON,
    TrackItActionsDetailsToJSON,
    TrackItLocationsDetailsFromJSON,
    TrackItLocationsDetailsToJSON,
    TrackItTypesDetailsFromJSON,
    TrackItTypesDetailsToJSON,
} from '../models';

export interface ChangeTrackItActionsOperationRequest {
    actionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItActionsToBeChanged?: ChangeTrackItActionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTrackItLocationsOperationRequest {
    locationCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItLocationsToBeChanged?: ChangeTrackItLocationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTrackItTypesOperationRequest {
    typeCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItTypesToBeChanged?: ChangeTrackItTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTrackItActionsOperationRequest {
    sourceHotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyTrackItActions?: CopyTrackItActionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTrackItLocationsOperationRequest {
    sourceHotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyTrackItLocations?: CopyTrackItLocationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTrackItTypesOperationRequest {
    sourceHotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyTrackItTypes?: CopyTrackItTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItActionsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItLocationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItTypesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTrackItActionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItActionsCriteria?: PostTrackItActionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTrackItLocationsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItLocationsCriteria?: PostTrackItLocationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTrackItTypesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItTypesCriteria?: PostTrackItTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTrackItActionsRequest {
    actionCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTrackItLocationsRequest {
    locationCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTrackItTypesRequest {
    typeCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Track it Actions. <p><strong>OperationId:</strong>changeTrackItActions</p>
     * Change Track it Actions
     */
    async changeTrackItActionsRaw(requestParameters: ChangeTrackItActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTrackItActionsRequestToJSON(requestParameters.trackItActionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Track it Actions. <p><strong>OperationId:</strong>changeTrackItActions</p>
     * Change Track it Actions
     */
    async changeTrackItActions(requestParameters: ChangeTrackItActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Track it Locations. <p><strong>OperationId:</strong>changeTrackItLocations</p>
     * Change Track it Locations
     */
    async changeTrackItLocationsRaw(requestParameters: ChangeTrackItLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTrackItLocationsRequestToJSON(requestParameters.trackItLocationsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Track it Locations. <p><strong>OperationId:</strong>changeTrackItLocations</p>
     * Change Track it Locations
     */
    async changeTrackItLocations(requestParameters: ChangeTrackItLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Track it Types. <p><strong>OperationId:</strong>changeTrackItTypes</p>
     * Change Track it Types
     */
    async changeTrackItTypesRaw(requestParameters: ChangeTrackItTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes/{typeCode}`.replace(`{${"typeCode"}}`, encodeURIComponent(String(requestParameters.typeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTrackItTypesRequestToJSON(requestParameters.trackItTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Track it Types. <p><strong>OperationId:</strong>changeTrackItTypes</p>
     * Change Track it Types
     */
    async changeTrackItTypes(requestParameters: ChangeTrackItTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Track it Actions. <p><strong>OperationId:</strong>copyTrackItActions</p>
     *  Copy Track it Actions
     */
    async copyTrackItActionsRaw(requestParameters: CopyTrackItActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/trackItActions/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTrackItActionsRequestToJSON(requestParameters.copyTrackItActions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Track it Actions. <p><strong>OperationId:</strong>copyTrackItActions</p>
     *  Copy Track it Actions
     */
    async copyTrackItActions(requestParameters: CopyTrackItActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Track it Locations. <p><strong>OperationId:</strong>copyTrackItLocations</p>
     *  Copy Track it Locations
     */
    async copyTrackItLocationsRaw(requestParameters: CopyTrackItLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/trackItLocations/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTrackItLocationsRequestToJSON(requestParameters.copyTrackItLocations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Track it Locations. <p><strong>OperationId:</strong>copyTrackItLocations</p>
     *  Copy Track it Locations
     */
    async copyTrackItLocations(requestParameters: CopyTrackItLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Track it Types. <p><strong>OperationId:</strong>copyTrackItTypes</p>
     *  Copy Track it Types
     */
    async copyTrackItTypesRaw(requestParameters: CopyTrackItTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/trackItTypes/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTrackItTypesRequestToJSON(requestParameters.copyTrackItTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Track it Types. <p><strong>OperationId:</strong>copyTrackItTypes</p>
     *  Copy Track it Types
     */
    async copyTrackItTypes(requestParameters: CopyTrackItTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Track it Actions. <p><strong>OperationId:</strong>getTrackItActions</p>
     * Get Track it Actions
     */
    async getTrackItActionsRaw(requestParameters: GetTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItActionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItActionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Actions. <p><strong>OperationId:</strong>getTrackItActions</p>
     * Get Track it Actions
     */
    async getTrackItActions(requestParameters: GetTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItActionsDetails> {
        const response = await this.getTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Track it Locations. <p><strong>OperationId:</strong>getTrackItLocations</p>
     * Get Track it Locations
     */
    async getTrackItLocationsRaw(requestParameters: GetTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItLocationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItLocationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Locations. <p><strong>OperationId:</strong>getTrackItLocations</p>
     * Get Track it Locations
     */
    async getTrackItLocations(requestParameters: GetTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItLocationsDetails> {
        const response = await this.getTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Track it Types. <p><strong>OperationId:</strong>getTrackItTypes</p>
     * Get Track it Types
     */
    async getTrackItTypesRaw(requestParameters: GetTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Types. <p><strong>OperationId:</strong>getTrackItTypes</p>
     * Get Track it Types
     */
    async getTrackItTypes(requestParameters: GetTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItTypesDetails> {
        const response = await this.getTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Track it Actions. <p><strong>OperationId:</strong>postTrackItActions</p>
     * Create Track it Actions
     */
    async postTrackItActionsRaw(requestParameters: PostTrackItActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTrackItActionsRequestToJSON(requestParameters.trackItActionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Track it Actions. <p><strong>OperationId:</strong>postTrackItActions</p>
     * Create Track it Actions
     */
    async postTrackItActions(requestParameters: PostTrackItActionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Track it Locations. <p><strong>OperationId:</strong>postTrackItLocations</p>
     * Create Track it Locations
     */
    async postTrackItLocationsRaw(requestParameters: PostTrackItLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTrackItLocationsRequestToJSON(requestParameters.trackItLocationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Track it Locations. <p><strong>OperationId:</strong>postTrackItLocations</p>
     * Create Track it Locations
     */
    async postTrackItLocations(requestParameters: PostTrackItLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Track it Types. <p><strong>OperationId:</strong>postTrackItTypes</p>
     * Create Track it Types
     */
    async postTrackItTypesRaw(requestParameters: PostTrackItTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTrackItTypesRequestToJSON(requestParameters.trackItTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Track it Types. <p><strong>OperationId:</strong>postTrackItTypes</p>
     * Create Track it Types
     */
    async postTrackItTypes(requestParameters: PostTrackItTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Track it Actions. <p><strong>OperationId:</strong>removeTrackItActions</p>
     * Delete Track it Actions
     */
    async removeTrackItActionsRaw(requestParameters: RemoveTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Track it Actions. <p><strong>OperationId:</strong>removeTrackItActions</p>
     * Delete Track it Actions
     */
    async removeTrackItActions(requestParameters: RemoveTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Track it Locations. <p><strong>OperationId:</strong>removeTrackItLocations</p>
     * Delete Track it Locations
     */
    async removeTrackItLocationsRaw(requestParameters: RemoveTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Track it Locations. <p><strong>OperationId:</strong>removeTrackItLocations</p>
     * Delete Track it Locations
     */
    async removeTrackItLocations(requestParameters: RemoveTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Track it Types. <p><strong>OperationId:</strong>removeTrackItTypes</p>
     * Delete Track it Types
     */
    async removeTrackItTypesRaw(requestParameters: RemoveTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes/{typeCode}`.replace(`{${"typeCode"}}`, encodeURIComponent(String(requestParameters.typeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Track it Types. <p><strong>OperationId:</strong>removeTrackItTypes</p>
     * Delete Track it Types
     */
    async removeTrackItTypes(requestParameters: RemoveTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
