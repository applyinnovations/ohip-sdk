/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CopyTrackItActions,
  CopyTrackItLocations,
  CopyTrackItTypes,
  ExceptionDetailType,
  Status,
  TrackItActionsCriteria,
  TrackItActionsDetails,
  TrackItActionsToBeChanged,
  TrackItLocationsCriteria,
  TrackItLocationsDetails,
  TrackItLocationsToBeChanged,
  TrackItTypesCriteria,
  TrackItTypesDetails,
  TrackItTypesToBeChanged,
} from '../models/index';
import {
    CopyTrackItActionsFromJSON,
    CopyTrackItActionsToJSON,
    CopyTrackItLocationsFromJSON,
    CopyTrackItLocationsToJSON,
    CopyTrackItTypesFromJSON,
    CopyTrackItTypesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    StatusFromJSON,
    StatusToJSON,
    TrackItActionsCriteriaFromJSON,
    TrackItActionsCriteriaToJSON,
    TrackItActionsDetailsFromJSON,
    TrackItActionsDetailsToJSON,
    TrackItActionsToBeChangedFromJSON,
    TrackItActionsToBeChangedToJSON,
    TrackItLocationsCriteriaFromJSON,
    TrackItLocationsCriteriaToJSON,
    TrackItLocationsDetailsFromJSON,
    TrackItLocationsDetailsToJSON,
    TrackItLocationsToBeChangedFromJSON,
    TrackItLocationsToBeChangedToJSON,
    TrackItTypesCriteriaFromJSON,
    TrackItTypesCriteriaToJSON,
    TrackItTypesDetailsFromJSON,
    TrackItTypesDetailsToJSON,
    TrackItTypesToBeChangedFromJSON,
    TrackItTypesToBeChangedToJSON,
} from '../models/index';

export interface ChangeTrackItActionsRequest {
    actionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItActionsToBeChanged: TrackItActionsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTrackItLocationsRequest {
    locationCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItLocationsToBeChanged: TrackItLocationsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTrackItTypesRequest {
    typeCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItTypesToBeChanged: TrackItTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTrackItActionsRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyTrackItActions: CopyTrackItActions;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTrackItLocationsRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyTrackItLocations: CopyTrackItLocations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTrackItTypesRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyTrackItTypes: CopyTrackItTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItActionsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItLocationsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTrackItTypesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    showInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTrackItActionsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItActionsCriteria: TrackItActionsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTrackItLocationsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItLocationsCriteria: TrackItLocationsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTrackItTypesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    trackItTypesCriteria: TrackItTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTrackItActionsRequest {
    actionCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTrackItLocationsRequest {
    locationCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTrackItTypesRequest {
    typeCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Track it Actions. <p><strong>OperationId:</strong>changeTrackItActions</p>
     * Change Track it Actions
     */
    async changeTrackItActionsRaw(requestParameters: ChangeTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.actionCode === null || requestParameters.actionCode === undefined) {
            throw new runtime.RequiredError('actionCode','Required parameter requestParameters.actionCode was null or undefined when calling changeTrackItActions.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeTrackItActions.');
        }
        
        if (requestParameters.trackItActionsToBeChanged === null || requestParameters.trackItActionsToBeChanged === undefined) {
            throw new runtime.RequiredError('trackItActionsToBeChanged','Required parameter requestParameters.trackItActionsToBeChanged was null or undefined when calling changeTrackItActions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItActionsToBeChangedToJSON(requestParameters.trackItActionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Track it Actions. <p><strong>OperationId:</strong>changeTrackItActions</p>
     * Change Track it Actions
     */
    async changeTrackItActions(requestParameters: ChangeTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Track it Locations. <p><strong>OperationId:</strong>changeTrackItLocations</p>
     * Change Track it Locations
     */
    async changeTrackItLocationsRaw(requestParameters: ChangeTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling changeTrackItLocations.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeTrackItLocations.');
        }
        
        if (requestParameters.trackItLocationsToBeChanged === null || requestParameters.trackItLocationsToBeChanged === undefined) {
            throw new runtime.RequiredError('trackItLocationsToBeChanged','Required parameter requestParameters.trackItLocationsToBeChanged was null or undefined when calling changeTrackItLocations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItLocationsToBeChangedToJSON(requestParameters.trackItLocationsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Track it Locations. <p><strong>OperationId:</strong>changeTrackItLocations</p>
     * Change Track it Locations
     */
    async changeTrackItLocations(requestParameters: ChangeTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Track it Types. <p><strong>OperationId:</strong>changeTrackItTypes</p>
     * Change Track it Types
     */
    async changeTrackItTypesRaw(requestParameters: ChangeTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.typeCode === null || requestParameters.typeCode === undefined) {
            throw new runtime.RequiredError('typeCode','Required parameter requestParameters.typeCode was null or undefined when calling changeTrackItTypes.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeTrackItTypes.');
        }
        
        if (requestParameters.trackItTypesToBeChanged === null || requestParameters.trackItTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('trackItTypesToBeChanged','Required parameter requestParameters.trackItTypesToBeChanged was null or undefined when calling changeTrackItTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes/{typeCode}`.replace(`{${"typeCode"}}`, encodeURIComponent(String(requestParameters.typeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItTypesToBeChangedToJSON(requestParameters.trackItTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Track it Types. <p><strong>OperationId:</strong>changeTrackItTypes</p>
     * Change Track it Types
     */
    async changeTrackItTypes(requestParameters: ChangeTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Track it Actions. <p><strong>OperationId:</strong>copyTrackItActions</p>
     *  Copy Track it Actions
     */
    async copyTrackItActionsRaw(requestParameters: CopyTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyTrackItActions.');
        }
        
        if (requestParameters.copyTrackItActions === null || requestParameters.copyTrackItActions === undefined) {
            throw new runtime.RequiredError('copyTrackItActions','Required parameter requestParameters.copyTrackItActions was null or undefined when calling copyTrackItActions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/trackItActions/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTrackItActionsToJSON(requestParameters.copyTrackItActions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Track it Actions. <p><strong>OperationId:</strong>copyTrackItActions</p>
     *  Copy Track it Actions
     */
    async copyTrackItActions(requestParameters: CopyTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Track it Locations. <p><strong>OperationId:</strong>copyTrackItLocations</p>
     *  Copy Track it Locations
     */
    async copyTrackItLocationsRaw(requestParameters: CopyTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyTrackItLocations.');
        }
        
        if (requestParameters.copyTrackItLocations === null || requestParameters.copyTrackItLocations === undefined) {
            throw new runtime.RequiredError('copyTrackItLocations','Required parameter requestParameters.copyTrackItLocations was null or undefined when calling copyTrackItLocations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/trackItLocations/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTrackItLocationsToJSON(requestParameters.copyTrackItLocations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Track it Locations. <p><strong>OperationId:</strong>copyTrackItLocations</p>
     *  Copy Track it Locations
     */
    async copyTrackItLocations(requestParameters: CopyTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Track it Types. <p><strong>OperationId:</strong>copyTrackItTypes</p>
     *  Copy Track it Types
     */
    async copyTrackItTypesRaw(requestParameters: CopyTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyTrackItTypes.');
        }
        
        if (requestParameters.copyTrackItTypes === null || requestParameters.copyTrackItTypes === undefined) {
            throw new runtime.RequiredError('copyTrackItTypes','Required parameter requestParameters.copyTrackItTypes was null or undefined when calling copyTrackItTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/trackItTypes/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTrackItTypesToJSON(requestParameters.copyTrackItTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy Track it Types. <p><strong>OperationId:</strong>copyTrackItTypes</p>
     *  Copy Track it Types
     */
    async copyTrackItTypes(requestParameters: CopyTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Track it Actions. <p><strong>OperationId:</strong>getTrackItActions</p>
     * Get Track it Actions
     */
    async getTrackItActionsRaw(requestParameters: GetTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItActionsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTrackItActions.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItActionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Actions. <p><strong>OperationId:</strong>getTrackItActions</p>
     * Get Track it Actions
     */
    async getTrackItActions(requestParameters: GetTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItActionsDetails> {
        const response = await this.getTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Track it Locations. <p><strong>OperationId:</strong>getTrackItLocations</p>
     * Get Track it Locations
     */
    async getTrackItLocationsRaw(requestParameters: GetTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItLocationsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTrackItLocations.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItLocationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Locations. <p><strong>OperationId:</strong>getTrackItLocations</p>
     * Get Track it Locations
     */
    async getTrackItLocations(requestParameters: GetTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItLocationsDetails> {
        const response = await this.getTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Track it Types. <p><strong>OperationId:</strong>getTrackItTypes</p>
     * Get Track it Types
     */
    async getTrackItTypesRaw(requestParameters: GetTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackItTypesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getTrackItTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackItTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Track it Types. <p><strong>OperationId:</strong>getTrackItTypes</p>
     * Get Track it Types
     */
    async getTrackItTypes(requestParameters: GetTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackItTypesDetails> {
        const response = await this.getTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Track it Actions. <p><strong>OperationId:</strong>postTrackItActions</p>
     * Create Track it Actions
     */
    async postTrackItActionsRaw(requestParameters: PostTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTrackItActions.');
        }
        
        if (requestParameters.trackItActionsCriteria === null || requestParameters.trackItActionsCriteria === undefined) {
            throw new runtime.RequiredError('trackItActionsCriteria','Required parameter requestParameters.trackItActionsCriteria was null or undefined when calling postTrackItActions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItActionsCriteriaToJSON(requestParameters.trackItActionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Track it Actions. <p><strong>OperationId:</strong>postTrackItActions</p>
     * Create Track it Actions
     */
    async postTrackItActions(requestParameters: PostTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Track it Locations. <p><strong>OperationId:</strong>postTrackItLocations</p>
     * Create Track it Locations
     */
    async postTrackItLocationsRaw(requestParameters: PostTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTrackItLocations.');
        }
        
        if (requestParameters.trackItLocationsCriteria === null || requestParameters.trackItLocationsCriteria === undefined) {
            throw new runtime.RequiredError('trackItLocationsCriteria','Required parameter requestParameters.trackItLocationsCriteria was null or undefined when calling postTrackItLocations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItLocationsCriteriaToJSON(requestParameters.trackItLocationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Track it Locations. <p><strong>OperationId:</strong>postTrackItLocations</p>
     * Create Track it Locations
     */
    async postTrackItLocations(requestParameters: PostTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Track it Types. <p><strong>OperationId:</strong>postTrackItTypes</p>
     * Create Track it Types
     */
    async postTrackItTypesRaw(requestParameters: PostTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postTrackItTypes.');
        }
        
        if (requestParameters.trackItTypesCriteria === null || requestParameters.trackItTypesCriteria === undefined) {
            throw new runtime.RequiredError('trackItTypesCriteria','Required parameter requestParameters.trackItTypesCriteria was null or undefined when calling postTrackItTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackItTypesCriteriaToJSON(requestParameters.trackItTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Track it Types. <p><strong>OperationId:</strong>postTrackItTypes</p>
     * Create Track it Types
     */
    async postTrackItTypes(requestParameters: PostTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Track it Actions. <p><strong>OperationId:</strong>removeTrackItActions</p>
     * Delete Track it Actions
     */
    async removeTrackItActionsRaw(requestParameters: RemoveTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.actionCode === null || requestParameters.actionCode === undefined) {
            throw new runtime.RequiredError('actionCode','Required parameter requestParameters.actionCode was null or undefined when calling removeTrackItActions.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeTrackItActions.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItActions/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Track it Actions. <p><strong>OperationId:</strong>removeTrackItActions</p>
     * Delete Track it Actions
     */
    async removeTrackItActions(requestParameters: RemoveTrackItActionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTrackItActionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Track it Locations. <p><strong>OperationId:</strong>removeTrackItLocations</p>
     * Delete Track it Locations
     */
    async removeTrackItLocationsRaw(requestParameters: RemoveTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locationCode === null || requestParameters.locationCode === undefined) {
            throw new runtime.RequiredError('locationCode','Required parameter requestParameters.locationCode was null or undefined when calling removeTrackItLocations.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeTrackItLocations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItLocations/{locationCode}`.replace(`{${"locationCode"}}`, encodeURIComponent(String(requestParameters.locationCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Track it Locations. <p><strong>OperationId:</strong>removeTrackItLocations</p>
     * Delete Track it Locations
     */
    async removeTrackItLocations(requestParameters: RemoveTrackItLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTrackItLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Track it Types. <p><strong>OperationId:</strong>removeTrackItTypes</p>
     * Delete Track it Types
     */
    async removeTrackItTypesRaw(requestParameters: RemoveTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.typeCode === null || requestParameters.typeCode === undefined) {
            throw new runtime.RequiredError('typeCode','Required parameter requestParameters.typeCode was null or undefined when calling removeTrackItTypes.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeTrackItTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/trackItTypes/{typeCode}`.replace(`{${"typeCode"}}`, encodeURIComponent(String(requestParameters.typeCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Track it Types. <p><strong>OperationId:</strong>removeTrackItTypes</p>
     * Delete Track it Types
     */
    async removeTrackItTypes(requestParameters: RemoveTrackItTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTrackItTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
