/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArAccountTypes,
  ArFlaggedReasons,
  ExceptionDetailType,
  Status,
} from '../models/index';
import {
    ArAccountTypesFromJSON,
    ArAccountTypesToJSON,
    ArFlaggedReasonsFromJSON,
    ArFlaggedReasonsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DeleteARAccountTypesRequest {
    hotelId: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountTypes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteARFlaggedReasonsRequest {
    hotelIds: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetARAccountTypesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    accountType?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetARFlaggedReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reasonCodes?: Array<string>;
    reasonWildCard?: string;
    description?: string;
    propertyCodes?: Array<string>;
    propertyWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostARAccountTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arAccountTypes: ArAccountTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostARFlaggedReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arFlaggedReasons: ArFlaggedReasons;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutARAccountTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arAccountTypes: ArAccountTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutARFlaggedReasonsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    arFlaggedReasons: ArFlaggedReasons;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class AccountsReceivablesConfigApi extends runtime.BaseAPI {

    /**
     * Operation to remove account types. <p><strong>OperationId:</strong>deleteARAccountTypes</p>
     * Operation to remove AR Account types.
     */
    async deleteARAccountTypesRaw(requestParameters: DeleteARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteARAccountTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.accountTypes) {
            queryParameters['accountTypes'] = requestParameters.accountTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountTypes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to remove account types. <p><strong>OperationId:</strong>deleteARAccountTypes</p>
     * Operation to remove AR Account types.
     */
    async deleteARAccountTypes(requestParameters: DeleteARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteARAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteARFlaggedReasons</p>
     * Operation to remove AR flagged reasons.
     */
    async deleteARFlaggedReasonsRaw(requestParameters: DeleteARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelIds === null || requestParameters.hotelIds === undefined) {
            throw new runtime.RequiredError('hotelIds','Required parameter requestParameters.hotelIds was null or undefined when calling deleteARFlaggedReasons.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/flaggedReasons`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteARFlaggedReasons</p>
     * Operation to remove AR flagged reasons.
     */
    async deleteARFlaggedReasons(requestParameters: DeleteARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteARFlaggedReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch account types. <p><strong>OperationId:</strong>getARAccountTypes</p>
     * Operation to fetch AR account types.
     */
    async getARAccountTypesRaw(requestParameters: GetARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArAccountTypes>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getARAccountTypes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.accountType !== undefined) {
            queryParameters['accountType'] = requestParameters.accountType;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ARAccountTypes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArAccountTypesFromJSON(jsonValue));
    }

    /**
     * Operation to fetch account types. <p><strong>OperationId:</strong>getARAccountTypes</p>
     * Operation to fetch AR account types.
     */
    async getARAccountTypes(requestParameters: GetARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArAccountTypes> {
        const response = await this.getARAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getARFlaggedReasons</p>
     * Operation to fetch AR flagged reasons.
     */
    async getARFlaggedReasonsRaw(requestParameters: GetARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArFlaggedReasons>> {
        const queryParameters: any = {};

        if (requestParameters.reasonCodes) {
            queryParameters['reasonCodes'] = requestParameters.reasonCodes;
        }

        if (requestParameters.reasonWildCard !== undefined) {
            queryParameters['reasonWildCard'] = requestParameters.reasonWildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.propertyCodes) {
            queryParameters['propertyCodes'] = requestParameters.propertyCodes;
        }

        if (requestParameters.propertyWildCard !== undefined) {
            queryParameters['propertyWildCard'] = requestParameters.propertyWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/flaggedReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArFlaggedReasonsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getARFlaggedReasons</p>
     * Operation to fetch AR flagged reasons.
     */
    async getARFlaggedReasons(requestParameters: GetARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArFlaggedReasons> {
        const response = await this.getARFlaggedReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to create account types. <p><strong>OperationId:</strong>postARAccountTypes</p>
     * Operation to create AR Account Types.
     */
    async postARAccountTypesRaw(requestParameters: PostARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.arAccountTypes === null || requestParameters.arAccountTypes === undefined) {
            throw new runtime.RequiredError('arAccountTypes','Required parameter requestParameters.arAccountTypes was null or undefined when calling postARAccountTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArAccountTypesToJSON(requestParameters.arAccountTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to create account types. <p><strong>OperationId:</strong>postARAccountTypes</p>
     * Operation to create AR Account Types.
     */
    async postARAccountTypes(requestParameters: PostARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postARAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>postARFlaggedReasons</p>
     * Operation to create AR flagged reasons.
     */
    async postARFlaggedReasonsRaw(requestParameters: PostARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.arFlaggedReasons === null || requestParameters.arFlaggedReasons === undefined) {
            throw new runtime.RequiredError('arFlaggedReasons','Required parameter requestParameters.arFlaggedReasons was null or undefined when calling postARFlaggedReasons.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/flaggedReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArFlaggedReasonsToJSON(requestParameters.arFlaggedReasons),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>postARFlaggedReasons</p>
     * Operation to create AR flagged reasons.
     */
    async postARFlaggedReasons(requestParameters: PostARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postARFlaggedReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to change account types. <p><strong>OperationId:</strong>putARAccountTypes</p>
     * Operation to modify AR Account Types.
     */
    async putARAccountTypesRaw(requestParameters: PutARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.arAccountTypes === null || requestParameters.arAccountTypes === undefined) {
            throw new runtime.RequiredError('arAccountTypes','Required parameter requestParameters.arAccountTypes was null or undefined when calling putARAccountTypes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/accountTypes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArAccountTypesToJSON(requestParameters.arAccountTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to change account types. <p><strong>OperationId:</strong>putARAccountTypes</p>
     * Operation to modify AR Account Types.
     */
    async putARAccountTypes(requestParameters: PutARAccountTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putARAccountTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putARFlaggedReasons</p>
     * Operation to change AR flagged reasons.
     */
    async putARFlaggedReasonsRaw(requestParameters: PutARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.arFlaggedReasons === null || requestParameters.arFlaggedReasons === undefined) {
            throw new runtime.RequiredError('arFlaggedReasons','Required parameter requestParameters.arFlaggedReasons was null or undefined when calling putARFlaggedReasons.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/flaggedReasons`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArFlaggedReasonsToJSON(requestParameters.arFlaggedReasons),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putARFlaggedReasons</p>
     * Operation to change AR flagged reasons.
     */
    async putARFlaggedReasons(requestParameters: PutARFlaggedReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putARFlaggedReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
