/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationSecureSetting,
  AuthorizationRule,
  CardReaderDelimiters,
  CreditCardInfo,
  CreditCardReaderDevices,
  CreditCardTypeValidationStatus,
  CreditCardUniqueId,
  CreditCardUniqueIdRQ,
  DecodedCard,
  ExceptionDetailType,
  HotelInterfaceDetail,
  PrepaidCardBalanceDetails,
  PrepaidCardDetails,
  PrepaidCards,
  Status,
} from '../models/index';
import {
    ApplicationSecureSettingFromJSON,
    ApplicationSecureSettingToJSON,
    AuthorizationRuleFromJSON,
    AuthorizationRuleToJSON,
    CardReaderDelimitersFromJSON,
    CardReaderDelimitersToJSON,
    CreditCardInfoFromJSON,
    CreditCardInfoToJSON,
    CreditCardReaderDevicesFromJSON,
    CreditCardReaderDevicesToJSON,
    CreditCardTypeValidationStatusFromJSON,
    CreditCardTypeValidationStatusToJSON,
    CreditCardUniqueIdFromJSON,
    CreditCardUniqueIdToJSON,
    CreditCardUniqueIdRQFromJSON,
    CreditCardUniqueIdRQToJSON,
    DecodedCardFromJSON,
    DecodedCardToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    HotelInterfaceDetailFromJSON,
    HotelInterfaceDetailToJSON,
    PrepaidCardBalanceDetailsFromJSON,
    PrepaidCardBalanceDetailsToJSON,
    PrepaidCardDetailsFromJSON,
    PrepaidCardDetailsToJSON,
    PrepaidCardsFromJSON,
    PrepaidCardsToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DecodeCardRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    trackData?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAuthorizationRuleRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelId?: string;
    reservationId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    guaranteeCode?: string;
    rateCode?: string;
    roomType?: string;
    sourceCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCardReaderDelimitersRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    deviceID?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditCardInfoRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    reservationId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    cardId?: string;
    cardIdExtension?: number;
    cardIdContext?: string;
    cardIdType?: string;
    accessTransactionType?: GetCreditCardInfoAccessTransactionTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditCardReaderDevicesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCreditCardUniqueIdRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    creditCardUniqueIdRQ: CreditCardUniqueIdRQ;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelInterfaceCustomDataRequest {
    interfaceLogoId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInstructions?: GetHotelInterfaceCustomDataFetchInstructionsEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPrepaidCardRequest {
    hotelId: string;
    cardNumber: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    interfaceId?: string;
    interfaceIdType?: string;
    reservationId?: string;
    reservationIdType?: string;
    pin?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPrepaidCardBalanceRequest {
    hotelId: string;
    cardNumber: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    interfaceId?: string;
    interfaceIdType?: string;
    reservationId?: string;
    reservationIdType?: string;
    pin?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPrepaidCardsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    includeCardDetails?: boolean;
    reservationId?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    cardNo?: string;
    roomNo?: string;
    nameWildCard?: string;
    firstNameWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutSecureApplicationSettingsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    applicationSecureSetting: ApplicationSecureSetting;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface UpdateInterfaceCustomDataRequest {
    interfaceLogoId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelInterfaceDetail: HotelInterfaceDetail;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateCreditCardTypeRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    reservationID?: string;
    reservationIDIdExtension?: number;
    reservationIDIdContext?: string;
    reservationIDType?: string;
    paymentMethodDescription?: string;
    paymentMethodFolioView?: number;
    paymentMethod?: string;
    attachCreditCardToProfile?: boolean;
    cardHolderName?: string;
    cardNumber?: string;
    cardNumberLast4Digits?: string;
    cardNumberMasked?: string;
    cardNumberType?: ValidateCreditCardTypeCardNumberTypeEnum;
    cardType?: ValidateCreditCardTypeCardTypeEnum;
    expirationDate?: Date;
    expirationDateExpired?: boolean;
    expirationDateMasked?: string;
    processing?: ValidateCreditCardTypeProcessingEnum;
    swiped?: boolean;
    userDefinedCardType?: string;
    cardId?: string;
    cardIdExtension?: number;
    cardIdContext?: string;
    cardIdType?: string;
    currentAuthorizedAmount?: number;
    currentAuthorizedAmountCurrencyCode?: string;
    approvalAmountNeeded?: number;
    approvalAmountNeededCurrencyCode?: string;
    balanceAmount?: number;
    balanceCurrencyCode?: string;
    authorizationRuleCode?: number;
    authorizationRuleAmount?: number;
    authorizationRuleCurrencyCode?: string;
    authorizationRulePercent?: number;
    emailFolio?: boolean;
    emailFolioInfoId?: string;
    emailFolioInfoIDExtension?: number;
    emailFolioInfoIDContext?: string;
    emailFolioInfoType?: string;
    emailFolioInfoCreateDateTime?: string;
    emailFolioInfoCreatorID?: string;
    emailFolioInfoEmailAddress?: string;
    emailFolioInfoEmailFormat?: ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum;
    emailFolioInfoLastModifierID?: string;
    emailFolioInfoLastModifyDateTime?: string;
    emailFolioInfoOrderSequence?: number;
    emailFolioInfoPrimaryInd?: boolean;
    emailFolioInfoPurgeDate?: Date;
    emailEmailFolioInfoType?: string;
    emailFolioInfoTypeDescription?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class CreditCardApi extends runtime.BaseAPI {

    /**
     *  <p><strong>OperationId:</strong>decodeCard</p>
     * Operation to Decode Card.
     */
    async decodeCardRaw(requestParameters: DecodeCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DecodedCard>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling decodeCard.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling decodeCard.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling decodeCard.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling decodeCard.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.trackData !== undefined) {
            queryParameters['trackData'] = requestParameters.trackData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditCards/decode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DecodedCardFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>decodeCard</p>
     * Operation to Decode Card.
     */
    async decodeCard(requestParameters: DecodeCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DecodedCard> {
        const response = await this.decodeCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getAuthorizationRule</p>
     * Operation to fetch AuthorizationRule.
     */
    async getAuthorizationRuleRaw(requestParameters: GetAuthorizationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthorizationRule>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAuthorizationRule.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getAuthorizationRule.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getAuthorizationRule.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.sourceCode !== undefined) {
            queryParameters['sourceCode'] = requestParameters.sourceCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/authorizationRule`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationRuleFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getAuthorizationRule</p>
     * Operation to fetch AuthorizationRule.
     */
    async getAuthorizationRule(requestParameters: GetAuthorizationRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthorizationRule> {
        const response = await this.getAuthorizationRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCardReaderDelimiters</p>
     * Operation to fetch CardReaderDelimiters.
     */
    async getCardReaderDelimitersRaw(requestParameters: GetCardReaderDelimitersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CardReaderDelimiters>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCardReaderDelimiters.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCardReaderDelimiters.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCardReaderDelimiters.');
        }

        const queryParameters: any = {};

        if (requestParameters.deviceID !== undefined) {
            queryParameters['deviceID'] = requestParameters.deviceID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cardReaderDelimiters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CardReaderDelimitersFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCardReaderDelimiters</p>
     * Operation to fetch CardReaderDelimiters.
     */
    async getCardReaderDelimiters(requestParameters: GetCardReaderDelimitersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CardReaderDelimiters> {
        const response = await this.getCardReaderDelimitersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return the token inclusive cardType and expirationDate for the credit card used in a specific reservation. Oracle does not provide any credit card numbers. Include the hotelId and the cardId in the parameters. The cardId can be returned with the getReservation operation. <p><strong>OperationId:</strong>getCreditCardInfo</p>
     * Get credit card token information
     */
    async getCreditCardInfoRaw(requestParameters: GetCreditCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCreditCardInfo.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCreditCardInfo.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCreditCardInfo.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCreditCardInfo.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.cardId !== undefined) {
            queryParameters['cardId'] = requestParameters.cardId;
        }

        if (requestParameters.cardIdExtension !== undefined) {
            queryParameters['cardIdExtension'] = requestParameters.cardIdExtension;
        }

        if (requestParameters.cardIdContext !== undefined) {
            queryParameters['cardIdContext'] = requestParameters.cardIdContext;
        }

        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }

        if (requestParameters.accessTransactionType !== undefined) {
            queryParameters['accessTransactionType'] = requestParameters.accessTransactionType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditCardInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to return the token inclusive cardType and expirationDate for the credit card used in a specific reservation. Oracle does not provide any credit card numbers. Include the hotelId and the cardId in the parameters. The cardId can be returned with the getReservation operation. <p><strong>OperationId:</strong>getCreditCardInfo</p>
     * Get credit card token information
     */
    async getCreditCardInfo(requestParameters: GetCreditCardInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardInfo> {
        const response = await this.getCreditCardInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCreditCardReaderDevices</p>
     * Operation to fetch CreditCardReaderDevices.
     */
    async getCreditCardReaderDevicesRaw(requestParameters: GetCreditCardReaderDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardReaderDevices>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCreditCardReaderDevices.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCreditCardReaderDevices.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCreditCardReaderDevices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditCards/readerDevices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardReaderDevicesFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCreditCardReaderDevices</p>
     * Operation to fetch CreditCardReaderDevices.
     */
    async getCreditCardReaderDevices(requestParameters: GetCreditCardReaderDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardReaderDevices> {
        const response = await this.getCreditCardReaderDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getCreditCardUniqueId</p>
     * Operation to fetch CreditCardUniqueId.
     */
    async getCreditCardUniqueIdRaw(requestParameters: GetCreditCardUniqueIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardUniqueId>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCreditCardUniqueId.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCreditCardUniqueId.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCreditCardUniqueId.');
        }

        if (requestParameters.creditCardUniqueIdRQ === null || requestParameters.creditCardUniqueIdRQ === undefined) {
            throw new runtime.RequiredError('creditCardUniqueIdRQ','Required parameter requestParameters.creditCardUniqueIdRQ was null or undefined when calling getCreditCardUniqueId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditCards/vaultedId`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreditCardUniqueIdRQToJSON(requestParameters.creditCardUniqueIdRQ),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardUniqueIdFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getCreditCardUniqueId</p>
     * Operation to fetch CreditCardUniqueId.
     */
    async getCreditCardUniqueId(requestParameters: GetCreditCardUniqueIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardUniqueId> {
        const response = await this.getCreditCardUniqueIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to fetch hotel interface custom data. <p><strong>OperationId:</strong>getHotelInterfaceCustomData</p>
     * Operation to fetch hotel interface custom data.
     */
    async getHotelInterfaceCustomDataRaw(requestParameters: GetHotelInterfaceCustomDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelInterfaceDetail>> {
        if (requestParameters.interfaceLogoId === null || requestParameters.interfaceLogoId === undefined) {
            throw new runtime.RequiredError('interfaceLogoId','Required parameter requestParameters.interfaceLogoId was null or undefined when calling getHotelInterfaceCustomData.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getHotelInterfaceCustomData.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getHotelInterfaceCustomData.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getHotelInterfaceCustomData.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getHotelInterfaceCustomData.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInstructions !== undefined) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceLogoId}/customData`.replace(`{${"interfaceLogoId"}}`, encodeURIComponent(String(requestParameters.interfaceLogoId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelInterfaceDetailFromJSON(jsonValue));
    }

    /**
     * Operation to fetch hotel interface custom data. <p><strong>OperationId:</strong>getHotelInterfaceCustomData</p>
     * Operation to fetch hotel interface custom data.
     */
    async getHotelInterfaceCustomData(requestParameters: GetHotelInterfaceCustomDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelInterfaceDetail> {
        const response = await this.getHotelInterfaceCustomDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getPrepaidCard</p>
     * Operation to fetch Prepaid Card.
     */
    async getPrepaidCardRaw(requestParameters: GetPrepaidCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepaidCardDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPrepaidCard.');
        }

        if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
            throw new runtime.RequiredError('cardNumber','Required parameter requestParameters.cardNumber was null or undefined when calling getPrepaidCard.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPrepaidCard.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPrepaidCard.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPrepaidCard.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.interfaceId !== undefined) {
            queryParameters['interfaceId'] = requestParameters.interfaceId;
        }

        if (requestParameters.interfaceIdType !== undefined) {
            queryParameters['interfaceIdType'] = requestParameters.interfaceIdType;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.pin !== undefined) {
            queryParameters['pin'] = requestParameters.pin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/prepaidCard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrepaidCardDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getPrepaidCard</p>
     * Operation to fetch Prepaid Card.
     */
    async getPrepaidCard(requestParameters: GetPrepaidCardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepaidCardDetails> {
        const response = await this.getPrepaidCardRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getPrepaidCardBalance</p>
     * Operation to fetch prepaid card balance.
     */
    async getPrepaidCardBalanceRaw(requestParameters: GetPrepaidCardBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepaidCardBalanceDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPrepaidCardBalance.');
        }

        if (requestParameters.cardNumber === null || requestParameters.cardNumber === undefined) {
            throw new runtime.RequiredError('cardNumber','Required parameter requestParameters.cardNumber was null or undefined when calling getPrepaidCardBalance.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPrepaidCardBalance.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPrepaidCardBalance.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPrepaidCardBalance.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.interfaceId !== undefined) {
            queryParameters['interfaceId'] = requestParameters.interfaceId;
        }

        if (requestParameters.interfaceIdType !== undefined) {
            queryParameters['interfaceIdType'] = requestParameters.interfaceIdType;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdType !== undefined) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        if (requestParameters.pin !== undefined) {
            queryParameters['pin'] = requestParameters.pin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/prepaidCardBalance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrepaidCardBalanceDetailsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getPrepaidCardBalance</p>
     * Operation to fetch prepaid card balance.
     */
    async getPrepaidCardBalance(requestParameters: GetPrepaidCardBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepaidCardBalanceDetails> {
        const response = await this.getPrepaidCardBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>getPrepaidCards</p>
     * Operation to fetch PrepaidCards.
     */
    async getPrepaidCardsRaw(requestParameters: GetPrepaidCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepaidCards>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPrepaidCards.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPrepaidCards.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPrepaidCards.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPrepaidCards.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.includeCardDetails !== undefined) {
            queryParameters['includeCardDetails'] = requestParameters.includeCardDetails;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.cardNo !== undefined) {
            queryParameters['cardNo'] = requestParameters.cardNo;
        }

        if (requestParameters.roomNo !== undefined) {
            queryParameters['roomNo'] = requestParameters.roomNo;
        }

        if (requestParameters.nameWildCard !== undefined) {
            queryParameters['nameWildCard'] = requestParameters.nameWildCard;
        }

        if (requestParameters.firstNameWildCard !== undefined) {
            queryParameters['firstNameWildCard'] = requestParameters.firstNameWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/prepaidCards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrepaidCardsFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>getPrepaidCards</p>
     * Operation to fetch PrepaidCards.
     */
    async getPrepaidCards(requestParameters: GetPrepaidCardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepaidCards> {
        const response = await this.getPrepaidCardsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to update one or more secure application settings. <p><strong>OperationId:</strong>putSecureApplicationSettings</p>
     * Operation to change AR SecureApplicationSettings.
     */
    async putSecureApplicationSettingsRaw(requestParameters: PutSecureApplicationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putSecureApplicationSettings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putSecureApplicationSettings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putSecureApplicationSettings.');
        }

        if (requestParameters.applicationSecureSetting === null || requestParameters.applicationSecureSetting === undefined) {
            throw new runtime.RequiredError('applicationSecureSetting','Required parameter requestParameters.applicationSecureSetting was null or undefined when calling putSecureApplicationSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/secureApplicationSettings`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSecureSettingToJSON(requestParameters.applicationSecureSetting),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to update one or more secure application settings. <p><strong>OperationId:</strong>putSecureApplicationSettings</p>
     * Operation to change AR SecureApplicationSettings.
     */
    async putSecureApplicationSettings(requestParameters: PutSecureApplicationSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putSecureApplicationSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation to update hotel interface custom data. <p><strong>OperationId:</strong>updateInterfaceCustomData</p>
     * Operation to update hotel interface custom data.
     */
    async updateInterfaceCustomDataRaw(requestParameters: UpdateInterfaceCustomDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.interfaceLogoId === null || requestParameters.interfaceLogoId === undefined) {
            throw new runtime.RequiredError('interfaceLogoId','Required parameter requestParameters.interfaceLogoId was null or undefined when calling updateInterfaceCustomData.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling updateInterfaceCustomData.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling updateInterfaceCustomData.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling updateInterfaceCustomData.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling updateInterfaceCustomData.');
        }

        if (requestParameters.hotelInterfaceDetail === null || requestParameters.hotelInterfaceDetail === undefined) {
            throw new runtime.RequiredError('hotelInterfaceDetail','Required parameter requestParameters.hotelInterfaceDetail was null or undefined when calling updateInterfaceCustomData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/interfaces/{interfaceLogoId}/customData`.replace(`{${"interfaceLogoId"}}`, encodeURIComponent(String(requestParameters.interfaceLogoId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelInterfaceDetailToJSON(requestParameters.hotelInterfaceDetail),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Operation to update hotel interface custom data. <p><strong>OperationId:</strong>updateInterfaceCustomData</p>
     * Operation to update hotel interface custom data.
     */
    async updateInterfaceCustomData(requestParameters: UpdateInterfaceCustomDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.updateInterfaceCustomDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>validateCreditCardType</p>
     * Operation to validate CreditCardType.
     */
    async validateCreditCardTypeRaw(requestParameters: ValidateCreditCardTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreditCardTypeValidationStatus>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling validateCreditCardType.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling validateCreditCardType.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling validateCreditCardType.');
        }

        const queryParameters: any = {};

        if (requestParameters.reservationID !== undefined) {
            queryParameters['reservationID'] = requestParameters.reservationID;
        }

        if (requestParameters.reservationIDIdExtension !== undefined) {
            queryParameters['reservationIDIdExtension'] = requestParameters.reservationIDIdExtension;
        }

        if (requestParameters.reservationIDIdContext !== undefined) {
            queryParameters['reservationIDIdContext'] = requestParameters.reservationIDIdContext;
        }

        if (requestParameters.reservationIDType !== undefined) {
            queryParameters['reservationIDType'] = requestParameters.reservationIDType;
        }

        if (requestParameters.paymentMethodDescription !== undefined) {
            queryParameters['paymentMethodDescription'] = requestParameters.paymentMethodDescription;
        }

        if (requestParameters.paymentMethodFolioView !== undefined) {
            queryParameters['paymentMethodFolioView'] = requestParameters.paymentMethodFolioView;
        }

        if (requestParameters.paymentMethod !== undefined) {
            queryParameters['paymentMethod'] = requestParameters.paymentMethod;
        }

        if (requestParameters.attachCreditCardToProfile !== undefined) {
            queryParameters['attachCreditCardToProfile'] = requestParameters.attachCreditCardToProfile;
        }

        if (requestParameters.cardHolderName !== undefined) {
            queryParameters['cardHolderName'] = requestParameters.cardHolderName;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['cardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardNumberLast4Digits !== undefined) {
            queryParameters['cardNumberLast4Digits'] = requestParameters.cardNumberLast4Digits;
        }

        if (requestParameters.cardNumberMasked !== undefined) {
            queryParameters['cardNumberMasked'] = requestParameters.cardNumberMasked;
        }

        if (requestParameters.cardNumberType !== undefined) {
            queryParameters['cardNumberType'] = requestParameters.cardNumberType;
        }

        if (requestParameters.cardType !== undefined) {
            queryParameters['cardType'] = requestParameters.cardType;
        }

        if (requestParameters.expirationDate !== undefined) {
            queryParameters['expirationDate'] = (requestParameters.expirationDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.expirationDateExpired !== undefined) {
            queryParameters['expirationDateExpired'] = requestParameters.expirationDateExpired;
        }

        if (requestParameters.expirationDateMasked !== undefined) {
            queryParameters['expirationDateMasked'] = requestParameters.expirationDateMasked;
        }

        if (requestParameters.processing !== undefined) {
            queryParameters['processing'] = requestParameters.processing;
        }

        if (requestParameters.swiped !== undefined) {
            queryParameters['swiped'] = requestParameters.swiped;
        }

        if (requestParameters.userDefinedCardType !== undefined) {
            queryParameters['userDefinedCardType'] = requestParameters.userDefinedCardType;
        }

        if (requestParameters.cardId !== undefined) {
            queryParameters['cardId'] = requestParameters.cardId;
        }

        if (requestParameters.cardIdExtension !== undefined) {
            queryParameters['cardIdExtension'] = requestParameters.cardIdExtension;
        }

        if (requestParameters.cardIdContext !== undefined) {
            queryParameters['cardIdContext'] = requestParameters.cardIdContext;
        }

        if (requestParameters.cardIdType !== undefined) {
            queryParameters['cardIdType'] = requestParameters.cardIdType;
        }

        if (requestParameters.currentAuthorizedAmount !== undefined) {
            queryParameters['currentAuthorizedAmount'] = requestParameters.currentAuthorizedAmount;
        }

        if (requestParameters.currentAuthorizedAmountCurrencyCode !== undefined) {
            queryParameters['currentAuthorizedAmountCurrencyCode'] = requestParameters.currentAuthorizedAmountCurrencyCode;
        }

        if (requestParameters.approvalAmountNeeded !== undefined) {
            queryParameters['approvalAmountNeeded'] = requestParameters.approvalAmountNeeded;
        }

        if (requestParameters.approvalAmountNeededCurrencyCode !== undefined) {
            queryParameters['approvalAmountNeededCurrencyCode'] = requestParameters.approvalAmountNeededCurrencyCode;
        }

        if (requestParameters.balanceAmount !== undefined) {
            queryParameters['balanceAmount'] = requestParameters.balanceAmount;
        }

        if (requestParameters.balanceCurrencyCode !== undefined) {
            queryParameters['balanceCurrencyCode'] = requestParameters.balanceCurrencyCode;
        }

        if (requestParameters.authorizationRuleCode !== undefined) {
            queryParameters['authorizationRuleCode'] = requestParameters.authorizationRuleCode;
        }

        if (requestParameters.authorizationRuleAmount !== undefined) {
            queryParameters['authorizationRuleAmount'] = requestParameters.authorizationRuleAmount;
        }

        if (requestParameters.authorizationRuleCurrencyCode !== undefined) {
            queryParameters['authorizationRuleCurrencyCode'] = requestParameters.authorizationRuleCurrencyCode;
        }

        if (requestParameters.authorizationRulePercent !== undefined) {
            queryParameters['authorizationRulePercent'] = requestParameters.authorizationRulePercent;
        }

        if (requestParameters.emailFolio !== undefined) {
            queryParameters['emailFolio'] = requestParameters.emailFolio;
        }

        if (requestParameters.emailFolioInfoId !== undefined) {
            queryParameters['emailFolioInfoId'] = requestParameters.emailFolioInfoId;
        }

        if (requestParameters.emailFolioInfoIDExtension !== undefined) {
            queryParameters['emailFolioInfoIDExtension'] = requestParameters.emailFolioInfoIDExtension;
        }

        if (requestParameters.emailFolioInfoIDContext !== undefined) {
            queryParameters['emailFolioInfoIDContext'] = requestParameters.emailFolioInfoIDContext;
        }

        if (requestParameters.emailFolioInfoType !== undefined) {
            queryParameters['emailFolioInfoType'] = requestParameters.emailFolioInfoType;
        }

        if (requestParameters.emailFolioInfoCreateDateTime !== undefined) {
            queryParameters['emailFolioInfoCreateDateTime'] = requestParameters.emailFolioInfoCreateDateTime;
        }

        if (requestParameters.emailFolioInfoCreatorID !== undefined) {
            queryParameters['emailFolioInfoCreatorID'] = requestParameters.emailFolioInfoCreatorID;
        }

        if (requestParameters.emailFolioInfoEmailAddress !== undefined) {
            queryParameters['emailFolioInfoEmailAddress'] = requestParameters.emailFolioInfoEmailAddress;
        }

        if (requestParameters.emailFolioInfoEmailFormat !== undefined) {
            queryParameters['emailFolioInfoEmailFormat'] = requestParameters.emailFolioInfoEmailFormat;
        }

        if (requestParameters.emailFolioInfoLastModifierID !== undefined) {
            queryParameters['emailFolioInfoLastModifierID'] = requestParameters.emailFolioInfoLastModifierID;
        }

        if (requestParameters.emailFolioInfoLastModifyDateTime !== undefined) {
            queryParameters['emailFolioInfoLastModifyDateTime'] = requestParameters.emailFolioInfoLastModifyDateTime;
        }

        if (requestParameters.emailFolioInfoOrderSequence !== undefined) {
            queryParameters['emailFolioInfoOrderSequence'] = requestParameters.emailFolioInfoOrderSequence;
        }

        if (requestParameters.emailFolioInfoPrimaryInd !== undefined) {
            queryParameters['emailFolioInfoPrimaryInd'] = requestParameters.emailFolioInfoPrimaryInd;
        }

        if (requestParameters.emailFolioInfoPurgeDate !== undefined) {
            queryParameters['emailFolioInfoPurgeDate'] = (requestParameters.emailFolioInfoPurgeDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.emailEmailFolioInfoType !== undefined) {
            queryParameters['emailEmailFolioInfoType'] = requestParameters.emailEmailFolioInfoType;
        }

        if (requestParameters.emailFolioInfoTypeDescription !== undefined) {
            queryParameters['emailFolioInfoTypeDescription'] = requestParameters.emailFolioInfoTypeDescription;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/creditCardTypes/validate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreditCardTypeValidationStatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>validateCreditCardType</p>
     * Operation to validate CreditCardType.
     */
    async validateCreditCardType(requestParameters: ValidateCreditCardTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreditCardTypeValidationStatus> {
        const response = await this.validateCreditCardTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCreditCardInfoAccessTransactionTypeEnum = {
    Additional: 'Additional',
    ArPayment: 'ArPayment',
    Batch: 'Batch',
    BatchDeposit: 'BatchDeposit',
    BatchDepositRefund: 'BatchDepositRefund',
    Billing: 'Billing',
    CheckIn: 'CheckIn',
    CheckInManualAuth: 'CheckInManualAuth',
    Deposit: 'Deposit',
    EndOfDay: 'EndOfDay',
    EndOfDayDeposit: 'EndOfDayDeposit',
    Manual: 'Manual',
    Other: 'Other',
    PasserBy: 'PasserBy',
    PostIt: 'PostIt',
    PreCheckIn: 'PreCheckIn',
    Refund: 'Refund',
    Scheduled: 'Scheduled'
} as const;
export type GetCreditCardInfoAccessTransactionTypeEnum = typeof GetCreditCardInfoAccessTransactionTypeEnum[keyof typeof GetCreditCardInfoAccessTransactionTypeEnum];
/**
 * @export
 */
export const GetHotelInterfaceCustomDataFetchInstructionsEnum = {
    PrimaryInfo: 'PrimaryInfo',
    AdditionalInfo: 'AdditionalInfo',
    GeneralInfo: 'GeneralInfo',
    CommunicationInfo: 'CommunicationInfo',
    IfcTranslation: 'IfcTranslation',
    IfcClassOfService: 'IfcClassOfService',
    IfcImportRooms: 'IfcImportRooms',
    WorkstationSetupInfo: 'WorkstationSetupInfo',
    PostingsInfo: 'PostingsInfo',
    CustomDataInfo: 'CustomDataInfo',
    ExportDataInfo: 'ExportDataInfo',
    TransactionCodesInfo: 'TransactionCodesInfo'
} as const;
export type GetHotelInterfaceCustomDataFetchInstructionsEnum = typeof GetHotelInterfaceCustomDataFetchInstructionsEnum[keyof typeof GetHotelInterfaceCustomDataFetchInstructionsEnum];
/**
 * @export
 */
export const ValidateCreditCardTypeCardNumberTypeEnum = {
    CardNumber: 'CardNumber',
    Token: 'Token'
} as const;
export type ValidateCreditCardTypeCardNumberTypeEnum = typeof ValidateCreditCardTypeCardNumberTypeEnum[keyof typeof ValidateCreditCardTypeCardNumberTypeEnum];
/**
 * @export
 */
export const ValidateCreditCardTypeCardTypeEnum = {
    Ab: 'Ab',
    Am: 'Am',
    Ax: 'Ax',
    Cb: 'Cb',
    Dc: 'Dc',
    Ds: 'Ds',
    Dt: 'Dt',
    Ec: 'Ec',
    Er: 'Er',
    Jc: 'Jc',
    Jl: 'Jl',
    Mc: 'Mc',
    Nb: 'Nb',
    So: 'So',
    St: 'St',
    Sw: 'Sw',
    Va: 'Va',
    Xy: 'Xy',
    Zz: 'Zz',
    Cp: 'Cp',
    Cu: 'Cu'
} as const;
export type ValidateCreditCardTypeCardTypeEnum = typeof ValidateCreditCardTypeCardTypeEnum[keyof typeof ValidateCreditCardTypeCardTypeEnum];
/**
 * @export
 */
export const ValidateCreditCardTypeProcessingEnum = {
    Eft: 'Eft',
    Manual: 'Manual'
} as const;
export type ValidateCreditCardTypeProcessingEnum = typeof ValidateCreditCardTypeProcessingEnum[keyof typeof ValidateCreditCardTypeProcessingEnum];
/**
 * @export
 */
export const ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum = {
    Html: 'Html',
    Text: 'Text'
} as const;
export type ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum = typeof ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum[keyof typeof ValidateCreditCardTypeEmailFolioInfoEmailFormatEnum];
