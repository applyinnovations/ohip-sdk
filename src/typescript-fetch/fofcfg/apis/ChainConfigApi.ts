/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AutoFolioSettlementTypesDetails,
  CashierShiftDropLocationsDetails,
  ChangeCashierShiftDropLocationsRequest,
  ChangeCustomTaxTypesRequest,
  ChangeFiscalGuestTypesRequest,
  ChangeFiscalRegionsRequest,
  ChangeTaxOfficesRequest,
  ChangeTemplateCashierShiftDropLocationsRequest,
  ContractBillingInstructionsDetails,
  CustomTaxTypesDetails,
  ExceptionDetailType,
  FiscalGuestTypesDetails,
  FiscalRegionsDetails,
  PostAutoFolioSettlementTypesRequest,
  PostCashierShiftDropLocationsRequest,
  PostContractBillingInstructionsRequest,
  PostCustomTaxTypesRequest,
  PostFiscalGuestTypesRequest,
  PostFiscalRegionsRequest,
  PostTaxCategoryCodesRequest,
  PostTaxOfficesRequest,
  PostTemplateCashierShiftDropLocationsRequest,
  PutAutoFolioSettlementTypesRequest,
  PutContractBillingInstructionsRequest,
  PutTaxCategoryCodesRequest,
  Status,
  TaxCategoryCodesDetails,
  TaxOfficesDetails,
  TemplateCashierShiftDropLocationsDetails,
} from '../models';
import {
    AutoFolioSettlementTypesDetailsFromJSON,
    AutoFolioSettlementTypesDetailsToJSON,
    CashierShiftDropLocationsDetailsFromJSON,
    CashierShiftDropLocationsDetailsToJSON,
    ChangeCashierShiftDropLocationsRequestFromJSON,
    ChangeCashierShiftDropLocationsRequestToJSON,
    ChangeCustomTaxTypesRequestFromJSON,
    ChangeCustomTaxTypesRequestToJSON,
    ChangeFiscalGuestTypesRequestFromJSON,
    ChangeFiscalGuestTypesRequestToJSON,
    ChangeFiscalRegionsRequestFromJSON,
    ChangeFiscalRegionsRequestToJSON,
    ChangeTaxOfficesRequestFromJSON,
    ChangeTaxOfficesRequestToJSON,
    ChangeTemplateCashierShiftDropLocationsRequestFromJSON,
    ChangeTemplateCashierShiftDropLocationsRequestToJSON,
    ContractBillingInstructionsDetailsFromJSON,
    ContractBillingInstructionsDetailsToJSON,
    CustomTaxTypesDetailsFromJSON,
    CustomTaxTypesDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FiscalGuestTypesDetailsFromJSON,
    FiscalGuestTypesDetailsToJSON,
    FiscalRegionsDetailsFromJSON,
    FiscalRegionsDetailsToJSON,
    PostAutoFolioSettlementTypesRequestFromJSON,
    PostAutoFolioSettlementTypesRequestToJSON,
    PostCashierShiftDropLocationsRequestFromJSON,
    PostCashierShiftDropLocationsRequestToJSON,
    PostContractBillingInstructionsRequestFromJSON,
    PostContractBillingInstructionsRequestToJSON,
    PostCustomTaxTypesRequestFromJSON,
    PostCustomTaxTypesRequestToJSON,
    PostFiscalGuestTypesRequestFromJSON,
    PostFiscalGuestTypesRequestToJSON,
    PostFiscalRegionsRequestFromJSON,
    PostFiscalRegionsRequestToJSON,
    PostTaxCategoryCodesRequestFromJSON,
    PostTaxCategoryCodesRequestToJSON,
    PostTaxOfficesRequestFromJSON,
    PostTaxOfficesRequestToJSON,
    PostTemplateCashierShiftDropLocationsRequestFromJSON,
    PostTemplateCashierShiftDropLocationsRequestToJSON,
    PutAutoFolioSettlementTypesRequestFromJSON,
    PutAutoFolioSettlementTypesRequestToJSON,
    PutContractBillingInstructionsRequestFromJSON,
    PutContractBillingInstructionsRequestToJSON,
    PutTaxCategoryCodesRequestFromJSON,
    PutTaxCategoryCodesRequestToJSON,
    StatusFromJSON,
    StatusToJSON,
    TaxCategoryCodesDetailsFromJSON,
    TaxCategoryCodesDetailsToJSON,
    TaxOfficesDetailsFromJSON,
    TaxOfficesDetailsToJSON,
    TemplateCashierShiftDropLocationsDetailsFromJSON,
    TemplateCashierShiftDropLocationsDetailsToJSON,
} from '../models';

export interface ChangeCashierShiftDropLocationsOperationRequest {
    dropLocationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierShiftDropLocationsToBeChanged?: ChangeCashierShiftDropLocationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeCustomTaxTypesOperationRequest {
    taxTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customTaxTypesToBeChanged?: ChangeCustomTaxTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFiscalGuestTypesOperationRequest {
    fiscalGuestTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalGuestTypesToBeChanged?: ChangeFiscalGuestTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFiscalRegionsOperationRequest {
    regionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalRegionsToBeChanged?: ChangeFiscalRegionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTaxOfficesOperationRequest {
    taxOfficeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxOfficesToBeChanged?: ChangeTaxOfficesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateCashierShiftDropLocationsOperationRequest {
    dropLocationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCashierShiftDropLocationsToBeChanged?: ChangeTemplateCashierShiftDropLocationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAutoFolioSettlementTypesRequest {
    code?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteContractBillingInstructionsRequest {
    contractBillingInstructionsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTaxCategoryCodesRequest {
    taxCategoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAutoFolioSettlementTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCashierShiftDropLocationsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetContractBillingInstructionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCustomTaxTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFetchTaxCategoryCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalGuestTypesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFiscalRegionsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTaxOfficesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateCashierShiftDropLocationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAutoFolioSettlementTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoFolioSettlementTypesCriteria?: PostAutoFolioSettlementTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCashierShiftDropLocationsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cashierShiftDropLocationsCriteria?: PostCashierShiftDropLocationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostContractBillingInstructionsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    contractBillingInstructionsCriteria?: PostContractBillingInstructionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCustomTaxTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    customTaxTypesCriteria?: PostCustomTaxTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalGuestTypesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalGuestTypesCriteria?: PostFiscalGuestTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFiscalRegionsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fiscalRegionsCriteria?: PostFiscalRegionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTaxCategoryCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxCategoryCodesCriteria?: PostTaxCategoryCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTaxOfficesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxOfficesCriteria?: PostTaxOfficesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateCashierShiftDropLocationsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCashierShiftDropLocationsCriteria?: PostTemplateCashierShiftDropLocationsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAutoFolioSettlementTypesOperationRequest {
    code?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoFolioSettlementTypesToBeChanged?: PutAutoFolioSettlementTypesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutContractBillingInstructionsOperationRequest {
    contractBillingInstructionsId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    contractBillingInstructionsToBeChanged?: PutContractBillingInstructionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTaxCategoryCodesOperationRequest {
    taxCategoryCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    taxCategoryCodesToBeChanged?: PutTaxCategoryCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCashierShiftDropLocationsRequest {
    dropLocationId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCustomTaxTypesRequest {
    taxTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFiscalGuestTypesRequest {
    fiscalGuestTypeCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFiscalRegionsRequest {
    regionCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTaxOfficesRequest {
    taxOfficeId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateCashierShiftDropLocationsRequest {
    dropLocationId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Cashier Shift Drop Locations. <p><strong>OperationId:</strong>changeCashierShiftDropLocations</p>
     * Change Cashier Shift Drop Locations
     */
    async changeCashierShiftDropLocationsRaw(requestParameters: ChangeCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashierShifts/dropLocations/{dropLocationId}`.replace(`{${"dropLocationId"}}`, encodeURIComponent(String(requestParameters.dropLocationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCashierShiftDropLocationsRequestToJSON(requestParameters.cashierShiftDropLocationsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Cashier Shift Drop Locations. <p><strong>OperationId:</strong>changeCashierShiftDropLocations</p>
     * Change Cashier Shift Drop Locations
     */
    async changeCashierShiftDropLocations(requestParameters: ChangeCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Custom Tax Types. <p><strong>OperationId:</strong>changeCustomTaxTypes</p>
     * Change Custom Tax Types
     */
    async changeCustomTaxTypesRaw(requestParameters: ChangeCustomTaxTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/customTaxTypes/{taxTypeCode}`.replace(`{${"taxTypeCode"}}`, encodeURIComponent(String(requestParameters.taxTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeCustomTaxTypesRequestToJSON(requestParameters.customTaxTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Custom Tax Types. <p><strong>OperationId:</strong>changeCustomTaxTypes</p>
     * Change Custom Tax Types
     */
    async changeCustomTaxTypes(requestParameters: ChangeCustomTaxTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCustomTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Fiscal Guest Types. <p><strong>OperationId:</strong>changeFiscalGuestTypes</p>
     * Change Fiscal Guest Types
     */
    async changeFiscalGuestTypesRaw(requestParameters: ChangeFiscalGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalGuestTypes/{fiscalGuestTypeCode}`.replace(`{${"fiscalGuestTypeCode"}}`, encodeURIComponent(String(requestParameters.fiscalGuestTypeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeFiscalGuestTypesRequestToJSON(requestParameters.fiscalGuestTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Fiscal Guest Types. <p><strong>OperationId:</strong>changeFiscalGuestTypes</p>
     * Change Fiscal Guest Types
     */
    async changeFiscalGuestTypes(requestParameters: ChangeFiscalGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFiscalGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Fiscal Regions. <p><strong>OperationId:</strong>changeFiscalRegions</p>
     * Change Fiscal Regions
     */
    async changeFiscalRegionsRaw(requestParameters: ChangeFiscalRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalRegions/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeFiscalRegionsRequestToJSON(requestParameters.fiscalRegionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Fiscal Regions. <p><strong>OperationId:</strong>changeFiscalRegions</p>
     * Change Fiscal Regions
     */
    async changeFiscalRegions(requestParameters: ChangeFiscalRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFiscalRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Tax Offices. <p><strong>OperationId:</strong>changeTaxOffices</p>
     * Change Tax Offices
     */
    async changeTaxOfficesRaw(requestParameters: ChangeTaxOfficesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxOffices/{taxOfficeId}`.replace(`{${"taxOfficeId"}}`, encodeURIComponent(String(requestParameters.taxOfficeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTaxOfficesRequestToJSON(requestParameters.taxOfficesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Tax Offices. <p><strong>OperationId:</strong>changeTaxOffices</p>
     * Change Tax Offices
     */
    async changeTaxOffices(requestParameters: ChangeTaxOfficesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTaxOfficesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>changeTemplateCashierShiftDropLocations</p>
     * Change Template Cashier Shift Drop Locations
     */
    async changeTemplateCashierShiftDropLocationsRaw(requestParameters: ChangeTemplateCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashierShifts/dropLocations/{dropLocationId}`.replace(`{${"dropLocationId"}}`, encodeURIComponent(String(requestParameters.dropLocationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeTemplateCashierShiftDropLocationsRequestToJSON(requestParameters.templateCashierShiftDropLocationsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>changeTemplateCashierShiftDropLocations</p>
     * Change Template Cashier Shift Drop Locations
     */
    async changeTemplateCashierShiftDropLocations(requestParameters: ChangeTemplateCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Auto Folio Settlement Types. <p><strong>OperationId:</strong>deleteAutoFolioSettlementTypes</p>
     * Delete Auto Folio Settlement Types
     */
    async deleteAutoFolioSettlementTypesRaw(requestParameters: DeleteAutoFolioSettlementTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/autoFolioSettlementTypes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Auto Folio Settlement Types. <p><strong>OperationId:</strong>deleteAutoFolioSettlementTypes</p>
     * Delete Auto Folio Settlement Types
     */
    async deleteAutoFolioSettlementTypes(requestParameters: DeleteAutoFolioSettlementTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAutoFolioSettlementTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Contract Billing Instructions. <p><strong>OperationId:</strong>deleteContractBillingInstructions</p>
     * Delete Contract Billing Instructions
     */
    async deleteContractBillingInstructionsRaw(requestParameters: DeleteContractBillingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/contractBillingInstructions/{contractBillingInstructionsId}`.replace(`{${"contractBillingInstructionsId"}}`, encodeURIComponent(String(requestParameters.contractBillingInstructionsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Contract Billing Instructions. <p><strong>OperationId:</strong>deleteContractBillingInstructions</p>
     * Delete Contract Billing Instructions
     */
    async deleteContractBillingInstructions(requestParameters: DeleteContractBillingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteContractBillingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Tax Category Codes. <p><strong>OperationId:</strong>deleteTaxCategoryCodes</p>
     * Delete Tax Category Codes
     */
    async deleteTaxCategoryCodesRaw(requestParameters: DeleteTaxCategoryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxCategories/{taxCategoryCode}`.replace(`{${"taxCategoryCode"}}`, encodeURIComponent(String(requestParameters.taxCategoryCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Tax Category Codes. <p><strong>OperationId:</strong>deleteTaxCategoryCodes</p>
     * Delete Tax Category Codes
     */
    async deleteTaxCategoryCodes(requestParameters: DeleteTaxCategoryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTaxCategoryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Auto Folio Settlement Types. <p><strong>OperationId:</strong>getAutoFolioSettlementTypes</p>
     * Get Auto Folio Settlement Types
     */
    async getAutoFolioSettlementTypesRaw(requestParameters: GetAutoFolioSettlementTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoFolioSettlementTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/autoFolioSettlementTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoFolioSettlementTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Auto Folio Settlement Types. <p><strong>OperationId:</strong>getAutoFolioSettlementTypes</p>
     * Get Auto Folio Settlement Types
     */
    async getAutoFolioSettlementTypes(requestParameters: GetAutoFolioSettlementTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoFolioSettlementTypesDetails> {
        const response = await this.getAutoFolioSettlementTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Cashier Shift Drop Locations. <p><strong>OperationId:</strong>getCashierShiftDropLocations</p>
     * Get Cashier Shift Drop Locations
     */
    async getCashierShiftDropLocationsRaw(requestParameters: GetCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CashierShiftDropLocationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashierShifts/dropLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CashierShiftDropLocationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Cashier Shift Drop Locations. <p><strong>OperationId:</strong>getCashierShiftDropLocations</p>
     * Get Cashier Shift Drop Locations
     */
    async getCashierShiftDropLocations(requestParameters: GetCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CashierShiftDropLocationsDetails> {
        const response = await this.getCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Contract Billing Instructions. <p><strong>OperationId:</strong>getContractBillingInstructions</p>
     * Get Contract Billing Instructions
     */
    async getContractBillingInstructionsRaw(requestParameters: GetContractBillingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContractBillingInstructionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/contractBillingInstructions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContractBillingInstructionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Contract Billing Instructions. <p><strong>OperationId:</strong>getContractBillingInstructions</p>
     * Get Contract Billing Instructions
     */
    async getContractBillingInstructions(requestParameters: GetContractBillingInstructionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContractBillingInstructionsDetails> {
        const response = await this.getContractBillingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Custom Tax Types. <p><strong>OperationId:</strong>getCustomTaxTypes</p>
     * Get Custom Tax Types
     */
    async getCustomTaxTypesRaw(requestParameters: GetCustomTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CustomTaxTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/customTaxTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomTaxTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Custom Tax Types. <p><strong>OperationId:</strong>getCustomTaxTypes</p>
     * Get Custom Tax Types
     */
    async getCustomTaxTypes(requestParameters: GetCustomTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CustomTaxTypesDetails> {
        const response = await this.getCustomTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Tax Category Codes. <p><strong>OperationId:</strong>getFetchTaxCategoryCodes</p>
     * Get Tax Category Codes
     */
    async getFetchTaxCategoryCodesRaw(requestParameters: GetFetchTaxCategoryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxCategoryCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxCategoryCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Tax Category Codes. <p><strong>OperationId:</strong>getFetchTaxCategoryCodes</p>
     * Get Tax Category Codes
     */
    async getFetchTaxCategoryCodes(requestParameters: GetFetchTaxCategoryCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxCategoryCodesDetails> {
        const response = await this.getFetchTaxCategoryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Fiscal Guest Types. <p><strong>OperationId:</strong>getFiscalGuestTypes</p>
     * Get Fiscal Guest Types
     */
    async getFiscalGuestTypesRaw(requestParameters: GetFiscalGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalGuestTypesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalGuestTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalGuestTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Fiscal Guest Types. <p><strong>OperationId:</strong>getFiscalGuestTypes</p>
     * Get Fiscal Guest Types
     */
    async getFiscalGuestTypes(requestParameters: GetFiscalGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalGuestTypesDetails> {
        const response = await this.getFiscalGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Fiscal Regions. <p><strong>OperationId:</strong>getFiscalRegions</p>
     * Get Fiscal Regions
     */
    async getFiscalRegionsRaw(requestParameters: GetFiscalRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FiscalRegionsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalRegions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FiscalRegionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Fiscal Regions. <p><strong>OperationId:</strong>getFiscalRegions</p>
     * Get Fiscal Regions
     */
    async getFiscalRegions(requestParameters: GetFiscalRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FiscalRegionsDetails> {
        const response = await this.getFiscalRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Tax Offices. <p><strong>OperationId:</strong>getTaxOffices</p>
     * Get Tax Offices
     */
    async getTaxOfficesRaw(requestParameters: GetTaxOfficesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaxOfficesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxOffices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxOfficesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Tax Offices. <p><strong>OperationId:</strong>getTaxOffices</p>
     * Get Tax Offices
     */
    async getTaxOffices(requestParameters: GetTaxOfficesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaxOfficesDetails> {
        const response = await this.getTaxOfficesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>getTemplateCashierShiftDropLocations</p>
     * Get Template Cashier Shift Drop Locations
     */
    async getTemplateCashierShiftDropLocationsRaw(requestParameters: GetTemplateCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateCashierShiftDropLocationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashierShifts/dropLocations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateCashierShiftDropLocationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>getTemplateCashierShiftDropLocations</p>
     * Get Template Cashier Shift Drop Locations
     */
    async getTemplateCashierShiftDropLocations(requestParameters: GetTemplateCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateCashierShiftDropLocationsDetails> {
        const response = await this.getTemplateCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Auto Folio Settlement Types. <p><strong>OperationId:</strong>postAutoFolioSettlementTypes</p>
     * Create Auto Folio Settlement Types
     */
    async postAutoFolioSettlementTypesRaw(requestParameters: PostAutoFolioSettlementTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/autoFolioSettlementTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostAutoFolioSettlementTypesRequestToJSON(requestParameters.autoFolioSettlementTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Auto Folio Settlement Types. <p><strong>OperationId:</strong>postAutoFolioSettlementTypes</p>
     * Create Auto Folio Settlement Types
     */
    async postAutoFolioSettlementTypes(requestParameters: PostAutoFolioSettlementTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAutoFolioSettlementTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Cashier Shift Drop Locations. <p><strong>OperationId:</strong>postCashierShiftDropLocations</p>
     * Create Cashier Shift Drop Locations
     */
    async postCashierShiftDropLocationsRaw(requestParameters: PostCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashierShifts/dropLocations`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCashierShiftDropLocationsRequestToJSON(requestParameters.cashierShiftDropLocationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Cashier Shift Drop Locations. <p><strong>OperationId:</strong>postCashierShiftDropLocations</p>
     * Create Cashier Shift Drop Locations
     */
    async postCashierShiftDropLocations(requestParameters: PostCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Contract Billing Instructions. <p><strong>OperationId:</strong>postContractBillingInstructions</p>
     * Create Contract Billing Instructions
     */
    async postContractBillingInstructionsRaw(requestParameters: PostContractBillingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/contractBillingInstructions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostContractBillingInstructionsRequestToJSON(requestParameters.contractBillingInstructionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Contract Billing Instructions. <p><strong>OperationId:</strong>postContractBillingInstructions</p>
     * Create Contract Billing Instructions
     */
    async postContractBillingInstructions(requestParameters: PostContractBillingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postContractBillingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Custom Tax Types. <p><strong>OperationId:</strong>postCustomTaxTypes</p>
     * Create Custom Tax Types
     */
    async postCustomTaxTypesRaw(requestParameters: PostCustomTaxTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/customTaxTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCustomTaxTypesRequestToJSON(requestParameters.customTaxTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Custom Tax Types. <p><strong>OperationId:</strong>postCustomTaxTypes</p>
     * Create Custom Tax Types
     */
    async postCustomTaxTypes(requestParameters: PostCustomTaxTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCustomTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Fiscal Guest Types. <p><strong>OperationId:</strong>postFiscalGuestTypes</p>
     * Create Fiscal Guest Types
     */
    async postFiscalGuestTypesRaw(requestParameters: PostFiscalGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalGuestTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFiscalGuestTypesRequestToJSON(requestParameters.fiscalGuestTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Fiscal Guest Types. <p><strong>OperationId:</strong>postFiscalGuestTypes</p>
     * Create Fiscal Guest Types
     */
    async postFiscalGuestTypes(requestParameters: PostFiscalGuestTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFiscalGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Fiscal Regions. <p><strong>OperationId:</strong>postFiscalRegions</p>
     * Create Fiscal Regions
     */
    async postFiscalRegionsRaw(requestParameters: PostFiscalRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalRegions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostFiscalRegionsRequestToJSON(requestParameters.fiscalRegionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Fiscal Regions. <p><strong>OperationId:</strong>postFiscalRegions</p>
     * Create Fiscal Regions
     */
    async postFiscalRegions(requestParameters: PostFiscalRegionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFiscalRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Tax Category Codes. <p><strong>OperationId:</strong>postTaxCategoryCodes</p>
     * Create Tax Category Codes
     */
    async postTaxCategoryCodesRaw(requestParameters: PostTaxCategoryCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTaxCategoryCodesRequestToJSON(requestParameters.taxCategoryCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Tax Category Codes. <p><strong>OperationId:</strong>postTaxCategoryCodes</p>
     * Create Tax Category Codes
     */
    async postTaxCategoryCodes(requestParameters: PostTaxCategoryCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTaxCategoryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Tax Offices. <p><strong>OperationId:</strong>postTaxOffices</p>
     * Create Tax Offices
     */
    async postTaxOfficesRaw(requestParameters: PostTaxOfficesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxOffices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTaxOfficesRequestToJSON(requestParameters.taxOfficesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Tax Offices. <p><strong>OperationId:</strong>postTaxOffices</p>
     * Create Tax Offices
     */
    async postTaxOffices(requestParameters: PostTaxOfficesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTaxOfficesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>postTemplateCashierShiftDropLocations</p>
     * Create Template Cashier Shift Drop Locations
     */
    async postTemplateCashierShiftDropLocationsRaw(requestParameters: PostTemplateCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashierShifts/dropLocations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemplateCashierShiftDropLocationsRequestToJSON(requestParameters.templateCashierShiftDropLocationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>postTemplateCashierShiftDropLocations</p>
     * Create Template Cashier Shift Drop Locations
     */
    async postTemplateCashierShiftDropLocations(requestParameters: PostTemplateCashierShiftDropLocationsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Auto Folio Settlement Types. <p><strong>OperationId:</strong>putAutoFolioSettlementTypes</p>
     * Change Auto Folio Settlement Types
     */
    async putAutoFolioSettlementTypesRaw(requestParameters: PutAutoFolioSettlementTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/autoFolioSettlementTypes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAutoFolioSettlementTypesRequestToJSON(requestParameters.autoFolioSettlementTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Auto Folio Settlement Types. <p><strong>OperationId:</strong>putAutoFolioSettlementTypes</p>
     * Change Auto Folio Settlement Types
     */
    async putAutoFolioSettlementTypes(requestParameters: PutAutoFolioSettlementTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAutoFolioSettlementTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Contract Billing Instructions. <p><strong>OperationId:</strong>putContractBillingInstructions</p>
     * Change Contract Billing Instructions
     */
    async putContractBillingInstructionsRaw(requestParameters: PutContractBillingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/contractBillingInstructions/{contractBillingInstructionsId}`.replace(`{${"contractBillingInstructionsId"}}`, encodeURIComponent(String(requestParameters.contractBillingInstructionsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutContractBillingInstructionsRequestToJSON(requestParameters.contractBillingInstructionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Contract Billing Instructions. <p><strong>OperationId:</strong>putContractBillingInstructions</p>
     * Change Contract Billing Instructions
     */
    async putContractBillingInstructions(requestParameters: PutContractBillingInstructionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putContractBillingInstructionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Tax Category Codes. <p><strong>OperationId:</strong>putTaxCategoryCodes</p>
     * Change Tax Category Codes
     */
    async putTaxCategoryCodesRaw(requestParameters: PutTaxCategoryCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxCategories/{taxCategoryCode}`.replace(`{${"taxCategoryCode"}}`, encodeURIComponent(String(requestParameters.taxCategoryCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTaxCategoryCodesRequestToJSON(requestParameters.taxCategoryCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Tax Category Codes. <p><strong>OperationId:</strong>putTaxCategoryCodes</p>
     * Change Tax Category Codes
     */
    async putTaxCategoryCodes(requestParameters: PutTaxCategoryCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTaxCategoryCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Cashier Shift Drop Locations. <p><strong>OperationId:</strong>removeCashierShiftDropLocations</p>
     * Delete Cashier Shift Drop Locations
     */
    async removeCashierShiftDropLocationsRaw(requestParameters: RemoveCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cashierShifts/dropLocations/{dropLocationId}`.replace(`{${"dropLocationId"}}`, encodeURIComponent(String(requestParameters.dropLocationId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Cashier Shift Drop Locations. <p><strong>OperationId:</strong>removeCashierShiftDropLocations</p>
     * Delete Cashier Shift Drop Locations
     */
    async removeCashierShiftDropLocations(requestParameters: RemoveCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Custom Tax Types. <p><strong>OperationId:</strong>removeCustomTaxTypes</p>
     * Delete Custom Tax Types
     */
    async removeCustomTaxTypesRaw(requestParameters: RemoveCustomTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/customTaxTypes/{taxTypeCode}`.replace(`{${"taxTypeCode"}}`, encodeURIComponent(String(requestParameters.taxTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Custom Tax Types. <p><strong>OperationId:</strong>removeCustomTaxTypes</p>
     * Delete Custom Tax Types
     */
    async removeCustomTaxTypes(requestParameters: RemoveCustomTaxTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCustomTaxTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Fiscal Guest Types. <p><strong>OperationId:</strong>removeFiscalGuestTypes</p>
     * Delete Fiscal Guest Types
     */
    async removeFiscalGuestTypesRaw(requestParameters: RemoveFiscalGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalGuestTypes/{fiscalGuestTypeCode}`.replace(`{${"fiscalGuestTypeCode"}}`, encodeURIComponent(String(requestParameters.fiscalGuestTypeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Fiscal Guest Types. <p><strong>OperationId:</strong>removeFiscalGuestTypes</p>
     * Delete Fiscal Guest Types
     */
    async removeFiscalGuestTypes(requestParameters: RemoveFiscalGuestTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFiscalGuestTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Fiscal Regions. <p><strong>OperationId:</strong>removeFiscalRegions</p>
     * Delete Fiscal Regions
     */
    async removeFiscalRegionsRaw(requestParameters: RemoveFiscalRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/fiscalRegions/{regionCode}`.replace(`{${"regionCode"}}`, encodeURIComponent(String(requestParameters.regionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Fiscal Regions. <p><strong>OperationId:</strong>removeFiscalRegions</p>
     * Delete Fiscal Regions
     */
    async removeFiscalRegions(requestParameters: RemoveFiscalRegionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFiscalRegionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Tax Offices. <p><strong>OperationId:</strong>removeTaxOffices</p>
     * Delete Tax Offices
     */
    async removeTaxOfficesRaw(requestParameters: RemoveTaxOfficesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/taxOffices/{taxOfficeId}`.replace(`{${"taxOfficeId"}}`, encodeURIComponent(String(requestParameters.taxOfficeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Tax Offices. <p><strong>OperationId:</strong>removeTaxOffices</p>
     * Delete Tax Offices
     */
    async removeTaxOffices(requestParameters: RemoveTaxOfficesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTaxOfficesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>removeTemplateCashierShiftDropLocations</p>
     * Delete Template Cashier Shift Drop Locations
     */
    async removeTemplateCashierShiftDropLocationsRaw(requestParameters: RemoveTemplateCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cashierShifts/dropLocations/{dropLocationId}`.replace(`{${"dropLocationId"}}`, encodeURIComponent(String(requestParameters.dropLocationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Template Cashier Shift Drop Locations. <p><strong>OperationId:</strong>removeTemplateCashierShiftDropLocations</p>
     * Delete Template Cashier Shift Drop Locations
     */
    async removeTemplateCashierShiftDropLocations(requestParameters: RemoveTemplateCashierShiftDropLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateCashierShiftDropLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
