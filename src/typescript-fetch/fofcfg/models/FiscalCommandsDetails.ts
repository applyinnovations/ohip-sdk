/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FiscalCommandType } from './FiscalCommandType';
import {
    FiscalCommandTypeFromJSON,
    FiscalCommandTypeFromJSONTyped,
    FiscalCommandTypeToJSON,
} from './FiscalCommandType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object for fetching Fiscal Commands.
 * @export
 * @interface FiscalCommandsDetails
 */
export interface FiscalCommandsDetails {
    /**
     * List of FiscalCommands.
     * @type {Array<FiscalCommandType>}
     * @memberof FiscalCommandsDetails
     */
    fiscalPartners?: Array<FiscalCommandType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof FiscalCommandsDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the FiscalCommandsDetails interface.
 */
export function instanceOfFiscalCommandsDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FiscalCommandsDetailsFromJSON(json: any): FiscalCommandsDetails {
    return FiscalCommandsDetailsFromJSONTyped(json, false);
}

export function FiscalCommandsDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiscalCommandsDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fiscalPartners': !exists(json, 'fiscalPartners') ? undefined : ((json['fiscalPartners'] as Array<any>).map(FiscalCommandTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function FiscalCommandsDetailsToJSON(value?: FiscalCommandsDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fiscalPartners': value.fiscalPartners === undefined ? undefined : ((value.fiscalPartners as Array<any>).map(FiscalCommandTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

