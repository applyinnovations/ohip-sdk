/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EntityType } from './EntityType';
import {
    EntityTypeFromJSON,
    EntityTypeFromJSONTyped,
    EntityTypeToJSON,
} from './EntityType';
import type { ScopeType } from './ScopeType';
import {
    ScopeTypeFromJSON,
    ScopeTypeFromJSONTyped,
    ScopeTypeToJSON,
} from './ScopeType';

/**
 * Type for the threshold elements.
 * @export
 * @interface ThresholdDetailsType
 */
export interface ThresholdDetailsType {
    /**
     * The number of quantities, counts or minutes for which transaction diversion is allowed .
     * @type {number}
     * @memberof ThresholdDetailsType
     */
    complimentary?: number;
    /**
     * 
     * @type {EntityType}
     * @memberof ThresholdDetailsType
     */
    entity?: EntityType;
    /**
     * Configuring this flag to be TRUE will make the thresholds editable.
     * @type {boolean}
     * @memberof ThresholdDetailsType
     */
    isEditable?: boolean;
    /**
     * Minimum required number of quantities, counts or minutes that must be posted.
     * @type {number}
     * @memberof ThresholdDetailsType
     */
    minRequired?: number;
    /**
     * 
     * @type {ScopeType}
     * @memberof ThresholdDetailsType
     */
    scope?: ScopeType;
}

/**
 * Check if a given object implements the ThresholdDetailsType interface.
 */
export function instanceOfThresholdDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ThresholdDetailsTypeFromJSON(json: any): ThresholdDetailsType {
    return ThresholdDetailsTypeFromJSONTyped(json, false);
}

export function ThresholdDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThresholdDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'complimentary': !exists(json, 'complimentary') ? undefined : json['complimentary'],
        'entity': !exists(json, 'entity') ? undefined : EntityTypeFromJSON(json['entity']),
        'isEditable': !exists(json, 'isEditable') ? undefined : json['isEditable'],
        'minRequired': !exists(json, 'minRequired') ? undefined : json['minRequired'],
        'scope': !exists(json, 'scope') ? undefined : ScopeTypeFromJSON(json['scope']),
    };
}

export function ThresholdDetailsTypeToJSON(value?: ThresholdDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'complimentary': value.complimentary,
        'entity': EntityTypeToJSON(value.entity),
        'isEditable': value.isEditable,
        'minRequired': value.minRequired,
        'scope': ScopeTypeToJSON(value.scope),
    };
}

