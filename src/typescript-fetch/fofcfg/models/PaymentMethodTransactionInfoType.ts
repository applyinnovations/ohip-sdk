/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PostingAmountType } from './PostingAmountType';
import {
    PostingAmountTypeFromJSON,
    PostingAmountTypeFromJSONTyped,
    PostingAmountTypeToJSON,
} from './PostingAmountType';
import type { SurchargeType } from './SurchargeType';
import {
    SurchargeTypeFromJSON,
    SurchargeTypeFromJSONTyped,
    SurchargeTypeToJSON,
} from './SurchargeType';

/**
 * Provides information about the transactions including the transaction code, group, subgroup and the posting amount.
 * @export
 * @interface PaymentMethodTransactionInfoType
 */
export interface PaymentMethodTransactionInfoType {
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodTransactionInfoType
     */
    description?: string;
    /**
     * 
     * @type {PostingAmountType}
     * @memberof PaymentMethodTransactionInfoType
     */
    postingAmount?: PostingAmountType;
    /**
     * 
     * @type {SurchargeType}
     * @memberof PaymentMethodTransactionInfoType
     */
    surcharge?: SurchargeType;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodTransactionInfoType
     */
    transactionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodTransactionInfoType
     */
    transactionDisplay?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodTransactionInfoType
     */
    transactionGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentMethodTransactionInfoType
     */
    transactionSubGroup?: string;
}

/**
 * Check if a given object implements the PaymentMethodTransactionInfoType interface.
 */
export function instanceOfPaymentMethodTransactionInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentMethodTransactionInfoTypeFromJSON(json: any): PaymentMethodTransactionInfoType {
    return PaymentMethodTransactionInfoTypeFromJSONTyped(json, false);
}

export function PaymentMethodTransactionInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodTransactionInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'postingAmount': !exists(json, 'postingAmount') ? undefined : PostingAmountTypeFromJSON(json['postingAmount']),
        'surcharge': !exists(json, 'surcharge') ? undefined : SurchargeTypeFromJSON(json['surcharge']),
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionDisplay': !exists(json, 'transactionDisplay') ? undefined : json['transactionDisplay'],
        'transactionGroup': !exists(json, 'transactionGroup') ? undefined : json['transactionGroup'],
        'transactionSubGroup': !exists(json, 'transactionSubGroup') ? undefined : json['transactionSubGroup'],
    };
}

export function PaymentMethodTransactionInfoTypeToJSON(value?: PaymentMethodTransactionInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'postingAmount': PostingAmountTypeToJSON(value.postingAmount),
        'surcharge': SurchargeTypeToJSON(value.surcharge),
        'transactionCode': value.transactionCode,
        'transactionDisplay': value.transactionDisplay,
        'transactionGroup': value.transactionGroup,
        'transactionSubGroup': value.transactionSubGroup,
    };
}

