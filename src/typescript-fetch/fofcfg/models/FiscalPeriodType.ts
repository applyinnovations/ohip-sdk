/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { YearTypeType } from './YearTypeType';
import {
    YearTypeTypeFromJSON,
    YearTypeTypeFromJSONTyped,
    YearTypeTypeToJSON,
} from './YearTypeType';

/**
 * Fiscal Period Type
 * @export
 * @interface FiscalPeriodType
 */
export interface FiscalPeriodType {
    /**
     * Resort for which the Period is defined.
     * @type {string}
     * @memberof FiscalPeriodType
     */
    hotelId?: string;
    /**
     * Id of the Year.
     * @type {number}
     * @memberof FiscalPeriodType
     */
    yearId?: number;
    /**
     * Start Date of the Period
     * @type {string}
     * @memberof FiscalPeriodType
     */
    startDate?: string;
    /**
     * Year for the current Period.
     * @type {number}
     * @memberof FiscalPeriodType
     */
    year?: number;
    /**
     * Code of the current Period.
     * @type {string}
     * @memberof FiscalPeriodType
     */
    code?: string;
    /**
     * Description of the Period.
     * @type {string}
     * @memberof FiscalPeriodType
     */
    description?: string;
    /**
     * 
     * @type {YearTypeType}
     * @memberof FiscalPeriodType
     */
    periodType?: YearTypeType;
    /**
     * End Date of the Period.
     * @type {string}
     * @memberof FiscalPeriodType
     */
    endDate?: string;
}

/**
 * Check if a given object implements the FiscalPeriodType interface.
 */
export function instanceOfFiscalPeriodType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FiscalPeriodTypeFromJSON(json: any): FiscalPeriodType {
    return FiscalPeriodTypeFromJSONTyped(json, false);
}

export function FiscalPeriodTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiscalPeriodType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'yearId': !exists(json, 'yearId') ? undefined : json['yearId'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'year': !exists(json, 'year') ? undefined : json['year'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'periodType': !exists(json, 'periodType') ? undefined : YearTypeTypeFromJSON(json['periodType']),
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
    };
}

export function FiscalPeriodTypeToJSON(value?: FiscalPeriodType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'yearId': value.yearId,
        'startDate': value.startDate,
        'year': value.year,
        'code': value.code,
        'description': value.description,
        'periodType': YearTypeTypeToJSON(value.periodType),
        'endDate': value.endDate,
    };
}

