/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MonthlyValueInfoType } from './MonthlyValueInfoType';
import {
    MonthlyValueInfoTypeFromJSON,
    MonthlyValueInfoTypeFromJSONTyped,
    MonthlyValueInfoTypeToJSON,
} from './MonthlyValueInfoType';

/**
 * Value information for a CUSTOM segment code. Holds total and monthly Value information.
 * @export
 * @interface CustomValueInfoType
 */
export interface CustomValueInfoType {
    /**
     * Total Value for CUSTOM segment code.
     * @type {number}
     * @memberof CustomValueInfoType
     */
    totalValue?: number;
    /**
     * Value information for each month for CUSTOM segment code.
     * @type {Array<MonthlyValueInfoType>}
     * @memberof CustomValueInfoType
     */
    monthlyValueInfo?: Array<MonthlyValueInfoType>;
}

/**
 * Check if a given object implements the CustomValueInfoType interface.
 */
export function instanceOfCustomValueInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomValueInfoTypeFromJSON(json: any): CustomValueInfoType {
    return CustomValueInfoTypeFromJSONTyped(json, false);
}

export function CustomValueInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomValueInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'totalValue': !exists(json, 'totalValue') ? undefined : json['totalValue'],
        'monthlyValueInfo': !exists(json, 'monthlyValueInfo') ? undefined : ((json['monthlyValueInfo'] as Array<any>).map(MonthlyValueInfoTypeFromJSON)),
    };
}

export function CustomValueInfoTypeToJSON(value?: CustomValueInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'totalValue': value.totalValue,
        'monthlyValueInfo': value.monthlyValueInfo === undefined ? undefined : ((value.monthlyValueInfo as Array<any>).map(MonthlyValueInfoTypeToJSON)),
    };
}

