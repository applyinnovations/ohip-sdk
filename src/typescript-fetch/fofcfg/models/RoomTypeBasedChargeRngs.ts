/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { RoomTypeBasedChargeRangesType } from './RoomTypeBasedChargeRangesType';
import {
    RoomTypeBasedChargeRangesTypeFromJSON,
    RoomTypeBasedChargeRangesTypeFromJSONTyped,
    RoomTypeBasedChargeRangesTypeToJSON,
} from './RoomTypeBasedChargeRangesType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Defines Room Type Based Charge Range response type.
 * @export
 * @interface RoomTypeBasedChargeRngs
 */
export interface RoomTypeBasedChargeRngs {
    /**
     * The result element containing the requested list of Room Type Based Charge Range configuration.
     * @type {Array<RoomTypeBasedChargeRangesType>}
     * @memberof RoomTypeBasedChargeRngs
     */
    roomTypeBasedChrgRanges?: Array<RoomTypeBasedChargeRangesType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof RoomTypeBasedChargeRngs
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof RoomTypeBasedChargeRngs
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the RoomTypeBasedChargeRngs interface.
 */
export function instanceOfRoomTypeBasedChargeRngs(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomTypeBasedChargeRngsFromJSON(json: any): RoomTypeBasedChargeRngs {
    return RoomTypeBasedChargeRngsFromJSONTyped(json, false);
}

export function RoomTypeBasedChargeRngsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomTypeBasedChargeRngs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'roomTypeBasedChrgRanges': !exists(json, 'roomTypeBasedChrgRanges') ? undefined : ((json['roomTypeBasedChrgRanges'] as Array<any>).map(RoomTypeBasedChargeRangesTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function RoomTypeBasedChargeRngsToJSON(value?: RoomTypeBasedChargeRngs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'roomTypeBasedChrgRanges': value.roomTypeBasedChrgRanges === undefined ? undefined : ((value.roomTypeBasedChrgRanges as Array<any>).map(RoomTypeBasedChargeRangesTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

