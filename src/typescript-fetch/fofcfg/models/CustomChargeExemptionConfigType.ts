/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Provides information about Exemptions.
 * @export
 * @interface CustomChargeExemptionConfigType
 */
export interface CustomChargeExemptionConfigType {
    /**
     * Code of the Hotel.
     * @type {string}
     * @memberof CustomChargeExemptionConfigType
     */
    hotelId?: string;
    /**
     * Exemption
     * @type {string}
     * @memberof CustomChargeExemptionConfigType
     */
    exemption?: string;
    /**
     * Exemption Desciption
     * @type {string}
     * @memberof CustomChargeExemptionConfigType
     */
    description?: string;
    /**
     * Exemption Percentage
     * @type {number}
     * @memberof CustomChargeExemptionConfigType
     */
    percentage?: number;
    /**
     * Date when this Exemption will be effective
     * @type {string}
     * @memberof CustomChargeExemptionConfigType
     */
    startDate?: string;
    /**
     * Date till the Exemption will be effective.
     * @type {string}
     * @memberof CustomChargeExemptionConfigType
     */
    endDate?: string;
    /**
     * Date when this Exemption is Inactive
     * @type {string}
     * @memberof CustomChargeExemptionConfigType
     */
    inactiveDate?: string;
    /**
     * Indicator that tells whether to include inactive Custom Charge Ememptions.
     * @type {boolean}
     * @memberof CustomChargeExemptionConfigType
     */
    includeInactive?: boolean;
    /**
     * Flag specifying if custom charge exemptions is property level or not.
     * @type {boolean}
     * @memberof CustomChargeExemptionConfigType
     */
    propertyExemption?: boolean;
}

/**
 * Check if a given object implements the CustomChargeExemptionConfigType interface.
 */
export function instanceOfCustomChargeExemptionConfigType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomChargeExemptionConfigTypeFromJSON(json: any): CustomChargeExemptionConfigType {
    return CustomChargeExemptionConfigTypeFromJSONTyped(json, false);
}

export function CustomChargeExemptionConfigTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomChargeExemptionConfigType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'exemption': !exists(json, 'exemption') ? undefined : json['exemption'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'percentage': !exists(json, 'percentage') ? undefined : json['percentage'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'inactiveDate': !exists(json, 'inactiveDate') ? undefined : json['inactiveDate'],
        'includeInactive': !exists(json, 'includeInactive') ? undefined : json['includeInactive'],
        'propertyExemption': !exists(json, 'propertyExemption') ? undefined : json['propertyExemption'],
    };
}

export function CustomChargeExemptionConfigTypeToJSON(value?: CustomChargeExemptionConfigType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'exemption': value.exemption,
        'description': value.description,
        'percentage': value.percentage,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'inactiveDate': value.inactiveDate,
        'includeInactive': value.includeInactive,
        'propertyExemption': value.propertyExemption,
    };
}

