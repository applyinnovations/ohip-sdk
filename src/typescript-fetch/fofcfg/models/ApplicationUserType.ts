/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Information to uniquely identify an application user
 * @export
 * @interface ApplicationUserType
 */
export interface ApplicationUserType {
    /**
     * Name of the application user
     * @type {string}
     * @memberof ApplicationUserType
     */
    appUser?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ApplicationUserType
     */
    appUserId?: UniqueIDType;
}

/**
 * Check if a given object implements the ApplicationUserType interface.
 */
export function instanceOfApplicationUserType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationUserTypeFromJSON(json: any): ApplicationUserType {
    return ApplicationUserTypeFromJSONTyped(json, false);
}

export function ApplicationUserTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationUserType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appUser': !exists(json, 'appUser') ? undefined : json['appUser'],
        'appUserId': !exists(json, 'appUserId') ? undefined : UniqueIDTypeFromJSON(json['appUserId']),
    };
}

export function ApplicationUserTypeToJSON(value?: ApplicationUserType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appUser': value.appUser,
        'appUserId': UniqueIDTypeToJSON(value.appUserId),
    };
}

