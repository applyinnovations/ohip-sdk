/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateCodeInformationType } from './RateCodeInformationType';
import {
    RateCodeInformationTypeFromJSON,
    RateCodeInformationTypeFromJSONTyped,
    RateCodeInformationTypeToJSON,
} from './RateCodeInformationType';
import type { RateCodeTotalInformationType } from './RateCodeTotalInformationType';
import {
    RateCodeTotalInformationTypeFromJSON,
    RateCodeTotalInformationTypeFromJSONTyped,
    RateCodeTotalInformationTypeToJSON,
} from './RateCodeTotalInformationType';

/**
 * Budget Forecast information for budget segment codes.
 * @export
 * @interface BudgetForecastRateInfoType
 */
export interface BudgetForecastRateInfoType {
    /**
     * Budget Forecast totals information for Rate segment.
     * @type {Array<RateCodeInformationType>}
     * @memberof BudgetForecastRateInfoType
     */
    rateCodeInformation?: Array<RateCodeInformationType>;
    /**
     * 
     * @type {RateCodeTotalInformationType}
     * @memberof BudgetForecastRateInfoType
     */
    rateCodeTotalInformation?: RateCodeTotalInformationType;
}

/**
 * Check if a given object implements the BudgetForecastRateInfoType interface.
 */
export function instanceOfBudgetForecastRateInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BudgetForecastRateInfoTypeFromJSON(json: any): BudgetForecastRateInfoType {
    return BudgetForecastRateInfoTypeFromJSONTyped(json, false);
}

export function BudgetForecastRateInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BudgetForecastRateInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rateCodeInformation': !exists(json, 'rateCodeInformation') ? undefined : ((json['rateCodeInformation'] as Array<any>).map(RateCodeInformationTypeFromJSON)),
        'rateCodeTotalInformation': !exists(json, 'rateCodeTotalInformation') ? undefined : RateCodeTotalInformationTypeFromJSON(json['rateCodeTotalInformation']),
    };
}

export function BudgetForecastRateInfoTypeToJSON(value?: BudgetForecastRateInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rateCodeInformation': value.rateCodeInformation === undefined ? undefined : ((value.rateCodeInformation as Array<any>).map(RateCodeInformationTypeToJSON)),
        'rateCodeTotalInformation': RateCodeTotalInformationTypeToJSON(value.rateCodeTotalInformation),
    };
}

