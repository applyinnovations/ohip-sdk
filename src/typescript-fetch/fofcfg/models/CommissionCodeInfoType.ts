/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CommissionCalculationType } from './CommissionCalculationType';
import {
    CommissionCalculationTypeFromJSON,
    CommissionCalculationTypeFromJSONTyped,
    CommissionCalculationTypeToJSON,
} from './CommissionCalculationType';
import type { CommissionCodeHoldStatusType } from './CommissionCodeHoldStatusType';
import {
    CommissionCodeHoldStatusTypeFromJSON,
    CommissionCodeHoldStatusTypeFromJSONTyped,
    CommissionCodeHoldStatusTypeToJSON,
} from './CommissionCodeHoldStatusType';
import type { CommissionPaidDetailsType } from './CommissionPaidDetailsType';
import {
    CommissionPaidDetailsTypeFromJSON,
    CommissionPaidDetailsTypeFromJSONTyped,
    CommissionPaidDetailsTypeToJSON,
} from './CommissionPaidDetailsType';

/**
 * Commission code info.
 * @export
 * @interface CommissionCodeInfoType
 */
export interface CommissionCodeInfoType {
    /**
     * 
     * @type {CommissionCalculationType}
     * @memberof CommissionCodeInfoType
     */
    commissionCalculation?: CommissionCalculationType;
    /**
     * Commission code for which details are fetched.
     * @type {string}
     * @memberof CommissionCodeInfoType
     */
    commissionCode?: string;
    /**
     * 
     * @type {CommissionCodeHoldStatusType}
     * @memberof CommissionCodeInfoType
     */
    commissionCodeHoldStatus?: CommissionCodeHoldStatusType;
    /**
     * Commission code description for which details are fetched.
     * @type {string}
     * @memberof CommissionCodeInfoType
     */
    description?: string;
    /**
     * Property of the commission codes.
     * @type {string}
     * @memberof CommissionCodeInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {CommissionPaidDetailsType}
     * @memberof CommissionCodeInfoType
     */
    reservationHistoryRecords?: CommissionPaidDetailsType;
    /**
     * Commission code sequence number.
     * @type {number}
     * @memberof CommissionCodeInfoType
     */
    sequence?: number;
    /**
     * Commission paid Tax details.
     * @type {number}
     * @memberof CommissionCodeInfoType
     */
    taxPercentage?: number;
}

/**
 * Check if a given object implements the CommissionCodeInfoType interface.
 */
export function instanceOfCommissionCodeInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CommissionCodeInfoTypeFromJSON(json: any): CommissionCodeInfoType {
    return CommissionCodeInfoTypeFromJSONTyped(json, false);
}

export function CommissionCodeInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommissionCodeInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'commissionCalculation': !exists(json, 'commissionCalculation') ? undefined : CommissionCalculationTypeFromJSON(json['commissionCalculation']),
        'commissionCode': !exists(json, 'commissionCode') ? undefined : json['commissionCode'],
        'commissionCodeHoldStatus': !exists(json, 'commissionCodeHoldStatus') ? undefined : CommissionCodeHoldStatusTypeFromJSON(json['commissionCodeHoldStatus']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationHistoryRecords': !exists(json, 'reservationHistoryRecords') ? undefined : CommissionPaidDetailsTypeFromJSON(json['reservationHistoryRecords']),
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'taxPercentage': !exists(json, 'taxPercentage') ? undefined : json['taxPercentage'],
    };
}

export function CommissionCodeInfoTypeToJSON(value?: CommissionCodeInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'commissionCalculation': CommissionCalculationTypeToJSON(value.commissionCalculation),
        'commissionCode': value.commissionCode,
        'commissionCodeHoldStatus': CommissionCodeHoldStatusTypeToJSON(value.commissionCodeHoldStatus),
        'description': value.description,
        'hotelId': value.hotelId,
        'reservationHistoryRecords': CommissionPaidDetailsTypeToJSON(value.reservationHistoryRecords),
        'sequence': value.sequence,
        'taxPercentage': value.taxPercentage,
    };
}

