/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdvanceCheckInType } from './AdvanceCheckInType';
import {
    AdvanceCheckInTypeFromJSON,
    AdvanceCheckInTypeFromJSONTyped,
    AdvanceCheckInTypeToJSON,
} from './AdvanceCheckInType';
import type { CommissionPayoutToType } from './CommissionPayoutToType';
import {
    CommissionPayoutToTypeFromJSON,
    CommissionPayoutToTypeFromJSONTyped,
    CommissionPayoutToTypeToJSON,
} from './CommissionPayoutToType';
import type { ExternalReferencesType } from './ExternalReferencesType';
import {
    ExternalReferencesTypeFromJSON,
    ExternalReferencesTypeFromJSONTyped,
    ExternalReferencesTypeToJSON,
} from './ExternalReferencesType';
import type { HousekeepingRoomStatusType } from './HousekeepingRoomStatusType';
import {
    HousekeepingRoomStatusTypeFromJSON,
    HousekeepingRoomStatusTypeFromJSONTyped,
    HousekeepingRoomStatusTypeToJSON,
} from './HousekeepingRoomStatusType';
import type { IndicatorsType } from './IndicatorsType';
import {
    IndicatorsTypeFromJSON,
    IndicatorsTypeFromJSONTyped,
    IndicatorsTypeToJSON,
} from './IndicatorsType';
import type { PMSResStatusType } from './PMSResStatusType';
import {
    PMSResStatusTypeFromJSON,
    PMSResStatusTypeFromJSONTyped,
    PMSResStatusTypeToJSON,
} from './PMSResStatusType';
import type { ResAccessRestrictionType } from './ResAccessRestrictionType';
import {
    ResAccessRestrictionTypeFromJSON,
    ResAccessRestrictionTypeFromJSONTyped,
    ResAccessRestrictionTypeToJSON,
} from './ResAccessRestrictionType';
import type { ResAttachedProfileListType } from './ResAttachedProfileListType';
import {
    ResAttachedProfileListTypeFromJSON,
    ResAttachedProfileListTypeFromJSONTyped,
    ResAttachedProfileListTypeToJSON,
} from './ResAttachedProfileListType';
import type { ResCashieringType } from './ResCashieringType';
import {
    ResCashieringTypeFromJSON,
    ResCashieringTypeFromJSONTyped,
    ResCashieringTypeToJSON,
} from './ResCashieringType';
import type { ResCommunicationType } from './ResCommunicationType';
import {
    ResCommunicationTypeFromJSON,
    ResCommunicationTypeFromJSONTyped,
    ResCommunicationTypeToJSON,
} from './ResCommunicationType';
import type { ResGuestInfoType } from './ResGuestInfoType';
import {
    ResGuestInfoTypeFromJSON,
    ResGuestInfoTypeFromJSONTyped,
    ResGuestInfoTypeToJSON,
} from './ResGuestInfoType';
import type { ResHousekeepingType } from './ResHousekeepingType';
import {
    ResHousekeepingTypeFromJSON,
    ResHousekeepingTypeFromJSONTyped,
    ResHousekeepingTypeToJSON,
} from './ResHousekeepingType';
import type { ResMobileNotificationsType } from './ResMobileNotificationsType';
import {
    ResMobileNotificationsTypeFromJSON,
    ResMobileNotificationsTypeFromJSONTyped,
    ResMobileNotificationsTypeToJSON,
} from './ResMobileNotificationsType';
import type { ResRevenueBalanceType } from './ResRevenueBalanceType';
import {
    ResRevenueBalanceTypeFromJSON,
    ResRevenueBalanceTypeFromJSONTyped,
    ResRevenueBalanceTypeToJSON,
} from './ResRevenueBalanceType';
import type { ResSharedGuestListType } from './ResSharedGuestListType';
import {
    ResSharedGuestListTypeFromJSON,
    ResSharedGuestListTypeFromJSONTyped,
    ResSharedGuestListTypeToJSON,
} from './ResSharedGuestListType';
import type { ReservationAllowedActionsType } from './ReservationAllowedActionsType';
import {
    ReservationAllowedActionsTypeFromJSON,
    ReservationAllowedActionsTypeFromJSONTyped,
    ReservationAllowedActionsTypeToJSON,
} from './ReservationAllowedActionsType';
import type { ReservationDepositType } from './ReservationDepositType';
import {
    ReservationDepositTypeFromJSON,
    ReservationDepositTypeFromJSONTyped,
    ReservationDepositTypeToJSON,
} from './ReservationDepositType';
import type { ReservationFolioWindowsType } from './ReservationFolioWindowsType';
import {
    ReservationFolioWindowsTypeFromJSON,
    ReservationFolioWindowsTypeFromJSONTyped,
    ReservationFolioWindowsTypeToJSON,
} from './ReservationFolioWindowsType';
import type { ReservationIdList } from './ReservationIdList';
import {
    ReservationIdListFromJSON,
    ReservationIdListFromJSONTyped,
    ReservationIdListToJSON,
} from './ReservationIdList';
import type { ReservationInfoTypeCancellationInfo } from './ReservationInfoTypeCancellationInfo';
import {
    ReservationInfoTypeCancellationInfoFromJSON,
    ReservationInfoTypeCancellationInfoFromJSONTyped,
    ReservationInfoTypeCancellationInfoToJSON,
} from './ReservationInfoTypeCancellationInfo';
import type { ReservationInterfaceStatusType } from './ReservationInterfaceStatusType';
import {
    ReservationInterfaceStatusTypeFromJSON,
    ReservationInterfaceStatusTypeFromJSONTyped,
    ReservationInterfaceStatusTypeToJSON,
} from './ReservationInterfaceStatusType';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { ReservationQueueInformationType } from './ReservationQueueInformationType';
import {
    ReservationQueueInformationTypeFromJSON,
    ReservationQueueInformationTypeFromJSONTyped,
    ReservationQueueInformationTypeToJSON,
} from './ReservationQueueInformationType';
import type { ReservationTurndownInfoType } from './ReservationTurndownInfoType';
import {
    ReservationTurndownInfoTypeFromJSON,
    ReservationTurndownInfoTypeFromJSONTyped,
    ReservationTurndownInfoTypeToJSON,
} from './ReservationTurndownInfoType';
import type { SearchMatchesType } from './SearchMatchesType';
import {
    SearchMatchesTypeFromJSON,
    SearchMatchesTypeFromJSONTyped,
    SearchMatchesTypeToJSON,
} from './SearchMatchesType';
import type { SourceOfSaleType } from './SourceOfSaleType';
import {
    SourceOfSaleTypeFromJSON,
    SourceOfSaleTypeFromJSONTyped,
    SourceOfSaleTypeToJSON,
} from './SourceOfSaleType';
import type { StayInfoType } from './StayInfoType';
import {
    StayInfoTypeFromJSON,
    StayInfoTypeFromJSONTyped,
    StayInfoTypeToJSON,
} from './StayInfoType';
import type { TaxTypeType } from './TaxTypeType';
import {
    TaxTypeTypeFromJSON,
    TaxTypeTypeFromJSONTyped,
    TaxTypeTypeToJSON,
} from './TaxTypeType';
import type { WaitlistResType } from './WaitlistResType';
import {
    WaitlistResTypeFromJSON,
    WaitlistResTypeFromJSONTyped,
    WaitlistResTypeToJSON,
} from './WaitlistResType';

/**
 * The Reservation class contains the current reservation being created or altered.
 * @export
 * @interface ReservationInfoType
 */
export interface ReservationInfoType {
    /**
     * 
     * @type {ResAccessRestrictionType}
     * @memberof ReservationInfoType
     */
    accessRestriction?: ResAccessRestrictionType;
    /**
     * 
     * @type {AdvanceCheckInType}
     * @memberof ReservationInfoType
     */
    advanceCheckIn?: AdvanceCheckInType;
    /**
     * Flag containing true or false value for reservation to be eligible for self-checkout by guest using mobile device . Pass the 'true' or 'false' values when creating / modifying reservation to indicate whether a reservation is eligible for mobile checkout yes / no. Upon fetch, the current state of the flag will show true or false.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    allowMobileCheckout?: boolean;
    /**
     * Attribute AllowMobileViewFolio is set to true when the reservation is eligible for viewing folio using mobile device.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    allowMobileViewFolio?: boolean;
    /**
     * 
     * @type {ReservationAllowedActionsType}
     * @memberof ReservationInfoType
     */
    allowedActions?: ReservationAllowedActionsType;
    /**
     * 
     * @type {ResAttachedProfileListType}
     * @memberof ReservationInfoType
     */
    attachedProfiles?: ResAttachedProfileListType;
    /**
     * 
     * @type {ReservationInfoTypeCancellationInfo}
     * @memberof ReservationInfoType
     */
    cancellationInfo?: ReservationInfoTypeCancellationInfo;
    /**
     * 
     * @type {ResCashieringType}
     * @memberof ReservationInfoType
     */
    cashiering?: ResCashieringType;
    /**
     * 
     * @type {CommissionPayoutToType}
     * @memberof ReservationInfoType
     */
    commissionPayoutTo?: CommissionPayoutToType;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof ReservationInfoType
     */
    computedReservationStatus?: PMSResStatusType;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof ReservationInfoType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof ReservationInfoType
     */
    creatorId?: string;
    /**
     * 
     * @type {ReservationDepositType}
     * @memberof ReservationInfoType
     */
    deposit?: ReservationDepositType;
    /**
     * Color setting of the reservation.
     * @type {string}
     * @memberof ReservationInfoType
     */
    displayColor?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationInfoType
     */
    expectedServiceTime?: string;
    /**
     * 
     * @type {ExternalReferencesType}
     * @memberof ReservationInfoType
     */
    externalReferences?: ExternalReferencesType;
    /**
     * Currency code preferred by guest.
     * @type {string}
     * @memberof ReservationInfoType
     */
    guestPreferredCurrency?: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationInfoType
     */
    hotelId?: string;
    /**
     * Collection of Hotel Interfaces and rights, this is populated only when fetching interface status for rooms.
     * @type {Array<ReservationInterfaceStatusType>}
     * @memberof ReservationInfoType
     */
    hotelInterfaceStatusList?: Array<ReservationInterfaceStatusType>;
    /**
     * 
     * @type {string}
     * @memberof ReservationInfoType
     */
    hotelName?: string;
    /**
     * 
     * @type {ResHousekeepingType}
     * @memberof ReservationInfoType
     */
    housekeeping?: ResHousekeepingType;
    /**
     * Number of keys created for the reservation.
     * @type {number}
     * @memberof ReservationInfoType
     */
    keyCount?: number;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof ReservationInfoType
     */
    lastModifierId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof ReservationInfoType
     */
    lastModifyDateTime?: string;
    /**
     * Last Privacy Prompt Date
     * @type {Date}
     * @memberof ReservationInfoType
     */
    lastPrivacyPromptDate?: Date;
    /**
     * 
     * @type {ResMobileNotificationsType}
     * @memberof ReservationInfoType
     */
    mobileNotifications?: ResMobileNotificationsType;
    /**
     * Returns true when reservation has an open folio.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    openFolio?: boolean;
    /**
     * Attribute OptedForCommunication is set to true when the guest has opted for receiving communicationsl related to the reservation.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    optedForCommunication?: boolean;
    /**
     * Payment Method.
     * @type {string}
     * @memberof ReservationInfoType
     */
    paymentMethod?: string;
    /**
     * Defines if the reservation is pre-registered or not.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    preRegistered?: boolean;
    /**
     * Date an item will be purged from a database (e.g., from a live database to an archive).
     * @type {Date}
     * @memberof ReservationInfoType
     */
    purgeDate?: Date;
    /**
     * 
     * @type {ReservationQueueInformationType}
     * @memberof ReservationInfoType
     */
    queue?: ReservationQueueInformationType;
    /**
     * 
     * @type {ResCommunicationType}
     * @memberof ReservationInfoType
     */
    reservationCommunication?: ResCommunicationType;
    /**
     * 
     * @type {ReservationFolioWindowsType}
     * @memberof ReservationInfoType
     */
    reservationFolioWindows?: ReservationFolioWindowsType;
    /**
     * 
     * @type {ResGuestInfoType}
     * @memberof ReservationInfoType
     */
    reservationGuest?: ResGuestInfoType;
    /**
     * 
     * @type {ReservationIdList}
     * @memberof ReservationInfoType
     */
    reservationIdList?: ReservationIdList;
    /**
     * 
     * @type {IndicatorsType}
     * @memberof ReservationInfoType
     */
    reservationIndicators?: IndicatorsType;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof ReservationInfoType
     */
    reservationPaymentMethod?: ReservationPaymentMethodType;
    /**
     * 
     * @type {PMSResStatusType}
     * @memberof ReservationInfoType
     */
    reservationStatus?: PMSResStatusType;
    /**
     * 
     * @type {ResRevenueBalanceType}
     * @memberof ReservationInfoType
     */
    revenuesAndBalances?: ResRevenueBalanceType;
    /**
     * 
     * @type {HousekeepingRoomStatusType}
     * @memberof ReservationInfoType
     */
    roomStatus?: HousekeepingRoomStatusType;
    /**
     * 
     * @type {StayInfoType}
     * @memberof ReservationInfoType
     */
    roomStay?: StayInfoType;
    /**
     * Boolean True if this reservation is reserving rooms. False if it is only reserving services.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    roomStayReservation?: boolean;
    /**
     * 
     * @type {SearchMatchesType}
     * @memberof ReservationInfoType
     */
    searchMatches?: SearchMatchesType;
    /**
     * 
     * @type {ResSharedGuestListType}
     * @memberof ReservationInfoType
     */
    sharedGuests?: ResSharedGuestListType;
    /**
     * 
     * @type {SourceOfSaleType}
     * @memberof ReservationInfoType
     */
    sourceOfSale?: SourceOfSaleType;
    /**
     * Set of reservation preferences which belongs to the Specials group.
     * @type {string}
     * @memberof ReservationInfoType
     */
    specials?: string;
    /**
     * 
     * @type {TaxTypeType}
     * @memberof ReservationInfoType
     */
    taxType?: TaxTypeType;
    /**
     * 
     * @type {ReservationTurndownInfoType}
     * @memberof ReservationInfoType
     */
    turndownInfo?: ReservationTurndownInfoType;
    /**
     * 
     * @type {WaitlistResType}
     * @memberof ReservationInfoType
     */
    waitlist?: WaitlistResType;
    /**
     * When true, indicates the reservation is for a guest that walks-in without a reservation. When false, the reservation is not a walk-in.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    walkInIndicator?: boolean;
    /**
     * This flag will determine wheather the reservation is eligible for Welcome Offer or not.
     * @type {boolean}
     * @memberof ReservationInfoType
     */
    welcomeOffer?: boolean;
}

/**
 * Check if a given object implements the ReservationInfoType interface.
 */
export function instanceOfReservationInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationInfoTypeFromJSON(json: any): ReservationInfoType {
    return ReservationInfoTypeFromJSONTyped(json, false);
}

export function ReservationInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessRestriction': !exists(json, 'accessRestriction') ? undefined : ResAccessRestrictionTypeFromJSON(json['accessRestriction']),
        'advanceCheckIn': !exists(json, 'advanceCheckIn') ? undefined : AdvanceCheckInTypeFromJSON(json['advanceCheckIn']),
        'allowMobileCheckout': !exists(json, 'allowMobileCheckout') ? undefined : json['allowMobileCheckout'],
        'allowMobileViewFolio': !exists(json, 'allowMobileViewFolio') ? undefined : json['allowMobileViewFolio'],
        'allowedActions': !exists(json, 'allowedActions') ? undefined : ReservationAllowedActionsTypeFromJSON(json['allowedActions']),
        'attachedProfiles': !exists(json, 'attachedProfiles') ? undefined : ResAttachedProfileListTypeFromJSON(json['attachedProfiles']),
        'cancellationInfo': !exists(json, 'cancellationInfo') ? undefined : ReservationInfoTypeCancellationInfoFromJSON(json['cancellationInfo']),
        'cashiering': !exists(json, 'cashiering') ? undefined : ResCashieringTypeFromJSON(json['cashiering']),
        'commissionPayoutTo': !exists(json, 'commissionPayoutTo') ? undefined : CommissionPayoutToTypeFromJSON(json['commissionPayoutTo']),
        'computedReservationStatus': !exists(json, 'computedReservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['computedReservationStatus']),
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'deposit': !exists(json, 'deposit') ? undefined : ReservationDepositTypeFromJSON(json['deposit']),
        'displayColor': !exists(json, 'displayColor') ? undefined : json['displayColor'],
        'expectedServiceTime': !exists(json, 'expectedServiceTime') ? undefined : json['expectedServiceTime'],
        'externalReferences': !exists(json, 'externalReferences') ? undefined : ExternalReferencesTypeFromJSON(json['externalReferences']),
        'guestPreferredCurrency': !exists(json, 'guestPreferredCurrency') ? undefined : json['guestPreferredCurrency'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'hotelInterfaceStatusList': !exists(json, 'hotelInterfaceStatusList') ? undefined : ((json['hotelInterfaceStatusList'] as Array<any>).map(ReservationInterfaceStatusTypeFromJSON)),
        'hotelName': !exists(json, 'hotelName') ? undefined : json['hotelName'],
        'housekeeping': !exists(json, 'housekeeping') ? undefined : ResHousekeepingTypeFromJSON(json['housekeeping']),
        'keyCount': !exists(json, 'keyCount') ? undefined : json['keyCount'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastPrivacyPromptDate': !exists(json, 'lastPrivacyPromptDate') ? undefined : (new Date(json['lastPrivacyPromptDate'])),
        'mobileNotifications': !exists(json, 'mobileNotifications') ? undefined : ResMobileNotificationsTypeFromJSON(json['mobileNotifications']),
        'openFolio': !exists(json, 'openFolio') ? undefined : json['openFolio'],
        'optedForCommunication': !exists(json, 'optedForCommunication') ? undefined : json['optedForCommunication'],
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : json['paymentMethod'],
        'preRegistered': !exists(json, 'preRegistered') ? undefined : json['preRegistered'],
        'purgeDate': !exists(json, 'purgeDate') ? undefined : (new Date(json['purgeDate'])),
        'queue': !exists(json, 'queue') ? undefined : ReservationQueueInformationTypeFromJSON(json['queue']),
        'reservationCommunication': !exists(json, 'reservationCommunication') ? undefined : ResCommunicationTypeFromJSON(json['reservationCommunication']),
        'reservationFolioWindows': !exists(json, 'reservationFolioWindows') ? undefined : ReservationFolioWindowsTypeFromJSON(json['reservationFolioWindows']),
        'reservationGuest': !exists(json, 'reservationGuest') ? undefined : ResGuestInfoTypeFromJSON(json['reservationGuest']),
        'reservationIdList': !exists(json, 'reservationIdList') ? undefined : ReservationIdListFromJSON(json['reservationIdList']),
        'reservationIndicators': !exists(json, 'reservationIndicators') ? undefined : IndicatorsTypeFromJSON(json['reservationIndicators']),
        'reservationPaymentMethod': !exists(json, 'reservationPaymentMethod') ? undefined : ReservationPaymentMethodTypeFromJSON(json['reservationPaymentMethod']),
        'reservationStatus': !exists(json, 'reservationStatus') ? undefined : PMSResStatusTypeFromJSON(json['reservationStatus']),
        'revenuesAndBalances': !exists(json, 'revenuesAndBalances') ? undefined : ResRevenueBalanceTypeFromJSON(json['revenuesAndBalances']),
        'roomStatus': !exists(json, 'roomStatus') ? undefined : HousekeepingRoomStatusTypeFromJSON(json['roomStatus']),
        'roomStay': !exists(json, 'roomStay') ? undefined : StayInfoTypeFromJSON(json['roomStay']),
        'roomStayReservation': !exists(json, 'roomStayReservation') ? undefined : json['roomStayReservation'],
        'searchMatches': !exists(json, 'searchMatches') ? undefined : SearchMatchesTypeFromJSON(json['searchMatches']),
        'sharedGuests': !exists(json, 'sharedGuests') ? undefined : ResSharedGuestListTypeFromJSON(json['sharedGuests']),
        'sourceOfSale': !exists(json, 'sourceOfSale') ? undefined : SourceOfSaleTypeFromJSON(json['sourceOfSale']),
        'specials': !exists(json, 'specials') ? undefined : json['specials'],
        'taxType': !exists(json, 'taxType') ? undefined : TaxTypeTypeFromJSON(json['taxType']),
        'turndownInfo': !exists(json, 'turndownInfo') ? undefined : ReservationTurndownInfoTypeFromJSON(json['turndownInfo']),
        'waitlist': !exists(json, 'waitlist') ? undefined : WaitlistResTypeFromJSON(json['waitlist']),
        'walkInIndicator': !exists(json, 'walkInIndicator') ? undefined : json['walkInIndicator'],
        'welcomeOffer': !exists(json, 'welcomeOffer') ? undefined : json['welcomeOffer'],
    };
}

export function ReservationInfoTypeToJSON(value?: ReservationInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessRestriction': ResAccessRestrictionTypeToJSON(value.accessRestriction),
        'advanceCheckIn': AdvanceCheckInTypeToJSON(value.advanceCheckIn),
        'allowMobileCheckout': value.allowMobileCheckout,
        'allowMobileViewFolio': value.allowMobileViewFolio,
        'allowedActions': ReservationAllowedActionsTypeToJSON(value.allowedActions),
        'attachedProfiles': ResAttachedProfileListTypeToJSON(value.attachedProfiles),
        'cancellationInfo': ReservationInfoTypeCancellationInfoToJSON(value.cancellationInfo),
        'cashiering': ResCashieringTypeToJSON(value.cashiering),
        'commissionPayoutTo': CommissionPayoutToTypeToJSON(value.commissionPayoutTo),
        'computedReservationStatus': PMSResStatusTypeToJSON(value.computedReservationStatus),
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'deposit': ReservationDepositTypeToJSON(value.deposit),
        'displayColor': value.displayColor,
        'expectedServiceTime': value.expectedServiceTime,
        'externalReferences': ExternalReferencesTypeToJSON(value.externalReferences),
        'guestPreferredCurrency': value.guestPreferredCurrency,
        'hotelId': value.hotelId,
        'hotelInterfaceStatusList': value.hotelInterfaceStatusList === undefined ? undefined : ((value.hotelInterfaceStatusList as Array<any>).map(ReservationInterfaceStatusTypeToJSON)),
        'hotelName': value.hotelName,
        'housekeeping': ResHousekeepingTypeToJSON(value.housekeeping),
        'keyCount': value.keyCount,
        'lastModifierId': value.lastModifierId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastPrivacyPromptDate': value.lastPrivacyPromptDate === undefined ? undefined : (value.lastPrivacyPromptDate.toISOString().substring(0,10)),
        'mobileNotifications': ResMobileNotificationsTypeToJSON(value.mobileNotifications),
        'openFolio': value.openFolio,
        'optedForCommunication': value.optedForCommunication,
        'paymentMethod': value.paymentMethod,
        'preRegistered': value.preRegistered,
        'purgeDate': value.purgeDate === undefined ? undefined : (value.purgeDate.toISOString().substring(0,10)),
        'queue': ReservationQueueInformationTypeToJSON(value.queue),
        'reservationCommunication': ResCommunicationTypeToJSON(value.reservationCommunication),
        'reservationFolioWindows': ReservationFolioWindowsTypeToJSON(value.reservationFolioWindows),
        'reservationGuest': ResGuestInfoTypeToJSON(value.reservationGuest),
        'reservationIdList': ReservationIdListToJSON(value.reservationIdList),
        'reservationIndicators': IndicatorsTypeToJSON(value.reservationIndicators),
        'reservationPaymentMethod': ReservationPaymentMethodTypeToJSON(value.reservationPaymentMethod),
        'reservationStatus': PMSResStatusTypeToJSON(value.reservationStatus),
        'revenuesAndBalances': ResRevenueBalanceTypeToJSON(value.revenuesAndBalances),
        'roomStatus': HousekeepingRoomStatusTypeToJSON(value.roomStatus),
        'roomStay': StayInfoTypeToJSON(value.roomStay),
        'roomStayReservation': value.roomStayReservation,
        'searchMatches': SearchMatchesTypeToJSON(value.searchMatches),
        'sharedGuests': ResSharedGuestListTypeToJSON(value.sharedGuests),
        'sourceOfSale': SourceOfSaleTypeToJSON(value.sourceOfSale),
        'specials': value.specials,
        'taxType': TaxTypeTypeToJSON(value.taxType),
        'turndownInfo': ReservationTurndownInfoTypeToJSON(value.turndownInfo),
        'waitlist': WaitlistResTypeToJSON(value.waitlist),
        'walkInIndicator': value.walkInIndicator,
        'welcomeOffer': value.welcomeOffer,
    };
}

