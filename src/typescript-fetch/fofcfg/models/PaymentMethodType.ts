/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CalculatePointsType } from './CalculatePointsType';
import {
    CalculatePointsTypeFromJSON,
    CalculatePointsTypeFromJSONTyped,
    CalculatePointsTypeToJSON,
} from './CalculatePointsType';
import type { CreditLimitType } from './CreditLimitType';
import {
    CreditLimitTypeFromJSON,
    CreditLimitTypeFromJSONTyped,
    CreditLimitTypeToJSON,
} from './CreditLimitType';
import type { PaymentCardType } from './PaymentCardType';
import {
    PaymentCardTypeFromJSON,
    PaymentCardTypeFromJSONTyped,
    PaymentCardTypeToJSON,
} from './PaymentCardType';
import type { PaymentMethodTransactionInfoType } from './PaymentMethodTransactionInfoType';
import {
    PaymentMethodTransactionInfoTypeFromJSON,
    PaymentMethodTransactionInfoTypeFromJSONTyped,
    PaymentMethodTransactionInfoTypeToJSON,
} from './PaymentMethodTransactionInfoType';
import type { PaymentMethodUsageType } from './PaymentMethodUsageType';
import {
    PaymentMethodUsageTypeFromJSON,
    PaymentMethodUsageTypeFromJSONTyped,
    PaymentMethodUsageTypeToJSON,
} from './PaymentMethodUsageType';

/**
 * Provides information about the payment methods. CreditCardCode and CreditCardType help to determine if EFTs are allowed.
 * @export
 * @interface PaymentMethodType
 */
export interface PaymentMethodType {
    /**
     * 
     * @type {CalculatePointsType}
     * @memberof PaymentMethodType
     */
    calculatePoints?: CalculatePointsType;
    /**
     * 
     * @type {CreditLimitType}
     * @memberof PaymentMethodType
     */
    creditLimit?: CreditLimitType;
    /**
     * Description of the payment method.
     * @type {string}
     * @memberof PaymentMethodType
     */
    description?: string;
    /**
     * Property from which the payment method belongs to.
     * @type {string}
     * @memberof PaymentMethodType
     */
    hotelId?: string;
    /**
     * Indicates whether the payment method is inactive or not.
     * @type {boolean}
     * @memberof PaymentMethodType
     */
    inactive?: boolean;
    /**
     * Display Order sequence.
     * @type {number}
     * @memberof PaymentMethodType
     */
    orderSequence?: number;
    /**
     * 
     * @type {PaymentCardType}
     * @memberof PaymentMethodType
     */
    paymentCard?: PaymentCardType;
    /**
     * Defines the unique identifier for this payment method.
     * @type {string}
     * @memberof PaymentMethodType
     */
    paymentMethod?: string;
    /**
     * 
     * @type {PaymentMethodTransactionInfoType}
     * @memberof PaymentMethodType
     */
    paymentMethodTransactionInfo?: PaymentMethodTransactionInfoType;
    /**
     * 
     * @type {PaymentMethodUsageType}
     * @memberof PaymentMethodType
     */
    paymentMethodUsage?: PaymentMethodUsageType;
}

/**
 * Check if a given object implements the PaymentMethodType interface.
 */
export function instanceOfPaymentMethodType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentMethodTypeFromJSON(json: any): PaymentMethodType {
    return PaymentMethodTypeFromJSONTyped(json, false);
}

export function PaymentMethodTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'calculatePoints': !exists(json, 'calculatePoints') ? undefined : CalculatePointsTypeFromJSON(json['calculatePoints']),
        'creditLimit': !exists(json, 'creditLimit') ? undefined : CreditLimitTypeFromJSON(json['creditLimit']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'orderSequence': !exists(json, 'orderSequence') ? undefined : json['orderSequence'],
        'paymentCard': !exists(json, 'paymentCard') ? undefined : PaymentCardTypeFromJSON(json['paymentCard']),
        'paymentMethod': !exists(json, 'paymentMethod') ? undefined : json['paymentMethod'],
        'paymentMethodTransactionInfo': !exists(json, 'paymentMethodTransactionInfo') ? undefined : PaymentMethodTransactionInfoTypeFromJSON(json['paymentMethodTransactionInfo']),
        'paymentMethodUsage': !exists(json, 'paymentMethodUsage') ? undefined : PaymentMethodUsageTypeFromJSON(json['paymentMethodUsage']),
    };
}

export function PaymentMethodTypeToJSON(value?: PaymentMethodType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'calculatePoints': CalculatePointsTypeToJSON(value.calculatePoints),
        'creditLimit': CreditLimitTypeToJSON(value.creditLimit),
        'description': value.description,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
        'orderSequence': value.orderSequence,
        'paymentCard': PaymentCardTypeToJSON(value.paymentCard),
        'paymentMethod': value.paymentMethod,
        'paymentMethodTransactionInfo': PaymentMethodTransactionInfoTypeToJSON(value.paymentMethodTransactionInfo),
        'paymentMethodUsage': PaymentMethodUsageTypeToJSON(value.paymentMethodUsage),
    };
}

