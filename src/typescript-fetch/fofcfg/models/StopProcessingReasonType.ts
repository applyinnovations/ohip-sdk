/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Details for Stop Processing Reason.
 * @export
 * @interface StopProcessingReasonType
 */
export interface StopProcessingReasonType {
    /**
     * Code is used to identify a Stop Processing Reason.
     * @type {string}
     * @memberof StopProcessingReasonType
     */
    code?: string;
    /**
     * Description of the Stop Processing Reason.
     * @type {string}
     * @memberof StopProcessingReasonType
     */
    description?: string;
    /**
     * Stop Processing Reason display sequence Number.
     * @type {number}
     * @memberof StopProcessingReasonType
     */
    displaySequence?: number;
}

/**
 * Check if a given object implements the StopProcessingReasonType interface.
 */
export function instanceOfStopProcessingReasonType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StopProcessingReasonTypeFromJSON(json: any): StopProcessingReasonType {
    return StopProcessingReasonTypeFromJSONTyped(json, false);
}

export function StopProcessingReasonTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StopProcessingReasonType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
    };
}

export function StopProcessingReasonTypeToJSON(value?: StopProcessingReasonType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'displaySequence': value.displaySequence,
    };
}

