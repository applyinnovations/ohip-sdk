/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Currency exchange service tax identification details
 * @export
 * @interface CurrencyExchangeServiceTaxType
 */
export interface CurrencyExchangeServiceTaxType {
    /**
     * Property associated with currency exchange service tax
     * @type {string}
     * @memberof CurrencyExchangeServiceTaxType
     */
    hotel?: string;
    /**
     * Currency exchange service tax code
     * @type {string}
     * @memberof CurrencyExchangeServiceTaxType
     */
    code?: string;
    /**
     * Starting value of exchange equivalent range
     * @type {number}
     * @memberof CurrencyExchangeServiceTaxType
     */
    amountFrom?: number;
    /**
     * End value of exchange equivalent range
     * @type {number}
     * @memberof CurrencyExchangeServiceTaxType
     */
    amountTo?: number;
    /**
     * Percentage of local currency
     * @type {number}
     * @memberof CurrencyExchangeServiceTaxType
     */
    percentage?: number;
    /**
     * Minimum service tax to be collected
     * @type {number}
     * @memberof CurrencyExchangeServiceTaxType
     */
    minServiceTax?: number;
    /**
     * Maximimum service tax to be collected
     * @type {number}
     * @memberof CurrencyExchangeServiceTaxType
     */
    maxServiceTax?: number;
    /**
     * Base tax basis of local currency. This is normally configured to the resulting tax basis of the previous tax slab range.
     * @type {number}
     * @memberof CurrencyExchangeServiceTaxType
     */
    baseAmount?: number;
}

/**
 * Check if a given object implements the CurrencyExchangeServiceTaxType interface.
 */
export function instanceOfCurrencyExchangeServiceTaxType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrencyExchangeServiceTaxTypeFromJSON(json: any): CurrencyExchangeServiceTaxType {
    return CurrencyExchangeServiceTaxTypeFromJSONTyped(json, false);
}

export function CurrencyExchangeServiceTaxTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyExchangeServiceTaxType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotel': !exists(json, 'hotel') ? undefined : json['hotel'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'amountFrom': !exists(json, 'amountFrom') ? undefined : json['amountFrom'],
        'amountTo': !exists(json, 'amountTo') ? undefined : json['amountTo'],
        'percentage': !exists(json, 'percentage') ? undefined : json['percentage'],
        'minServiceTax': !exists(json, 'minServiceTax') ? undefined : json['minServiceTax'],
        'maxServiceTax': !exists(json, 'maxServiceTax') ? undefined : json['maxServiceTax'],
        'baseAmount': !exists(json, 'baseAmount') ? undefined : json['baseAmount'],
    };
}

export function CurrencyExchangeServiceTaxTypeToJSON(value?: CurrencyExchangeServiceTaxType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotel': value.hotel,
        'code': value.code,
        'amountFrom': value.amountFrom,
        'amountTo': value.amountTo,
        'percentage': value.percentage,
        'minServiceTax': value.minServiceTax,
        'maxServiceTax': value.maxServiceTax,
        'baseAmount': value.baseAmount,
    };
}

