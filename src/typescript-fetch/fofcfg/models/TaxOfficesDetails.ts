/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { TaxOfficesType } from './TaxOfficesType';
import {
    TaxOfficesTypeFromJSON,
    TaxOfficesTypeFromJSONTyped,
    TaxOfficesTypeToJSON,
} from './TaxOfficesType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Response object for fetching Tax Offices.
 * @export
 * @interface TaxOfficesDetails
 */
export interface TaxOfficesDetails {
    /**
     * 
     * @type {Links}
     * @memberof TaxOfficesDetails
     */
    links?: Links;
    /**
     * 
     * @type {TaxOfficesType}
     * @memberof TaxOfficesDetails
     */
    taxOffices?: TaxOfficesType;
    /**
     * 
     * @type {WarningsType}
     * @memberof TaxOfficesDetails
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the TaxOfficesDetails interface.
 */
export function instanceOfTaxOfficesDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaxOfficesDetailsFromJSON(json: any): TaxOfficesDetails {
    return TaxOfficesDetailsFromJSONTyped(json, false);
}

export function TaxOfficesDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaxOfficesDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'taxOffices': !exists(json, 'taxOffices') ? undefined : TaxOfficesTypeFromJSON(json['taxOffices']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function TaxOfficesDetailsToJSON(value?: TaxOfficesDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'taxOffices': TaxOfficesTypeToJSON(value.taxOffices),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

