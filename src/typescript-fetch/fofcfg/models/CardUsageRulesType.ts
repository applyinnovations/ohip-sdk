/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Provides information on the various authorization options for a given card type .
 * @export
 * @interface CardUsageRulesType
 */
export interface CardUsageRulesType {
    /**
     * Indicates if this payment method requires an address verification.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    addressVerification?: boolean;
    /**
     * Indicates if this payment method can be used for Authorization at check in.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    authorizationAtCheckin?: boolean;
    /**
     * Indicates if this payment method can be used for Authorization during stay.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    authorizationDuringStay?: boolean;
    /**
     * Indicates if this payment method can be used for Authorization reversal can be done.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    authorizationReversal?: boolean;
    /**
     * Indicates if this payment method can be used for Authorization settlement can happen during checkout.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    authorizationSettlementAtCheckout?: boolean;
    /**
     * Indicates if this payment method needs CVV check.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    cVVCheck?: boolean;
    /**
     * Indicates if this payment method is a chip and pin.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    chipAndPin?: boolean;
    /**
     * Indicates if this payment method needs a prompt during check in.
     * @type {boolean}
     * @memberof CardUsageRulesType
     */
    promptAtCheckin?: boolean;
}

/**
 * Check if a given object implements the CardUsageRulesType interface.
 */
export function instanceOfCardUsageRulesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CardUsageRulesTypeFromJSON(json: any): CardUsageRulesType {
    return CardUsageRulesTypeFromJSONTyped(json, false);
}

export function CardUsageRulesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardUsageRulesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addressVerification': !exists(json, 'addressVerification') ? undefined : json['addressVerification'],
        'authorizationAtCheckin': !exists(json, 'authorizationAtCheckin') ? undefined : json['authorizationAtCheckin'],
        'authorizationDuringStay': !exists(json, 'authorizationDuringStay') ? undefined : json['authorizationDuringStay'],
        'authorizationReversal': !exists(json, 'authorizationReversal') ? undefined : json['authorizationReversal'],
        'authorizationSettlementAtCheckout': !exists(json, 'authorizationSettlementAtCheckout') ? undefined : json['authorizationSettlementAtCheckout'],
        'cVVCheck': !exists(json, 'cVVCheck') ? undefined : json['cVVCheck'],
        'chipAndPin': !exists(json, 'chipAndPin') ? undefined : json['chipAndPin'],
        'promptAtCheckin': !exists(json, 'promptAtCheckin') ? undefined : json['promptAtCheckin'],
    };
}

export function CardUsageRulesTypeToJSON(value?: CardUsageRulesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'addressVerification': value.addressVerification,
        'authorizationAtCheckin': value.authorizationAtCheckin,
        'authorizationDuringStay': value.authorizationDuringStay,
        'authorizationReversal': value.authorizationReversal,
        'authorizationSettlementAtCheckout': value.authorizationSettlementAtCheckout,
        'cVVCheck': value.cVVCheck,
        'chipAndPin': value.chipAndPin,
        'promptAtCheckin': value.promptAtCheckin,
    };
}

