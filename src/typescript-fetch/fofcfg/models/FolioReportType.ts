/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FolioReportGroupType } from './FolioReportGroupType';
import {
    FolioReportGroupTypeFromJSON,
    FolioReportGroupTypeFromJSONTyped,
    FolioReportGroupTypeToJSON,
} from './FolioReportGroupType';

/**
 * Folio Report associated with the Folio Type Name. Includes Name Of the folio report,the Group for Folio Type Name belongs to and the Language Code for which the folio is effective.
 * @export
 * @interface FolioReportType
 */
export interface FolioReportType {
    /**
     * Name of the .REP or .RDF file. .REP or .RDF extension is not needed.
     * @type {string}
     * @memberof FolioReportType
     */
    reportName?: string;
    /**
     * 
     * @type {FolioReportGroupType}
     * @memberof FolioReportType
     */
    reportGroup?: FolioReportGroupType;
    /**
     * Language identification.
     * @type {string}
     * @memberof FolioReportType
     */
    language?: string;
}

/**
 * Check if a given object implements the FolioReportType interface.
 */
export function instanceOfFolioReportType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FolioReportTypeFromJSON(json: any): FolioReportType {
    return FolioReportTypeFromJSONTyped(json, false);
}

export function FolioReportTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FolioReportType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reportName': !exists(json, 'reportName') ? undefined : json['reportName'],
        'reportGroup': !exists(json, 'reportGroup') ? undefined : FolioReportGroupTypeFromJSON(json['reportGroup']),
        'language': !exists(json, 'language') ? undefined : json['language'],
    };
}

export function FolioReportTypeToJSON(value?: FolioReportType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reportName': value.reportName,
        'reportGroup': FolioReportGroupTypeToJSON(value.reportGroup),
        'language': value.language,
    };
}

