/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This type contains unique information of external reference.
 * @export
 * @interface ExternalReferenceType
 */
export interface ExternalReferenceType {
    /**
     * Unique ID of external reference.
     * @type {string}
     * @memberof ExternalReferenceType
     */
    id?: string;
    /**
     * ID extension for external reference.
     * @type {number}
     * @memberof ExternalReferenceType
     */
    idExtension?: number;
    /**
     * ID context for external reference.
     * @type {string}
     * @memberof ExternalReferenceType
     */
    idContext?: string;
}

/**
 * Check if a given object implements the ExternalReferenceType interface.
 */
export function instanceOfExternalReferenceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExternalReferenceTypeFromJSON(json: any): ExternalReferenceType {
    return ExternalReferenceTypeFromJSONTyped(json, false);
}

export function ExternalReferenceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalReferenceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'idExtension': !exists(json, 'idExtension') ? undefined : json['idExtension'],
        'idContext': !exists(json, 'idContext') ? undefined : json['idContext'],
    };
}

export function ExternalReferenceTypeToJSON(value?: ExternalReferenceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'idExtension': value.idExtension,
        'idContext': value.idContext,
    };
}

