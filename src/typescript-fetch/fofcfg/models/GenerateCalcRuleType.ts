/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlatAmtGenerateType } from './FlatAmtGenerateType';
import {
    FlatAmtGenerateTypeFromJSON,
    FlatAmtGenerateTypeFromJSONTyped,
    FlatAmtGenerateTypeToJSON,
} from './FlatAmtGenerateType';
import type { FunctionArgumentType } from './FunctionArgumentType';
import {
    FunctionArgumentTypeFromJSON,
    FunctionArgumentTypeFromJSONTyped,
    FunctionArgumentTypeToJSON,
} from './FunctionArgumentType';
import type { GeneratePostingRuleType } from './GeneratePostingRuleType';
import {
    GeneratePostingRuleTypeFromJSON,
    GeneratePostingRuleTypeFromJSONTyped,
    GeneratePostingRuleTypeToJSON,
} from './GeneratePostingRuleType';
import type { GenerateRoundingMethodType } from './GenerateRoundingMethodType';
import {
    GenerateRoundingMethodTypeFromJSON,
    GenerateRoundingMethodTypeFromJSONTyped,
    GenerateRoundingMethodTypeToJSON,
} from './GenerateRoundingMethodType';
import type { PercentageGenerateType } from './PercentageGenerateType';
import {
    PercentageGenerateTypeFromJSON,
    PercentageGenerateTypeFromJSONTyped,
    PercentageGenerateTypeToJSON,
} from './PercentageGenerateType';
import type { TaxTypeGenerateType } from './TaxTypeGenerateType';
import {
    TaxTypeGenerateTypeFromJSON,
    TaxTypeGenerateTypeFromJSONTyped,
    TaxTypeGenerateTypeToJSON,
} from './TaxTypeGenerateType';

/**
 * Defines the Calculation Rule for the generate.
 * @export
 * @interface GenerateCalcRuleType
 */
export interface GenerateCalcRuleType {
    /**
     * 
     * @type {PercentageGenerateType}
     * @memberof GenerateCalcRuleType
     */
    percentage?: PercentageGenerateType;
    /**
     * 
     * @type {FlatAmtGenerateType}
     * @memberof GenerateCalcRuleType
     */
    flatAmount?: FlatAmtGenerateType;
    /**
     * Defines User Defined Function to calculate generates.
     * @type {string}
     * @memberof GenerateCalcRuleType
     */
    uDF?: string;
    /**
     * The function name of the User Defined Function used to calculate generates.
     * @type {string}
     * @memberof GenerateCalcRuleType
     */
    uDFFunctionName?: string;
    /**
     * Collection of function arguments and their corresponding values.
     * @type {Array<FunctionArgumentType>}
     * @memberof GenerateCalcRuleType
     */
    uDFFunctionArguments?: Array<FunctionArgumentType>;
    /**
     * Defines the Calculation Rule for the Tax Type for a specific date schedule
     * @type {Array<TaxTypeGenerateType>}
     * @memberof GenerateCalcRuleType
     */
    taxTypeBased?: Array<TaxTypeGenerateType>;
    /**
     * 
     * @type {GenerateRoundingMethodType}
     * @memberof GenerateCalcRuleType
     */
    roundingMethod?: GenerateRoundingMethodType;
    /**
     * 
     * @type {GeneratePostingRuleType}
     * @memberof GenerateCalcRuleType
     */
    posting?: GeneratePostingRuleType;
}

/**
 * Check if a given object implements the GenerateCalcRuleType interface.
 */
export function instanceOfGenerateCalcRuleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GenerateCalcRuleTypeFromJSON(json: any): GenerateCalcRuleType {
    return GenerateCalcRuleTypeFromJSONTyped(json, false);
}

export function GenerateCalcRuleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerateCalcRuleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'percentage': !exists(json, 'percentage') ? undefined : PercentageGenerateTypeFromJSON(json['percentage']),
        'flatAmount': !exists(json, 'flatAmount') ? undefined : FlatAmtGenerateTypeFromJSON(json['flatAmount']),
        'uDF': !exists(json, 'uDF') ? undefined : json['uDF'],
        'uDFFunctionName': !exists(json, 'uDFFunctionName') ? undefined : json['uDFFunctionName'],
        'uDFFunctionArguments': !exists(json, 'uDFFunctionArguments') ? undefined : ((json['uDFFunctionArguments'] as Array<any>).map(FunctionArgumentTypeFromJSON)),
        'taxTypeBased': !exists(json, 'taxTypeBased') ? undefined : ((json['taxTypeBased'] as Array<any>).map(TaxTypeGenerateTypeFromJSON)),
        'roundingMethod': !exists(json, 'roundingMethod') ? undefined : GenerateRoundingMethodTypeFromJSON(json['roundingMethod']),
        'posting': !exists(json, 'posting') ? undefined : GeneratePostingRuleTypeFromJSON(json['posting']),
    };
}

export function GenerateCalcRuleTypeToJSON(value?: GenerateCalcRuleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'percentage': PercentageGenerateTypeToJSON(value.percentage),
        'flatAmount': FlatAmtGenerateTypeToJSON(value.flatAmount),
        'uDF': value.uDF,
        'uDFFunctionName': value.uDFFunctionName,
        'uDFFunctionArguments': value.uDFFunctionArguments === undefined ? undefined : ((value.uDFFunctionArguments as Array<any>).map(FunctionArgumentTypeToJSON)),
        'taxTypeBased': value.taxTypeBased === undefined ? undefined : ((value.taxTypeBased as Array<any>).map(TaxTypeGenerateTypeToJSON)),
        'roundingMethod': GenerateRoundingMethodTypeToJSON(value.roundingMethod),
        'posting': GeneratePostingRuleTypeToJSON(value.posting),
    };
}

