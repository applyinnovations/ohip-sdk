/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CopyTransactionCodesType } from './CopyTransactionCodesType';
import {
    CopyTransactionCodesTypeFromJSON,
    CopyTransactionCodesTypeFromJSONTyped,
    CopyTransactionCodesTypeToJSON,
} from './CopyTransactionCodesType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface TransactionCodesCopy
 */
export interface TransactionCodesCopy {
    /**
     * 
     * @type {Links}
     * @memberof TransactionCodesCopy
     */
    links?: Links;
    /**
     * 
     * @type {CopyTransactionCodesType}
     * @memberof TransactionCodesCopy
     */
    transactionCodes?: CopyTransactionCodesType;
    /**
     * 
     * @type {WarningsType}
     * @memberof TransactionCodesCopy
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the TransactionCodesCopy interface.
 */
export function instanceOfTransactionCodesCopy(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionCodesCopyFromJSON(json: any): TransactionCodesCopy {
    return TransactionCodesCopyFromJSONTyped(json, false);
}

export function TransactionCodesCopyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionCodesCopy {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : CopyTransactionCodesTypeFromJSON(json['transactionCodes']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function TransactionCodesCopyToJSON(value?: TransactionCodesCopy | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'transactionCodes': CopyTransactionCodesTypeToJSON(value.transactionCodes),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

