/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InterfaceControlLangType
 */
export interface InterfaceControlLangType {
    /**
     * Hotel Code of the hotel interface.
     * @type {string}
     * @memberof InterfaceControlLangType
     */
    hotelId?: string;
    /**
     * Logo of the hotel interface.
     * @type {string}
     * @memberof InterfaceControlLangType
     */
    logo?: string;
    /**
     * Internal code of a translation language setup.
     * @type {number}
     * @memberof InterfaceControlLangType
     */
    internalCode?: number;
    /**
     * Selector of a translation language setup.
     * @type {string}
     * @memberof InterfaceControlLangType
     */
    selector?: string;
    /**
     * Language code of a translation language setup.
     * @type {string}
     * @memberof InterfaceControlLangType
     */
    languageCode?: string;
}

/**
 * Check if a given object implements the InterfaceControlLangType interface.
 */
export function instanceOfInterfaceControlLangType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceControlLangTypeFromJSON(json: any): InterfaceControlLangType {
    return InterfaceControlLangTypeFromJSONTyped(json, false);
}

export function InterfaceControlLangTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceControlLangType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
        'internalCode': !exists(json, 'internalCode') ? undefined : json['internalCode'],
        'selector': !exists(json, 'selector') ? undefined : json['selector'],
        'languageCode': !exists(json, 'languageCode') ? undefined : json['languageCode'],
    };
}

export function InterfaceControlLangTypeToJSON(value?: InterfaceControlLangType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'logo': value.logo,
        'internalCode': value.internalCode,
        'selector': value.selector,
        'languageCode': value.languageCode,
    };
}

