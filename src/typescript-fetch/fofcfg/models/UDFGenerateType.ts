/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FunctionArgumentsType } from './FunctionArgumentsType';
import {
    FunctionArgumentsTypeFromJSON,
    FunctionArgumentsTypeFromJSONTyped,
    FunctionArgumentsTypeToJSON,
} from './FunctionArgumentsType';

/**
 * Defines UDF rule for generates.
 * @export
 * @interface UDFGenerateType
 */
export interface UDFGenerateType {
    /**
     * Defines User Defined Function to calculate generates.
     * @type {string}
     * @memberof UDFGenerateType
     */
    uDF?: string;
    /**
     * 
     * @type {FunctionArgumentsType}
     * @memberof UDFGenerateType
     */
    uDFFunctionArguments?: FunctionArgumentsType;
    /**
     * The function name of the User Defined Function used to calculate generates.
     * @type {string}
     * @memberof UDFGenerateType
     */
    uDFFunctionName?: string;
}

/**
 * Check if a given object implements the UDFGenerateType interface.
 */
export function instanceOfUDFGenerateType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UDFGenerateTypeFromJSON(json: any): UDFGenerateType {
    return UDFGenerateTypeFromJSONTyped(json, false);
}

export function UDFGenerateTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UDFGenerateType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uDF': !exists(json, 'uDF') ? undefined : json['uDF'],
        'uDFFunctionArguments': !exists(json, 'uDFFunctionArguments') ? undefined : FunctionArgumentsTypeFromJSON(json['uDFFunctionArguments']),
        'uDFFunctionName': !exists(json, 'uDFFunctionName') ? undefined : json['uDFFunctionName'],
    };
}

export function UDFGenerateTypeToJSON(value?: UDFGenerateType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uDF': value.uDF,
        'uDFFunctionArguments': FunctionArgumentsTypeToJSON(value.uDFFunctionArguments),
        'uDFFunctionName': value.uDFFunctionName,
    };
}

