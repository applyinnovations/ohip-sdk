/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Variance information for a catering segment code for a month.
 * @export
 * @interface MonthlyCateringVarianceInfoType
 */
export interface MonthlyCateringVarianceInfoType {
    /**
     * Variance for a month.
     * @type {number}
     * @memberof MonthlyCateringVarianceInfoType
     */
    coversVariance?: number;
    /**
     * Month number
     * @type {number}
     * @memberof MonthlyCateringVarianceInfoType
     */
    month?: number;
    /**
     * Variance for a month.
     * @type {number}
     * @memberof MonthlyCateringVarianceInfoType
     */
    revenueVariance?: number;
}

/**
 * Check if a given object implements the MonthlyCateringVarianceInfoType interface.
 */
export function instanceOfMonthlyCateringVarianceInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MonthlyCateringVarianceInfoTypeFromJSON(json: any): MonthlyCateringVarianceInfoType {
    return MonthlyCateringVarianceInfoTypeFromJSONTyped(json, false);
}

export function MonthlyCateringVarianceInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonthlyCateringVarianceInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'coversVariance': !exists(json, 'coversVariance') ? undefined : json['coversVariance'],
        'month': !exists(json, 'month') ? undefined : json['month'],
        'revenueVariance': !exists(json, 'revenueVariance') ? undefined : json['revenueVariance'],
    };
}

export function MonthlyCateringVarianceInfoTypeToJSON(value?: MonthlyCateringVarianceInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'coversVariance': value.coversVariance,
        'month': value.month,
        'revenueVariance': value.revenueVariance,
    };
}

