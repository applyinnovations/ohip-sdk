/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MonthlyRevenueNightsInfoType } from './MonthlyRevenueNightsInfoType';
import {
    MonthlyRevenueNightsInfoTypeFromJSON,
    MonthlyRevenueNightsInfoTypeFromJSONTyped,
    MonthlyRevenueNightsInfoTypeToJSON,
} from './MonthlyRevenueNightsInfoType';

/**
 * Revenue information for a segment code. Holds total and monthly revenue information.
 * @export
 * @interface RevenueNightsInfoType
 */
export interface RevenueNightsInfoType {
    /**
     * Revenue information for each month for segment code.
     * @type {Array<MonthlyRevenueNightsInfoType>}
     * @memberof RevenueNightsInfoType
     */
    monthlyRevenueInfo?: Array<MonthlyRevenueNightsInfoType>;
    /**
     * Total Nights for segment code.
     * @type {number}
     * @memberof RevenueNightsInfoType
     */
    totalNights?: number;
    /**
     * Total revenue for segment code.
     * @type {number}
     * @memberof RevenueNightsInfoType
     */
    totalRevenue?: number;
}

/**
 * Check if a given object implements the RevenueNightsInfoType interface.
 */
export function instanceOfRevenueNightsInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RevenueNightsInfoTypeFromJSON(json: any): RevenueNightsInfoType {
    return RevenueNightsInfoTypeFromJSONTyped(json, false);
}

export function RevenueNightsInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RevenueNightsInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'monthlyRevenueInfo': !exists(json, 'monthlyRevenueInfo') ? undefined : ((json['monthlyRevenueInfo'] as Array<any>).map(MonthlyRevenueNightsInfoTypeFromJSON)),
        'totalNights': !exists(json, 'totalNights') ? undefined : json['totalNights'],
        'totalRevenue': !exists(json, 'totalRevenue') ? undefined : json['totalRevenue'],
    };
}

export function RevenueNightsInfoTypeToJSON(value?: RevenueNightsInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'monthlyRevenueInfo': value.monthlyRevenueInfo === undefined ? undefined : ((value.monthlyRevenueInfo as Array<any>).map(MonthlyRevenueNightsInfoTypeToJSON)),
        'totalNights': value.totalNights,
        'totalRevenue': value.totalRevenue,
    };
}

