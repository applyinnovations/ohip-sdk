/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrencyAmountType } from './CurrencyAmountType';
import {
    CurrencyAmountTypeFromJSON,
    CurrencyAmountTypeFromJSONTyped,
    CurrencyAmountTypeToJSON,
} from './CurrencyAmountType';
import type { PrepaidCardTransactionInfoType } from './PrepaidCardTransactionInfoType';
import {
    PrepaidCardTransactionInfoTypeFromJSON,
    PrepaidCardTransactionInfoTypeFromJSONTyped,
    PrepaidCardTransactionInfoTypeToJSON,
} from './PrepaidCardTransactionInfoType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Detailed information about the prepaid card.
 * @export
 * @interface PrepaidCardInfoType
 */
export interface PrepaidCardInfoType {
    /**
     * Hotel context for the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof PrepaidCardInfoType
     */
    reservationId?: UniqueIDType;
    /**
     * Prepaid card number.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    cardNo?: string;
    /**
     * Masked Prepaid card / account number.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    cardNumberMasked?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof PrepaidCardInfoType
     */
    interfaceId?: UniqueIDType;
    /**
     * Initial Load Date of the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    initialLoadDate?: string;
    /**
     * Issue Date of the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    issueDate?: string;
    /**
     * Validity of the prepaid card amount.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    validUntil?: string;
    /**
     * Expiry Date of the prepaid card.
     * @type {string}
     * @memberof PrepaidCardInfoType
     */
    expiryDate?: string;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    initialCredit?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    totalDebit?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    totalCredit?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    balance?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    availableCashoutAmount?: CurrencyAmountType;
    /**
     * 
     * @type {CurrencyAmountType}
     * @memberof PrepaidCardInfoType
     */
    reservedAmount?: CurrencyAmountType;
    /**
     * Prepaid card transaction details.
     * @type {Array<PrepaidCardTransactionInfoType>}
     * @memberof PrepaidCardInfoType
     */
    prepaidCardTransactions?: Array<PrepaidCardTransactionInfoType>;
    /**
     * Indicate if vendor transactions are included on the transactions list.
     * @type {boolean}
     * @memberof PrepaidCardInfoType
     */
    vendorTransactionsActive?: boolean;
    /**
     * Indicate if opera transactions are included on the transactions list.
     * @type {boolean}
     * @memberof PrepaidCardInfoType
     */
    operaTransactionsActive?: boolean;
}

/**
 * Check if a given object implements the PrepaidCardInfoType interface.
 */
export function instanceOfPrepaidCardInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PrepaidCardInfoTypeFromJSON(json: any): PrepaidCardInfoType {
    return PrepaidCardInfoTypeFromJSONTyped(json, false);
}

export function PrepaidCardInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PrepaidCardInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'reservationId': !exists(json, 'reservationId') ? undefined : UniqueIDTypeFromJSON(json['reservationId']),
        'cardNo': !exists(json, 'cardNo') ? undefined : json['cardNo'],
        'cardNumberMasked': !exists(json, 'cardNumberMasked') ? undefined : json['cardNumberMasked'],
        'interfaceId': !exists(json, 'interfaceId') ? undefined : UniqueIDTypeFromJSON(json['interfaceId']),
        'initialLoadDate': !exists(json, 'initialLoadDate') ? undefined : json['initialLoadDate'],
        'issueDate': !exists(json, 'issueDate') ? undefined : json['issueDate'],
        'validUntil': !exists(json, 'validUntil') ? undefined : json['validUntil'],
        'expiryDate': !exists(json, 'expiryDate') ? undefined : json['expiryDate'],
        'initialCredit': !exists(json, 'initialCredit') ? undefined : CurrencyAmountTypeFromJSON(json['initialCredit']),
        'totalDebit': !exists(json, 'totalDebit') ? undefined : CurrencyAmountTypeFromJSON(json['totalDebit']),
        'totalCredit': !exists(json, 'totalCredit') ? undefined : CurrencyAmountTypeFromJSON(json['totalCredit']),
        'balance': !exists(json, 'balance') ? undefined : CurrencyAmountTypeFromJSON(json['balance']),
        'availableCashoutAmount': !exists(json, 'availableCashoutAmount') ? undefined : CurrencyAmountTypeFromJSON(json['availableCashoutAmount']),
        'reservedAmount': !exists(json, 'reservedAmount') ? undefined : CurrencyAmountTypeFromJSON(json['reservedAmount']),
        'prepaidCardTransactions': !exists(json, 'prepaidCardTransactions') ? undefined : ((json['prepaidCardTransactions'] as Array<any>).map(PrepaidCardTransactionInfoTypeFromJSON)),
        'vendorTransactionsActive': !exists(json, 'vendorTransactionsActive') ? undefined : json['vendorTransactionsActive'],
        'operaTransactionsActive': !exists(json, 'operaTransactionsActive') ? undefined : json['operaTransactionsActive'],
    };
}

export function PrepaidCardInfoTypeToJSON(value?: PrepaidCardInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'reservationId': UniqueIDTypeToJSON(value.reservationId),
        'cardNo': value.cardNo,
        'cardNumberMasked': value.cardNumberMasked,
        'interfaceId': UniqueIDTypeToJSON(value.interfaceId),
        'initialLoadDate': value.initialLoadDate,
        'issueDate': value.issueDate,
        'validUntil': value.validUntil,
        'expiryDate': value.expiryDate,
        'initialCredit': CurrencyAmountTypeToJSON(value.initialCredit),
        'totalDebit': CurrencyAmountTypeToJSON(value.totalDebit),
        'totalCredit': CurrencyAmountTypeToJSON(value.totalCredit),
        'balance': CurrencyAmountTypeToJSON(value.balance),
        'availableCashoutAmount': CurrencyAmountTypeToJSON(value.availableCashoutAmount),
        'reservedAmount': CurrencyAmountTypeToJSON(value.reservedAmount),
        'prepaidCardTransactions': value.prepaidCardTransactions === undefined ? undefined : ((value.prepaidCardTransactions as Array<any>).map(PrepaidCardTransactionInfoTypeToJSON)),
        'vendorTransactionsActive': value.vendorTransactionsActive,
        'operaTransactionsActive': value.operaTransactionsActive,
    };
}

