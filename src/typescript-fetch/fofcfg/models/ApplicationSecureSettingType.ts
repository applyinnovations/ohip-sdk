/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationSettingLevelType } from './ApplicationSettingLevelType';
import {
    ApplicationSettingLevelTypeFromJSON,
    ApplicationSettingLevelTypeFromJSONTyped,
    ApplicationSettingLevelTypeToJSON,
} from './ApplicationSettingLevelType';

/**
 * Internal settings that is mainly used to get a secure information on the type.
 * @export
 * @interface ApplicationSecureSettingType
 */
export interface ApplicationSecureSettingType {
    /**
     * 
     * @type {string}
     * @memberof ApplicationSecureSettingType
     */
    name?: string;
    /**
     * 
     * @type {ApplicationSettingLevelType}
     * @memberof ApplicationSecureSettingType
     */
    levelType?: ApplicationSettingLevelType;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSecureSettingType
     */
    levelCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationSecureSettingType
     */
    securedValue?: string;
}

/**
 * Check if a given object implements the ApplicationSecureSettingType interface.
 */
export function instanceOfApplicationSecureSettingType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ApplicationSecureSettingTypeFromJSON(json: any): ApplicationSecureSettingType {
    return ApplicationSecureSettingTypeFromJSONTyped(json, false);
}

export function ApplicationSecureSettingTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationSecureSettingType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'levelType': !exists(json, 'levelType') ? undefined : ApplicationSettingLevelTypeFromJSON(json['levelType']),
        'levelCode': !exists(json, 'levelCode') ? undefined : json['levelCode'],
        'securedValue': !exists(json, 'securedValue') ? undefined : json['securedValue'],
    };
}

export function ApplicationSecureSettingTypeToJSON(value?: ApplicationSecureSettingType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'levelType': ApplicationSettingLevelTypeToJSON(value.levelType),
        'levelCode': value.levelCode,
        'securedValue': value.securedValue,
    };
}

