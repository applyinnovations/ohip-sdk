/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompTrxInfoType } from './CompTrxInfoType';
import {
    CompTrxInfoTypeFromJSON,
    CompTrxInfoTypeFromJSONTyped,
    CompTrxInfoTypeToJSON,
} from './CompTrxInfoType';

/**
 * This gives detailed information about redemption code.
 * @export
 * @interface BucketRedemptionCodeType
 */
export interface BucketRedemptionCodeType {
    /**
     * Code is used to identify a trx code arrangement.
     * @type {string}
     * @memberof BucketRedemptionCodeType
     */
    code?: string;
    /**
     * 
     * @type {CompTrxInfoType}
     * @memberof BucketRedemptionCodeType
     */
    compTransactionCode?: CompTrxInfoType;
    /**
     * Description of the trx code arrangement code.
     * @type {string}
     * @memberof BucketRedemptionCodeType
     */
    description?: string;
    /**
     * Identifies the hotel code for which the trx code arrangement is specified.
     * @type {string}
     * @memberof BucketRedemptionCodeType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the BucketRedemptionCodeType interface.
 */
export function instanceOfBucketRedemptionCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BucketRedemptionCodeTypeFromJSON(json: any): BucketRedemptionCodeType {
    return BucketRedemptionCodeTypeFromJSONTyped(json, false);
}

export function BucketRedemptionCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): BucketRedemptionCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'compTransactionCode': !exists(json, 'compTransactionCode') ? undefined : CompTrxInfoTypeFromJSON(json['compTransactionCode']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function BucketRedemptionCodeTypeToJSON(value?: BucketRedemptionCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'compTransactionCode': CompTrxInfoTypeToJSON(value.compTransactionCode),
        'description': value.description,
        'hotelId': value.hotelId,
    };
}

