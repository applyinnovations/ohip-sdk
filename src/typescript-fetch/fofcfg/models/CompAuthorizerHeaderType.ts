/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CompAuthorizerDetailType } from './CompAuthorizerDetailType';
import {
    CompAuthorizerDetailTypeFromJSON,
    CompAuthorizerDetailTypeFromJSONTyped,
    CompAuthorizerDetailTypeToJSON,
} from './CompAuthorizerDetailType';

/**
 * Detail information related to comp authorizers.
 * @export
 * @interface CompAuthorizerHeaderType
 */
export interface CompAuthorizerHeaderType {
    /**
     * Credit limit associated for the authorizer.
     * @type {number}
     * @memberof CompAuthorizerHeaderType
     */
    creditLimit?: number;
    /**
     * Credit limit already used up for the authorizer.
     * @type {number}
     * @memberof CompAuthorizerHeaderType
     */
    occurenceLimit?: number;
    /**
     * Comp authorizer details information.
     * @type {Array<CompAuthorizerDetailType>}
     * @memberof CompAuthorizerHeaderType
     */
    compAuthorizerDetails?: Array<CompAuthorizerDetailType>;
}

/**
 * Check if a given object implements the CompAuthorizerHeaderType interface.
 */
export function instanceOfCompAuthorizerHeaderType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompAuthorizerHeaderTypeFromJSON(json: any): CompAuthorizerHeaderType {
    return CompAuthorizerHeaderTypeFromJSONTyped(json, false);
}

export function CompAuthorizerHeaderTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompAuthorizerHeaderType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'creditLimit': !exists(json, 'creditLimit') ? undefined : json['creditLimit'],
        'occurenceLimit': !exists(json, 'occurenceLimit') ? undefined : json['occurenceLimit'],
        'compAuthorizerDetails': !exists(json, 'compAuthorizerDetails') ? undefined : ((json['compAuthorizerDetails'] as Array<any>).map(CompAuthorizerDetailTypeFromJSON)),
    };
}

export function CompAuthorizerHeaderTypeToJSON(value?: CompAuthorizerHeaderType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'creditLimit': value.creditLimit,
        'occurenceLimit': value.occurenceLimit,
        'compAuthorizerDetails': value.compAuthorizerDetails === undefined ? undefined : ((value.compAuthorizerDetails as Array<any>).map(CompAuthorizerDetailTypeToJSON)),
    };
}

