/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This provides information about the various usage options permitted for the given payment method.
 * @export
 * @interface PaymentMethodUsageType
 */
export interface PaymentMethodUsageType {
    /**
     * Indicates if this payment method can be used for Accounts Receivables.
     * @type {boolean}
     * @memberof PaymentMethodUsageType
     */
    accountsReceivable?: boolean;
    /**
     * Indicates if the payment method can be used for Guest Billing
     * @type {boolean}
     * @memberof PaymentMethodUsageType
     */
    billing?: boolean;
    /**
     * Indicates if this payment method is a Cash type payment method.
     * @type {boolean}
     * @memberof PaymentMethodUsageType
     */
    cash?: boolean;
    /**
     * Indicates if this payment method can be used for Comp Accounting.
     * @type {boolean}
     * @memberof PaymentMethodUsageType
     */
    compAccounting?: boolean;
    /**
     * Indicates if this payment method can be used for Deposit payments.
     * @type {boolean}
     * @memberof PaymentMethodUsageType
     */
    deposit?: boolean;
    /**
     * Indicates if postings can be manually added to the Reservation when this payment method is used.
     * @type {boolean}
     * @memberof PaymentMethodUsageType
     */
    posting?: boolean;
    /**
     * Indicates if this payment method can be used as a Reservation payment method.
     * @type {boolean}
     * @memberof PaymentMethodUsageType
     */
    reservation?: boolean;
}

/**
 * Check if a given object implements the PaymentMethodUsageType interface.
 */
export function instanceOfPaymentMethodUsageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentMethodUsageTypeFromJSON(json: any): PaymentMethodUsageType {
    return PaymentMethodUsageTypeFromJSONTyped(json, false);
}

export function PaymentMethodUsageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodUsageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountsReceivable': !exists(json, 'accountsReceivable') ? undefined : json['accountsReceivable'],
        'billing': !exists(json, 'billing') ? undefined : json['billing'],
        'cash': !exists(json, 'cash') ? undefined : json['cash'],
        'compAccounting': !exists(json, 'compAccounting') ? undefined : json['compAccounting'],
        'deposit': !exists(json, 'deposit') ? undefined : json['deposit'],
        'posting': !exists(json, 'posting') ? undefined : json['posting'],
        'reservation': !exists(json, 'reservation') ? undefined : json['reservation'],
    };
}

export function PaymentMethodUsageTypeToJSON(value?: PaymentMethodUsageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accountsReceivable': value.accountsReceivable,
        'billing': value.billing,
        'cash': value.cash,
        'compAccounting': value.compAccounting,
        'deposit': value.deposit,
        'posting': value.posting,
        'reservation': value.reservation,
    };
}

