/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ArticlesType } from './ArticlesType';
import {
    ArticlesTypeFromJSON,
    ArticlesTypeFromJSONTyped,
    ArticlesTypeToJSON,
} from './ArticlesType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface ArticlesInfo
 */
export interface ArticlesInfo {
    /**
     * 
     * @type {ArticlesType}
     * @memberof ArticlesInfo
     */
    articles?: ArticlesType;
    /**
     * 
     * @type {Links}
     * @memberof ArticlesInfo
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof ArticlesInfo
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the ArticlesInfo interface.
 */
export function instanceOfArticlesInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ArticlesInfoFromJSON(json: any): ArticlesInfo {
    return ArticlesInfoFromJSONTyped(json, false);
}

export function ArticlesInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ArticlesInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'articles': !exists(json, 'articles') ? undefined : ArticlesTypeFromJSON(json['articles']),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function ArticlesInfoToJSON(value?: ArticlesInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'articles': ArticlesTypeToJSON(value.articles),
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

