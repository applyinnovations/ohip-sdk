/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { TaxCategoryCodeType } from './TaxCategoryCodeType';
import {
    TaxCategoryCodeTypeFromJSON,
    TaxCategoryCodeTypeFromJSONTyped,
    TaxCategoryCodeTypeToJSON,
} from './TaxCategoryCodeType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Response object for fetching Tax Category Codes.
 * @export
 * @interface TaxCategoryCodesDetails
 */
export interface TaxCategoryCodesDetails {
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof TaxCategoryCodesDetails
     */
    links?: Array<InstanceLink>;
    /**
     * List of Tax Category Codes.
     * @type {Array<TaxCategoryCodeType>}
     * @memberof TaxCategoryCodesDetails
     */
    taxCategoryCodes?: Array<TaxCategoryCodeType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof TaxCategoryCodesDetails
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the TaxCategoryCodesDetails interface.
 */
export function instanceOfTaxCategoryCodesDetails(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaxCategoryCodesDetailsFromJSON(json: any): TaxCategoryCodesDetails {
    return TaxCategoryCodesDetailsFromJSONTyped(json, false);
}

export function TaxCategoryCodesDetailsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaxCategoryCodesDetails {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'taxCategoryCodes': !exists(json, 'taxCategoryCodes') ? undefined : ((json['taxCategoryCodes'] as Array<any>).map(TaxCategoryCodeTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function TaxCategoryCodesDetailsToJSON(value?: TaxCategoryCodesDetails | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'taxCategoryCodes': value.taxCategoryCodes === undefined ? undefined : ((value.taxCategoryCodes as Array<any>).map(TaxCategoryCodeTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

