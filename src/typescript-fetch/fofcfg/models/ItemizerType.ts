/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemizerType
 */
export interface ItemizerType {
    /**
     * Split code of the itemizer setup.
     * @type {string}
     * @memberof ItemizerType
     */
    splitCode?: string;
    /**
     * Split posting of the itemizer setup.
     * @type {number}
     * @memberof ItemizerType
     */
    splitPost?: number;
    /**
     * Split text of the itemizer setup.
     * @type {string}
     * @memberof ItemizerType
     */
    splitText?: string;
    /**
     * Split factor of the itemizer setup.
     * @type {number}
     * @memberof ItemizerType
     */
    splitFactor?: number;
}

/**
 * Check if a given object implements the ItemizerType interface.
 */
export function instanceOfItemizerType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemizerTypeFromJSON(json: any): ItemizerType {
    return ItemizerTypeFromJSONTyped(json, false);
}

export function ItemizerTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemizerType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'splitCode': !exists(json, 'splitCode') ? undefined : json['splitCode'],
        'splitPost': !exists(json, 'splitPost') ? undefined : json['splitPost'],
        'splitText': !exists(json, 'splitText') ? undefined : json['splitText'],
        'splitFactor': !exists(json, 'splitFactor') ? undefined : json['splitFactor'],
    };
}

export function ItemizerTypeToJSON(value?: ItemizerType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'splitCode': value.splitCode,
        'splitPost': value.splitPost,
        'splitText': value.splitText,
        'splitFactor': value.splitFactor,
    };
}

