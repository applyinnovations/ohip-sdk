/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CustomChargePostingRhythmType } from './CustomChargePostingRhythmType';
import {
    CustomChargePostingRhythmTypeFromJSON,
    CustomChargePostingRhythmTypeFromJSONTyped,
    CustomChargePostingRhythmTypeToJSON,
} from './CustomChargePostingRhythmType';
import type { CustomChargeRangeType } from './CustomChargeRangeType';
import {
    CustomChargeRangeTypeFromJSON,
    CustomChargeRangeTypeFromJSONTyped,
    CustomChargeRangeTypeToJSON,
} from './CustomChargeRangeType';
import type { CustomChargeRuleTypeType } from './CustomChargeRuleTypeType';
import {
    CustomChargeRuleTypeTypeFromJSON,
    CustomChargeRuleTypeTypeFromJSONTyped,
    CustomChargeRuleTypeTypeToJSON,
} from './CustomChargeRuleTypeType';
import type { DateRangeType } from './DateRangeType';
import {
    DateRangeTypeFromJSON,
    DateRangeTypeFromJSONTyped,
    DateRangeTypeToJSON,
} from './DateRangeType';

/**
 * This gives detailed information about Custom Charges.
 * @export
 * @interface CustomChargeType
 */
export interface CustomChargeType {
    /**
     * Code is used to identify the Custom Charge.
     * @type {string}
     * @memberof CustomChargeType
     */
    customChargeCode?: string;
    /**
     * Identifies the hotel code for which the Custom Charge code is specified.
     * @type {string}
     * @memberof CustomChargeType
     */
    hotelId?: string;
    /**
     * Description for the Custom Charge code.
     * @type {string}
     * @memberof CustomChargeType
     */
    description?: string;
    /**
     * Identifies the priority for which the Custom Charge code is specified.
     * @type {number}
     * @memberof CustomChargeType
     */
    priority?: number;
    /**
     * Identifies the price for which the Custom Charge code is specified.
     * @type {number}
     * @memberof CustomChargeType
     */
    price?: number;
    /**
     * 
     * @type {DateRangeType}
     * @memberof CustomChargeType
     */
    dateRange?: DateRangeType;
    /**
     * The percentage of the Rate Code, which will be posted as the Custom Charge to a reservation. The value can contain up to 2 decimal places (ie 10.25%).
     * @type {number}
     * @memberof CustomChargeType
     */
    percentage?: number;
    /**
     * 
     * @type {CustomChargeRuleTypeType}
     * @memberof CustomChargeType
     */
    customChargeRuleType?: CustomChargeRuleTypeType;
    /**
     * Flag to indicate if the custom charge code has a posting rhythm configured or not.
     * @type {boolean}
     * @memberof CustomChargeType
     */
    customChargePostingRhythm?: boolean;
    /**
     * 
     * @type {CustomChargePostingRhythmType}
     * @memberof CustomChargeType
     */
    customChargePostingRhythmType?: CustomChargePostingRhythmType;
    /**
     * List of custom charge ranges.
     * @type {Array<CustomChargeRangeType>}
     * @memberof CustomChargeType
     */
    customChargeRanges?: Array<CustomChargeRangeType>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomChargeType
     */
    excludeTransactionCodes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomChargeType
     */
    excludePackageCodes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CustomChargeType
     */
    excludePackageGroups?: Array<string>;
    /**
     * Flag specifying if custom charge code is active or not.
     * @type {boolean}
     * @memberof CustomChargeType
     */
    active?: boolean;
}

/**
 * Check if a given object implements the CustomChargeType interface.
 */
export function instanceOfCustomChargeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomChargeTypeFromJSON(json: any): CustomChargeType {
    return CustomChargeTypeFromJSONTyped(json, false);
}

export function CustomChargeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomChargeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customChargeCode': !exists(json, 'customChargeCode') ? undefined : json['customChargeCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'dateRange': !exists(json, 'dateRange') ? undefined : DateRangeTypeFromJSON(json['dateRange']),
        'percentage': !exists(json, 'percentage') ? undefined : json['percentage'],
        'customChargeRuleType': !exists(json, 'customChargeRuleType') ? undefined : CustomChargeRuleTypeTypeFromJSON(json['customChargeRuleType']),
        'customChargePostingRhythm': !exists(json, 'customChargePostingRhythm') ? undefined : json['customChargePostingRhythm'],
        'customChargePostingRhythmType': !exists(json, 'customChargePostingRhythmType') ? undefined : CustomChargePostingRhythmTypeFromJSON(json['customChargePostingRhythmType']),
        'customChargeRanges': !exists(json, 'customChargeRanges') ? undefined : ((json['customChargeRanges'] as Array<any>).map(CustomChargeRangeTypeFromJSON)),
        'excludeTransactionCodes': !exists(json, 'excludeTransactionCodes') ? undefined : json['excludeTransactionCodes'],
        'excludePackageCodes': !exists(json, 'excludePackageCodes') ? undefined : json['excludePackageCodes'],
        'excludePackageGroups': !exists(json, 'excludePackageGroups') ? undefined : json['excludePackageGroups'],
        'active': !exists(json, 'active') ? undefined : json['active'],
    };
}

export function CustomChargeTypeToJSON(value?: CustomChargeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customChargeCode': value.customChargeCode,
        'hotelId': value.hotelId,
        'description': value.description,
        'priority': value.priority,
        'price': value.price,
        'dateRange': DateRangeTypeToJSON(value.dateRange),
        'percentage': value.percentage,
        'customChargeRuleType': CustomChargeRuleTypeTypeToJSON(value.customChargeRuleType),
        'customChargePostingRhythm': value.customChargePostingRhythm,
        'customChargePostingRhythmType': CustomChargePostingRhythmTypeToJSON(value.customChargePostingRhythmType),
        'customChargeRanges': value.customChargeRanges === undefined ? undefined : ((value.customChargeRanges as Array<any>).map(CustomChargeRangeTypeToJSON)),
        'excludeTransactionCodes': value.excludeTransactionCodes,
        'excludePackageCodes': value.excludePackageCodes,
        'excludePackageGroups': value.excludePackageGroups,
        'active': value.active,
    };
}

