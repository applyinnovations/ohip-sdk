/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RevenueNightsInfoType } from './RevenueNightsInfoType';
import {
    RevenueNightsInfoTypeFromJSON,
    RevenueNightsInfoTypeFromJSONTyped,
    RevenueNightsInfoTypeToJSON,
} from './RevenueNightsInfoType';

/**
 * Budget Forecast information for budget segment code.
 * @export
 * @interface RateCodeInformationBaseType
 */
export interface RateCodeInformationBaseType {
    /**
     * Segment code for which budget forecast information is fetched.
     * @type {string}
     * @memberof RateCodeInformationBaseType
     */
    rateCode?: string;
    /**
     * Segment code description for segment code.
     * @type {string}
     * @memberof RateCodeInformationBaseType
     */
    rateCodeDescription?: string;
    /**
     * 
     * @type {RevenueNightsInfoType}
     * @memberof RateCodeInformationBaseType
     */
    budgetRevenueInfo?: RevenueNightsInfoType;
    /**
     * 
     * @type {RevenueNightsInfoType}
     * @memberof RateCodeInformationBaseType
     */
    forecastRevenueInfo?: RevenueNightsInfoType;
}

/**
 * Check if a given object implements the RateCodeInformationBaseType interface.
 */
export function instanceOfRateCodeInformationBaseType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateCodeInformationBaseTypeFromJSON(json: any): RateCodeInformationBaseType {
    return RateCodeInformationBaseTypeFromJSONTyped(json, false);
}

export function RateCodeInformationBaseTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateCodeInformationBaseType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'rateCode': !exists(json, 'rateCode') ? undefined : json['rateCode'],
        'rateCodeDescription': !exists(json, 'rateCodeDescription') ? undefined : json['rateCodeDescription'],
        'budgetRevenueInfo': !exists(json, 'budgetRevenueInfo') ? undefined : RevenueNightsInfoTypeFromJSON(json['budgetRevenueInfo']),
        'forecastRevenueInfo': !exists(json, 'forecastRevenueInfo') ? undefined : RevenueNightsInfoTypeFromJSON(json['forecastRevenueInfo']),
    };
}

export function RateCodeInformationBaseTypeToJSON(value?: RateCodeInformationBaseType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'rateCode': value.rateCode,
        'rateCodeDescription': value.rateCodeDescription,
        'budgetRevenueInfo': RevenueNightsInfoTypeToJSON(value.budgetRevenueInfo),
        'forecastRevenueInfo': RevenueNightsInfoTypeToJSON(value.forecastRevenueInfo),
    };
}

