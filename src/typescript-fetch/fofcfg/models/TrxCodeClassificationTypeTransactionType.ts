/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionCodeTypeType } from './TransactionCodeTypeType';
import {
    TransactionCodeTypeTypeFromJSON,
    TransactionCodeTypeTypeFromJSONTyped,
    TransactionCodeTypeTypeToJSON,
} from './TransactionCodeTypeType';

/**
 * Transaction Code Type detail.
 * @export
 * @interface TrxCodeClassificationTypeTransactionType
 */
export interface TrxCodeClassificationTypeTransactionType {
    /**
     * 
     * @type {TransactionCodeTypeType}
     * @memberof TrxCodeClassificationTypeTransactionType
     */
    code?: TransactionCodeTypeType;
    /**
     * Tax Code if the transaction Code if it is of type Tax.
     * @type {number}
     * @memberof TrxCodeClassificationTypeTransactionType
     */
    taxCode?: number;
}

/**
 * Check if a given object implements the TrxCodeClassificationTypeTransactionType interface.
 */
export function instanceOfTrxCodeClassificationTypeTransactionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrxCodeClassificationTypeTransactionTypeFromJSON(json: any): TrxCodeClassificationTypeTransactionType {
    return TrxCodeClassificationTypeTransactionTypeFromJSONTyped(json, false);
}

export function TrxCodeClassificationTypeTransactionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrxCodeClassificationTypeTransactionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : TransactionCodeTypeTypeFromJSON(json['code']),
        'taxCode': !exists(json, 'taxCode') ? undefined : json['taxCode'],
    };
}

export function TrxCodeClassificationTypeTransactionTypeToJSON(value?: TrxCodeClassificationTypeTransactionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': TransactionCodeTypeTypeToJSON(value.code),
        'taxCode': value.taxCode,
    };
}

