/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DefinedNameFormatType } from './DefinedNameFormatType';
import {
    DefinedNameFormatTypeFromJSON,
    DefinedNameFormatTypeFromJSONTyped,
    DefinedNameFormatTypeToJSON,
} from './DefinedNameFormatType';

/**
 * 
 * @export
 * @interface ClassOfServiceType
 */
export interface ClassOfServiceType {
    /**
     * 
     * @type {string}
     * @memberof ClassOfServiceType
     */
    cosChkRg?: string;
    /**
     * 
     * @type {string}
     * @memberof ClassOfServiceType
     */
    cosMsgCmdRg?: string;
    /**
     * 
     * @type {string}
     * @memberof ClassOfServiceType
     */
    cosMsgLmpRg?: string;
    /**
     * Defined name format in the class of service.
     * @type {Array<DefinedNameFormatType>}
     * @memberof ClassOfServiceType
     */
    definedNameFormat?: Array<DefinedNameFormatType>;
    /**
     * 
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    guestDataChangeCo?: boolean;
    /**
     * Indicates whethe a message will be triggered when a room/reservation is placed on QUEUE
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    resvInQueue?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    roomEquipCi?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClassOfServiceType
     */
    roomEquipCo?: boolean;
    /**
     * Standard name format in the class of service.
     * @type {string}
     * @memberof ClassOfServiceType
     */
    standardNameFormat?: string;
}

/**
 * Check if a given object implements the ClassOfServiceType interface.
 */
export function instanceOfClassOfServiceType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ClassOfServiceTypeFromJSON(json: any): ClassOfServiceType {
    return ClassOfServiceTypeFromJSONTyped(json, false);
}

export function ClassOfServiceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ClassOfServiceType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cosChkRg': !exists(json, 'cosChkRg') ? undefined : json['cosChkRg'],
        'cosMsgCmdRg': !exists(json, 'cosMsgCmdRg') ? undefined : json['cosMsgCmdRg'],
        'cosMsgLmpRg': !exists(json, 'cosMsgLmpRg') ? undefined : json['cosMsgLmpRg'],
        'definedNameFormat': !exists(json, 'definedNameFormat') ? undefined : ((json['definedNameFormat'] as Array<any>).map(DefinedNameFormatTypeFromJSON)),
        'guestDataChangeCo': !exists(json, 'guestDataChangeCo') ? undefined : json['guestDataChangeCo'],
        'resvInQueue': !exists(json, 'resvInQueue') ? undefined : json['resvInQueue'],
        'roomEquipCi': !exists(json, 'roomEquipCi') ? undefined : json['roomEquipCi'],
        'roomEquipCo': !exists(json, 'roomEquipCo') ? undefined : json['roomEquipCo'],
        'standardNameFormat': !exists(json, 'standardNameFormat') ? undefined : json['standardNameFormat'],
    };
}

export function ClassOfServiceTypeToJSON(value?: ClassOfServiceType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cosChkRg': value.cosChkRg,
        'cosMsgCmdRg': value.cosMsgCmdRg,
        'cosMsgLmpRg': value.cosMsgLmpRg,
        'definedNameFormat': value.definedNameFormat === undefined ? undefined : ((value.definedNameFormat as Array<any>).map(DefinedNameFormatTypeToJSON)),
        'guestDataChangeCo': value.guestDataChangeCo,
        'resvInQueue': value.resvInQueue,
        'roomEquipCi': value.roomEquipCi,
        'roomEquipCo': value.roomEquipCo,
        'standardNameFormat': value.standardNameFormat,
    };
}

