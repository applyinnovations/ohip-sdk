/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SerialPortConfigType
 */
export interface SerialPortConfigType {
    /**
     * 
     * @type {string}
     * @memberof SerialPortConfigType
     */
    baudRate?: string;
    /**
     * 
     * @type {number}
     * @memberof SerialPortConfigType
     */
    dataBits?: number;
    /**
     * 
     * @type {string}
     * @memberof SerialPortConfigType
     */
    parity?: SerialPortConfigTypeParityEnum;
    /**
     * IP address of the interface server
     * @type {string}
     * @memberof SerialPortConfigType
     */
    portNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof SerialPortConfigType
     */
    stopBits?: number;
}


/**
 * @export
 */
export const SerialPortConfigTypeParityEnum = {
    Odd: 'Odd',
    Even: 'Even'
} as const;
export type SerialPortConfigTypeParityEnum = typeof SerialPortConfigTypeParityEnum[keyof typeof SerialPortConfigTypeParityEnum];


/**
 * Check if a given object implements the SerialPortConfigType interface.
 */
export function instanceOfSerialPortConfigType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SerialPortConfigTypeFromJSON(json: any): SerialPortConfigType {
    return SerialPortConfigTypeFromJSONTyped(json, false);
}

export function SerialPortConfigTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SerialPortConfigType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'baudRate': !exists(json, 'baudRate') ? undefined : json['baudRate'],
        'dataBits': !exists(json, 'dataBits') ? undefined : json['dataBits'],
        'parity': !exists(json, 'parity') ? undefined : json['parity'],
        'portNumber': !exists(json, 'portNumber') ? undefined : json['portNumber'],
        'stopBits': !exists(json, 'stopBits') ? undefined : json['stopBits'],
    };
}

export function SerialPortConfigTypeToJSON(value?: SerialPortConfigType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'baudRate': value.baudRate,
        'dataBits': value.dataBits,
        'parity': value.parity,
        'portNumber': value.portNumber,
        'stopBits': value.stopBits,
    };
}

