/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InterfaceControlCfgType
 */
export interface InterfaceControlCfgType {
    /**
     * Hotel Code of the hotel interface.
     * @type {string}
     * @memberof InterfaceControlCfgType
     */
    hotelId?: string;
    /**
     * Internal code of a translation configuration setup.
     * @type {number}
     * @memberof InterfaceControlCfgType
     */
    internalCode?: number;
    /**
     * Logo of the hotel interface.
     * @type {string}
     * @memberof InterfaceControlCfgType
     */
    logo?: string;
    /**
     * Merchant Id of a translation configuration setup.
     * @type {string}
     * @memberof InterfaceControlCfgType
     */
    merchantId?: string;
    /**
     * Origin code of a translation configuration setup.
     * @type {string}
     * @memberof InterfaceControlCfgType
     */
    originCode?: string;
}

/**
 * Check if a given object implements the InterfaceControlCfgType interface.
 */
export function instanceOfInterfaceControlCfgType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceControlCfgTypeFromJSON(json: any): InterfaceControlCfgType {
    return InterfaceControlCfgTypeFromJSONTyped(json, false);
}

export function InterfaceControlCfgTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceControlCfgType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'internalCode': !exists(json, 'internalCode') ? undefined : json['internalCode'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
        'merchantId': !exists(json, 'merchantId') ? undefined : json['merchantId'],
        'originCode': !exists(json, 'originCode') ? undefined : json['originCode'],
    };
}

export function InterfaceControlCfgTypeToJSON(value?: InterfaceControlCfgType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'internalCode': value.internalCode,
        'logo': value.logo,
        'merchantId': value.merchantId,
        'originCode': value.originCode,
    };
}

