/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { TaxCategoryCodeType } from './TaxCategoryCodeType';
import {
    TaxCategoryCodeTypeFromJSON,
    TaxCategoryCodeTypeFromJSONTyped,
    TaxCategoryCodeTypeToJSON,
} from './TaxCategoryCodeType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * Request object for changing Tax Category Codes.
 * @export
 * @interface TaxCategoryCodesToBeChanged
 */
export interface TaxCategoryCodesToBeChanged {
    /**
     * List of Tax Category Codes.
     * @type {Array<TaxCategoryCodeType>}
     * @memberof TaxCategoryCodesToBeChanged
     */
    taxCategoryCodes?: Array<TaxCategoryCodeType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof TaxCategoryCodesToBeChanged
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof TaxCategoryCodesToBeChanged
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the TaxCategoryCodesToBeChanged interface.
 */
export function instanceOfTaxCategoryCodesToBeChanged(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TaxCategoryCodesToBeChangedFromJSON(json: any): TaxCategoryCodesToBeChanged {
    return TaxCategoryCodesToBeChangedFromJSONTyped(json, false);
}

export function TaxCategoryCodesToBeChangedFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaxCategoryCodesToBeChanged {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taxCategoryCodes': !exists(json, 'taxCategoryCodes') ? undefined : ((json['taxCategoryCodes'] as Array<any>).map(TaxCategoryCodeTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function TaxCategoryCodesToBeChangedToJSON(value?: TaxCategoryCodesToBeChanged | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taxCategoryCodes': value.taxCategoryCodes === undefined ? undefined : ((value.taxCategoryCodes as Array<any>).map(TaxCategoryCodeTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

