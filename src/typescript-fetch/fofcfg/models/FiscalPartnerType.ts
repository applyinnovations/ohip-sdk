/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FiscalPayloadType } from './FiscalPayloadType';
import {
    FiscalPayloadTypeFromJSON,
    FiscalPayloadTypeFromJSONTyped,
    FiscalPayloadTypeToJSON,
} from './FiscalPayloadType';

/**
 * Fiscal partner Type
 * @export
 * @interface FiscalPartnerType
 */
export interface FiscalPartnerType {
    /**
     * Property code.
     * @type {string}
     * @memberof FiscalPartnerType
     */
    hotelId?: string;
    /**
     * Used for fiscal partner codes. Possible values of this pattern are 1, 101, 101.EQP, or 101.EQP.X.
     * @type {string}
     * @memberof FiscalPartnerType
     */
    partnerCode?: string;
    /**
     * Priority order for processing.
     * @type {number}
     * @memberof FiscalPartnerType
     */
    priority?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof FiscalPartnerType
     */
    paymentTypes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof FiscalPartnerType
     */
    payloadPaymentTypes?: Array<string>;
    /**
     * Payment types associated with Fiscal Partner.
     * @type {string}
     * @memberof FiscalPartnerType
     */
    fiscalFolioProfile?: string;
    /**
     * Types of payload supported by the Fiscal Partner.
     * @type {Set<FiscalPayloadType>}
     * @memberof FiscalPartnerType
     */
    fiscalPayloadTypes?: Set<FiscalPayloadType>;
    /**
     * Indicates if the folio PDF is required by the partner or not.
     * @type {boolean}
     * @memberof FiscalPartnerType
     */
    folioRequired?: boolean;
}

/**
 * Check if a given object implements the FiscalPartnerType interface.
 */
export function instanceOfFiscalPartnerType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function FiscalPartnerTypeFromJSON(json: any): FiscalPartnerType {
    return FiscalPartnerTypeFromJSONTyped(json, false);
}

export function FiscalPartnerTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiscalPartnerType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'partnerCode': !exists(json, 'partnerCode') ? undefined : json['partnerCode'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'paymentTypes': !exists(json, 'paymentTypes') ? undefined : json['paymentTypes'],
        'payloadPaymentTypes': !exists(json, 'payloadPaymentTypes') ? undefined : json['payloadPaymentTypes'],
        'fiscalFolioProfile': !exists(json, 'fiscalFolioProfile') ? undefined : json['fiscalFolioProfile'],
        'fiscalPayloadTypes': !exists(json, 'fiscalPayloadTypes') ? undefined : (new Set((json['fiscalPayloadTypes'] as Array<any>).map(FiscalPayloadTypeFromJSON))),
        'folioRequired': !exists(json, 'folioRequired') ? undefined : json['folioRequired'],
    };
}

export function FiscalPartnerTypeToJSON(value?: FiscalPartnerType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'partnerCode': value.partnerCode,
        'priority': value.priority,
        'paymentTypes': value.paymentTypes,
        'payloadPaymentTypes': value.payloadPaymentTypes,
        'fiscalFolioProfile': value.fiscalFolioProfile,
        'fiscalPayloadTypes': value.fiscalPayloadTypes === undefined ? undefined : (Array.from(value.fiscalPayloadTypes as Set<any>).map(FiscalPayloadTypeToJSON)),
        'folioRequired': value.folioRequired,
    };
}

