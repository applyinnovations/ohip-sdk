/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CopyConfigurationCodeType } from './CopyConfigurationCodeType';
import {
    CopyConfigurationCodeTypeFromJSON,
    CopyConfigurationCodeTypeFromJSONTyped,
    CopyConfigurationCodeTypeToJSON,
} from './CopyConfigurationCodeType';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface CopyExpenseArrangementCodesRequest
 */
export interface CopyExpenseArrangementCodesRequest {
    /**
     * List of the expense arrangement codes to be copied.
     * @type {Array<CopyConfigurationCodeType>}
     * @memberof CopyExpenseArrangementCodesRequest
     */
    expenseArrangementCode?: Array<CopyConfigurationCodeType>;
    /**
     * 
     * @type {Links}
     * @memberof CopyExpenseArrangementCodesRequest
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof CopyExpenseArrangementCodesRequest
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the CopyExpenseArrangementCodesRequest interface.
 */
export function instanceOfCopyExpenseArrangementCodesRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyExpenseArrangementCodesRequestFromJSON(json: any): CopyExpenseArrangementCodesRequest {
    return CopyExpenseArrangementCodesRequestFromJSONTyped(json, false);
}

export function CopyExpenseArrangementCodesRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyExpenseArrangementCodesRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'expenseArrangementCode': !exists(json, 'expenseArrangementCode') ? undefined : ((json['expenseArrangementCode'] as Array<any>).map(CopyConfigurationCodeTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function CopyExpenseArrangementCodesRequestToJSON(value?: CopyExpenseArrangementCodesRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'expenseArrangementCode': value.expenseArrangementCode === undefined ? undefined : ((value.expenseArrangementCode as Array<any>).map(CopyConfigurationCodeTypeToJSON)),
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

