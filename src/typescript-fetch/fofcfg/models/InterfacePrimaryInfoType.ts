/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelInterfaceTypeType } from './HotelInterfaceTypeType';
import {
    HotelInterfaceTypeTypeFromJSON,
    HotelInterfaceTypeTypeFromJSONTyped,
    HotelInterfaceTypeTypeToJSON,
} from './HotelInterfaceTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * 
 * @export
 * @interface InterfacePrimaryInfoType
 */
export interface InterfacePrimaryInfoType {
    /**
     * Hotel Code
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceId?: UniqueIDType;
    /**
     * Name of the Hotel Interface
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceName?: string;
    /**
     * FKT Logo required for the external interface.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceProductCode?: string;
    /**
     * 
     * @type {HotelInterfaceTypeType}
     * @memberof InterfacePrimaryInfoType
     */
    interfaceType?: HotelInterfaceTypeType;
    /**
     * Interface License code
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    licenseCode?: string;
    /**
     * Hotel Interface Logo. On the database, this is also referred as DBF Logo. This is a three letter code followed by an underscore(_). This tells us which DBF files and log files with the prefix that IFC7 is going to create.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    logo?: string;
    /**
     * The ID stored in IFC_MACHINES table.
     * @type {number}
     * @memberof InterfacePrimaryInfoType
     */
    machineId?: number;
    /**
     * Unique machine name of the running IFC.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    machineName?: string;
    /**
     * Three letter code that uniquely identifies the external interface.
     * @type {string}
     * @memberof InterfacePrimaryInfoType
     */
    productCode?: string;
}

/**
 * Check if a given object implements the InterfacePrimaryInfoType interface.
 */
export function instanceOfInterfacePrimaryInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfacePrimaryInfoTypeFromJSON(json: any): InterfacePrimaryInfoType {
    return InterfacePrimaryInfoTypeFromJSONTyped(json, false);
}

export function InterfacePrimaryInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfacePrimaryInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'interfaceId': !exists(json, 'interfaceId') ? undefined : UniqueIDTypeFromJSON(json['interfaceId']),
        'interfaceName': !exists(json, 'interfaceName') ? undefined : json['interfaceName'],
        'interfaceProductCode': !exists(json, 'interfaceProductCode') ? undefined : json['interfaceProductCode'],
        'interfaceType': !exists(json, 'interfaceType') ? undefined : HotelInterfaceTypeTypeFromJSON(json['interfaceType']),
        'licenseCode': !exists(json, 'licenseCode') ? undefined : json['licenseCode'],
        'logo': !exists(json, 'logo') ? undefined : json['logo'],
        'machineId': !exists(json, 'machineId') ? undefined : json['machineId'],
        'machineName': !exists(json, 'machineName') ? undefined : json['machineName'],
        'productCode': !exists(json, 'productCode') ? undefined : json['productCode'],
    };
}

export function InterfacePrimaryInfoTypeToJSON(value?: InterfacePrimaryInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'interfaceId': UniqueIDTypeToJSON(value.interfaceId),
        'interfaceName': value.interfaceName,
        'interfaceProductCode': value.interfaceProductCode,
        'interfaceType': HotelInterfaceTypeTypeToJSON(value.interfaceType),
        'licenseCode': value.licenseCode,
        'logo': value.logo,
        'machineId': value.machineId,
        'machineName': value.machineName,
        'productCode': value.productCode,
    };
}

