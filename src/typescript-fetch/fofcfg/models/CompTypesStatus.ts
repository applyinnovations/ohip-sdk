/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Existing Operations Responses will eventually be modified to be extended from this type.
 * @export
 * @interface CompTypesStatus
 */
export interface CompTypesStatus {
    /**
     * 
     * @type {Links}
     * @memberof CompTypesStatus
     */
    links?: Links;
    /**
     * 
     * @type {WarningsType}
     * @memberof CompTypesStatus
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the CompTypesStatus interface.
 */
export function instanceOfCompTypesStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CompTypesStatusFromJSON(json: any): CompTypesStatus {
    return CompTypesStatusFromJSONTyped(json, false);
}

export function CompTypesStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompTypesStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function CompTypesStatusToJSON(value?: CompTypesStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

