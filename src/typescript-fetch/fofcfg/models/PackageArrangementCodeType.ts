/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';

/**
 * Generic Type to specify unique/primary id for the code. mostly used for Hotel level configuration codes removal request.
 * @export
 * @interface PackageArrangementCodeType
 */
export interface PackageArrangementCodeType {
    /**
     * Hotel where the code is configured.
     * @type {string}
     * @memberof PackageArrangementCodeType
     */
    hotelId?: string;
    /**
     * Configuration code.
     * @type {string}
     * @memberof PackageArrangementCodeType
     */
    code?: string;
    /**
     * Primay key of arrangement codes
     * @type {number}
     * @memberof PackageArrangementCodeType
     */
    arrangementId?: number;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof PackageArrangementCodeType
     */
    description?: TranslationTextType2000;
    /**
     * information about the tax type code linked to the folio arrangment Code.
     * @type {string}
     * @memberof PackageArrangementCodeType
     */
    taxTypeCode?: string;
    /**
     * specify whether the arrangement postings are classed as revenue.
     * @type {boolean}
     * @memberof PackageArrangementCodeType
     */
    revenue?: boolean;
    /**
     * Represents whether the package arrangement code is inactive or not
     * @type {boolean}
     * @memberof PackageArrangementCodeType
     */
    inactive?: boolean;
}

/**
 * Check if a given object implements the PackageArrangementCodeType interface.
 */
export function instanceOfPackageArrangementCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PackageArrangementCodeTypeFromJSON(json: any): PackageArrangementCodeType {
    return PackageArrangementCodeTypeFromJSONTyped(json, false);
}

export function PackageArrangementCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PackageArrangementCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'arrangementId': !exists(json, 'arrangementId') ? undefined : json['arrangementId'],
        'description': !exists(json, 'description') ? undefined : TranslationTextType2000FromJSON(json['description']),
        'taxTypeCode': !exists(json, 'taxTypeCode') ? undefined : json['taxTypeCode'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
    };
}

export function PackageArrangementCodeTypeToJSON(value?: PackageArrangementCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'code': value.code,
        'arrangementId': value.arrangementId,
        'description': TranslationTextType2000ToJSON(value.description),
        'taxTypeCode': value.taxTypeCode,
        'revenue': value.revenue,
        'inactive': value.inactive,
    };
}

