/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Voucher details.
 * @export
 * @interface VoucherType
 */
export interface VoucherType {
    /**
     * Unique internal ID of the voucher
     * @type {number}
     * @memberof VoucherType
     */
    voucherId?: number;
    /**
     * Membership type
     * @type {string}
     * @memberof VoucherType
     */
    membershipType?: string;
    /**
     * Membership level
     * @type {string}
     * @memberof VoucherType
     */
    membershipLevel?: string;
    /**
     * Start date
     * @type {string}
     * @memberof VoucherType
     */
    startDate?: string;
    /**
     * End date
     * @type {string}
     * @memberof VoucherType
     */
    endDate?: string;
    /**
     * Voucher amount
     * @type {number}
     * @memberof VoucherType
     */
    amount?: number;
    /**
     * Unique ID of the hotel in OPERA
     * @type {string}
     * @memberof VoucherType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the VoucherType interface.
 */
export function instanceOfVoucherType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VoucherTypeFromJSON(json: any): VoucherType {
    return VoucherTypeFromJSONTyped(json, false);
}

export function VoucherTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): VoucherType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'voucherId': !exists(json, 'voucherId') ? undefined : json['voucherId'],
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'membershipLevel': !exists(json, 'membershipLevel') ? undefined : json['membershipLevel'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function VoucherTypeToJSON(value?: VoucherType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'voucherId': value.voucherId,
        'membershipType': value.membershipType,
        'membershipLevel': value.membershipLevel,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'amount': value.amount,
        'hotelId': value.hotelId,
    };
}

