/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MonthlyRevenueNightsVarianceInfoType } from './MonthlyRevenueNightsVarianceInfoType';
import {
    MonthlyRevenueNightsVarianceInfoTypeFromJSON,
    MonthlyRevenueNightsVarianceInfoTypeFromJSONTyped,
    MonthlyRevenueNightsVarianceInfoTypeToJSON,
} from './MonthlyRevenueNightsVarianceInfoType';
import type { RevenueNightsInfoType } from './RevenueNightsInfoType';
import {
    RevenueNightsInfoTypeFromJSON,
    RevenueNightsInfoTypeFromJSONTyped,
    RevenueNightsInfoTypeToJSON,
} from './RevenueNightsInfoType';

/**
 * Budget Forecast information for segment.
 * @export
 * @interface RateCodeTotalInformationType
 */
export interface RateCodeTotalInformationType {
    /**
     * 
     * @type {RevenueNightsInfoType}
     * @memberof RateCodeTotalInformationType
     */
    budgetTotalInfo?: RevenueNightsInfoType;
    /**
     * 
     * @type {RevenueNightsInfoType}
     * @memberof RateCodeTotalInformationType
     */
    forecastTotalInfo?: RevenueNightsInfoType;
    /**
     * 
     * @type {RevenueNightsInfoType}
     * @memberof RateCodeTotalInformationType
     */
    actualTotalInfo?: RevenueNightsInfoType;
    /**
     * Monthly Revenue Variance information.
     * @type {Array<MonthlyRevenueNightsVarianceInfoType>}
     * @memberof RateCodeTotalInformationType
     */
    aFVarianceTotalInfo?: Array<MonthlyRevenueNightsVarianceInfoType>;
    /**
     * Monthly Revenue Variance information.
     * @type {Array<MonthlyRevenueNightsVarianceInfoType>}
     * @memberof RateCodeTotalInformationType
     */
    aBVarianceTotalInfo?: Array<MonthlyRevenueNightsVarianceInfoType>;
    /**
     * Monthly Revenue Variance information.
     * @type {Array<MonthlyRevenueNightsVarianceInfoType>}
     * @memberof RateCodeTotalInformationType
     */
    fBVarianceTotalInfo?: Array<MonthlyRevenueNightsVarianceInfoType>;
}

/**
 * Check if a given object implements the RateCodeTotalInformationType interface.
 */
export function instanceOfRateCodeTotalInformationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateCodeTotalInformationTypeFromJSON(json: any): RateCodeTotalInformationType {
    return RateCodeTotalInformationTypeFromJSONTyped(json, false);
}

export function RateCodeTotalInformationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateCodeTotalInformationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'budgetTotalInfo': !exists(json, 'budgetTotalInfo') ? undefined : RevenueNightsInfoTypeFromJSON(json['budgetTotalInfo']),
        'forecastTotalInfo': !exists(json, 'forecastTotalInfo') ? undefined : RevenueNightsInfoTypeFromJSON(json['forecastTotalInfo']),
        'actualTotalInfo': !exists(json, 'actualTotalInfo') ? undefined : RevenueNightsInfoTypeFromJSON(json['actualTotalInfo']),
        'aFVarianceTotalInfo': !exists(json, 'aFVarianceTotalInfo') ? undefined : ((json['aFVarianceTotalInfo'] as Array<any>).map(MonthlyRevenueNightsVarianceInfoTypeFromJSON)),
        'aBVarianceTotalInfo': !exists(json, 'aBVarianceTotalInfo') ? undefined : ((json['aBVarianceTotalInfo'] as Array<any>).map(MonthlyRevenueNightsVarianceInfoTypeFromJSON)),
        'fBVarianceTotalInfo': !exists(json, 'fBVarianceTotalInfo') ? undefined : ((json['fBVarianceTotalInfo'] as Array<any>).map(MonthlyRevenueNightsVarianceInfoTypeFromJSON)),
    };
}

export function RateCodeTotalInformationTypeToJSON(value?: RateCodeTotalInformationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'budgetTotalInfo': RevenueNightsInfoTypeToJSON(value.budgetTotalInfo),
        'forecastTotalInfo': RevenueNightsInfoTypeToJSON(value.forecastTotalInfo),
        'actualTotalInfo': RevenueNightsInfoTypeToJSON(value.actualTotalInfo),
        'aFVarianceTotalInfo': value.aFVarianceTotalInfo === undefined ? undefined : ((value.aFVarianceTotalInfo as Array<any>).map(MonthlyRevenueNightsVarianceInfoTypeToJSON)),
        'aBVarianceTotalInfo': value.aBVarianceTotalInfo === undefined ? undefined : ((value.aBVarianceTotalInfo as Array<any>).map(MonthlyRevenueNightsVarianceInfoTypeToJSON)),
        'fBVarianceTotalInfo': value.fBVarianceTotalInfo === undefined ? undefined : ((value.fBVarianceTotalInfo as Array<any>).map(MonthlyRevenueNightsVarianceInfoTypeToJSON)),
    };
}

