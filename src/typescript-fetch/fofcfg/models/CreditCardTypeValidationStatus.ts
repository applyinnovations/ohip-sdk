/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { ReservationPaymentMethodType } from './ReservationPaymentMethodType';
import {
    ReservationPaymentMethodTypeFromJSON,
    ReservationPaymentMethodTypeFromJSONTyped,
    ReservationPaymentMethodTypeToJSON,
} from './ReservationPaymentMethodType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface CreditCardTypeValidationStatus
 */
export interface CreditCardTypeValidationStatus {
    /**
     * 
     * @type {Links}
     * @memberof CreditCardTypeValidationStatus
     */
    links?: Links;
    /**
     * A flag indicating whether the credit card number meets its vendor's format requirements
     * @type {boolean}
     * @memberof CreditCardTypeValidationStatus
     */
    valid?: boolean;
    /**
     * 
     * @type {ReservationPaymentMethodType}
     * @memberof CreditCardTypeValidationStatus
     */
    validatedPaymentMethod?: ReservationPaymentMethodType;
    /**
     * 
     * @type {WarningsType}
     * @memberof CreditCardTypeValidationStatus
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the CreditCardTypeValidationStatus interface.
 */
export function instanceOfCreditCardTypeValidationStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CreditCardTypeValidationStatusFromJSON(json: any): CreditCardTypeValidationStatus {
    return CreditCardTypeValidationStatusFromJSONTyped(json, false);
}

export function CreditCardTypeValidationStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreditCardTypeValidationStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'valid': !exists(json, 'valid') ? undefined : json['valid'],
        'validatedPaymentMethod': !exists(json, 'validatedPaymentMethod') ? undefined : ReservationPaymentMethodTypeFromJSON(json['validatedPaymentMethod']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function CreditCardTypeValidationStatusToJSON(value?: CreditCardTypeValidationStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'valid': value.valid,
        'validatedPaymentMethod': ReservationPaymentMethodTypeToJSON(value.validatedPaymentMethod),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

