/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Defines the buckets the generated amount can be added to.
 * @export
 * @interface GenerateCalculationBucketsType
 */
export interface GenerateCalculationBucketsType {
    /**
     * Generate Calculation Bucket1.
     * @type {boolean}
     * @memberof GenerateCalculationBucketsType
     */
    bucket1?: boolean;
    /**
     * Generate Calculation Bucket2.
     * @type {boolean}
     * @memberof GenerateCalculationBucketsType
     */
    bucket2?: boolean;
    /**
     * Generate Calculation Bucket3.
     * @type {boolean}
     * @memberof GenerateCalculationBucketsType
     */
    bucket3?: boolean;
}

/**
 * Check if a given object implements the GenerateCalculationBucketsType interface.
 */
export function instanceOfGenerateCalculationBucketsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GenerateCalculationBucketsTypeFromJSON(json: any): GenerateCalculationBucketsType {
    return GenerateCalculationBucketsTypeFromJSONTyped(json, false);
}

export function GenerateCalculationBucketsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GenerateCalculationBucketsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bucket1': !exists(json, 'bucket1') ? undefined : json['bucket1'],
        'bucket2': !exists(json, 'bucket2') ? undefined : json['bucket2'],
        'bucket3': !exists(json, 'bucket3') ? undefined : json['bucket3'],
    };
}

export function GenerateCalculationBucketsTypeToJSON(value?: GenerateCalculationBucketsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bucket1': value.bucket1,
        'bucket2': value.bucket2,
        'bucket3': value.bucket3,
    };
}

