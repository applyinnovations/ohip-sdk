/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information that uniquely identifies template transaction subgroups
 * @export
 * @interface TemplateTransactionSubgroupIDType
 */
export interface TemplateTransactionSubgroupIDType {
    /**
     * Template transaction subgroup configuration code
     * @type {string}
     * @memberof TemplateTransactionSubgroupIDType
     */
    subgroup?: string;
    /**
     * Template transaction group configuration code
     * @type {string}
     * @memberof TemplateTransactionSubgroupIDType
     */
    group?: string;
}

/**
 * Check if a given object implements the TemplateTransactionSubgroupIDType interface.
 */
export function instanceOfTemplateTransactionSubgroupIDType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TemplateTransactionSubgroupIDTypeFromJSON(json: any): TemplateTransactionSubgroupIDType {
    return TemplateTransactionSubgroupIDTypeFromJSONTyped(json, false);
}

export function TemplateTransactionSubgroupIDTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateTransactionSubgroupIDType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subgroup': !exists(json, 'subgroup') ? undefined : json['subgroup'],
        'group': !exists(json, 'group') ? undefined : json['group'],
    };
}

export function TemplateTransactionSubgroupIDTypeToJSON(value?: TemplateTransactionSubgroupIDType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subgroup': value.subgroup,
        'group': value.group,
    };
}

