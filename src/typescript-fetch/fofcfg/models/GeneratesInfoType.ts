/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GenerateInfoType } from './GenerateInfoType';
import {
    GenerateInfoTypeFromJSON,
    GenerateInfoTypeFromJSONTyped,
    GenerateInfoTypeToJSON,
} from './GenerateInfoType';

/**
 * Defines Generates Info.
 * @export
 * @interface GeneratesInfoType
 */
export interface GeneratesInfoType {
    /**
     * Defines Generates Info
     * @type {Array<GenerateInfoType>}
     * @memberof GeneratesInfoType
     */
    generates?: Array<GenerateInfoType>;
}

/**
 * Check if a given object implements the GeneratesInfoType interface.
 */
export function instanceOfGeneratesInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GeneratesInfoTypeFromJSON(json: any): GeneratesInfoType {
    return GeneratesInfoTypeFromJSONTyped(json, false);
}

export function GeneratesInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeneratesInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'generates': !exists(json, 'generates') ? undefined : ((json['generates'] as Array<any>).map(GenerateInfoTypeFromJSON)),
    };
}

export function GeneratesInfoTypeToJSON(value?: GeneratesInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'generates': value.generates === undefined ? undefined : ((value.generates as Array<any>).map(GenerateInfoTypeToJSON)),
    };
}

