/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CateringOnlyType } from './CateringOnlyType';
import {
    CateringOnlyTypeFromJSON,
    CateringOnlyTypeFromJSONTyped,
    CateringOnlyTypeToJSON,
} from './CateringOnlyType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Type used for Revenue Type mapping.
 * @export
 * @interface CopyRevenueTypeMappingListType
 */
export interface CopyRevenueTypeMappingListType {
    /**
     * 
     * @type {CateringOnlyType}
     * @memberof CopyRevenueTypeMappingListType
     */
    cateringOnly?: CateringOnlyType;
    /**
     * 
     * @type {Array<string>}
     * @memberof CopyRevenueTypeMappingListType
     */
    eventList?: Array<string>;
    /**
     * Provides information about the Event Type.
     * @type {string}
     * @memberof CopyRevenueTypeMappingListType
     */
    eventType?: string;
    /**
     * Hotel Code to which the Revenue Type Mapping belongs to.
     * @type {string}
     * @memberof CopyRevenueTypeMappingListType
     */
    hotelId?: string;
    /**
     * This flag will notify the service that transactional postings will not be returned.
     * @type {boolean}
     * @memberof CopyRevenueTypeMappingListType
     */
    isCateringOnly?: boolean;
    /**
     * This flag will notify the service that transactional postings will not be returned.
     * @type {boolean}
     * @memberof CopyRevenueTypeMappingListType
     */
    isEventType?: boolean;
    /**
     * This flag will notify the service that transactional postings will not be returned.
     * @type {boolean}
     * @memberof CopyRevenueTypeMappingListType
     */
    isSpace?: boolean;
    /**
     * Provides information about the Revenue Type.
     * @type {string}
     * @memberof CopyRevenueTypeMappingListType
     */
    revenueType?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof CopyRevenueTypeMappingListType
     */
    revenueTypeMappingId?: UniqueIDType;
    /**
     * Service Charge for the Revenue Type.
     * @type {number}
     * @memberof CopyRevenueTypeMappingListType
     */
    serviceCharge?: number;
    /**
     * Service Charge for the Revenue Type.
     * @type {string}
     * @memberof CopyRevenueTypeMappingListType
     */
    serviceChargeCalulationMethod?: string;
    /**
     * Service Charge for the Revenue Type.
     * @type {string}
     * @memberof CopyRevenueTypeMappingListType
     */
    serviceChargeTrxCode?: string;
    /**
     * Provides information about the Space/Location for the Revenue Type.
     * @type {string}
     * @memberof CopyRevenueTypeMappingListType
     */
    space?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CopyRevenueTypeMappingListType
     */
    spaceList?: Array<string>;
    /**
     * Transaction code for the Revenue Type.
     * @type {string}
     * @memberof CopyRevenueTypeMappingListType
     */
    transactionCode?: string;
}

/**
 * Check if a given object implements the CopyRevenueTypeMappingListType interface.
 */
export function instanceOfCopyRevenueTypeMappingListType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CopyRevenueTypeMappingListTypeFromJSON(json: any): CopyRevenueTypeMappingListType {
    return CopyRevenueTypeMappingListTypeFromJSONTyped(json, false);
}

export function CopyRevenueTypeMappingListTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopyRevenueTypeMappingListType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cateringOnly': !exists(json, 'cateringOnly') ? undefined : CateringOnlyTypeFromJSON(json['cateringOnly']),
        'eventList': !exists(json, 'eventList') ? undefined : json['eventList'],
        'eventType': !exists(json, 'eventType') ? undefined : json['eventType'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'isCateringOnly': !exists(json, 'isCateringOnly') ? undefined : json['isCateringOnly'],
        'isEventType': !exists(json, 'isEventType') ? undefined : json['isEventType'],
        'isSpace': !exists(json, 'isSpace') ? undefined : json['isSpace'],
        'revenueType': !exists(json, 'revenueType') ? undefined : json['revenueType'],
        'revenueTypeMappingId': !exists(json, 'revenueTypeMappingId') ? undefined : UniqueIDTypeFromJSON(json['revenueTypeMappingId']),
        'serviceCharge': !exists(json, 'serviceCharge') ? undefined : json['serviceCharge'],
        'serviceChargeCalulationMethod': !exists(json, 'serviceChargeCalulationMethod') ? undefined : json['serviceChargeCalulationMethod'],
        'serviceChargeTrxCode': !exists(json, 'serviceChargeTrxCode') ? undefined : json['serviceChargeTrxCode'],
        'space': !exists(json, 'space') ? undefined : json['space'],
        'spaceList': !exists(json, 'spaceList') ? undefined : json['spaceList'],
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
    };
}

export function CopyRevenueTypeMappingListTypeToJSON(value?: CopyRevenueTypeMappingListType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cateringOnly': CateringOnlyTypeToJSON(value.cateringOnly),
        'eventList': value.eventList,
        'eventType': value.eventType,
        'hotelId': value.hotelId,
        'isCateringOnly': value.isCateringOnly,
        'isEventType': value.isEventType,
        'isSpace': value.isSpace,
        'revenueType': value.revenueType,
        'revenueTypeMappingId': UniqueIDTypeToJSON(value.revenueTypeMappingId),
        'serviceCharge': value.serviceCharge,
        'serviceChargeCalulationMethod': value.serviceChargeCalulationMethod,
        'serviceChargeTrxCode': value.serviceChargeTrxCode,
        'space': value.space,
        'spaceList': value.spaceList,
        'transactionCode': value.transactionCode,
    };
}

