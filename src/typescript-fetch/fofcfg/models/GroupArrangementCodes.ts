/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GroupArrangementCodeType } from './GroupArrangementCodeType';
import {
    GroupArrangementCodeTypeFromJSON,
    GroupArrangementCodeTypeFromJSONTyped,
    GroupArrangementCodeTypeToJSON,
} from './GroupArrangementCodeType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface GroupArrangementCodes
 */
export interface GroupArrangementCodes {
    /**
     * Details for group arrangement code along with associated transaction codes.
     * @type {Array<GroupArrangementCodeType>}
     * @memberof GroupArrangementCodes
     */
    groupArrangementCodes?: Array<GroupArrangementCodeType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof GroupArrangementCodes
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof GroupArrangementCodes
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the GroupArrangementCodes interface.
 */
export function instanceOfGroupArrangementCodes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GroupArrangementCodesFromJSON(json: any): GroupArrangementCodes {
    return GroupArrangementCodesFromJSONTyped(json, false);
}

export function GroupArrangementCodesFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupArrangementCodes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groupArrangementCodes': !exists(json, 'groupArrangementCodes') ? undefined : ((json['groupArrangementCodes'] as Array<any>).map(GroupArrangementCodeTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function GroupArrangementCodesToJSON(value?: GroupArrangementCodes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groupArrangementCodes': value.groupArrangementCodes === undefined ? undefined : ((value.groupArrangementCodes as Array<any>).map(GroupArrangementCodeTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

