/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BudgetInfoDeleteType } from './BudgetInfoDeleteType';
import {
    BudgetInfoDeleteTypeFromJSON,
    BudgetInfoDeleteTypeFromJSONTyped,
    BudgetInfoDeleteTypeToJSON,
} from './BudgetInfoDeleteType';
import type { CodeListType } from './CodeListType';
import {
    CodeListTypeFromJSON,
    CodeListTypeFromJSONTyped,
    CodeListTypeToJSON,
} from './CodeListType';
import type { MonthNoType } from './MonthNoType';
import {
    MonthNoTypeFromJSON,
    MonthNoTypeFromJSONTyped,
    MonthNoTypeToJSON,
} from './MonthNoType';
import type { SegmentNameType } from './SegmentNameType';
import {
    SegmentNameTypeFromJSON,
    SegmentNameTypeFromJSONTyped,
    SegmentNameTypeToJSON,
} from './SegmentNameType';

/**
 * Holds segment code information to delete.
 * @export
 * @interface DeleteSegmentCodeInfoType
 */
export interface DeleteSegmentCodeInfoType {
    /**
     * Flag to include Budget revenue/nights information.
     * @type {boolean}
     * @memberof DeleteSegmentCodeInfoType
     */
    budget?: boolean;
    /**
     * 
     * @type {MonthNoType}
     * @memberof DeleteSegmentCodeInfoType
     */
    budgetMonth?: MonthNoType;
    /**
     * 
     * @type {BudgetInfoDeleteType}
     * @memberof DeleteSegmentCodeInfoType
     */
    deleteInformation?: BudgetInfoDeleteType;
    /**
     * Flag to include Forecast revenue/nights information.
     * @type {boolean}
     * @memberof DeleteSegmentCodeInfoType
     */
    forecast?: boolean;
    /**
     * 
     * @type {SegmentNameType}
     * @memberof DeleteSegmentCodeInfoType
     */
    segment?: SegmentNameType;
    /**
     * 
     * @type {CodeListType}
     * @memberof DeleteSegmentCodeInfoType
     */
    segmentCode?: CodeListType;
    /**
     * segment code group.
     * @type {string}
     * @memberof DeleteSegmentCodeInfoType
     */
    segmentCodeGroup?: string;
}

/**
 * Check if a given object implements the DeleteSegmentCodeInfoType interface.
 */
export function instanceOfDeleteSegmentCodeInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DeleteSegmentCodeInfoTypeFromJSON(json: any): DeleteSegmentCodeInfoType {
    return DeleteSegmentCodeInfoTypeFromJSONTyped(json, false);
}

export function DeleteSegmentCodeInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeleteSegmentCodeInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'budget': !exists(json, 'budget') ? undefined : json['budget'],
        'budgetMonth': !exists(json, 'budgetMonth') ? undefined : MonthNoTypeFromJSON(json['budgetMonth']),
        'deleteInformation': !exists(json, 'deleteInformation') ? undefined : BudgetInfoDeleteTypeFromJSON(json['deleteInformation']),
        'forecast': !exists(json, 'forecast') ? undefined : json['forecast'],
        'segment': !exists(json, 'segment') ? undefined : SegmentNameTypeFromJSON(json['segment']),
        'segmentCode': !exists(json, 'segmentCode') ? undefined : CodeListTypeFromJSON(json['segmentCode']),
        'segmentCodeGroup': !exists(json, 'segmentCodeGroup') ? undefined : json['segmentCodeGroup'],
    };
}

export function DeleteSegmentCodeInfoTypeToJSON(value?: DeleteSegmentCodeInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'budget': value.budget,
        'budgetMonth': MonthNoTypeToJSON(value.budgetMonth),
        'deleteInformation': BudgetInfoDeleteTypeToJSON(value.deleteInformation),
        'forecast': value.forecast,
        'segment': SegmentNameTypeToJSON(value.segment),
        'segmentCode': CodeListTypeToJSON(value.segmentCode),
        'segmentCodeGroup': value.segmentCodeGroup,
    };
}

