/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CashieringTransactionTypeType } from './CashieringTransactionTypeType';
import {
    CashieringTransactionTypeTypeFromJSON,
    CashieringTransactionTypeTypeFromJSONTyped,
    CashieringTransactionTypeTypeToJSON,
} from './CashieringTransactionTypeType';
import type { ManagedByOptions } from './ManagedByOptions';
import {
    ManagedByOptionsFromJSON,
    ManagedByOptionsFromJSONTyped,
    ManagedByOptionsToJSON,
} from './ManagedByOptions';

/**
 * Transaction Group configuration information.
 * @export
 * @interface TransactionGroupType
 */
export interface TransactionGroupType {
    /**
     * Description of the Transaction Group.
     * @type {string}
     * @memberof TransactionGroupType
     */
    description?: string;
    /**
     * Display sequence for the code type.
     * @type {number}
     * @memberof TransactionGroupType
     */
    sequence?: number;
    /**
     * Transaction Group Configuration Code.
     * @type {string}
     * @memberof TransactionGroupType
     */
    code?: string;
    /**
     * 
     * @type {CashieringTransactionTypeType}
     * @memberof TransactionGroupType
     */
    type?: CashieringTransactionTypeType;
    /**
     * 
     * @type {ManagedByOptions}
     * @memberof TransactionGroupType
     */
    managedBy?: ManagedByOptions;
}

/**
 * Check if a given object implements the TransactionGroupType interface.
 */
export function instanceOfTransactionGroupType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionGroupTypeFromJSON(json: any): TransactionGroupType {
    return TransactionGroupTypeFromJSONTyped(json, false);
}

export function TransactionGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionGroupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'type': !exists(json, 'type') ? undefined : CashieringTransactionTypeTypeFromJSON(json['type']),
        'managedBy': !exists(json, 'managedBy') ? undefined : ManagedByOptionsFromJSON(json['managedBy']),
    };
}

export function TransactionGroupTypeToJSON(value?: TransactionGroupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'sequence': value.sequence,
        'code': value.code,
        'type': CashieringTransactionTypeTypeToJSON(value.type),
        'managedBy': ManagedByOptionsToJSON(value.managedBy),
    };
}

