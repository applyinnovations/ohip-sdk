/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { TrackItTypesConfigType } from './TrackItTypesConfigType';
import {
    TrackItTypesConfigTypeFromJSON,
    TrackItTypesConfigTypeFromJSONTyped,
    TrackItTypesConfigTypeToJSON,
} from './TrackItTypesConfigType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * Request object for creating new Track it Types.
 * @export
 * @interface TrackItTypesCriteria
 */
export interface TrackItTypesCriteria {
    /**
     * 
     * @type {Links}
     * @memberof TrackItTypesCriteria
     */
    links?: Links;
    /**
     * 
     * @type {TrackItTypesConfigType}
     * @memberof TrackItTypesCriteria
     */
    trackItTypes?: TrackItTypesConfigType;
    /**
     * 
     * @type {WarningsType}
     * @memberof TrackItTypesCriteria
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the TrackItTypesCriteria interface.
 */
export function instanceOfTrackItTypesCriteria(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrackItTypesCriteriaFromJSON(json: any): TrackItTypesCriteria {
    return TrackItTypesCriteriaFromJSONTyped(json, false);
}

export function TrackItTypesCriteriaFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackItTypesCriteria {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'trackItTypes': !exists(json, 'trackItTypes') ? undefined : TrackItTypesConfigTypeFromJSON(json['trackItTypes']),
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function TrackItTypesCriteriaToJSON(value?: TrackItTypesCriteria | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': LinksToJSON(value.links),
        'trackItTypes': TrackItTypesConfigTypeToJSON(value.trackItTypes),
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

