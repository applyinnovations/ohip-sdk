/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * This gives information of export detail of a hotel interface.
 * @export
 * @interface InterfaceExportDataDetailType
 */
export interface InterfaceExportDataDetailType {
    /**
     * Specifies the column name found in the table.
     * @type {string}
     * @memberof InterfaceExportDataDetailType
     */
    columnName?: string;
    /**
     * Specifies whether the column is chosen to be included in the export.
     * @type {boolean}
     * @memberof InterfaceExportDataDetailType
     */
    columnSelected?: boolean;
    /**
     * Specifies the length of data in the column.
     * @type {number}
     * @memberof InterfaceExportDataDetailType
     */
    dataLength?: number;
    /**
     * Specifies the type of data in the column.
     * @type {string}
     * @memberof InterfaceExportDataDetailType
     */
    dataType?: string;
    /**
     * Specifies the table where the event data is stored.
     * @type {string}
     * @memberof InterfaceExportDataDetailType
     */
    sourceTableName?: string;
    /**
     * Specifies the tag name found in the export.
     * @type {string}
     * @memberof InterfaceExportDataDetailType
     */
    xMLTagName?: string;
}

/**
 * Check if a given object implements the InterfaceExportDataDetailType interface.
 */
export function instanceOfInterfaceExportDataDetailType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InterfaceExportDataDetailTypeFromJSON(json: any): InterfaceExportDataDetailType {
    return InterfaceExportDataDetailTypeFromJSONTyped(json, false);
}

export function InterfaceExportDataDetailTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): InterfaceExportDataDetailType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'columnName': !exists(json, 'columnName') ? undefined : json['columnName'],
        'columnSelected': !exists(json, 'columnSelected') ? undefined : json['columnSelected'],
        'dataLength': !exists(json, 'dataLength') ? undefined : json['dataLength'],
        'dataType': !exists(json, 'dataType') ? undefined : json['dataType'],
        'sourceTableName': !exists(json, 'sourceTableName') ? undefined : json['sourceTableName'],
        'xMLTagName': !exists(json, 'xMLTagName') ? undefined : json['xMLTagName'],
    };
}

export function InterfaceExportDataDetailTypeToJSON(value?: InterfaceExportDataDetailType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'columnName': value.columnName,
        'columnSelected': value.columnSelected,
        'dataLength': value.dataLength,
        'dataType': value.dataType,
        'sourceTableName': value.sourceTableName,
        'xMLTagName': value.xMLTagName,
    };
}

