/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Details about the element on which the transaction code is being used.
 * @export
 * @interface TrxCodeUsageType
 */
export interface TrxCodeUsageType {
    /**
     * Name of the element type on which the transaction code is being used.
     * @type {string}
     * @memberof TrxCodeUsageType
     */
    usageName?: string;
    /**
     * Specific codes of the element type on which the transaction code is being used.
     * @type {string}
     * @memberof TrxCodeUsageType
     */
    usageDetail?: string;
}

/**
 * Check if a given object implements the TrxCodeUsageType interface.
 */
export function instanceOfTrxCodeUsageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrxCodeUsageTypeFromJSON(json: any): TrxCodeUsageType {
    return TrxCodeUsageTypeFromJSONTyped(json, false);
}

export function TrxCodeUsageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrxCodeUsageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'usageName': !exists(json, 'usageName') ? undefined : json['usageName'],
        'usageDetail': !exists(json, 'usageDetail') ? undefined : json['usageDetail'],
    };
}

export function TrxCodeUsageTypeToJSON(value?: TrxCodeUsageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'usageName': value.usageName,
        'usageDetail': value.usageDetail,
    };
}

