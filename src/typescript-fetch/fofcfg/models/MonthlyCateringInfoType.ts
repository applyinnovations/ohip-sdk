/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Holds monthly Catering summary information
 * @export
 * @interface MonthlyCateringInfoType
 */
export interface MonthlyCateringInfoType {
    /**
     * No of Covers for a month.
     * @type {number}
     * @memberof MonthlyCateringInfoType
     */
    covers?: number;
    /**
     * Month number
     * @type {number}
     * @memberof MonthlyCateringInfoType
     */
    month?: number;
    /**
     * Revenue total for a month.
     * @type {number}
     * @memberof MonthlyCateringInfoType
     */
    revenue?: number;
}

/**
 * Check if a given object implements the MonthlyCateringInfoType interface.
 */
export function instanceOfMonthlyCateringInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MonthlyCateringInfoTypeFromJSON(json: any): MonthlyCateringInfoType {
    return MonthlyCateringInfoTypeFromJSONTyped(json, false);
}

export function MonthlyCateringInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonthlyCateringInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'covers': !exists(json, 'covers') ? undefined : json['covers'],
        'month': !exists(json, 'month') ? undefined : json['month'],
        'revenue': !exists(json, 'revenue') ? undefined : json['revenue'],
    };
}

export function MonthlyCateringInfoTypeToJSON(value?: MonthlyCateringInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'covers': value.covers,
        'month': value.month,
        'revenue': value.revenue,
    };
}

