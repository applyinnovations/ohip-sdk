/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionInfoType } from './TransactionInfoType';
import {
    TransactionInfoTypeFromJSON,
    TransactionInfoTypeFromJSONTyped,
    TransactionInfoTypeToJSON,
} from './TransactionInfoType';

/**
 * Budget Forecast information for Transaction segment code.
 * @export
 * @interface TransactionCodeInformationBaseType
 */
export interface TransactionCodeInformationBaseType {
    /**
     * Transaction code for which budget forecast information is fetched.
     * @type {string}
     * @memberof TransactionCodeInformationBaseType
     */
    transactionCode?: string;
    /**
     * Transaction code group of segment code.
     * @type {string}
     * @memberof TransactionCodeInformationBaseType
     */
    transactionCodeGrp?: string;
    /**
     * Transaction code description for Transaction code.
     * @type {string}
     * @memberof TransactionCodeInformationBaseType
     */
    transactionCodeDescription?: string;
    /**
     * 
     * @type {TransactionInfoType}
     * @memberof TransactionCodeInformationBaseType
     */
    budgetInfo?: TransactionInfoType;
    /**
     * 
     * @type {TransactionInfoType}
     * @memberof TransactionCodeInformationBaseType
     */
    forecastInfo?: TransactionInfoType;
}

/**
 * Check if a given object implements the TransactionCodeInformationBaseType interface.
 */
export function instanceOfTransactionCodeInformationBaseType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionCodeInformationBaseTypeFromJSON(json: any): TransactionCodeInformationBaseType {
    return TransactionCodeInformationBaseTypeFromJSONTyped(json, false);
}

export function TransactionCodeInformationBaseTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionCodeInformationBaseType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionCode': !exists(json, 'transactionCode') ? undefined : json['transactionCode'],
        'transactionCodeGrp': !exists(json, 'transactionCodeGrp') ? undefined : json['transactionCodeGrp'],
        'transactionCodeDescription': !exists(json, 'transactionCodeDescription') ? undefined : json['transactionCodeDescription'],
        'budgetInfo': !exists(json, 'budgetInfo') ? undefined : TransactionInfoTypeFromJSON(json['budgetInfo']),
        'forecastInfo': !exists(json, 'forecastInfo') ? undefined : TransactionInfoTypeFromJSON(json['forecastInfo']),
    };
}

export function TransactionCodeInformationBaseTypeToJSON(value?: TransactionCodeInformationBaseType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactionCode': value.transactionCode,
        'transactionCodeGrp': value.transactionCodeGrp,
        'transactionCodeDescription': value.transactionCodeDescription,
        'budgetInfo': TransactionInfoTypeToJSON(value.budgetInfo),
        'forecastInfo': TransactionInfoTypeToJSON(value.forecastInfo),
    };
}

