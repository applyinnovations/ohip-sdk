/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationUserType } from './ApplicationUserType';
import {
    ApplicationUserTypeFromJSON,
    ApplicationUserTypeFromJSONTyped,
    ApplicationUserTypeToJSON,
} from './ApplicationUserType';
import type { CashierTypeType } from './CashierTypeType';
import {
    CashierTypeTypeFromJSON,
    CashierTypeTypeFromJSONTyped,
    CashierTypeTypeToJSON,
} from './CashierTypeType';
import type { CashierTypeUsageInfo } from './CashierTypeUsageInfo';
import {
    CashierTypeUsageInfoFromJSON,
    CashierTypeUsageInfoFromJSONTyped,
    CashierTypeUsageInfoToJSON,
} from './CashierTypeUsageInfo';

/**
 * Cashiers Information.
 * @export
 * @interface CashierType
 */
export interface CashierType {
    /**
     * Numeric code for cashier ID.
     * @type {number}
     * @memberof CashierType
     */
    cashierId?: number;
    /**
     * The currency code used by the hotel that the cashier belongs to.
     * @type {string}
     * @memberof CashierType
     */
    currencyCode?: string;
    /**
     * Name assigned to the cashier.
     * @type {string}
     * @memberof CashierType
     */
    name?: string;
    /**
     * User(s) assigned to the cashier.
     * @type {string}
     * @memberof CashierType
     */
    attachedUser?: string;
    /**
     * 
     * @type {CashierTypeType}
     * @memberof CashierType
     */
    cashierType?: CashierTypeType;
    /**
     * The Starting Amount in the Cashier drawer.
     * @type {number}
     * @memberof CashierType
     */
    startingAmount?: number;
    /**
     * Selected if the cashier is allowed to drop below or above the required drop amount.
     * @type {boolean}
     * @memberof CashierType
     */
    floatOverShort?: boolean;
    /**
     * 
     * @type {CashierTypeUsageInfo}
     * @memberof CashierType
     */
    usageInfo?: CashierTypeUsageInfo;
    /**
     * Indicator that this cashier is the one to be used by Kiosk Partner to carry out postings and payments for the guest.
     * @type {boolean}
     * @memberof CashierType
     */
    kiosk?: boolean;
    /**
     * Indicator that tells whether the cashier is active or not.
     * @type {boolean}
     * @memberof CashierType
     */
    inactive?: boolean;
    /**
     * Indicator that tells whether the cashier is open or not.
     * @type {boolean}
     * @memberof CashierType
     */
    open?: boolean;
    /**
     * List of application users associated with the cashier
     * @type {Array<ApplicationUserType>}
     * @memberof CashierType
     */
    appUsers?: Array<ApplicationUserType>;
}

/**
 * Check if a given object implements the CashierType interface.
 */
export function instanceOfCashierType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CashierTypeFromJSON(json: any): CashierType {
    return CashierTypeFromJSONTyped(json, false);
}

export function CashierTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CashierType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cashierId': !exists(json, 'cashierId') ? undefined : json['cashierId'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'attachedUser': !exists(json, 'attachedUser') ? undefined : json['attachedUser'],
        'cashierType': !exists(json, 'cashierType') ? undefined : CashierTypeTypeFromJSON(json['cashierType']),
        'startingAmount': !exists(json, 'startingAmount') ? undefined : json['startingAmount'],
        'floatOverShort': !exists(json, 'floatOverShort') ? undefined : json['floatOverShort'],
        'usageInfo': !exists(json, 'usageInfo') ? undefined : CashierTypeUsageInfoFromJSON(json['usageInfo']),
        'kiosk': !exists(json, 'kiosk') ? undefined : json['kiosk'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'open': !exists(json, 'open') ? undefined : json['open'],
        'appUsers': !exists(json, 'appUsers') ? undefined : ((json['appUsers'] as Array<any>).map(ApplicationUserTypeFromJSON)),
    };
}

export function CashierTypeToJSON(value?: CashierType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cashierId': value.cashierId,
        'currencyCode': value.currencyCode,
        'name': value.name,
        'attachedUser': value.attachedUser,
        'cashierType': CashierTypeTypeToJSON(value.cashierType),
        'startingAmount': value.startingAmount,
        'floatOverShort': value.floatOverShort,
        'usageInfo': CashierTypeUsageInfoToJSON(value.usageInfo),
        'kiosk': value.kiosk,
        'inactive': value.inactive,
        'open': value.open,
        'appUsers': value.appUsers === undefined ? undefined : ((value.appUsers as Array<any>).map(ApplicationUserTypeToJSON)),
    };
}

