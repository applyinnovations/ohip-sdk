/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImportRoomsType
 */
export interface ImportRoomsType {
    /**
     * Translation table for incoming messages.
     * @type {string}
     * @memberof ImportRoomsType
     */
    inXlatId?: string;
    /**
     * Indicator for support of Input/Output Lines for Hotel Room Categories.
     * @type {boolean}
     * @memberof ImportRoomsType
     */
    ioLines?: boolean;
    /**
     * Translation table for outgoing messages.
     * @type {string}
     * @memberof ImportRoomsType
     */
    ouXlatId?: string;
    /**
     * Indicator for Requires line number setup, from Import Rooms related information of a Hotel Interface.
     * @type {boolean}
     * @memberof ImportRoomsType
     */
    requiresLineNumberSetup?: boolean;
    /**
     * Concatenated label of Hotel Room Categories for which SendToInterface flag should be set as true.
     * @type {string}
     * @memberof ImportRoomsType
     */
    selectedRoomTypes?: string;
    /**
     * Indicator for Virtual number setup, from Import Rooms related information of a Hotel Interface.
     * @type {boolean}
     * @memberof ImportRoomsType
     */
    virtualNumberSetup?: boolean;
}

/**
 * Check if a given object implements the ImportRoomsType interface.
 */
export function instanceOfImportRoomsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ImportRoomsTypeFromJSON(json: any): ImportRoomsType {
    return ImportRoomsTypeFromJSONTyped(json, false);
}

export function ImportRoomsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportRoomsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'inXlatId': !exists(json, 'inXlatId') ? undefined : json['inXlatId'],
        'ioLines': !exists(json, 'ioLines') ? undefined : json['ioLines'],
        'ouXlatId': !exists(json, 'ouXlatId') ? undefined : json['ouXlatId'],
        'requiresLineNumberSetup': !exists(json, 'requiresLineNumberSetup') ? undefined : json['requiresLineNumberSetup'],
        'selectedRoomTypes': !exists(json, 'selectedRoomTypes') ? undefined : json['selectedRoomTypes'],
        'virtualNumberSetup': !exists(json, 'virtualNumberSetup') ? undefined : json['virtualNumberSetup'],
    };
}

export function ImportRoomsTypeToJSON(value?: ImportRoomsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'inXlatId': value.inXlatId,
        'ioLines': value.ioLines,
        'ouXlatId': value.ouXlatId,
        'requiresLineNumberSetup': value.requiresLineNumberSetup,
        'selectedRoomTypes': value.selectedRoomTypes,
        'virtualNumberSetup': value.virtualNumberSetup,
    };
}

