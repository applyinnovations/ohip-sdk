/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Links } from './Links';
import {
    LinksFromJSON,
    LinksFromJSONTyped,
    LinksToJSON,
} from './Links';
import type { PaymentMethodsType } from './PaymentMethodsType';
import {
    PaymentMethodsTypeFromJSON,
    PaymentMethodsTypeFromJSONTyped,
    PaymentMethodsTypeToJSON,
} from './PaymentMethodsType';
import type { WarningsType } from './WarningsType';
import {
    WarningsTypeFromJSON,
    WarningsTypeFromJSONTyped,
    WarningsTypeToJSON,
} from './WarningsType';

/**
 * 
 * @export
 * @interface PaymentMethodsInfo
 */
export interface PaymentMethodsInfo {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof PaymentMethodsInfo
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof PaymentMethodsInfo
     */
    hasMore?: boolean;
    /**
     * Indicates maximum number of records a Web Service should return.
     * @type {number}
     * @memberof PaymentMethodsInfo
     */
    limit?: number;
    /**
     * 
     * @type {Links}
     * @memberof PaymentMethodsInfo
     */
    links?: Links;
    /**
     * Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.
     * @type {number}
     * @memberof PaymentMethodsInfo
     */
    offset?: number;
    /**
     * 
     * @type {PaymentMethodsType}
     * @memberof PaymentMethodsInfo
     */
    paymentMethods?: PaymentMethodsType;
    /**
     * Evaluated total page count based on the requested max fetch count.
     * @type {number}
     * @memberof PaymentMethodsInfo
     */
    totalPages?: number;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof PaymentMethodsInfo
     */
    totalResults?: number;
    /**
     * 
     * @type {WarningsType}
     * @memberof PaymentMethodsInfo
     */
    warnings?: WarningsType;
}

/**
 * Check if a given object implements the PaymentMethodsInfo interface.
 */
export function instanceOfPaymentMethodsInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentMethodsInfoFromJSON(json: any): PaymentMethodsInfo {
    return PaymentMethodsInfoFromJSONTyped(json, false);
}

export function PaymentMethodsInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodsInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'links': !exists(json, 'links') ? undefined : LinksFromJSON(json['links']),
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'paymentMethods': !exists(json, 'paymentMethods') ? undefined : PaymentMethodsTypeFromJSON(json['paymentMethods']),
        'totalPages': !exists(json, 'totalPages') ? undefined : json['totalPages'],
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
        'warnings': !exists(json, 'warnings') ? undefined : WarningsTypeFromJSON(json['warnings']),
    };
}

export function PaymentMethodsInfoToJSON(value?: PaymentMethodsInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'limit': value.limit,
        'links': LinksToJSON(value.links),
        'offset': value.offset,
        'paymentMethods': PaymentMethodsTypeToJSON(value.paymentMethods),
        'totalPages': value.totalPages,
        'totalResults': value.totalResults,
        'warnings': WarningsTypeToJSON(value.warnings),
    };
}

