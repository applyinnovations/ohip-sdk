/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Details for AR Flagged Reason.
 * @export
 * @interface ARFlaggedReasonType
 */
export interface ARFlaggedReasonType {
    /**
     * AR Flagged Reason Code.
     * @type {string}
     * @memberof ARFlaggedReasonType
     */
    code?: string;
    /**
     * Description of AR Flagged Reason.
     * @type {string}
     * @memberof ARFlaggedReasonType
     */
    description?: string;
    /**
     * Display sequence for AR Flagged Reason.
     * @type {number}
     * @memberof ARFlaggedReasonType
     */
    displaySequence?: number;
    /**
     * Hotel code.
     * @type {string}
     * @memberof ARFlaggedReasonType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the ARFlaggedReasonType interface.
 */
export function instanceOfARFlaggedReasonType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ARFlaggedReasonTypeFromJSON(json: any): ARFlaggedReasonType {
    return ARFlaggedReasonTypeFromJSONTyped(json, false);
}

export function ARFlaggedReasonTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ARFlaggedReasonType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function ARFlaggedReasonTypeToJSON(value?: ARFlaggedReasonType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'displaySequence': value.displaySequence,
        'hotelId': value.hotelId,
    };
}

