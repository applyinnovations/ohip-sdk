/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { MembershipTypeLevelType } from './MembershipTypeLevelType';
import {
    MembershipTypeLevelTypeFromJSON,
    MembershipTypeLevelTypeFromJSONTyped,
    MembershipTypeLevelTypeToJSON,
} from './MembershipTypeLevelType';
import type { ThresholdDetailsType } from './ThresholdDetailsType';
import {
    ThresholdDetailsTypeFromJSON,
    ThresholdDetailsTypeFromJSONTyped,
    ThresholdDetailsTypeToJSON,
} from './ThresholdDetailsType';
import type { TransactionDiversionRuleLevelType } from './TransactionDiversionRuleLevelType';
import {
    TransactionDiversionRuleLevelTypeFromJSON,
    TransactionDiversionRuleLevelTypeFromJSONTyped,
    TransactionDiversionRuleLevelTypeToJSON,
} from './TransactionDiversionRuleLevelType';
import type { TransactionDiversionRuleTypeType } from './TransactionDiversionRuleTypeType';
import {
    TransactionDiversionRuleTypeTypeFromJSON,
    TransactionDiversionRuleTypeTypeFromJSONTyped,
    TransactionDiversionRuleTypeTypeToJSON,
} from './TransactionDiversionRuleTypeType';

/**
 * A Transaction Diversion Rule Type
 * @export
 * @interface TransactionDiversionRuleType
 */
export interface TransactionDiversionRuleType {
    /**
     * VIP code to consider while applying Diversion Instruction.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    vipCode?: string;
    /**
     * 
     * @type {MembershipTypeLevelType}
     * @memberof TransactionDiversionRuleType
     */
    membership?: MembershipTypeLevelType;
    /**
     * Room number to receive all the diverted transactions configured for this instruction.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    targetRoom?: string;
    /**
     * Collection of Transaction Code List
     * @type {Array<CodeDescriptionType>}
     * @memberof TransactionDiversionRuleType
     */
    transactionCodes?: Array<CodeDescriptionType>;
    /**
     * User defined message for the Transaction Diversion Rule.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    description?: string;
    /**
     * 
     * @type {TransactionDiversionRuleLevelType}
     * @memberof TransactionDiversionRuleType
     */
    level?: TransactionDiversionRuleLevelType;
    /**
     * 
     * @type {ThresholdDetailsType}
     * @memberof TransactionDiversionRuleType
     */
    thresholds?: ThresholdDetailsType;
    /**
     * 
     * @type {TransactionDiversionRuleTypeType}
     * @memberof TransactionDiversionRuleType
     */
    type?: TransactionDiversionRuleTypeType;
    /**
     * Hotel code with which Transaction Diversion Rule is associated.
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    hotelId?: string;
    /**
     * Transaction Diversion Code
     * @type {string}
     * @memberof TransactionDiversionRuleType
     */
    code?: string;
    /**
     * User configured Sequence number.
     * @type {number}
     * @memberof TransactionDiversionRuleType
     */
    displaySequence?: number;
    /**
     * Indicator that tells whether the transaction diversion rule is active or not.
     * @type {boolean}
     * @memberof TransactionDiversionRuleType
     */
    inactive?: boolean;
    /**
     * The amount applicable to the discount on transaction diversion rule. This would be a positive amount indicating the discount.
     * @type {number}
     * @memberof TransactionDiversionRuleType
     */
    amount?: number;
    /**
     * A percentage value if the discount on transaction diversion rule is percentage based.
     * @type {number}
     * @memberof TransactionDiversionRuleType
     */
    percent?: number;
}

/**
 * Check if a given object implements the TransactionDiversionRuleType interface.
 */
export function instanceOfTransactionDiversionRuleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionDiversionRuleTypeFromJSON(json: any): TransactionDiversionRuleType {
    return TransactionDiversionRuleTypeFromJSONTyped(json, false);
}

export function TransactionDiversionRuleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionDiversionRuleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'vipCode': !exists(json, 'vipCode') ? undefined : json['vipCode'],
        'membership': !exists(json, 'membership') ? undefined : MembershipTypeLevelTypeFromJSON(json['membership']),
        'targetRoom': !exists(json, 'targetRoom') ? undefined : json['targetRoom'],
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : ((json['transactionCodes'] as Array<any>).map(CodeDescriptionTypeFromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'level': !exists(json, 'level') ? undefined : TransactionDiversionRuleLevelTypeFromJSON(json['level']),
        'thresholds': !exists(json, 'thresholds') ? undefined : ThresholdDetailsTypeFromJSON(json['thresholds']),
        'type': !exists(json, 'type') ? undefined : TransactionDiversionRuleTypeTypeFromJSON(json['type']),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'percent': !exists(json, 'percent') ? undefined : json['percent'],
    };
}

export function TransactionDiversionRuleTypeToJSON(value?: TransactionDiversionRuleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'vipCode': value.vipCode,
        'membership': MembershipTypeLevelTypeToJSON(value.membership),
        'targetRoom': value.targetRoom,
        'transactionCodes': value.transactionCodes === undefined ? undefined : ((value.transactionCodes as Array<any>).map(CodeDescriptionTypeToJSON)),
        'description': value.description,
        'level': TransactionDiversionRuleLevelTypeToJSON(value.level),
        'thresholds': ThresholdDetailsTypeToJSON(value.thresholds),
        'type': TransactionDiversionRuleTypeTypeToJSON(value.type),
        'hotelId': value.hotelId,
        'code': value.code,
        'displaySequence': value.displaySequence,
        'inactive': value.inactive,
        'amount': value.amount,
        'percent': value.percent,
    };
}

