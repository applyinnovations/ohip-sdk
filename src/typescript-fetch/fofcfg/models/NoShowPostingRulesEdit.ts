/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { NoShowPostingRuleEditType } from './NoShowPostingRuleEditType';
import {
    NoShowPostingRuleEditTypeFromJSON,
    NoShowPostingRuleEditTypeFromJSONTyped,
    NoShowPostingRuleEditTypeToJSON,
} from './NoShowPostingRuleEditType';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface NoShowPostingRulesEdit
 */
export interface NoShowPostingRulesEdit {
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof NoShowPostingRulesEdit
     */
    links?: Array<InstanceLink>;
    /**
     * Contains new rules along with associated old rules to edit.
     * @type {Array<NoShowPostingRuleEditType>}
     * @memberof NoShowPostingRulesEdit
     */
    noShowPostingRules?: Array<NoShowPostingRuleEditType>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof NoShowPostingRulesEdit
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the NoShowPostingRulesEdit interface.
 */
export function instanceOfNoShowPostingRulesEdit(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NoShowPostingRulesEditFromJSON(json: any): NoShowPostingRulesEdit {
    return NoShowPostingRulesEditFromJSONTyped(json, false);
}

export function NoShowPostingRulesEditFromJSONTyped(json: any, ignoreDiscriminator: boolean): NoShowPostingRulesEdit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'noShowPostingRules': !exists(json, 'noShowPostingRules') ? undefined : ((json['noShowPostingRules'] as Array<any>).map(NoShowPostingRuleEditTypeFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function NoShowPostingRulesEditToJSON(value?: NoShowPostingRulesEdit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'noShowPostingRules': value.noShowPostingRules === undefined ? undefined : ((value.noShowPostingRules as Array<any>).map(NoShowPostingRuleEditTypeToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

