/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ItemizerShortInfoType
 */
export interface ItemizerShortInfoType {
    /**
     * Code of the itemizer on a transaction code setup.
     * @type {string}
     * @memberof ItemizerShortInfoType
     */
    code?: string;
    /**
     * Itemizer name on a transaction code setup.
     * @type {string}
     * @memberof ItemizerShortInfoType
     */
    itemizerName?: string;
    /**
     * Itemizer number which is the split post on a transaction code setup.
     * @type {number}
     * @memberof ItemizerShortInfoType
     */
    itemNumber?: number;
}

/**
 * Check if a given object implements the ItemizerShortInfoType interface.
 */
export function instanceOfItemizerShortInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ItemizerShortInfoTypeFromJSON(json: any): ItemizerShortInfoType {
    return ItemizerShortInfoTypeFromJSONTyped(json, false);
}

export function ItemizerShortInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemizerShortInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'itemizerName': !exists(json, 'itemizerName') ? undefined : json['itemizerName'],
        'itemNumber': !exists(json, 'itemNumber') ? undefined : json['itemNumber'],
    };
}

export function ItemizerShortInfoTypeToJSON(value?: ItemizerShortInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'itemizerName': value.itemizerName,
        'itemNumber': value.itemNumber,
    };
}

