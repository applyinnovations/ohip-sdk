/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HotelTransactionCodeType } from './HotelTransactionCodeType';
import {
    HotelTransactionCodeTypeFromJSON,
    HotelTransactionCodeTypeFromJSONTyped,
    HotelTransactionCodeTypeToJSON,
} from './HotelTransactionCodeType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface HotelTransactionCodes
 */
export interface HotelTransactionCodes {
    /**
     * Transaction Code configuration details.
     * @type {Array<HotelTransactionCodeType>}
     * @memberof HotelTransactionCodes
     */
    transactionCodes?: Array<HotelTransactionCodeType>;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof HotelTransactionCodes
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof HotelTransactionCodes
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the HotelTransactionCodes interface.
 */
export function instanceOfHotelTransactionCodes(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelTransactionCodesFromJSON(json: any): HotelTransactionCodes {
    return HotelTransactionCodesFromJSONTyped(json, false);
}

export function HotelTransactionCodesFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelTransactionCodes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : ((json['transactionCodes'] as Array<any>).map(HotelTransactionCodeTypeFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function HotelTransactionCodesToJSON(value?: HotelTransactionCodes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'transactionCodes': value.transactionCodes === undefined ? undefined : ((value.transactionCodes as Array<any>).map(HotelTransactionCodeTypeToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

