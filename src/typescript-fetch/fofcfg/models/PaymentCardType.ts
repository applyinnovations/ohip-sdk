/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CardOptionType } from './CardOptionType';
import {
    CardOptionTypeFromJSON,
    CardOptionTypeFromJSONTyped,
    CardOptionTypeToJSON,
} from './CardOptionType';
import type { CardProcessingType } from './CardProcessingType';
import {
    CardProcessingTypeFromJSON,
    CardProcessingTypeFromJSONTyped,
    CardProcessingTypeToJSON,
} from './CardProcessingType';
import type { CardTypeType } from './CardTypeType';
import {
    CardTypeTypeFromJSON,
    CardTypeTypeFromJSONTyped,
    CardTypeTypeToJSON,
} from './CardTypeType';
import type { CardUsageRulesType } from './CardUsageRulesType';
import {
    CardUsageRulesTypeFromJSON,
    CardUsageRulesTypeFromJSONTyped,
    CardUsageRulesTypeToJSON,
} from './CardUsageRulesType';
import type { PaymentMethodValidationRuleType } from './PaymentMethodValidationRuleType';
import {
    PaymentMethodValidationRuleTypeFromJSON,
    PaymentMethodValidationRuleTypeFromJSONTyped,
    PaymentMethodValidationRuleTypeToJSON,
} from './PaymentMethodValidationRuleType';

/**
 * Contains credit card information.
 * @export
 * @interface PaymentCardType
 */
export interface PaymentCardType {
    /**
     * 
     * @type {CardTypeType}
     * @memberof PaymentCardType
     */
    cardType?: CardTypeType;
    /**
     * 
     * @type {CardUsageRulesType}
     * @memberof PaymentCardType
     */
    cardUsageRules?: CardUsageRulesType;
    /**
     * The merchant number to use when settling or transmitting credit card information.
     * @type {string}
     * @memberof PaymentCardType
     */
    merchantNumber?: string;
    /**
     * 
     * @type {CardOptionType}
     * @memberof PaymentCardType
     */
    option?: CardOptionType;
    /**
     * 
     * @type {CardProcessingType}
     * @memberof PaymentCardType
     */
    processing?: CardProcessingType;
    /**
     * User defined credit card type if credit card type from a defined list is not provided.
     * @type {string}
     * @memberof PaymentCardType
     */
    userDefinedCardType?: string;
    /**
     * 
     * @type {PaymentMethodValidationRuleType}
     * @memberof PaymentCardType
     */
    validation?: PaymentMethodValidationRuleType;
}

/**
 * Check if a given object implements the PaymentCardType interface.
 */
export function instanceOfPaymentCardType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PaymentCardTypeFromJSON(json: any): PaymentCardType {
    return PaymentCardTypeFromJSONTyped(json, false);
}

export function PaymentCardTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentCardType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cardType': !exists(json, 'cardType') ? undefined : CardTypeTypeFromJSON(json['cardType']),
        'cardUsageRules': !exists(json, 'cardUsageRules') ? undefined : CardUsageRulesTypeFromJSON(json['cardUsageRules']),
        'merchantNumber': !exists(json, 'merchantNumber') ? undefined : json['merchantNumber'],
        'option': !exists(json, 'option') ? undefined : CardOptionTypeFromJSON(json['option']),
        'processing': !exists(json, 'processing') ? undefined : CardProcessingTypeFromJSON(json['processing']),
        'userDefinedCardType': !exists(json, 'userDefinedCardType') ? undefined : json['userDefinedCardType'],
        'validation': !exists(json, 'validation') ? undefined : PaymentMethodValidationRuleTypeFromJSON(json['validation']),
    };
}

export function PaymentCardTypeToJSON(value?: PaymentCardType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cardType': CardTypeTypeToJSON(value.cardType),
        'cardUsageRules': CardUsageRulesTypeToJSON(value.cardUsageRules),
        'merchantNumber': value.merchantNumber,
        'option': CardOptionTypeToJSON(value.option),
        'processing': CardProcessingTypeToJSON(value.processing),
        'userDefinedCardType': value.userDefinedCardType,
        'validation': PaymentMethodValidationRuleTypeToJSON(value.validation),
    };
}

