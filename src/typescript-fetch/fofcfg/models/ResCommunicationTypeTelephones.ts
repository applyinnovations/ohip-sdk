/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TelephoneInfoType } from './TelephoneInfoType';
import {
    TelephoneInfoTypeFromJSON,
    TelephoneInfoTypeFromJSONTyped,
    TelephoneInfoTypeToJSON,
} from './TelephoneInfoType';

/**
 * List of Telephone Number Information
 * @export
 * @interface ResCommunicationTypeTelephones
 */
export interface ResCommunicationTypeTelephones {
    /**
     * Total number of rows returned
     * @type {number}
     * @memberof ResCommunicationTypeTelephones
     */
    count?: number;
    /**
     * Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.
     * @type {boolean}
     * @memberof ResCommunicationTypeTelephones
     */
    hasMore?: boolean;
    /**
     * Collection of Detailed information on telephone/fax for the customer.
     * @type {Array<TelephoneInfoType>}
     * @memberof ResCommunicationTypeTelephones
     */
    telephoneInfo?: Array<TelephoneInfoType>;
    /**
     * Total number of rows queried
     * @type {number}
     * @memberof ResCommunicationTypeTelephones
     */
    totalResults?: number;
}

/**
 * Check if a given object implements the ResCommunicationTypeTelephones interface.
 */
export function instanceOfResCommunicationTypeTelephones(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResCommunicationTypeTelephonesFromJSON(json: any): ResCommunicationTypeTelephones {
    return ResCommunicationTypeTelephonesFromJSONTyped(json, false);
}

export function ResCommunicationTypeTelephonesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResCommunicationTypeTelephones {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        'telephoneInfo': !exists(json, 'telephoneInfo') ? undefined : ((json['telephoneInfo'] as Array<any>).map(TelephoneInfoTypeFromJSON)),
        'totalResults': !exists(json, 'totalResults') ? undefined : json['totalResults'],
    };
}

export function ResCommunicationTypeTelephonesToJSON(value?: ResCommunicationTypeTelephones | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'hasMore': value.hasMore,
        'telephoneInfo': value.telephoneInfo === undefined ? undefined : ((value.telephoneInfo as Array<any>).map(TelephoneInfoTypeToJSON)),
        'totalResults': value.totalResults,
    };
}

