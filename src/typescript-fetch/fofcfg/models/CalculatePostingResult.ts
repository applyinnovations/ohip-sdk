/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CalculatePostingCharge } from './CalculatePostingCharge';
import {
    CalculatePostingChargeFromJSON,
    CalculatePostingChargeFromJSONTyped,
    CalculatePostingChargeToJSON,
} from './CalculatePostingCharge';

/**
 * List of charges that will be posted against the transaction code based from the test criteria.
 * @export
 * @interface CalculatePostingResult
 */
export interface CalculatePostingResult {
    /**
     * Charges that will be posted based from the criteria defined.
     * @type {Array<CalculatePostingCharge>}
     * @memberof CalculatePostingResult
     */
    charges?: Array<CalculatePostingCharge>;
    /**
     * The full amount that would be posted.
     * @type {number}
     * @memberof CalculatePostingResult
     */
    totalAmount?: number;
}

/**
 * Check if a given object implements the CalculatePostingResult interface.
 */
export function instanceOfCalculatePostingResult(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CalculatePostingResultFromJSON(json: any): CalculatePostingResult {
    return CalculatePostingResultFromJSONTyped(json, false);
}

export function CalculatePostingResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): CalculatePostingResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'charges': !exists(json, 'charges') ? undefined : ((json['charges'] as Array<any>).map(CalculatePostingChargeFromJSON)),
        'totalAmount': !exists(json, 'totalAmount') ? undefined : json['totalAmount'],
    };
}

export function CalculatePostingResultToJSON(value?: CalculatePostingResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'charges': value.charges === undefined ? undefined : ((value.charges as Array<any>).map(CalculatePostingChargeToJSON)),
        'totalAmount': value.totalAmount,
    };
}

