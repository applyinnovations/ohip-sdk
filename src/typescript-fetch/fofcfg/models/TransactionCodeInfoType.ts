/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Front Desk Configuration API
 * APIs to cater for Front Desk Configuration in OPERA Cloud. Here you can find operations to get, post, put and delete front desk codes such as commission codes, transaction groups, codes & subgroups, articles, payment methods and credit card types.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ItemizerType } from './ItemizerType';
import {
    ItemizerTypeFromJSON,
    ItemizerTypeFromJSONTyped,
    ItemizerTypeToJSON,
} from './ItemizerType';
import type { PostingAccountType } from './PostingAccountType';
import {
    PostingAccountTypeFromJSON,
    PostingAccountTypeFromJSONTyped,
    PostingAccountTypeToJSON,
} from './PostingAccountType';
import type { TransactionCodeDetailType } from './TransactionCodeDetailType';
import {
    TransactionCodeDetailTypeFromJSON,
    TransactionCodeDetailTypeFromJSONTyped,
    TransactionCodeDetailTypeToJSON,
} from './TransactionCodeDetailType';

/**
 * 
 * @export
 * @interface TransactionCodeInfoType
 */
export interface TransactionCodeInfoType {
    /**
     * All charges code of transaction code setup
     * @type {string}
     * @memberof TransactionCodeInfoType
     */
    allChargesCode?: string;
    /**
     * Minibar charges code of transaction code setup
     * @type {string}
     * @memberof TransactionCodeInfoType
     */
    miniBarCode?: string;
    /**
     * Cash or credit card posting of transaction code setup
     * @type {string}
     * @memberof TransactionCodeInfoType
     */
    cashCreditCardPosting?: string;
    /**
     * Subtotal posting of transaction code setup
     * @type {string}
     * @memberof TransactionCodeInfoType
     */
    subtotalPosting?: string;
    /**
     * Difference posting of transaction code setup
     * @type {string}
     * @memberof TransactionCodeInfoType
     */
    differencePosting?: string;
    /**
     * Calculated transaction code posting of transaction code setup
     * @type {string}
     * @memberof TransactionCodeInfoType
     */
    calcTrxCodePosting?: string;
    /**
     * Number of dialed digits transaction code setup
     * @type {string}
     * @memberof TransactionCodeInfoType
     */
    numberOfDialedDigits?: string;
    /**
     * Postings information of transaction codes setup.
     * @type {Array<PostingAccountType>}
     * @memberof TransactionCodeInfoType
     */
    postingAccounts?: Array<PostingAccountType>;
    /**
     * Split information of transaction code setup.
     * @type {Array<ItemizerType>}
     * @memberof TransactionCodeInfoType
     */
    itemizers?: Array<ItemizerType>;
    /**
     * Split information of transaction code setup.
     * @type {Array<TransactionCodeDetailType>}
     * @memberof TransactionCodeInfoType
     */
    transactionCodes?: Array<TransactionCodeDetailType>;
}

/**
 * Check if a given object implements the TransactionCodeInfoType interface.
 */
export function instanceOfTransactionCodeInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TransactionCodeInfoTypeFromJSON(json: any): TransactionCodeInfoType {
    return TransactionCodeInfoTypeFromJSONTyped(json, false);
}

export function TransactionCodeInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionCodeInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allChargesCode': !exists(json, 'allChargesCode') ? undefined : json['allChargesCode'],
        'miniBarCode': !exists(json, 'miniBarCode') ? undefined : json['miniBarCode'],
        'cashCreditCardPosting': !exists(json, 'cashCreditCardPosting') ? undefined : json['cashCreditCardPosting'],
        'subtotalPosting': !exists(json, 'subtotalPosting') ? undefined : json['subtotalPosting'],
        'differencePosting': !exists(json, 'differencePosting') ? undefined : json['differencePosting'],
        'calcTrxCodePosting': !exists(json, 'calcTrxCodePosting') ? undefined : json['calcTrxCodePosting'],
        'numberOfDialedDigits': !exists(json, 'numberOfDialedDigits') ? undefined : json['numberOfDialedDigits'],
        'postingAccounts': !exists(json, 'postingAccounts') ? undefined : ((json['postingAccounts'] as Array<any>).map(PostingAccountTypeFromJSON)),
        'itemizers': !exists(json, 'itemizers') ? undefined : ((json['itemizers'] as Array<any>).map(ItemizerTypeFromJSON)),
        'transactionCodes': !exists(json, 'transactionCodes') ? undefined : ((json['transactionCodes'] as Array<any>).map(TransactionCodeDetailTypeFromJSON)),
    };
}

export function TransactionCodeInfoTypeToJSON(value?: TransactionCodeInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allChargesCode': value.allChargesCode,
        'miniBarCode': value.miniBarCode,
        'cashCreditCardPosting': value.cashCreditCardPosting,
        'subtotalPosting': value.subtotalPosting,
        'differencePosting': value.differencePosting,
        'calcTrxCodePosting': value.calcTrxCodePosting,
        'numberOfDialedDigits': value.numberOfDialedDigits,
        'postingAccounts': value.postingAccounts === undefined ? undefined : ((value.postingAccounts as Array<any>).map(PostingAccountTypeToJSON)),
        'itemizers': value.itemizers === undefined ? undefined : ((value.itemizers as Array<any>).map(ItemizerTypeToJSON)),
        'transactionCodes': value.transactionCodes === undefined ? undefined : ((value.transactionCodes as Array<any>).map(TransactionCodeDetailTypeToJSON)),
    };
}

