/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BlockConversionsCriteria,
  BlockConversionsDetails,
  BlockConversionsToBeChanged,
  BlockRankingsCriteria,
  BlockRankingsDetails,
  BlockRankingsToBeChanged,
  BookingTypesCriteria,
  BookingTypesDetails,
  BookingTypesToBeChanged,
  CancellationCodesCriteria,
  CancellationCodesDetails,
  CancellationCodesToBeChanged,
  DiscountReasonsCriteria,
  DiscountReasonsDetails,
  DiscountReasonsToBeChanged,
  EntryPointsCriteria,
  EntryPointsDetails,
  EntryPointsToBeChanged,
  ExceptionDetailType,
  GlobalActionCodesCriteria,
  GlobalActionCodesDetails,
  GlobalActionCodesToBeChanged,
  MoveReasonCodesCriteria,
  MoveReasonCodesDetails,
  MoveReasonCodesToBeChanged,
  OriginCodesCriteria,
  OriginCodesDetails,
  OriginCodesToBeChanged,
  PurposeOfStaysCriteria,
  PurposeOfStaysDetails,
  PurposeOfStaysToBeChanged,
  ScriptsCriteria,
  ScriptsDetails,
  ScriptsToBeChanged,
  Status,
  WaitlistCodesCriteria,
  WaitlistCodesDetails,
  WaitlistCodesToBeChanged,
  WaitlistPrioritiesCriteria,
  WaitlistPrioritiesDetails,
  WaitlistPrioritiesToBeChanged,
} from '../models/index';
import {
    BlockConversionsCriteriaFromJSON,
    BlockConversionsCriteriaToJSON,
    BlockConversionsDetailsFromJSON,
    BlockConversionsDetailsToJSON,
    BlockConversionsToBeChangedFromJSON,
    BlockConversionsToBeChangedToJSON,
    BlockRankingsCriteriaFromJSON,
    BlockRankingsCriteriaToJSON,
    BlockRankingsDetailsFromJSON,
    BlockRankingsDetailsToJSON,
    BlockRankingsToBeChangedFromJSON,
    BlockRankingsToBeChangedToJSON,
    BookingTypesCriteriaFromJSON,
    BookingTypesCriteriaToJSON,
    BookingTypesDetailsFromJSON,
    BookingTypesDetailsToJSON,
    BookingTypesToBeChangedFromJSON,
    BookingTypesToBeChangedToJSON,
    CancellationCodesCriteriaFromJSON,
    CancellationCodesCriteriaToJSON,
    CancellationCodesDetailsFromJSON,
    CancellationCodesDetailsToJSON,
    CancellationCodesToBeChangedFromJSON,
    CancellationCodesToBeChangedToJSON,
    DiscountReasonsCriteriaFromJSON,
    DiscountReasonsCriteriaToJSON,
    DiscountReasonsDetailsFromJSON,
    DiscountReasonsDetailsToJSON,
    DiscountReasonsToBeChangedFromJSON,
    DiscountReasonsToBeChangedToJSON,
    EntryPointsCriteriaFromJSON,
    EntryPointsCriteriaToJSON,
    EntryPointsDetailsFromJSON,
    EntryPointsDetailsToJSON,
    EntryPointsToBeChangedFromJSON,
    EntryPointsToBeChangedToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GlobalActionCodesCriteriaFromJSON,
    GlobalActionCodesCriteriaToJSON,
    GlobalActionCodesDetailsFromJSON,
    GlobalActionCodesDetailsToJSON,
    GlobalActionCodesToBeChangedFromJSON,
    GlobalActionCodesToBeChangedToJSON,
    MoveReasonCodesCriteriaFromJSON,
    MoveReasonCodesCriteriaToJSON,
    MoveReasonCodesDetailsFromJSON,
    MoveReasonCodesDetailsToJSON,
    MoveReasonCodesToBeChangedFromJSON,
    MoveReasonCodesToBeChangedToJSON,
    OriginCodesCriteriaFromJSON,
    OriginCodesCriteriaToJSON,
    OriginCodesDetailsFromJSON,
    OriginCodesDetailsToJSON,
    OriginCodesToBeChangedFromJSON,
    OriginCodesToBeChangedToJSON,
    PurposeOfStaysCriteriaFromJSON,
    PurposeOfStaysCriteriaToJSON,
    PurposeOfStaysDetailsFromJSON,
    PurposeOfStaysDetailsToJSON,
    PurposeOfStaysToBeChangedFromJSON,
    PurposeOfStaysToBeChangedToJSON,
    ScriptsCriteriaFromJSON,
    ScriptsCriteriaToJSON,
    ScriptsDetailsFromJSON,
    ScriptsDetailsToJSON,
    ScriptsToBeChangedFromJSON,
    ScriptsToBeChangedToJSON,
    StatusFromJSON,
    StatusToJSON,
    WaitlistCodesCriteriaFromJSON,
    WaitlistCodesCriteriaToJSON,
    WaitlistCodesDetailsFromJSON,
    WaitlistCodesDetailsToJSON,
    WaitlistCodesToBeChangedFromJSON,
    WaitlistCodesToBeChangedToJSON,
    WaitlistPrioritiesCriteriaFromJSON,
    WaitlistPrioritiesCriteriaToJSON,
    WaitlistPrioritiesDetailsFromJSON,
    WaitlistPrioritiesDetailsToJSON,
    WaitlistPrioritiesToBeChangedFromJSON,
    WaitlistPrioritiesToBeChangedToJSON,
} from '../models/index';

export interface ChangeBlockConversionsRequest {
    blockConversionCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    blockConversionsToBeChanged: BlockConversionsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeBlockRankingsRequest {
    blockRankingsCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    blockRankingsToBeChanged: BlockRankingsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeGlobalActionCodesRequest {
    actionCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    globalActionCodesToBeChanged: GlobalActionCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeScriptsRequest {
    scriptCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    scriptsToBeChanged: ScriptsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteBookingTypesRequest {
    bookingTypesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bookingTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCancellationCodesRequest {
    cancellationCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cancellationCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDiscountReasonsRequest {
    discountReasonsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteEntryPointsRequest {
    entryPointsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    entryPointsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMoveReasonCodesRequest {
    moveReasonCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    moveReasonCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteOriginCodesRequest {
    originCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    originCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePurposeOfStaysRequest {
    purposeOfStaysId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    purposeOfStaysCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteWaitlistCodesRequest {
    waitlistCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    waitlistCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteWaitlistPrioritiesRequest {
    waitlistPrioritiesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    waitlistPrioritiesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockConversionsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBlockRankingsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetBookingTypesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCancellationCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDiscountReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchAdvanced?: boolean;
    fetchInactive?: boolean;
    fetchNonAdvanced?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEntryPointsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGlobalActionCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMoveReasonCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOriginCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPurposeOfStaysRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetScriptsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    codes?: Array<string>;
    croCodes?: Array<string>;
    hotelIds?: Array<string>;
    type?: GetScriptsTypeEnum;
    languageCodes?: Array<string>;
    membershipTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetWaitlistCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetWaitlistPrioritiesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockConversionsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    blockConversionsCriteria: BlockConversionsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBlockRankingsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    blockRankingsCriteria: BlockRankingsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostBookingTypesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bookingTypesCriteria: BookingTypesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancellationCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cancellationCodesCriteria: CancellationCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDiscountReasonsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    discountReasonsCriteria: DiscountReasonsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostEntryPointsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    entryPointsCriteria: EntryPointsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGlobalActionCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    globalActionCodesCriteria: GlobalActionCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMoveReasonCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    moveReasonCodesCriteria: MoveReasonCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostOriginCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    originCodesCriteria: OriginCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPurposeOfStaysRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    purposeOfStaysCriteria: PurposeOfStaysCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostScriptsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    scriptsCriteria: ScriptsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostWaitlistCodesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    waitlistCodesCriteria: WaitlistCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostWaitlistPrioritiesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    waitlistPrioritiesCriteria: WaitlistPrioritiesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutBookingTypesRequest {
    bookingTypesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    bookingTypesToBeChanged: BookingTypesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCancellationCodesRequest {
    cancellationCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cancellationCodesToBeChanged: CancellationCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutDiscountReasonsRequest {
    discountReasonsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    discountReasonsToBeChanged: DiscountReasonsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutEntryPointsRequest {
    entryPointsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    entryPointsToBeChanged: EntryPointsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMoveReasonCodesRequest {
    moveReasonCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    moveReasonCodesToBeChanged: MoveReasonCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutOriginCodesRequest {
    originCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    originCodesToBeChanged: OriginCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutPurposeOfStaysRequest {
    purposeOfStaysId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    purposeOfStaysToBeChanged: PurposeOfStaysToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutWaitlistCodesRequest {
    waitlistCodesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    waitlistCodesToBeChanged: WaitlistCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutWaitlistPrioritiesRequest {
    waitlistPrioritiesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    waitlistPrioritiesToBeChanged: WaitlistPrioritiesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveBlockConversionsRequest {
    blockConversionCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    blockConversionsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveBlockRankingsRequest {
    blockRankingsCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    blockRankingsCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveGlobalActionCodesRequest {
    actionCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    globalActionCodesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveScriptsRequest {
    scriptCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ChainConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Block Conversions. <p><strong>OperationId:</strong>changeBlockConversions</p>
     * Change Block Conversions
     */
    async changeBlockConversionsRaw(requestParameters: ChangeBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockConversionCode === null || requestParameters.blockConversionCode === undefined) {
            throw new runtime.RequiredError('blockConversionCode','Required parameter requestParameters.blockConversionCode was null or undefined when calling changeBlockConversions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeBlockConversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeBlockConversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeBlockConversions.');
        }

        if (requestParameters.blockConversionsToBeChanged === null || requestParameters.blockConversionsToBeChanged === undefined) {
            throw new runtime.RequiredError('blockConversionsToBeChanged','Required parameter requestParameters.blockConversionsToBeChanged was null or undefined when calling changeBlockConversions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockConversions/{blockConversionCode}`.replace(`{${"blockConversionCode"}}`, encodeURIComponent(String(requestParameters.blockConversionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockConversionsToBeChangedToJSON(requestParameters.blockConversionsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Block Conversions. <p><strong>OperationId:</strong>changeBlockConversions</p>
     * Change Block Conversions
     */
    async changeBlockConversions(requestParameters: ChangeBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeBlockConversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Block Ranking. <p><strong>OperationId:</strong>changeBlockRankings</p>
     * Change Block Ranking
     */
    async changeBlockRankingsRaw(requestParameters: ChangeBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRankingsCode === null || requestParameters.blockRankingsCode === undefined) {
            throw new runtime.RequiredError('blockRankingsCode','Required parameter requestParameters.blockRankingsCode was null or undefined when calling changeBlockRankings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeBlockRankings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeBlockRankings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeBlockRankings.');
        }

        if (requestParameters.blockRankingsToBeChanged === null || requestParameters.blockRankingsToBeChanged === undefined) {
            throw new runtime.RequiredError('blockRankingsToBeChanged','Required parameter requestParameters.blockRankingsToBeChanged was null or undefined when calling changeBlockRankings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRankings/{blockRankingsCode}`.replace(`{${"blockRankingsCode"}}`, encodeURIComponent(String(requestParameters.blockRankingsCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BlockRankingsToBeChangedToJSON(requestParameters.blockRankingsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Block Ranking. <p><strong>OperationId:</strong>changeBlockRankings</p>
     * Change Block Ranking
     */
    async changeBlockRankings(requestParameters: ChangeBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeBlockRankingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Global Action Codes. <p><strong>OperationId:</strong>changeGlobalActionCodes</p>
     * Change Global Action Codes
     */
    async changeGlobalActionCodesRaw(requestParameters: ChangeGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.actionCode === null || requestParameters.actionCode === undefined) {
            throw new runtime.RequiredError('actionCode','Required parameter requestParameters.actionCode was null or undefined when calling changeGlobalActionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeGlobalActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeGlobalActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeGlobalActionCodes.');
        }

        if (requestParameters.globalActionCodesToBeChanged === null || requestParameters.globalActionCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('globalActionCodesToBeChanged','Required parameter requestParameters.globalActionCodesToBeChanged was null or undefined when calling changeGlobalActionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalActionCodes/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalActionCodesToBeChangedToJSON(requestParameters.globalActionCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Global Action Codes. <p><strong>OperationId:</strong>changeGlobalActionCodes</p>
     * Change Global Action Codes
     */
    async changeGlobalActionCodes(requestParameters: ChangeGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeGlobalActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>changeScripts</p>
     * Change Scripts
     */
    async changeScriptsRaw(requestParameters: ChangeScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.scriptCode === null || requestParameters.scriptCode === undefined) {
            throw new runtime.RequiredError('scriptCode','Required parameter requestParameters.scriptCode was null or undefined when calling changeScripts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling changeScripts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling changeScripts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling changeScripts.');
        }

        if (requestParameters.scriptsToBeChanged === null || requestParameters.scriptsToBeChanged === undefined) {
            throw new runtime.RequiredError('scriptsToBeChanged','Required parameter requestParameters.scriptsToBeChanged was null or undefined when calling changeScripts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/scripts/{scriptCode}`.replace(`{${"scriptCode"}}`, encodeURIComponent(String(requestParameters.scriptCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ScriptsToBeChangedToJSON(requestParameters.scriptsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>changeScripts</p>
     * Change Scripts
     */
    async changeScripts(requestParameters: ChangeScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeScriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Booking Type. <p><strong>OperationId:</strong>deleteBookingTypes</p>
     * Delete Booking Type
     */
    async deleteBookingTypesRaw(requestParameters: DeleteBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.bookingTypesId === null || requestParameters.bookingTypesId === undefined) {
            throw new runtime.RequiredError('bookingTypesId','Required parameter requestParameters.bookingTypesId was null or undefined when calling deleteBookingTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteBookingTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteBookingTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteBookingTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.bookingTypesCodes) {
            queryParameters['bookingTypesCodes'] = requestParameters.bookingTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bookingTypes/{bookingTypesId}`.replace(`{${"bookingTypesId"}}`, encodeURIComponent(String(requestParameters.bookingTypesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Booking Type. <p><strong>OperationId:</strong>deleteBookingTypes</p>
     * Delete Booking Type
     */
    async deleteBookingTypes(requestParameters: DeleteBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteBookingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Cancellation Codes. <p><strong>OperationId:</strong>deleteCancellationCodes</p>
     * Delete Cancellation Codes
     */
    async deleteCancellationCodesRaw(requestParameters: DeleteCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancellationCodesId === null || requestParameters.cancellationCodesId === undefined) {
            throw new runtime.RequiredError('cancellationCodesId','Required parameter requestParameters.cancellationCodesId was null or undefined when calling deleteCancellationCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCancellationCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCancellationCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCancellationCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.cancellationCodes) {
            queryParameters['cancellationCodes'] = requestParameters.cancellationCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancellationCodes/{cancellationCodesId}`.replace(`{${"cancellationCodesId"}}`, encodeURIComponent(String(requestParameters.cancellationCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Cancellation Codes. <p><strong>OperationId:</strong>deleteCancellationCodes</p>
     * Delete Cancellation Codes
     */
    async deleteCancellationCodes(requestParameters: DeleteCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCancellationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Discount Reasons. <p><strong>OperationId:</strong>deleteDiscountReasons</p>
     * Delete Discount Reasons
     */
    async deleteDiscountReasonsRaw(requestParameters: DeleteDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.discountReasonsId === null || requestParameters.discountReasonsId === undefined) {
            throw new runtime.RequiredError('discountReasonsId','Required parameter requestParameters.discountReasonsId was null or undefined when calling deleteDiscountReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteDiscountReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteDiscountReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteDiscountReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/discountReasons/{discountReasonsId}`.replace(`{${"discountReasonsId"}}`, encodeURIComponent(String(requestParameters.discountReasonsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Discount Reasons. <p><strong>OperationId:</strong>deleteDiscountReasons</p>
     * Delete Discount Reasons
     */
    async deleteDiscountReasons(requestParameters: DeleteDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDiscountReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Entry Points. <p><strong>OperationId:</strong>deleteEntryPoints</p>
     * Delete Entry Points
     */
    async deleteEntryPointsRaw(requestParameters: DeleteEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.entryPointsId === null || requestParameters.entryPointsId === undefined) {
            throw new runtime.RequiredError('entryPointsId','Required parameter requestParameters.entryPointsId was null or undefined when calling deleteEntryPoints.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteEntryPoints.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteEntryPoints.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteEntryPoints.');
        }

        const queryParameters: any = {};

        if (requestParameters.entryPointsCodes) {
            queryParameters['entryPointsCodes'] = requestParameters.entryPointsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/entryPoints/{entryPointsId}`.replace(`{${"entryPointsId"}}`, encodeURIComponent(String(requestParameters.entryPointsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Entry Points. <p><strong>OperationId:</strong>deleteEntryPoints</p>
     * Delete Entry Points
     */
    async deleteEntryPoints(requestParameters: DeleteEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteEntryPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Move Reason Codes. <p><strong>OperationId:</strong>deleteMoveReasonCodes</p>
     * Delete Move Reason Codes
     */
    async deleteMoveReasonCodesRaw(requestParameters: DeleteMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.moveReasonCodesId === null || requestParameters.moveReasonCodesId === undefined) {
            throw new runtime.RequiredError('moveReasonCodesId','Required parameter requestParameters.moveReasonCodesId was null or undefined when calling deleteMoveReasonCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteMoveReasonCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteMoveReasonCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteMoveReasonCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.moveReasonCodes) {
            queryParameters['moveReasonCodes'] = requestParameters.moveReasonCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/moveReasonCodes/{moveReasonCodesId}`.replace(`{${"moveReasonCodesId"}}`, encodeURIComponent(String(requestParameters.moveReasonCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Move Reason Codes. <p><strong>OperationId:</strong>deleteMoveReasonCodes</p>
     * Delete Move Reason Codes
     */
    async deleteMoveReasonCodes(requestParameters: DeleteMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMoveReasonCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Origin Codes. <p><strong>OperationId:</strong>deleteOriginCodes</p>
     * Delete Origin Codes
     */
    async deleteOriginCodesRaw(requestParameters: DeleteOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.originCodesId === null || requestParameters.originCodesId === undefined) {
            throw new runtime.RequiredError('originCodesId','Required parameter requestParameters.originCodesId was null or undefined when calling deleteOriginCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteOriginCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteOriginCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteOriginCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.originCodes) {
            queryParameters['originCodes'] = requestParameters.originCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/originCodes/{originCodesId}`.replace(`{${"originCodesId"}}`, encodeURIComponent(String(requestParameters.originCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Origin Codes. <p><strong>OperationId:</strong>deleteOriginCodes</p>
     * Delete Origin Codes
     */
    async deleteOriginCodes(requestParameters: DeleteOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteOriginCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Purpose Of Stays. <p><strong>OperationId:</strong>deletePurposeOfStays</p>
     * Delete Purpose Of Stays
     */
    async deletePurposeOfStaysRaw(requestParameters: DeletePurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.purposeOfStaysId === null || requestParameters.purposeOfStaysId === undefined) {
            throw new runtime.RequiredError('purposeOfStaysId','Required parameter requestParameters.purposeOfStaysId was null or undefined when calling deletePurposeOfStays.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deletePurposeOfStays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deletePurposeOfStays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deletePurposeOfStays.');
        }

        const queryParameters: any = {};

        if (requestParameters.purposeOfStaysCodes) {
            queryParameters['purposeOfStaysCodes'] = requestParameters.purposeOfStaysCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/purposeOfStays/{purposeOfStaysId}`.replace(`{${"purposeOfStaysId"}}`, encodeURIComponent(String(requestParameters.purposeOfStaysId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Purpose Of Stays. <p><strong>OperationId:</strong>deletePurposeOfStays</p>
     * Delete Purpose Of Stays
     */
    async deletePurposeOfStays(requestParameters: DeletePurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePurposeOfStaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Waitlist Codes. <p><strong>OperationId:</strong>deleteWaitlistCodes</p>
     * Delete Waitlist Codes
     */
    async deleteWaitlistCodesRaw(requestParameters: DeleteWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.waitlistCodesId === null || requestParameters.waitlistCodesId === undefined) {
            throw new runtime.RequiredError('waitlistCodesId','Required parameter requestParameters.waitlistCodesId was null or undefined when calling deleteWaitlistCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteWaitlistCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteWaitlistCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteWaitlistCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.waitlistCodes) {
            queryParameters['waitlistCodes'] = requestParameters.waitlistCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistCodes/{waitlistCodesId}`.replace(`{${"waitlistCodesId"}}`, encodeURIComponent(String(requestParameters.waitlistCodesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Waitlist Codes. <p><strong>OperationId:</strong>deleteWaitlistCodes</p>
     * Delete Waitlist Codes
     */
    async deleteWaitlistCodes(requestParameters: DeleteWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteWaitlistCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Waitlist Priorities. <p><strong>OperationId:</strong>deleteWaitlistPriorities</p>
     * Delete Waitlist Priorities
     */
    async deleteWaitlistPrioritiesRaw(requestParameters: DeleteWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.waitlistPrioritiesId === null || requestParameters.waitlistPrioritiesId === undefined) {
            throw new runtime.RequiredError('waitlistPrioritiesId','Required parameter requestParameters.waitlistPrioritiesId was null or undefined when calling deleteWaitlistPriorities.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteWaitlistPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteWaitlistPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteWaitlistPriorities.');
        }

        const queryParameters: any = {};

        if (requestParameters.waitlistPrioritiesCodes) {
            queryParameters['waitlistPrioritiesCodes'] = requestParameters.waitlistPrioritiesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistPriorities/{waitlistPrioritiesId}`.replace(`{${"waitlistPrioritiesId"}}`, encodeURIComponent(String(requestParameters.waitlistPrioritiesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Waitlist Priorities. <p><strong>OperationId:</strong>deleteWaitlistPriorities</p>
     * Delete Waitlist Priorities
     */
    async deleteWaitlistPriorities(requestParameters: DeleteWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteWaitlistPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Block Conversions. <p><strong>OperationId:</strong>getBlockConversions</p>
     * Get Block Conversions
     */
    async getBlockConversionsRaw(requestParameters: GetBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockConversionsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getBlockConversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getBlockConversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getBlockConversions.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockConversions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockConversionsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Block Conversions. <p><strong>OperationId:</strong>getBlockConversions</p>
     * Get Block Conversions
     */
    async getBlockConversions(requestParameters: GetBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockConversionsDetails> {
        const response = await this.getBlockConversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Block Rankings. <p><strong>OperationId:</strong>getBlockRankings</p>
     * Get Block Rankings
     */
    async getBlockRankingsRaw(requestParameters: GetBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BlockRankingsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getBlockRankings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getBlockRankings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getBlockRankings.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRankings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BlockRankingsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Block Rankings. <p><strong>OperationId:</strong>getBlockRankings</p>
     * Get Block Rankings
     */
    async getBlockRankings(requestParameters: GetBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BlockRankingsDetails> {
        const response = await this.getBlockRankingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Booking Types. <p><strong>OperationId:</strong>getBookingTypes</p>
     * Get Booking Types
     */
    async getBookingTypesRaw(requestParameters: GetBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingTypesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getBookingTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getBookingTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getBookingTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bookingTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingTypesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Booking Types. <p><strong>OperationId:</strong>getBookingTypes</p>
     * Get Booking Types
     */
    async getBookingTypes(requestParameters: GetBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingTypesDetails> {
        const response = await this.getBookingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Cancellation Codes. <p><strong>OperationId:</strong>getCancellationCodes</p>
     * Get Cancellation Codes
     */
    async getCancellationCodesRaw(requestParameters: GetCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancellationCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCancellationCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCancellationCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCancellationCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancellationCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancellationCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Cancellation Codes. <p><strong>OperationId:</strong>getCancellationCodes</p>
     * Get Cancellation Codes
     */
    async getCancellationCodes(requestParameters: GetCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancellationCodesDetails> {
        const response = await this.getCancellationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Discount Reasons. <p><strong>OperationId:</strong>getDiscountReasons</p>
     * Get Discount Reasons
     */
    async getDiscountReasonsRaw(requestParameters: GetDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DiscountReasonsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDiscountReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getDiscountReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getDiscountReasons.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchAdvanced !== undefined) {
            queryParameters['fetchAdvanced'] = requestParameters.fetchAdvanced;
        }

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.fetchNonAdvanced !== undefined) {
            queryParameters['fetchNonAdvanced'] = requestParameters.fetchNonAdvanced;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/discountReasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountReasonsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Discount Reasons. <p><strong>OperationId:</strong>getDiscountReasons</p>
     * Get Discount Reasons
     */
    async getDiscountReasons(requestParameters: GetDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DiscountReasonsDetails> {
        const response = await this.getDiscountReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Entry Points. <p><strong>OperationId:</strong>getEntryPoints</p>
     * Get Entry Points
     */
    async getEntryPointsRaw(requestParameters: GetEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EntryPointsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getEntryPoints.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getEntryPoints.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getEntryPoints.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/entryPoints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EntryPointsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Entry Points. <p><strong>OperationId:</strong>getEntryPoints</p>
     * Get Entry Points
     */
    async getEntryPoints(requestParameters: GetEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EntryPointsDetails> {
        const response = await this.getEntryPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Global Action Codes. <p><strong>OperationId:</strong>getGlobalActionCodes</p>
     * Get Global Action Codes
     */
    async getGlobalActionCodesRaw(requestParameters: GetGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalActionCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getGlobalActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getGlobalActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getGlobalActionCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalActionCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalActionCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Global Action Codes. <p><strong>OperationId:</strong>getGlobalActionCodes</p>
     * Get Global Action Codes
     */
    async getGlobalActionCodes(requestParameters: GetGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalActionCodesDetails> {
        const response = await this.getGlobalActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Move Reason Codes. <p><strong>OperationId:</strong>getMoveReasonCodes</p>
     * Get Move Reason Codes
     */
    async getMoveReasonCodesRaw(requestParameters: GetMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MoveReasonCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getMoveReasonCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getMoveReasonCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getMoveReasonCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/moveReasonCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MoveReasonCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Move Reason Codes. <p><strong>OperationId:</strong>getMoveReasonCodes</p>
     * Get Move Reason Codes
     */
    async getMoveReasonCodes(requestParameters: GetMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MoveReasonCodesDetails> {
        const response = await this.getMoveReasonCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Origin Codes. <p><strong>OperationId:</strong>getOriginCodes</p>
     * Get Origin Codes
     */
    async getOriginCodesRaw(requestParameters: GetOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OriginCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getOriginCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getOriginCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getOriginCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/originCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OriginCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Origin Codes. <p><strong>OperationId:</strong>getOriginCodes</p>
     * Get Origin Codes
     */
    async getOriginCodes(requestParameters: GetOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OriginCodesDetails> {
        const response = await this.getOriginCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Purpose Of Stays. <p><strong>OperationId:</strong>getPurposeOfStays</p>
     * Get Purpose Of Stays
     */
    async getPurposeOfStaysRaw(requestParameters: GetPurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PurposeOfStaysDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getPurposeOfStays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getPurposeOfStays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getPurposeOfStays.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/purposeOfStays`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PurposeOfStaysDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Purpose Of Stays. <p><strong>OperationId:</strong>getPurposeOfStays</p>
     * Get Purpose Of Stays
     */
    async getPurposeOfStays(requestParameters: GetPurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PurposeOfStaysDetails> {
        const response = await this.getPurposeOfStaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Scripts. <p><strong>OperationId:</strong>getScripts</p>
     * Get Scripts
     */
    async getScriptsRaw(requestParameters: GetScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScriptsDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getScripts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getScripts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getScripts.');
        }

        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.croCodes) {
            queryParameters['croCodes'] = requestParameters.croCodes;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.languageCodes) {
            queryParameters['languageCodes'] = requestParameters.languageCodes;
        }

        if (requestParameters.membershipTypesCodes) {
            queryParameters['membershipTypesCodes'] = requestParameters.membershipTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/scripts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScriptsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Scripts. <p><strong>OperationId:</strong>getScripts</p>
     * Get Scripts
     */
    async getScripts(requestParameters: GetScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScriptsDetails> {
        const response = await this.getScriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Waitlist Codes. <p><strong>OperationId:</strong>getWaitlistCodes</p>
     * Get Waitlist Codes
     */
    async getWaitlistCodesRaw(requestParameters: GetWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaitlistCodesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getWaitlistCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getWaitlistCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getWaitlistCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaitlistCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Waitlist Codes. <p><strong>OperationId:</strong>getWaitlistCodes</p>
     * Get Waitlist Codes
     */
    async getWaitlistCodes(requestParameters: GetWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaitlistCodesDetails> {
        const response = await this.getWaitlistCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Waitlist Priorities. <p><strong>OperationId:</strong>getWaitlistPriorities</p>
     * Get Waitlist Priorities
     */
    async getWaitlistPrioritiesRaw(requestParameters: GetWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WaitlistPrioritiesDetails>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getWaitlistPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getWaitlistPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getWaitlistPriorities.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistPriorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WaitlistPrioritiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Waitlist Priorities. <p><strong>OperationId:</strong>getWaitlistPriorities</p>
     * Get Waitlist Priorities
     */
    async getWaitlistPriorities(requestParameters: GetWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WaitlistPrioritiesDetails> {
        const response = await this.getWaitlistPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Block Conversions. <p><strong>OperationId:</strong>postBlockConversions</p>
     * Create Block Conversions
     */
    async postBlockConversionsRaw(requestParameters: PostBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postBlockConversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postBlockConversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postBlockConversions.');
        }

        if (requestParameters.blockConversionsCriteria === null || requestParameters.blockConversionsCriteria === undefined) {
            throw new runtime.RequiredError('blockConversionsCriteria','Required parameter requestParameters.blockConversionsCriteria was null or undefined when calling postBlockConversions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockConversions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockConversionsCriteriaToJSON(requestParameters.blockConversionsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Block Conversions. <p><strong>OperationId:</strong>postBlockConversions</p>
     * Create Block Conversions
     */
    async postBlockConversions(requestParameters: PostBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockConversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Block Rankings. <p><strong>OperationId:</strong>postBlockRankings</p>
     * Create Block Rankings
     */
    async postBlockRankingsRaw(requestParameters: PostBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postBlockRankings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postBlockRankings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postBlockRankings.');
        }

        if (requestParameters.blockRankingsCriteria === null || requestParameters.blockRankingsCriteria === undefined) {
            throw new runtime.RequiredError('blockRankingsCriteria','Required parameter requestParameters.blockRankingsCriteria was null or undefined when calling postBlockRankings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRankings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BlockRankingsCriteriaToJSON(requestParameters.blockRankingsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Block Rankings. <p><strong>OperationId:</strong>postBlockRankings</p>
     * Create Block Rankings
     */
    async postBlockRankings(requestParameters: PostBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBlockRankingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Booking Types. <p><strong>OperationId:</strong>postBookingTypes</p>
     * Create Booking Types
     */
    async postBookingTypesRaw(requestParameters: PostBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postBookingTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postBookingTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postBookingTypes.');
        }

        if (requestParameters.bookingTypesCriteria === null || requestParameters.bookingTypesCriteria === undefined) {
            throw new runtime.RequiredError('bookingTypesCriteria','Required parameter requestParameters.bookingTypesCriteria was null or undefined when calling postBookingTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bookingTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookingTypesCriteriaToJSON(requestParameters.bookingTypesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Booking Types. <p><strong>OperationId:</strong>postBookingTypes</p>
     * Create Booking Types
     */
    async postBookingTypes(requestParameters: PostBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postBookingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Cancellation Codes. <p><strong>OperationId:</strong>postCancellationCodes</p>
     * Create Cancellation Codes
     */
    async postCancellationCodesRaw(requestParameters: PostCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCancellationCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCancellationCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCancellationCodes.');
        }

        if (requestParameters.cancellationCodesCriteria === null || requestParameters.cancellationCodesCriteria === undefined) {
            throw new runtime.RequiredError('cancellationCodesCriteria','Required parameter requestParameters.cancellationCodesCriteria was null or undefined when calling postCancellationCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancellationCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancellationCodesCriteriaToJSON(requestParameters.cancellationCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Cancellation Codes. <p><strong>OperationId:</strong>postCancellationCodes</p>
     * Create Cancellation Codes
     */
    async postCancellationCodes(requestParameters: PostCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCancellationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Discount Reasons. <p><strong>OperationId:</strong>postDiscountReasons</p>
     * Create Discount Reasons
     */
    async postDiscountReasonsRaw(requestParameters: PostDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postDiscountReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postDiscountReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postDiscountReasons.');
        }

        if (requestParameters.discountReasonsCriteria === null || requestParameters.discountReasonsCriteria === undefined) {
            throw new runtime.RequiredError('discountReasonsCriteria','Required parameter requestParameters.discountReasonsCriteria was null or undefined when calling postDiscountReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/discountReasons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountReasonsCriteriaToJSON(requestParameters.discountReasonsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Discount Reasons. <p><strong>OperationId:</strong>postDiscountReasons</p>
     * Create Discount Reasons
     */
    async postDiscountReasons(requestParameters: PostDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDiscountReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Entry Points. <p><strong>OperationId:</strong>postEntryPoints</p>
     * Create Entry Points
     */
    async postEntryPointsRaw(requestParameters: PostEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postEntryPoints.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postEntryPoints.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postEntryPoints.');
        }

        if (requestParameters.entryPointsCriteria === null || requestParameters.entryPointsCriteria === undefined) {
            throw new runtime.RequiredError('entryPointsCriteria','Required parameter requestParameters.entryPointsCriteria was null or undefined when calling postEntryPoints.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/entryPoints`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntryPointsCriteriaToJSON(requestParameters.entryPointsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Entry Points. <p><strong>OperationId:</strong>postEntryPoints</p>
     * Create Entry Points
     */
    async postEntryPoints(requestParameters: PostEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postEntryPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Global Action Codes. <p><strong>OperationId:</strong>postGlobalActionCodes</p>
     * Create Global Action Codes
     */
    async postGlobalActionCodesRaw(requestParameters: PostGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postGlobalActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postGlobalActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postGlobalActionCodes.');
        }

        if (requestParameters.globalActionCodesCriteria === null || requestParameters.globalActionCodesCriteria === undefined) {
            throw new runtime.RequiredError('globalActionCodesCriteria','Required parameter requestParameters.globalActionCodesCriteria was null or undefined when calling postGlobalActionCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalActionCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalActionCodesCriteriaToJSON(requestParameters.globalActionCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Global Action Codes. <p><strong>OperationId:</strong>postGlobalActionCodes</p>
     * Create Global Action Codes
     */
    async postGlobalActionCodes(requestParameters: PostGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGlobalActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Move Reason Codes. <p><strong>OperationId:</strong>postMoveReasonCodes</p>
     * Create Move Reason Codes
     */
    async postMoveReasonCodesRaw(requestParameters: PostMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postMoveReasonCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postMoveReasonCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postMoveReasonCodes.');
        }

        if (requestParameters.moveReasonCodesCriteria === null || requestParameters.moveReasonCodesCriteria === undefined) {
            throw new runtime.RequiredError('moveReasonCodesCriteria','Required parameter requestParameters.moveReasonCodesCriteria was null or undefined when calling postMoveReasonCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/moveReasonCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MoveReasonCodesCriteriaToJSON(requestParameters.moveReasonCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Move Reason Codes. <p><strong>OperationId:</strong>postMoveReasonCodes</p>
     * Create Move Reason Codes
     */
    async postMoveReasonCodes(requestParameters: PostMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMoveReasonCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Origin Codes. <p><strong>OperationId:</strong>postOriginCodes</p>
     * Create Origin Codes
     */
    async postOriginCodesRaw(requestParameters: PostOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postOriginCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postOriginCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postOriginCodes.');
        }

        if (requestParameters.originCodesCriteria === null || requestParameters.originCodesCriteria === undefined) {
            throw new runtime.RequiredError('originCodesCriteria','Required parameter requestParameters.originCodesCriteria was null or undefined when calling postOriginCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/originCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OriginCodesCriteriaToJSON(requestParameters.originCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Origin Codes. <p><strong>OperationId:</strong>postOriginCodes</p>
     * Create Origin Codes
     */
    async postOriginCodes(requestParameters: PostOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postOriginCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Purpose Of Stays. <p><strong>OperationId:</strong>postPurposeOfStays</p>
     * Create Purpose Of Stays
     */
    async postPurposeOfStaysRaw(requestParameters: PostPurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postPurposeOfStays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postPurposeOfStays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postPurposeOfStays.');
        }

        if (requestParameters.purposeOfStaysCriteria === null || requestParameters.purposeOfStaysCriteria === undefined) {
            throw new runtime.RequiredError('purposeOfStaysCriteria','Required parameter requestParameters.purposeOfStaysCriteria was null or undefined when calling postPurposeOfStays.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/purposeOfStays`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurposeOfStaysCriteriaToJSON(requestParameters.purposeOfStaysCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Purpose Of Stays. <p><strong>OperationId:</strong>postPurposeOfStays</p>
     * Create Purpose Of Stays
     */
    async postPurposeOfStays(requestParameters: PostPurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPurposeOfStaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Scripts. <p><strong>OperationId:</strong>postScripts</p>
     * Create Scripts
     */
    async postScriptsRaw(requestParameters: PostScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postScripts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postScripts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postScripts.');
        }

        if (requestParameters.scriptsCriteria === null || requestParameters.scriptsCriteria === undefined) {
            throw new runtime.RequiredError('scriptsCriteria','Required parameter requestParameters.scriptsCriteria was null or undefined when calling postScripts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/scripts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScriptsCriteriaToJSON(requestParameters.scriptsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Scripts. <p><strong>OperationId:</strong>postScripts</p>
     * Create Scripts
     */
    async postScripts(requestParameters: PostScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postScriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Waitlist Codes. <p><strong>OperationId:</strong>postWaitlistCodes</p>
     * Create Waitlist Codes
     */
    async postWaitlistCodesRaw(requestParameters: PostWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postWaitlistCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postWaitlistCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postWaitlistCodes.');
        }

        if (requestParameters.waitlistCodesCriteria === null || requestParameters.waitlistCodesCriteria === undefined) {
            throw new runtime.RequiredError('waitlistCodesCriteria','Required parameter requestParameters.waitlistCodesCriteria was null or undefined when calling postWaitlistCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaitlistCodesCriteriaToJSON(requestParameters.waitlistCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Waitlist Codes. <p><strong>OperationId:</strong>postWaitlistCodes</p>
     * Create Waitlist Codes
     */
    async postWaitlistCodes(requestParameters: PostWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postWaitlistCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Waitlist Priorities. <p><strong>OperationId:</strong>postWaitlistPriorities</p>
     * Create Waitlist Priorities
     */
    async postWaitlistPrioritiesRaw(requestParameters: PostWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postWaitlistPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postWaitlistPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postWaitlistPriorities.');
        }

        if (requestParameters.waitlistPrioritiesCriteria === null || requestParameters.waitlistPrioritiesCriteria === undefined) {
            throw new runtime.RequiredError('waitlistPrioritiesCriteria','Required parameter requestParameters.waitlistPrioritiesCriteria was null or undefined when calling postWaitlistPriorities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistPriorities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WaitlistPrioritiesCriteriaToJSON(requestParameters.waitlistPrioritiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Waitlist Priorities. <p><strong>OperationId:</strong>postWaitlistPriorities</p>
     * Create Waitlist Priorities
     */
    async postWaitlistPriorities(requestParameters: PostWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postWaitlistPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Booking Type. <p><strong>OperationId:</strong>putBookingTypes</p>
     * Change Booking Type
     */
    async putBookingTypesRaw(requestParameters: PutBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.bookingTypesId === null || requestParameters.bookingTypesId === undefined) {
            throw new runtime.RequiredError('bookingTypesId','Required parameter requestParameters.bookingTypesId was null or undefined when calling putBookingTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putBookingTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putBookingTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putBookingTypes.');
        }

        if (requestParameters.bookingTypesToBeChanged === null || requestParameters.bookingTypesToBeChanged === undefined) {
            throw new runtime.RequiredError('bookingTypesToBeChanged','Required parameter requestParameters.bookingTypesToBeChanged was null or undefined when calling putBookingTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/bookingTypes/{bookingTypesId}`.replace(`{${"bookingTypesId"}}`, encodeURIComponent(String(requestParameters.bookingTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookingTypesToBeChangedToJSON(requestParameters.bookingTypesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Booking Type. <p><strong>OperationId:</strong>putBookingTypes</p>
     * Change Booking Type
     */
    async putBookingTypes(requestParameters: PutBookingTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putBookingTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Cancellation Codes. <p><strong>OperationId:</strong>putCancellationCodes</p>
     * Change Cancellation Codes
     */
    async putCancellationCodesRaw(requestParameters: PutCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancellationCodesId === null || requestParameters.cancellationCodesId === undefined) {
            throw new runtime.RequiredError('cancellationCodesId','Required parameter requestParameters.cancellationCodesId was null or undefined when calling putCancellationCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCancellationCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCancellationCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCancellationCodes.');
        }

        if (requestParameters.cancellationCodesToBeChanged === null || requestParameters.cancellationCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('cancellationCodesToBeChanged','Required parameter requestParameters.cancellationCodesToBeChanged was null or undefined when calling putCancellationCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancellationCodes/{cancellationCodesId}`.replace(`{${"cancellationCodesId"}}`, encodeURIComponent(String(requestParameters.cancellationCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancellationCodesToBeChangedToJSON(requestParameters.cancellationCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Cancellation Codes. <p><strong>OperationId:</strong>putCancellationCodes</p>
     * Change Cancellation Codes
     */
    async putCancellationCodes(requestParameters: PutCancellationCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCancellationCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Discount Reasons. <p><strong>OperationId:</strong>putDiscountReasons</p>
     * Change Discount Reasons
     */
    async putDiscountReasonsRaw(requestParameters: PutDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.discountReasonsId === null || requestParameters.discountReasonsId === undefined) {
            throw new runtime.RequiredError('discountReasonsId','Required parameter requestParameters.discountReasonsId was null or undefined when calling putDiscountReasons.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putDiscountReasons.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putDiscountReasons.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putDiscountReasons.');
        }

        if (requestParameters.discountReasonsToBeChanged === null || requestParameters.discountReasonsToBeChanged === undefined) {
            throw new runtime.RequiredError('discountReasonsToBeChanged','Required parameter requestParameters.discountReasonsToBeChanged was null or undefined when calling putDiscountReasons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/discountReasons/{discountReasonsId}`.replace(`{${"discountReasonsId"}}`, encodeURIComponent(String(requestParameters.discountReasonsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountReasonsToBeChangedToJSON(requestParameters.discountReasonsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Discount Reasons. <p><strong>OperationId:</strong>putDiscountReasons</p>
     * Change Discount Reasons
     */
    async putDiscountReasons(requestParameters: PutDiscountReasonsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putDiscountReasonsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Entry Points. <p><strong>OperationId:</strong>putEntryPoints</p>
     * Change Entry Points
     */
    async putEntryPointsRaw(requestParameters: PutEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.entryPointsId === null || requestParameters.entryPointsId === undefined) {
            throw new runtime.RequiredError('entryPointsId','Required parameter requestParameters.entryPointsId was null or undefined when calling putEntryPoints.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putEntryPoints.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putEntryPoints.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putEntryPoints.');
        }

        if (requestParameters.entryPointsToBeChanged === null || requestParameters.entryPointsToBeChanged === undefined) {
            throw new runtime.RequiredError('entryPointsToBeChanged','Required parameter requestParameters.entryPointsToBeChanged was null or undefined when calling putEntryPoints.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/entryPoints/{entryPointsId}`.replace(`{${"entryPointsId"}}`, encodeURIComponent(String(requestParameters.entryPointsId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntryPointsToBeChangedToJSON(requestParameters.entryPointsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Entry Points. <p><strong>OperationId:</strong>putEntryPoints</p>
     * Change Entry Points
     */
    async putEntryPoints(requestParameters: PutEntryPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putEntryPointsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Move Reason Codes. <p><strong>OperationId:</strong>putMoveReasonCodes</p>
     * Change Move Reason Codes
     */
    async putMoveReasonCodesRaw(requestParameters: PutMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.moveReasonCodesId === null || requestParameters.moveReasonCodesId === undefined) {
            throw new runtime.RequiredError('moveReasonCodesId','Required parameter requestParameters.moveReasonCodesId was null or undefined when calling putMoveReasonCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putMoveReasonCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putMoveReasonCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putMoveReasonCodes.');
        }

        if (requestParameters.moveReasonCodesToBeChanged === null || requestParameters.moveReasonCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('moveReasonCodesToBeChanged','Required parameter requestParameters.moveReasonCodesToBeChanged was null or undefined when calling putMoveReasonCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/moveReasonCodes/{moveReasonCodesId}`.replace(`{${"moveReasonCodesId"}}`, encodeURIComponent(String(requestParameters.moveReasonCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MoveReasonCodesToBeChangedToJSON(requestParameters.moveReasonCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Move Reason Codes. <p><strong>OperationId:</strong>putMoveReasonCodes</p>
     * Change Move Reason Codes
     */
    async putMoveReasonCodes(requestParameters: PutMoveReasonCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMoveReasonCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Origin Codes. <p><strong>OperationId:</strong>putOriginCodes</p>
     * Change Origin Codes
     */
    async putOriginCodesRaw(requestParameters: PutOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.originCodesId === null || requestParameters.originCodesId === undefined) {
            throw new runtime.RequiredError('originCodesId','Required parameter requestParameters.originCodesId was null or undefined when calling putOriginCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putOriginCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putOriginCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putOriginCodes.');
        }

        if (requestParameters.originCodesToBeChanged === null || requestParameters.originCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('originCodesToBeChanged','Required parameter requestParameters.originCodesToBeChanged was null or undefined when calling putOriginCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/originCodes/{originCodesId}`.replace(`{${"originCodesId"}}`, encodeURIComponent(String(requestParameters.originCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OriginCodesToBeChangedToJSON(requestParameters.originCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Origin Codes. <p><strong>OperationId:</strong>putOriginCodes</p>
     * Change Origin Codes
     */
    async putOriginCodes(requestParameters: PutOriginCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putOriginCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Purpose Of Stays. <p><strong>OperationId:</strong>putPurposeOfStays</p>
     * Change Purpose Of Stays
     */
    async putPurposeOfStaysRaw(requestParameters: PutPurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.purposeOfStaysId === null || requestParameters.purposeOfStaysId === undefined) {
            throw new runtime.RequiredError('purposeOfStaysId','Required parameter requestParameters.purposeOfStaysId was null or undefined when calling putPurposeOfStays.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putPurposeOfStays.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putPurposeOfStays.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putPurposeOfStays.');
        }

        if (requestParameters.purposeOfStaysToBeChanged === null || requestParameters.purposeOfStaysToBeChanged === undefined) {
            throw new runtime.RequiredError('purposeOfStaysToBeChanged','Required parameter requestParameters.purposeOfStaysToBeChanged was null or undefined when calling putPurposeOfStays.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/purposeOfStays/{purposeOfStaysId}`.replace(`{${"purposeOfStaysId"}}`, encodeURIComponent(String(requestParameters.purposeOfStaysId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PurposeOfStaysToBeChangedToJSON(requestParameters.purposeOfStaysToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Purpose Of Stays. <p><strong>OperationId:</strong>putPurposeOfStays</p>
     * Change Purpose Of Stays
     */
    async putPurposeOfStays(requestParameters: PutPurposeOfStaysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putPurposeOfStaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Waitlist Codes. <p><strong>OperationId:</strong>putWaitlistCodes</p>
     * Change Waitlist Codes
     */
    async putWaitlistCodesRaw(requestParameters: PutWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.waitlistCodesId === null || requestParameters.waitlistCodesId === undefined) {
            throw new runtime.RequiredError('waitlistCodesId','Required parameter requestParameters.waitlistCodesId was null or undefined when calling putWaitlistCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putWaitlistCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putWaitlistCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putWaitlistCodes.');
        }

        if (requestParameters.waitlistCodesToBeChanged === null || requestParameters.waitlistCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('waitlistCodesToBeChanged','Required parameter requestParameters.waitlistCodesToBeChanged was null or undefined when calling putWaitlistCodes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistCodes/{waitlistCodesId}`.replace(`{${"waitlistCodesId"}}`, encodeURIComponent(String(requestParameters.waitlistCodesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WaitlistCodesToBeChangedToJSON(requestParameters.waitlistCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Waitlist Codes. <p><strong>OperationId:</strong>putWaitlistCodes</p>
     * Change Waitlist Codes
     */
    async putWaitlistCodes(requestParameters: PutWaitlistCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putWaitlistCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Waitlist Priorities. <p><strong>OperationId:</strong>putWaitlistPriorities</p>
     * Change Waitlist Priorities
     */
    async putWaitlistPrioritiesRaw(requestParameters: PutWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.waitlistPrioritiesId === null || requestParameters.waitlistPrioritiesId === undefined) {
            throw new runtime.RequiredError('waitlistPrioritiesId','Required parameter requestParameters.waitlistPrioritiesId was null or undefined when calling putWaitlistPriorities.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putWaitlistPriorities.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putWaitlistPriorities.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putWaitlistPriorities.');
        }

        if (requestParameters.waitlistPrioritiesToBeChanged === null || requestParameters.waitlistPrioritiesToBeChanged === undefined) {
            throw new runtime.RequiredError('waitlistPrioritiesToBeChanged','Required parameter requestParameters.waitlistPrioritiesToBeChanged was null or undefined when calling putWaitlistPriorities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/waitlistPriorities/{waitlistPrioritiesId}`.replace(`{${"waitlistPrioritiesId"}}`, encodeURIComponent(String(requestParameters.waitlistPrioritiesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WaitlistPrioritiesToBeChangedToJSON(requestParameters.waitlistPrioritiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Waitlist Priorities. <p><strong>OperationId:</strong>putWaitlistPriorities</p>
     * Change Waitlist Priorities
     */
    async putWaitlistPriorities(requestParameters: PutWaitlistPrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putWaitlistPrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Block Conversions. <p><strong>OperationId:</strong>removeBlockConversions</p>
     * Delete Block Conversions
     */
    async removeBlockConversionsRaw(requestParameters: RemoveBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockConversionCode === null || requestParameters.blockConversionCode === undefined) {
            throw new runtime.RequiredError('blockConversionCode','Required parameter requestParameters.blockConversionCode was null or undefined when calling removeBlockConversions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeBlockConversions.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeBlockConversions.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeBlockConversions.');
        }

        const queryParameters: any = {};

        if (requestParameters.blockConversionsCodes) {
            queryParameters['blockConversionsCodes'] = requestParameters.blockConversionsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockConversions/{blockConversionCode}`.replace(`{${"blockConversionCode"}}`, encodeURIComponent(String(requestParameters.blockConversionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Block Conversions. <p><strong>OperationId:</strong>removeBlockConversions</p>
     * Delete Block Conversions
     */
    async removeBlockConversions(requestParameters: RemoveBlockConversionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeBlockConversionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Block Ranking. <p><strong>OperationId:</strong>removeBlockRankings</p>
     * Delete Block Ranking
     */
    async removeBlockRankingsRaw(requestParameters: RemoveBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.blockRankingsCode === null || requestParameters.blockRankingsCode === undefined) {
            throw new runtime.RequiredError('blockRankingsCode','Required parameter requestParameters.blockRankingsCode was null or undefined when calling removeBlockRankings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeBlockRankings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeBlockRankings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeBlockRankings.');
        }

        const queryParameters: any = {};

        if (requestParameters.blockRankingsCodes) {
            queryParameters['blockRankingsCodes'] = requestParameters.blockRankingsCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/blockRankings/{blockRankingsCode}`.replace(`{${"blockRankingsCode"}}`, encodeURIComponent(String(requestParameters.blockRankingsCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Block Ranking. <p><strong>OperationId:</strong>removeBlockRankings</p>
     * Delete Block Ranking
     */
    async removeBlockRankings(requestParameters: RemoveBlockRankingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeBlockRankingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Global Action Codes. <p><strong>OperationId:</strong>removeGlobalActionCodes</p>
     * Delete Global Action Codes
     */
    async removeGlobalActionCodesRaw(requestParameters: RemoveGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.actionCode === null || requestParameters.actionCode === undefined) {
            throw new runtime.RequiredError('actionCode','Required parameter requestParameters.actionCode was null or undefined when calling removeGlobalActionCodes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeGlobalActionCodes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeGlobalActionCodes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeGlobalActionCodes.');
        }

        const queryParameters: any = {};

        if (requestParameters.globalActionCodesCodes) {
            queryParameters['globalActionCodesCodes'] = requestParameters.globalActionCodesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalActionCodes/{actionCode}`.replace(`{${"actionCode"}}`, encodeURIComponent(String(requestParameters.actionCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Global Action Codes. <p><strong>OperationId:</strong>removeGlobalActionCodes</p>
     * Delete Global Action Codes
     */
    async removeGlobalActionCodes(requestParameters: RemoveGlobalActionCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeGlobalActionCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>removeScripts</p>
     * Change Scripts
     */
    async removeScriptsRaw(requestParameters: RemoveScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.scriptCode === null || requestParameters.scriptCode === undefined) {
            throw new runtime.RequiredError('scriptCode','Required parameter requestParameters.scriptCode was null or undefined when calling removeScripts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling removeScripts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling removeScripts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling removeScripts.');
        }

        const queryParameters: any = {};

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/scripts/{scriptCode}`.replace(`{${"scriptCode"}}`, encodeURIComponent(String(requestParameters.scriptCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Scripts. <p><strong>OperationId:</strong>removeScripts</p>
     * Change Scripts
     */
    async removeScripts(requestParameters: RemoveScriptsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeScriptsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetScriptsTypeEnum = {
    ClosingScript: 'ClosingScript',
    WebRegCard: 'WebRegCard'
} as const;
export type GetScriptsTypeEnum = typeof GetScriptsTypeEnum[keyof typeof GetScriptsTypeEnum];
