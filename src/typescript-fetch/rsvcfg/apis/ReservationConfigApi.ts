/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlertCodeTemplates,
  AlertCodes,
  AlertTemplates,
  AutoAttachElements,
  AutoAttachElementsConfig,
  AutoAttachElementsCopy,
  ECouponCodes,
  ECouponCodesCopy,
  ExceptionDetailType,
  GlobalAlerts,
  GlobalAlertsCopy,
  GlobalAlertsInfo,
  GuestMessageTemplates,
  GuestMessages,
  HotelTurnAwayCodes,
  LocatorCodes,
  LocatorCodesInfo,
  LocatorCodesTemplate,
  LocatorCodesTemplateInfo,
  MembershipLevelRatings,
  MembershipLevelRatingsInfo,
  RatePlanRatings,
  RatePlanRatingsInfo,
  ReservationColorsResponse,
  ReservationColorsToChange,
  RetrievedGuestMessages,
  RoomFeatureRatings,
  RoomFeatureRatingsInfo,
  RoomRatings,
  RoomRatingsInfo,
  RoomSpecialRatings,
  RoomSpecialRatingsInfo,
  Status,
  TemplateTurnAwayCodes,
  TraceTextChanges,
  TraceTextsCopy,
  TraceTextsToBeCreated,
  TraceTextsToBeFetched,
  UpsellRules,
  UpsellRulesCopy,
  UpsellRulesToTest,
  UpsellRulesToTestDetails,
} from '../models/index';
import {
    AlertCodeTemplatesFromJSON,
    AlertCodeTemplatesToJSON,
    AlertCodesFromJSON,
    AlertCodesToJSON,
    AlertTemplatesFromJSON,
    AlertTemplatesToJSON,
    AutoAttachElementsFromJSON,
    AutoAttachElementsToJSON,
    AutoAttachElementsConfigFromJSON,
    AutoAttachElementsConfigToJSON,
    AutoAttachElementsCopyFromJSON,
    AutoAttachElementsCopyToJSON,
    ECouponCodesFromJSON,
    ECouponCodesToJSON,
    ECouponCodesCopyFromJSON,
    ECouponCodesCopyToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GlobalAlertsFromJSON,
    GlobalAlertsToJSON,
    GlobalAlertsCopyFromJSON,
    GlobalAlertsCopyToJSON,
    GlobalAlertsInfoFromJSON,
    GlobalAlertsInfoToJSON,
    GuestMessageTemplatesFromJSON,
    GuestMessageTemplatesToJSON,
    GuestMessagesFromJSON,
    GuestMessagesToJSON,
    HotelTurnAwayCodesFromJSON,
    HotelTurnAwayCodesToJSON,
    LocatorCodesFromJSON,
    LocatorCodesToJSON,
    LocatorCodesInfoFromJSON,
    LocatorCodesInfoToJSON,
    LocatorCodesTemplateFromJSON,
    LocatorCodesTemplateToJSON,
    LocatorCodesTemplateInfoFromJSON,
    LocatorCodesTemplateInfoToJSON,
    MembershipLevelRatingsFromJSON,
    MembershipLevelRatingsToJSON,
    MembershipLevelRatingsInfoFromJSON,
    MembershipLevelRatingsInfoToJSON,
    RatePlanRatingsFromJSON,
    RatePlanRatingsToJSON,
    RatePlanRatingsInfoFromJSON,
    RatePlanRatingsInfoToJSON,
    ReservationColorsResponseFromJSON,
    ReservationColorsResponseToJSON,
    ReservationColorsToChangeFromJSON,
    ReservationColorsToChangeToJSON,
    RetrievedGuestMessagesFromJSON,
    RetrievedGuestMessagesToJSON,
    RoomFeatureRatingsFromJSON,
    RoomFeatureRatingsToJSON,
    RoomFeatureRatingsInfoFromJSON,
    RoomFeatureRatingsInfoToJSON,
    RoomRatingsFromJSON,
    RoomRatingsToJSON,
    RoomRatingsInfoFromJSON,
    RoomRatingsInfoToJSON,
    RoomSpecialRatingsFromJSON,
    RoomSpecialRatingsToJSON,
    RoomSpecialRatingsInfoFromJSON,
    RoomSpecialRatingsInfoToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateTurnAwayCodesFromJSON,
    TemplateTurnAwayCodesToJSON,
    TraceTextChangesFromJSON,
    TraceTextChangesToJSON,
    TraceTextsCopyFromJSON,
    TraceTextsCopyToJSON,
    TraceTextsToBeCreatedFromJSON,
    TraceTextsToBeCreatedToJSON,
    TraceTextsToBeFetchedFromJSON,
    TraceTextsToBeFetchedToJSON,
    UpsellRulesFromJSON,
    UpsellRulesToJSON,
    UpsellRulesCopyFromJSON,
    UpsellRulesCopyToJSON,
    UpsellRulesToTestFromJSON,
    UpsellRulesToTestToJSON,
    UpsellRulesToTestDetailsFromJSON,
    UpsellRulesToTestDetailsToJSON,
} from '../models/index';

export interface CopyAutoAttachElementsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElementsCopy: AutoAttachElementsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyECouponCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponCodesCopy: ECouponCodesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyGlobalAlertsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlertsCopy: GlobalAlertsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTraceTextsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    traceTextsCopy: TraceTextsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyUpsellRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRulesCopy: UpsellRulesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAlertCodeTemplatesRequest {
    alertCodeTemplateCodes: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAlertCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAutoAttachElementsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElements: AutoAttachElements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteECouponCodesRequest {
    ecouponCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGlobalAlertsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlerts: GlobalAlerts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuestMessageTemplatesRequest {
    guestMessageTemplateCodes: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuestMessagesRequest {
    messageCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHotelTurnAwayCodesRequest {
    code: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteLocatorCodesRequest {
    locatorCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteLocatorCodesTemplateRequest {
    locatorCodes: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateTurnAwayCodesRequest {
    turnawayCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTraceTextsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    departmentCode?: Array<string>;
    traceText?: Array<string>;
    canDelete?: Array<boolean>;
    displaySequence?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteUpsellRulesRequest {
    ruleCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlertCodeTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlertCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    alertCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAutoAttachElementsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    code?: Array<string>;
    criteriaCode?: string;
    type?: GetAutoAttachElementsTypeEnum;
    basedOn?: GetAutoAttachElementsBasedOnEnum;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetECouponCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    eCouponCodes?: Array<string>;
    wildCardECouponCodes?: string;
    ratePlansCodes?: Array<string>;
    wildCardRatePlans?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGlobalAlertsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    alertCodes?: Array<string>;
    wildCard?: string;
    welcomeOffer?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestMessageTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessageCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestMessagesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    guestMessageCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelTurnAwayCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    code?: Array<string>;
    turnAwayCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLocatorCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    locatorCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLocatorCodesTemplateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipLevelRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    membershipTypeCodes?: Array<string>;
    wildCardMembershipTypes?: string;
    membershipLevelCodes?: Array<string>;
    wildCardMembershipLevels?: string;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    ratePlanCodes?: Array<string>;
    rateCategoryCodes?: Array<string>;
    ratings?: Set<GetRatePlanRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationColorsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomFeatureRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    featureCodes?: Array<string>;
    wildCardRoomFeatures?: string;
    descriptionWildCard?: string;
    ratings?: Set<GetRoomFeatureRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    roomNumberCodes?: Array<string>;
    roomTypeCodes?: Array<string>;
    roomClassCodes?: Array<string>;
    ratings?: Set<GetRoomRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomSpecialRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    specialCodes?: Array<string>;
    wildCardRoomSpecials?: string;
    descriptionWildCard?: string;
    ratings?: Set<GetRoomSpecialRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTurnAwayCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTraceTextsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeGlobal?: boolean;
    departmentCodes?: Array<string>;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    stayDate?: string;
    rule?: string;
    searchByRoomType?: boolean;
    fromCodes?: Array<string>;
    toCodes?: Array<string>;
    rateCode?: string;
    membershipType?: string;
    channel?: string;
    reservationTypeCodes?: Array<string>;
    marketCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAlertCodeTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertTemplates: AlertTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAlertCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertCodes: AlertCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAutoAttachElementsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElements: AutoAttachElements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostECouponCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponCodes: ECouponCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGlobalAlertsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlerts: GlobalAlerts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestMessageTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessageTemplates: GuestMessageTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestMessagesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessages: GuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelTurnAwayCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTurnAwayCodes: HotelTurnAwayCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostLocatorCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodes: LocatorCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostLocatorCodesTemplateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodesTemplate: LocatorCodesTemplate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateTurnAwayCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTurnAwayCodes: TemplateTurnAwayCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTraceTextsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    traceTextsToBeCreated: TraceTextsToBeCreated;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUpsellRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRules: UpsellRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAlertCodeTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertTemplates: AlertTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAlertCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertCodes: AlertCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAutoAttachElementsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElements: AutoAttachElements;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutECouponCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponCodes: ECouponCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGlobalAlertsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlerts: GlobalAlerts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGuestMessageTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessageTemplates: GuestMessageTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGuestMessagesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessages: GuestMessages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutHotelTurnAwayCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTurnAwayCodes: HotelTurnAwayCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutLocatorCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodes: LocatorCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutLocatorCodesTemplateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodesTemplate: LocatorCodesTemplate;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipLevelRatingsRequest {
    membershipLevel: string;
    membershipType: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipLevelRatings: MembershipLevelRatings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRatePlanRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanRatingsInfo: RatePlanRatingsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationColorsRequest {
    code: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationColorsToChange: ReservationColorsToChange;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomFeatureRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomFeatureRatings: RoomFeatureRatings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomRatingsRequest {
    roomId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRatingsInfo: RoomRatingsInfo;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomSpecialRatingsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomSpecialRatings: RoomSpecialRatings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateTurnAwayCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTurnAwayCodes: TemplateTurnAwayCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTraceTextsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    traceTextChanges: TraceTextChanges;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutUpsellRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRules: UpsellRules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface TestUpsellRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRulesToTest: UpsellRulesToTest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ReservationConfigApi extends runtime.BaseAPI {

    /**
     * You can use this API to copy Auto Attach Elements. <p><strong>OperationId:</strong>copyAutoAttachElements</p>
     * Copy Auto Attach Elements
     */
    async copyAutoAttachElementsRaw(requestParameters: CopyAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyAutoAttachElements.');
        }
        
        if (requestParameters.autoAttachElementsCopy === null || requestParameters.autoAttachElementsCopy === undefined) {
            throw new runtime.RequiredError('autoAttachElementsCopy','Required parameter requestParameters.autoAttachElementsCopy was null or undefined when calling copyAutoAttachElements.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AutoAttachElementsCopyToJSON(requestParameters.autoAttachElementsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to copy Auto Attach Elements. <p><strong>OperationId:</strong>copyAutoAttachElements</p>
     * Copy Auto Attach Elements
     */
    async copyAutoAttachElements(requestParameters: CopyAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy an existing property eCoupon Codes to create a new one. <p><strong>OperationId:</strong>copyECouponCodes</p>
     * Copy eCoupon Codes
     */
    async copyECouponCodesRaw(requestParameters: CopyECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyECouponCodes.');
        }
        
        if (requestParameters.eCouponCodesCopy === null || requestParameters.eCouponCodesCopy === undefined) {
            throw new runtime.RequiredError('eCouponCodesCopy','Required parameter requestParameters.eCouponCodesCopy was null or undefined when calling copyECouponCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecoupons/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ECouponCodesCopyToJSON(requestParameters.eCouponCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy an existing property eCoupon Codes to create a new one. <p><strong>OperationId:</strong>copyECouponCodes</p>
     * Copy eCoupon Codes
     */
    async copyECouponCodes(requestParameters: CopyECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy a Global Alert for a property. <p><strong>OperationId:</strong>copyGlobalAlerts</p>
     * Copy Global Alerts
     */
    async copyGlobalAlertsRaw(requestParameters: CopyGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.globalAlertsCopy === null || requestParameters.globalAlertsCopy === undefined) {
            throw new runtime.RequiredError('globalAlertsCopy','Required parameter requestParameters.globalAlertsCopy was null or undefined when calling copyGlobalAlerts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalAlerts/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalAlertsCopyToJSON(requestParameters.globalAlertsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy a Global Alert for a property. <p><strong>OperationId:</strong>copyGlobalAlerts</p>
     * Copy Global Alerts
     */
    async copyGlobalAlerts(requestParameters: CopyGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy an existing Trace Text to create a new one. <p><strong>OperationId:</strong>copyTraceTexts</p>
     * Copy trace text 
     */
    async copyTraceTextsRaw(requestParameters: CopyTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyTraceTexts.');
        }
        
        if (requestParameters.traceTextsCopy === null || requestParameters.traceTextsCopy === undefined) {
            throw new runtime.RequiredError('traceTextsCopy','Required parameter requestParameters.traceTextsCopy was null or undefined when calling copyTraceTexts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/traceTexts/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TraceTextsCopyToJSON(requestParameters.traceTextsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy an existing Trace Text to create a new one. <p><strong>OperationId:</strong>copyTraceTexts</p>
     * Copy trace text 
     */
    async copyTraceTexts(requestParameters: CopyTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy an existing upsell rule, to create a new one. <p><strong>OperationId:</strong>copyUpsellRules</p>
     * Copy upsell rules
     */
    async copyUpsellRulesRaw(requestParameters: CopyUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyUpsellRules.');
        }
        
        if (requestParameters.upsellRulesCopy === null || requestParameters.upsellRulesCopy === undefined) {
            throw new runtime.RequiredError('upsellRulesCopy','Required parameter requestParameters.upsellRulesCopy was null or undefined when calling copyUpsellRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsellRulesCopyToJSON(requestParameters.upsellRulesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy an existing upsell rule, to create a new one. <p><strong>OperationId:</strong>copyUpsellRules</p>
     * Copy upsell rules
     */
    async copyUpsellRules(requestParameters: CopyUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing alert code template. <p><strong>OperationId:</strong>deleteAlertCodeTemplates</p>
     * Delete Alert Code Template
     */
    async deleteAlertCodeTemplatesRaw(requestParameters: DeleteAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.alertCodeTemplateCodes === null || requestParameters.alertCodeTemplateCodes === undefined) {
            throw new runtime.RequiredError('alertCodeTemplateCodes','Required parameter requestParameters.alertCodeTemplateCodes was null or undefined when calling deleteAlertCodeTemplates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.alertCodeTemplateCodes) {
            queryParameters['alertCodeTemplateCodes'] = requestParameters.alertCodeTemplateCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing alert code template. <p><strong>OperationId:</strong>deleteAlertCodeTemplates</p>
     * Delete Alert Code Template
     */
    async deleteAlertCodeTemplates(requestParameters: DeleteAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete an Alert Code. <p><strong>OperationId:</strong>deleteAlertCodes</p>
     * Delete an Alert Code
     */
    async deleteAlertCodesRaw(requestParameters: DeleteAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteAlertCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete an Alert Code. <p><strong>OperationId:</strong>deleteAlertCodes</p>
     * Delete an Alert Code
     */
    async deleteAlertCodes(requestParameters: DeleteAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an Auto Attach Element Rule on a property. <p><strong>OperationId:</strong>deleteAutoAttachElements</p>
     * Delete Auto Attach Elements
     */
    async deleteAutoAttachElementsRaw(requestParameters: DeleteAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.autoAttachElements === null || requestParameters.autoAttachElements === undefined) {
            throw new runtime.RequiredError('autoAttachElements','Required parameter requestParameters.autoAttachElements was null or undefined when calling deleteAutoAttachElements.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/autoAttachElements`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AutoAttachElementsToJSON(requestParameters.autoAttachElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an Auto Attach Element Rule on a property. <p><strong>OperationId:</strong>deleteAutoAttachElements</p>
     * Delete Auto Attach Elements
     */
    async deleteAutoAttachElements(requestParameters: DeleteAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing eCoupon Code. <p><strong>OperationId:</strong>deleteECouponCodes</p>
     * Delete an eCoupon Code
     */
    async deleteECouponCodesRaw(requestParameters: DeleteECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ecouponCode === null || requestParameters.ecouponCode === undefined) {
            throw new runtime.RequiredError('ecouponCode','Required parameter requestParameters.ecouponCode was null or undefined when calling deleteECouponCodes.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteECouponCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecouponCodes/{ecouponCode}`.replace(`{${"ecouponCode"}}`, encodeURIComponent(String(requestParameters.ecouponCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing eCoupon Code. <p><strong>OperationId:</strong>deleteECouponCodes</p>
     * Delete an eCoupon Code
     */
    async deleteECouponCodes(requestParameters: DeleteECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Global Alert for a property. <p><strong>OperationId:</strong>deleteGlobalAlerts</p>
     * Delete a Global Alert Code
     */
    async deleteGlobalAlertsRaw(requestParameters: DeleteGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.globalAlerts === null || requestParameters.globalAlerts === undefined) {
            throw new runtime.RequiredError('globalAlerts','Required parameter requestParameters.globalAlerts was null or undefined when calling deleteGlobalAlerts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalAlerts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalAlertsToJSON(requestParameters.globalAlerts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a Global Alert for a property. <p><strong>OperationId:</strong>deleteGlobalAlerts</p>
     * Delete a Global Alert Code
     */
    async deleteGlobalAlerts(requestParameters: DeleteGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Guest Message Template. <p><strong>OperationId:</strong>deleteGuestMessageTemplates</p>
     * Delete an existing guest message template
     */
    async deleteGuestMessageTemplatesRaw(requestParameters: DeleteGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestMessageTemplateCodes === null || requestParameters.guestMessageTemplateCodes === undefined) {
            throw new runtime.RequiredError('guestMessageTemplateCodes','Required parameter requestParameters.guestMessageTemplateCodes was null or undefined when calling deleteGuestMessageTemplates.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.guestMessageTemplateCodes) {
            queryParameters['guestMessageTemplateCodes'] = requestParameters.guestMessageTemplateCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Guest Message Template. <p><strong>OperationId:</strong>deleteGuestMessageTemplates</p>
     * Delete an existing guest message template
     */
    async deleteGuestMessageTemplates(requestParameters: DeleteGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete a Guest messages. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete a Guest messages
     */
    async deleteGuestMessagesRaw(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.messageCode === null || requestParameters.messageCode === undefined) {
            throw new runtime.RequiredError('messageCode','Required parameter requestParameters.messageCode was null or undefined when calling deleteGuestMessages.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteGuestMessages.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages/{messageCode}`.replace(`{${"messageCode"}}`, encodeURIComponent(String(requestParameters.messageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete a Guest messages. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete a Guest messages
     */
    async deleteGuestMessages(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Turnaway code for a property. <p><strong>OperationId:</strong>deleteHotelTurnAwayCodes</p>
     * Delete an existing turnaway code
     */
    async deleteHotelTurnAwayCodesRaw(requestParameters: DeleteHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling deleteHotelTurnAwayCodes.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteHotelTurnAwayCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Turnaway code for a property. <p><strong>OperationId:</strong>deleteHotelTurnAwayCodes</p>
     * Delete an existing turnaway code
     */
    async deleteHotelTurnAwayCodes(requestParameters: DeleteHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete a Locator Code. <p><strong>OperationId:</strong>deleteLocatorCodes</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodesRaw(requestParameters: DeleteLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locatorCode === null || requestParameters.locatorCode === undefined) {
            throw new runtime.RequiredError('locatorCode','Required parameter requestParameters.locatorCode was null or undefined when calling deleteLocatorCodes.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteLocatorCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes/{locatorCode}`.replace(`{${"locatorCode"}}`, encodeURIComponent(String(requestParameters.locatorCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete a Locator Code. <p><strong>OperationId:</strong>deleteLocatorCodes</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodes(requestParameters: DeleteLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected Locator Code <p><strong>OperationId:</strong>deleteLocatorCodesTemplate</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodesTemplateRaw(requestParameters: DeleteLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locatorCodes === null || requestParameters.locatorCodes === undefined) {
            throw new runtime.RequiredError('locatorCodes','Required parameter requestParameters.locatorCodes was null or undefined when calling deleteLocatorCodesTemplate.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.locatorCodes) {
            queryParameters['locatorCodes'] = requestParameters.locatorCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete the selected Locator Code <p><strong>OperationId:</strong>deleteLocatorCodesTemplate</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodesTemplate(requestParameters: DeleteLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Turnaway Code Template. <p><strong>OperationId:</strong>deleteTemplateTurnAwayCodes</p>
     * Delete a Turnaway code template
     */
    async deleteTemplateTurnAwayCodesRaw(requestParameters: DeleteTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.turnawayCode === null || requestParameters.turnawayCode === undefined) {
            throw new runtime.RequiredError('turnawayCode','Required parameter requestParameters.turnawayCode was null or undefined when calling deleteTemplateTurnAwayCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes/{turnawayCode}`.replace(`{${"turnawayCode"}}`, encodeURIComponent(String(requestParameters.turnawayCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Turnaway Code Template. <p><strong>OperationId:</strong>deleteTemplateTurnAwayCodes</p>
     * Delete a Turnaway code template
     */
    async deleteTemplateTurnAwayCodes(requestParameters: DeleteTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Trace Text for a property. <p><strong>OperationId:</strong>deleteTraceTexts</p>
     * Delete trace text 
     */
    async deleteTraceTextsRaw(requestParameters: DeleteTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.departmentCode) {
            queryParameters['departmentCode'] = requestParameters.departmentCode;
        }

        if (requestParameters.traceText) {
            queryParameters['traceText'] = requestParameters.traceText;
        }

        if (requestParameters.canDelete) {
            queryParameters['canDelete'] = requestParameters.canDelete;
        }

        if (requestParameters.displaySequence) {
            queryParameters['displaySequence'] = requestParameters.displaySequence;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Trace Text for a property. <p><strong>OperationId:</strong>deleteTraceTexts</p>
     * Delete trace text 
     */
    async deleteTraceTexts(requestParameters: DeleteTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Upgrade rule for a property. <p><strong>OperationId:</strong>deleteUpsellRules</p>
     * Delete an Upsell Rule
     */
    async deleteUpsellRulesRaw(requestParameters: DeleteUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.ruleCode === null || requestParameters.ruleCode === undefined) {
            throw new runtime.RequiredError('ruleCode','Required parameter requestParameters.ruleCode was null or undefined when calling deleteUpsellRules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteUpsellRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules/{ruleCode}`.replace(`{${"ruleCode"}}`, encodeURIComponent(String(requestParameters.ruleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Upgrade rule for a property. <p><strong>OperationId:</strong>deleteUpsellRules</p>
     * Delete an Upsell Rule
     */
    async deleteUpsellRules(requestParameters: DeleteUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all configured Alert Code Templates. <p><strong>OperationId:</strong>getAlertCodeTemplates</p>
     * Get Alert Code Templates
     */
    async getAlertCodeTemplatesRaw(requestParameters: GetAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertCodeTemplates>> {
        const queryParameters: any = {};

        if (requestParameters.alertCodes) {
            queryParameters['alertCodes'] = requestParameters.alertCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertCodeTemplatesFromJSON(jsonValue));
    }

    /**
     * Retrieve all configured Alert Code Templates. <p><strong>OperationId:</strong>getAlertCodeTemplates</p>
     * Get Alert Code Templates
     */
    async getAlertCodeTemplates(requestParameters: GetAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertCodeTemplates> {
        const response = await this.getAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Alert Codes. <p><strong>OperationId:</strong>getAlertCodes</p>
     * Get Alert Codes
     */
    async getAlertCodesRaw(requestParameters: GetAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertCodes>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAlertCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.alertCodes) {
            queryParameters['alertCodes'] = requestParameters.alertCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertCodesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Alert Codes. <p><strong>OperationId:</strong>getAlertCodes</p>
     * Get Alert Codes
     */
    async getAlertCodes(requestParameters: GetAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertCodes> {
        const response = await this.getAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the Auto Attach Element Rules that are configured. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>getAutoAttachElements</p>
     * Get Auto Attach Elements
     */
    async getAutoAttachElementsRaw(requestParameters: GetAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoAttachElementsConfig>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getAutoAttachElements.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.criteriaCode !== undefined) {
            queryParameters['criteriaCode'] = requestParameters.criteriaCode;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.basedOn !== undefined) {
            queryParameters['basedOn'] = requestParameters.basedOn;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoAttachElementsConfigFromJSON(jsonValue));
    }

    /**
     * Retrieve the Auto Attach Element Rules that are configured. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>getAutoAttachElements</p>
     * Get Auto Attach Elements
     */
    async getAutoAttachElements(requestParameters: GetAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoAttachElementsConfig> {
        const response = await this.getAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get existing property eCoupon Codes. <p><strong>OperationId:</strong>getECouponCodes</p>
     * Get eCoupon Codes
     */
    async getECouponCodesRaw(requestParameters: GetECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECouponCodes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.eCouponCodes) {
            queryParameters['eCouponCodes'] = requestParameters.eCouponCodes;
        }

        if (requestParameters.wildCardECouponCodes !== undefined) {
            queryParameters['wildCardECouponCodes'] = requestParameters.wildCardECouponCodes;
        }

        if (requestParameters.ratePlansCodes) {
            queryParameters['ratePlansCodes'] = requestParameters.ratePlansCodes;
        }

        if (requestParameters.wildCardRatePlans !== undefined) {
            queryParameters['wildCardRatePlans'] = requestParameters.wildCardRatePlans;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecoupons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECouponCodesFromJSON(jsonValue));
    }

    /**
     * Get existing property eCoupon Codes. <p><strong>OperationId:</strong>getECouponCodes</p>
     * Get eCoupon Codes
     */
    async getECouponCodes(requestParameters: GetECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECouponCodes> {
        const response = await this.getECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all configured Global Alerts for a property. <p><strong>OperationId:</strong>getGlobalAlerts</p>
     * Get Global Alerts
     */
    async getGlobalAlertsRaw(requestParameters: GetGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalAlertsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.alertCodes) {
            queryParameters['alertCodes'] = requestParameters.alertCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.welcomeOffer !== undefined) {
            queryParameters['welcomeOffer'] = requestParameters.welcomeOffer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalAlerts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalAlertsInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve all configured Global Alerts for a property. <p><strong>OperationId:</strong>getGlobalAlerts</p>
     * Get Global Alerts
     */
    async getGlobalAlerts(requestParameters: GetGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalAlertsInfo> {
        const response = await this.getGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the configured Guest Message Templates. <p><strong>OperationId:</strong>getGuestMessageTemplates</p>
     * Get Guest Message Templates
     */
    async getGuestMessageTemplatesRaw(requestParameters: GetGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestMessageTemplates>> {
        const queryParameters: any = {};

        if (requestParameters.guestMessageCodes) {
            queryParameters['guestMessageCodes'] = requestParameters.guestMessageCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestMessageTemplatesFromJSON(jsonValue));
    }

    /**
     * Retrieve the configured Guest Message Templates. <p><strong>OperationId:</strong>getGuestMessageTemplates</p>
     * Get Guest Message Templates
     */
    async getGuestMessageTemplates(requestParameters: GetGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestMessageTemplates> {
        const response = await this.getGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Guest Messages. <p><strong>OperationId:</strong>getGuestMessages</p> <p>The maximum allowable limit for this API is <strong>100</strong>.</p>
     * Get Guest Messages
     */
    async getGuestMessagesRaw(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrievedGuestMessages>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getGuestMessages.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.guestMessageCodes) {
            queryParameters['guestMessageCodes'] = requestParameters.guestMessageCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrievedGuestMessagesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Guest Messages. <p><strong>OperationId:</strong>getGuestMessages</p> <p>The maximum allowable limit for this API is <strong>100</strong>.</p>
     * Get Guest Messages
     */
    async getGuestMessages(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrievedGuestMessages> {
        const response = await this.getGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to fetch all configured Turnaway codes for a property. <p><strong>OperationId:</strong>getHotelTurnAwayCodes</p>
     * Get Turnaway codes
     */
    async getHotelTurnAwayCodesRaw(requestParameters: GetHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTurnAwayCodes>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getHotelTurnAwayCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.turnAwayCodes) {
            queryParameters['turnAwayCodes'] = requestParameters.turnAwayCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTurnAwayCodesFromJSON(jsonValue));
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to fetch all configured Turnaway codes for a property. <p><strong>OperationId:</strong>getHotelTurnAwayCodes</p>
     * Get Turnaway codes
     */
    async getHotelTurnAwayCodes(requestParameters: GetHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTurnAwayCodes> {
        const response = await this.getHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get existing property Locator Codes. <p><strong>OperationId:</strong>getLocatorCodes</p>
     * Get existing property Locator Codes
     */
    async getLocatorCodesRaw(requestParameters: GetLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocatorCodesInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getLocatorCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.locatorCodes) {
            queryParameters['locatorCodes'] = requestParameters.locatorCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocatorCodesInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get existing property Locator Codes. <p><strong>OperationId:</strong>getLocatorCodes</p>
     * Get existing property Locator Codes
     */
    async getLocatorCodes(requestParameters: GetLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocatorCodesInfo> {
        const response = await this.getLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get existing template Locator Codes <p><strong>OperationId:</strong>getLocatorCodesTemplate</p>
     * Get template Locator Codes
     */
    async getLocatorCodesTemplateRaw(requestParameters: GetLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocatorCodesTemplateInfo>> {
        const queryParameters: any = {};

        if (requestParameters.locatorCodes) {
            queryParameters['locatorCodes'] = requestParameters.locatorCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocatorCodesTemplateInfoFromJSON(jsonValue));
    }

    /**
     * Get existing template Locator Codes <p><strong>OperationId:</strong>getLocatorCodesTemplate</p>
     * Get template Locator Codes
     */
    async getLocatorCodesTemplate(requestParameters: GetLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocatorCodesTemplateInfo> {
        const response = await this.getLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API accepts the membership level ratings in the request and returns gets the membership levels. <p><strong>OperationId:</strong>getMembershipLevelRatings</p>
     * Get Membership Level Ratings
     */
    async getMembershipLevelRatingsRaw(requestParameters: GetMembershipLevelRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipLevelRatingsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getMembershipLevelRatings.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.membershipTypeCodes) {
            queryParameters['membershipTypeCodes'] = requestParameters.membershipTypeCodes;
        }

        if (requestParameters.wildCardMembershipTypes !== undefined) {
            queryParameters['wildCardMembershipTypes'] = requestParameters.wildCardMembershipTypes;
        }

        if (requestParameters.membershipLevelCodes) {
            queryParameters['membershipLevelCodes'] = requestParameters.membershipLevelCodes;
        }

        if (requestParameters.wildCardMembershipLevels !== undefined) {
            queryParameters['wildCardMembershipLevels'] = requestParameters.wildCardMembershipLevels;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/membershipLevels/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipLevelRatingsInfoFromJSON(jsonValue));
    }

    /**
     * This API accepts the membership level ratings in the request and returns gets the membership levels. <p><strong>OperationId:</strong>getMembershipLevelRatings</p>
     * Get Membership Level Ratings
     */
    async getMembershipLevelRatings(requestParameters: GetMembershipLevelRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipLevelRatingsInfo> {
        const response = await this.getMembershipLevelRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Rate Plan Ratings. <p><strong>OperationId:</strong>getRatePlanRatings</p>
     * Get Rate Plan Ratings
     */
    async getRatePlanRatingsRaw(requestParameters: GetRatePlanRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanRatings>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRatePlanRatings.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.rateCategoryCodes) {
            queryParameters['rateCategoryCodes'] = requestParameters.rateCategoryCodes;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanRatingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Rate Plan Ratings. <p><strong>OperationId:</strong>getRatePlanRatings</p>
     * Get Rate Plan Ratings
     */
    async getRatePlanRatings(requestParameters: GetRatePlanRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanRatings> {
        const response = await this.getRatePlanRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Reservation Colors. <p><strong>OperationId:</strong>getReservationColors</p>
     * Get Reservation Colors
     */
    async getReservationColorsRaw(requestParameters: GetReservationColorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationColorsResponse>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getReservationColors.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/colors`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationColorsResponseFromJSON(jsonValue));
    }

    /**
     * Use this API to get Reservation Colors. <p><strong>OperationId:</strong>getReservationColors</p>
     * Get Reservation Colors
     */
    async getReservationColors(requestParameters: GetReservationColorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationColorsResponse> {
        const response = await this.getReservationColorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Room Feature Ratings. <p><strong>OperationId:</strong>getRoomFeatureRatings</p>
     * Get Room Feature Ratings
     */
    async getRoomFeatureRatingsRaw(requestParameters: GetRoomFeatureRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomFeatureRatingsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomFeatureRatings.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.featureCodes) {
            queryParameters['featureCodes'] = requestParameters.featureCodes;
        }

        if (requestParameters.wildCardRoomFeatures !== undefined) {
            queryParameters['wildCardRoomFeatures'] = requestParameters.wildCardRoomFeatures;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomFeatures/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFeatureRatingsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Room Feature Ratings. <p><strong>OperationId:</strong>getRoomFeatureRatings</p>
     * Get Room Feature Ratings
     */
    async getRoomFeatureRatings(requestParameters: GetRoomFeatureRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomFeatureRatingsInfo> {
        const response = await this.getRoomFeatureRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Room Ratings. <p><strong>OperationId:</strong>getRoomRatings</p>
     * Get Room Ratings
     */
    async getRoomRatingsRaw(requestParameters: GetRoomRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomRatings>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomRatings.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.roomNumberCodes) {
            queryParameters['roomNumberCodes'] = requestParameters.roomNumberCodes;
        }

        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }

        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomRatingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Room Ratings. <p><strong>OperationId:</strong>getRoomRatings</p>
     * Get Room Ratings
     */
    async getRoomRatings(requestParameters: GetRoomRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomRatings> {
        const response = await this.getRoomRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Room Special Ratings. <p><strong>OperationId:</strong>getRoomSpecialRatings</p>
     * Get Room Special Ratings
     */
    async getRoomSpecialRatingsRaw(requestParameters: GetRoomSpecialRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomSpecialRatingsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomSpecialRatings.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.specialCodes) {
            queryParameters['specialCodes'] = requestParameters.specialCodes;
        }

        if (requestParameters.wildCardRoomSpecials !== undefined) {
            queryParameters['wildCardRoomSpecials'] = requestParameters.wildCardRoomSpecials;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomSpecials/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomSpecialRatingsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Room Special Ratings. <p><strong>OperationId:</strong>getRoomSpecialRatings</p>
     * Get Room Special Ratings
     */
    async getRoomSpecialRatings(requestParameters: GetRoomSpecialRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomSpecialRatingsInfo> {
        const response = await this.getRoomSpecialRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all existing Turnaway Code Templates. <p><strong>OperationId:</strong>getTemplateTurnAwayCodes</p>
     * Get Template TurnAway Codes
     */
    async getTemplateTurnAwayCodesRaw(requestParameters: GetTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTurnAwayCodes>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTurnAwayCodesFromJSON(jsonValue));
    }

    /**
     * Retrieve all existing Turnaway Code Templates. <p><strong>OperationId:</strong>getTemplateTurnAwayCodes</p>
     * Get Template TurnAway Codes
     */
    async getTemplateTurnAwayCodes(requestParameters: GetTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTurnAwayCodes> {
        const response = await this.getTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch all configured Trace Texts for a property. <p><strong>OperationId:</strong>getTraceTexts</p>
     * Get trace texts 
     */
    async getTraceTextsRaw(requestParameters: GetTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TraceTextsToBeFetched>> {
        const queryParameters: any = {};

        if (requestParameters.excludeGlobal !== undefined) {
            queryParameters['excludeGlobal'] = requestParameters.excludeGlobal;
        }

        if (requestParameters.departmentCodes) {
            queryParameters['departmentCodes'] = requestParameters.departmentCodes;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraceTextsToBeFetchedFromJSON(jsonValue));
    }

    /**
     * Fetch all configured Trace Texts for a property. <p><strong>OperationId:</strong>getTraceTexts</p>
     * Get trace texts 
     */
    async getTraceTexts(requestParameters: GetTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TraceTextsToBeFetched> {
        const response = await this.getTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will retrieve all configured Upgrade Rules.  These enable you to configure the rules for calculating the reservation upsell amounts.   <p><strong>OperationId:</strong>getUpsellRules</p>
     * Get upsell rules
     */
    async getUpsellRulesRaw(requestParameters: GetUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpsellRules>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getUpsellRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = requestParameters.stayDate;
        }

        if (requestParameters.rule !== undefined) {
            queryParameters['rule'] = requestParameters.rule;
        }

        if (requestParameters.searchByRoomType !== undefined) {
            queryParameters['searchByRoomType'] = requestParameters.searchByRoomType;
        }

        if (requestParameters.fromCodes) {
            queryParameters['fromCodes'] = requestParameters.fromCodes;
        }

        if (requestParameters.toCodes) {
            queryParameters['toCodes'] = requestParameters.toCodes;
        }

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.channel !== undefined) {
            queryParameters['channel'] = requestParameters.channel;
        }

        if (requestParameters.reservationTypeCodes) {
            queryParameters['ReservationTypeCodes'] = requestParameters.reservationTypeCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsellRulesFromJSON(jsonValue));
    }

    /**
     * This API will retrieve all configured Upgrade Rules.  These enable you to configure the rules for calculating the reservation upsell amounts.   <p><strong>OperationId:</strong>getUpsellRules</p>
     * Get upsell rules
     */
    async getUpsellRules(requestParameters: GetUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpsellRules> {
        const response = await this.getUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Alert Code Template. <p><strong>OperationId:</strong>postAlertCodeTemplates</p>
     * Create Alert Code Template
     */
    async postAlertCodeTemplatesRaw(requestParameters: PostAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.alertTemplates === null || requestParameters.alertTemplates === undefined) {
            throw new runtime.RequiredError('alertTemplates','Required parameter requestParameters.alertTemplates was null or undefined when calling postAlertCodeTemplates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlertTemplatesToJSON(requestParameters.alertTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Alert Code Template. <p><strong>OperationId:</strong>postAlertCodeTemplates</p>
     * Create Alert Code Template
     */
    async postAlertCodeTemplates(requestParameters: PostAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new alert code. <p><strong>OperationId:</strong>postAlertCodes</p>
     * Create a new alert code
     */
    async postAlertCodesRaw(requestParameters: PostAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postAlertCodes.');
        }
        
        if (requestParameters.alertCodes === null || requestParameters.alertCodes === undefined) {
            throw new runtime.RequiredError('alertCodes','Required parameter requestParameters.alertCodes was null or undefined when calling postAlertCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AlertCodesToJSON(requestParameters.alertCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new alert code. <p><strong>OperationId:</strong>postAlertCodes</p>
     * Create a new alert code
     */
    async postAlertCodes(requestParameters: PostAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Auto Attach Element Rule. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>postAutoAttachElements</p>
     * Create Auto Attach Elements
     */
    async postAutoAttachElementsRaw(requestParameters: PostAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postAutoAttachElements.');
        }
        
        if (requestParameters.autoAttachElements === null || requestParameters.autoAttachElements === undefined) {
            throw new runtime.RequiredError('autoAttachElements','Required parameter requestParameters.autoAttachElements was null or undefined when calling postAutoAttachElements.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AutoAttachElementsToJSON(requestParameters.autoAttachElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Auto Attach Element Rule. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>postAutoAttachElements</p>
     * Create Auto Attach Elements
     */
    async postAutoAttachElements(requestParameters: PostAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can create an ecoupon for a specified property and it can be a maximum of 8 alphanumeric characters. You can enter a quantity value from 1 to 99. <p><strong>OperationId:</strong>postECouponCodes</p>
     * Create an eCoupon Code
     */
    async postECouponCodesRaw(requestParameters: PostECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postECouponCodes.');
        }
        
        if (requestParameters.eCouponCodes === null || requestParameters.eCouponCodes === undefined) {
            throw new runtime.RequiredError('eCouponCodes','Required parameter requestParameters.eCouponCodes was null or undefined when calling postECouponCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecoupons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ECouponCodesToJSON(requestParameters.eCouponCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can create an ecoupon for a specified property and it can be a maximum of 8 alphanumeric characters. You can enter a quantity value from 1 to 99. <p><strong>OperationId:</strong>postECouponCodes</p>
     * Create an eCoupon Code
     */
    async postECouponCodes(requestParameters: PostECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can create a Global Alerts to generate automatically for all reservations that meet the alert condition. <p><strong>OperationId:</strong>postGlobalAlerts</p>
     * Create Global Alerts
     */
    async postGlobalAlertsRaw(requestParameters: PostGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postGlobalAlerts.');
        }
        
        if (requestParameters.globalAlerts === null || requestParameters.globalAlerts === undefined) {
            throw new runtime.RequiredError('globalAlerts','Required parameter requestParameters.globalAlerts was null or undefined when calling postGlobalAlerts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/globalAlerts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalAlertsToJSON(requestParameters.globalAlerts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can create a Global Alerts to generate automatically for all reservations that meet the alert condition. <p><strong>OperationId:</strong>postGlobalAlerts</p>
     * Create Global Alerts
     */
    async postGlobalAlerts(requestParameters: PostGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Message templates enable you to define standard message texts within OPERA Cloud to ensure consistency in the format of guest messages. You can use this API to create a new Guest Message Template. <p><strong>OperationId:</strong>postGuestMessageTemplates</p>
     * Create a new guest message template
     */
    async postGuestMessageTemplatesRaw(requestParameters: PostGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestMessageTemplates === null || requestParameters.guestMessageTemplates === undefined) {
            throw new runtime.RequiredError('guestMessageTemplates','Required parameter requestParameters.guestMessageTemplates was null or undefined when calling postGuestMessageTemplates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuestMessageTemplatesToJSON(requestParameters.guestMessageTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Message templates enable you to define standard message texts within OPERA Cloud to ensure consistency in the format of guest messages. You can use this API to create a new Guest Message Template. <p><strong>OperationId:</strong>postGuestMessageTemplates</p>
     * Create a new guest message template
     */
    async postGuestMessageTemplates(requestParameters: PostGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create a new guest messages based on the request.  <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create Guest Messages
     */
    async postGuestMessagesRaw(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postGuestMessages.');
        }
        
        if (requestParameters.guestMessages === null || requestParameters.guestMessages === undefined) {
            throw new runtime.RequiredError('guestMessages','Required parameter requestParameters.guestMessages was null or undefined when calling postGuestMessages.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuestMessagesToJSON(requestParameters.guestMessages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create a new guest messages based on the request.  <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create Guest Messages
     */
    async postGuestMessages(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to create a new Turnaway Code for a property. <p><strong>OperationId:</strong>postHotelTurnAwayCodes</p>
     * Create Turn Away Codes
     */
    async postHotelTurnAwayCodesRaw(requestParameters: PostHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postHotelTurnAwayCodes.');
        }
        
        if (requestParameters.hotelTurnAwayCodes === null || requestParameters.hotelTurnAwayCodes === undefined) {
            throw new runtime.RequiredError('hotelTurnAwayCodes','Required parameter requestParameters.hotelTurnAwayCodes was null or undefined when calling postHotelTurnAwayCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTurnAwayCodesToJSON(requestParameters.hotelTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to create a new Turnaway Code for a property. <p><strong>OperationId:</strong>postHotelTurnAwayCodes</p>
     * Create Turn Away Codes
     */
    async postHotelTurnAwayCodes(requestParameters: PostHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new Locator Code. <p><strong>OperationId:</strong>postLocatorCodes</p>
     * Create a new Locator Code
     */
    async postLocatorCodesRaw(requestParameters: PostLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postLocatorCodes.');
        }
        
        if (requestParameters.locatorCodes === null || requestParameters.locatorCodes === undefined) {
            throw new runtime.RequiredError('locatorCodes','Required parameter requestParameters.locatorCodes was null or undefined when calling postLocatorCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocatorCodesToJSON(requestParameters.locatorCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new Locator Code. <p><strong>OperationId:</strong>postLocatorCodes</p>
     * Create a new Locator Code
     */
    async postLocatorCodes(requestParameters: PostLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Locator Code at template level. <p><strong>OperationId:</strong>postLocatorCodesTemplate</p>
     * Create a template Locator Code
     */
    async postLocatorCodesTemplateRaw(requestParameters: PostLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locatorCodesTemplate === null || requestParameters.locatorCodesTemplate === undefined) {
            throw new runtime.RequiredError('locatorCodesTemplate','Required parameter requestParameters.locatorCodesTemplate was null or undefined when calling postLocatorCodesTemplate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocatorCodesTemplateToJSON(requestParameters.locatorCodesTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Locator Code at template level. <p><strong>OperationId:</strong>postLocatorCodesTemplate</p>
     * Create a template Locator Code
     */
    async postLocatorCodesTemplate(requestParameters: PostLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Turnaway Code Template. <p><strong>OperationId:</strong>postTemplateTurnAwayCodes</p>
     * Create Template TurnAway Codes
     */
    async postTemplateTurnAwayCodesRaw(requestParameters: PostTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTurnAwayCodes === null || requestParameters.templateTurnAwayCodes === undefined) {
            throw new runtime.RequiredError('templateTurnAwayCodes','Required parameter requestParameters.templateTurnAwayCodes was null or undefined when calling postTemplateTurnAwayCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTurnAwayCodesToJSON(requestParameters.templateTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Turnaway Code Template. <p><strong>OperationId:</strong>postTemplateTurnAwayCodes</p>
     * Create Template TurnAway Codes
     */
    async postTemplateTurnAwayCodes(requestParameters: PostTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When you create traces for reservation, blocks, or AR accounts, you must first set up the standard messages that are available. When you create a trace, these texts can be selected and used as-is, or they can be modified as necessary. When you create a trace text, it must be associated with a department, like Reservations. <p><strong>OperationId:</strong>postTraceTexts</p>
     * Create new trace texts
     */
    async postTraceTextsRaw(requestParameters: PostTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.traceTextsToBeCreated === null || requestParameters.traceTextsToBeCreated === undefined) {
            throw new runtime.RequiredError('traceTextsToBeCreated','Required parameter requestParameters.traceTextsToBeCreated was null or undefined when calling postTraceTexts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TraceTextsToBeCreatedToJSON(requestParameters.traceTextsToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * When you create traces for reservation, blocks, or AR accounts, you must first set up the standard messages that are available. When you create a trace, these texts can be selected and used as-is, or they can be modified as necessary. When you create a trace text, it must be associated with a department, like Reservations. <p><strong>OperationId:</strong>postTraceTexts</p>
     * Create new trace texts
     */
    async postTraceTexts(requestParameters: PostTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Upgrade rule for a property.  You can upgrade a reservation during the check-in process, but it must match the date ranges, the room types, and the formulas defined in the upgrade rules for the property. A message alerts you to available upgrades and prices. <p><strong>OperationId:</strong>postUpsellRules</p>
     * Create Upsell Rules
     */
    async postUpsellRulesRaw(requestParameters: PostUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postUpsellRules.');
        }
        
        if (requestParameters.upsellRules === null || requestParameters.upsellRules === undefined) {
            throw new runtime.RequiredError('upsellRules','Required parameter requestParameters.upsellRules was null or undefined when calling postUpsellRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsellRulesToJSON(requestParameters.upsellRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Upgrade rule for a property.  You can upgrade a reservation during the check-in process, but it must match the date ranges, the room types, and the formulas defined in the upgrade rules for the property. A message alerts you to available upgrades and prices. <p><strong>OperationId:</strong>postUpsellRules</p>
     * Create Upsell Rules
     */
    async postUpsellRules(requestParameters: PostUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing alert code template. <p><strong>OperationId:</strong>putAlertCodeTemplates</p>
     * Change Alert Code Template
     */
    async putAlertCodeTemplatesRaw(requestParameters: PutAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.alertTemplates === null || requestParameters.alertTemplates === undefined) {
            throw new runtime.RequiredError('alertTemplates','Required parameter requestParameters.alertTemplates was null or undefined when calling putAlertCodeTemplates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlertTemplatesToJSON(requestParameters.alertTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing alert code template. <p><strong>OperationId:</strong>putAlertCodeTemplates</p>
     * Change Alert Code Template
     */
    async putAlertCodeTemplates(requestParameters: PutAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Alert Codes. <p><strong>OperationId:</strong>putAlertCodes</p>
     * Change Alert Codes
     */
    async putAlertCodesRaw(requestParameters: PutAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putAlertCodes.');
        }
        
        if (requestParameters.alertCodes === null || requestParameters.alertCodes === undefined) {
            throw new runtime.RequiredError('alertCodes','Required parameter requestParameters.alertCodes was null or undefined when calling putAlertCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AlertCodesToJSON(requestParameters.alertCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Alert Codes. <p><strong>OperationId:</strong>putAlertCodes</p>
     * Change Alert Codes
     */
    async putAlertCodes(requestParameters: PutAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the configuration of an Auto Attach Element Rule that exists on a property. <p><strong>OperationId:</strong>putAutoAttachElements</p>
     * Update Auto Attach Elements
     */
    async putAutoAttachElementsRaw(requestParameters: PutAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putAutoAttachElements.');
        }
        
        if (requestParameters.autoAttachElements === null || requestParameters.autoAttachElements === undefined) {
            throw new runtime.RequiredError('autoAttachElements','Required parameter requestParameters.autoAttachElements was null or undefined when calling putAutoAttachElements.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AutoAttachElementsToJSON(requestParameters.autoAttachElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Modify the configuration of an Auto Attach Element Rule that exists on a property. <p><strong>OperationId:</strong>putAutoAttachElements</p>
     * Update Auto Attach Elements
     */
    async putAutoAttachElements(requestParameters: PutAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing eCoupon Code. <p><strong>OperationId:</strong>putECouponCodes</p>
     * Change an eCoupon Code
     */
    async putECouponCodesRaw(requestParameters: PutECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putECouponCodes.');
        }
        
        if (requestParameters.eCouponCodes === null || requestParameters.eCouponCodes === undefined) {
            throw new runtime.RequiredError('eCouponCodes','Required parameter requestParameters.eCouponCodes was null or undefined when calling putECouponCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecoupons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ECouponCodesToJSON(requestParameters.eCouponCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing eCoupon Code. <p><strong>OperationId:</strong>putECouponCodes</p>
     * Change an eCoupon Code
     */
    async putECouponCodes(requestParameters: PutECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change Global Alerts for a property. <p><strong>OperationId:</strong>putGlobalAlerts</p>
     * Change Global Alerts
     */
    async putGlobalAlertsRaw(requestParameters: PutGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putGlobalAlerts.');
        }
        
        if (requestParameters.globalAlerts === null || requestParameters.globalAlerts === undefined) {
            throw new runtime.RequiredError('globalAlerts','Required parameter requestParameters.globalAlerts was null or undefined when calling putGlobalAlerts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/globalAlerts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GlobalAlertsToJSON(requestParameters.globalAlerts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to change Global Alerts for a property. <p><strong>OperationId:</strong>putGlobalAlerts</p>
     * Change Global Alerts
     */
    async putGlobalAlerts(requestParameters: PutGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Guest Message Template. <p><strong>OperationId:</strong>putGuestMessageTemplates</p>
     * Change Guest Message Templates
     */
    async putGuestMessageTemplatesRaw(requestParameters: PutGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guestMessageTemplates === null || requestParameters.guestMessageTemplates === undefined) {
            throw new runtime.RequiredError('guestMessageTemplates','Required parameter requestParameters.guestMessageTemplates was null or undefined when calling putGuestMessageTemplates.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuestMessageTemplatesToJSON(requestParameters.guestMessageTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Guest Message Template. <p><strong>OperationId:</strong>putGuestMessageTemplates</p>
     * Change Guest Message Templates
     */
    async putGuestMessageTemplates(requestParameters: PutGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change a Guest messages. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change a Guest messages
     */
    async putGuestMessagesRaw(requestParameters: PutGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putGuestMessages.');
        }
        
        if (requestParameters.guestMessages === null || requestParameters.guestMessages === undefined) {
            throw new runtime.RequiredError('guestMessages','Required parameter requestParameters.guestMessages was null or undefined when calling putGuestMessages.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuestMessagesToJSON(requestParameters.guestMessages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change a Guest messages. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change a Guest messages
     */
    async putGuestMessages(requestParameters: PutGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Turnaway code for a property. <p><strong>OperationId:</strong>putHotelTurnAwayCodes</p>
     * Change TurnAway Codes
     */
    async putHotelTurnAwayCodesRaw(requestParameters: PutHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putHotelTurnAwayCodes.');
        }
        
        if (requestParameters.hotelTurnAwayCodes === null || requestParameters.hotelTurnAwayCodes === undefined) {
            throw new runtime.RequiredError('hotelTurnAwayCodes','Required parameter requestParameters.hotelTurnAwayCodes was null or undefined when calling putHotelTurnAwayCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HotelTurnAwayCodesToJSON(requestParameters.hotelTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Turnaway code for a property. <p><strong>OperationId:</strong>putHotelTurnAwayCodes</p>
     * Change TurnAway Codes
     */
    async putHotelTurnAwayCodes(requestParameters: PutHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change the existing Locator Code. <p><strong>OperationId:</strong>putLocatorCodes</p>
     * Change the existing Locator Code
     */
    async putLocatorCodesRaw(requestParameters: PutLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putLocatorCodes.');
        }
        
        if (requestParameters.locatorCodes === null || requestParameters.locatorCodes === undefined) {
            throw new runtime.RequiredError('locatorCodes','Required parameter requestParameters.locatorCodes was null or undefined when calling putLocatorCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LocatorCodesToJSON(requestParameters.locatorCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change the existing Locator Code. <p><strong>OperationId:</strong>putLocatorCodes</p>
     * Change the existing Locator Code
     */
    async putLocatorCodes(requestParameters: PutLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change an existing Locator Code <p><strong>OperationId:</strong>putLocatorCodesTemplate</p>
     * Change a Locator Code
     */
    async putLocatorCodesTemplateRaw(requestParameters: PutLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.locatorCodesTemplate === null || requestParameters.locatorCodesTemplate === undefined) {
            throw new runtime.RequiredError('locatorCodesTemplate','Required parameter requestParameters.locatorCodesTemplate was null or undefined when calling putLocatorCodesTemplate.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LocatorCodesTemplateToJSON(requestParameters.locatorCodesTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change an existing Locator Code <p><strong>OperationId:</strong>putLocatorCodesTemplate</p>
     * Change a Locator Code
     */
    async putLocatorCodesTemplate(requestParameters: PutLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership Level Ratings. <p><strong>OperationId:</strong>putMembershipLevelRatings</p>
     * Change Membership Level Ratings
     */
    async putMembershipLevelRatingsRaw(requestParameters: PutMembershipLevelRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.membershipLevel === null || requestParameters.membershipLevel === undefined) {
            throw new runtime.RequiredError('membershipLevel','Required parameter requestParameters.membershipLevel was null or undefined when calling putMembershipLevelRatings.');
        }
        
        if (requestParameters.membershipType === null || requestParameters.membershipType === undefined) {
            throw new runtime.RequiredError('membershipType','Required parameter requestParameters.membershipType was null or undefined when calling putMembershipLevelRatings.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putMembershipLevelRatings.');
        }
        
        if (requestParameters.membershipLevelRatings === null || requestParameters.membershipLevelRatings === undefined) {
            throw new runtime.RequiredError('membershipLevelRatings','Required parameter requestParameters.membershipLevelRatings was null or undefined when calling putMembershipLevelRatings.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/membershipTypes/{membershipType}/membershipLevels/{membershipLevel}/ratings`.replace(`{${"membershipLevel"}}`, encodeURIComponent(String(requestParameters.membershipLevel))).replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MembershipLevelRatingsToJSON(requestParameters.membershipLevelRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership Level Ratings. <p><strong>OperationId:</strong>putMembershipLevelRatings</p>
     * Change Membership Level Ratings
     */
    async putMembershipLevelRatings(requestParameters: PutMembershipLevelRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipLevelRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Rate Plan Ratings. <p><strong>OperationId:</strong>putRatePlanRatings</p>
     * Change Rate Plan Ratings
     */
    async putRatePlanRatingsRaw(requestParameters: PutRatePlanRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRatePlanRatings.');
        }
        
        if (requestParameters.ratePlanRatingsInfo === null || requestParameters.ratePlanRatingsInfo === undefined) {
            throw new runtime.RequiredError('ratePlanRatingsInfo','Required parameter requestParameters.ratePlanRatingsInfo was null or undefined when calling putRatePlanRatings.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatePlanRatingsInfoToJSON(requestParameters.ratePlanRatingsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Rate Plan Ratings. <p><strong>OperationId:</strong>putRatePlanRatings</p>
     * Change Rate Plan Ratings
     */
    async putRatePlanRatings(requestParameters: PutRatePlanRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRatePlanRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to put Reservation Colors. <p><strong>OperationId:</strong>putReservationColors</p>
     * Change Reservation Colors
     */
    async putReservationColorsRaw(requestParameters: PutReservationColorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling putReservationColors.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putReservationColors.');
        }
        
        if (requestParameters.reservationColorsToChange === null || requestParameters.reservationColorsToChange === undefined) {
            throw new runtime.RequiredError('reservationColorsToChange','Required parameter requestParameters.reservationColorsToChange was null or undefined when calling putReservationColors.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/colors/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationColorsToChangeToJSON(requestParameters.reservationColorsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to put Reservation Colors. <p><strong>OperationId:</strong>putReservationColors</p>
     * Change Reservation Colors
     */
    async putReservationColors(requestParameters: PutReservationColorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putReservationColorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Room Feature Ratings. <p><strong>OperationId:</strong>putRoomFeatureRatings</p>
     * Change Room Feature Ratings
     */
    async putRoomFeatureRatingsRaw(requestParameters: PutRoomFeatureRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRoomFeatureRatings.');
        }
        
        if (requestParameters.roomFeatureRatings === null || requestParameters.roomFeatureRatings === undefined) {
            throw new runtime.RequiredError('roomFeatureRatings','Required parameter requestParameters.roomFeatureRatings was null or undefined when calling putRoomFeatureRatings.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomFeatures/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoomFeatureRatingsToJSON(requestParameters.roomFeatureRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Room Feature Ratings. <p><strong>OperationId:</strong>putRoomFeatureRatings</p>
     * Change Room Feature Ratings
     */
    async putRoomFeatureRatings(requestParameters: PutRoomFeatureRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomFeatureRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Room Ratings. <p><strong>OperationId:</strong>putRoomRatings</p>
     * Change Room Ratings
     */
    async putRoomRatingsRaw(requestParameters: PutRoomRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling putRoomRatings.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRoomRatings.');
        }
        
        if (requestParameters.roomRatingsInfo === null || requestParameters.roomRatingsInfo === undefined) {
            throw new runtime.RequiredError('roomRatingsInfo','Required parameter requestParameters.roomRatingsInfo was null or undefined when calling putRoomRatings.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/ratings`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoomRatingsInfoToJSON(requestParameters.roomRatingsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Room Ratings. <p><strong>OperationId:</strong>putRoomRatings</p>
     * Change Room Ratings
     */
    async putRoomRatings(requestParameters: PutRoomRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Room Special Ratings. <p><strong>OperationId:</strong>putRoomSpecialRatings</p>
     * Change Room Special Ratings
     */
    async putRoomSpecialRatingsRaw(requestParameters: PutRoomSpecialRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putRoomSpecialRatings.');
        }
        
        if (requestParameters.roomSpecialRatings === null || requestParameters.roomSpecialRatings === undefined) {
            throw new runtime.RequiredError('roomSpecialRatings','Required parameter requestParameters.roomSpecialRatings was null or undefined when calling putRoomSpecialRatings.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomSpecials/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoomSpecialRatingsToJSON(requestParameters.roomSpecialRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Room Special Ratings. <p><strong>OperationId:</strong>putRoomSpecialRatings</p>
     * Change Room Special Ratings
     */
    async putRoomSpecialRatings(requestParameters: PutRoomSpecialRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomSpecialRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Turnaway Code Template. <p><strong>OperationId:</strong>putTemplateTurnAwayCodes</p>
     * Change a Turnaway code template
     */
    async putTemplateTurnAwayCodesRaw(requestParameters: PutTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateTurnAwayCodes === null || requestParameters.templateTurnAwayCodes === undefined) {
            throw new runtime.RequiredError('templateTurnAwayCodes','Required parameter requestParameters.templateTurnAwayCodes was null or undefined when calling putTemplateTurnAwayCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateTurnAwayCodesToJSON(requestParameters.templateTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Turnaway Code Template. <p><strong>OperationId:</strong>putTemplateTurnAwayCodes</p>
     * Change a Turnaway code template
     */
    async putTemplateTurnAwayCodes(requestParameters: PutTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Trace Text for a property. <p><strong>OperationId:</strong>putTraceTexts</p>
     * Change trace text 
     */
    async putTraceTextsRaw(requestParameters: PutTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.traceTextChanges === null || requestParameters.traceTextChanges === undefined) {
            throw new runtime.RequiredError('traceTextChanges','Required parameter requestParameters.traceTextChanges was null or undefined when calling putTraceTexts.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TraceTextChangesToJSON(requestParameters.traceTextChanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Trace Text for a property. <p><strong>OperationId:</strong>putTraceTexts</p>
     * Change trace text 
     */
    async putTraceTexts(requestParameters: PutTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to modify an existing Upgrade rule for a property. <p><strong>OperationId:</strong>putUpsellRules</p>
     * Modify Upsell Rule
     */
    async putUpsellRulesRaw(requestParameters: PutUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putUpsellRules.');
        }
        
        if (requestParameters.upsellRules === null || requestParameters.upsellRules === undefined) {
            throw new runtime.RequiredError('upsellRules','Required parameter requestParameters.upsellRules was null or undefined when calling putUpsellRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsellRulesToJSON(requestParameters.upsellRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to modify an existing Upgrade rule for a property. <p><strong>OperationId:</strong>putUpsellRules</p>
     * Modify Upsell Rule
     */
    async putUpsellRules(requestParameters: PutUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to test and see if the rule that you have created works.  E.g. you can test by giving a rate code and dates, and see that the rule returns the correct upsell details. <p><strong>OperationId:</strong>testUpsellRules</p>
     * Test upsell rules
     */
    async testUpsellRulesRaw(requestParameters: TestUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpsellRulesToTestDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling testUpsellRules.');
        }
        
        if (requestParameters.upsellRulesToTest === null || requestParameters.upsellRulesToTest === undefined) {
            throw new runtime.RequiredError('upsellRulesToTest','Required parameter requestParameters.upsellRulesToTest was null or undefined when calling testUpsellRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpsellRulesToTestToJSON(requestParameters.upsellRulesToTest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsellRulesToTestDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to test and see if the rule that you have created works.  E.g. you can test by giving a rate code and dates, and see that the rule returns the correct upsell details. <p><strong>OperationId:</strong>testUpsellRules</p>
     * Test upsell rules
     */
    async testUpsellRules(requestParameters: TestUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpsellRulesToTestDetails> {
        const response = await this.testUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAutoAttachElementsTypeEnum = {
    Item: 'Item',
    Product: 'Product',
    ResvPreference: 'ResvPreference',
    Trace: 'Trace',
    RoomFeatures: 'RoomFeatures',
    Preference: 'Preference',
    Promotions: 'Promotions',
    AdvancedDiscount: 'AdvancedDiscount'
} as const;
export type GetAutoAttachElementsTypeEnum = typeof GetAutoAttachElementsTypeEnum[keyof typeof GetAutoAttachElementsTypeEnum];
/**
 * @export
 */
export const GetAutoAttachElementsBasedOnEnum = {
    Membership: 'Membership',
    Preference: 'Preference',
    RateCode: 'RateCode',
    RoomType: 'RoomType',
    MinAdults: 'MinAdults',
    MinChildren: 'MinChildren',
    KeywordType: 'KeywordType',
    Special: 'Special',
    Vip: 'Vip',
    Condition: 'Condition'
} as const;
export type GetAutoAttachElementsBasedOnEnum = typeof GetAutoAttachElementsBasedOnEnum[keyof typeof GetAutoAttachElementsBasedOnEnum];
/**
 * @export
 */
export const GetRatePlanRatingsRatingsEnum = {
    MostImportant: 'MostImportant',
    Important: 'Important',
    SomewhatImportant: 'SomewhatImportant',
    LessImportant: 'LessImportant',
    LeastImportant: 'LeastImportant',
    NoValueSet: 'NoValueSet'
} as const;
export type GetRatePlanRatingsRatingsEnum = typeof GetRatePlanRatingsRatingsEnum[keyof typeof GetRatePlanRatingsRatingsEnum];
/**
 * @export
 */
export const GetRoomFeatureRatingsRatingsEnum = {
    MostImportant: 'MostImportant',
    Important: 'Important',
    SomewhatImportant: 'SomewhatImportant',
    LessImportant: 'LessImportant',
    LeastImportant: 'LeastImportant',
    NoValueSet: 'NoValueSet'
} as const;
export type GetRoomFeatureRatingsRatingsEnum = typeof GetRoomFeatureRatingsRatingsEnum[keyof typeof GetRoomFeatureRatingsRatingsEnum];
/**
 * @export
 */
export const GetRoomRatingsRatingsEnum = {
    MostDesirable: 'MostDesirable',
    Desirable: 'Desirable',
    SomewhatDesirable: 'SomewhatDesirable',
    LessDesirable: 'LessDesirable',
    LeastDesirable: 'LeastDesirable',
    NoValueDefined: 'NoValueDefined'
} as const;
export type GetRoomRatingsRatingsEnum = typeof GetRoomRatingsRatingsEnum[keyof typeof GetRoomRatingsRatingsEnum];
/**
 * @export
 */
export const GetRoomSpecialRatingsRatingsEnum = {
    MostImportant: 'MostImportant',
    Important: 'Important',
    SomewhatImportant: 'SomewhatImportant',
    LessImportant: 'LessImportant',
    LeastImportant: 'LeastImportant',
    NoValueSet: 'NoValueSet'
} as const;
export type GetRoomSpecialRatingsRatingsEnum = typeof GetRoomSpecialRatingsRatingsEnum[keyof typeof GetRoomSpecialRatingsRatingsEnum];
