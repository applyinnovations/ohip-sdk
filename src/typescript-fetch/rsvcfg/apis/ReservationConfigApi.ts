/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlertCodeTemplates,
  AlertCodes,
  AutoAttachElementsConfig,
  CopyAutoAttachElementsRequest,
  CopyECouponCodesRequest,
  CopyGlobalAlertsRequest,
  CopyTraceTextsRequest,
  CopyUpsellRulesRequest,
  DeleteAutoAttachElementsRequest,
  DeleteGlobalAlertsRequest,
  ECouponCodes,
  ExceptionDetailType,
  GlobalAlertsInfo,
  GuestMessageTemplates,
  HotelTurnAwayCodes,
  LocatorCodesInfo,
  LocatorCodesTemplateInfo,
  MembershipLevelRatingsInfo,
  PostTraceTextsRequest,
  PutAlertCodeTemplatesRequest,
  PutAlertCodesRequest,
  PutECouponCodesRequest,
  PutGuestMessageTemplatesRequest,
  PutGuestMessagesRequest,
  PutHotelTurnAwayCodesRequest,
  PutLocatorCodesRequest,
  PutLocatorCodesTemplateRequest,
  PutMembershipLevelRatingsRequest,
  PutRatePlanRatingsRequest,
  PutReservationColorsRequest,
  PutRoomFeatureRatingsRequest,
  PutRoomRatingsRequest,
  PutRoomSpecialRatingsRequest,
  PutTemplateTurnAwayCodesRequest,
  PutTraceTextsRequest,
  PutUpsellRulesRequest,
  RatePlanRatings,
  ReservationColorsResponse,
  RetrievedGuestMessages,
  RoomFeatureRatingsInfo,
  RoomRatings,
  RoomSpecialRatingsInfo,
  Status,
  TemplateTurnAwayCodes,
  TestUpsellRulesRequest,
  TraceTextsToBeFetched,
  UpsellRules,
  UpsellRulesToTestDetails,
} from '../models';
import {
    AlertCodeTemplatesFromJSON,
    AlertCodeTemplatesToJSON,
    AlertCodesFromJSON,
    AlertCodesToJSON,
    AutoAttachElementsConfigFromJSON,
    AutoAttachElementsConfigToJSON,
    CopyAutoAttachElementsRequestFromJSON,
    CopyAutoAttachElementsRequestToJSON,
    CopyECouponCodesRequestFromJSON,
    CopyECouponCodesRequestToJSON,
    CopyGlobalAlertsRequestFromJSON,
    CopyGlobalAlertsRequestToJSON,
    CopyTraceTextsRequestFromJSON,
    CopyTraceTextsRequestToJSON,
    CopyUpsellRulesRequestFromJSON,
    CopyUpsellRulesRequestToJSON,
    DeleteAutoAttachElementsRequestFromJSON,
    DeleteAutoAttachElementsRequestToJSON,
    DeleteGlobalAlertsRequestFromJSON,
    DeleteGlobalAlertsRequestToJSON,
    ECouponCodesFromJSON,
    ECouponCodesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GlobalAlertsInfoFromJSON,
    GlobalAlertsInfoToJSON,
    GuestMessageTemplatesFromJSON,
    GuestMessageTemplatesToJSON,
    HotelTurnAwayCodesFromJSON,
    HotelTurnAwayCodesToJSON,
    LocatorCodesInfoFromJSON,
    LocatorCodesInfoToJSON,
    LocatorCodesTemplateInfoFromJSON,
    LocatorCodesTemplateInfoToJSON,
    MembershipLevelRatingsInfoFromJSON,
    MembershipLevelRatingsInfoToJSON,
    PostTraceTextsRequestFromJSON,
    PostTraceTextsRequestToJSON,
    PutAlertCodeTemplatesRequestFromJSON,
    PutAlertCodeTemplatesRequestToJSON,
    PutAlertCodesRequestFromJSON,
    PutAlertCodesRequestToJSON,
    PutECouponCodesRequestFromJSON,
    PutECouponCodesRequestToJSON,
    PutGuestMessageTemplatesRequestFromJSON,
    PutGuestMessageTemplatesRequestToJSON,
    PutGuestMessagesRequestFromJSON,
    PutGuestMessagesRequestToJSON,
    PutHotelTurnAwayCodesRequestFromJSON,
    PutHotelTurnAwayCodesRequestToJSON,
    PutLocatorCodesRequestFromJSON,
    PutLocatorCodesRequestToJSON,
    PutLocatorCodesTemplateRequestFromJSON,
    PutLocatorCodesTemplateRequestToJSON,
    PutMembershipLevelRatingsRequestFromJSON,
    PutMembershipLevelRatingsRequestToJSON,
    PutRatePlanRatingsRequestFromJSON,
    PutRatePlanRatingsRequestToJSON,
    PutReservationColorsRequestFromJSON,
    PutReservationColorsRequestToJSON,
    PutRoomFeatureRatingsRequestFromJSON,
    PutRoomFeatureRatingsRequestToJSON,
    PutRoomRatingsRequestFromJSON,
    PutRoomRatingsRequestToJSON,
    PutRoomSpecialRatingsRequestFromJSON,
    PutRoomSpecialRatingsRequestToJSON,
    PutTemplateTurnAwayCodesRequestFromJSON,
    PutTemplateTurnAwayCodesRequestToJSON,
    PutTraceTextsRequestFromJSON,
    PutTraceTextsRequestToJSON,
    PutUpsellRulesRequestFromJSON,
    PutUpsellRulesRequestToJSON,
    RatePlanRatingsFromJSON,
    RatePlanRatingsToJSON,
    ReservationColorsResponseFromJSON,
    ReservationColorsResponseToJSON,
    RetrievedGuestMessagesFromJSON,
    RetrievedGuestMessagesToJSON,
    RoomFeatureRatingsInfoFromJSON,
    RoomFeatureRatingsInfoToJSON,
    RoomRatingsFromJSON,
    RoomRatingsToJSON,
    RoomSpecialRatingsInfoFromJSON,
    RoomSpecialRatingsInfoToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateTurnAwayCodesFromJSON,
    TemplateTurnAwayCodesToJSON,
    TestUpsellRulesRequestFromJSON,
    TestUpsellRulesRequestToJSON,
    TraceTextsToBeFetchedFromJSON,
    TraceTextsToBeFetchedToJSON,
    UpsellRulesFromJSON,
    UpsellRulesToJSON,
    UpsellRulesToTestDetailsFromJSON,
    UpsellRulesToTestDetailsToJSON,
} from '../models';

export interface CopyAutoAttachElementsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElementsCopy?: CopyAutoAttachElementsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyECouponCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponCodesCopy?: CopyECouponCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyGlobalAlertsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlertsCopy?: CopyGlobalAlertsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyTraceTextsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    traceTextsCopy?: CopyTraceTextsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyUpsellRulesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRulesCopy?: CopyUpsellRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAlertCodeTemplatesRequest {
    alertCodeTemplateCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAlertCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteAutoAttachElementsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElements?: DeleteAutoAttachElementsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteECouponCodesRequest {
    ecouponCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGlobalAlertsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlerts?: DeleteGlobalAlertsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuestMessageTemplatesRequest {
    guestMessageTemplateCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuestMessagesRequest {
    messageCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHotelTurnAwayCodesRequest {
    code?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteLocatorCodesRequest {
    locatorCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteLocatorCodesTemplateRequest {
    locatorCodes?: Array<string>;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateTurnAwayCodesRequest {
    turnawayCode?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTraceTextsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    departmentCode?: Array<string>;
    traceText?: Array<string>;
    canDelete?: Array<boolean>;
    displaySequence?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteUpsellRulesRequest {
    ruleCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlertCodeTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlertCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    code?: Array<string>;
    alertCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAutoAttachElementsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    code?: Array<string>;
    criteriaCode?: string;
    type?: GetAutoAttachElementsTypeEnum;
    basedOn?: GetAutoAttachElementsBasedOnEnum;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetECouponCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    eCouponCodes?: Array<string>;
    wildCardECouponCodes?: string;
    ratePlansCodes?: Array<string>;
    wildCardRatePlans?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGlobalAlertsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    alertCodes?: Array<string>;
    wildCard?: string;
    welcomeOffer?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestMessageTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessageCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuestMessagesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    guestMessageCodes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelTurnAwayCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    code?: Array<string>;
    turnAwayCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLocatorCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    offset?: number;
    locatorCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetLocatorCodesTemplateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMembershipLevelRatingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    membershipTypeCodes?: Array<string>;
    wildCardMembershipTypes?: string;
    membershipLevelCodes?: Array<string>;
    wildCardMembershipLevels?: string;
    descriptionWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRatePlanRatingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    ratePlanCodes?: Array<string>;
    rateCategoryCodes?: Array<string>;
    ratings?: Set<GetRatePlanRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationColorsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    description?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomFeatureRatingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    featureCodes?: Array<string>;
    wildCardRoomFeatures?: string;
    descriptionWildCard?: string;
    ratings?: Set<GetRoomFeatureRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomRatingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    roomNumberCodes?: Array<string>;
    roomTypeCodes?: Array<string>;
    roomClassCodes?: Array<string>;
    ratings?: Set<GetRoomRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomSpecialRatingsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    specialCodes?: Array<string>;
    wildCardRoomSpecials?: string;
    descriptionWildCard?: string;
    ratings?: Set<GetRoomSpecialRatingsRatingsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateTurnAwayCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    codes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTraceTextsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeGlobal?: boolean;
    departmentCodes?: Array<string>;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetUpsellRulesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    stayDate?: Date;
    rule?: string;
    searchByRoomType?: boolean;
    fromCodes?: Array<string>;
    toCodes?: Array<string>;
    rateCode?: string;
    membershipType?: string;
    channel?: string;
    reservationTypeCodes?: Array<string>;
    marketCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAlertCodeTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertTemplates?: PutAlertCodeTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAlertCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertCodes?: PutAlertCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostAutoAttachElementsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElements?: DeleteAutoAttachElementsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostECouponCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponCodes?: PutECouponCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGlobalAlertsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlerts?: DeleteGlobalAlertsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestMessageTemplatesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessageTemplates?: PutGuestMessageTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuestMessagesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessages?: PutGuestMessagesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHotelTurnAwayCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTurnAwayCodes?: PutHotelTurnAwayCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostLocatorCodesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodes?: PutLocatorCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostLocatorCodesTemplateRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodesTemplate?: PutLocatorCodesTemplateRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateTurnAwayCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTurnAwayCodes?: PutTemplateTurnAwayCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTraceTextsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    traceTextsToBeCreated?: PostTraceTextsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostUpsellRulesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRules?: PutUpsellRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAlertCodeTemplatesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertTemplates?: PutAlertCodeTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAlertCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    alertCodes?: PutAlertCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutAutoAttachElementsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    autoAttachElements?: DeleteAutoAttachElementsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutECouponCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eCouponCodes?: PutECouponCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGlobalAlertsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    globalAlerts?: DeleteGlobalAlertsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGuestMessageTemplatesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessageTemplates?: PutGuestMessageTemplatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutGuestMessagesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guestMessages?: PutGuestMessagesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutHotelTurnAwayCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelTurnAwayCodes?: PutHotelTurnAwayCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutLocatorCodesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodes?: PutLocatorCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutLocatorCodesTemplateOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    locatorCodesTemplate?: PutLocatorCodesTemplateRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutMembershipLevelRatingsOperationRequest {
    membershipLevel?: string;
    membershipType?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    membershipLevelRatings?: PutMembershipLevelRatingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRatePlanRatingsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanRatingsInfo?: PutRatePlanRatingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutReservationColorsOperationRequest {
    code?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationColorsToChange?: PutReservationColorsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomFeatureRatingsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomFeatureRatings?: PutRoomFeatureRatingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomRatingsOperationRequest {
    roomId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomRatingsInfo?: PutRoomRatingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRoomSpecialRatingsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomSpecialRatings?: PutRoomSpecialRatingsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTemplateTurnAwayCodesOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateTurnAwayCodes?: PutTemplateTurnAwayCodesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutTraceTextsOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    traceTextChanges?: PutTraceTextsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutUpsellRulesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRules?: PutUpsellRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface TestUpsellRulesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    upsellRulesToTest?: TestUpsellRulesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ReservationConfigApi extends runtime.BaseAPI {

    /**
     * You can use this API to copy Auto Attach Elements. <p><strong>OperationId:</strong>copyAutoAttachElements</p>
     * Copy Auto Attach Elements
     */
    async copyAutoAttachElementsRaw(requestParameters: CopyAutoAttachElementsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyAutoAttachElementsRequestToJSON(requestParameters.autoAttachElementsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to copy Auto Attach Elements. <p><strong>OperationId:</strong>copyAutoAttachElements</p>
     * Copy Auto Attach Elements
     */
    async copyAutoAttachElements(requestParameters: CopyAutoAttachElementsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy an existing property eCoupon Codes to create a new one. <p><strong>OperationId:</strong>copyECouponCodes</p>
     * Copy eCoupon Codes
     */
    async copyECouponCodesRaw(requestParameters: CopyECouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecoupons/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyECouponCodesRequestToJSON(requestParameters.eCouponCodesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy an existing property eCoupon Codes to create a new one. <p><strong>OperationId:</strong>copyECouponCodes</p>
     * Copy eCoupon Codes
     */
    async copyECouponCodes(requestParameters: CopyECouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy a Global Alert for a property. <p><strong>OperationId:</strong>copyGlobalAlerts</p>
     * Copy Global Alerts
     */
    async copyGlobalAlertsRaw(requestParameters: CopyGlobalAlertsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalAlerts/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyGlobalAlertsRequestToJSON(requestParameters.globalAlertsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy a Global Alert for a property. <p><strong>OperationId:</strong>copyGlobalAlerts</p>
     * Copy Global Alerts
     */
    async copyGlobalAlerts(requestParameters: CopyGlobalAlertsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy an existing Trace Text to create a new one. <p><strong>OperationId:</strong>copyTraceTexts</p>
     * Copy trace text 
     */
    async copyTraceTextsRaw(requestParameters: CopyTraceTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/traceTexts/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyTraceTextsRequestToJSON(requestParameters.traceTextsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy an existing Trace Text to create a new one. <p><strong>OperationId:</strong>copyTraceTexts</p>
     * Copy trace text 
     */
    async copyTraceTexts(requestParameters: CopyTraceTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy an existing upsell rule, to create a new one. <p><strong>OperationId:</strong>copyUpsellRules</p>
     * Copy upsell rules
     */
    async copyUpsellRulesRaw(requestParameters: CopyUpsellRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyUpsellRulesRequestToJSON(requestParameters.upsellRulesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy an existing upsell rule, to create a new one. <p><strong>OperationId:</strong>copyUpsellRules</p>
     * Copy upsell rules
     */
    async copyUpsellRules(requestParameters: CopyUpsellRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing alert code template. <p><strong>OperationId:</strong>deleteAlertCodeTemplates</p>
     * Delete Alert Code Template
     */
    async deleteAlertCodeTemplatesRaw(requestParameters: DeleteAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.alertCodeTemplateCodes) {
            queryParameters['alertCodeTemplateCodes'] = requestParameters.alertCodeTemplateCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing alert code template. <p><strong>OperationId:</strong>deleteAlertCodeTemplates</p>
     * Delete Alert Code Template
     */
    async deleteAlertCodeTemplates(requestParameters: DeleteAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete an Alert Code. <p><strong>OperationId:</strong>deleteAlertCodes</p>
     * Delete an Alert Code
     */
    async deleteAlertCodesRaw(requestParameters: DeleteAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete an Alert Code. <p><strong>OperationId:</strong>deleteAlertCodes</p>
     * Delete an Alert Code
     */
    async deleteAlertCodes(requestParameters: DeleteAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an Auto Attach Element Rule on a property. <p><strong>OperationId:</strong>deleteAutoAttachElements</p>
     * Delete Auto Attach Elements
     */
    async deleteAutoAttachElementsRaw(requestParameters: DeleteAutoAttachElementsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/autoAttachElements`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAutoAttachElementsRequestToJSON(requestParameters.autoAttachElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an Auto Attach Element Rule on a property. <p><strong>OperationId:</strong>deleteAutoAttachElements</p>
     * Delete Auto Attach Elements
     */
    async deleteAutoAttachElements(requestParameters: DeleteAutoAttachElementsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing eCoupon Code. <p><strong>OperationId:</strong>deleteECouponCodes</p>
     * Delete an eCoupon Code
     */
    async deleteECouponCodesRaw(requestParameters: DeleteECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecouponCodes/{ecouponCode}`.replace(`{${"ecouponCode"}}`, encodeURIComponent(String(requestParameters.ecouponCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing eCoupon Code. <p><strong>OperationId:</strong>deleteECouponCodes</p>
     * Delete an eCoupon Code
     */
    async deleteECouponCodes(requestParameters: DeleteECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a Global Alert for a property. <p><strong>OperationId:</strong>deleteGlobalAlerts</p>
     * Delete a Global Alert Code
     */
    async deleteGlobalAlertsRaw(requestParameters: DeleteGlobalAlertsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalAlerts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteGlobalAlertsRequestToJSON(requestParameters.globalAlerts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a Global Alert for a property. <p><strong>OperationId:</strong>deleteGlobalAlerts</p>
     * Delete a Global Alert Code
     */
    async deleteGlobalAlerts(requestParameters: DeleteGlobalAlertsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Guest Message Template. <p><strong>OperationId:</strong>deleteGuestMessageTemplates</p>
     * Delete an existing guest message template
     */
    async deleteGuestMessageTemplatesRaw(requestParameters: DeleteGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.guestMessageTemplateCodes) {
            queryParameters['guestMessageTemplateCodes'] = requestParameters.guestMessageTemplateCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Guest Message Template. <p><strong>OperationId:</strong>deleteGuestMessageTemplates</p>
     * Delete an existing guest message template
     */
    async deleteGuestMessageTemplates(requestParameters: DeleteGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete a Guest messages. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete a Guest messages
     */
    async deleteGuestMessagesRaw(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages/{messageCode}`.replace(`{${"messageCode"}}`, encodeURIComponent(String(requestParameters.messageCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete a Guest messages. <p><strong>OperationId:</strong>deleteGuestMessages</p>
     * Delete a Guest messages
     */
    async deleteGuestMessages(requestParameters: DeleteGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Turnaway code for a property. <p><strong>OperationId:</strong>deleteHotelTurnAwayCodes</p>
     * Delete an existing turnaway code
     */
    async deleteHotelTurnAwayCodesRaw(requestParameters: DeleteHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Turnaway code for a property. <p><strong>OperationId:</strong>deleteHotelTurnAwayCodes</p>
     * Delete an existing turnaway code
     */
    async deleteHotelTurnAwayCodes(requestParameters: DeleteHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete a Locator Code. <p><strong>OperationId:</strong>deleteLocatorCodes</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodesRaw(requestParameters: DeleteLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes/{locatorCode}`.replace(`{${"locatorCode"}}`, encodeURIComponent(String(requestParameters.locatorCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete a Locator Code. <p><strong>OperationId:</strong>deleteLocatorCodes</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodes(requestParameters: DeleteLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the selected Locator Code <p><strong>OperationId:</strong>deleteLocatorCodesTemplate</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodesTemplateRaw(requestParameters: DeleteLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.locatorCodes) {
            queryParameters['locatorCodes'] = requestParameters.locatorCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete the selected Locator Code <p><strong>OperationId:</strong>deleteLocatorCodesTemplate</p>
     * Delete a Locator Code
     */
    async deleteLocatorCodesTemplate(requestParameters: DeleteLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Turnaway Code Template. <p><strong>OperationId:</strong>deleteTemplateTurnAwayCodes</p>
     * Delete a Turnaway code template
     */
    async deleteTemplateTurnAwayCodesRaw(requestParameters: DeleteTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes/{turnawayCode}`.replace(`{${"turnawayCode"}}`, encodeURIComponent(String(requestParameters.turnawayCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Turnaway Code Template. <p><strong>OperationId:</strong>deleteTemplateTurnAwayCodes</p>
     * Delete a Turnaway code template
     */
    async deleteTemplateTurnAwayCodes(requestParameters: DeleteTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an existing Trace Text for a property. <p><strong>OperationId:</strong>deleteTraceTexts</p>
     * Delete trace text 
     */
    async deleteTraceTextsRaw(requestParameters: DeleteTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.departmentCode) {
            queryParameters['departmentCode'] = requestParameters.departmentCode;
        }

        if (requestParameters.traceText) {
            queryParameters['traceText'] = requestParameters.traceText;
        }

        if (requestParameters.canDelete) {
            queryParameters['canDelete'] = requestParameters.canDelete;
        }

        if (requestParameters.displaySequence) {
            queryParameters['displaySequence'] = requestParameters.displaySequence;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete an existing Trace Text for a property. <p><strong>OperationId:</strong>deleteTraceTexts</p>
     * Delete trace text 
     */
    async deleteTraceTexts(requestParameters: DeleteTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Upgrade rule for a property. <p><strong>OperationId:</strong>deleteUpsellRules</p>
     * Delete an Upsell Rule
     */
    async deleteUpsellRulesRaw(requestParameters: DeleteUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules/{ruleCode}`.replace(`{${"ruleCode"}}`, encodeURIComponent(String(requestParameters.ruleCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Upgrade rule for a property. <p><strong>OperationId:</strong>deleteUpsellRules</p>
     * Delete an Upsell Rule
     */
    async deleteUpsellRules(requestParameters: DeleteUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all configured Alert Code Templates. <p><strong>OperationId:</strong>getAlertCodeTemplates</p>
     * Get Alert Code Templates
     */
    async getAlertCodeTemplatesRaw(requestParameters: GetAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertCodeTemplates>> {
        const queryParameters: any = {};

        if (requestParameters.alertCodes) {
            queryParameters['alertCodes'] = requestParameters.alertCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertCodeTemplatesFromJSON(jsonValue));
    }

    /**
     * Retrieve all configured Alert Code Templates. <p><strong>OperationId:</strong>getAlertCodeTemplates</p>
     * Get Alert Code Templates
     */
    async getAlertCodeTemplates(requestParameters: GetAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertCodeTemplates> {
        const response = await this.getAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Alert Codes. <p><strong>OperationId:</strong>getAlertCodes</p>
     * Get Alert Codes
     */
    async getAlertCodesRaw(requestParameters: GetAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlertCodes>> {
        const queryParameters: any = {};

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.alertCodes) {
            queryParameters['alertCodes'] = requestParameters.alertCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlertCodesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Alert Codes. <p><strong>OperationId:</strong>getAlertCodes</p>
     * Get Alert Codes
     */
    async getAlertCodes(requestParameters: GetAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlertCodes> {
        const response = await this.getAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the Auto Attach Element Rules that are configured. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>getAutoAttachElements</p>
     * Get Auto Attach Elements
     */
    async getAutoAttachElementsRaw(requestParameters: GetAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AutoAttachElementsConfig>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.criteriaCode !== undefined) {
            queryParameters['criteriaCode'] = requestParameters.criteriaCode;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.basedOn !== undefined) {
            queryParameters['basedOn'] = requestParameters.basedOn;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AutoAttachElementsConfigFromJSON(jsonValue));
    }

    /**
     * Retrieve the Auto Attach Element Rules that are configured. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>getAutoAttachElements</p>
     * Get Auto Attach Elements
     */
    async getAutoAttachElements(requestParameters: GetAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AutoAttachElementsConfig> {
        const response = await this.getAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get existing property eCoupon Codes. <p><strong>OperationId:</strong>getECouponCodes</p>
     * Get eCoupon Codes
     */
    async getECouponCodesRaw(requestParameters: GetECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ECouponCodes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.eCouponCodes) {
            queryParameters['eCouponCodes'] = requestParameters.eCouponCodes;
        }

        if (requestParameters.wildCardECouponCodes !== undefined) {
            queryParameters['wildCardECouponCodes'] = requestParameters.wildCardECouponCodes;
        }

        if (requestParameters.ratePlansCodes) {
            queryParameters['ratePlansCodes'] = requestParameters.ratePlansCodes;
        }

        if (requestParameters.wildCardRatePlans !== undefined) {
            queryParameters['wildCardRatePlans'] = requestParameters.wildCardRatePlans;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/ecoupons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ECouponCodesFromJSON(jsonValue));
    }

    /**
     * Get existing property eCoupon Codes. <p><strong>OperationId:</strong>getECouponCodes</p>
     * Get eCoupon Codes
     */
    async getECouponCodes(requestParameters: GetECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ECouponCodes> {
        const response = await this.getECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all configured Global Alerts for a property. <p><strong>OperationId:</strong>getGlobalAlerts</p>
     * Get Global Alerts
     */
    async getGlobalAlertsRaw(requestParameters: GetGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GlobalAlertsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.alertCodes) {
            queryParameters['alertCodes'] = requestParameters.alertCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.welcomeOffer !== undefined) {
            queryParameters['welcomeOffer'] = requestParameters.welcomeOffer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/globalAlerts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GlobalAlertsInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve all configured Global Alerts for a property. <p><strong>OperationId:</strong>getGlobalAlerts</p>
     * Get Global Alerts
     */
    async getGlobalAlerts(requestParameters: GetGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GlobalAlertsInfo> {
        const response = await this.getGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the configured Guest Message Templates. <p><strong>OperationId:</strong>getGuestMessageTemplates</p>
     * Get Guest Message Templates
     */
    async getGuestMessageTemplatesRaw(requestParameters: GetGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuestMessageTemplates>> {
        const queryParameters: any = {};

        if (requestParameters.guestMessageCodes) {
            queryParameters['guestMessageCodes'] = requestParameters.guestMessageCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuestMessageTemplatesFromJSON(jsonValue));
    }

    /**
     * Retrieve the configured Guest Message Templates. <p><strong>OperationId:</strong>getGuestMessageTemplates</p>
     * Get Guest Message Templates
     */
    async getGuestMessageTemplates(requestParameters: GetGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuestMessageTemplates> {
        const response = await this.getGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Guest Messages. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get Guest Messages
     */
    async getGuestMessagesRaw(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RetrievedGuestMessages>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.guestMessageCodes) {
            queryParameters['guestMessageCodes'] = requestParameters.guestMessageCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetrievedGuestMessagesFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Guest Messages. <p><strong>OperationId:</strong>getGuestMessages</p>
     * Get Guest Messages
     */
    async getGuestMessages(requestParameters: GetGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RetrievedGuestMessages> {
        const response = await this.getGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to fetch all configured Turnaway codes for a property. <p><strong>OperationId:</strong>getHotelTurnAwayCodes</p>
     * Get Turnaway codes
     */
    async getHotelTurnAwayCodesRaw(requestParameters: GetHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelTurnAwayCodes>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.turnAwayCodes) {
            queryParameters['turnAwayCodes'] = requestParameters.turnAwayCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelTurnAwayCodesFromJSON(jsonValue));
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to fetch all configured Turnaway codes for a property. <p><strong>OperationId:</strong>getHotelTurnAwayCodes</p>
     * Get Turnaway codes
     */
    async getHotelTurnAwayCodes(requestParameters: GetHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelTurnAwayCodes> {
        const response = await this.getHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get existing property Locator Codes. <p><strong>OperationId:</strong>getLocatorCodes</p>
     * Get existing property Locator Codes
     */
    async getLocatorCodesRaw(requestParameters: GetLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocatorCodesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.locatorCodes) {
            queryParameters['locatorCodes'] = requestParameters.locatorCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocatorCodesInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get existing property Locator Codes. <p><strong>OperationId:</strong>getLocatorCodes</p>
     * Get existing property Locator Codes
     */
    async getLocatorCodes(requestParameters: GetLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocatorCodesInfo> {
        const response = await this.getLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get existing template Locator Codes <p><strong>OperationId:</strong>getLocatorCodesTemplate</p>
     * Get template Locator Codes
     */
    async getLocatorCodesTemplateRaw(requestParameters: GetLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocatorCodesTemplateInfo>> {
        const queryParameters: any = {};

        if (requestParameters.locatorCodes) {
            queryParameters['locatorCodes'] = requestParameters.locatorCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocatorCodesTemplateInfoFromJSON(jsonValue));
    }

    /**
     * Get existing template Locator Codes <p><strong>OperationId:</strong>getLocatorCodesTemplate</p>
     * Get template Locator Codes
     */
    async getLocatorCodesTemplate(requestParameters: GetLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocatorCodesTemplateInfo> {
        const response = await this.getLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API accepts the membership level ratings in the request and returns gets the membership levels. <p><strong>OperationId:</strong>getMembershipLevelRatings</p>
     * Get Membership Level Ratings
     */
    async getMembershipLevelRatingsRaw(requestParameters: GetMembershipLevelRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MembershipLevelRatingsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.membershipTypeCodes) {
            queryParameters['membershipTypeCodes'] = requestParameters.membershipTypeCodes;
        }

        if (requestParameters.wildCardMembershipTypes !== undefined) {
            queryParameters['wildCardMembershipTypes'] = requestParameters.wildCardMembershipTypes;
        }

        if (requestParameters.membershipLevelCodes) {
            queryParameters['membershipLevelCodes'] = requestParameters.membershipLevelCodes;
        }

        if (requestParameters.wildCardMembershipLevels !== undefined) {
            queryParameters['wildCardMembershipLevels'] = requestParameters.wildCardMembershipLevels;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/membershipLevels/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipLevelRatingsInfoFromJSON(jsonValue));
    }

    /**
     * This API accepts the membership level ratings in the request and returns gets the membership levels. <p><strong>OperationId:</strong>getMembershipLevelRatings</p>
     * Get Membership Level Ratings
     */
    async getMembershipLevelRatings(requestParameters: GetMembershipLevelRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MembershipLevelRatingsInfo> {
        const response = await this.getMembershipLevelRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Rate Plan Ratings. <p><strong>OperationId:</strong>getRatePlanRatings</p>
     * Get Rate Plan Ratings
     */
    async getRatePlanRatingsRaw(requestParameters: GetRatePlanRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RatePlanRatings>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.rateCategoryCodes) {
            queryParameters['rateCategoryCodes'] = requestParameters.rateCategoryCodes;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatePlanRatingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Rate Plan Ratings. <p><strong>OperationId:</strong>getRatePlanRatings</p>
     * Get Rate Plan Ratings
     */
    async getRatePlanRatings(requestParameters: GetRatePlanRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RatePlanRatings> {
        const response = await this.getRatePlanRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Reservation Colors. <p><strong>OperationId:</strong>getReservationColors</p>
     * Get Reservation Colors
     */
    async getReservationColorsRaw(requestParameters: GetReservationColorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationColorsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/colors`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationColorsResponseFromJSON(jsonValue));
    }

    /**
     * Use this API to get Reservation Colors. <p><strong>OperationId:</strong>getReservationColors</p>
     * Get Reservation Colors
     */
    async getReservationColors(requestParameters: GetReservationColorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationColorsResponse> {
        const response = await this.getReservationColorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Room Feature Ratings. <p><strong>OperationId:</strong>getRoomFeatureRatings</p>
     * Get Room Feature Ratings
     */
    async getRoomFeatureRatingsRaw(requestParameters: GetRoomFeatureRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomFeatureRatingsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.featureCodes) {
            queryParameters['featureCodes'] = requestParameters.featureCodes;
        }

        if (requestParameters.wildCardRoomFeatures !== undefined) {
            queryParameters['wildCardRoomFeatures'] = requestParameters.wildCardRoomFeatures;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomFeatures/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFeatureRatingsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Room Feature Ratings. <p><strong>OperationId:</strong>getRoomFeatureRatings</p>
     * Get Room Feature Ratings
     */
    async getRoomFeatureRatings(requestParameters: GetRoomFeatureRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomFeatureRatingsInfo> {
        const response = await this.getRoomFeatureRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Room Ratings. <p><strong>OperationId:</strong>getRoomRatings</p>
     * Get Room Ratings
     */
    async getRoomRatingsRaw(requestParameters: GetRoomRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomRatings>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.roomNumberCodes) {
            queryParameters['roomNumberCodes'] = requestParameters.roomNumberCodes;
        }

        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }

        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomRatingsFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Room Ratings. <p><strong>OperationId:</strong>getRoomRatings</p>
     * Get Room Ratings
     */
    async getRoomRatings(requestParameters: GetRoomRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomRatings> {
        const response = await this.getRoomRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to get Room Special Ratings. <p><strong>OperationId:</strong>getRoomSpecialRatings</p>
     * Get Room Special Ratings
     */
    async getRoomSpecialRatingsRaw(requestParameters: GetRoomSpecialRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomSpecialRatingsInfo>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.specialCodes) {
            queryParameters['specialCodes'] = requestParameters.specialCodes;
        }

        if (requestParameters.wildCardRoomSpecials !== undefined) {
            queryParameters['wildCardRoomSpecials'] = requestParameters.wildCardRoomSpecials;
        }

        if (requestParameters.descriptionWildCard !== undefined) {
            queryParameters['descriptionWildCard'] = requestParameters.descriptionWildCard;
        }

        if (requestParameters.ratings) {
            queryParameters['ratings'] = requestParameters.ratings;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomSpecials/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomSpecialRatingsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to get Room Special Ratings. <p><strong>OperationId:</strong>getRoomSpecialRatings</p>
     * Get Room Special Ratings
     */
    async getRoomSpecialRatings(requestParameters: GetRoomSpecialRatingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomSpecialRatingsInfo> {
        const response = await this.getRoomSpecialRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all existing Turnaway Code Templates. <p><strong>OperationId:</strong>getTemplateTurnAwayCodes</p>
     * Get Template TurnAway Codes
     */
    async getTemplateTurnAwayCodesRaw(requestParameters: GetTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateTurnAwayCodes>> {
        const queryParameters: any = {};

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateTurnAwayCodesFromJSON(jsonValue));
    }

    /**
     * Retrieve all existing Turnaway Code Templates. <p><strong>OperationId:</strong>getTemplateTurnAwayCodes</p>
     * Get Template TurnAway Codes
     */
    async getTemplateTurnAwayCodes(requestParameters: GetTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateTurnAwayCodes> {
        const response = await this.getTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch all configured Trace Texts for a property. <p><strong>OperationId:</strong>getTraceTexts</p>
     * Get trace texts 
     */
    async getTraceTextsRaw(requestParameters: GetTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TraceTextsToBeFetched>> {
        const queryParameters: any = {};

        if (requestParameters.excludeGlobal !== undefined) {
            queryParameters['excludeGlobal'] = requestParameters.excludeGlobal;
        }

        if (requestParameters.departmentCodes) {
            queryParameters['departmentCodes'] = requestParameters.departmentCodes;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TraceTextsToBeFetchedFromJSON(jsonValue));
    }

    /**
     * Fetch all configured Trace Texts for a property. <p><strong>OperationId:</strong>getTraceTexts</p>
     * Get trace texts 
     */
    async getTraceTexts(requestParameters: GetTraceTextsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TraceTextsToBeFetched> {
        const response = await this.getTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will retrieve all configured Upgrade Rules.  These enable you to configure the rules for calculating the reservation upsell amounts.   <p><strong>OperationId:</strong>getUpsellRules</p>
     * Get upsell rules
     */
    async getUpsellRulesRaw(requestParameters: GetUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpsellRules>> {
        const queryParameters: any = {};

        if (requestParameters.stayDate !== undefined) {
            queryParameters['stayDate'] = (requestParameters.stayDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.rule !== undefined) {
            queryParameters['rule'] = requestParameters.rule;
        }

        if (requestParameters.searchByRoomType !== undefined) {
            queryParameters['searchByRoomType'] = requestParameters.searchByRoomType;
        }

        if (requestParameters.fromCodes) {
            queryParameters['fromCodes'] = requestParameters.fromCodes;
        }

        if (requestParameters.toCodes) {
            queryParameters['toCodes'] = requestParameters.toCodes;
        }

        if (requestParameters.rateCode !== undefined) {
            queryParameters['rateCode'] = requestParameters.rateCode;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.channel !== undefined) {
            queryParameters['channel'] = requestParameters.channel;
        }

        if (requestParameters.reservationTypeCodes) {
            queryParameters['ReservationTypeCodes'] = requestParameters.reservationTypeCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsellRulesFromJSON(jsonValue));
    }

    /**
     * This API will retrieve all configured Upgrade Rules.  These enable you to configure the rules for calculating the reservation upsell amounts.   <p><strong>OperationId:</strong>getUpsellRules</p>
     * Get upsell rules
     */
    async getUpsellRules(requestParameters: GetUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpsellRules> {
        const response = await this.getUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Alert Code Template. <p><strong>OperationId:</strong>postAlertCodeTemplates</p>
     * Create Alert Code Template
     */
    async postAlertCodeTemplatesRaw(requestParameters: PostAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutAlertCodeTemplatesRequestToJSON(requestParameters.alertTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Alert Code Template. <p><strong>OperationId:</strong>postAlertCodeTemplates</p>
     * Create Alert Code Template
     */
    async postAlertCodeTemplates(requestParameters: PostAlertCodeTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new alert code. <p><strong>OperationId:</strong>postAlertCodes</p>
     * Create a new alert code
     */
    async postAlertCodesRaw(requestParameters: PostAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutAlertCodesRequestToJSON(requestParameters.alertCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new alert code. <p><strong>OperationId:</strong>postAlertCodes</p>
     * Create a new alert code
     */
    async postAlertCodes(requestParameters: PostAlertCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Auto Attach Element Rule. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>postAutoAttachElements</p>
     * Create Auto Attach Elements
     */
    async postAutoAttachElementsRaw(requestParameters: PostAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAutoAttachElementsRequestToJSON(requestParameters.autoAttachElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Auto Attach Element Rule. Auto attach elements are rules defined to auto-update various fields (elements) on a new reservation.  Rules can be associated with rate codes, memberships, room types, preferences etc.  An example could be \'If rate code is PROMO1 then update specials on the reservation to include FB (Fruit Basket). <p><strong>OperationId:</strong>postAutoAttachElements</p>
     * Create Auto Attach Elements
     */
    async postAutoAttachElements(requestParameters: PostAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can create an ecoupon for a specified property and it can be a maximum of 8 alphanumeric characters. You can enter a quantity value from 1 to 99. <p><strong>OperationId:</strong>postECouponCodes</p>
     * Create an eCoupon Code
     */
    async postECouponCodesRaw(requestParameters: PostECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecoupons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutECouponCodesRequestToJSON(requestParameters.eCouponCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can create an ecoupon for a specified property and it can be a maximum of 8 alphanumeric characters. You can enter a quantity value from 1 to 99. <p><strong>OperationId:</strong>postECouponCodes</p>
     * Create an eCoupon Code
     */
    async postECouponCodes(requestParameters: PostECouponCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can create a Global Alerts to generate automatically for all reservations that meet the alert condition. <p><strong>OperationId:</strong>postGlobalAlerts</p>
     * Create Global Alerts
     */
    async postGlobalAlertsRaw(requestParameters: PostGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/globalAlerts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteGlobalAlertsRequestToJSON(requestParameters.globalAlerts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can create a Global Alerts to generate automatically for all reservations that meet the alert condition. <p><strong>OperationId:</strong>postGlobalAlerts</p>
     * Create Global Alerts
     */
    async postGlobalAlerts(requestParameters: PostGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Message templates enable you to define standard message texts within OPERA Cloud to ensure consistency in the format of guest messages. You can use this API to create a new Guest Message Template. <p><strong>OperationId:</strong>postGuestMessageTemplates</p>
     * Create a new guest message template
     */
    async postGuestMessageTemplatesRaw(requestParameters: PostGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutGuestMessageTemplatesRequestToJSON(requestParameters.guestMessageTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Message templates enable you to define standard message texts within OPERA Cloud to ensure consistency in the format of guest messages. You can use this API to create a new Guest Message Template. <p><strong>OperationId:</strong>postGuestMessageTemplates</p>
     * Create a new guest message template
     */
    async postGuestMessageTemplates(requestParameters: PostGuestMessageTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create a new guest messages based on the request.  <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create Guest Messages
     */
    async postGuestMessagesRaw(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutGuestMessagesRequestToJSON(requestParameters.guestMessages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create a new guest messages based on the request.  <p><strong>OperationId:</strong>postGuestMessages</p>
     * Create Guest Messages
     */
    async postGuestMessages(requestParameters: PostGuestMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to create a new Turnaway Code for a property. <p><strong>OperationId:</strong>postHotelTurnAwayCodes</p>
     * Create Turn Away Codes
     */
    async postHotelTurnAwayCodesRaw(requestParameters: PostHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutHotelTurnAwayCodesRequestToJSON(requestParameters.hotelTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Turnaway Codes enable you to record the number of potential reservations that were \"turned away\" and could not be confirmed.  Use this API to create a new Turnaway Code for a property. <p><strong>OperationId:</strong>postHotelTurnAwayCodes</p>
     * Create Turn Away Codes
     */
    async postHotelTurnAwayCodes(requestParameters: PostHotelTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new Locator Code. <p><strong>OperationId:</strong>postLocatorCodes</p>
     * Create a new Locator Code
     */
    async postLocatorCodesRaw(requestParameters: PostLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutLocatorCodesRequestToJSON(requestParameters.locatorCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new Locator Code. <p><strong>OperationId:</strong>postLocatorCodes</p>
     * Create a new Locator Code
     */
    async postLocatorCodes(requestParameters: PostLocatorCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Locator Code at template level. <p><strong>OperationId:</strong>postLocatorCodesTemplate</p>
     * Create a template Locator Code
     */
    async postLocatorCodesTemplateRaw(requestParameters: PostLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutLocatorCodesTemplateRequestToJSON(requestParameters.locatorCodesTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Locator Code at template level. <p><strong>OperationId:</strong>postLocatorCodesTemplate</p>
     * Create a template Locator Code
     */
    async postLocatorCodesTemplate(requestParameters: PostLocatorCodesTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Turnaway Code Template. <p><strong>OperationId:</strong>postTemplateTurnAwayCodes</p>
     * Create Template TurnAway Codes
     */
    async postTemplateTurnAwayCodesRaw(requestParameters: PostTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutTemplateTurnAwayCodesRequestToJSON(requestParameters.templateTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create a new Turnaway Code Template. <p><strong>OperationId:</strong>postTemplateTurnAwayCodes</p>
     * Create Template TurnAway Codes
     */
    async postTemplateTurnAwayCodes(requestParameters: PostTemplateTurnAwayCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * When you create traces for reservation, blocks, or AR accounts, you must first set up the standard messages that are available. When you create a trace, these texts can be selected and used as-is, or they can be modified as necessary. When you create a trace text, it must be associated with a department, like Reservations. <p><strong>OperationId:</strong>postTraceTexts</p>
     * Create new trace texts
     */
    async postTraceTextsRaw(requestParameters: PostTraceTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTraceTextsRequestToJSON(requestParameters.traceTextsToBeCreated),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * When you create traces for reservation, blocks, or AR accounts, you must first set up the standard messages that are available. When you create a trace, these texts can be selected and used as-is, or they can be modified as necessary. When you create a trace text, it must be associated with a department, like Reservations. <p><strong>OperationId:</strong>postTraceTexts</p>
     * Create new trace texts
     */
    async postTraceTexts(requestParameters: PostTraceTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Upgrade rule for a property.  You can upgrade a reservation during the check-in process, but it must match the date ranges, the room types, and the formulas defined in the upgrade rules for the property. A message alerts you to available upgrades and prices. <p><strong>OperationId:</strong>postUpsellRules</p>
     * Create Upsell Rules
     */
    async postUpsellRulesRaw(requestParameters: PostUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PutUpsellRulesRequestToJSON(requestParameters.upsellRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Upgrade rule for a property.  You can upgrade a reservation during the check-in process, but it must match the date ranges, the room types, and the formulas defined in the upgrade rules for the property. A message alerts you to available upgrades and prices. <p><strong>OperationId:</strong>postUpsellRules</p>
     * Create Upsell Rules
     */
    async postUpsellRules(requestParameters: PostUpsellRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing alert code template. <p><strong>OperationId:</strong>putAlertCodeTemplates</p>
     * Change Alert Code Template
     */
    async putAlertCodeTemplatesRaw(requestParameters: PutAlertCodeTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/alertCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAlertCodeTemplatesRequestToJSON(requestParameters.alertTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing alert code template. <p><strong>OperationId:</strong>putAlertCodeTemplates</p>
     * Change Alert Code Template
     */
    async putAlertCodeTemplates(requestParameters: PutAlertCodeTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAlertCodeTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Alert Codes. <p><strong>OperationId:</strong>putAlertCodes</p>
     * Change Alert Codes
     */
    async putAlertCodesRaw(requestParameters: PutAlertCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/alertCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAlertCodesRequestToJSON(requestParameters.alertCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Alert Codes. <p><strong>OperationId:</strong>putAlertCodes</p>
     * Change Alert Codes
     */
    async putAlertCodes(requestParameters: PutAlertCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAlertCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify the configuration of an Auto Attach Element Rule that exists on a property. <p><strong>OperationId:</strong>putAutoAttachElements</p>
     * Update Auto Attach Elements
     */
    async putAutoAttachElementsRaw(requestParameters: PutAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/autoAttachElements`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAutoAttachElementsRequestToJSON(requestParameters.autoAttachElements),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Modify the configuration of an Auto Attach Element Rule that exists on a property. <p><strong>OperationId:</strong>putAutoAttachElements</p>
     * Update Auto Attach Elements
     */
    async putAutoAttachElements(requestParameters: PutAutoAttachElementsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putAutoAttachElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing eCoupon Code. <p><strong>OperationId:</strong>putECouponCodes</p>
     * Change an eCoupon Code
     */
    async putECouponCodesRaw(requestParameters: PutECouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ecoupons`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutECouponCodesRequestToJSON(requestParameters.eCouponCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing eCoupon Code. <p><strong>OperationId:</strong>putECouponCodes</p>
     * Change an eCoupon Code
     */
    async putECouponCodes(requestParameters: PutECouponCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putECouponCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to change Global Alerts for a property. <p><strong>OperationId:</strong>putGlobalAlerts</p>
     * Change Global Alerts
     */
    async putGlobalAlertsRaw(requestParameters: PutGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/globalAlerts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteGlobalAlertsRequestToJSON(requestParameters.globalAlerts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to change Global Alerts for a property. <p><strong>OperationId:</strong>putGlobalAlerts</p>
     * Change Global Alerts
     */
    async putGlobalAlerts(requestParameters: PutGlobalAlertsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGlobalAlertsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Guest Message Template. <p><strong>OperationId:</strong>putGuestMessageTemplates</p>
     * Change Guest Message Templates
     */
    async putGuestMessageTemplatesRaw(requestParameters: PutGuestMessageTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guestMessages`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutGuestMessageTemplatesRequestToJSON(requestParameters.guestMessageTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Guest Message Template. <p><strong>OperationId:</strong>putGuestMessageTemplates</p>
     * Change Guest Message Templates
     */
    async putGuestMessageTemplates(requestParameters: PutGuestMessageTemplatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGuestMessageTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change a Guest messages. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change a Guest messages
     */
    async putGuestMessagesRaw(requestParameters: PutGuestMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guestMessages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutGuestMessagesRequestToJSON(requestParameters.guestMessages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change a Guest messages. <p><strong>OperationId:</strong>putGuestMessages</p>
     * Change a Guest messages
     */
    async putGuestMessages(requestParameters: PutGuestMessagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putGuestMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Turnaway code for a property. <p><strong>OperationId:</strong>putHotelTurnAwayCodes</p>
     * Change TurnAway Codes
     */
    async putHotelTurnAwayCodesRaw(requestParameters: PutHotelTurnAwayCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/turnawayCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutHotelTurnAwayCodesRequestToJSON(requestParameters.hotelTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Turnaway code for a property. <p><strong>OperationId:</strong>putHotelTurnAwayCodes</p>
     * Change TurnAway Codes
     */
    async putHotelTurnAwayCodes(requestParameters: PutHotelTurnAwayCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putHotelTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change the existing Locator Code. <p><strong>OperationId:</strong>putLocatorCodes</p>
     * Change the existing Locator Code
     */
    async putLocatorCodesRaw(requestParameters: PutLocatorCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/locatorCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutLocatorCodesRequestToJSON(requestParameters.locatorCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change the existing Locator Code. <p><strong>OperationId:</strong>putLocatorCodes</p>
     * Change the existing Locator Code
     */
    async putLocatorCodes(requestParameters: PutLocatorCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putLocatorCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change an existing Locator Code <p><strong>OperationId:</strong>putLocatorCodesTemplate</p>
     * Change a Locator Code
     */
    async putLocatorCodesTemplateRaw(requestParameters: PutLocatorCodesTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/locatorCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutLocatorCodesTemplateRequestToJSON(requestParameters.locatorCodesTemplate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change an existing Locator Code <p><strong>OperationId:</strong>putLocatorCodesTemplate</p>
     * Change a Locator Code
     */
    async putLocatorCodesTemplate(requestParameters: PutLocatorCodesTemplateOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putLocatorCodesTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Membership Level Ratings. <p><strong>OperationId:</strong>putMembershipLevelRatings</p>
     * Change Membership Level Ratings
     */
    async putMembershipLevelRatingsRaw(requestParameters: PutMembershipLevelRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/membershipTypes/{membershipType}/membershipLevels/{membershipLevel}/ratings`.replace(`{${"membershipLevel"}}`, encodeURIComponent(String(requestParameters.membershipLevel))).replace(`{${"membershipType"}}`, encodeURIComponent(String(requestParameters.membershipType))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutMembershipLevelRatingsRequestToJSON(requestParameters.membershipLevelRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Membership Level Ratings. <p><strong>OperationId:</strong>putMembershipLevelRatings</p>
     * Change Membership Level Ratings
     */
    async putMembershipLevelRatings(requestParameters: PutMembershipLevelRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putMembershipLevelRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Rate Plan Ratings. <p><strong>OperationId:</strong>putRatePlanRatings</p>
     * Change Rate Plan Ratings
     */
    async putRatePlanRatingsRaw(requestParameters: PutRatePlanRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/ratePlans/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRatePlanRatingsRequestToJSON(requestParameters.ratePlanRatingsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Rate Plan Ratings. <p><strong>OperationId:</strong>putRatePlanRatings</p>
     * Change Rate Plan Ratings
     */
    async putRatePlanRatings(requestParameters: PutRatePlanRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRatePlanRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to put Reservation Colors. <p><strong>OperationId:</strong>putReservationColors</p>
     * Change Reservation Colors
     */
    async putReservationColorsRaw(requestParameters: PutReservationColorsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/colors/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutReservationColorsRequestToJSON(requestParameters.reservationColorsToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to put Reservation Colors. <p><strong>OperationId:</strong>putReservationColors</p>
     * Change Reservation Colors
     */
    async putReservationColors(requestParameters: PutReservationColorsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putReservationColorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Room Feature Ratings. <p><strong>OperationId:</strong>putRoomFeatureRatings</p>
     * Change Room Feature Ratings
     */
    async putRoomFeatureRatingsRaw(requestParameters: PutRoomFeatureRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomFeatures/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomFeatureRatingsRequestToJSON(requestParameters.roomFeatureRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Room Feature Ratings. <p><strong>OperationId:</strong>putRoomFeatureRatings</p>
     * Change Room Feature Ratings
     */
    async putRoomFeatureRatings(requestParameters: PutRoomFeatureRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomFeatureRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Room Ratings. <p><strong>OperationId:</strong>putRoomRatings</p>
     * Change Room Ratings
     */
    async putRoomRatingsRaw(requestParameters: PutRoomRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rooms/{roomId}/ratings`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomRatingsRequestToJSON(requestParameters.roomRatingsInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Room Ratings. <p><strong>OperationId:</strong>putRoomRatings</p>
     * Change Room Ratings
     */
    async putRoomRatings(requestParameters: PutRoomRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to change Room Special Ratings. <p><strong>OperationId:</strong>putRoomSpecialRatings</p>
     * Change Room Special Ratings
     */
    async putRoomSpecialRatingsRaw(requestParameters: PutRoomSpecialRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomSpecials/ratings`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutRoomSpecialRatingsRequestToJSON(requestParameters.roomSpecialRatings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to change Room Special Ratings. <p><strong>OperationId:</strong>putRoomSpecialRatings</p>
     * Change Room Special Ratings
     */
    async putRoomSpecialRatings(requestParameters: PutRoomSpecialRatingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRoomSpecialRatingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Turnaway Code Template. <p><strong>OperationId:</strong>putTemplateTurnAwayCodes</p>
     * Change a Turnaway code template
     */
    async putTemplateTurnAwayCodesRaw(requestParameters: PutTemplateTurnAwayCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/turnawayCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTemplateTurnAwayCodesRequestToJSON(requestParameters.templateTurnAwayCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Turnaway Code Template. <p><strong>OperationId:</strong>putTemplateTurnAwayCodes</p>
     * Change a Turnaway code template
     */
    async putTemplateTurnAwayCodes(requestParameters: PutTemplateTurnAwayCodesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTemplateTurnAwayCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Trace Text for a property. <p><strong>OperationId:</strong>putTraceTexts</p>
     * Change trace text 
     */
    async putTraceTextsRaw(requestParameters: PutTraceTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/traceTexts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutTraceTextsRequestToJSON(requestParameters.traceTextChanges),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Trace Text for a property. <p><strong>OperationId:</strong>putTraceTexts</p>
     * Change trace text 
     */
    async putTraceTexts(requestParameters: PutTraceTextsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putTraceTextsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to modify an existing Upgrade rule for a property. <p><strong>OperationId:</strong>putUpsellRules</p>
     * Modify Upsell Rule
     */
    async putUpsellRulesRaw(requestParameters: PutUpsellRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutUpsellRulesRequestToJSON(requestParameters.upsellRules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to modify an existing Upgrade rule for a property. <p><strong>OperationId:</strong>putUpsellRules</p>
     * Modify Upsell Rule
     */
    async putUpsellRules(requestParameters: PutUpsellRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to test and see if the rule that you have created works.  E.g. you can test by giving a rate code and dates, and see that the rule returns the correct upsell details. <p><strong>OperationId:</strong>testUpsellRules</p>
     * Test upsell rules
     */
    async testUpsellRulesRaw(requestParameters: TestUpsellRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpsellRulesToTestDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/upsellRules/action/validate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TestUpsellRulesRequestToJSON(requestParameters.upsellRulesToTest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpsellRulesToTestDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to test and see if the rule that you have created works.  E.g. you can test by giving a rate code and dates, and see that the rule returns the correct upsell details. <p><strong>OperationId:</strong>testUpsellRules</p>
     * Test upsell rules
     */
    async testUpsellRules(requestParameters: TestUpsellRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpsellRulesToTestDetails> {
        const response = await this.testUpsellRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAutoAttachElementsTypeEnum = {
    Item: 'Item',
    Product: 'Product',
    ResvPreference: 'ResvPreference',
    Trace: 'Trace',
    RoomFeatures: 'RoomFeatures',
    Preference: 'Preference',
    Promotions: 'Promotions',
    AdvancedDiscount: 'AdvancedDiscount'
} as const;
export type GetAutoAttachElementsTypeEnum = typeof GetAutoAttachElementsTypeEnum[keyof typeof GetAutoAttachElementsTypeEnum];
/**
 * @export
 */
export const GetAutoAttachElementsBasedOnEnum = {
    Membership: 'Membership',
    Preference: 'Preference',
    RateCode: 'RateCode',
    RoomType: 'RoomType',
    MinAdults: 'MinAdults',
    MinChildren: 'MinChildren',
    KeywordType: 'KeywordType',
    Special: 'Special',
    Vip: 'Vip',
    Condition: 'Condition'
} as const;
export type GetAutoAttachElementsBasedOnEnum = typeof GetAutoAttachElementsBasedOnEnum[keyof typeof GetAutoAttachElementsBasedOnEnum];
/**
 * @export
 */
export const GetRatePlanRatingsRatingsEnum = {
    MostImportant: 'MostImportant',
    Important: 'Important',
    SomewhatImportant: 'SomewhatImportant',
    LessImportant: 'LessImportant',
    LeastImportant: 'LeastImportant',
    NoValueSet: 'NoValueSet'
} as const;
export type GetRatePlanRatingsRatingsEnum = typeof GetRatePlanRatingsRatingsEnum[keyof typeof GetRatePlanRatingsRatingsEnum];
/**
 * @export
 */
export const GetRoomFeatureRatingsRatingsEnum = {
    MostImportant: 'MostImportant',
    Important: 'Important',
    SomewhatImportant: 'SomewhatImportant',
    LessImportant: 'LessImportant',
    LeastImportant: 'LeastImportant',
    NoValueSet: 'NoValueSet'
} as const;
export type GetRoomFeatureRatingsRatingsEnum = typeof GetRoomFeatureRatingsRatingsEnum[keyof typeof GetRoomFeatureRatingsRatingsEnum];
/**
 * @export
 */
export const GetRoomRatingsRatingsEnum = {
    MostDesirable: 'MostDesirable',
    Desirable: 'Desirable',
    SomewhatDesirable: 'SomewhatDesirable',
    LessDesirable: 'LessDesirable',
    LeastDesirable: 'LeastDesirable',
    NoValueDefined: 'NoValueDefined'
} as const;
export type GetRoomRatingsRatingsEnum = typeof GetRoomRatingsRatingsEnum[keyof typeof GetRoomRatingsRatingsEnum];
/**
 * @export
 */
export const GetRoomSpecialRatingsRatingsEnum = {
    MostImportant: 'MostImportant',
    Important: 'Important',
    SomewhatImportant: 'SomewhatImportant',
    LessImportant: 'LessImportant',
    LeastImportant: 'LeastImportant',
    NoValueSet: 'NoValueSet'
} as const;
export type GetRoomSpecialRatingsRatingsEnum = typeof GetRoomSpecialRatingsRatingsEnum[keyof typeof GetRoomSpecialRatingsRatingsEnum];
