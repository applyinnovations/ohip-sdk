/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancellationPolicyCriteria,
  CancellationPolicyDetails,
  CancellationPolicyToBeChanged,
  CopyGuaranteeCodeSchedules,
  CopyPolicySchedules,
  CopyServiceRequestCodes,
  DepositPolicyCriteria,
  DepositPolicyDetails,
  DepositPolicyToBeChanged,
  ExceptionDetailType,
  GuaranteeCodeCriteria,
  GuaranteeCodeScheduleCriteria,
  GuaranteeCodeScheduleToBeChanged,
  GuaranteeCodeSchedulesDetails,
  GuaranteeCodeToBeChanged,
  GuaranteeCodesDetails,
  MarketCodeCriteria,
  MarketCodeToBeChanged,
  MarketCodesDetails,
  MarketGroupCriteria,
  MarketGroupToBeChanged,
  MarketGroupsDetails,
  PolicyScheduleCriteria,
  PolicyScheduleToBeChanged,
  PolicySchedulesDetails,
  PreCheckInRulesCriteria,
  PreCheckInRulesDetails,
  PreCheckInRulesToBeChanged,
  ServiceRequestCodePrioritiesCriteria,
  ServiceRequestCodePrioritiesDetails,
  ServiceRequestCodePrioritiesToBeChanged,
  ServiceRequestCodesCriteria,
  ServiceRequestCodesDetails,
  ServiceRequestCodesToBeChanged,
  SourceCodeCriteria,
  SourceCodeToBeChanged,
  SourceCodesDetails,
  SourceGroupCriteria,
  SourceGroupToBeChanged,
  SourceGroupsDetails,
  Status,
  TemplateCancellationPolicyCriteria,
  TemplateCancellationPolicyDetails,
  TemplateCancellationPolicyToBeChanged,
  TemplateDepositPolicyCriteria,
  TemplateDepositPolicyDetails,
  TemplateDepositPolicyToBeChanged,
  TemplateGuaranteeCodeCriteria,
  TemplateGuaranteeCodeToBeChanged,
  TemplateGuaranteeCodesDetails,
  TemplateMarketCodeCriteria,
  TemplateMarketCodeToBeChanged,
  TemplateMarketCodesDetails,
  TemplateMarketGroupCriteria,
  TemplateMarketGroupToBeChanged,
  TemplateMarketGroupsDetails,
  TemplateSourceCodeCriteria,
  TemplateSourceCodeToBeChanged,
  TemplateSourceCodesDetails,
  TemplateSourceGroupCriteria,
  TemplateSourceGroupToBeChanged,
  TemplateSourceGroupsDetails,
} from '../models/index';
import {
    CancellationPolicyCriteriaFromJSON,
    CancellationPolicyCriteriaToJSON,
    CancellationPolicyDetailsFromJSON,
    CancellationPolicyDetailsToJSON,
    CancellationPolicyToBeChangedFromJSON,
    CancellationPolicyToBeChangedToJSON,
    CopyGuaranteeCodeSchedulesFromJSON,
    CopyGuaranteeCodeSchedulesToJSON,
    CopyPolicySchedulesFromJSON,
    CopyPolicySchedulesToJSON,
    CopyServiceRequestCodesFromJSON,
    CopyServiceRequestCodesToJSON,
    DepositPolicyCriteriaFromJSON,
    DepositPolicyCriteriaToJSON,
    DepositPolicyDetailsFromJSON,
    DepositPolicyDetailsToJSON,
    DepositPolicyToBeChangedFromJSON,
    DepositPolicyToBeChangedToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GuaranteeCodeCriteriaFromJSON,
    GuaranteeCodeCriteriaToJSON,
    GuaranteeCodeScheduleCriteriaFromJSON,
    GuaranteeCodeScheduleCriteriaToJSON,
    GuaranteeCodeScheduleToBeChangedFromJSON,
    GuaranteeCodeScheduleToBeChangedToJSON,
    GuaranteeCodeSchedulesDetailsFromJSON,
    GuaranteeCodeSchedulesDetailsToJSON,
    GuaranteeCodeToBeChangedFromJSON,
    GuaranteeCodeToBeChangedToJSON,
    GuaranteeCodesDetailsFromJSON,
    GuaranteeCodesDetailsToJSON,
    MarketCodeCriteriaFromJSON,
    MarketCodeCriteriaToJSON,
    MarketCodeToBeChangedFromJSON,
    MarketCodeToBeChangedToJSON,
    MarketCodesDetailsFromJSON,
    MarketCodesDetailsToJSON,
    MarketGroupCriteriaFromJSON,
    MarketGroupCriteriaToJSON,
    MarketGroupToBeChangedFromJSON,
    MarketGroupToBeChangedToJSON,
    MarketGroupsDetailsFromJSON,
    MarketGroupsDetailsToJSON,
    PolicyScheduleCriteriaFromJSON,
    PolicyScheduleCriteriaToJSON,
    PolicyScheduleToBeChangedFromJSON,
    PolicyScheduleToBeChangedToJSON,
    PolicySchedulesDetailsFromJSON,
    PolicySchedulesDetailsToJSON,
    PreCheckInRulesCriteriaFromJSON,
    PreCheckInRulesCriteriaToJSON,
    PreCheckInRulesDetailsFromJSON,
    PreCheckInRulesDetailsToJSON,
    PreCheckInRulesToBeChangedFromJSON,
    PreCheckInRulesToBeChangedToJSON,
    ServiceRequestCodePrioritiesCriteriaFromJSON,
    ServiceRequestCodePrioritiesCriteriaToJSON,
    ServiceRequestCodePrioritiesDetailsFromJSON,
    ServiceRequestCodePrioritiesDetailsToJSON,
    ServiceRequestCodePrioritiesToBeChangedFromJSON,
    ServiceRequestCodePrioritiesToBeChangedToJSON,
    ServiceRequestCodesCriteriaFromJSON,
    ServiceRequestCodesCriteriaToJSON,
    ServiceRequestCodesDetailsFromJSON,
    ServiceRequestCodesDetailsToJSON,
    ServiceRequestCodesToBeChangedFromJSON,
    ServiceRequestCodesToBeChangedToJSON,
    SourceCodeCriteriaFromJSON,
    SourceCodeCriteriaToJSON,
    SourceCodeToBeChangedFromJSON,
    SourceCodeToBeChangedToJSON,
    SourceCodesDetailsFromJSON,
    SourceCodesDetailsToJSON,
    SourceGroupCriteriaFromJSON,
    SourceGroupCriteriaToJSON,
    SourceGroupToBeChangedFromJSON,
    SourceGroupToBeChangedToJSON,
    SourceGroupsDetailsFromJSON,
    SourceGroupsDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateCancellationPolicyCriteriaFromJSON,
    TemplateCancellationPolicyCriteriaToJSON,
    TemplateCancellationPolicyDetailsFromJSON,
    TemplateCancellationPolicyDetailsToJSON,
    TemplateCancellationPolicyToBeChangedFromJSON,
    TemplateCancellationPolicyToBeChangedToJSON,
    TemplateDepositPolicyCriteriaFromJSON,
    TemplateDepositPolicyCriteriaToJSON,
    TemplateDepositPolicyDetailsFromJSON,
    TemplateDepositPolicyDetailsToJSON,
    TemplateDepositPolicyToBeChangedFromJSON,
    TemplateDepositPolicyToBeChangedToJSON,
    TemplateGuaranteeCodeCriteriaFromJSON,
    TemplateGuaranteeCodeCriteriaToJSON,
    TemplateGuaranteeCodeToBeChangedFromJSON,
    TemplateGuaranteeCodeToBeChangedToJSON,
    TemplateGuaranteeCodesDetailsFromJSON,
    TemplateGuaranteeCodesDetailsToJSON,
    TemplateMarketCodeCriteriaFromJSON,
    TemplateMarketCodeCriteriaToJSON,
    TemplateMarketCodeToBeChangedFromJSON,
    TemplateMarketCodeToBeChangedToJSON,
    TemplateMarketCodesDetailsFromJSON,
    TemplateMarketCodesDetailsToJSON,
    TemplateMarketGroupCriteriaFromJSON,
    TemplateMarketGroupCriteriaToJSON,
    TemplateMarketGroupToBeChangedFromJSON,
    TemplateMarketGroupToBeChangedToJSON,
    TemplateMarketGroupsDetailsFromJSON,
    TemplateMarketGroupsDetailsToJSON,
    TemplateSourceCodeCriteriaFromJSON,
    TemplateSourceCodeCriteriaToJSON,
    TemplateSourceCodeToBeChangedFromJSON,
    TemplateSourceCodeToBeChangedToJSON,
    TemplateSourceCodesDetailsFromJSON,
    TemplateSourceCodesDetailsToJSON,
    TemplateSourceGroupCriteriaFromJSON,
    TemplateSourceGroupCriteriaToJSON,
    TemplateSourceGroupToBeChangedFromJSON,
    TemplateSourceGroupToBeChangedToJSON,
    TemplateSourceGroupsDetailsFromJSON,
    TemplateSourceGroupsDetailsToJSON,
} from '../models/index';

export interface ChangeCancellationPolicyRequest {
    cancelpolicycode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancellationPolicyToBeChanged: CancellationPolicyToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeDepositPolicyRequest {
    depositpolicycode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositPolicyToBeChanged: DepositPolicyToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeGuaranteeCodeRequest {
    guaranteeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guaranteeCodeToBeChanged: GuaranteeCodeToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeGuaranteeCodeScheduleRequest {
    policyScheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guaranteeCodeScheduleToBeChanged: GuaranteeCodeScheduleToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMarketCodeRequest {
    marketcode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketCodeToBeChanged: MarketCodeToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeMarketGroupRequest {
    marketGroupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketGroupToBeChanged: MarketGroupToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangePolicyScheduleRequest {
    policyscheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    policyScheduleToBeChanged: PolicyScheduleToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangePreCheckInRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preCheckInRulesToBeChanged: PreCheckInRulesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeServiceRequestCodePrioritiesRequest {
    serviceRequestCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestCodePrioritiesToBeChanged: ServiceRequestCodePrioritiesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeServiceRequestCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestCodesToBeChanged: ServiceRequestCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeSourceCodeRequest {
    sourceCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sourceCodeToBeChanged: SourceCodeToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeSourceGroupRequest {
    sourceGroupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sourceGroupToBeChanged: SourceGroupToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateCancellationPolicyRequest {
    cancelpolicytemplate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCancellationPolicyToBeChanged: TemplateCancellationPolicyToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateDepositPolicyRequest {
    depositpolicytemplate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateDepositPolicyToBeChanged: TemplateDepositPolicyToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateGuaranteeCodeRequest {
    guaranteeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateGuaranteeCodeToBeChanged: TemplateGuaranteeCodeToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateMarketCodeRequest {
    marketcode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketCodeToBeChanged: TemplateMarketCodeToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateMarketGroupRequest {
    marketGroupCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketGroupToBeChanged: TemplateMarketGroupToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateSourceCodeRequest {
    sourceCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateSourceCodeToBeChanged: TemplateSourceCodeToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateSourceGroupRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateSourceGroupToBeChanged: TemplateSourceGroupToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyGuaranteeCodeSchedulesRequest {
    policyScheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyGuaranteeCodeSchedules: CopyGuaranteeCodeSchedules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyPolicySchedulesRequest {
    policyscheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyPolicySchedules: CopyPolicySchedules;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyServiceRequestCodesRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyServiceRequestCodes: CopyServiceRequestCodes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCancellationPolicyRequest {
    cancelpolicycode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteDepositPolicyRequest {
    depositpolicycode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuaranteeCodeRequest {
    guaranteeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGuaranteeCodeScheduleRequest {
    policyScheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeletePolicyScheduleRequest {
    policyscheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateCancellationPolicyRequest {
    cancelpolicytemplate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    policyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateDepositPolicyRequest {
    depositpolicytemplate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    policyCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteTemplateGuaranteeCodeRequest {
    guaranteeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCancellationPolicyRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    policyCodeListCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDepositPolicyRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    policyCodeListCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuaranteeCodeSchedulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    pageNumber?: number;
    ratePlanCodes?: Array<string>;
    startDate?: string;
    endDate?: string;
    duration?: string;
    guaranteeCodes?: Array<string>;
    creditRatingsCodes?: Array<string>;
    seasonsCodes?: Array<string>;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuaranteeCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    guaranteeCodes?: Array<string>;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    marketCodes?: Array<string>;
    marketGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetMarketGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    marketCodes?: Array<string>;
    marketGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPolicySchedulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    pageNumber?: number;
    policyType?: GetPolicySchedulesPolicyTypeEnum;
    ratePlanCodes?: Array<string>;
    policyCodes?: Array<string>;
    startDate?: string;
    endDate?: string;
    duration?: string;
    guaranteeCodes?: Array<string>;
    creditRatingsCodes?: Array<string>;
    seasonsCodes?: Array<string>;
    id?: string;
    idContext?: string;
    type?: string;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetPreCheckInRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    date?: string;
    ruleType?: GetPreCheckInRulesRuleTypeEnum;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetServiceRequestCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    serviceRequestCodes?: Array<string>;
    wildCard?: string;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetServiceRequestCodePrioritiesRequest {
    serviceRequestCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetServiceRequestCodePriorityRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    serviceRequestCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    hotelIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetServiceRequestCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    serviceRequestCodes?: Array<string>;
    wildCard?: string;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSourceCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    pageNumber?: number;
    sourceCodes?: Array<string>;
    sourceGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetSourceGroupsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    pageNumber?: number;
    sourceCodes?: Array<string>;
    sourceGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateCancellationPolicyRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    policyCodeListCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateDepositPolicyRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    hotelIds?: Array<string>;
    policyCodeListCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateGuaranteeCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    guaranteeCodes?: Array<string>;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateMarketCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    templateMarketCodes?: Array<string>;
    templateMarketGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateMarketGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    templateMarketCodes?: Array<string>;
    templateMarketGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateSourceCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    templateSourceCodes?: Array<string>;
    templateSourceGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateSourceGroupsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    templateSourceCodes?: Array<string>;
    templateSourceGroupsCodes?: Array<string>;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCancellationPolicyRequest {
    cancelpolicycode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cancellationPolicyCriteria: CancellationPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostDepositPolicyRequest {
    depositpolicycode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    depositPolicyCriteria: DepositPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuaranteeCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guaranteeCodeCriteria: GuaranteeCodeCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGuaranteeCodeScheduleRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    guaranteeCodeScheduleCriteria: GuaranteeCodeScheduleCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMarketCodeRequest {
    marketcode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketCodeCriteria: MarketCodeCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMarketGroupRequest {
    marketGroupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    marketGroupCriteria: MarketGroupCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostNewPolicyScheduleRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    policyScheduleCriteria: PolicyScheduleCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPolicyScheduleRequest {
    policyscheduleId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    policyScheduleCriteria: PolicyScheduleCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostPreCheckInRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    preCheckInRulesCriteria: PreCheckInRulesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostServiceRequestCodePrioritiesRequest {
    serviceRequestCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestCodePrioritiesCriteria: ServiceRequestCodePrioritiesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostServiceRequestCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestCodesCriteria: ServiceRequestCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSourceCodeRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sourceCodeCriteria: SourceCodeCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSourceGroupRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    sourceGroupCriteria: SourceGroupCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateCancellationPolicyRequest {
    cancelpolicytemplate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateCancellationPolicyCriteria: TemplateCancellationPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateDepositPolicyRequest {
    depositpolicytemplate: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateDepositPolicyCriteria: TemplateDepositPolicyCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateGuaranteeCodeRequest {
    guaranteeCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateGuaranteeCodeCriteria: TemplateGuaranteeCodeCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateMarketCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketCodeCriteria: TemplateMarketCodeCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateMarketGroupRequest {
    marketGroupCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketGroupCriteria: TemplateMarketGroupCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateSourceCodeRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateSourceCodeCriteria: TemplateSourceCodeCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateSourceGroupRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateSourceGroupCriteria: TemplateSourceGroupCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMarketCodeRequest {
    marketcode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveMarketGroupRequest {
    marketGroupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemovePreCheckInRulesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ruleType?: Set<RemovePreCheckInRulesRuleTypeEnum>;
    startDate?: string;
    endDate?: string;
    duration?: string;
    newStartDate?: string;
    newEndDate?: string;
    newDuration?: string;
    level?: Array<string>;
    type?: Array<string>;
    specialsCodes?: Array<string>;
    marketCodes?: Array<string>;
    absoluteFlag?: boolean;
    endTime?: string;
    startTime?: string;
    daysBeforeArrival?: number;
    daysAfterBooking?: number;
    hoursPriorToCheckIn?: number;
    hoursPostCheckIn?: number;
    ratePlansCodes?: Array<string>;
    reservationTypesCodes?: Array<string>;
    vIPCodes?: Array<string>;
    originCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveServiceRequestCodePrioritiesRequest {
    serviceRequestCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveServiceRequestCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    serviceRequestCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveSourceCodeRequest {
    sourceCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveSourceGroupRequest {
    sourceGroupCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateMarketCodeRequest {
    marketcode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateMarketGroupRequest {
    marketGroupCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateMarketGroup?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateSourceCodeRequest {
    sourceCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateSourceCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateSourceGroupRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateSourceGroup?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Cancellation policies in hotel level. <p><strong>OperationId:</strong>changeCancellationPolicy</p>
     * Change Cancellation policies in hotel level
     */
    async changeCancellationPolicyRaw(requestParameters: ChangeCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancelpolicycode === null || requestParameters.cancelpolicycode === undefined) {
            throw new runtime.RequiredError('cancelpolicycode','Required parameter requestParameters.cancelpolicycode was null or undefined when calling changeCancellationPolicy.');
        }
        
        if (requestParameters.cancellationPolicyToBeChanged === null || requestParameters.cancellationPolicyToBeChanged === undefined) {
            throw new runtime.RequiredError('cancellationPolicyToBeChanged','Required parameter requestParameters.cancellationPolicyToBeChanged was null or undefined when calling changeCancellationPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicy/{cancelpolicycode}`.replace(`{${"cancelpolicycode"}}`, encodeURIComponent(String(requestParameters.cancelpolicycode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CancellationPolicyToBeChangedToJSON(requestParameters.cancellationPolicyToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Cancellation policies in hotel level. <p><strong>OperationId:</strong>changeCancellationPolicy</p>
     * Change Cancellation policies in hotel level
     */
    async changeCancellationPolicy(requestParameters: ChangeCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update deposit policy in hotel level. <p><strong>OperationId:</strong>changeDepositPolicy</p>
     * Change deposit policy in hotel level
     */
    async changeDepositPolicyRaw(requestParameters: ChangeDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.depositpolicycode === null || requestParameters.depositpolicycode === undefined) {
            throw new runtime.RequiredError('depositpolicycode','Required parameter requestParameters.depositpolicycode was null or undefined when calling changeDepositPolicy.');
        }
        
        if (requestParameters.depositPolicyToBeChanged === null || requestParameters.depositPolicyToBeChanged === undefined) {
            throw new runtime.RequiredError('depositPolicyToBeChanged','Required parameter requestParameters.depositPolicyToBeChanged was null or undefined when calling changeDepositPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicy/{depositpolicycode}`.replace(`{${"depositpolicycode"}}`, encodeURIComponent(String(requestParameters.depositpolicycode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DepositPolicyToBeChangedToJSON(requestParameters.depositPolicyToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update deposit policy in hotel level. <p><strong>OperationId:</strong>changeDepositPolicy</p>
     * Change deposit policy in hotel level
     */
    async changeDepositPolicy(requestParameters: ChangeDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Guarantee Code. <p><strong>OperationId:</strong>changeGuaranteeCode</p>
     * Change Guarantee Code
     */
    async changeGuaranteeCodeRaw(requestParameters: ChangeGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling changeGuaranteeCode.');
        }
        
        if (requestParameters.guaranteeCodeToBeChanged === null || requestParameters.guaranteeCodeToBeChanged === undefined) {
            throw new runtime.RequiredError('guaranteeCodeToBeChanged','Required parameter requestParameters.guaranteeCodeToBeChanged was null or undefined when calling changeGuaranteeCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodes/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuaranteeCodeToBeChangedToJSON(requestParameters.guaranteeCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Guarantee Code. <p><strong>OperationId:</strong>changeGuaranteeCode</p>
     * Change Guarantee Code
     */
    async changeGuaranteeCode(requestParameters: ChangeGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeGuaranteeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an schedule for guarantee codes. <p><strong>OperationId:</strong>changeGuaranteeCodeSchedule</p>
     * Change an schedule for guarantee codes 
     */
    async changeGuaranteeCodeScheduleRaw(requestParameters: ChangeGuaranteeCodeScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyScheduleId === null || requestParameters.policyScheduleId === undefined) {
            throw new runtime.RequiredError('policyScheduleId','Required parameter requestParameters.policyScheduleId was null or undefined when calling changeGuaranteeCodeSchedule.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeGuaranteeCodeSchedule.');
        }
        
        if (requestParameters.guaranteeCodeScheduleToBeChanged === null || requestParameters.guaranteeCodeScheduleToBeChanged === undefined) {
            throw new runtime.RequiredError('guaranteeCodeScheduleToBeChanged','Required parameter requestParameters.guaranteeCodeScheduleToBeChanged was null or undefined when calling changeGuaranteeCodeSchedule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guaranteeCodeSchedules/{policyScheduleId}`.replace(`{${"policyScheduleId"}}`, encodeURIComponent(String(requestParameters.policyScheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GuaranteeCodeScheduleToBeChangedToJSON(requestParameters.guaranteeCodeScheduleToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update an schedule for guarantee codes. <p><strong>OperationId:</strong>changeGuaranteeCodeSchedule</p>
     * Change an schedule for guarantee codes 
     */
    async changeGuaranteeCodeSchedule(requestParameters: ChangeGuaranteeCodeScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeGuaranteeCodeScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to modify a Market Code . <p><strong>OperationId:</strong>changeMarketCode</p>
     * Modify a Market Code 
     */
    async changeMarketCodeRaw(requestParameters: ChangeMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
            throw new runtime.RequiredError('marketcode','Required parameter requestParameters.marketcode was null or undefined when calling changeMarketCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeMarketCode.');
        }
        
        if (requestParameters.marketCodeToBeChanged === null || requestParameters.marketCodeToBeChanged === undefined) {
            throw new runtime.RequiredError('marketCodeToBeChanged','Required parameter requestParameters.marketCodeToBeChanged was null or undefined when calling changeMarketCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketCodes/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MarketCodeToBeChangedToJSON(requestParameters.marketCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to modify a Market Code . <p><strong>OperationId:</strong>changeMarketCode</p>
     * Modify a Market Code 
     */
    async changeMarketCode(requestParameters: ChangeMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMarketCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to modify a Market Group. Only one Market Group can be modified at a time. <p><strong>OperationId:</strong>changeMarketGroup</p>
     * Change Market Group
     */
    async changeMarketGroupRaw(requestParameters: ChangeMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
            throw new runtime.RequiredError('marketGroupCode','Required parameter requestParameters.marketGroupCode was null or undefined when calling changeMarketGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeMarketGroup.');
        }
        
        if (requestParameters.marketGroupToBeChanged === null || requestParameters.marketGroupToBeChanged === undefined) {
            throw new runtime.RequiredError('marketGroupToBeChanged','Required parameter requestParameters.marketGroupToBeChanged was null or undefined when calling changeMarketGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketGroups/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MarketGroupToBeChangedToJSON(requestParameters.marketGroupToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to modify a Market Group. Only one Market Group can be modified at a time. <p><strong>OperationId:</strong>changeMarketGroup</p>
     * Change Market Group
     */
    async changeMarketGroup(requestParameters: ChangeMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeMarketGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an schedule for deposit or cancel policy. <p><strong>OperationId:</strong>changePolicySchedule</p>
     * Change a Policy Schedule
     */
    async changePolicyScheduleRaw(requestParameters: ChangePolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
            throw new runtime.RequiredError('policyscheduleId','Required parameter requestParameters.policyscheduleId was null or undefined when calling changePolicySchedule.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changePolicySchedule.');
        }
        
        if (requestParameters.policyScheduleToBeChanged === null || requestParameters.policyScheduleToBeChanged === undefined) {
            throw new runtime.RequiredError('policyScheduleToBeChanged','Required parameter requestParameters.policyScheduleToBeChanged was null or undefined when calling changePolicySchedule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyScheduleToBeChangedToJSON(requestParameters.policyScheduleToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update an schedule for deposit or cancel policy. <p><strong>OperationId:</strong>changePolicySchedule</p>
     * Change a Policy Schedule
     */
    async changePolicySchedule(requestParameters: ChangePolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changePolicyScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Pre Check In rules. <p><strong>OperationId:</strong>changePreCheckInRules</p>
     * Change Pre Check In rules
     */
    async changePreCheckInRulesRaw(requestParameters: ChangePreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changePreCheckInRules.');
        }
        
        if (requestParameters.preCheckInRulesToBeChanged === null || requestParameters.preCheckInRulesToBeChanged === undefined) {
            throw new runtime.RequiredError('preCheckInRulesToBeChanged','Required parameter requestParameters.preCheckInRulesToBeChanged was null or undefined when calling changePreCheckInRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PreCheckInRulesToBeChangedToJSON(requestParameters.preCheckInRulesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Pre Check In rules. <p><strong>OperationId:</strong>changePreCheckInRules</p>
     * Change Pre Check In rules
     */
    async changePreCheckInRules(requestParameters: ChangePreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changePreCheckInRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Service Request Code Priorities. <p><strong>OperationId:</strong>changeServiceRequestCodePriorities</p>
     * Change Service Request Code Priorities
     */
    async changeServiceRequestCodePrioritiesRaw(requestParameters: ChangeServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
            throw new runtime.RequiredError('serviceRequestCode','Required parameter requestParameters.serviceRequestCode was null or undefined when calling changeServiceRequestCodePriorities.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeServiceRequestCodePriorities.');
        }
        
        if (requestParameters.serviceRequestCodePrioritiesToBeChanged === null || requestParameters.serviceRequestCodePrioritiesToBeChanged === undefined) {
            throw new runtime.RequiredError('serviceRequestCodePrioritiesToBeChanged','Required parameter requestParameters.serviceRequestCodePrioritiesToBeChanged was null or undefined when calling changeServiceRequestCodePriorities.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRequestCodePrioritiesToBeChangedToJSON(requestParameters.serviceRequestCodePrioritiesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Service Request Code Priorities. <p><strong>OperationId:</strong>changeServiceRequestCodePriorities</p>
     * Change Service Request Code Priorities
     */
    async changeServiceRequestCodePriorities(requestParameters: ChangeServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update configuration service request codes. <p><strong>OperationId:</strong>changeServiceRequestCodes</p>
     * Change configuration service request codes
     */
    async changeServiceRequestCodesRaw(requestParameters: ChangeServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeServiceRequestCodes.');
        }
        
        if (requestParameters.serviceRequestCodesToBeChanged === null || requestParameters.serviceRequestCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('serviceRequestCodesToBeChanged','Required parameter requestParameters.serviceRequestCodesToBeChanged was null or undefined when calling changeServiceRequestCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRequestCodesToBeChangedToJSON(requestParameters.serviceRequestCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update configuration service request codes. <p><strong>OperationId:</strong>changeServiceRequestCodes</p>
     * Change configuration service request codes
     */
    async changeServiceRequestCodes(requestParameters: ChangeServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeServiceRequestCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to modify a Source Code. Only one Source Code can be modified at a time. <p><strong>OperationId:</strong>changeSourceCode</p>
     * Update a Source Code
     */
    async changeSourceCodeRaw(requestParameters: ChangeSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
            throw new runtime.RequiredError('sourceCode','Required parameter requestParameters.sourceCode was null or undefined when calling changeSourceCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeSourceCode.');
        }
        
        if (requestParameters.sourceCodeToBeChanged === null || requestParameters.sourceCodeToBeChanged === undefined) {
            throw new runtime.RequiredError('sourceCodeToBeChanged','Required parameter requestParameters.sourceCodeToBeChanged was null or undefined when calling changeSourceCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SourceCodeToBeChangedToJSON(requestParameters.sourceCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to modify a Source Code. Only one Source Code can be modified at a time. <p><strong>OperationId:</strong>changeSourceCode</p>
     * Update a Source Code
     */
    async changeSourceCode(requestParameters: ChangeSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to modify a Source Group. Only one Source Group can be modified at a time. <p><strong>OperationId:</strong>changeSourceGroup</p>
     * Change a Source Group
     */
    async changeSourceGroupRaw(requestParameters: ChangeSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceGroupCode === null || requestParameters.sourceGroupCode === undefined) {
            throw new runtime.RequiredError('sourceGroupCode','Required parameter requestParameters.sourceGroupCode was null or undefined when calling changeSourceGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeSourceGroup.');
        }
        
        if (requestParameters.sourceGroupToBeChanged === null || requestParameters.sourceGroupToBeChanged === undefined) {
            throw new runtime.RequiredError('sourceGroupToBeChanged','Required parameter requestParameters.sourceGroupToBeChanged was null or undefined when calling changeSourceGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceGroups/{sourceGroupCode}`.replace(`{${"sourceGroupCode"}}`, encodeURIComponent(String(requestParameters.sourceGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SourceGroupToBeChangedToJSON(requestParameters.sourceGroupToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to modify a Source Group. Only one Source Group can be modified at a time. <p><strong>OperationId:</strong>changeSourceGroup</p>
     * Change a Source Group
     */
    async changeSourceGroup(requestParameters: ChangeSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeSourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update template Cancellation policies. <p><strong>OperationId:</strong>changeTemplateCancellationPolicy</p>
     * Change template Cancellation policies
     */
    async changeTemplateCancellationPolicyRaw(requestParameters: ChangeTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancelpolicytemplate === null || requestParameters.cancelpolicytemplate === undefined) {
            throw new runtime.RequiredError('cancelpolicytemplate','Required parameter requestParameters.cancelpolicytemplate was null or undefined when calling changeTemplateCancellationPolicy.');
        }
        
        if (requestParameters.templateCancellationPolicyToBeChanged === null || requestParameters.templateCancellationPolicyToBeChanged === undefined) {
            throw new runtime.RequiredError('templateCancellationPolicyToBeChanged','Required parameter requestParameters.templateCancellationPolicyToBeChanged was null or undefined when calling changeTemplateCancellationPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicytemplate/{cancelpolicytemplate}`.replace(`{${"cancelpolicytemplate"}}`, encodeURIComponent(String(requestParameters.cancelpolicytemplate))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateCancellationPolicyToBeChangedToJSON(requestParameters.templateCancellationPolicyToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update template Cancellation policies. <p><strong>OperationId:</strong>changeTemplateCancellationPolicy</p>
     * Change template Cancellation policies
     */
    async changeTemplateCancellationPolicy(requestParameters: ChangeTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update template deposit policy. <p><strong>OperationId:</strong>changeTemplateDepositPolicy</p>
     * Change template deposit policy
     */
    async changeTemplateDepositPolicyRaw(requestParameters: ChangeTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.depositpolicytemplate === null || requestParameters.depositpolicytemplate === undefined) {
            throw new runtime.RequiredError('depositpolicytemplate','Required parameter requestParameters.depositpolicytemplate was null or undefined when calling changeTemplateDepositPolicy.');
        }
        
        if (requestParameters.templateDepositPolicyToBeChanged === null || requestParameters.templateDepositPolicyToBeChanged === undefined) {
            throw new runtime.RequiredError('templateDepositPolicyToBeChanged','Required parameter requestParameters.templateDepositPolicyToBeChanged was null or undefined when calling changeTemplateDepositPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicytemplate/{depositpolicytemplate}`.replace(`{${"depositpolicytemplate"}}`, encodeURIComponent(String(requestParameters.depositpolicytemplate))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateDepositPolicyToBeChangedToJSON(requestParameters.templateDepositPolicyToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update template deposit policy. <p><strong>OperationId:</strong>changeTemplateDepositPolicy</p>
     * Change template deposit policy
     */
    async changeTemplateDepositPolicy(requestParameters: ChangeTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update template Guarantee Code. <p><strong>OperationId:</strong>changeTemplateGuaranteeCode</p>
     * Change template Guarantee Code
     */
    async changeTemplateGuaranteeCodeRaw(requestParameters: ChangeTemplateGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling changeTemplateGuaranteeCode.');
        }
        
        if (requestParameters.templateGuaranteeCodeToBeChanged === null || requestParameters.templateGuaranteeCodeToBeChanged === undefined) {
            throw new runtime.RequiredError('templateGuaranteeCodeToBeChanged','Required parameter requestParameters.templateGuaranteeCodeToBeChanged was null or undefined when calling changeTemplateGuaranteeCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodeTemplates/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateGuaranteeCodeToBeChangedToJSON(requestParameters.templateGuaranteeCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update template Guarantee Code. <p><strong>OperationId:</strong>changeTemplateGuaranteeCode</p>
     * Change template Guarantee Code
     */
    async changeTemplateGuaranteeCode(requestParameters: ChangeTemplateGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateGuaranteeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to modify a template Market Code. Only one template Market Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketCode</p>
     * Update a Market Code Template
     */
    async changeTemplateMarketCodeRaw(requestParameters: ChangeTemplateMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
            throw new runtime.RequiredError('marketcode','Required parameter requestParameters.marketcode was null or undefined when calling changeTemplateMarketCode.');
        }
        
        if (requestParameters.templateMarketCodeToBeChanged === null || requestParameters.templateMarketCodeToBeChanged === undefined) {
            throw new runtime.RequiredError('templateMarketCodeToBeChanged','Required parameter requestParameters.templateMarketCodeToBeChanged was null or undefined when calling changeTemplateMarketCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketCodeTemplates/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateMarketCodeToBeChangedToJSON(requestParameters.templateMarketCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to modify a template Market Code. Only one template Market Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketCode</p>
     * Update a Market Code Template
     */
    async changeTemplateMarketCode(requestParameters: ChangeTemplateMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateMarketCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to modify a Template Market Group. Only one Template Market Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketGroup</p>
     * Change Market Group Template
     */
    async changeTemplateMarketGroupRaw(requestParameters: ChangeTemplateMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
            throw new runtime.RequiredError('marketGroupCode','Required parameter requestParameters.marketGroupCode was null or undefined when calling changeTemplateMarketGroup.');
        }
        
        if (requestParameters.templateMarketGroupToBeChanged === null || requestParameters.templateMarketGroupToBeChanged === undefined) {
            throw new runtime.RequiredError('templateMarketGroupToBeChanged','Required parameter requestParameters.templateMarketGroupToBeChanged was null or undefined when calling changeTemplateMarketGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketGroupTemplate/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateMarketGroupToBeChangedToJSON(requestParameters.templateMarketGroupToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to modify a Template Market Group. Only one Template Market Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateMarketGroup</p>
     * Change Market Group Template
     */
    async changeTemplateMarketGroup(requestParameters: ChangeTemplateMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateMarketGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Modify a Template Source Code. Only one Template Source Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceCode</p>
     * Change a Template Source Code
     */
    async changeTemplateSourceCodeRaw(requestParameters: ChangeTemplateSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
            throw new runtime.RequiredError('sourceCode','Required parameter requestParameters.sourceCode was null or undefined when calling changeTemplateSourceCode.');
        }
        
        if (requestParameters.templateSourceCodeToBeChanged === null || requestParameters.templateSourceCodeToBeChanged === undefined) {
            throw new runtime.RequiredError('templateSourceCodeToBeChanged','Required parameter requestParameters.templateSourceCodeToBeChanged was null or undefined when calling changeTemplateSourceCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateSourceCodeToBeChangedToJSON(requestParameters.templateSourceCodeToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to Modify a Template Source Code. Only one Template Source Code can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceCode</p>
     * Change a Template Source Code
     */
    async changeTemplateSourceCode(requestParameters: ChangeTemplateSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to Modify a Template Source Group. Only one Template Source Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceGroup</p>
     * Change Template Source Group
     */
    async changeTemplateSourceGroupRaw(requestParameters: ChangeTemplateSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateSourceGroupToBeChanged === null || requestParameters.templateSourceGroupToBeChanged === undefined) {
            throw new runtime.RequiredError('templateSourceGroupToBeChanged','Required parameter requestParameters.templateSourceGroupToBeChanged was null or undefined when calling changeTemplateSourceGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceGroups`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateSourceGroupToBeChangedToJSON(requestParameters.templateSourceGroupToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to Modify a Template Source Group. Only one Template Source Group can be modified at a time. <p><strong>OperationId:</strong>changeTemplateSourceGroup</p>
     * Change Template Source Group
     */
    async changeTemplateSourceGroup(requestParameters: ChangeTemplateSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateSourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this APU to copy schedules for guarantee codes. <p><strong>OperationId:</strong>copyGuaranteeCodeSchedules</p>
     * Copy schedule s for guarantee codes 
     */
    async copyGuaranteeCodeSchedulesRaw(requestParameters: CopyGuaranteeCodeSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyScheduleId === null || requestParameters.policyScheduleId === undefined) {
            throw new runtime.RequiredError('policyScheduleId','Required parameter requestParameters.policyScheduleId was null or undefined when calling copyGuaranteeCodeSchedules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyGuaranteeCodeSchedules.');
        }
        
        if (requestParameters.copyGuaranteeCodeSchedules === null || requestParameters.copyGuaranteeCodeSchedules === undefined) {
            throw new runtime.RequiredError('copyGuaranteeCodeSchedules','Required parameter requestParameters.copyGuaranteeCodeSchedules was null or undefined when calling copyGuaranteeCodeSchedules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guaranteeCodeSchedules/{policyScheduleId}/copy`.replace(`{${"policyScheduleId"}}`, encodeURIComponent(String(requestParameters.policyScheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyGuaranteeCodeSchedulesToJSON(requestParameters.copyGuaranteeCodeSchedules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this APU to copy schedules for guarantee codes. <p><strong>OperationId:</strong>copyGuaranteeCodeSchedules</p>
     * Copy schedule s for guarantee codes 
     */
    async copyGuaranteeCodeSchedules(requestParameters: CopyGuaranteeCodeSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyGuaranteeCodeSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this APU to copy schedules for deposit or cancel policy. <p><strong>OperationId:</strong>copyPolicySchedules</p>
     * Copy a Policy Schedule
     */
    async copyPolicySchedulesRaw(requestParameters: CopyPolicySchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
            throw new runtime.RequiredError('policyscheduleId','Required parameter requestParameters.policyscheduleId was null or undefined when calling copyPolicySchedules.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyPolicySchedules.');
        }
        
        if (requestParameters.copyPolicySchedules === null || requestParameters.copyPolicySchedules === undefined) {
            throw new runtime.RequiredError('copyPolicySchedules','Required parameter requestParameters.copyPolicySchedules was null or undefined when calling copyPolicySchedules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}/copy`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyPolicySchedulesToJSON(requestParameters.copyPolicySchedules),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this APU to copy schedules for deposit or cancel policy. <p><strong>OperationId:</strong>copyPolicySchedules</p>
     * Copy a Policy Schedule
     */
    async copyPolicySchedules(requestParameters: CopyPolicySchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyPolicySchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy configuration service request codes. <p><strong>OperationId:</strong>copyServiceRequestCodes</p>
     *  copy configuration service request codes
     */
    async copyServiceRequestCodesRaw(requestParameters: CopyServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyServiceRequestCodes.');
        }
        
        if (requestParameters.copyServiceRequestCodes === null || requestParameters.copyServiceRequestCodes === undefined) {
            throw new runtime.RequiredError('copyServiceRequestCodes','Required parameter requestParameters.copyServiceRequestCodes was null or undefined when calling copyServiceRequestCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/serviceRequestCodes/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyServiceRequestCodesToJSON(requestParameters.copyServiceRequestCodes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy configuration service request codes. <p><strong>OperationId:</strong>copyServiceRequestCodes</p>
     *  copy configuration service request codes
     */
    async copyServiceRequestCodes(requestParameters: CopyServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyServiceRequestCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Cancellation policies in hotel level. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete Cancellation policies in hotel level
     */
    async deleteCancellationPolicyRaw(requestParameters: DeleteCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancelpolicycode === null || requestParameters.cancelpolicycode === undefined) {
            throw new runtime.RequiredError('cancelpolicycode','Required parameter requestParameters.cancelpolicycode was null or undefined when calling deleteCancellationPolicy.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCancellationPolicy.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicy/{cancelpolicycode}`.replace(`{${"cancelpolicycode"}}`, encodeURIComponent(String(requestParameters.cancelpolicycode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Cancellation policies in hotel level. <p><strong>OperationId:</strong>deleteCancellationPolicy</p>
     * Delete Cancellation policies in hotel level
     */
    async deleteCancellationPolicy(requestParameters: DeleteCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete deposit policy in hotel level. <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy in hotel level
     */
    async deleteDepositPolicyRaw(requestParameters: DeleteDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.depositpolicycode === null || requestParameters.depositpolicycode === undefined) {
            throw new runtime.RequiredError('depositpolicycode','Required parameter requestParameters.depositpolicycode was null or undefined when calling deleteDepositPolicy.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteDepositPolicy.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicy/{depositpolicycode}`.replace(`{${"depositpolicycode"}}`, encodeURIComponent(String(requestParameters.depositpolicycode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete deposit policy in hotel level. <p><strong>OperationId:</strong>deleteDepositPolicy</p>
     * Delete deposit policy in hotel level
     */
    async deleteDepositPolicy(requestParameters: DeleteDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Guarantee Code. <p><strong>OperationId:</strong>deleteGuaranteeCode</p>
     * Delete Guarantee Code
     */
    async deleteGuaranteeCodeRaw(requestParameters: DeleteGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling deleteGuaranteeCode.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodes/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Guarantee Code. <p><strong>OperationId:</strong>deleteGuaranteeCode</p>
     * Delete Guarantee Code
     */
    async deleteGuaranteeCode(requestParameters: DeleteGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuaranteeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete schedule for guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteeCodeSchedule</p>
     * Delete schedule for guarantee codes 
     */
    async deleteGuaranteeCodeScheduleRaw(requestParameters: DeleteGuaranteeCodeScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyScheduleId === null || requestParameters.policyScheduleId === undefined) {
            throw new runtime.RequiredError('policyScheduleId','Required parameter requestParameters.policyScheduleId was null or undefined when calling deleteGuaranteeCodeSchedule.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteGuaranteeCodeSchedule.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guaranteeCodeSchedules/{policyScheduleId}`.replace(`{${"policyScheduleId"}}`, encodeURIComponent(String(requestParameters.policyScheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete schedule for guarantee codes. <p><strong>OperationId:</strong>deleteGuaranteeCodeSchedule</p>
     * Delete schedule for guarantee codes 
     */
    async deleteGuaranteeCodeSchedule(requestParameters: DeleteGuaranteeCodeScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGuaranteeCodeScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete schedule for deposit or cancel policy. <p><strong>OperationId:</strong>deletePolicySchedule</p>
     * Delete Policy Schedule
     */
    async deletePolicyScheduleRaw(requestParameters: DeletePolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
            throw new runtime.RequiredError('policyscheduleId','Required parameter requestParameters.policyscheduleId was null or undefined when calling deletePolicySchedule.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deletePolicySchedule.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete schedule for deposit or cancel policy. <p><strong>OperationId:</strong>deletePolicySchedule</p>
     * Delete Policy Schedule
     */
    async deletePolicySchedule(requestParameters: DeletePolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deletePolicyScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete template Cancellation policies. <p><strong>OperationId:</strong>deleteTemplateCancellationPolicy</p>
     * Delete template Cancellation policies
     */
    async deleteTemplateCancellationPolicyRaw(requestParameters: DeleteTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancelpolicytemplate === null || requestParameters.cancelpolicytemplate === undefined) {
            throw new runtime.RequiredError('cancelpolicytemplate','Required parameter requestParameters.cancelpolicytemplate was null or undefined when calling deleteTemplateCancellationPolicy.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.policyCode !== undefined) {
            queryParameters['policyCode'] = requestParameters.policyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicytemplate/{cancelpolicytemplate}`.replace(`{${"cancelpolicytemplate"}}`, encodeURIComponent(String(requestParameters.cancelpolicytemplate))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete template Cancellation policies. <p><strong>OperationId:</strong>deleteTemplateCancellationPolicy</p>
     * Delete template Cancellation policies
     */
    async deleteTemplateCancellationPolicy(requestParameters: DeleteTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete template deposit policy. <p><strong>OperationId:</strong>deleteTemplateDepositPolicy</p>
     * Delete template deposit policy
     */
    async deleteTemplateDepositPolicyRaw(requestParameters: DeleteTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.depositpolicytemplate === null || requestParameters.depositpolicytemplate === undefined) {
            throw new runtime.RequiredError('depositpolicytemplate','Required parameter requestParameters.depositpolicytemplate was null or undefined when calling deleteTemplateDepositPolicy.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.policyCode !== undefined) {
            queryParameters['policyCode'] = requestParameters.policyCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicytemplate/{depositpolicytemplate}`.replace(`{${"depositpolicytemplate"}}`, encodeURIComponent(String(requestParameters.depositpolicytemplate))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete template deposit policy. <p><strong>OperationId:</strong>deleteTemplateDepositPolicy</p>
     * Delete template deposit policy
     */
    async deleteTemplateDepositPolicy(requestParameters: DeleteTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete template Guarantee Code. <p><strong>OperationId:</strong>deleteTemplateGuaranteeCode</p>
     * Delete template Guarantee Code
     */
    async deleteTemplateGuaranteeCodeRaw(requestParameters: DeleteTemplateGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling deleteTemplateGuaranteeCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodeTemplates/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete template Guarantee Code. <p><strong>OperationId:</strong>deleteTemplateGuaranteeCode</p>
     * Delete template Guarantee Code
     */
    async deleteTemplateGuaranteeCode(requestParameters: DeleteTemplateGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteTemplateGuaranteeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Cancellation policies in hotel level. <p><strong>OperationId:</strong>getCancellationPolicy</p>
     * Get Cancellation policies in hotel level
     */
    async getCancellationPolicyRaw(requestParameters: GetCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancellationPolicyDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.policyCodeListCodes) {
            queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancellationPolicyDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Cancellation policies in hotel level. <p><strong>OperationId:</strong>getCancellationPolicy</p>
     * Get Cancellation policies in hotel level
     */
    async getCancellationPolicy(requestParameters: GetCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancellationPolicyDetails> {
        const response = await this.getCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get deposit policies in hotel level. <p><strong>OperationId:</strong>getDepositPolicy</p>
     * Get deposit policies in hotel level
     */
    async getDepositPolicyRaw(requestParameters: GetDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DepositPolicyDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.policyCodeListCodes) {
            queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DepositPolicyDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get deposit policies in hotel level. <p><strong>OperationId:</strong>getDepositPolicy</p>
     * Get deposit policies in hotel level
     */
    async getDepositPolicy(requestParameters: GetDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DepositPolicyDetails> {
        const response = await this.getDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get schedules for guarantee codes. <p><strong>OperationId:</strong>getGuaranteeCodeSchedules</p>
     * Get schedules for guarantee codes 
     */
    async getGuaranteeCodeSchedulesRaw(requestParameters: GetGuaranteeCodeSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuaranteeCodeSchedulesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getGuaranteeCodeSchedules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.guaranteeCodes) {
            queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
        }

        if (requestParameters.creditRatingsCodes) {
            queryParameters['creditRatingsCodes'] = requestParameters.creditRatingsCodes;
        }

        if (requestParameters.seasonsCodes) {
            queryParameters['seasonsCodes'] = requestParameters.seasonsCodes;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guaranteeCodeSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuaranteeCodeSchedulesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get schedules for guarantee codes. <p><strong>OperationId:</strong>getGuaranteeCodeSchedules</p>
     * Get schedules for guarantee codes 
     */
    async getGuaranteeCodeSchedules(requestParameters: GetGuaranteeCodeSchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuaranteeCodeSchedulesDetails> {
        const response = await this.getGuaranteeCodeSchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Guarantee Codes for a hotel. Guarantee codes are required to identify if the reservation is deducted (definite), not deducted (tentative) from availability, or is guaranteed.<p><strong>OperationId:</strong>getGuaranteeCodes</p>
     * Get guarantee codes
     */
    async getGuaranteeCodesRaw(requestParameters: GetGuaranteeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuaranteeCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.guaranteeCodes) {
            queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuaranteeCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Guarantee Codes for a hotel. Guarantee codes are required to identify if the reservation is deducted (definite), not deducted (tentative) from availability, or is guaranteed.<p><strong>OperationId:</strong>getGuaranteeCodes</p>
     * Get guarantee codes
     */
    async getGuaranteeCodes(requestParameters: GetGuaranteeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuaranteeCodesDetails> {
        const response = await this.getGuaranteeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Market codes. <p><strong>OperationId:</strong>getMarketCodes</p>
     * Get Market codes
     */
    async getMarketCodesRaw(requestParameters: GetMarketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.marketGroupsCodes) {
            queryParameters['marketGroupsCodes'] = requestParameters.marketGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Market codes. <p><strong>OperationId:</strong>getMarketCodes</p>
     * Get Market codes
     */
    async getMarketCodes(requestParameters: GetMarketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketCodesDetails> {
        const response = await this.getMarketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to search for a Market Group. . <p><strong>OperationId:</strong>getMarketGroups</p>
     * Get Market Groups 
     */
    async getMarketGroupsRaw(requestParameters: GetMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MarketGroupsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.marketGroupsCodes) {
            queryParameters['marketGroupsCodes'] = requestParameters.marketGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MarketGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * This API is used to search for a Market Group. . <p><strong>OperationId:</strong>getMarketGroups</p>
     * Get Market Groups 
     */
    async getMarketGroups(requestParameters: GetMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MarketGroupsDetails> {
        const response = await this.getMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the schedule of deposit and cancelation policies for a hotel. Default limit is 20.<p><strong>OperationId:</strong>getPolicySchedules</p>
     * Get policy schedules
     */
    async getPolicySchedulesRaw(requestParameters: GetPolicySchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicySchedulesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPolicySchedules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.policyType !== undefined) {
            queryParameters['policyType'] = requestParameters.policyType;
        }

        if (requestParameters.ratePlanCodes) {
            queryParameters['ratePlanCodes'] = requestParameters.ratePlanCodes;
        }

        if (requestParameters.policyCodes) {
            queryParameters['policyCodes'] = requestParameters.policyCodes;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.guaranteeCodes) {
            queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
        }

        if (requestParameters.creditRatingsCodes) {
            queryParameters['creditRatingsCodes'] = requestParameters.creditRatingsCodes;
        }

        if (requestParameters.seasonsCodes) {
            queryParameters['seasonsCodes'] = requestParameters.seasonsCodes;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policyschedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicySchedulesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get the schedule of deposit and cancelation policies for a hotel. Default limit is 20.<p><strong>OperationId:</strong>getPolicySchedules</p>
     * Get policy schedules
     */
    async getPolicySchedules(requestParameters: GetPolicySchedulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicySchedulesDetails> {
        const response = await this.getPolicySchedulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Pre Check In rules. <p><strong>OperationId:</strong>getPreCheckInRules</p>
     * Get Pre Check In rules
     */
    async getPreCheckInRulesRaw(requestParameters: GetPreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PreCheckInRulesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getPreCheckInRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.ruleType !== undefined) {
            queryParameters['ruleType'] = requestParameters.ruleType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreCheckInRulesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Pre Check In rules. <p><strong>OperationId:</strong>getPreCheckInRules</p>
     * Get Pre Check In rules
     */
    async getPreCheckInRules(requestParameters: GetPreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PreCheckInRulesDetails> {
        const response = await this.getPreCheckInRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get service request codes. <p><strong>OperationId:</strong>getServiceRequestCode</p>
     * Get service request codes
     */
    async getServiceRequestCodeRaw(requestParameters: GetServiceRequestCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRequestCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.serviceRequestCodes) {
            queryParameters['serviceRequestCodes'] = requestParameters.serviceRequestCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/serviceRequestCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceRequestCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get service request codes. <p><strong>OperationId:</strong>getServiceRequestCode</p>
     * Get service request codes
     */
    async getServiceRequestCode(requestParameters: GetServiceRequestCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRequestCodesDetails> {
        const response = await this.getServiceRequestCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Service Request Code Priorities.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCodePriority instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodePriorities</p>
     * Get Service Request Code Priorities
     * @deprecated
     */
    async getServiceRequestCodePrioritiesRaw(requestParameters: GetServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRequestCodePrioritiesDetails>> {
        if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
            throw new runtime.RequiredError('serviceRequestCode','Required parameter requestParameters.serviceRequestCode was null or undefined when calling getServiceRequestCodePriorities.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getServiceRequestCodePriorities.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceRequestCodePrioritiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Service Request Code Priorities.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCodePriority instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodePriorities</p>
     * Get Service Request Code Priorities
     * @deprecated
     */
    async getServiceRequestCodePriorities(requestParameters: GetServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRequestCodePrioritiesDetails> {
        const response = await this.getServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Service Request Code Priorities. <p><strong>OperationId:</strong>getServiceRequestCodePriority</p>
     * Get Service Request Code Priorities
     */
    async getServiceRequestCodePriorityRaw(requestParameters: GetServiceRequestCodePriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRequestCodePrioritiesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.serviceRequestCodes) {
            queryParameters['serviceRequestCodes'] = requestParameters.serviceRequestCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/serviceRequestCodes/priorities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceRequestCodePrioritiesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Service Request Code Priorities. <p><strong>OperationId:</strong>getServiceRequestCodePriority</p>
     * Get Service Request Code Priorities
     */
    async getServiceRequestCodePriority(requestParameters: GetServiceRequestCodePriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRequestCodePrioritiesDetails> {
        const response = await this.getServiceRequestCodePriorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get service request codes.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCode instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodes</p>
     * Get service request codes
     * @deprecated
     */
    async getServiceRequestCodesRaw(requestParameters: GetServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ServiceRequestCodesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getServiceRequestCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.serviceRequestCodes) {
            queryParameters['serviceRequestCodes'] = requestParameters.serviceRequestCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceRequestCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get service request codes.<br><p><strong><mark>This API is deprecated. Please use getServiceRequestCode instead</mark></strong></p> <p><strong>OperationId:</strong>getServiceRequestCodes</p>
     * Get service request codes
     * @deprecated
     */
    async getServiceRequestCodes(requestParameters: GetServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ServiceRequestCodesDetails> {
        const response = await this.getServiceRequestCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to search for Source Codes based on criteria. <p><strong>OperationId:</strong>getSourceCodes</p>
     * Get Source Codes
     */
    async getSourceCodesRaw(requestParameters: GetSourceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourceCodesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getSourceCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.sourceGroupsCodes) {
            queryParameters['sourceGroupsCodes'] = requestParameters.sourceGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceCodes/`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to search for Source Codes based on criteria. <p><strong>OperationId:</strong>getSourceCodes</p>
     * Get Source Codes
     */
    async getSourceCodes(requestParameters: GetSourceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourceCodesDetails> {
        const response = await this.getSourceCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for Source Groups. <p><strong>OperationId:</strong>getSourceGroups</p>
     * Search for Source Groups 
     */
    async getSourceGroupsRaw(requestParameters: GetSourceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SourceGroupsDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getSourceGroups.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.sourceCodes) {
            queryParameters['sourceCodes'] = requestParameters.sourceCodes;
        }

        if (requestParameters.sourceGroupsCodes) {
            queryParameters['sourceGroupsCodes'] = requestParameters.sourceGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SourceGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * Search for Source Groups. <p><strong>OperationId:</strong>getSourceGroups</p>
     * Search for Source Groups 
     */
    async getSourceGroups(requestParameters: GetSourceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SourceGroupsDetails> {
        const response = await this.getSourceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template Cancellation policies. <p><strong>OperationId:</strong>getTemplateCancellationPolicy</p>
     * Get template Cancellation policies
     */
    async getTemplateCancellationPolicyRaw(requestParameters: GetTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateCancellationPolicyDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.policyCodeListCodes) {
            queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicytemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateCancellationPolicyDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template Cancellation policies. <p><strong>OperationId:</strong>getTemplateCancellationPolicy</p>
     * Get template Cancellation policies
     */
    async getTemplateCancellationPolicy(requestParameters: GetTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateCancellationPolicyDetails> {
        const response = await this.getTemplateCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template deposit policies. <p><strong>OperationId:</strong>getTemplateDepositPolicy</p>
     * Get template deposit policies
     */
    async getTemplateDepositPolicyRaw(requestParameters: GetTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateDepositPolicyDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.policyCodeListCodes) {
            queryParameters['policyCodeListCodes'] = requestParameters.policyCodeListCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicytemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateDepositPolicyDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template deposit policies. <p><strong>OperationId:</strong>getTemplateDepositPolicy</p>
     * Get template deposit policies
     */
    async getTemplateDepositPolicy(requestParameters: GetTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateDepositPolicyDetails> {
        const response = await this.getTemplateDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template Guarantee Codes. <p><strong>OperationId:</strong>getTemplateGuaranteeCodes</p>
     * Get template Guarantee Codes
     */
    async getTemplateGuaranteeCodesRaw(requestParameters: GetTemplateGuaranteeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateGuaranteeCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.guaranteeCodes) {
            queryParameters['guaranteeCodes'] = requestParameters.guaranteeCodes;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodeTemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateGuaranteeCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template Guarantee Codes. <p><strong>OperationId:</strong>getTemplateGuaranteeCodes</p>
     * Get template Guarantee Codes
     */
    async getTemplateGuaranteeCodes(requestParameters: GetTemplateGuaranteeCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateGuaranteeCodesDetails> {
        const response = await this.getTemplateGuaranteeCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to search for a Template Market Code. . <p><strong>OperationId:</strong>getTemplateMarketCodes</p>
     * Search for Market codes Template
     */
    async getTemplateMarketCodesRaw(requestParameters: GetTemplateMarketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateMarketCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.templateMarketCodes) {
            queryParameters['templateMarketCodes'] = requestParameters.templateMarketCodes;
        }

        if (requestParameters.templateMarketGroupsCodes) {
            queryParameters['templateMarketGroupsCodes'] = requestParameters.templateMarketGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketCodeTemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateMarketCodesDetailsFromJSON(jsonValue));
    }

    /**
     * This API is used to search for a Template Market Code. . <p><strong>OperationId:</strong>getTemplateMarketCodes</p>
     * Search for Market codes Template
     */
    async getTemplateMarketCodes(requestParameters: GetTemplateMarketCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateMarketCodesDetails> {
        const response = await this.getTemplateMarketCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get  Market Group Templates. <p><strong>OperationId:</strong>getTemplateMarketGroups</p>
     * Get  Market Group Templates
     */
    async getTemplateMarketGroupsRaw(requestParameters: GetTemplateMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateMarketGroupsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.templateMarketCodes) {
            queryParameters['templateMarketCodes'] = requestParameters.templateMarketCodes;
        }

        if (requestParameters.templateMarketGroupsCodes) {
            queryParameters['templateMarketGroupsCodes'] = requestParameters.templateMarketGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketGroupTemplates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateMarketGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get  Market Group Templates. <p><strong>OperationId:</strong>getTemplateMarketGroups</p>
     * Get  Market Group Templates
     */
    async getTemplateMarketGroups(requestParameters: GetTemplateMarketGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateMarketGroupsDetails> {
        const response = await this.getTemplateMarketGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get template Source Codes. <p><strong>OperationId:</strong>getTemplateSourceCodes</p>
     * Get template Source Codes
     */
    async getTemplateSourceCodesRaw(requestParameters: GetTemplateSourceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateSourceCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.templateSourceCodes) {
            queryParameters['templateSourceCodes'] = requestParameters.templateSourceCodes;
        }

        if (requestParameters.templateSourceGroupsCodes) {
            queryParameters['templateSourceGroupsCodes'] = requestParameters.templateSourceGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateSourceCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get template Source Codes. <p><strong>OperationId:</strong>getTemplateSourceCodes</p>
     * Get template Source Codes
     */
    async getTemplateSourceCodes(requestParameters: GetTemplateSourceCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateSourceCodesDetails> {
        const response = await this.getTemplateSourceCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to search for Template Source Groups based on the search criteria in the request. <p><strong>OperationId:</strong>getTemplateSourceGroups</p>
     * Get Template Source Groups
     */
    async getTemplateSourceGroupsRaw(requestParameters: GetTemplateSourceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateSourceGroupsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.templateSourceCodes) {
            queryParameters['templateSourceCodes'] = requestParameters.templateSourceCodes;
        }

        if (requestParameters.templateSourceGroupsCodes) {
            queryParameters['templateSourceGroupsCodes'] = requestParameters.templateSourceGroupsCodes;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateSourceGroupsDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows you to search for Template Source Groups based on the search criteria in the request. <p><strong>OperationId:</strong>getTemplateSourceGroups</p>
     * Get Template Source Groups
     */
    async getTemplateSourceGroups(requestParameters: GetTemplateSourceGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateSourceGroupsDetails> {
        const response = await this.getTemplateSourceGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Cancellation policies in hotel level. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create Cancellation policies in hotel level
     */
    async postCancellationPolicyRaw(requestParameters: PostCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancelpolicycode === null || requestParameters.cancelpolicycode === undefined) {
            throw new runtime.RequiredError('cancelpolicycode','Required parameter requestParameters.cancelpolicycode was null or undefined when calling postCancellationPolicy.');
        }
        
        if (requestParameters.cancellationPolicyCriteria === null || requestParameters.cancellationPolicyCriteria === undefined) {
            throw new runtime.RequiredError('cancellationPolicyCriteria','Required parameter requestParameters.cancellationPolicyCriteria was null or undefined when calling postCancellationPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicy/{cancelpolicycode}`.replace(`{${"cancelpolicycode"}}`, encodeURIComponent(String(requestParameters.cancelpolicycode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancellationPolicyCriteriaToJSON(requestParameters.cancellationPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Cancellation policies in hotel level. <p><strong>OperationId:</strong>postCancellationPolicy</p>
     * Create Cancellation policies in hotel level
     */
    async postCancellationPolicy(requestParameters: PostCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create deposit policy in hotel level. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy in hotel level
     */
    async postDepositPolicyRaw(requestParameters: PostDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.depositpolicycode === null || requestParameters.depositpolicycode === undefined) {
            throw new runtime.RequiredError('depositpolicycode','Required parameter requestParameters.depositpolicycode was null or undefined when calling postDepositPolicy.');
        }
        
        if (requestParameters.depositPolicyCriteria === null || requestParameters.depositPolicyCriteria === undefined) {
            throw new runtime.RequiredError('depositPolicyCriteria','Required parameter requestParameters.depositPolicyCriteria was null or undefined when calling postDepositPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicy/{depositpolicycode}`.replace(`{${"depositpolicycode"}}`, encodeURIComponent(String(requestParameters.depositpolicycode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DepositPolicyCriteriaToJSON(requestParameters.depositPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create deposit policy in hotel level. <p><strong>OperationId:</strong>postDepositPolicy</p>
     * Create deposit policy in hotel level
     */
    async postDepositPolicy(requestParameters: PostDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Guarantee Code. <p><strong>OperationId:</strong>postGuaranteeCode</p>
     * Create Guarantee Code
     */
    async postGuaranteeCodeRaw(requestParameters: PostGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCodeCriteria === null || requestParameters.guaranteeCodeCriteria === undefined) {
            throw new runtime.RequiredError('guaranteeCodeCriteria','Required parameter requestParameters.guaranteeCodeCriteria was null or undefined when calling postGuaranteeCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuaranteeCodeCriteriaToJSON(requestParameters.guaranteeCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Guarantee Code. <p><strong>OperationId:</strong>postGuaranteeCode</p>
     * Create Guarantee Code
     */
    async postGuaranteeCode(requestParameters: PostGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuaranteeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create schedule for guarantee codes. <p><strong>OperationId:</strong>postGuaranteeCodeSchedule</p>
     * Create schedule for guarantee codes 
     */
    async postGuaranteeCodeScheduleRaw(requestParameters: PostGuaranteeCodeScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postGuaranteeCodeSchedule.');
        }
        
        if (requestParameters.guaranteeCodeScheduleCriteria === null || requestParameters.guaranteeCodeScheduleCriteria === undefined) {
            throw new runtime.RequiredError('guaranteeCodeScheduleCriteria','Required parameter requestParameters.guaranteeCodeScheduleCriteria was null or undefined when calling postGuaranteeCodeSchedule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guaranteeCodeSchedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GuaranteeCodeScheduleCriteriaToJSON(requestParameters.guaranteeCodeScheduleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create schedule for guarantee codes. <p><strong>OperationId:</strong>postGuaranteeCodeSchedule</p>
     * Create schedule for guarantee codes 
     */
    async postGuaranteeCodeSchedule(requestParameters: PostGuaranteeCodeScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGuaranteeCodeScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Market Code. <p><strong>OperationId:</strong>postMarketCode</p>
     * Create a new Market Code
     */
    async postMarketCodeRaw(requestParameters: PostMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
            throw new runtime.RequiredError('marketcode','Required parameter requestParameters.marketcode was null or undefined when calling postMarketCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postMarketCode.');
        }
        
        if (requestParameters.marketCodeCriteria === null || requestParameters.marketCodeCriteria === undefined) {
            throw new runtime.RequiredError('marketCodeCriteria','Required parameter requestParameters.marketCodeCriteria was null or undefined when calling postMarketCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketCodes/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarketCodeCriteriaToJSON(requestParameters.marketCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Market Code. <p><strong>OperationId:</strong>postMarketCode</p>
     * Create a new Market Code
     */
    async postMarketCode(requestParameters: PostMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMarketCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Market Group. Only one Market Code can be created at a time. <p><strong>OperationId:</strong>postMarketGroup</p>
     * Create Market Group
     */
    async postMarketGroupRaw(requestParameters: PostMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
            throw new runtime.RequiredError('marketGroupCode','Required parameter requestParameters.marketGroupCode was null or undefined when calling postMarketGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postMarketGroup.');
        }
        
        if (requestParameters.marketGroupCriteria === null || requestParameters.marketGroupCriteria === undefined) {
            throw new runtime.RequiredError('marketGroupCriteria','Required parameter requestParameters.marketGroupCriteria was null or undefined when calling postMarketGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketGroups/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MarketGroupCriteriaToJSON(requestParameters.marketGroupCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Market Group. Only one Market Code can be created at a time. <p><strong>OperationId:</strong>postMarketGroup</p>
     * Create Market Group
     */
    async postMarketGroup(requestParameters: PostMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMarketGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create schedule for deposit or cancel policy. <p><strong>OperationId:</strong>postNewPolicySchedule</p>
     * Create a Policy Schedule
     */
    async postNewPolicyScheduleRaw(requestParameters: PostNewPolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postNewPolicySchedule.');
        }
        
        if (requestParameters.policyScheduleCriteria === null || requestParameters.policyScheduleCriteria === undefined) {
            throw new runtime.RequiredError('policyScheduleCriteria','Required parameter requestParameters.policyScheduleCriteria was null or undefined when calling postNewPolicySchedule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policyschedules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyScheduleCriteriaToJSON(requestParameters.policyScheduleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create schedule for deposit or cancel policy. <p><strong>OperationId:</strong>postNewPolicySchedule</p>
     * Create a Policy Schedule
     */
    async postNewPolicySchedule(requestParameters: PostNewPolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postNewPolicyScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create schedule for deposit or cancel policy.<br><p><strong><mark>This API is deprecated. Please use createNewPolicySchedule instead</mark></strong></p> <p><strong>OperationId:</strong>postPolicySchedule</p>
     * Create a Policy Schedule
     * @deprecated
     */
    async postPolicyScheduleRaw(requestParameters: PostPolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.policyscheduleId === null || requestParameters.policyscheduleId === undefined) {
            throw new runtime.RequiredError('policyscheduleId','Required parameter requestParameters.policyscheduleId was null or undefined when calling postPolicySchedule.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPolicySchedule.');
        }
        
        if (requestParameters.policyScheduleCriteria === null || requestParameters.policyScheduleCriteria === undefined) {
            throw new runtime.RequiredError('policyScheduleCriteria','Required parameter requestParameters.policyScheduleCriteria was null or undefined when calling postPolicySchedule.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/policyschedules/{policyscheduleId}`.replace(`{${"policyscheduleId"}}`, encodeURIComponent(String(requestParameters.policyscheduleId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyScheduleCriteriaToJSON(requestParameters.policyScheduleCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create schedule for deposit or cancel policy.<br><p><strong><mark>This API is deprecated. Please use createNewPolicySchedule instead</mark></strong></p> <p><strong>OperationId:</strong>postPolicySchedule</p>
     * Create a Policy Schedule
     * @deprecated
     */
    async postPolicySchedule(requestParameters: PostPolicyScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPolicyScheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Pre Check In rules. <p><strong>OperationId:</strong>postPreCheckInRules</p>
     * Create Pre Check In rules
     */
    async postPreCheckInRulesRaw(requestParameters: PostPreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postPreCheckInRules.');
        }
        
        if (requestParameters.preCheckInRulesCriteria === null || requestParameters.preCheckInRulesCriteria === undefined) {
            throw new runtime.RequiredError('preCheckInRulesCriteria','Required parameter requestParameters.preCheckInRulesCriteria was null or undefined when calling postPreCheckInRules.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreCheckInRulesCriteriaToJSON(requestParameters.preCheckInRulesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Pre Check In rules. <p><strong>OperationId:</strong>postPreCheckInRules</p>
     * Create Pre Check In rules
     */
    async postPreCheckInRules(requestParameters: PostPreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postPreCheckInRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Service Request Code Priorities. <p><strong>OperationId:</strong>postServiceRequestCodePriorities</p>
     * Create Service Request Code Priorities
     */
    async postServiceRequestCodePrioritiesRaw(requestParameters: PostServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
            throw new runtime.RequiredError('serviceRequestCode','Required parameter requestParameters.serviceRequestCode was null or undefined when calling postServiceRequestCodePriorities.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postServiceRequestCodePriorities.');
        }
        
        if (requestParameters.serviceRequestCodePrioritiesCriteria === null || requestParameters.serviceRequestCodePrioritiesCriteria === undefined) {
            throw new runtime.RequiredError('serviceRequestCodePrioritiesCriteria','Required parameter requestParameters.serviceRequestCodePrioritiesCriteria was null or undefined when calling postServiceRequestCodePriorities.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRequestCodePrioritiesCriteriaToJSON(requestParameters.serviceRequestCodePrioritiesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Service Request Code Priorities. <p><strong>OperationId:</strong>postServiceRequestCodePriorities</p>
     * Create Service Request Code Priorities
     */
    async postServiceRequestCodePriorities(requestParameters: PostServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create service request codes. <p><strong>OperationId:</strong>postServiceRequestCodes</p>
     * Create service request codes
     */
    async postServiceRequestCodesRaw(requestParameters: PostServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postServiceRequestCodes.');
        }
        
        if (requestParameters.serviceRequestCodesCriteria === null || requestParameters.serviceRequestCodesCriteria === undefined) {
            throw new runtime.RequiredError('serviceRequestCodesCriteria','Required parameter requestParameters.serviceRequestCodesCriteria was null or undefined when calling postServiceRequestCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceRequestCodesCriteriaToJSON(requestParameters.serviceRequestCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create service request codes. <p><strong>OperationId:</strong>postServiceRequestCodes</p>
     * Create service request codes
     */
    async postServiceRequestCodes(requestParameters: PostServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postServiceRequestCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Source Code. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceCode</p>
     * Create a Source Code
     */
    async postSourceCodeRaw(requestParameters: PostSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postSourceCode.');
        }
        
        if (requestParameters.sourceCodeCriteria === null || requestParameters.sourceCodeCriteria === undefined) {
            throw new runtime.RequiredError('sourceCodeCriteria','Required parameter requestParameters.sourceCodeCriteria was null or undefined when calling postSourceCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceCodes/`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceCodeCriteriaToJSON(requestParameters.sourceCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Source Code. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceCode</p>
     * Create a Source Code
     */
    async postSourceCode(requestParameters: PostSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create a new Source Group. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceGroup</p>
     * Create a Source Group
     */
    async postSourceGroupRaw(requestParameters: PostSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postSourceGroup.');
        }
        
        if (requestParameters.sourceGroupCriteria === null || requestParameters.sourceGroupCriteria === undefined) {
            throw new runtime.RequiredError('sourceGroupCriteria','Required parameter requestParameters.sourceGroupCriteria was null or undefined when calling postSourceGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceGroups`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SourceGroupCriteriaToJSON(requestParameters.sourceGroupCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create a new Source Group. Only one Source Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postSourceGroup</p>
     * Create a Source Group
     */
    async postSourceGroup(requestParameters: PostSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create template Cancellation policies. <p><strong>OperationId:</strong>postTemplateCancellationPolicy</p>
     * Create template Cancellation policies
     */
    async postTemplateCancellationPolicyRaw(requestParameters: PostTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cancelpolicytemplate === null || requestParameters.cancelpolicytemplate === undefined) {
            throw new runtime.RequiredError('cancelpolicytemplate','Required parameter requestParameters.cancelpolicytemplate was null or undefined when calling postTemplateCancellationPolicy.');
        }
        
        if (requestParameters.templateCancellationPolicyCriteria === null || requestParameters.templateCancellationPolicyCriteria === undefined) {
            throw new runtime.RequiredError('templateCancellationPolicyCriteria','Required parameter requestParameters.templateCancellationPolicyCriteria was null or undefined when calling postTemplateCancellationPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cancelpolicytemplate/{cancelpolicytemplate}`.replace(`{${"cancelpolicytemplate"}}`, encodeURIComponent(String(requestParameters.cancelpolicytemplate))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateCancellationPolicyCriteriaToJSON(requestParameters.templateCancellationPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create template Cancellation policies. <p><strong>OperationId:</strong>postTemplateCancellationPolicy</p>
     * Create template Cancellation policies
     */
    async postTemplateCancellationPolicy(requestParameters: PostTemplateCancellationPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateCancellationPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create template deposit policy. <p><strong>OperationId:</strong>postTemplateDepositPolicy</p>
     * Create template deposit policy
     */
    async postTemplateDepositPolicyRaw(requestParameters: PostTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.depositpolicytemplate === null || requestParameters.depositpolicytemplate === undefined) {
            throw new runtime.RequiredError('depositpolicytemplate','Required parameter requestParameters.depositpolicytemplate was null or undefined when calling postTemplateDepositPolicy.');
        }
        
        if (requestParameters.templateDepositPolicyCriteria === null || requestParameters.templateDepositPolicyCriteria === undefined) {
            throw new runtime.RequiredError('templateDepositPolicyCriteria','Required parameter requestParameters.templateDepositPolicyCriteria was null or undefined when calling postTemplateDepositPolicy.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/depositpolicytemplate/{depositpolicytemplate}`.replace(`{${"depositpolicytemplate"}}`, encodeURIComponent(String(requestParameters.depositpolicytemplate))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateDepositPolicyCriteriaToJSON(requestParameters.templateDepositPolicyCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create template deposit policy. <p><strong>OperationId:</strong>postTemplateDepositPolicy</p>
     * Create template deposit policy
     */
    async postTemplateDepositPolicy(requestParameters: PostTemplateDepositPolicyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateDepositPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create template Guarantee Code. <p><strong>OperationId:</strong>postTemplateGuaranteeCode</p>
     * Create template Guarantee Code
     */
    async postTemplateGuaranteeCodeRaw(requestParameters: PostTemplateGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.guaranteeCode === null || requestParameters.guaranteeCode === undefined) {
            throw new runtime.RequiredError('guaranteeCode','Required parameter requestParameters.guaranteeCode was null or undefined when calling postTemplateGuaranteeCode.');
        }
        
        if (requestParameters.templateGuaranteeCodeCriteria === null || requestParameters.templateGuaranteeCodeCriteria === undefined) {
            throw new runtime.RequiredError('templateGuaranteeCodeCriteria','Required parameter requestParameters.templateGuaranteeCodeCriteria was null or undefined when calling postTemplateGuaranteeCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/guaranteeCodeTemplates/{guaranteeCode}`.replace(`{${"guaranteeCode"}}`, encodeURIComponent(String(requestParameters.guaranteeCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateGuaranteeCodeCriteriaToJSON(requestParameters.templateGuaranteeCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create template Guarantee Code. <p><strong>OperationId:</strong>postTemplateGuaranteeCode</p>
     * Create template Guarantee Code
     */
    async postTemplateGuaranteeCode(requestParameters: PostTemplateGuaranteeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateGuaranteeCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create a new Template Market Code. Only one template Market Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketCode</p>
     * Create Market Code Template
     */
    async postTemplateMarketCodeRaw(requestParameters: PostTemplateMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateMarketCodeCriteria === null || requestParameters.templateMarketCodeCriteria === undefined) {
            throw new runtime.RequiredError('templateMarketCodeCriteria','Required parameter requestParameters.templateMarketCodeCriteria was null or undefined when calling postTemplateMarketCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketCodeTemplates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateMarketCodeCriteriaToJSON(requestParameters.templateMarketCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create a new Template Market Code. Only one template Market Code can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketCode</p>
     * Create Market Code Template
     */
    async postTemplateMarketCode(requestParameters: PostTemplateMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateMarketCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to create a new Template Market Group. Only one template Market Group can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketGroup</p>
     * Create Market Group Template
     */
    async postTemplateMarketGroupRaw(requestParameters: PostTemplateMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
            throw new runtime.RequiredError('marketGroupCode','Required parameter requestParameters.marketGroupCode was null or undefined when calling postTemplateMarketGroup.');
        }
        
        if (requestParameters.templateMarketGroupCriteria === null || requestParameters.templateMarketGroupCriteria === undefined) {
            throw new runtime.RequiredError('templateMarketGroupCriteria','Required parameter requestParameters.templateMarketGroupCriteria was null or undefined when calling postTemplateMarketGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketGroupTemplate/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateMarketGroupCriteriaToJSON(requestParameters.templateMarketGroupCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to create a new Template Market Group. Only one template Market Group can be Use this API to created at a time. <p><strong>OperationId:</strong>postTemplateMarketGroup</p>
     * Create Market Group Template
     */
    async postTemplateMarketGroup(requestParameters: PostTemplateMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateMarketGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Template Source Code. Only one template Source Code can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceCode</p>
     * Create a Template Source Code
     */
    async postTemplateSourceCodeRaw(requestParameters: PostTemplateSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateSourceCodeCriteria === null || requestParameters.templateSourceCodeCriteria === undefined) {
            throw new runtime.RequiredError('templateSourceCodeCriteria','Required parameter requestParameters.templateSourceCodeCriteria was null or undefined when calling postTemplateSourceCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateSourceCodeCriteriaToJSON(requestParameters.templateSourceCodeCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Template Source Code. Only one template Source Code can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceCode</p>
     * Create a Template Source Code
     */
    async postTemplateSourceCode(requestParameters: PostTemplateSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create a new Template Source Group. Only one template Source Group can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceGroup</p>
     * Create a Template Source Group
     */
    async postTemplateSourceGroupRaw(requestParameters: PostTemplateSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateSourceGroupCriteria === null || requestParameters.templateSourceGroupCriteria === undefined) {
            throw new runtime.RequiredError('templateSourceGroupCriteria','Required parameter requestParameters.templateSourceGroupCriteria was null or undefined when calling postTemplateSourceGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateSourceGroupCriteriaToJSON(requestParameters.templateSourceGroupCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create a new Template Source Group. Only one template Source Group can be created at a time. <p><strong>OperationId:</strong>postTemplateSourceGroup</p>
     * Create a Template Source Group
     */
    async postTemplateSourceGroup(requestParameters: PostTemplateSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateSourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete a Market Code . <p><strong>OperationId:</strong>removeMarketCode</p>
     * Delete a Market Code 
     */
    async removeMarketCodeRaw(requestParameters: RemoveMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
            throw new runtime.RequiredError('marketcode','Required parameter requestParameters.marketcode was null or undefined when calling removeMarketCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeMarketCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketCodes/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete a Market Code . <p><strong>OperationId:</strong>removeMarketCode</p>
     * Delete a Market Code 
     */
    async removeMarketCode(requestParameters: RemoveMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMarketCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete a Market Group . <p><strong>OperationId:</strong>removeMarketGroup</p>
     * Delete a Market Group 
     */
    async removeMarketGroupRaw(requestParameters: RemoveMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
            throw new runtime.RequiredError('marketGroupCode','Required parameter requestParameters.marketGroupCode was null or undefined when calling removeMarketGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeMarketGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/marketGroups/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete a Market Group . <p><strong>OperationId:</strong>removeMarketGroup</p>
     * Delete a Market Group 
     */
    async removeMarketGroup(requestParameters: RemoveMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeMarketGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Pre Check In rules. <p><strong>OperationId:</strong>removePreCheckInRules</p>
     * Delete Pre Check In rules
     */
    async removePreCheckInRulesRaw(requestParameters: RemovePreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removePreCheckInRules.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.ruleType) {
            queryParameters['ruleType'] = requestParameters.ruleType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.newStartDate !== undefined) {
            queryParameters['newStartDate'] = requestParameters.newStartDate;
        }

        if (requestParameters.newEndDate !== undefined) {
            queryParameters['newEndDate'] = requestParameters.newEndDate;
        }

        if (requestParameters.newDuration !== undefined) {
            queryParameters['newDuration'] = requestParameters.newDuration;
        }

        if (requestParameters.level) {
            queryParameters['level'] = requestParameters.level;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.specialsCodes) {
            queryParameters['specialsCodes'] = requestParameters.specialsCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        if (requestParameters.absoluteFlag !== undefined) {
            queryParameters['absoluteFlag'] = requestParameters.absoluteFlag;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.daysBeforeArrival !== undefined) {
            queryParameters['daysBeforeArrival'] = requestParameters.daysBeforeArrival;
        }

        if (requestParameters.daysAfterBooking !== undefined) {
            queryParameters['daysAfterBooking'] = requestParameters.daysAfterBooking;
        }

        if (requestParameters.hoursPriorToCheckIn !== undefined) {
            queryParameters['hoursPriorToCheckIn'] = requestParameters.hoursPriorToCheckIn;
        }

        if (requestParameters.hoursPostCheckIn !== undefined) {
            queryParameters['hoursPostCheckIn'] = requestParameters.hoursPostCheckIn;
        }

        if (requestParameters.ratePlansCodes) {
            queryParameters['ratePlansCodes'] = requestParameters.ratePlansCodes;
        }

        if (requestParameters.reservationTypesCodes) {
            queryParameters['reservationTypesCodes'] = requestParameters.reservationTypesCodes;
        }

        if (requestParameters.vIPCodes) {
            queryParameters['vIPCodes'] = requestParameters.vIPCodes;
        }

        if (requestParameters.originCodes) {
            queryParameters['originCodes'] = requestParameters.originCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/precheckinRules`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Pre Check In rules. <p><strong>OperationId:</strong>removePreCheckInRules</p>
     * Delete Pre Check In rules
     */
    async removePreCheckInRules(requestParameters: RemovePreCheckInRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removePreCheckInRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Service Request Code Priorities. <p><strong>OperationId:</strong>removeServiceRequestCodePriorities</p>
     * Delete Service Request Code Priorities
     */
    async removeServiceRequestCodePrioritiesRaw(requestParameters: RemoveServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.serviceRequestCode === null || requestParameters.serviceRequestCode === undefined) {
            throw new runtime.RequiredError('serviceRequestCode','Required parameter requestParameters.serviceRequestCode was null or undefined when calling removeServiceRequestCodePriorities.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeServiceRequestCodePriorities.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes/{serviceRequestCode}/priorities`.replace(`{${"serviceRequestCode"}}`, encodeURIComponent(String(requestParameters.serviceRequestCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Service Request Code Priorities. <p><strong>OperationId:</strong>removeServiceRequestCodePriorities</p>
     * Delete Service Request Code Priorities
     */
    async removeServiceRequestCodePriorities(requestParameters: RemoveServiceRequestCodePrioritiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeServiceRequestCodePrioritiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete configuration service request codes. <p><strong>OperationId:</strong>removeServiceRequestCodes</p>
     * Delete configuration service request codes
     */
    async removeServiceRequestCodesRaw(requestParameters: RemoveServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeServiceRequestCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.serviceRequestCode) {
            queryParameters['serviceRequestCode'] = requestParameters.serviceRequestCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/serviceRequestCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete configuration service request codes. <p><strong>OperationId:</strong>removeServiceRequestCodes</p>
     * Delete configuration service request codes
     */
    async removeServiceRequestCodes(requestParameters: RemoveServiceRequestCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeServiceRequestCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to remove a Source Code. Only one Source Code can be Use this API to removed at a time. <p><strong>OperationId:</strong>removeSourceCode</p>
     * Delete a Source Code
     */
    async removeSourceCodeRaw(requestParameters: RemoveSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
            throw new runtime.RequiredError('sourceCode','Required parameter requestParameters.sourceCode was null or undefined when calling removeSourceCode.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeSourceCode.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to remove a Source Code. Only one Source Code can be Use this API to removed at a time. <p><strong>OperationId:</strong>removeSourceCode</p>
     * Delete a Source Code
     */
    async removeSourceCode(requestParameters: RemoveSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete a Source Group.  Only one Source Group can be Use this API to deleted at a time. <p><strong>OperationId:</strong>removeSourceGroup</p>
     * Delete a Source Group
     */
    async removeSourceGroupRaw(requestParameters: RemoveSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceGroupCode === null || requestParameters.sourceGroupCode === undefined) {
            throw new runtime.RequiredError('sourceGroupCode','Required parameter requestParameters.sourceGroupCode was null or undefined when calling removeSourceGroup.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeSourceGroup.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/sourceGroups/{sourceGroupCode}`.replace(`{${"sourceGroupCode"}}`, encodeURIComponent(String(requestParameters.sourceGroupCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete a Source Group.  Only one Source Group can be Use this API to deleted at a time. <p><strong>OperationId:</strong>removeSourceGroup</p>
     * Delete a Source Group
     */
    async removeSourceGroup(requestParameters: RemoveSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeSourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is used to  delete a Template Market Code. . <p><strong>OperationId:</strong>removeTemplateMarketCode</p>
     * Delete a Market Code Template
     */
    async removeTemplateMarketCodeRaw(requestParameters: RemoveTemplateMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketcode === null || requestParameters.marketcode === undefined) {
            throw new runtime.RequiredError('marketcode','Required parameter requestParameters.marketcode was null or undefined when calling removeTemplateMarketCode.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.templateMarketCode !== undefined) {
            queryParameters['templateMarketCode'] = requestParameters.templateMarketCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketCodeTemplates/{marketcode}`.replace(`{${"marketcode"}}`, encodeURIComponent(String(requestParameters.marketcode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API is used to  delete a Template Market Code. . <p><strong>OperationId:</strong>removeTemplateMarketCode</p>
     * Delete a Market Code Template
     */
    async removeTemplateMarketCode(requestParameters: RemoveTemplateMarketCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateMarketCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete a template Market Group. <p><strong>OperationId:</strong>removeTemplateMarketGroup</p>
     * Delete market Group Template
     */
    async removeTemplateMarketGroupRaw(requestParameters: RemoveTemplateMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.marketGroupCode === null || requestParameters.marketGroupCode === undefined) {
            throw new runtime.RequiredError('marketGroupCode','Required parameter requestParameters.marketGroupCode was null or undefined when calling removeTemplateMarketGroup.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.templateMarketGroup !== undefined) {
            queryParameters['templateMarketGroup'] = requestParameters.templateMarketGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/marketGroupTemplate/{marketGroupCode}`.replace(`{${"marketGroupCode"}}`, encodeURIComponent(String(requestParameters.marketGroupCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete a template Market Group. <p><strong>OperationId:</strong>removeTemplateMarketGroup</p>
     * Delete market Group Template
     */
    async removeTemplateMarketGroup(requestParameters: RemoveTemplateMarketGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateMarketGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to remove a Template Source Code. <p><strong>OperationId:</strong>removeTemplateSourceCode</p>
     * Delete a Template Source Code
     */
    async removeTemplateSourceCodeRaw(requestParameters: RemoveTemplateSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceCode === null || requestParameters.sourceCode === undefined) {
            throw new runtime.RequiredError('sourceCode','Required parameter requestParameters.sourceCode was null or undefined when calling removeTemplateSourceCode.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.templateSourceCode !== undefined) {
            queryParameters['templateSourceCode'] = requestParameters.templateSourceCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceCodes/{sourceCode}`.replace(`{${"sourceCode"}}`, encodeURIComponent(String(requestParameters.sourceCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  Use this API to remove a Template Source Code. <p><strong>OperationId:</strong>removeTemplateSourceCode</p>
     * Delete a Template Source Code
     */
    async removeTemplateSourceCode(requestParameters: RemoveTemplateSourceCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateSourceCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to remove a Template Source Group. <p><strong>OperationId:</strong>removeTemplateSourceGroup</p>
     * Delete a Template Source Group
     */
    async removeTemplateSourceGroupRaw(requestParameters: RemoveTemplateSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.templateSourceGroup !== undefined) {
            queryParameters['templateSourceGroup'] = requestParameters.templateSourceGroup;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/templates/sourceGroups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  Use this API to remove a Template Source Group. <p><strong>OperationId:</strong>removeTemplateSourceGroup</p>
     * Delete a Template Source Group
     */
    async removeTemplateSourceGroup(requestParameters: RemoveTemplateSourceGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateSourceGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetPolicySchedulesPolicyTypeEnum = {
    Deposit: 'Deposit',
    Cancellation: 'Cancellation'
} as const;
export type GetPolicySchedulesPolicyTypeEnum = typeof GetPolicySchedulesPolicyTypeEnum[keyof typeof GetPolicySchedulesPolicyTypeEnum];
/**
 * @export
 */
export const GetPreCheckInRulesRuleTypeEnum = {
    Specials: 'Specials',
    MarketCodes: 'MarketCodes',
    TimeLimit: 'TimeLimit',
    RatePlans: 'RatePlans',
    ReservationTypes: 'ReservationTypes',
    VipCodes: 'VIPCodes',
    Memberships: 'Memberships',
    OriginCodes: 'OriginCodes'
} as const;
export type GetPreCheckInRulesRuleTypeEnum = typeof GetPreCheckInRulesRuleTypeEnum[keyof typeof GetPreCheckInRulesRuleTypeEnum];
/**
 * @export
 */
export const RemovePreCheckInRulesRuleTypeEnum = {
    Specials: 'Specials',
    MarketCodes: 'MarketCodes',
    TimeLimit: 'TimeLimit',
    RatePlans: 'RatePlans',
    ReservationTypes: 'ReservationTypes',
    VipCodes: 'VIPCodes',
    Memberships: 'Memberships',
    OriginCodes: 'OriginCodes'
} as const;
export type RemovePreCheckInRulesRuleTypeEnum = typeof RemovePreCheckInRulesRuleTypeEnum[keyof typeof RemovePreCheckInRulesRuleTypeEnum];
