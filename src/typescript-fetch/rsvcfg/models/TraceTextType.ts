/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Type provides trace text information.
 * @export
 * @interface TraceTextType
 */
export interface TraceTextType {
    /**
     * Determines whether this trace text can be deleted.
     * @type {boolean}
     * @memberof TraceTextType
     */
    canDelete?: boolean;
    /**
     * Department Code where the trace text belongs to.
     * @type {string}
     * @memberof TraceTextType
     */
    departmentCode?: string;
    /**
     * Display Sequence for the trace text.
     * @type {number}
     * @memberof TraceTextType
     */
    displaySequence?: number;
    /**
     * Property Code where the trace text belongs to.
     * @type {string}
     * @memberof TraceTextType
     */
    hotelId?: string;
    /**
     * Trace text value.
     * @type {string}
     * @memberof TraceTextType
     */
    traceText?: string;
}

/**
 * Check if a given object implements the TraceTextType interface.
 */
export function instanceOfTraceTextType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TraceTextTypeFromJSON(json: any): TraceTextType {
    return TraceTextTypeFromJSONTyped(json, false);
}

export function TraceTextTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceTextType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'canDelete': !exists(json, 'canDelete') ? undefined : json['canDelete'],
        'departmentCode': !exists(json, 'departmentCode') ? undefined : json['departmentCode'],
        'displaySequence': !exists(json, 'displaySequence') ? undefined : json['displaySequence'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'traceText': !exists(json, 'traceText') ? undefined : json['traceText'],
    };
}

export function TraceTextTypeToJSON(value?: TraceTextType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'canDelete': value.canDelete,
        'departmentCode': value.departmentCode,
        'displaySequence': value.displaySequence,
        'hotelId': value.hotelId,
        'traceText': value.traceText,
    };
}

