/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Service request code details.
 * @export
 * @interface ServiceRequestCodeType
 */
export interface ServiceRequestCodeType {
    /**
     * Hotel code for the service request
     * @type {string}
     * @memberof ServiceRequestCodeType
     */
    hotelId?: string;
    /**
     * Code for the service request
     * @type {string}
     * @memberof ServiceRequestCodeType
     */
    code?: string;
    /**
     * Description for the service request
     * @type {string}
     * @memberof ServiceRequestCodeType
     */
    description?: string;
    /**
     * Department code for the service request
     * @type {string}
     * @memberof ServiceRequestCodeType
     */
    deptCode?: string;
    /**
     * Tells service request is active or not
     * @type {boolean}
     * @memberof ServiceRequestCodeType
     */
    inactive?: boolean;
    /**
     * Service request is editable or not.
     * @type {boolean}
     * @memberof ServiceRequestCodeType
     */
    editable?: boolean;
}

/**
 * Check if a given object implements the ServiceRequestCodeType interface.
 */
export function instanceOfServiceRequestCodeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ServiceRequestCodeTypeFromJSON(json: any): ServiceRequestCodeType {
    return ServiceRequestCodeTypeFromJSONTyped(json, false);
}

export function ServiceRequestCodeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServiceRequestCodeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'deptCode': !exists(json, 'deptCode') ? undefined : json['deptCode'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
        'editable': !exists(json, 'editable') ? undefined : json['editable'],
    };
}

export function ServiceRequestCodeTypeToJSON(value?: ServiceRequestCodeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'code': value.code,
        'description': value.description,
        'deptCode': value.deptCode,
        'inactive': value.inactive,
        'editable': value.editable,
    };
}

