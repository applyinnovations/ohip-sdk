/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScriptLocationType } from './ScriptLocationType';
import {
    ScriptLocationTypeFromJSON,
    ScriptLocationTypeFromJSONTyped,
    ScriptLocationTypeToJSON,
} from './ScriptLocationType';

/**
 * Collection of locations where a Script is to be used.
 * @export
 * @interface ScriptLocationsType
 */
export interface ScriptLocationsType {
    /**
     * Location where a Script is to be used.
     * @type {Array<ScriptLocationType>}
     * @memberof ScriptLocationsType
     */
    cROs?: Array<ScriptLocationType>;
    /**
     * Location where a Script is to be used..
     * @type {Array<ScriptLocationType>}
     * @memberof ScriptLocationsType
     */
    chains?: Array<ScriptLocationType>;
    /**
     * Location where a Script is to be used.
     * @type {Array<ScriptLocationType>}
     * @memberof ScriptLocationsType
     */
    hotels?: Array<ScriptLocationType>;
}

/**
 * Check if a given object implements the ScriptLocationsType interface.
 */
export function instanceOfScriptLocationsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScriptLocationsTypeFromJSON(json: any): ScriptLocationsType {
    return ScriptLocationsTypeFromJSONTyped(json, false);
}

export function ScriptLocationsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScriptLocationsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cROs': !exists(json, 'cROs') ? undefined : ((json['cROs'] as Array<any>).map(ScriptLocationTypeFromJSON)),
        'chains': !exists(json, 'chains') ? undefined : ((json['chains'] as Array<any>).map(ScriptLocationTypeFromJSON)),
        'hotels': !exists(json, 'hotels') ? undefined : ((json['hotels'] as Array<any>).map(ScriptLocationTypeFromJSON)),
    };
}

export function ScriptLocationsTypeToJSON(value?: ScriptLocationsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cROs': value.cROs === undefined ? undefined : ((value.cROs as Array<any>).map(ScriptLocationTypeToJSON)),
        'chains': value.chains === undefined ? undefined : ((value.chains as Array<any>).map(ScriptLocationTypeToJSON)),
        'hotels': value.hotels === undefined ? undefined : ((value.hotels as Array<any>).map(ScriptLocationTypeToJSON)),
    };
}

