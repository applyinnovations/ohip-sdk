/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttachElementsType } from './AttachElementsType';
import {
    AttachElementsTypeFromJSON,
    AttachElementsTypeFromJSONTyped,
    AttachElementsTypeToJSON,
} from './AttachElementsType';
import type { ResvAutoAttchBasedOn } from './ResvAutoAttchBasedOn';
import {
    ResvAutoAttchBasedOnFromJSON,
    ResvAutoAttchBasedOnFromJSONTyped,
    ResvAutoAttchBasedOnToJSON,
} from './ResvAutoAttchBasedOn';

/**
 * Auto attachment rule details.
 * @export
 * @interface AutoAttachRuleType
 */
export interface AutoAttachRuleType {
    /**
     * 
     * @type {AttachElementsType}
     * @memberof AutoAttachRuleType
     */
    attachElements?: AttachElementsType;
    /**
     * 
     * @type {ResvAutoAttchBasedOn}
     * @memberof AutoAttachRuleType
     */
    basedOn?: ResvAutoAttchBasedOn;
    /**
     * The name of the rule.
     * @type {string}
     * @memberof AutoAttachRuleType
     */
    code?: string;
    /**
     * The property in which the rule code belongs to.
     * @type {string}
     * @memberof AutoAttachRuleType
     */
    hotelId?: string;
    /**
     * Indicates whether the rule is active or not.
     * @type {boolean}
     * @memberof AutoAttachRuleType
     */
    inactive?: boolean;
}

/**
 * Check if a given object implements the AutoAttachRuleType interface.
 */
export function instanceOfAutoAttachRuleType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AutoAttachRuleTypeFromJSON(json: any): AutoAttachRuleType {
    return AutoAttachRuleTypeFromJSONTyped(json, false);
}

export function AutoAttachRuleTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AutoAttachRuleType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attachElements': !exists(json, 'attachElements') ? undefined : AttachElementsTypeFromJSON(json['attachElements']),
        'basedOn': !exists(json, 'basedOn') ? undefined : ResvAutoAttchBasedOnFromJSON(json['basedOn']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
    };
}

export function AutoAttachRuleTypeToJSON(value?: AutoAttachRuleType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attachElements': AttachElementsTypeToJSON(value.attachElements),
        'basedOn': ResvAutoAttchBasedOnToJSON(value.basedOn),
        'code': value.code,
        'hotelId': value.hotelId,
        'inactive': value.inactive,
    };
}

