/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MergeCodeType } from './MergeCodeType';
import {
    MergeCodeTypeFromJSON,
    MergeCodeTypeFromJSONTyped,
    MergeCodeTypeToJSON,
} from './MergeCodeType';
import type { ScriptLocationsType } from './ScriptLocationsType';
import {
    ScriptLocationsTypeFromJSON,
    ScriptLocationsTypeFromJSONTyped,
    ScriptLocationsTypeToJSON,
} from './ScriptLocationsType';
import type { ScriptTypeType } from './ScriptTypeType';
import {
    ScriptTypeTypeFromJSON,
    ScriptTypeTypeFromJSONTyped,
    ScriptTypeTypeToJSON,
} from './ScriptTypeType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * A Script associated to either Chain, CRO or Property and to a Language and/or Membership Type.
 * @export
 * @interface ScriptType
 */
export interface ScriptType {
    /**
     * Language identification.
     * @type {string}
     * @memberof ScriptType
     */
    language?: string;
    /**
     * 
     * @type {ScriptLocationsType}
     * @memberof ScriptType
     */
    locations?: ScriptLocationsType;
    /**
     * Membership Type the script belonged to.
     * @type {string}
     * @memberof ScriptType
     */
    membershipType?: string;
    /**
     * A Merge Code.
     * @type {Array<MergeCodeType>}
     * @memberof ScriptType
     */
    mergeCodes?: Array<MergeCodeType>;
    /**
     * Script.
     * @type {string}
     * @memberof ScriptType
     */
    script?: string;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ScriptType
     */
    scriptId?: UniqueIDType;
    /**
     * 
     * @type {ScriptTypeType}
     * @memberof ScriptType
     */
    type?: ScriptTypeType;
}

/**
 * Check if a given object implements the ScriptType interface.
 */
export function instanceOfScriptType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ScriptTypeFromJSON(json: any): ScriptType {
    return ScriptTypeFromJSONTyped(json, false);
}

export function ScriptTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScriptType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'language': !exists(json, 'language') ? undefined : json['language'],
        'locations': !exists(json, 'locations') ? undefined : ScriptLocationsTypeFromJSON(json['locations']),
        'membershipType': !exists(json, 'membershipType') ? undefined : json['membershipType'],
        'mergeCodes': !exists(json, 'mergeCodes') ? undefined : ((json['mergeCodes'] as Array<any>).map(MergeCodeTypeFromJSON)),
        'script': !exists(json, 'script') ? undefined : json['script'],
        'scriptId': !exists(json, 'scriptId') ? undefined : UniqueIDTypeFromJSON(json['scriptId']),
        'type': !exists(json, 'type') ? undefined : ScriptTypeTypeFromJSON(json['type']),
    };
}

export function ScriptTypeToJSON(value?: ScriptType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'language': value.language,
        'locations': ScriptLocationsTypeToJSON(value.locations),
        'membershipType': value.membershipType,
        'mergeCodes': value.mergeCodes === undefined ? undefined : ((value.mergeCodes as Array<any>).map(MergeCodeTypeToJSON)),
        'script': value.script,
        'scriptId': UniqueIDTypeToJSON(value.scriptId),
        'type': ScriptTypeTypeToJSON(value.type),
    };
}

