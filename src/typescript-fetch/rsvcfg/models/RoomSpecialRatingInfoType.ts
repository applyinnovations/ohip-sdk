/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CodeDescriptionType } from './CodeDescriptionType';
import {
    CodeDescriptionTypeFromJSON,
    CodeDescriptionTypeFromJSONTyped,
    CodeDescriptionTypeToJSON,
} from './CodeDescriptionType';
import type { RoomSpecialRatingType } from './RoomSpecialRatingType';
import {
    RoomSpecialRatingTypeFromJSON,
    RoomSpecialRatingTypeFromJSONTyped,
    RoomSpecialRatingTypeToJSON,
} from './RoomSpecialRatingType';

/**
 * Rating details for room Specials.
 * @export
 * @interface RoomSpecialRatingInfoType
 */
export interface RoomSpecialRatingInfoType {
    /**
     * Property code of the room Special.
     * @type {string}
     * @memberof RoomSpecialRatingInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {RoomSpecialRatingType}
     * @memberof RoomSpecialRatingInfoType
     */
    rating?: RoomSpecialRatingType;
    /**
     * 
     * @type {CodeDescriptionType}
     * @memberof RoomSpecialRatingInfoType
     */
    roomSpecial?: CodeDescriptionType;
}

/**
 * Check if a given object implements the RoomSpecialRatingInfoType interface.
 */
export function instanceOfRoomSpecialRatingInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomSpecialRatingInfoTypeFromJSON(json: any): RoomSpecialRatingInfoType {
    return RoomSpecialRatingInfoTypeFromJSONTyped(json, false);
}

export function RoomSpecialRatingInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomSpecialRatingInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'rating': !exists(json, 'rating') ? undefined : RoomSpecialRatingTypeFromJSON(json['rating']),
        'roomSpecial': !exists(json, 'roomSpecial') ? undefined : CodeDescriptionTypeFromJSON(json['roomSpecial']),
    };
}

export function RoomSpecialRatingInfoTypeToJSON(value?: RoomSpecialRatingInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'rating': RoomSpecialRatingTypeToJSON(value.rating),
        'roomSpecial': CodeDescriptionTypeToJSON(value.roomSpecial),
    };
}

