/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Global Alert Notification type for Screen, Print, email and text
 * @export
 * @interface NotificationType
 */
export interface NotificationType {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationType
     */
    screen?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationType
     */
    print?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationType
     */
    printerName?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationType
     */
    reportName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationType
     */
    email?: boolean;
    /**
     * 
     * @type {string}
     * @memberof NotificationType
     */
    emailAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationType
     */
    department?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationType
     */
    textMessage?: boolean;
    /**
     * Phone number
     * @type {string}
     * @memberof NotificationType
     */
    phoneNumber?: string;
}

/**
 * Check if a given object implements the NotificationType interface.
 */
export function instanceOfNotificationType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NotificationTypeFromJSON(json: any): NotificationType {
    return NotificationTypeFromJSONTyped(json, false);
}

export function NotificationTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'screen': !exists(json, 'screen') ? undefined : json['screen'],
        'print': !exists(json, 'print') ? undefined : json['print'],
        'printerName': !exists(json, 'printerName') ? undefined : json['printerName'],
        'reportName': !exists(json, 'reportName') ? undefined : json['reportName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'emailAddress': !exists(json, 'emailAddress') ? undefined : json['emailAddress'],
        'department': !exists(json, 'department') ? undefined : json['department'],
        'textMessage': !exists(json, 'textMessage') ? undefined : json['textMessage'],
        'phoneNumber': !exists(json, 'phoneNumber') ? undefined : json['phoneNumber'],
    };
}

export function NotificationTypeToJSON(value?: NotificationType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'screen': value.screen,
        'print': value.print,
        'printerName': value.printerName,
        'reportName': value.reportName,
        'email': value.email,
        'emailAddress': value.emailAddress,
        'department': value.department,
        'textMessage': value.textMessage,
        'phoneNumber': value.phoneNumber,
    };
}

