/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OffsetUnitType } from './OffsetUnitType';
import {
    OffsetUnitTypeFromJSON,
    OffsetUnitTypeFromJSONTyped,
    OffsetUnitTypeToJSON,
} from './OffsetUnitType';
import type { PolicyAmountPercentType } from './PolicyAmountPercentType';
import {
    PolicyAmountPercentTypeFromJSON,
    PolicyAmountPercentTypeFromJSONTyped,
    PolicyAmountPercentTypeToJSON,
} from './PolicyAmountPercentType';
import type { PolicyDeadlineType } from './PolicyDeadlineType';
import {
    PolicyDeadlineTypeFromJSON,
    PolicyDeadlineTypeFromJSONTyped,
    PolicyDeadlineTypeToJSON,
} from './PolicyDeadlineType';

/**
 * The CancelPenalty class defines the cancellation policy of the hotel facility.
 * @export
 * @interface ConfigCancelPenaltyType
 */
export interface ConfigCancelPenaltyType {
    /**
     * 
     * @type {PolicyDeadlineType}
     * @memberof ConfigCancelPenaltyType
     */
    deadline?: PolicyDeadlineType;
    /**
     * 
     * @type {PolicyAmountPercentType}
     * @memberof ConfigCancelPenaltyType
     */
    amountPercent?: PolicyAmountPercentType;
    /**
     * Text description of the Penalty in a given language.
     * @type {string}
     * @memberof ConfigCancelPenaltyType
     */
    penaltyDescription?: string;
    /**
     * 
     * @type {OffsetUnitType}
     * @memberof ConfigCancelPenaltyType
     */
    offsetUnit?: OffsetUnitType;
    /**
     * Formatted Text Rule of the Cancellation Penalty.
     * @type {string}
     * @memberof ConfigCancelPenaltyType
     */
    formattedRule?: string;
    /**
     * Policy Code.
     * @type {string}
     * @memberof ConfigCancelPenaltyType
     */
    policyCode?: string;
    /**
     * Flag to indicate if the cancellation policy is manual.
     * @type {boolean}
     * @memberof ConfigCancelPenaltyType
     */
    manual?: boolean;
    /**
     * Indicates if the amount is refundable if booking is canceled.
     * @type {boolean}
     * @memberof ConfigCancelPenaltyType
     */
    nonRefundable?: boolean;
    /**
     * The sequence number that determines the position of this rule in the Deposit or Cancellation rules LOV.
     * @type {number}
     * @memberof ConfigCancelPenaltyType
     */
    sequence?: number;
    /**
     * Inactive rules are no longer available for attachment to rate codes, reservation types or reservations; however, they are still recorded in the database for historical purposes.
     * @type {boolean}
     * @memberof ConfigCancelPenaltyType
     */
    inactive?: boolean;
}

/**
 * Check if a given object implements the ConfigCancelPenaltyType interface.
 */
export function instanceOfConfigCancelPenaltyType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigCancelPenaltyTypeFromJSON(json: any): ConfigCancelPenaltyType {
    return ConfigCancelPenaltyTypeFromJSONTyped(json, false);
}

export function ConfigCancelPenaltyTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigCancelPenaltyType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'deadline': !exists(json, 'deadline') ? undefined : PolicyDeadlineTypeFromJSON(json['deadline']),
        'amountPercent': !exists(json, 'amountPercent') ? undefined : PolicyAmountPercentTypeFromJSON(json['amountPercent']),
        'penaltyDescription': !exists(json, 'penaltyDescription') ? undefined : json['penaltyDescription'],
        'offsetUnit': !exists(json, 'offsetUnit') ? undefined : OffsetUnitTypeFromJSON(json['offsetUnit']),
        'formattedRule': !exists(json, 'formattedRule') ? undefined : json['formattedRule'],
        'policyCode': !exists(json, 'policyCode') ? undefined : json['policyCode'],
        'manual': !exists(json, 'manual') ? undefined : json['manual'],
        'nonRefundable': !exists(json, 'nonRefundable') ? undefined : json['nonRefundable'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'inactive': !exists(json, 'inactive') ? undefined : json['inactive'],
    };
}

export function ConfigCancelPenaltyTypeToJSON(value?: ConfigCancelPenaltyType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'deadline': PolicyDeadlineTypeToJSON(value.deadline),
        'amountPercent': PolicyAmountPercentTypeToJSON(value.amountPercent),
        'penaltyDescription': value.penaltyDescription,
        'offsetUnit': OffsetUnitTypeToJSON(value.offsetUnit),
        'formattedRule': value.formattedRule,
        'policyCode': value.policyCode,
        'manual': value.manual,
        'nonRefundable': value.nonRefundable,
        'sequence': value.sequence,
        'inactive': value.inactive,
    };
}

