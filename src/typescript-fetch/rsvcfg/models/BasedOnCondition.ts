/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConditionGroupType } from './ConditionGroupType';
import {
    ConditionGroupTypeFromJSON,
    ConditionGroupTypeFromJSONTyped,
    ConditionGroupTypeToJSON,
} from './ConditionGroupType';

/**
 * Auto attach based advanced query filter.
 * @export
 * @interface BasedOnCondition
 */
export interface BasedOnCondition {
    /**
     * The query ID that is used to filter condition.
     * @type {number}
     * @memberof BasedOnCondition
     */
    queryId?: number;
    /**
     * 
     * @type {ConditionGroupType}
     * @memberof BasedOnCondition
     */
    conditions?: ConditionGroupType;
}

/**
 * Check if a given object implements the BasedOnCondition interface.
 */
export function instanceOfBasedOnCondition(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BasedOnConditionFromJSON(json: any): BasedOnCondition {
    return BasedOnConditionFromJSONTyped(json, false);
}

export function BasedOnConditionFromJSONTyped(json: any, ignoreDiscriminator: boolean): BasedOnCondition {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'queryId': !exists(json, 'queryId') ? undefined : json['queryId'],
        'conditions': !exists(json, 'conditions') ? undefined : ConditionGroupTypeFromJSON(json['conditions']),
    };
}

export function BasedOnConditionToJSON(value?: BasedOnCondition | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'queryId': value.queryId,
        'conditions': ConditionGroupTypeToJSON(value.conditions),
    };
}

