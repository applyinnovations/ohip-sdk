/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConditionGroupType } from './ConditionGroupType';
import {
    ConditionGroupTypeFromJSON,
    ConditionGroupTypeFromJSONTyped,
    ConditionGroupTypeToJSON,
} from './ConditionGroupType';
import type { NotificationType } from './NotificationType';
import {
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
} from './NotificationType';

/**
 * A property level global alert attached with global alert types.
 * @export
 * @interface GlobalAlertType
 */
export interface GlobalAlertType {
    /**
     * 
     * @type {number}
     * @memberof GlobalAlertType
     */
    alertId?: number;
    /**
     * 
     * @type {string}
     * @memberof GlobalAlertType
     */
    hotelId?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalAlertType
     */
    alertCode?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalAlertType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof GlobalAlertType
     */
    area?: string;
    /**
     * 
     * @type {number}
     * @memberof GlobalAlertType
     */
    queryId?: number;
    /**
     * 
     * @type {NotificationType}
     * @memberof GlobalAlertType
     */
    notifications?: NotificationType;
    /**
     * 
     * @type {ConditionGroupType}
     * @memberof GlobalAlertType
     */
    conditions?: ConditionGroupType;
    /**
     * Determines the Global Alert is a Welcome Offer Alert or not.
     * @type {boolean}
     * @memberof GlobalAlertType
     */
    welcomeOffer?: boolean;
    /**
     * Indicates the Reservation Stop Check In/Check Out Global Alert.
     * @type {boolean}
     * @memberof GlobalAlertType
     */
    stopCheckInCheckOut?: boolean;
}

/**
 * Check if a given object implements the GlobalAlertType interface.
 */
export function instanceOfGlobalAlertType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GlobalAlertTypeFromJSON(json: any): GlobalAlertType {
    return GlobalAlertTypeFromJSONTyped(json, false);
}

export function GlobalAlertTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GlobalAlertType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'alertId': !exists(json, 'alertId') ? undefined : json['alertId'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'alertCode': !exists(json, 'alertCode') ? undefined : json['alertCode'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'area': !exists(json, 'area') ? undefined : json['area'],
        'queryId': !exists(json, 'queryId') ? undefined : json['queryId'],
        'notifications': !exists(json, 'notifications') ? undefined : NotificationTypeFromJSON(json['notifications']),
        'conditions': !exists(json, 'conditions') ? undefined : ConditionGroupTypeFromJSON(json['conditions']),
        'welcomeOffer': !exists(json, 'welcomeOffer') ? undefined : json['welcomeOffer'],
        'stopCheckInCheckOut': !exists(json, 'stopCheckInCheckOut') ? undefined : json['stopCheckInCheckOut'],
    };
}

export function GlobalAlertTypeToJSON(value?: GlobalAlertType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'alertId': value.alertId,
        'hotelId': value.hotelId,
        'alertCode': value.alertCode,
        'description': value.description,
        'area': value.area,
        'queryId': value.queryId,
        'notifications': NotificationTypeToJSON(value.notifications),
        'conditions': ConditionGroupTypeToJSON(value.conditions),
        'welcomeOffer': value.welcomeOffer,
        'stopCheckInCheckOut': value.stopCheckInCheckOut,
    };
}

