/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttachPreferenceType } from './AttachPreferenceType';
import {
    AttachPreferenceTypeFromJSON,
    AttachPreferenceTypeFromJSONTyped,
    AttachPreferenceTypeToJSON,
} from './AttachPreferenceType';
import type { BasedOnCondition } from './BasedOnCondition';
import {
    BasedOnConditionFromJSON,
    BasedOnConditionFromJSONTyped,
    BasedOnConditionToJSON,
} from './BasedOnCondition';
import type { BasedOnMembershipType } from './BasedOnMembershipType';
import {
    BasedOnMembershipTypeFromJSON,
    BasedOnMembershipTypeFromJSONTyped,
    BasedOnMembershipTypeToJSON,
} from './BasedOnMembershipType';
import type { ResvAutoAttchBasedOnCode } from './ResvAutoAttchBasedOnCode';
import {
    ResvAutoAttchBasedOnCodeFromJSON,
    ResvAutoAttchBasedOnCodeFromJSONTyped,
    ResvAutoAttchBasedOnCodeToJSON,
} from './ResvAutoAttchBasedOnCode';

/**
 * The Based On information for the rule.
 * @export
 * @interface ResvAutoAttchBasedOn
 */
export interface ResvAutoAttchBasedOn {
    /**
     * 
     * @type {BasedOnCondition}
     * @memberof ResvAutoAttchBasedOn
     */
    condition?: BasedOnCondition;
    /**
     * A positive numeric number, When the number of adults/children or a reservation equals or exceeds this value, then the items that were selected in the Associated Preferences will automatically be attached to the reservation.
     * @type {number}
     * @memberof ResvAutoAttchBasedOn
     */
    count?: number;
    /**
     * description.
     * @type {string}
     * @memberof ResvAutoAttchBasedOn
     */
    description?: string;
    /**
     * The Keyword attached in the profile,when a reservation is made by a profile that has the selected Keyword attached, then the items that were selected in the Associated Preferences will automatically be attached to the reservation.
     * @type {string}
     * @memberof ResvAutoAttchBasedOn
     */
    keywordType?: string;
    /**
     * 
     * @type {BasedOnMembershipType}
     * @memberof ResvAutoAttchBasedOn
     */
    membership?: BasedOnMembershipType;
    /**
     * 
     * @type {AttachPreferenceType}
     * @memberof ResvAutoAttchBasedOn
     */
    preference?: AttachPreferenceType;
    /**
     * Rate Code.
     * @type {string}
     * @memberof ResvAutoAttchBasedOn
     */
    ratePlanCode?: string;
    /**
     * Room type Code.
     * @type {string}
     * @memberof ResvAutoAttchBasedOn
     */
    roomType?: string;
    /**
     * 
     * @type {AttachPreferenceType}
     * @memberof ResvAutoAttchBasedOn
     */
    special?: AttachPreferenceType;
    /**
     * 
     * @type {ResvAutoAttchBasedOnCode}
     * @memberof ResvAutoAttchBasedOn
     */
    type?: ResvAutoAttchBasedOnCode;
    /**
     * The associated VIP Status.
     * @type {string}
     * @memberof ResvAutoAttchBasedOn
     */
    vipCode?: string;
}

/**
 * Check if a given object implements the ResvAutoAttchBasedOn interface.
 */
export function instanceOfResvAutoAttchBasedOn(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ResvAutoAttchBasedOnFromJSON(json: any): ResvAutoAttchBasedOn {
    return ResvAutoAttchBasedOnFromJSONTyped(json, false);
}

export function ResvAutoAttchBasedOnFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResvAutoAttchBasedOn {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'condition': !exists(json, 'condition') ? undefined : BasedOnConditionFromJSON(json['condition']),
        'count': !exists(json, 'count') ? undefined : json['count'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'keywordType': !exists(json, 'keywordType') ? undefined : json['keywordType'],
        'membership': !exists(json, 'membership') ? undefined : BasedOnMembershipTypeFromJSON(json['membership']),
        'preference': !exists(json, 'preference') ? undefined : AttachPreferenceTypeFromJSON(json['preference']),
        'ratePlanCode': !exists(json, 'ratePlanCode') ? undefined : json['ratePlanCode'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'special': !exists(json, 'special') ? undefined : AttachPreferenceTypeFromJSON(json['special']),
        'type': !exists(json, 'type') ? undefined : ResvAutoAttchBasedOnCodeFromJSON(json['type']),
        'vipCode': !exists(json, 'vipCode') ? undefined : json['vipCode'],
    };
}

export function ResvAutoAttchBasedOnToJSON(value?: ResvAutoAttchBasedOn | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'condition': BasedOnConditionToJSON(value.condition),
        'count': value.count,
        'description': value.description,
        'keywordType': value.keywordType,
        'membership': BasedOnMembershipTypeToJSON(value.membership),
        'preference': AttachPreferenceTypeToJSON(value.preference),
        'ratePlanCode': value.ratePlanCode,
        'roomType': value.roomType,
        'special': AttachPreferenceTypeToJSON(value.special),
        'type': ResvAutoAttchBasedOnCodeToJSON(value.type),
        'vipCode': value.vipCode,
    };
}

