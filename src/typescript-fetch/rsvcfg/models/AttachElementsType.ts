/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AttachPreferenceType } from './AttachPreferenceType';
import {
    AttachPreferenceTypeFromJSON,
    AttachPreferenceTypeFromJSONTyped,
    AttachPreferenceTypeToJSON,
} from './AttachPreferenceType';
import type { AttachTraceType } from './AttachTraceType';
import {
    AttachTraceTypeFromJSON,
    AttachTraceTypeFromJSONTyped,
    AttachTraceTypeToJSON,
} from './AttachTraceType';
import type { ResvAutoAttchTypeCode } from './ResvAutoAttchTypeCode';
import {
    ResvAutoAttchTypeCodeFromJSON,
    ResvAutoAttchTypeCodeFromJSONTyped,
    ResvAutoAttchTypeCodeToJSON,
} from './ResvAutoAttchTypeCode';

/**
 * Elements to be attached to the rule.
 * @export
 * @interface AttachElementsType
 */
export interface AttachElementsType {
    /**
     * Auto attach preference.
     * @type {Array<AttachPreferenceType>}
     * @memberof AttachElementsType
     */
    preference?: Array<AttachPreferenceType>;
    /**
     * 
     * @type {AttachTraceType}
     * @memberof AttachElementsType
     */
    trace?: AttachTraceType;
    /**
     * List of attached elements codes.
     * @type {Array<string>}
     * @memberof AttachElementsType
     */
    code?: Array<string>;
    /**
     * 
     * @type {ResvAutoAttchTypeCode}
     * @memberof AttachElementsType
     */
    type?: ResvAutoAttchTypeCode;
    /**
     * Auto attach rule type description.
     * @type {string}
     * @memberof AttachElementsType
     */
    description?: string;
}

/**
 * Check if a given object implements the AttachElementsType interface.
 */
export function instanceOfAttachElementsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AttachElementsTypeFromJSON(json: any): AttachElementsType {
    return AttachElementsTypeFromJSONTyped(json, false);
}

export function AttachElementsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AttachElementsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'preference': !exists(json, 'preference') ? undefined : ((json['preference'] as Array<any>).map(AttachPreferenceTypeFromJSON)),
        'trace': !exists(json, 'trace') ? undefined : AttachTraceTypeFromJSON(json['trace']),
        'code': !exists(json, 'code') ? undefined : json['code'],
        'type': !exists(json, 'type') ? undefined : ResvAutoAttchTypeCodeFromJSON(json['type']),
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function AttachElementsTypeToJSON(value?: AttachElementsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'preference': value.preference === undefined ? undefined : ((value.preference as Array<any>).map(AttachPreferenceTypeToJSON)),
        'trace': AttachTraceTypeToJSON(value.trace),
        'code': value.code,
        'type': ResvAutoAttchTypeCodeToJSON(value.type),
        'description': value.description,
    };
}

