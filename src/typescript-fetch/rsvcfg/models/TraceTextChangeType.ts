/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Reservation Master Data Management API
 * APIs to cater for Reservation Configuration in OPERA Cloud. In this module you can retrieve, create, modify or delete configuration related to Reservations, Blocks and Leisure Management.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TraceTextType } from './TraceTextType';
import {
    TraceTextTypeFromJSON,
    TraceTextTypeFromJSONTyped,
    TraceTextTypeToJSON,
} from './TraceTextType';

/**
 * Type provides trace text that will be modified.
 * @export
 * @interface TraceTextChangeType
 */
export interface TraceTextChangeType {
    /**
     * 
     * @type {TraceTextType}
     * @memberof TraceTextChangeType
     */
    originalTraceText?: TraceTextType;
    /**
     * 
     * @type {TraceTextType}
     * @memberof TraceTextChangeType
     */
    newTraceText?: TraceTextType;
}

/**
 * Check if a given object implements the TraceTextChangeType interface.
 */
export function instanceOfTraceTextChangeType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TraceTextChangeTypeFromJSON(json: any): TraceTextChangeType {
    return TraceTextChangeTypeFromJSONTyped(json, false);
}

export function TraceTextChangeTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TraceTextChangeType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'originalTraceText': !exists(json, 'originalTraceText') ? undefined : TraceTextTypeFromJSON(json['originalTraceText']),
        'newTraceText': !exists(json, 'newTraceText') ? undefined : TraceTextTypeFromJSON(json['newTraceText']),
    };
}

export function TraceTextChangeTypeToJSON(value?: TraceTextChangeType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'originalTraceText': TraceTextTypeToJSON(value.originalTraceText),
        'newTraceText': TraceTextTypeToJSON(value.newTraceText),
    };
}

