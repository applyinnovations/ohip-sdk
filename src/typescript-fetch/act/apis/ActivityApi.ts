/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ActivitiesInfo,
  Activity,
  ActivityAttachments,
  ActivityLog,
  ActivityStatistics,
  EmailsDetails,
  ExceptionDetailType,
  LinkedActivities,
  PostActivitiesRequest,
  PostMultipleActivitiesCompletionRequest,
  PostSingleActivityCompletionRequest,
  PutActivitiesRequest,
  RecentlyAccessedActivities,
  Status,
} from '../models/index';
import {
    ActivitiesInfoFromJSON,
    ActivitiesInfoToJSON,
    ActivityFromJSON,
    ActivityToJSON,
    ActivityAttachmentsFromJSON,
    ActivityAttachmentsToJSON,
    ActivityLogFromJSON,
    ActivityLogToJSON,
    ActivityStatisticsFromJSON,
    ActivityStatisticsToJSON,
    EmailsDetailsFromJSON,
    EmailsDetailsToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    LinkedActivitiesFromJSON,
    LinkedActivitiesToJSON,
    PostActivitiesRequestFromJSON,
    PostActivitiesRequestToJSON,
    PostMultipleActivitiesCompletionRequestFromJSON,
    PostMultipleActivitiesCompletionRequestToJSON,
    PostSingleActivityCompletionRequestFromJSON,
    PostSingleActivityCompletionRequestToJSON,
    PutActivitiesRequestFromJSON,
    PutActivitiesRequestToJSON,
    RecentlyAccessedActivitiesFromJSON,
    RecentlyAccessedActivitiesToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface DeleteActivitiesRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteActivitiesWithOutHotelIdRequest {
    activityId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteActivityAttachmentRequest {
    attachmentId: string;
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteActivityAttachmentWithoutHotelIdRequest {
    attachmentId: string;
    activityId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteMultipleActivitiesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activityIds?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivitiesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completed?: boolean;
    highPriority?: boolean;
    limit?: number;
    offset?: number;
    text?: string;
    hotelIds?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    ownerCode?: Array<string>;
    activityClass?: GetActivitiesActivityClassEnum;
    activityType?: Array<string>;
    activityPurpose?: string;
    accountId?: string;
    contactId?: string;
    blockId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivitiesByMultipleHotelIdsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    completed?: boolean;
    highPriority?: boolean;
    limit?: number;
    offset?: number;
    text?: string;
    hotelIds?: Array<string>;
    startDate?: Date;
    endDate?: Date;
    ownerCode?: Array<string>;
    activityClass?: GetActivitiesByMultipleHotelIdsActivityClassEnum;
    activityType?: Array<string>;
    activityPurpose?: string;
    accountId?: string;
    contactId?: string;
    blockId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetActivityFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityAttachmentsRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityLogRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    module?: GetActivityLogModuleEnum;
    moduleParamsParameterName?: Array<string>;
    moduleParamsParameterValue?: Array<string>;
    activityGroup?: string;
    activityType?: string;
    fromDate?: Date;
    toDate?: Date;
    searchText?: string;
    userByIdUserIds?: Array<number>;
    userForIdUserIds?: Array<number>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityStatisticsRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reportStartDate?: Date;
    activityTypeCodes?: Array<string>;
    ownerCodeList?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetActivityWithOutHotelIdRequest {
    activityId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInstructions?: Set<GetActivityWithOutHotelIdFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEmailsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    offset?: number;
    code?: Array<string>;
    id?: string;
    idExtension?: number;
    idContext?: string;
    type?: string;
    accountIdId?: string;
    accountIdIdExtension?: number;
    accountIdIdContext?: string;
    accountIdType?: string;
    contactIdId?: string;
    contactIdIdExtension?: number;
    contactIdIdContext?: string;
    contactIdType?: string;
    blockIdId?: string;
    blockIdIdExtension?: number;
    blockIdIdContext?: string;
    blockIdType?: string;
    emailSubject?: string;
    senderLastName?: string;
    senderFirstName?: string;
    senderEmailAddress?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRecentlyAccessedActivitiesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRecentlyAccessedActivitiesWithOutHotelIdRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostActivitiesOperationRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesInformation: PostActivitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostLinkedActivitiesRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    linkedActivities: LinkedActivities;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostMultipleActivitiesCompletionOperationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange: PostMultipleActivitiesCompletionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostSingleActivityCompletionOperationRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange: PostSingleActivityCompletionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutActivitiesOperationRequest {
    activityId: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    activitiesToChange: PutActivitiesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ActivityApi extends runtime.BaseAPI {

    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivities</p>
     * Delete activity in a hotel by ID
     */
    async deleteActivitiesRaw(requestParameters: DeleteActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling deleteActivities.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteActivities.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.activityIds) {
            queryParameters['activityIds'] = requestParameters.activityIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivities</p>
     * Delete activity in a hotel by ID
     */
    async deleteActivities(requestParameters: DeleteActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivitiesWithOutHotelId</p>
     * Delete activity  by ID
     */
    async deleteActivitiesWithOutHotelIdRaw(requestParameters: DeleteActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling deleteActivitiesWithOutHotelId.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.activityIds) {
            queryParameters['activityIds'] = requestParameters.activityIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivitiesWithOutHotelId</p>
     * Delete activity  by ID
     */
    async deleteActivitiesWithOutHotelId(requestParameters: DeleteActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivitiesWithOutHotelIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachment</p>
     * Delete an attachment from an Activity
     */
    async deleteActivityAttachmentRaw(requestParameters: DeleteActivityAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling deleteActivityAttachment.');
        }
        
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling deleteActivityAttachment.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteActivityAttachment.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/attachments/{attachmentId}`.replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachment</p>
     * Delete an attachment from an Activity
     */
    async deleteActivityAttachment(requestParameters: DeleteActivityAttachmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivityAttachmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachmentWithoutHotelId</p>
     * Delete an attachment from an Activity
     */
    async deleteActivityAttachmentWithoutHotelIdRaw(requestParameters: DeleteActivityAttachmentWithoutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.attachmentId === null || requestParameters.attachmentId === undefined) {
            throw new runtime.RequiredError('attachmentId','Required parameter requestParameters.attachmentId was null or undefined when calling deleteActivityAttachmentWithoutHotelId.');
        }
        
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling deleteActivityAttachmentWithoutHotelId.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/{activityId}/attachments/{attachmentId}`.replace(`{${"attachmentId"}}`, encodeURIComponent(String(requestParameters.attachmentId))).replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachmentWithoutHotelId</p>
     * Delete an attachment from an Activity
     */
    async deleteActivityAttachmentWithoutHotelId(requestParameters: DeleteActivityAttachmentWithoutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteActivityAttachmentWithoutHotelIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If you want to delete an activity, use this API.  You must know the activity ID for the request. <p><strong>OperationId:</strong>deleteMultipleActivities</p>
     * Delete activities
     */
    async deleteMultipleActivitiesRaw(requestParameters: DeleteMultipleActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.activityIds) {
            queryParameters['activityIds'] = requestParameters.activityIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * If you want to delete an activity, use this API.  You must know the activity ID for the request. <p><strong>OperationId:</strong>deleteMultipleActivities</p>
     * Delete activities
     */
    async deleteMultipleActivities(requestParameters: DeleteMultipleActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteMultipleActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve multiple Activities for a hotel, you can narrow the results using different search criteria  <p><strong>OperationId:</strong>getActivities</p>
     * Get activities by hotel
     */
    async getActivitiesRaw(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivitiesInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getActivities.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.completed !== undefined) {
            queryParameters['completed'] = requestParameters.completed;
        }

        if (requestParameters.highPriority !== undefined) {
            queryParameters['highPriority'] = requestParameters.highPriority;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.ownerCode) {
            queryParameters['ownerCode'] = requestParameters.ownerCode;
        }

        if (requestParameters.activityClass !== undefined) {
            queryParameters['activityClass'] = requestParameters.activityClass;
        }

        if (requestParameters.activityType) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.activityPurpose !== undefined) {
            queryParameters['activityPurpose'] = requestParameters.activityPurpose;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.contactId !== undefined) {
            queryParameters['contactId'] = requestParameters.contactId;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve multiple Activities for a hotel, you can narrow the results using different search criteria  <p><strong>OperationId:</strong>getActivities</p>
     * Get activities by hotel
     */
    async getActivities(requestParameters: GetActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivitiesInfo> {
        const response = await this.getActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve activities for multiple hotels.  Results can be narrowed down by your search criteria in the request message. <p><strong>OperationId:</strong>getActivitiesByMultipleHotelIds</p>
     * Get activities
     */
    async getActivitiesByMultipleHotelIdsRaw(requestParameters: GetActivitiesByMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivitiesInfo>> {
        const queryParameters: any = {};

        if (requestParameters.completed !== undefined) {
            queryParameters['completed'] = requestParameters.completed;
        }

        if (requestParameters.highPriority !== undefined) {
            queryParameters['highPriority'] = requestParameters.highPriority;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.text !== undefined) {
            queryParameters['text'] = requestParameters.text;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.ownerCode) {
            queryParameters['ownerCode'] = requestParameters.ownerCode;
        }

        if (requestParameters.activityClass !== undefined) {
            queryParameters['activityClass'] = requestParameters.activityClass;
        }

        if (requestParameters.activityType) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.activityPurpose !== undefined) {
            queryParameters['activityPurpose'] = requestParameters.activityPurpose;
        }

        if (requestParameters.accountId !== undefined) {
            queryParameters['accountId'] = requestParameters.accountId;
        }

        if (requestParameters.contactId !== undefined) {
            queryParameters['contactId'] = requestParameters.contactId;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesInfoFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve activities for multiple hotels.  Results can be narrowed down by your search criteria in the request message. <p><strong>OperationId:</strong>getActivitiesByMultipleHotelIds</p>
     * Get activities
     */
    async getActivitiesByMultipleHotelIds(requestParameters: GetActivitiesByMultipleHotelIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivitiesInfo> {
        const response = await this.getActivitiesByMultipleHotelIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve an Activity for a hotel, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivity</p>
     * Get activity in a hotel by ID
     */
    async getActivityRaw(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getActivity.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getActivity.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve an Activity for a hotel, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivity</p>
     * Get activity in a hotel by ID
     */
    async getActivity(requestParameters: GetActivityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.getActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API when you want to view the attachments on an existing activity. <p><strong>OperationId:</strong>getActivityAttachments</p>
     * Get Activity Attachments
     */
    async getActivityAttachmentsRaw(requestParameters: GetActivityAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityAttachments>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getActivityAttachments.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getActivityAttachments.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/attachments`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityAttachmentsFromJSON(jsonValue));
    }

    /**
     * You can use this API when you want to view the attachments on an existing activity. <p><strong>OperationId:</strong>getActivityAttachments</p>
     * Get Activity Attachments
     */
    async getActivityAttachments(requestParameters: GetActivityAttachmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityAttachments> {
        const response = await this.getActivityAttachmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to view the changes log for a specified Activity. <p><strong>OperationId:</strong>getActivityLog</p>
     * Get Activity Log
     */
    async getActivityLogRaw(requestParameters: GetActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityLog>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getActivityLog.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.module !== undefined) {
            queryParameters['module'] = requestParameters.module;
        }

        if (requestParameters.moduleParamsParameterName) {
            queryParameters['moduleParamsParameterName'] = requestParameters.moduleParamsParameterName;
        }

        if (requestParameters.moduleParamsParameterValue) {
            queryParameters['moduleParamsParameterValue'] = requestParameters.moduleParamsParameterValue;
        }

        if (requestParameters.activityGroup !== undefined) {
            queryParameters['activityGroup'] = requestParameters.activityGroup;
        }

        if (requestParameters.activityType !== undefined) {
            queryParameters['activityType'] = requestParameters.activityType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['fromDate'] = (requestParameters.fromDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.toDate !== undefined) {
            queryParameters['toDate'] = (requestParameters.toDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.userByIdUserIds) {
            queryParameters['userByIdUserIds'] = requestParameters.userByIdUserIds;
        }

        if (requestParameters.userForIdUserIds) {
            queryParameters['userForIdUserIds'] = requestParameters.userForIdUserIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activityLog`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityLogFromJSON(jsonValue));
    }

    /**
     * You can use this API to view the changes log for a specified Activity. <p><strong>OperationId:</strong>getActivityLog</p>
     * Get Activity Log
     */
    async getActivityLog(requestParameters: GetActivityLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityLog> {
        const response = await this.getActivityLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve all statistics of activities. <p><strong>OperationId:</strong>getActivityStatistics</p>
     * Get Activity statistics
     */
    async getActivityStatisticsRaw(requestParameters: GetActivityStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ActivityStatistics>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getActivityStatistics.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.reportStartDate !== undefined) {
            queryParameters['reportStartDate'] = (requestParameters.reportStartDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.activityTypeCodes) {
            queryParameters['activityTypeCodes'] = requestParameters.activityTypeCodes;
        }

        if (requestParameters.ownerCodeList) {
            queryParameters['ownerCodeList'] = requestParameters.ownerCodeList;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/statistics`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityStatisticsFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve all statistics of activities. <p><strong>OperationId:</strong>getActivityStatistics</p>
     * Get Activity statistics
     */
    async getActivityStatistics(requestParameters: GetActivityStatisticsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ActivityStatistics> {
        const response = await this.getActivityStatisticsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve an Activity, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivityWithOutHotelId</p>
     * Get activity by ID
     */
    async getActivityWithOutHotelIdRaw(requestParameters: GetActivityWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getActivityWithOutHotelId.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve an Activity, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivityWithOutHotelId</p>
     * Get activity by ID
     */
    async getActivityWithOutHotelId(requestParameters: GetActivityWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Activity> {
        const response = await this.getActivityWithOutHotelIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to retrieve emails which have been received from an external system and stored in OPERA. They are stored against accounts, contacts and blocks in OPERA. <p><strong>OperationId:</strong>getEmails</p>
     * Get Emails
     */
    async getEmailsRaw(requestParameters: GetEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.code) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.accountIdId !== undefined) {
            queryParameters['accountIdId'] = requestParameters.accountIdId;
        }

        if (requestParameters.accountIdIdExtension !== undefined) {
            queryParameters['accountIdIdExtension'] = requestParameters.accountIdIdExtension;
        }

        if (requestParameters.accountIdIdContext !== undefined) {
            queryParameters['accountIdIdContext'] = requestParameters.accountIdIdContext;
        }

        if (requestParameters.accountIdType !== undefined) {
            queryParameters['accountIdType'] = requestParameters.accountIdType;
        }

        if (requestParameters.contactIdId !== undefined) {
            queryParameters['contactIdId'] = requestParameters.contactIdId;
        }

        if (requestParameters.contactIdIdExtension !== undefined) {
            queryParameters['contactIdIdExtension'] = requestParameters.contactIdIdExtension;
        }

        if (requestParameters.contactIdIdContext !== undefined) {
            queryParameters['contactIdIdContext'] = requestParameters.contactIdIdContext;
        }

        if (requestParameters.contactIdType !== undefined) {
            queryParameters['contactIdType'] = requestParameters.contactIdType;
        }

        if (requestParameters.blockIdId !== undefined) {
            queryParameters['blockIdId'] = requestParameters.blockIdId;
        }

        if (requestParameters.blockIdIdExtension !== undefined) {
            queryParameters['blockIdIdExtension'] = requestParameters.blockIdIdExtension;
        }

        if (requestParameters.blockIdIdContext !== undefined) {
            queryParameters['blockIdIdContext'] = requestParameters.blockIdIdContext;
        }

        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.emailSubject !== undefined) {
            queryParameters['emailSubject'] = requestParameters.emailSubject;
        }

        if (requestParameters.senderLastName !== undefined) {
            queryParameters['senderLastName'] = requestParameters.senderLastName;
        }

        if (requestParameters.senderFirstName !== undefined) {
            queryParameters['senderFirstName'] = requestParameters.senderFirstName;
        }

        if (requestParameters.senderEmailAddress !== undefined) {
            queryParameters['senderEmailAddress'] = requestParameters.senderEmailAddress;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/emails`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to retrieve emails which have been received from an external system and stored in OPERA. They are stored against accounts, contacts and blocks in OPERA. <p><strong>OperationId:</strong>getEmails</p>
     * Get Emails
     */
    async getEmails(requestParameters: GetEmailsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailsDetails> {
        const response = await this.getEmailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivities</p>
     * Get recently accessed activities
     */
    async getRecentlyAccessedActivitiesRaw(requestParameters: GetRecentlyAccessedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedActivities>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRecentlyAccessedActivities.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/recentlyAccessedActivities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecentlyAccessedActivitiesFromJSON(jsonValue));
    }

    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivities</p>
     * Get recently accessed activities
     */
    async getRecentlyAccessedActivities(requestParameters: GetRecentlyAccessedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedActivities> {
        const response = await this.getRecentlyAccessedActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivitiesWithOutHotelId</p>
     * Get recently accessed activities
     */
    async getRecentlyAccessedActivitiesWithOutHotelIdRaw(requestParameters: GetRecentlyAccessedActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecentlyAccessedActivities>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/recentlyAccessedActivities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecentlyAccessedActivitiesFromJSON(jsonValue));
    }

    /**
     * This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivitiesWithOutHotelId</p>
     * Get recently accessed activities
     */
    async getRecentlyAccessedActivitiesWithOutHotelId(requestParameters: GetRecentlyAccessedActivitiesWithOutHotelIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecentlyAccessedActivities> {
        const response = await this.getRecentlyAccessedActivitiesWithOutHotelIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use postActivities to create a new activity for a hotel.  You would need to know the types of Activities a hotel accepts, such as Appointments, TODO.  Use ListOfValues API\'s to find the available types at a hotel. <p><strong>OperationId:</strong>postActivities</p>
     * Create activities in a hotel
     */
    async postActivitiesRaw(requestParameters: PostActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postActivities.');
        }
        
        if (requestParameters.activitiesInformation === null || requestParameters.activitiesInformation === undefined) {
            throw new runtime.RequiredError('activitiesInformation','Required parameter requestParameters.activitiesInformation was null or undefined when calling postActivities.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostActivitiesRequestToJSON(requestParameters.activitiesInformation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use postActivities to create a new activity for a hotel.  You would need to know the types of Activities a hotel accepts, such as Appointments, TODO.  Use ListOfValues API\'s to find the available types at a hotel. <p><strong>OperationId:</strong>postActivities</p>
     * Create activities in a hotel
     */
    async postActivities(requestParameters: PostActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to invite one or multiple owners to an activity. <p><strong>OperationId:</strong>postLinkedActivities</p>
     * Create linked activities in a hotel by ID
     */
    async postLinkedActivitiesRaw(requestParameters: PostLinkedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling postLinkedActivities.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postLinkedActivities.');
        }
        
        if (requestParameters.linkedActivities === null || requestParameters.linkedActivities === undefined) {
            throw new runtime.RequiredError('linkedActivities','Required parameter requestParameters.linkedActivities was null or undefined when calling postLinkedActivities.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/linkedActivities`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkedActivitiesToJSON(requestParameters.linkedActivities),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to invite one or multiple owners to an activity. <p><strong>OperationId:</strong>postLinkedActivities</p>
     * Create linked activities in a hotel by ID
     */
    async postLinkedActivities(requestParameters: PostLinkedActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postLinkedActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to mark multiple Activities as completed in 1 request.  You must know the OPERA Activity ID\'s for this API. <p><strong>OperationId:</strong>postMultipleActivitiesCompletion</p>
     * Complete activities
     */
    async postMultipleActivitiesCompletionRaw(requestParameters: PostMultipleActivitiesCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activitiesToChange === null || requestParameters.activitiesToChange === undefined) {
            throw new runtime.RequiredError('activitiesToChange','Required parameter requestParameters.activitiesToChange was null or undefined when calling postMultipleActivitiesCompletion.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/activities/activitiesCompletion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMultipleActivitiesCompletionRequestToJSON(requestParameters.activitiesToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to mark multiple Activities as completed in 1 request.  You must know the OPERA Activity ID\'s for this API. <p><strong>OperationId:</strong>postMultipleActivitiesCompletion</p>
     * Complete activities
     */
    async postMultipleActivitiesCompletion(requestParameters: PostMultipleActivitiesCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postMultipleActivitiesCompletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to mark one Activity as completed in 1 request.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>postSingleActivityCompletion</p>
     * Complete activity in a hotel by ID
     */
    async postSingleActivityCompletionRaw(requestParameters: PostSingleActivityCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling postSingleActivityCompletion.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postSingleActivityCompletion.');
        }
        
        if (requestParameters.activitiesToChange === null || requestParameters.activitiesToChange === undefined) {
            throw new runtime.RequiredError('activitiesToChange','Required parameter requestParameters.activitiesToChange was null or undefined when calling postSingleActivityCompletion.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}/activityCompletion`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostSingleActivityCompletionRequestToJSON(requestParameters.activitiesToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to mark one Activity as completed in 1 request.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>postSingleActivityCompletion</p>
     * Complete activity in a hotel by ID
     */
    async postSingleActivityCompletion(requestParameters: PostSingleActivityCompletionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postSingleActivityCompletionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this to update an existing Activity for a hotel.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>putActivities</p>
     * Update activity in a hotel by ID
     */
    async putActivitiesRaw(requestParameters: PutActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling putActivities.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putActivities.');
        }
        
        if (requestParameters.activitiesToChange === null || requestParameters.activitiesToChange === undefined) {
            throw new runtime.RequiredError('activitiesToChange','Required parameter requestParameters.activitiesToChange was null or undefined when calling putActivities.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/activities/{activityId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutActivitiesRequestToJSON(requestParameters.activitiesToChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this to update an existing Activity for a hotel.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>putActivities</p>
     * Update activity in a hotel by ID
     */
    async putActivities(requestParameters: PutActivitiesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetActivitiesActivityClassEnum = {
    Appointment: 'Appointment',
    Todo: 'Todo'
} as const;
export type GetActivitiesActivityClassEnum = typeof GetActivitiesActivityClassEnum[keyof typeof GetActivitiesActivityClassEnum];
/**
 * @export
 */
export const GetActivitiesByMultipleHotelIdsActivityClassEnum = {
    Appointment: 'Appointment',
    Todo: 'Todo'
} as const;
export type GetActivitiesByMultipleHotelIdsActivityClassEnum = typeof GetActivitiesByMultipleHotelIdsActivityClassEnum[keyof typeof GetActivitiesByMultipleHotelIdsActivityClassEnum];
/**
 * @export
 */
export const GetActivityFetchInstructionsEnum = {
    ActivityInfo: 'ActivityInfo',
    Profiles: 'Profiles',
    Blocks: 'Blocks',
    Attachments: 'Attachments',
    LinkedActivities: 'LinkedActivities'
} as const;
export type GetActivityFetchInstructionsEnum = typeof GetActivityFetchInstructionsEnum[keyof typeof GetActivityFetchInstructionsEnum];
/**
 * @export
 */
export const GetActivityLogModuleEnum = {
    Reservation: 'Reservation',
    Contract: 'Contract',
    Allotment: 'Allotment',
    Outlookview: 'Outlookview',
    Profile: 'Profile',
    Accountreceivables: 'Accountreceivables',
    GdsConvRateCodes: 'GdsConvRateCodes',
    RateCode: 'RateCode',
    Billing: 'Billing',
    Activity: 'Activity'
} as const;
export type GetActivityLogModuleEnum = typeof GetActivityLogModuleEnum[keyof typeof GetActivityLogModuleEnum];
/**
 * @export
 */
export const GetActivityWithOutHotelIdFetchInstructionsEnum = {
    ActivityInfo: 'ActivityInfo',
    Profiles: 'Profiles',
    Blocks: 'Blocks',
    Attachments: 'Attachments',
    LinkedActivities: 'LinkedActivities'
} as const;
export type GetActivityWithOutHotelIdFetchInstructionsEnum = typeof GetActivityWithOutHotelIdFetchInstructionsEnum[keyof typeof GetActivityWithOutHotelIdFetchInstructionsEnum];
