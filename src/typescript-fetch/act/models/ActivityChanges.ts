/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityConfigClassType } from './ActivityConfigClassType';
import {
    ActivityConfigClassTypeFromJSON,
    ActivityConfigClassTypeFromJSONTyped,
    ActivityConfigClassTypeToJSON,
} from './ActivityConfigClassType';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Activities details to be updated.
 * @export
 * @interface ActivityChanges
 */
export interface ActivityChanges {
    /**
     * 
     * @type {ActivityConfigClassType}
     * @memberof ActivityChanges
     */
    activityClass?: ActivityConfigClassType;
    /**
     * Indicates the Activity Type used for the Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    activityType?: string;
    /**
     * Indicates Purpose of the Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    activityPurpose?: string;
    /**
     * Activity Trace code used for the Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    activityTraceCode?: string;
    /**
     * Owner of Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    activityOwner?: string;
    /**
     * Start Date of Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    startDate?: string;
    /**
     * Start time of the Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    startTime?: string;
    /**
     * End Date of Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    endDate?: string;
    /**
     * End time of the Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    endTime?: string;
    /**
     * Notes associated with an Activity.
     * @type {string}
     * @memberof ActivityChanges
     */
    notes?: string;
    /**
     * Indicates whether Activity has a high priority.
     * @type {boolean}
     * @memberof ActivityChanges
     */
    highPriority?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ActivityChanges
     */
    activityAccount?: UniqueIDType;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ActivityChanges
     */
    activityContact?: UniqueIDType;
}

/**
 * Check if a given object implements the ActivityChanges interface.
 */
export function instanceOfActivityChanges(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityChangesFromJSON(json: any): ActivityChanges {
    return ActivityChangesFromJSONTyped(json, false);
}

export function ActivityChangesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityChanges {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityClass': !exists(json, 'activityClass') ? undefined : ActivityConfigClassTypeFromJSON(json['activityClass']),
        'activityType': !exists(json, 'activityType') ? undefined : json['activityType'],
        'activityPurpose': !exists(json, 'activityPurpose') ? undefined : json['activityPurpose'],
        'activityTraceCode': !exists(json, 'activityTraceCode') ? undefined : json['activityTraceCode'],
        'activityOwner': !exists(json, 'activityOwner') ? undefined : json['activityOwner'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'endTime': !exists(json, 'endTime') ? undefined : json['endTime'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'highPriority': !exists(json, 'highPriority') ? undefined : json['highPriority'],
        'activityAccount': !exists(json, 'activityAccount') ? undefined : UniqueIDTypeFromJSON(json['activityAccount']),
        'activityContact': !exists(json, 'activityContact') ? undefined : UniqueIDTypeFromJSON(json['activityContact']),
    };
}

export function ActivityChangesToJSON(value?: ActivityChanges | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityClass': ActivityConfigClassTypeToJSON(value.activityClass),
        'activityType': value.activityType,
        'activityPurpose': value.activityPurpose,
        'activityTraceCode': value.activityTraceCode,
        'activityOwner': value.activityOwner,
        'startDate': value.startDate,
        'startTime': value.startTime,
        'endDate': value.endDate,
        'endTime': value.endTime,
        'notes': value.notes,
        'highPriority': value.highPriority,
        'activityAccount': UniqueIDTypeToJSON(value.activityAccount),
        'activityContact': UniqueIDTypeToJSON(value.activityContact),
    };
}

