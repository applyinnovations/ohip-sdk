/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityBlockInfoType } from './ActivityBlockInfoType';
import {
    ActivityBlockInfoTypeFromJSON,
    ActivityBlockInfoTypeFromJSONTyped,
    ActivityBlockInfoTypeToJSON,
} from './ActivityBlockInfoType';
import type { ActivityDetailsTypeLinkedAccounts } from './ActivityDetailsTypeLinkedAccounts';
import {
    ActivityDetailsTypeLinkedAccountsFromJSON,
    ActivityDetailsTypeLinkedAccountsFromJSONTyped,
    ActivityDetailsTypeLinkedAccountsToJSON,
} from './ActivityDetailsTypeLinkedAccounts';
import type { ActivityDetailsTypeLinkedContacts } from './ActivityDetailsTypeLinkedContacts';
import {
    ActivityDetailsTypeLinkedContactsFromJSON,
    ActivityDetailsTypeLinkedContactsFromJSONTyped,
    ActivityDetailsTypeLinkedContactsToJSON,
} from './ActivityDetailsTypeLinkedContacts';
import type { ActivityId } from './ActivityId';
import {
    ActivityIdFromJSON,
    ActivityIdFromJSONTyped,
    ActivityIdToJSON,
} from './ActivityId';
import type { ActivityInfoType } from './ActivityInfoType';
import {
    ActivityInfoTypeFromJSON,
    ActivityInfoTypeFromJSONTyped,
    ActivityInfoTypeToJSON,
} from './ActivityInfoType';
import type { AttachmentType } from './AttachmentType';
import {
    AttachmentTypeFromJSON,
    AttachmentTypeFromJSONTyped,
    AttachmentTypeToJSON,
} from './AttachmentType';
import type { IndicatorType } from './IndicatorType';
import {
    IndicatorTypeFromJSON,
    IndicatorTypeFromJSONTyped,
    IndicatorTypeToJSON,
} from './IndicatorType';
import type { LinkedActivityDetailsType } from './LinkedActivityDetailsType';
import {
    LinkedActivityDetailsTypeFromJSON,
    LinkedActivityDetailsTypeFromJSONTyped,
    LinkedActivityDetailsTypeToJSON,
} from './LinkedActivityDetailsType';

/**
 * Complete Activity Related Information.
 * @export
 * @interface ActivityDetailsType
 */
export interface ActivityDetailsType {
    /**
     * 
     * @type {ActivityId}
     * @memberof ActivityDetailsType
     */
    activityId?: ActivityId;
    /**
     * 
     * @type {ActivityInfoType}
     * @memberof ActivityDetailsType
     */
    activityDetail?: ActivityInfoType;
    /**
     * 
     * @type {ActivityDetailsTypeLinkedAccounts}
     * @memberof ActivityDetailsType
     */
    linkedAccounts?: ActivityDetailsTypeLinkedAccounts;
    /**
     * 
     * @type {ActivityDetailsTypeLinkedContacts}
     * @memberof ActivityDetailsType
     */
    linkedContacts?: ActivityDetailsTypeLinkedContacts;
    /**
     * List of Blocks that are linked to the Activity.
     * @type {Array<ActivityBlockInfoType>}
     * @memberof ActivityDetailsType
     */
    linkedBlocks?: Array<ActivityBlockInfoType>;
    /**
     * Attachment List.
     * @type {Array<AttachmentType>}
     * @memberof ActivityDetailsType
     */
    linkedAttachments?: Array<AttachmentType>;
    /**
     * The list of activities associated with an activity.
     * @type {Array<LinkedActivityDetailsType>}
     * @memberof ActivityDetailsType
     */
    linkedActivities?: Array<LinkedActivityDetailsType>;
    /**
     * Collection of lamp indicators.
     * @type {Array<IndicatorType>}
     * @memberof ActivityDetailsType
     */
    indicators?: Array<IndicatorType>;
}

/**
 * Check if a given object implements the ActivityDetailsType interface.
 */
export function instanceOfActivityDetailsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityDetailsTypeFromJSON(json: any): ActivityDetailsType {
    return ActivityDetailsTypeFromJSONTyped(json, false);
}

export function ActivityDetailsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityDetailsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityId': !exists(json, 'activityId') ? undefined : ActivityIdFromJSON(json['activityId']),
        'activityDetail': !exists(json, 'activityDetail') ? undefined : ActivityInfoTypeFromJSON(json['activityDetail']),
        'linkedAccounts': !exists(json, 'linkedAccounts') ? undefined : ActivityDetailsTypeLinkedAccountsFromJSON(json['linkedAccounts']),
        'linkedContacts': !exists(json, 'linkedContacts') ? undefined : ActivityDetailsTypeLinkedContactsFromJSON(json['linkedContacts']),
        'linkedBlocks': !exists(json, 'linkedBlocks') ? undefined : ((json['linkedBlocks'] as Array<any>).map(ActivityBlockInfoTypeFromJSON)),
        'linkedAttachments': !exists(json, 'linkedAttachments') ? undefined : ((json['linkedAttachments'] as Array<any>).map(AttachmentTypeFromJSON)),
        'linkedActivities': !exists(json, 'linkedActivities') ? undefined : ((json['linkedActivities'] as Array<any>).map(LinkedActivityDetailsTypeFromJSON)),
        'indicators': !exists(json, 'indicators') ? undefined : ((json['indicators'] as Array<any>).map(IndicatorTypeFromJSON)),
    };
}

export function ActivityDetailsTypeToJSON(value?: ActivityDetailsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityId': ActivityIdToJSON(value.activityId),
        'activityDetail': ActivityInfoTypeToJSON(value.activityDetail),
        'linkedAccounts': ActivityDetailsTypeLinkedAccountsToJSON(value.linkedAccounts),
        'linkedContacts': ActivityDetailsTypeLinkedContactsToJSON(value.linkedContacts),
        'linkedBlocks': value.linkedBlocks === undefined ? undefined : ((value.linkedBlocks as Array<any>).map(ActivityBlockInfoTypeToJSON)),
        'linkedAttachments': value.linkedAttachments === undefined ? undefined : ((value.linkedAttachments as Array<any>).map(AttachmentTypeToJSON)),
        'linkedActivities': value.linkedActivities === undefined ? undefined : ((value.linkedActivities as Array<any>).map(LinkedActivityDetailsTypeToJSON)),
        'indicators': value.indicators === undefined ? undefined : ((value.indicators as Array<any>).map(IndicatorTypeToJSON)),
    };
}

