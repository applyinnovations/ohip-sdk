/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityConfigClassType } from './ActivityConfigClassType';
import {
    ActivityConfigClassTypeFromJSON,
    ActivityConfigClassTypeFromJSONTyped,
    ActivityConfigClassTypeToJSON,
} from './ActivityConfigClassType';
import type { ActivityInfoTypeStatus } from './ActivityInfoTypeStatus';
import {
    ActivityInfoTypeStatusFromJSON,
    ActivityInfoTypeStatusFromJSONTyped,
    ActivityInfoTypeStatusToJSON,
} from './ActivityInfoTypeStatus';

/**
 * Activity related information.
 * @export
 * @interface ActivityInfoType
 */
export interface ActivityInfoType {
    /**
     * This is the Hotel Code of the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    hotelId?: string;
    /**
     * 
     * @type {ActivityConfigClassType}
     * @memberof ActivityInfoType
     */
    activityClass?: ActivityConfigClassType;
    /**
     * Indicates the Activity Type used for the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityType?: string;
    /**
     * Indicates the description used for the Activity Type.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityTypeDescription?: string;
    /**
     * Indicates Purpose of the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityPurpose?: string;
    /**
     * Activity Trace code used for the Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityTraceCode?: string;
    /**
     * Owner of Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityOwner?: string;
    /**
     * Start Date time of Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    startDateTime?: string;
    /**
     * End Date time of Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    endDateTime?: string;
    /**
     * 
     * @type {ActivityInfoTypeStatus}
     * @memberof ActivityInfoType
     */
    status?: ActivityInfoTypeStatus;
    /**
     * Indicates the outcome of a completed Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    activityResult?: string;
    /**
     * Notes associated with an Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    notes?: string;
    /**
     * Indicates whether Followup Activity is needed or not.
     * @type {boolean}
     * @memberof ActivityInfoType
     */
    followup?: boolean;
    /**
     * Start Date time of the Followup Activity.
     * @type {string}
     * @memberof ActivityInfoType
     */
    followupStartDateTime?: string;
    /**
     * Indicates whether Activity has a high priority.
     * @type {boolean}
     * @memberof ActivityInfoType
     */
    highPriority?: boolean;
    /**
     * Determines whether the Activity overlaps with another activity with same date and time for the same owner.
     * @type {boolean}
     * @memberof ActivityInfoType
     */
    overlapActivity?: boolean;
    /**
     * Time stamp of the creation.
     * @type {string}
     * @memberof ActivityInfoType
     */
    createDateTime?: string;
    /**
     * ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.
     * @type {string}
     * @memberof ActivityInfoType
     */
    creatorId?: string;
    /**
     * Time stamp of last modification.
     * @type {string}
     * @memberof ActivityInfoType
     */
    lastModifyDateTime?: string;
    /**
     * Identifies the last software system or person to modify a record.
     * @type {string}
     * @memberof ActivityInfoType
     */
    lastModifierId?: string;
}

/**
 * Check if a given object implements the ActivityInfoType interface.
 */
export function instanceOfActivityInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityInfoTypeFromJSON(json: any): ActivityInfoType {
    return ActivityInfoTypeFromJSONTyped(json, false);
}

export function ActivityInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'activityClass': !exists(json, 'activityClass') ? undefined : ActivityConfigClassTypeFromJSON(json['activityClass']),
        'activityType': !exists(json, 'activityType') ? undefined : json['activityType'],
        'activityTypeDescription': !exists(json, 'activityTypeDescription') ? undefined : json['activityTypeDescription'],
        'activityPurpose': !exists(json, 'activityPurpose') ? undefined : json['activityPurpose'],
        'activityTraceCode': !exists(json, 'activityTraceCode') ? undefined : json['activityTraceCode'],
        'activityOwner': !exists(json, 'activityOwner') ? undefined : json['activityOwner'],
        'startDateTime': !exists(json, 'startDateTime') ? undefined : json['startDateTime'],
        'endDateTime': !exists(json, 'endDateTime') ? undefined : json['endDateTime'],
        'status': !exists(json, 'status') ? undefined : ActivityInfoTypeStatusFromJSON(json['status']),
        'activityResult': !exists(json, 'activityResult') ? undefined : json['activityResult'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'followup': !exists(json, 'followup') ? undefined : json['followup'],
        'followupStartDateTime': !exists(json, 'followupStartDateTime') ? undefined : json['followupStartDateTime'],
        'highPriority': !exists(json, 'highPriority') ? undefined : json['highPriority'],
        'overlapActivity': !exists(json, 'overlapActivity') ? undefined : json['overlapActivity'],
        'createDateTime': !exists(json, 'createDateTime') ? undefined : json['createDateTime'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifyDateTime': !exists(json, 'lastModifyDateTime') ? undefined : json['lastModifyDateTime'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
    };
}

export function ActivityInfoTypeToJSON(value?: ActivityInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'activityClass': ActivityConfigClassTypeToJSON(value.activityClass),
        'activityType': value.activityType,
        'activityTypeDescription': value.activityTypeDescription,
        'activityPurpose': value.activityPurpose,
        'activityTraceCode': value.activityTraceCode,
        'activityOwner': value.activityOwner,
        'startDateTime': value.startDateTime,
        'endDateTime': value.endDateTime,
        'status': ActivityInfoTypeStatusToJSON(value.status),
        'activityResult': value.activityResult,
        'notes': value.notes,
        'followup': value.followup,
        'followupStartDateTime': value.followupStartDateTime,
        'highPriority': value.highPriority,
        'overlapActivity': value.overlapActivity,
        'createDateTime': value.createDateTime,
        'creatorId': value.creatorId,
        'lastModifyDateTime': value.lastModifyDateTime,
        'lastModifierId': value.lastModifierId,
    };
}

