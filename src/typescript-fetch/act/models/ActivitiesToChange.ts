/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityDetailsType } from './ActivityDetailsType';
import {
    ActivityDetailsTypeFromJSON,
    ActivityDetailsTypeFromJSONTyped,
    ActivityDetailsTypeToJSON,
} from './ActivityDetailsType';
import type { InstanceLink } from './InstanceLink';
import {
    InstanceLinkFromJSON,
    InstanceLinkFromJSONTyped,
    InstanceLinkToJSON,
} from './InstanceLink';
import type { WarningType } from './WarningType';
import {
    WarningTypeFromJSON,
    WarningTypeFromJSONTyped,
    WarningTypeToJSON,
} from './WarningType';

/**
 * 
 * @export
 * @interface ActivitiesToChange
 */
export interface ActivitiesToChange {
    /**
     * Activity information in detail.
     * @type {Array<ActivityDetailsType>}
     * @memberof ActivitiesToChange
     */
    activitiesInformation?: Array<ActivityDetailsType>;
    /**
     * Signifies whether only activity details are being modified.
     * @type {boolean}
     * @memberof ActivitiesToChange
     */
    activityDetailsEditFlag?: boolean;
    /**
     * Signifies whether the linked activity details should be modified or not.
     * @type {boolean}
     * @memberof ActivitiesToChange
     */
    updateLinkedActivities?: boolean;
    /**
     * Signifies whether complete details of activity should alone be modified.
     * @type {boolean}
     * @memberof ActivitiesToChange
     */
    completeMode?: boolean;
    /**
     * 
     * @type {Array<InstanceLink>}
     * @memberof ActivitiesToChange
     */
    links?: Array<InstanceLink>;
    /**
     * Used in conjunction with the Success element to define a business error.
     * @type {Array<WarningType>}
     * @memberof ActivitiesToChange
     */
    warnings?: Array<WarningType>;
}

/**
 * Check if a given object implements the ActivitiesToChange interface.
 */
export function instanceOfActivitiesToChange(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivitiesToChangeFromJSON(json: any): ActivitiesToChange {
    return ActivitiesToChangeFromJSONTyped(json, false);
}

export function ActivitiesToChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivitiesToChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activitiesInformation': !exists(json, 'activitiesInformation') ? undefined : ((json['activitiesInformation'] as Array<any>).map(ActivityDetailsTypeFromJSON)),
        'activityDetailsEditFlag': !exists(json, 'activityDetailsEditFlag') ? undefined : json['activityDetailsEditFlag'],
        'updateLinkedActivities': !exists(json, 'updateLinkedActivities') ? undefined : json['updateLinkedActivities'],
        'completeMode': !exists(json, 'completeMode') ? undefined : json['completeMode'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(InstanceLinkFromJSON)),
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningTypeFromJSON)),
    };
}

export function ActivitiesToChangeToJSON(value?: ActivitiesToChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activitiesInformation': value.activitiesInformation === undefined ? undefined : ((value.activitiesInformation as Array<any>).map(ActivityDetailsTypeToJSON)),
        'activityDetailsEditFlag': value.activityDetailsEditFlag,
        'updateLinkedActivities': value.updateLinkedActivities,
        'completeMode': value.completeMode,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(InstanceLinkToJSON)),
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningTypeToJSON)),
    };
}

