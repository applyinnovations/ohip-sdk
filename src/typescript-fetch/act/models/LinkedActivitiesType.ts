/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityId } from './ActivityId';
import {
    ActivityIdFromJSON,
    ActivityIdFromJSONTyped,
    ActivityIdToJSON,
} from './ActivityId';

/**
 * Provides the data to create linked activities to an activity .
 * @export
 * @interface LinkedActivitiesType
 */
export interface LinkedActivitiesType {
    /**
     * Hotel Code of the Activity.
     * @type {string}
     * @memberof LinkedActivitiesType
     */
    hotelId?: string;
    /**
     * 
     * @type {ActivityId}
     * @memberof LinkedActivitiesType
     */
    activityId?: ActivityId;
    /**
     * 
     * @type {Array<string>}
     * @memberof LinkedActivitiesType
     */
    ownerCodeList?: Array<string>;
}

/**
 * Check if a given object implements the LinkedActivitiesType interface.
 */
export function instanceOfLinkedActivitiesType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LinkedActivitiesTypeFromJSON(json: any): LinkedActivitiesType {
    return LinkedActivitiesTypeFromJSONTyped(json, false);
}

export function LinkedActivitiesTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedActivitiesType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'activityId': !exists(json, 'activityId') ? undefined : ActivityIdFromJSON(json['activityId']),
        'ownerCodeList': !exists(json, 'ownerCodeList') ? undefined : json['ownerCodeList'],
    };
}

export function LinkedActivitiesTypeToJSON(value?: LinkedActivitiesType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hotelId': value.hotelId,
        'activityId': ActivityIdToJSON(value.activityId),
        'ownerCodeList': value.ownerCodeList,
    };
}

