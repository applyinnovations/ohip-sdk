/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityLinkedProfilesType } from './ActivityLinkedProfilesType';
import {
    ActivityLinkedProfilesTypeFromJSON,
    ActivityLinkedProfilesTypeFromJSONTyped,
    ActivityLinkedProfilesTypeToJSON,
} from './ActivityLinkedProfilesType';

/**
 * Provides information about the contacts linked to an activity. Please note that during a change operation this performs a full overlay if the attribute FullOverlay is set to true. In a full overlay, all the contacts that should be associated to the activity should be provided during a change operation. Any contacts not provided will be detached from this activity. By default the full overlay is considered false if this property is left blank. If values are provided for contacts, only the full overlay functionality is provided at this time.
 * @export
 * @interface ActivityDetailsTypeLinkedContacts
 */
export interface ActivityDetailsTypeLinkedContacts {
    /**
     * The list of contacts associated with an activity.
     * @type {Array<ActivityLinkedProfilesType>}
     * @memberof ActivityDetailsTypeLinkedContacts
     */
    activityContact?: Array<ActivityLinkedProfilesType>;
    /**
     * Indicates whether to perform a full overlay for the contacts.
     * @type {boolean}
     * @memberof ActivityDetailsTypeLinkedContacts
     */
    fullOverlay?: boolean;
}

/**
 * Check if a given object implements the ActivityDetailsTypeLinkedContacts interface.
 */
export function instanceOfActivityDetailsTypeLinkedContacts(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivityDetailsTypeLinkedContactsFromJSON(json: any): ActivityDetailsTypeLinkedContacts {
    return ActivityDetailsTypeLinkedContactsFromJSONTyped(json, false);
}

export function ActivityDetailsTypeLinkedContactsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivityDetailsTypeLinkedContacts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityContact': !exists(json, 'activityContact') ? undefined : ((json['activityContact'] as Array<any>).map(ActivityLinkedProfilesTypeFromJSON)),
        'fullOverlay': !exists(json, 'fullOverlay') ? undefined : json['fullOverlay'],
    };
}

export function ActivityDetailsTypeLinkedContactsToJSON(value?: ActivityDetailsTypeLinkedContacts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityContact': value.activityContact === undefined ? undefined : ((value.activityContact as Array<any>).map(ActivityLinkedProfilesTypeToJSON)),
        'fullOverlay': value.fullOverlay,
    };
}

