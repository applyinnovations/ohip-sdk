/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Activity API
 * APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ActivityIdRecord } from './ActivityIdRecord';
import {
    ActivityIdRecordFromJSON,
    ActivityIdRecordFromJSONTyped,
    ActivityIdRecordToJSON,
} from './ActivityIdRecord';

/**
 * Status/Info of the processed activities.
 * @export
 * @interface ActivitiesProcessedInfoType
 */
export interface ActivitiesProcessedInfoType {
    /**
     * 
     * @type {ActivityIdRecord}
     * @memberof ActivitiesProcessedInfoType
     */
    activityIdRecord?: ActivityIdRecord;
    /**
     * Reason for not processing the activity.
     * @type {string}
     * @memberof ActivitiesProcessedInfoType
     */
    reason?: string;
    /**
     * Flag to indicate the warning messages from the API
     * @type {string}
     * @memberof ActivitiesProcessedInfoType
     */
    processingInfoType?: string;
    /**
     * Erorr/Warning code for not processing the activity.
     * @type {string}
     * @memberof ActivitiesProcessedInfoType
     */
    processingInfoCode?: string;
}

/**
 * Check if a given object implements the ActivitiesProcessedInfoType interface.
 */
export function instanceOfActivitiesProcessedInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ActivitiesProcessedInfoTypeFromJSON(json: any): ActivitiesProcessedInfoType {
    return ActivitiesProcessedInfoTypeFromJSONTyped(json, false);
}

export function ActivitiesProcessedInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ActivitiesProcessedInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'activityIdRecord': !exists(json, 'activityIdRecord') ? undefined : ActivityIdRecordFromJSON(json['activityIdRecord']),
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'processingInfoType': !exists(json, 'processingInfoType') ? undefined : json['processingInfoType'],
        'processingInfoCode': !exists(json, 'processingInfoCode') ? undefined : json['processingInfoCode'],
    };
}

export function ActivitiesProcessedInfoTypeToJSON(value?: ActivitiesProcessedInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'activityIdRecord': ActivityIdRecordToJSON(value.activityIdRecord),
        'reason': value.reason,
        'processingInfoType': value.processingInfoType,
        'processingInfoCode': value.processingInfoCode,
    };
}

