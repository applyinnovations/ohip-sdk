/* tslint:disable */
/* eslint-disable */
/**
 * OPI Token Exchange Service API
 * Oracle Token Exchange Service Specification<br /><br /> Compatible with OPERA Cloud release 1.0.1.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OpenPaymentTokenExchange200Response,
  OpenPaymentTokenExchange400Response,
  OpenPaymentTokenExchange422Response,
  OpenPaymentTokenExchange500Response,
  OpenPaymentTokenExchange504Response,
  OpenPaymentTokenExchangeRequest,
} from '../models/index';
import {
    OpenPaymentTokenExchange200ResponseFromJSON,
    OpenPaymentTokenExchange200ResponseToJSON,
    OpenPaymentTokenExchange400ResponseFromJSON,
    OpenPaymentTokenExchange400ResponseToJSON,
    OpenPaymentTokenExchange422ResponseFromJSON,
    OpenPaymentTokenExchange422ResponseToJSON,
    OpenPaymentTokenExchange500ResponseFromJSON,
    OpenPaymentTokenExchange500ResponseToJSON,
    OpenPaymentTokenExchange504ResponseFromJSON,
    OpenPaymentTokenExchange504ResponseToJSON,
    OpenPaymentTokenExchangeRequestFromJSON,
    OpenPaymentTokenExchangeRequestToJSON,
} from '../models/index';

export interface OpenPaymentTokenExchangeOperationRequest {
    hotelCode: string;
    authorization?: string;
    xAppKey?: string;
    body: OpenPaymentTokenExchangeRequest;
}

/**
 * 
 */
export class HotelsApi extends runtime.BaseAPI {

    /**
     * Converts Primary Account Number (PAN) into Token issued by Payment Service Providers
     * Card Tokenization
     */
    async openPaymentTokenExchangeRaw(requestParameters: OpenPaymentTokenExchangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OpenPaymentTokenExchange200Response>> {
        if (requestParameters.hotelCode === null || requestParameters.hotelCode === undefined) {
            throw new runtime.RequiredError('hotelCode','Required parameter requestParameters.hotelCode was null or undefined when calling openPaymentTokenExchange.');
        }
        
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling openPaymentTokenExchange.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/hotels/{hotelCode}/tokens`.replace(`{${"hotelCode"}}`, encodeURIComponent(String(requestParameters.hotelCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OpenPaymentTokenExchangeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OpenPaymentTokenExchange200ResponseFromJSON(jsonValue));
    }

    /**
     * Converts Primary Account Number (PAN) into Token issued by Payment Service Providers
     * Card Tokenization
     */
    async openPaymentTokenExchange(requestParameters: OpenPaymentTokenExchangeOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OpenPaymentTokenExchange200Response> {
        const response = await this.openPaymentTokenExchangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
