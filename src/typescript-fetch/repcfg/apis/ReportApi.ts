/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExceptionDetailType,
  GenericReports,
  ReportParameters,
  ReportTextConfigurationsCopy,
  Reports,
  Status,
} from '../models/index';
import {
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GenericReportsFromJSON,
    GenericReportsToJSON,
    ReportParametersFromJSON,
    ReportParametersToJSON,
    ReportTextConfigurationsCopyFromJSON,
    ReportTextConfigurationsCopyToJSON,
    ReportsFromJSON,
    ReportsToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface ChangeGenericReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genericReports: GenericReports;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyReportTextConfigurationRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reportTextConfigurationsCopy: ReportTextConfigurationsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteGenericReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: string;
    id?: Array<string>;
    idContext?: Array<string>;
    type?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReportParametersRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    id?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    excludeGroup?: string;
    includeInternalReports?: boolean;
    includeUnpublished?: boolean;
    includeWatermarkDetails?: boolean;
    limit?: number;
    multiPropertyOnly?: boolean;
    protectedReportParam?: boolean;
    scheduled?: boolean;
    name?: string;
    group?: string;
    hotel?: string;
    id?: string;
    idContext?: string;
    type?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostGenericReportsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    genericReports: GenericReports;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ReportApi extends runtime.BaseAPI {

    /**
     * Use this API to update generic reports. <p><strong>OperationId:</strong>changeGenericReports</p>
     * Update generic reports.
     */
    async changeGenericReportsRaw(requestParameters: ChangeGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GenericReports>> {
        if (requestParameters.genericReports === null || requestParameters.genericReports === undefined) {
            throw new runtime.RequiredError('genericReports','Required parameter requestParameters.genericReports was null or undefined when calling changeGenericReports.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/genericReports`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GenericReportsToJSON(requestParameters.genericReports),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenericReportsFromJSON(jsonValue));
    }

    /**
     * Use this API to update generic reports. <p><strong>OperationId:</strong>changeGenericReports</p>
     * Update generic reports.
     */
    async changeGenericReports(requestParameters: ChangeGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GenericReports> {
        const response = await this.changeGenericReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>copyReportTextConfiguration</p>
     * Operation to copy report text configuration.
     */
    async copyReportTextConfigurationRaw(requestParameters: CopyReportTextConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.reportTextConfigurationsCopy === null || requestParameters.reportTextConfigurationsCopy === undefined) {
            throw new runtime.RequiredError('reportTextConfigurationsCopy','Required parameter requestParameters.reportTextConfigurationsCopy was null or undefined when calling copyReportTextConfiguration.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reportTextConfiguration/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReportTextConfigurationsCopyToJSON(requestParameters.reportTextConfigurationsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>copyReportTextConfiguration</p>
     * Operation to copy report text configuration.
     */
    async copyReportTextConfiguration(requestParameters: CopyReportTextConfigurationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyReportTextConfigurationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete generic reports based on hotelId, Id, contextId. <p><strong>OperationId:</strong>deleteGenericReports</p>
     * Delete generic reports.
     */
    async deleteGenericReportsRaw(requestParameters: DeleteGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/genericReports`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete generic reports based on hotelId, Id, contextId. <p><strong>OperationId:</strong>deleteGenericReports</p>
     * Delete generic reports.
     */
    async deleteGenericReports(requestParameters: DeleteGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteGenericReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return report parameters based on search criteria such as id, idContext, type. <p><strong>OperationId:</strong>getReportParameters</p>
     * Return report parameters.
     */
    async getReportParametersRaw(requestParameters: GetReportParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReportParameters>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reportParameters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportParametersFromJSON(jsonValue));
    }

    /**
     * Use this API to return report parameters based on search criteria such as id, idContext, type. <p><strong>OperationId:</strong>getReportParameters</p>
     * Return report parameters.
     */
    async getReportParameters(requestParameters: GetReportParametersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReportParameters> {
        const response = await this.getReportParametersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to return reports based on search criteria such as excludeGroup, includeInternalReports, includeUnpublished, includeWatermarkDetails, limit, multiPropertyOnly, protectedReportParam, scheduled, name, group, hotel, id, idContext, type. <p><strong>OperationId:</strong>getReports</p>
     * Return reports.
     */
    async getReportsRaw(requestParameters: GetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reports>> {
        const queryParameters: any = {};

        if (requestParameters.excludeGroup !== undefined) {
            queryParameters['excludeGroup'] = requestParameters.excludeGroup;
        }

        if (requestParameters.includeInternalReports !== undefined) {
            queryParameters['includeInternalReports'] = requestParameters.includeInternalReports;
        }

        if (requestParameters.includeUnpublished !== undefined) {
            queryParameters['includeUnpublished'] = requestParameters.includeUnpublished;
        }

        if (requestParameters.includeWatermarkDetails !== undefined) {
            queryParameters['includeWatermarkDetails'] = requestParameters.includeWatermarkDetails;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.multiPropertyOnly !== undefined) {
            queryParameters['multiPropertyOnly'] = requestParameters.multiPropertyOnly;
        }

        if (requestParameters.protectedReportParam !== undefined) {
            queryParameters['protectedReportParam'] = requestParameters.protectedReportParam;
        }

        if (requestParameters.scheduled !== undefined) {
            queryParameters['scheduled'] = requestParameters.scheduled;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }

        if (requestParameters.hotel !== undefined) {
            queryParameters['hotel'] = requestParameters.hotel;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/reports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReportsFromJSON(jsonValue));
    }

    /**
     * Use this API to return reports based on search criteria such as excludeGroup, includeInternalReports, includeUnpublished, includeWatermarkDetails, limit, multiPropertyOnly, protectedReportParam, scheduled, name, group, hotel, id, idContext, type. <p><strong>OperationId:</strong>getReports</p>
     * Return reports.
     */
    async getReports(requestParameters: GetReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reports> {
        const response = await this.getReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create generic reports. <p><strong>OperationId:</strong>postGenericReports</p>
     * Create generic reports.
     */
    async postGenericReportsRaw(requestParameters: PostGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.genericReports === null || requestParameters.genericReports === undefined) {
            throw new runtime.RequiredError('genericReports','Required parameter requestParameters.genericReports was null or undefined when calling postGenericReports.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/genericReports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenericReportsToJSON(requestParameters.genericReports),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create generic reports. <p><strong>OperationId:</strong>postGenericReports</p>
     * Create generic reports.
     */
    async postGenericReports(requestParameters: PostGenericReportsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postGenericReportsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
