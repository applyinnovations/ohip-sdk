/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExternalUrlInfoType } from './ExternalUrlInfoType';
import {
    ExternalUrlInfoTypeFromJSON,
    ExternalUrlInfoTypeFromJSONTyped,
    ExternalUrlInfoTypeToJSON,
} from './ExternalUrlInfoType';
import type { ReportModuleTypeType } from './ReportModuleTypeType';
import {
    ReportModuleTypeTypeFromJSON,
    ReportModuleTypeTypeFromJSONTyped,
    ReportModuleTypeTypeToJSON,
} from './ReportModuleTypeType';
import type { TranslationTextType1000 } from './TranslationTextType1000';
import {
    TranslationTextType1000FromJSON,
    TranslationTextType1000FromJSONTyped,
    TranslationTextType1000ToJSON,
} from './TranslationTextType1000';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';
import type { WatermarkType } from './WatermarkType';
import {
    WatermarkTypeFromJSON,
    WatermarkTypeFromJSONTyped,
    WatermarkTypeToJSON,
} from './WatermarkType';

/**
 * Contains details about the report application module from the DB.
 * @export
 * @interface ReportType
 */
export interface ReportType {
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReportType
     */
    moduleId?: UniqueIDType;
    /**
     * Report name.
     * @type {string}
     * @memberof ReportType
     */
    reportName?: string;
    /**
     * 
     * @type {ReportModuleTypeType}
     * @memberof ReportType
     */
    moduleType?: ReportModuleTypeType;
    /**
     * 
     * @type {TranslationTextType1000}
     * @memberof ReportType
     */
    reportDescription?: TranslationTextType1000;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReportType
     */
    reportGroupId?: UniqueIDType;
    /**
     * Report group.
     * @type {string}
     * @memberof ReportType
     */
    reportGroup?: string;
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ReportType
     */
    attachedReports?: Array<UniqueIDType>;
    /**
     * 
     * @type {string}
     * @memberof ReportType
     */
    reportGroupDescription?: string;
    /**
     * 
     * @type {TranslationTextType1000}
     * @memberof ReportType
     */
    translatableReportGroupDescription?: TranslationTextType1000;
    /**
     * The hotel code that the report is associated with.
     * @type {string}
     * @memberof ReportType
     */
    hotel?: string;
    /**
     * Form which is run to collect parameter information to generate the report.
     * @type {string}
     * @memberof ReportType
     */
    formToRun?: string;
    /**
     * Report language code.
     * @type {string}
     * @memberof ReportType
     */
    languageCode?: string;
    /**
     * Flag which indicates whether the report requires parameters.
     * @type {boolean}
     * @memberof ReportType
     */
    hasParameters?: boolean;
    /**
     * Flag which indicates whether the report is a sample provided in the application.
     * @type {boolean}
     * @memberof ReportType
     */
    sample?: boolean;
    /**
     * Flag which indicates whether the report is customized by the user.
     * @type {boolean}
     * @memberof ReportType
     */
    customized?: boolean;
    /**
     * 
     * @type {UniqueIDType}
     * @memberof ReportType
     */
    customizedRtfAttachId?: UniqueIDType;
    /**
     * Flag which indicates if the report can be run separately.
     * @type {boolean}
     * @memberof ReportType
     */
    canRunSeperate?: boolean;
    /**
     * Flag which indicates if the report can be run for multiple properties.
     * @type {boolean}
     * @memberof ReportType
     */
    multiPropertyReport?: boolean;
    /**
     * Flag which indicates whether the report requires a procedure.
     * @type {boolean}
     * @memberof ReportType
     */
    procedureRequired?: boolean;
    /**
     * Flag which indicates whether the report is user defined.
     * @type {boolean}
     * @memberof ReportType
     */
    userDefinedReport?: boolean;
    /**
     * Flag which indicates whether the report is protected.
     * @type {boolean}
     * @memberof ReportType
     */
    protectedReport?: boolean;
    /**
     * Flag to indicate whether this is a system report.
     * @type {boolean}
     * @memberof ReportType
     */
    systemReport?: boolean;
    /**
     * Report default destination.
     * @type {string}
     * @memberof ReportType
     */
    destination?: string;
    /**
     * Default printer name.
     * @type {string}
     * @memberof ReportType
     */
    defaultPrinterName?: string;
    /**
     * Number of copies configured for report.
     * @type {number}
     * @memberof ReportType
     */
    copies?: number;
    /**
     * Flag to indicate whether this is a shift report.
     * @type {boolean}
     * @memberof ReportType
     */
    shiftReport?: boolean;
    /**
     * Set to ODT for BI Publisher reports.
     * @type {string}
     * @memberof ReportType
     */
    dataSourceType?: string;
    /**
     * Data source for BI Publisher reports.
     * @type {string}
     * @memberof ReportType
     */
    dataSource?: string;
    /**
     * A comma separated list of Opera V5 application indicators for which the report is enabled.
     * @type {string}
     * @memberof ReportType
     */
    usedInApp?: string;
    /**
     * A flag indicating that the report has been certified for use with Opera 9.
     * @type {boolean}
     * @memberof ReportType
     */
    opera9Certified?: boolean;
    /**
     * 
     * @type {WatermarkType}
     * @memberof ReportType
     */
    watermarkDetails?: WatermarkType;
    /**
     * 
     * @type {ExternalUrlInfoType}
     * @memberof ReportType
     */
    externalReportUrl?: ExternalUrlInfoType;
    /**
     * Rows for Key Packet report group.
     * @type {number}
     * @memberof ReportType
     */
    rowsPerPage?: number;
    /**
     * Columns for Key Packet report group.
     * @type {number}
     * @memberof ReportType
     */
    columnsPerPage?: number;
    /**
     * Flag to indicate whether the report can be exported to Excel.
     * @type {boolean}
     * @memberof ReportType
     */
    excelOutput?: boolean;
}

/**
 * Check if a given object implements the ReportType interface.
 */
export function instanceOfReportType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReportTypeFromJSON(json: any): ReportType {
    return ReportTypeFromJSONTyped(json, false);
}

export function ReportTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'moduleId': !exists(json, 'moduleId') ? undefined : UniqueIDTypeFromJSON(json['moduleId']),
        'reportName': !exists(json, 'reportName') ? undefined : json['reportName'],
        'moduleType': !exists(json, 'moduleType') ? undefined : ReportModuleTypeTypeFromJSON(json['moduleType']),
        'reportDescription': !exists(json, 'reportDescription') ? undefined : TranslationTextType1000FromJSON(json['reportDescription']),
        'reportGroupId': !exists(json, 'reportGroupId') ? undefined : UniqueIDTypeFromJSON(json['reportGroupId']),
        'reportGroup': !exists(json, 'reportGroup') ? undefined : json['reportGroup'],
        'attachedReports': !exists(json, 'attachedReports') ? undefined : ((json['attachedReports'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'reportGroupDescription': !exists(json, 'reportGroupDescription') ? undefined : json['reportGroupDescription'],
        'translatableReportGroupDescription': !exists(json, 'translatableReportGroupDescription') ? undefined : TranslationTextType1000FromJSON(json['translatableReportGroupDescription']),
        'hotel': !exists(json, 'hotel') ? undefined : json['hotel'],
        'formToRun': !exists(json, 'formToRun') ? undefined : json['formToRun'],
        'languageCode': !exists(json, 'languageCode') ? undefined : json['languageCode'],
        'hasParameters': !exists(json, 'hasParameters') ? undefined : json['hasParameters'],
        'sample': !exists(json, 'sample') ? undefined : json['sample'],
        'customized': !exists(json, 'customized') ? undefined : json['customized'],
        'customizedRtfAttachId': !exists(json, 'customizedRtfAttachId') ? undefined : UniqueIDTypeFromJSON(json['customizedRtfAttachId']),
        'canRunSeperate': !exists(json, 'canRunSeperate') ? undefined : json['canRunSeperate'],
        'multiPropertyReport': !exists(json, 'multiPropertyReport') ? undefined : json['multiPropertyReport'],
        'procedureRequired': !exists(json, 'procedureRequired') ? undefined : json['procedureRequired'],
        'userDefinedReport': !exists(json, 'userDefinedReport') ? undefined : json['userDefinedReport'],
        'protectedReport': !exists(json, 'protectedReport') ? undefined : json['protectedReport'],
        'systemReport': !exists(json, 'systemReport') ? undefined : json['systemReport'],
        'destination': !exists(json, 'destination') ? undefined : json['destination'],
        'defaultPrinterName': !exists(json, 'defaultPrinterName') ? undefined : json['defaultPrinterName'],
        'copies': !exists(json, 'copies') ? undefined : json['copies'],
        'shiftReport': !exists(json, 'shiftReport') ? undefined : json['shiftReport'],
        'dataSourceType': !exists(json, 'dataSourceType') ? undefined : json['dataSourceType'],
        'dataSource': !exists(json, 'dataSource') ? undefined : json['dataSource'],
        'usedInApp': !exists(json, 'usedInApp') ? undefined : json['usedInApp'],
        'opera9Certified': !exists(json, 'opera9Certified') ? undefined : json['opera9Certified'],
        'watermarkDetails': !exists(json, 'watermarkDetails') ? undefined : WatermarkTypeFromJSON(json['watermarkDetails']),
        'externalReportUrl': !exists(json, 'externalReportUrl') ? undefined : ExternalUrlInfoTypeFromJSON(json['externalReportUrl']),
        'rowsPerPage': !exists(json, 'rowsPerPage') ? undefined : json['rowsPerPage'],
        'columnsPerPage': !exists(json, 'columnsPerPage') ? undefined : json['columnsPerPage'],
        'excelOutput': !exists(json, 'excelOutput') ? undefined : json['excelOutput'],
    };
}

export function ReportTypeToJSON(value?: ReportType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'moduleId': UniqueIDTypeToJSON(value.moduleId),
        'reportName': value.reportName,
        'moduleType': ReportModuleTypeTypeToJSON(value.moduleType),
        'reportDescription': TranslationTextType1000ToJSON(value.reportDescription),
        'reportGroupId': UniqueIDTypeToJSON(value.reportGroupId),
        'reportGroup': value.reportGroup,
        'attachedReports': value.attachedReports === undefined ? undefined : ((value.attachedReports as Array<any>).map(UniqueIDTypeToJSON)),
        'reportGroupDescription': value.reportGroupDescription,
        'translatableReportGroupDescription': TranslationTextType1000ToJSON(value.translatableReportGroupDescription),
        'hotel': value.hotel,
        'formToRun': value.formToRun,
        'languageCode': value.languageCode,
        'hasParameters': value.hasParameters,
        'sample': value.sample,
        'customized': value.customized,
        'customizedRtfAttachId': UniqueIDTypeToJSON(value.customizedRtfAttachId),
        'canRunSeperate': value.canRunSeperate,
        'multiPropertyReport': value.multiPropertyReport,
        'procedureRequired': value.procedureRequired,
        'userDefinedReport': value.userDefinedReport,
        'protectedReport': value.protectedReport,
        'systemReport': value.systemReport,
        'destination': value.destination,
        'defaultPrinterName': value.defaultPrinterName,
        'copies': value.copies,
        'shiftReport': value.shiftReport,
        'dataSourceType': value.dataSourceType,
        'dataSource': value.dataSource,
        'usedInApp': value.usedInApp,
        'opera9Certified': value.opera9Certified,
        'watermarkDetails': WatermarkTypeToJSON(value.watermarkDetails),
        'externalReportUrl': ExternalUrlInfoTypeToJSON(value.externalReportUrl),
        'rowsPerPage': value.rowsPerPage,
        'columnsPerPage': value.columnsPerPage,
        'excelOutput': value.excelOutput,
    };
}

