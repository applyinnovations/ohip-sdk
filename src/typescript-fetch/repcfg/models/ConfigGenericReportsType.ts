/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs for adding, updating, and deleting stationery reports in OPERA Cloud.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConfigGenericReportType } from './ConfigGenericReportType';
import {
    ConfigGenericReportTypeFromJSON,
    ConfigGenericReportTypeFromJSONTyped,
    ConfigGenericReportTypeToJSON,
} from './ConfigGenericReportType';

/**
 * It contains collection of reports.
 * @export
 * @interface ConfigGenericReportsType
 */
export interface ConfigGenericReportsType {
    /**
     * A generic report.
     * @type {Array<ConfigGenericReportType>}
     * @memberof ConfigGenericReportsType
     */
    report?: Array<ConfigGenericReportType>;
    /**
     * Hotel code in which reports to be set up belong to.
     * @type {string}
     * @memberof ConfigGenericReportsType
     */
    hotelId?: string;
    /**
     * Chain code in which reports to be set up belong to.
     * @type {string}
     * @memberof ConfigGenericReportsType
     */
    chainCode?: string;
}

/**
 * Check if a given object implements the ConfigGenericReportsType interface.
 */
export function instanceOfConfigGenericReportsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConfigGenericReportsTypeFromJSON(json: any): ConfigGenericReportsType {
    return ConfigGenericReportsTypeFromJSONTyped(json, false);
}

export function ConfigGenericReportsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigGenericReportsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'report': !exists(json, 'report') ? undefined : ((json['report'] as Array<any>).map(ConfigGenericReportTypeFromJSON)),
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'chainCode': !exists(json, 'chainCode') ? undefined : json['chainCode'],
    };
}

export function ConfigGenericReportsTypeToJSON(value?: ConfigGenericReportsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'report': value.report === undefined ? undefined : ((value.report as Array<any>).map(ConfigGenericReportTypeToJSON)),
        'hotelId': value.hotelId,
        'chainCode': value.chainCode,
    };
}

