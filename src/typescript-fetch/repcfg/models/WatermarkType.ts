/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WatermarkModeType } from './WatermarkModeType';
import {
    WatermarkModeTypeFromJSON,
    WatermarkModeTypeFromJSONTyped,
    WatermarkModeTypeToJSON,
} from './WatermarkModeType';

/**
 * Details of the watermark to be used at the time of report generation.
 * @export
 * @interface WatermarkType
 */
export interface WatermarkType {
    /**
     * 
     * @type {WatermarkModeType}
     * @memberof WatermarkType
     */
    mode?: WatermarkModeType;
    /**
     * Watermark Text.
     * @type {string}
     * @memberof WatermarkType
     */
    text?: string;
    /**
     * Watermark font name.
     * @type {string}
     * @memberof WatermarkType
     */
    font?: string;
    /**
     * Watermark font name.
     * @type {number}
     * @memberof WatermarkType
     */
    fontSize?: number;
    /**
     * X position of watermark on page starting in lower left corner.
     * @type {number}
     * @memberof WatermarkType
     */
    xPosition?: number;
    /**
     * Y position of watermark on page starting in lower left corner.
     * @type {number}
     * @memberof WatermarkType
     */
    yPosition?: number;
    /**
     * Watermark angle in degrees.
     * @type {number}
     * @memberof WatermarkType
     */
    angle?: number;
    /**
     * Watermark color (red), value ranges from 0.0 to 1.0 ( Java API values ).
     * @type {number}
     * @memberof WatermarkType
     */
    red?: number;
    /**
     * Watermark color (green), value ranges from 0.0 to 1.0 ( Java API values ).
     * @type {number}
     * @memberof WatermarkType
     */
    green?: number;
    /**
     * Watermark color (blue), value ranges from 0.0 to 1.0 ( Java API values ).
     * @type {number}
     * @memberof WatermarkType
     */
    blue?: number;
}

/**
 * Check if a given object implements the WatermarkType interface.
 */
export function instanceOfWatermarkType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WatermarkTypeFromJSON(json: any): WatermarkType {
    return WatermarkTypeFromJSONTyped(json, false);
}

export function WatermarkTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WatermarkType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mode': !exists(json, 'mode') ? undefined : WatermarkModeTypeFromJSON(json['mode']),
        'text': !exists(json, 'text') ? undefined : json['text'],
        'font': !exists(json, 'font') ? undefined : json['font'],
        'fontSize': !exists(json, 'fontSize') ? undefined : json['fontSize'],
        'xPosition': !exists(json, 'xPosition') ? undefined : json['xPosition'],
        'yPosition': !exists(json, 'yPosition') ? undefined : json['yPosition'],
        'angle': !exists(json, 'angle') ? undefined : json['angle'],
        'red': !exists(json, 'red') ? undefined : json['red'],
        'green': !exists(json, 'green') ? undefined : json['green'],
        'blue': !exists(json, 'blue') ? undefined : json['blue'],
    };
}

export function WatermarkTypeToJSON(value?: WatermarkType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mode': WatermarkModeTypeToJSON(value.mode),
        'text': value.text,
        'font': value.font,
        'fontSize': value.fontSize,
        'xPosition': value.xPosition,
        'yPosition': value.yPosition,
        'angle': value.angle,
        'red': value.red,
        'green': value.green,
        'blue': value.blue,
    };
}

