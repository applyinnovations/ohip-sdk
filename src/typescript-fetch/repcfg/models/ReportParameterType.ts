/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LovParamDetailsType } from './LovParamDetailsType';
import {
    LovParamDetailsTypeFromJSON,
    LovParamDetailsTypeFromJSONTyped,
    LovParamDetailsTypeToJSON,
} from './LovParamDetailsType';
import type { ParamDataType } from './ParamDataType';
import {
    ParamDataTypeFromJSON,
    ParamDataTypeFromJSONTyped,
    ParamDataTypeToJSON,
} from './ParamDataType';
import type { ParamFormatMaskType } from './ParamFormatMaskType';
import {
    ParamFormatMaskTypeFromJSON,
    ParamFormatMaskTypeFromJSONTyped,
    ParamFormatMaskTypeToJSON,
} from './ParamFormatMaskType';

/**
 * Defines an individual report parameter.
 * @export
 * @interface ReportParameterType
 */
export interface ReportParameterType {
    /**
     * Individual report parameter details.
     * @type {string}
     * @memberof ReportParameterType
     */
    name?: string;
    /**
     * Display label for report parameter.
     * @type {string}
     * @memberof ReportParameterType
     */
    label?: string;
    /**
     * 
     * @type {ParamDataType}
     * @memberof ReportParameterType
     */
    dataType?: ParamDataType;
    /**
     * Initial report parameter value.
     * @type {string}
     * @memberof ReportParameterType
     */
    value?: string;
    /**
     * Date value from offset.
     * @type {string}
     * @memberof ReportParameterType
     */
    calculatedDateValue?: string;
    /**
     * Format mask for date report parameters.
     * @type {string}
     * @memberof ReportParameterType
     */
    dateFormatMask?: string;
    /**
     * Report parameter display order.
     * @type {number}
     * @memberof ReportParameterType
     */
    orderBy?: number;
    /**
     * Number of days to offset from current business date for date report parameter.
     * @type {number}
     * @memberof ReportParameterType
     */
    dateOffset?: number;
    /**
     * 
     * @type {ParamFormatMaskType}
     * @memberof ReportParameterType
     */
    formatMask?: ParamFormatMaskType;
    /**
     * 
     * @type {string}
     * @memberof ReportParameterType
     */
    buildStringForDateOffset?: string;
    /**
     * 
     * @type {LovParamDetailsType}
     * @memberof ReportParameterType
     */
    lovParam?: LovParamDetailsType;
}

/**
 * Check if a given object implements the ReportParameterType interface.
 */
export function instanceOfReportParameterType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReportParameterTypeFromJSON(json: any): ReportParameterType {
    return ReportParameterTypeFromJSONTyped(json, false);
}

export function ReportParameterTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReportParameterType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'dataType': !exists(json, 'dataType') ? undefined : ParamDataTypeFromJSON(json['dataType']),
        'value': !exists(json, 'value') ? undefined : json['value'],
        'calculatedDateValue': !exists(json, 'calculatedDateValue') ? undefined : json['calculatedDateValue'],
        'dateFormatMask': !exists(json, 'dateFormatMask') ? undefined : json['dateFormatMask'],
        'orderBy': !exists(json, 'orderBy') ? undefined : json['orderBy'],
        'dateOffset': !exists(json, 'dateOffset') ? undefined : json['dateOffset'],
        'formatMask': !exists(json, 'formatMask') ? undefined : ParamFormatMaskTypeFromJSON(json['formatMask']),
        'buildStringForDateOffset': !exists(json, 'buildStringForDateOffset') ? undefined : json['buildStringForDateOffset'],
        'lovParam': !exists(json, 'lovParam') ? undefined : LovParamDetailsTypeFromJSON(json['lovParam']),
    };
}

export function ReportParameterTypeToJSON(value?: ReportParameterType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'label': value.label,
        'dataType': ParamDataTypeToJSON(value.dataType),
        'value': value.value,
        'calculatedDateValue': value.calculatedDateValue,
        'dateFormatMask': value.dateFormatMask,
        'orderBy': value.orderBy,
        'dateOffset': value.dateOffset,
        'formatMask': ParamFormatMaskTypeToJSON(value.formatMask),
        'buildStringForDateOffset': value.buildStringForDateOffset,
        'lovParam': LovParamDetailsTypeToJSON(value.lovParam),
    };
}

