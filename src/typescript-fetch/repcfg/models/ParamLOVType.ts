/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Report Master Data Management API
 * APIs catering to the managing export master data configuration in a hotel.<br /><br /> Compatible with OPERA Cloud release 23.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.4
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents an individual LOV item for a report parameter.
 * @export
 * @interface ParamLOVType
 */
export interface ParamLOVType {
    /**
     * Report parameter LOV code.
     * @type {string}
     * @memberof ParamLOVType
     */
    code?: string;
    /**
     * Report parameter LOV label.
     * @type {string}
     * @memberof ParamLOVType
     */
    description?: string;
    /**
     * Report parameter LOV string (third attribute returned for some queries).
     * @type {string}
     * @memberof ParamLOVType
     */
    string?: string;
}

/**
 * Check if a given object implements the ParamLOVType interface.
 */
export function instanceOfParamLOVType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParamLOVTypeFromJSON(json: any): ParamLOVType {
    return ParamLOVTypeFromJSONTyped(json, false);
}

export function ParamLOVTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParamLOVType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'string': !exists(json, 'string') ? undefined : json['string'],
    };
}

export function ParamLOVTypeToJSON(value?: ParamLOVType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'description': value.description,
        'string': value.string,
    };
}

