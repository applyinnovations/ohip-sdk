/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConvertedHotelCode,
  ConvertedValues,
  DefaultValues,
  ExceptionDetailType,
} from '../models/index';
import {
    ConvertedHotelCodeFromJSON,
    ConvertedHotelCodeToJSON,
    ConvertedValuesFromJSON,
    ConvertedValuesToJSON,
    DefaultValuesFromJSON,
    DefaultValuesToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
} from '../models/index';

export interface GetConvertedValuesRequest {
    operaHotelId: string;
    extSystemCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    externalHotelId?: string;
    conversionCode?: Set<GetConvertedValuesConversionCodeEnum>;
    valueToBeConverted?: Array<string>;
    masterValue?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDefaultValuesRequest {
    operaHotelId: string;
    extSystemCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetOperaHotelCodeRequest {
    externalHotelId: string;
    extSystemCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    operaHotelCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class DataValueMappingApi extends runtime.BaseAPI {

    /**
     * This API allows you to get the converted values <p><strong>OperationId:</strong>getConvertedValues</p>
     * Fetch Converted Values
     */
    async getConvertedValuesRaw(requestParameters: GetConvertedValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConvertedValues>> {
        if (requestParameters.operaHotelId === null || requestParameters.operaHotelId === undefined) {
            throw new runtime.RequiredError('operaHotelId','Required parameter requestParameters.operaHotelId was null or undefined when calling getConvertedValues.');
        }

        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getConvertedValues.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getConvertedValues.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getConvertedValues.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getConvertedValues.');
        }

        const queryParameters: any = {};

        if (requestParameters.externalHotelId !== undefined) {
            queryParameters['externalHotelId'] = requestParameters.externalHotelId;
        }

        if (requestParameters.conversionCode) {
            queryParameters['conversionCode'] = requestParameters.conversionCode;
        }

        if (requestParameters.valueToBeConverted) {
            queryParameters['valueToBeConverted'] = requestParameters.valueToBeConverted;
        }

        if (requestParameters.masterValue) {
            queryParameters['masterValue'] = requestParameters.masterValue;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{operaHotelId}/convertedValues`.replace(`{${"operaHotelId"}}`, encodeURIComponent(String(requestParameters.operaHotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConvertedValuesFromJSON(jsonValue));
    }

    /**
     * This API allows you to get the converted values <p><strong>OperationId:</strong>getConvertedValues</p>
     * Fetch Converted Values
     */
    async getConvertedValues(requestParameters: GetConvertedValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConvertedValues> {
        const response = await this.getConvertedValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to get default values <p><strong>OperationId:</strong>getDefaultValues</p>
     * Fetch Default values
     */
    async getDefaultValuesRaw(requestParameters: GetDefaultValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultValues>> {
        if (requestParameters.operaHotelId === null || requestParameters.operaHotelId === undefined) {
            throw new runtime.RequiredError('operaHotelId','Required parameter requestParameters.operaHotelId was null or undefined when calling getDefaultValues.');
        }

        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getDefaultValues.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDefaultValues.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getDefaultValues.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getDefaultValues.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{operaHotelId}/defaultValues`.replace(`{${"operaHotelId"}}`, encodeURIComponent(String(requestParameters.operaHotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultValuesFromJSON(jsonValue));
    }

    /**
     * This API allows you to get default values <p><strong>OperationId:</strong>getDefaultValues</p>
     * Fetch Default values
     */
    async getDefaultValues(requestParameters: GetDefaultValuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultValues> {
        const response = await this.getDefaultValuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to get the converted hotel code <p><strong>OperationId:</strong>getOperaHotelCode</p>
     * Fetch Converted Hotel Code
     */
    async getOperaHotelCodeRaw(requestParameters: GetOperaHotelCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConvertedHotelCode>> {
        if (requestParameters.externalHotelId === null || requestParameters.externalHotelId === undefined) {
            throw new runtime.RequiredError('externalHotelId','Required parameter requestParameters.externalHotelId was null or undefined when calling getOperaHotelCode.');
        }

        if (requestParameters.extSystemCode === null || requestParameters.extSystemCode === undefined) {
            throw new runtime.RequiredError('extSystemCode','Required parameter requestParameters.extSystemCode was null or undefined when calling getOperaHotelCode.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getOperaHotelCode.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getOperaHotelCode.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getOperaHotelCode.');
        }

        const queryParameters: any = {};

        if (requestParameters.operaHotelCode !== undefined) {
            queryParameters['operaHotelCode'] = requestParameters.operaHotelCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/externalSystems/{extSystemCode}/hotels/{externalHotelId}/conversions`.replace(`{${"externalHotelId"}}`, encodeURIComponent(String(requestParameters.externalHotelId))).replace(`{${"extSystemCode"}}`, encodeURIComponent(String(requestParameters.extSystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConvertedHotelCodeFromJSON(jsonValue));
    }

    /**
     * This API allows you to get the converted hotel code <p><strong>OperationId:</strong>getOperaHotelCode</p>
     * Fetch Converted Hotel Code
     */
    async getOperaHotelCode(requestParameters: GetOperaHotelCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConvertedHotelCode> {
        const response = await this.getOperaHotelCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetConvertedValuesConversionCodeEnum = {
    AccountType: 'AccountType',
    ActionCode: 'ActionCode',
    ActionType: 'ActionType',
    ActivityLocation: 'ActivityLocation',
    ActivityStatus: 'ActivityStatus',
    ActivityType: 'ActivityType',
    ActivityTypeSc: 'ActivityTypeSc',
    AddressTypes: 'AddressTypes',
    ArrangementCode: 'ArrangementCode',
    BlockCancellationCodes: 'BlockCancellationCodes',
    BlockCodes: 'BlockCodes',
    BlockConversion: 'BlockConversion',
    BlockRanking: 'BlockRanking',
    BlockRateOverrideReason: 'BlockRateOverrideReason',
    BookingStatus: 'BookingStatus',
    BookingType: 'BookingType',
    BusiinessSegment: 'BusiinessSegment',
    CalendarEvent: 'CalendarEvent',
    CancellationCodes: 'CancellationCodes',
    CategoryCode: 'CategoryCode',
    CatItemrate: 'CatItemrate',
    CatRate: 'CatRate',
    CatServing: 'CatServing',
    CatSetup: 'CatSetup',
    ChannelCodes: 'ChannelCodes',
    ComboRoom: 'ComboRoom',
    CommentType: 'CommentType',
    CompetitionCode: 'CompetitionCode',
    CountryCode: 'CountryCode',
    CurrencyCode: 'CurrencyCode',
    DayType: 'DayType',
    DepartmentId: 'DepartmentId',
    DeptNoteCode: 'DeptNoteCode',
    DiscountReason: 'DiscountReason',
    DocumentType: 'DocumentType',
    EventType: 'EventType',
    FitContractType: 'FitContractType',
    Frequency: 'Frequency',
    FunctionSpaceLocation: 'FunctionSpaceLocation',
    FunctionSpaceRateType: 'FunctionSpaceRateType',
    GenderMf: 'GenderMf',
    GtdReq: 'GtdReq',
    GuestPreferenceCode: 'GuestPreferenceCode',
    GuestPreferenceType: 'GuestPreferenceType',
    IndustryCode: 'IndustryCode',
    InfluenceCode: 'InfluenceCode',
    LanguageCodes: 'LanguageCodes',
    MarketingCity: 'MarketingCity',
    MarketingRegion: 'MarketingRegion',
    MarketCode: 'MarketCode',
    MeetingRoomtype: 'MeetingRoomtype',
    MembershipLevel: 'MembershipLevel',
    MembershipType: 'MembershipType',
    MembershipTypeAirline: 'MembershipTypeAirline',
    Nationality: 'Nationality',
    OcrmBounceType: 'OcrmBounceType',
    OcrmEventType: 'OcrmEventType',
    OtaGuestPreferenceCode: 'OtaGuestPreferenceCode',
    PaymentMethod: 'PaymentMethod',
    PhoneType: 'PhoneType',
    PosFamilyGroup: 'PosFamilyGroup',
    PosMajorGroup: 'PosMajorGroup',
    PosMenuDef: 'PosMenuDef',
    PosRevenueCenter: 'PosRevenueCenter',
    PriceCode: 'PriceCode',
    ProductCode: 'ProductCode',
    ProfilePriority: 'ProfilePriority',
    ProfileSource: 'ProfileSource',
    ProfileType: 'ProfileType',
    RateCategory: 'RateCategory',
    RateCode: 'RateCode',
    RateProgram: 'RateProgram',
    RateToRateBlock: 'RateToRateBlock',
    RateType: 'RateType',
    ReasonCode: 'ReasonCode',
    Relationship: 'Relationship',
    ReservationStatus: 'ReservationStatus',
    ReservationType: 'ReservationType',
    ResvBookingMethod: 'ResvBookingMethod',
    RevenueGroups: 'RevenueGroups',
    RevenueType: 'RevenueType',
    Room: 'Room',
    RoomsPotential: 'RoomsPotential',
    RoomCategoryLabel: 'RoomCategoryLabel',
    RoomClass: 'RoomClass',
    RoomPool: 'RoomPool',
    RoomRepairsReasonCode: 'RoomRepairsReasonCode',
    RoomStatusReasons: 'RoomStatusReasons',
    RoutingCode: 'RoutingCode',
    Scope: 'Scope',
    ScopeCity: 'ScopeCity',
    ScAccPriority: 'ScAccPriority',
    ScAccRoomsPot: 'ScAccRoomsPot',
    ScAccSource: 'ScAccSource',
    ScDestination: 'ScDestination',
    ScFunctionSpace: 'ScFunctionSpace',
    ScFunctionSpaceRateCode: 'ScFunctionSpaceRateCode',
    ScFunctionSpaceSetup: 'ScFunctionSpaceSetup',
    ScRevenueTypes: 'ScRevenueTypes',
    ScSetupCode: 'ScSetupCode',
    ScTaskCode: 'ScTaskCode',
    ScTerritory: 'ScTerritory',
    ServiceRequestType: 'ServiceRequestType',
    SgiLanguage: 'SgiLanguage',
    SgiRequestCodes: 'SgiRequestCodes',
    SgiTitle: 'SgiTitle',
    SourceCode: 'SourceCode',
    State: 'State',
    Title: 'Title',
    TraceCode: 'TraceCode',
    TraceDepartment: 'TraceDepartment',
    TransportTypes: 'TransportTypes',
    TravelAgentCommissionCodes: 'TravelAgentCommissionCodes',
    TravelAgentCurrencyCodes: 'TravelAgentCurrencyCodes',
    Trxgenerates: 'Trxgenerates',
    TrxCode: 'TrxCode',
    VipLevel: 'VipLevel',
    WaitlistCodes: 'WaitlistCodes',
    WebuserSecurityQuestion: 'WebuserSecurityQuestion'
} as const;
export type GetConvertedValuesConversionCodeEnum = typeof GetConvertedValuesConversionCodeEnum[keyof typeof GetConvertedValuesConversionCodeEnum];
