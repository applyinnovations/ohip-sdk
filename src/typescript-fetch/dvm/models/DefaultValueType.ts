/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DefaultValueCodeType } from './DefaultValueCodeType';
import {
    DefaultValueCodeTypeFromJSON,
    DefaultValueCodeTypeFromJSONTyped,
    DefaultValueCodeTypeToJSON,
} from './DefaultValueCodeType';

/**
 * Details of the default value fetched for an interface and resort.
 * @export
 * @interface DefaultValueType
 */
export interface DefaultValueType {
    /**
     * Opera Value
     * @type {string}
     * @memberof DefaultValueType
     */
    operaDefault?: string;
    /**
     * Value used by the external vendors.
     * @type {string}
     * @memberof DefaultValueType
     */
    externalDefault?: string;
    /**
     * 
     * @type {DefaultValueCodeType}
     * @memberof DefaultValueType
     */
    defaultValueType?: DefaultValueCodeType;
}

/**
 * Check if a given object implements the DefaultValueType interface.
 */
export function instanceOfDefaultValueType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DefaultValueTypeFromJSON(json: any): DefaultValueType {
    return DefaultValueTypeFromJSONTyped(json, false);
}

export function DefaultValueTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DefaultValueType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'operaDefault': !exists(json, 'operaDefault') ? undefined : json['operaDefault'],
        'externalDefault': !exists(json, 'externalDefault') ? undefined : json['externalDefault'],
        'defaultValueType': !exists(json, 'defaultValueType') ? undefined : DefaultValueCodeTypeFromJSON(json['defaultValueType']),
    };
}

export function DefaultValueTypeToJSON(value?: DefaultValueType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'operaDefault': value.operaDefault,
        'externalDefault': value.externalDefault,
        'defaultValueType': DefaultValueCodeTypeToJSON(value.defaultValueType),
    };
}

