/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud DataValueMapping Service API
 * APIs which offer external systems to config and use values different than what are configured in opera<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DataValueMappingCodeType } from './DataValueMappingCodeType';
import {
    DataValueMappingCodeTypeFromJSON,
    DataValueMappingCodeTypeFromJSONTyped,
    DataValueMappingCodeTypeToJSON,
} from './DataValueMappingCodeType';

/**
 * Details of the converted value.
 * @export
 * @interface ConvertedValueType
 */
export interface ConvertedValueType {
    /**
     * Opera Value
     * @type {string}
     * @memberof ConvertedValueType
     */
    operaValue?: string;
    /**
     * Value used by the external vendors.
     * @type {string}
     * @memberof ConvertedValueType
     */
    externalValue?: string;
    /**
     * 
     * @type {DataValueMappingCodeType}
     * @memberof ConvertedValueType
     */
    conversionCode?: DataValueMappingCodeType;
    /**
     * Opera Master Value
     * @type {string}
     * @memberof ConvertedValueType
     */
    masterValue?: string;
    /**
     * The flag will be true for all the conversions that are pms defaults. In case there are more than one conversions available in opera.
     * @type {boolean}
     * @memberof ConvertedValueType
     */
    pmsDefaultConversion?: boolean;
    /**
     * The flag will be true for all the conversions that are crs defaults. In case there are more than one conversions available in opera.
     * @type {boolean}
     * @memberof ConvertedValueType
     */
    crsDefaultConversion?: boolean;
}

/**
 * Check if a given object implements the ConvertedValueType interface.
 */
export function instanceOfConvertedValueType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConvertedValueTypeFromJSON(json: any): ConvertedValueType {
    return ConvertedValueTypeFromJSONTyped(json, false);
}

export function ConvertedValueTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConvertedValueType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'operaValue': !exists(json, 'operaValue') ? undefined : json['operaValue'],
        'externalValue': !exists(json, 'externalValue') ? undefined : json['externalValue'],
        'conversionCode': !exists(json, 'conversionCode') ? undefined : DataValueMappingCodeTypeFromJSON(json['conversionCode']),
        'masterValue': !exists(json, 'masterValue') ? undefined : json['masterValue'],
        'pmsDefaultConversion': !exists(json, 'pmsDefaultConversion') ? undefined : json['pmsDefaultConversion'],
        'crsDefaultConversion': !exists(json, 'crsDefaultConversion') ? undefined : json['crsDefaultConversion'],
    };
}

export function ConvertedValueTypeToJSON(value?: ConvertedValueType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'operaValue': value.operaValue,
        'externalValue': value.externalValue,
        'conversionCode': DataValueMappingCodeTypeToJSON(value.conversionCode),
        'masterValue': value.masterValue,
        'pmsDefaultConversion': value.pmsDefaultConversion,
        'crsDefaultConversion': value.crsDefaultConversion,
    };
}

