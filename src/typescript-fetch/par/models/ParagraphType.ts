/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FormattedTextTextType } from './FormattedTextTextType';
import {
    FormattedTextTextTypeFromJSON,
    FormattedTextTextTypeFromJSONTyped,
    FormattedTextTextTypeToJSON,
} from './FormattedTextTextType';

/**
 * An indication of a new paragraph for a sub-section of a formatted text message.
 * @export
 * @interface ParagraphType
 */
export interface ParagraphType {
    /**
     * 
     * @type {FormattedTextTextType}
     * @memberof ParagraphType
     */
    text?: FormattedTextTextType;
    /**
     * An image for this paragraph.
     * @type {string}
     * @memberof ParagraphType
     */
    image?: string;
    /**
     * A URL for this paragraph.
     * @type {string}
     * @memberof ParagraphType
     */
    url?: string;
}

/**
 * Check if a given object implements the ParagraphType interface.
 */
export function instanceOfParagraphType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParagraphTypeFromJSON(json: any): ParagraphType {
    return ParagraphTypeFromJSONTyped(json, false);
}

export function ParagraphTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParagraphType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': !exists(json, 'text') ? undefined : FormattedTextTextTypeFromJSON(json['text']),
        'image': !exists(json, 'image') ? undefined : json['image'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function ParagraphTypeToJSON(value?: ParagraphType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': FormattedTextTextTypeToJSON(value.text),
        'image': value.image,
        'url': value.url,
    };
}

