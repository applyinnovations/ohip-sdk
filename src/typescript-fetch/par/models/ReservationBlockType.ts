/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UniqueIDType } from './UniqueIDType';
import {
    UniqueIDTypeFromJSON,
    UniqueIDTypeFromJSONTyped,
    UniqueIDTypeToJSON,
} from './UniqueIDType';

/**
 * Key information about the block for a reservation.
 * @export
 * @interface ReservationBlockType
 */
export interface ReservationBlockType {
    /**
     * Unique Id that references an object uniquely in the system.
     * @type {Array<UniqueIDType>}
     * @memberof ReservationBlockType
     */
    blockIdList?: Array<UniqueIDType>;
    /**
     * The Name of the block that is attached to the reservation.
     * @type {string}
     * @memberof ReservationBlockType
     */
    blockName?: string;
    /**
     * This is the HotelCode of the Block.
     * @type {string}
     * @memberof ReservationBlockType
     */
    hotelId?: string;
}

/**
 * Check if a given object implements the ReservationBlockType interface.
 */
export function instanceOfReservationBlockType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReservationBlockTypeFromJSON(json: any): ReservationBlockType {
    return ReservationBlockTypeFromJSONTyped(json, false);
}

export function ReservationBlockTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReservationBlockType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIdList': !exists(json, 'blockIdList') ? undefined : ((json['blockIdList'] as Array<any>).map(UniqueIDTypeFromJSON)),
        'blockName': !exists(json, 'blockName') ? undefined : json['blockName'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
    };
}

export function ReservationBlockTypeToJSON(value?: ReservationBlockType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIdList': value.blockIdList === undefined ? undefined : ((value.blockIdList as Array<any>).map(UniqueIDTypeToJSON)),
        'blockName': value.blockName,
        'hotelId': value.hotelId,
    };
}

