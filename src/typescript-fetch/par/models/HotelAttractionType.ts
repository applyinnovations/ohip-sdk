/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AddressType } from './AddressType';
import {
    AddressTypeFromJSON,
    AddressTypeFromJSONTyped,
    AddressTypeToJSON,
} from './AddressType';
import type { RelativePositionType } from './RelativePositionType';
import {
    RelativePositionTypeFromJSON,
    RelativePositionTypeFromJSONTyped,
    RelativePositionTypeToJSON,
} from './RelativePositionType';
import type { TranslationTextType2000 } from './TranslationTextType2000';
import {
    TranslationTextType2000FromJSON,
    TranslationTextType2000FromJSONTyped,
    TranslationTextType2000ToJSON,
} from './TranslationTextType2000';
import type { URLType } from './URLType';
import {
    URLTypeFromJSON,
    URLTypeFromJSONTyped,
    URLTypeToJSON,
} from './URLType';

/**
 * Information about the attractions near the hotel.
 * @export
 * @interface HotelAttractionType
 */
export interface HotelAttractionType {
    /**
     * 
     * @type {AddressType}
     * @memberof HotelAttractionType
     */
    address?: AddressType;
    /**
     * The class of the attraction.
     * @type {string}
     * @memberof HotelAttractionType
     */
    _class?: string;
    /**
     * 
     * @type {string}
     * @memberof HotelAttractionType
     */
    code?: string;
    /**
     * Display sequence of the attraction.
     * @type {number}
     * @memberof HotelAttractionType
     */
    displaySeq?: number;
    /**
     * Directions to the attraction from the hotel.
     * @type {string}
     * @memberof HotelAttractionType
     */
    generalDirections?: string;
    /**
     * 
     * @type {TranslationTextType2000}
     * @memberof HotelAttractionType
     */
    name?: TranslationTextType2000;
    /**
     * Price range for the attraction.
     * @type {string}
     * @memberof HotelAttractionType
     */
    operationHours?: string;
    /**
     * Price range for the attraction.
     * @type {string}
     * @memberof HotelAttractionType
     */
    priceRange?: string;
    /**
     * 
     * @type {RelativePositionType}
     * @memberof HotelAttractionType
     */
    relativePosition?: RelativePositionType;
    /**
     * The type of the attraction.
     * @type {string}
     * @memberof HotelAttractionType
     */
    type?: string;
    /**
     * 
     * @type {URLType}
     * @memberof HotelAttractionType
     */
    website?: URLType;
}

/**
 * Check if a given object implements the HotelAttractionType interface.
 */
export function instanceOfHotelAttractionType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function HotelAttractionTypeFromJSON(json: any): HotelAttractionType {
    return HotelAttractionTypeFromJSONTyped(json, false);
}

export function HotelAttractionTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): HotelAttractionType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': !exists(json, 'address') ? undefined : AddressTypeFromJSON(json['address']),
        '_class': !exists(json, 'class') ? undefined : json['class'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'displaySeq': !exists(json, 'displaySeq') ? undefined : json['displaySeq'],
        'generalDirections': !exists(json, 'generalDirections') ? undefined : json['generalDirections'],
        'name': !exists(json, 'name') ? undefined : TranslationTextType2000FromJSON(json['name']),
        'operationHours': !exists(json, 'operationHours') ? undefined : json['operationHours'],
        'priceRange': !exists(json, 'priceRange') ? undefined : json['priceRange'],
        'relativePosition': !exists(json, 'relativePosition') ? undefined : RelativePositionTypeFromJSON(json['relativePosition']),
        'type': !exists(json, 'type') ? undefined : json['type'],
        'website': !exists(json, 'website') ? undefined : URLTypeFromJSON(json['website']),
    };
}

export function HotelAttractionTypeToJSON(value?: HotelAttractionType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': AddressTypeToJSON(value.address),
        'class': value._class,
        'code': value.code,
        'displaySeq': value.displaySeq,
        'generalDirections': value.generalDirections,
        'name': TranslationTextType2000ToJSON(value.name),
        'operationHours': value.operationHours,
        'priceRange': value.priceRange,
        'relativePosition': RelativePositionTypeToJSON(value.relativePosition),
        'type': value.type,
        'website': URLTypeToJSON(value.website),
    };
}

