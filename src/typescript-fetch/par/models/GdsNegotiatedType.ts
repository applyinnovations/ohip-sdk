/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 24.4
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GdsNegotiatedInfoType } from './GdsNegotiatedInfoType';
import {
    GdsNegotiatedInfoTypeFromJSON,
    GdsNegotiatedInfoTypeFromJSONTyped,
    GdsNegotiatedInfoTypeToJSON,
} from './GdsNegotiatedInfoType';

/**
 * This holds a list of GdsNegotiatedInfoType.
 * @export
 * @interface GdsNegotiatedType
 */
export interface GdsNegotiatedType {
    /**
     * List of channel negotiated rates for the profile.
     * @type {Array<GdsNegotiatedInfoType>}
     * @memberof GdsNegotiatedType
     */
    gdsNegotiatedInfoList?: Array<GdsNegotiatedInfoType>;
    /**
     * Booking Channel Code.
     * @type {string}
     * @memberof GdsNegotiatedType
     */
    bookingChannelCode?: string;
    /**
     * Hotel Code.
     * @type {string}
     * @memberof GdsNegotiatedType
     */
    hotelId?: string;
    /**
     * Channel Room Type.
     * @type {string}
     * @memberof GdsNegotiatedType
     */
    channelRatePlanCode?: string;
}

/**
 * Check if a given object implements the GdsNegotiatedType interface.
 */
export function instanceOfGdsNegotiatedType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GdsNegotiatedTypeFromJSON(json: any): GdsNegotiatedType {
    return GdsNegotiatedTypeFromJSONTyped(json, false);
}

export function GdsNegotiatedTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): GdsNegotiatedType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'gdsNegotiatedInfoList': !exists(json, 'gdsNegotiatedInfoList') ? undefined : ((json['gdsNegotiatedInfoList'] as Array<any>).map(GdsNegotiatedInfoTypeFromJSON)),
        'bookingChannelCode': !exists(json, 'bookingChannelCode') ? undefined : json['bookingChannelCode'],
        'hotelId': !exists(json, 'hotelId') ? undefined : json['hotelId'],
        'channelRatePlanCode': !exists(json, 'channelRatePlanCode') ? undefined : json['channelRatePlanCode'],
    };
}

export function GdsNegotiatedTypeToJSON(value?: GdsNegotiatedType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'gdsNegotiatedInfoList': value.gdsNegotiatedInfoList === undefined ? undefined : ((value.gdsNegotiatedInfoList as Array<any>).map(GdsNegotiatedInfoTypeToJSON)),
        'bookingChannelCode': value.bookingChannelCode,
        'hotelId': value.hotelId,
        'channelRatePlanCode': value.channelRatePlanCode,
    };
}

