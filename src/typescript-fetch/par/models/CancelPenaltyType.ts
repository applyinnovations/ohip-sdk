/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OffsetUnitType } from './OffsetUnitType';
import {
    OffsetUnitTypeFromJSON,
    OffsetUnitTypeFromJSONTyped,
    OffsetUnitTypeToJSON,
} from './OffsetUnitType';
import type { PolicyAmountPercentType } from './PolicyAmountPercentType';
import {
    PolicyAmountPercentTypeFromJSON,
    PolicyAmountPercentTypeFromJSONTyped,
    PolicyAmountPercentTypeToJSON,
} from './PolicyAmountPercentType';
import type { PolicyDeadlineType } from './PolicyDeadlineType';
import {
    PolicyDeadlineTypeFromJSON,
    PolicyDeadlineTypeFromJSONTyped,
    PolicyDeadlineTypeToJSON,
} from './PolicyDeadlineType';

/**
 * The CancelPenalty class defines the cancellation policy of the hotel facility.
 * @export
 * @interface CancelPenaltyType
 */
export interface CancelPenaltyType {
    /**
     * 
     * @type {PolicyAmountPercentType}
     * @memberof CancelPenaltyType
     */
    amountPercent?: PolicyAmountPercentType;
    /**
     * 
     * @type {PolicyDeadlineType}
     * @memberof CancelPenaltyType
     */
    deadline?: PolicyDeadlineType;
    /**
     * Formatted Text Rule of the Cancellation Penalty.
     * @type {string}
     * @memberof CancelPenaltyType
     */
    formattedRule?: string;
    /**
     * Flag to indicate if the cancellation policy is manual.
     * @type {boolean}
     * @memberof CancelPenaltyType
     */
    manual?: boolean;
    /**
     * Indicates if the amount is refundable if booking is canceled.
     * @type {boolean}
     * @memberof CancelPenaltyType
     */
    nonRefundable?: boolean;
    /**
     * 
     * @type {OffsetUnitType}
     * @memberof CancelPenaltyType
     */
    offsetUnit?: OffsetUnitType;
    /**
     * Text description of the Penalty in a given language.
     * @type {string}
     * @memberof CancelPenaltyType
     */
    penaltyDescription?: string;
    /**
     * Policy Code.
     * @type {string}
     * @memberof CancelPenaltyType
     */
    policyCode?: string;
}

/**
 * Check if a given object implements the CancelPenaltyType interface.
 */
export function instanceOfCancelPenaltyType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CancelPenaltyTypeFromJSON(json: any): CancelPenaltyType {
    return CancelPenaltyTypeFromJSONTyped(json, false);
}

export function CancelPenaltyTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CancelPenaltyType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amountPercent': !exists(json, 'amountPercent') ? undefined : PolicyAmountPercentTypeFromJSON(json['amountPercent']),
        'deadline': !exists(json, 'deadline') ? undefined : PolicyDeadlineTypeFromJSON(json['deadline']),
        'formattedRule': !exists(json, 'formattedRule') ? undefined : json['formattedRule'],
        'manual': !exists(json, 'manual') ? undefined : json['manual'],
        'nonRefundable': !exists(json, 'nonRefundable') ? undefined : json['nonRefundable'],
        'offsetUnit': !exists(json, 'offsetUnit') ? undefined : OffsetUnitTypeFromJSON(json['offsetUnit']),
        'penaltyDescription': !exists(json, 'penaltyDescription') ? undefined : json['penaltyDescription'],
        'policyCode': !exists(json, 'policyCode') ? undefined : json['policyCode'],
    };
}

export function CancelPenaltyTypeToJSON(value?: CancelPenaltyType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amountPercent': PolicyAmountPercentTypeToJSON(value.amountPercent),
        'deadline': PolicyDeadlineTypeToJSON(value.deadline),
        'formattedRule': value.formattedRule,
        'manual': value.manual,
        'nonRefundable': value.nonRefundable,
        'offsetUnit': OffsetUnitTypeToJSON(value.offsetUnit),
        'penaltyDescription': value.penaltyDescription,
        'policyCode': value.policyCode,
    };
}

