/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality-integrations_ww@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AmountPointsType } from './AmountPointsType';
import {
    AmountPointsTypeFromJSON,
    AmountPointsTypeFromJSONTyped,
    AmountPointsTypeToJSON,
} from './AmountPointsType';
import type { UpsellType } from './UpsellType';
import {
    UpsellTypeFromJSON,
    UpsellTypeFromJSONTyped,
    UpsellTypeToJSON,
} from './UpsellType';

/**
 * List of upsell information
 * @export
 * @interface UpsellsType
 */
export interface UpsellsType {
    /**
     * 
     * @type {AmountPointsType}
     * @memberof UpsellsType
     */
    availableAmount?: AmountPointsType;
    /**
     * Holds upsell information
     * @type {Array<UpsellType>}
     * @memberof UpsellsType
     */
    upsell?: Array<UpsellType>;
}

/**
 * Check if a given object implements the UpsellsType interface.
 */
export function instanceOfUpsellsType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function UpsellsTypeFromJSON(json: any): UpsellsType {
    return UpsellsTypeFromJSONTyped(json, false);
}

export function UpsellsTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsellsType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'availableAmount': !exists(json, 'availableAmount') ? undefined : AmountPointsTypeFromJSON(json['availableAmount']),
        'upsell': !exists(json, 'upsell') ? undefined : ((json['upsell'] as Array<any>).map(UpsellTypeFromJSON)),
    };
}

export function UpsellsTypeToJSON(value?: UpsellsType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'availableAmount': AmountPointsTypeToJSON(value.availableAmount),
        'upsell': value.upsell === undefined ? undefined : ((value.upsell as Array<any>).map(UpsellTypeToJSON)),
    };
}

