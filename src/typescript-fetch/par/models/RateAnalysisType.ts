/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RateAnalysisCodeType } from './RateAnalysisCodeType';
import {
    RateAnalysisCodeTypeFromJSON,
    RateAnalysisCodeTypeFromJSONTyped,
    RateAnalysisCodeTypeToJSON,
} from './RateAnalysisCodeType';

/**
 * Analysis type which would be returned by the Analysis procedure.
 * @export
 * @interface RateAnalysisType
 */
export interface RateAnalysisType {
    /**
     * 
     * @type {RateAnalysisCodeType}
     * @memberof RateAnalysisType
     */
    code?: RateAnalysisCodeType;
    /**
     * The date of the analysis.
     * @type {Date}
     * @memberof RateAnalysisType
     */
    date?: Date;
    /**
     * The description of the restriction which was analyzed.
     * @type {string}
     * @memberof RateAnalysisType
     */
    description?: string;
}

/**
 * Check if a given object implements the RateAnalysisType interface.
 */
export function instanceOfRateAnalysisType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RateAnalysisTypeFromJSON(json: any): RateAnalysisType {
    return RateAnalysisTypeFromJSONTyped(json, false);
}

export function RateAnalysisTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateAnalysisType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : RateAnalysisCodeTypeFromJSON(json['code']),
        'date': !exists(json, 'date') ? undefined : (new Date(json['date'])),
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function RateAnalysisTypeToJSON(value?: RateAnalysisType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': RateAnalysisCodeTypeToJSON(value.code),
        'date': value.date === undefined ? undefined : (value.date.toISOString().substr(0,10)),
        'description': value.description,
    };
}

