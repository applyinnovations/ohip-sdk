/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Price Availability Rate API
 * APIs to cater for Price and Rate Availability functionality in OPERA Cloud. <br /><br />Availability enables you to manage your room inventory by providing a detailed view of all available and sold rooms at a property. Some of the tasks you can perform include defining conditions for stay restrictions, setting room sell limits, and searching for and viewing room availability.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AlternateAvailability,
  AvailabilityRatePlanInfo,
  AvailableUpsells,
  ChangeHurdleRatesDetails,
  ClearAllRestrictions,
  ClearAllRestrictionsRequest,
  ExceptionDetailType,
  GuaranteeablePreferences,
  HotelAvailability,
  HurdleRates,
  PostHurdleRatesRequest,
  PostRestrictionRequest,
  PutHurdleRatesRequest,
  RateAnalysisDetails,
  ReservationGuaranteesPolicies,
  RestrictionsByDateRange,
  RestrictionsHistory,
  SearchHotelsDetails,
  Status,
  ValidateReservationGuaranteesRequest,
} from '../models';
import {
    AlternateAvailabilityFromJSON,
    AlternateAvailabilityToJSON,
    AvailabilityRatePlanInfoFromJSON,
    AvailabilityRatePlanInfoToJSON,
    AvailableUpsellsFromJSON,
    AvailableUpsellsToJSON,
    ChangeHurdleRatesDetailsFromJSON,
    ChangeHurdleRatesDetailsToJSON,
    ClearAllRestrictionsFromJSON,
    ClearAllRestrictionsToJSON,
    ClearAllRestrictionsRequestFromJSON,
    ClearAllRestrictionsRequestToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    GuaranteeablePreferencesFromJSON,
    GuaranteeablePreferencesToJSON,
    HotelAvailabilityFromJSON,
    HotelAvailabilityToJSON,
    HurdleRatesFromJSON,
    HurdleRatesToJSON,
    PostHurdleRatesRequestFromJSON,
    PostHurdleRatesRequestToJSON,
    PostRestrictionRequestFromJSON,
    PostRestrictionRequestToJSON,
    PutHurdleRatesRequestFromJSON,
    PutHurdleRatesRequestToJSON,
    RateAnalysisDetailsFromJSON,
    RateAnalysisDetailsToJSON,
    ReservationGuaranteesPoliciesFromJSON,
    ReservationGuaranteesPoliciesToJSON,
    RestrictionsByDateRangeFromJSON,
    RestrictionsByDateRangeToJSON,
    RestrictionsHistoryFromJSON,
    RestrictionsHistoryToJSON,
    SearchHotelsDetailsFromJSON,
    SearchHotelsDetailsToJSON,
    StatusFromJSON,
    StatusToJSON,
    ValidateReservationGuaranteesRequestFromJSON,
    ValidateReservationGuaranteesRequestToJSON,
} from '../models';

export interface AnalyzeRateAvailabilityRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCode?: string;
    roomType?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    numberOfRooms?: number;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    blockId?: string;
    blockIdType?: string;
    reservationId?: Array<string>;
    reservationIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ClearAllRestrictionsOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    clearAllRestrictions?: ClearAllRestrictionsRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteHurdleRatesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hurdleDate?: Array<Date>;
    roomType?: Array<string>;
    roomCategory?: Array<string>;
    yieldCategory?: Array<string>;
    lengthOfStay?: Array<number>;
    yieldMarketCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRestrictionRequest {
    restrictionId?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    restrictionEndDate?: Date;
    restrictionStartDate?: Date;
    bookingChannelCode?: string;
    ratePlanCategory?: string;
    ratePlanCode?: string;
    roomClass?: string;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAlternateAvailabilityRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCode?: string;
    redemption?: boolean;
    roomType?: string;
    roomNumber?: string;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    quantity?: number;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    reservationProfileType?: Set<GetAlternateAvailabilityReservationProfileTypeEnum>;
    blockCode?: string;
    blockName?: string;
    blockId?: string;
    blockIdType?: string;
    membershipLevel?: string;
    membershipType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailabilityRatePlanInfoRequest {
    ratePlanCode?: string;
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCodeList?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailabilityRatePlanInfoByMultipleRatePlansRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCodeList?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetAvailableUpsellsRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    reservationId?: string;
    profileId?: string;
    reservationStatus?: GetAvailableUpsellsReservationStatusEnum;
    startDate?: Date;
    endDate?: Date;
    ratePlanCode?: string;
    roomType?: string;
    adults?: number;
    children?: number;
    rateAmount?: number;
    guaranteeCode?: string;
    marketCode?: string;
    fixedRate?: boolean;
    rateDate?: Array<Date>;
    requiredAmount?: Array<number>;
    numberOfRooms?: number;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetGuaranteeablePreferencesRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    startDate?: Date;
    endDate?: Date;
    roomType?: string;
    availableCode?: Array<string>;
    requestedCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelAvailabilityRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cro?: Array<string>;
    includeClosedRates?: Array<boolean>;
    includeDefaultRatePlanSet?: Array<boolean>;
    initialRatePlanSet?: Array<boolean>;
    limit?: Array<number>;
    pagePointerKey?: Array<string>;
    ratePlanSet?: Array<string>;
    redeemAwards?: Array<boolean>;
    roomStayStartDate?: Date;
    roomStayEndDate?: Date;
    roomStayQuantity?: number;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    fullStayTimeSpanStartDate?: Date;
    fullStayTimeSpanEndDate?: Date;
    prevailingRate?: boolean;
    rateCategory?: string;
    rateClass?: string;
    rateGroup?: string;
    ratePlanCode?: Array<string>;
    promotionCode?: Array<string>;
    roomType?: Array<string>;
    feature?: Array<string>;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    reservationProfileType?: Set<GetHotelAvailabilityReservationProfileTypeEnum>;
    attachedProfileId?: Array<string>;
    hotelReservationId?: string;
    hotelReservationIdType?: string;
    ratePlanInfo?: boolean;
    returnOnlyAvailableRateCodes?: boolean;
    resGuaranteeInfo?: boolean;
    roomTypeInfo?: boolean;
    membershipIdNumber?: Array<number>;
    membershipLevel?: Array<string>;
    membershipType?: Array<string>;
    pointsAvailable?: Array<number>;
    smokingPreference?: Array<string>;
    hotelPackage?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelAvailabilityCRORequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cro?: Array<string>;
    hotelIds?: Array<string>;
    includeClosedRates?: Array<boolean>;
    includeDefaultRatePlanSet?: Array<boolean>;
    initialRatePlanSet?: Array<boolean>;
    limit?: Array<number>;
    pagePointerKey?: Array<string>;
    ratePlanSet?: Array<string>;
    redeemAwards?: Array<boolean>;
    roomStayStartDate?: Date;
    roomStayEndDate?: Date;
    roomStayQuantity?: number;
    adults?: number;
    children?: number;
    childAge?: Array<number>;
    bucket1Count?: number;
    bucket2Count?: number;
    bucket3Count?: number;
    bucket4Count?: number;
    bucket5Count?: number;
    fullStayTimeSpanStartDate?: Date;
    fullStayTimeSpanEndDate?: Date;
    prevailingRate?: boolean;
    rateCategory?: string;
    rateClass?: string;
    rateGroup?: string;
    ratePlanCode?: Array<string>;
    promotionCode?: Array<string>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    feature?: Array<string>;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    reservationProfileType?: Set<GetHotelAvailabilityCROReservationProfileTypeEnum>;
    attachedProfileId?: Array<string>;
    hotelReservationId?: string;
    hotelReservationIdType?: string;
    ratePlanInfo?: boolean;
    returnOnlyAvailableRateCodes?: boolean;
    resGuaranteeInfo?: boolean;
    roomTypeInfo?: boolean;
    membershipIdNumber?: Array<number>;
    membershipLevel?: Array<string>;
    membershipType?: Array<string>;
    pointsAvailable?: Array<number>;
    smokingPreference?: Array<string>;
    hotelPackage?: Array<string>;
    yieldMarketCode?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHotelsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cro?: string;
    limit?: number;
    startDate?: Date;
    endDate?: Date;
    quantity?: number;
    adults?: number;
    children?: number;
    alternateHotels?: boolean;
    hotelId?: Array<string>;
    regionCode?: string;
    city?: Array<string>;
    hotelType?: Array<string>;
    hotelAmenity?: Array<string>;
    attraction?: Array<string>;
    hotelPackage?: Array<string>;
    prevailingRate?: boolean;
    rateCategory?: string;
    rateClass?: string;
    rateGroup?: string;
    ratePlanCode?: Array<string>;
    ratePlanId?: Array<string>;
    promotionCode?: Array<string>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    bedType?: Array<string>;
    feature?: Array<string>;
    reservationGuestId?: string;
    reservationGuestIdType?: string;
    reservationProfileType?: Set<GetHotelsReservationProfileTypeEnum>;
    id?: Array<string>;
    currencyExchangeRates?: boolean;
    ratePlanInfo?: boolean;
    resGuaranteeInfo?: boolean;
    returnAllRates?: boolean;
    roomTypeInfo?: boolean;
    sellMessages?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetHurdleRatesRequest {
    hotelId?: string;
    hurdleDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    limit?: number;
    roomTypesCode?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetReservationGuaranteesRequest {
    hotelId?: string;
    arrivalDate?: Date;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    ratePlanCode?: string;
    blockId?: string;
    reservationGuestId?: string;
    companyId?: string;
    travelAgentId?: string;
    sourceId?: string;
    groupId?: string;
    guaranteeCode?: string;
    calculateEstimateAmount?: boolean;
    startDate?: Date;
    endDate?: Date;
    numberOfRooms?: number;
    numberOfAdults?: number;
    numberOfChildren?: number;
    roomType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRestrictionsByDateRangeRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    chainName?: string;
    end?: Date;
    fetchSizeByDay?: number;
    limit?: number;
    restrictionInfo?: GetRestrictionsByDateRangeRestrictionInfoEnum;
    restrictionSearchCriteriaStartDate?: Date;
    bookingChannelCode?: string;
    ratePlanCategory?: string;
    ratePlanCode?: string;
    roomClass?: string;
    roomType?: string;
    filterCodeCategory?: GetRestrictionsByDateRangeFilterCodeCategoryEnum;
    filterCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRestrictionsHistoryRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    chainName?: string;
    date?: Date;
    bookingChannelCode?: string;
    ratePlanCategory?: string;
    ratePlanCode?: string;
    roomClass?: string;
    roomType?: string;
    filterCodeCategory?: GetRestrictionsHistoryFilterCodeCategoryEnum;
    filterCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostHurdleRatesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createHurdleRates?: PostHurdleRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRestrictionOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    createRestriction?: PostRestrictionRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutHurdleRatesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    changeHurdleRates?: PutHurdleRatesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ValidateReservationGuaranteesOperationRequest {
    hotelId?: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    validateReservationGuarantees?: ValidateReservationGuaranteesRequest;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class AvailabilityApi extends runtime.BaseAPI {

    /**
     * This API allows to Analyze Rate Availability. Rate analysis request to include the rate code, room type and room span to analyze whether a rate is closed and the reasons. <p><strong>OperationId:</strong>analyzeRateAvailability</p>
     * Analyze Rate Availability 
     */
    async analyzeRateAvailabilityRaw(requestParameters: AnalyzeRateAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateAnalysisDetails>> {
        const queryParameters: any = {};

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.numberOfRooms !== undefined) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.reservationId) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.reservationIdType) {
            queryParameters['reservationIdType'] = requestParameters.reservationIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/analyzeRateAvailability`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateAnalysisDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows to Analyze Rate Availability. Rate analysis request to include the rate code, room type and room span to analyze whether a rate is closed and the reasons. <p><strong>OperationId:</strong>analyzeRateAvailability</p>
     * Analyze Rate Availability 
     */
    async analyzeRateAvailability(requestParameters: AnalyzeRateAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateAnalysisDetails> {
        const response = await this.analyzeRateAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to clear all Restrictions for a hotel on given date. The hotel code and the date will need to be passed as part of the request.<p><strong>OperationId:</strong>clearAllRestrictions</p>
     * Clear all restrictions
     */
    async clearAllRestrictionsRaw(requestParameters: ClearAllRestrictionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClearAllRestrictions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restrictions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClearAllRestrictionsRequestToJSON(requestParameters.clearAllRestrictions),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClearAllRestrictionsFromJSON(jsonValue));
    }

    /**
     * Use this API to clear all Restrictions for a hotel on given date. The hotel code and the date will need to be passed as part of the request.<p><strong>OperationId:</strong>clearAllRestrictions</p>
     * Clear all restrictions
     */
    async clearAllRestrictions(requestParameters: ClearAllRestrictionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClearAllRestrictions> {
        const response = await this.clearAllRestrictionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to delete hurdles rates. <p><strong>OperationId:</strong>deleteHurdleRates</p>
     * Delete Hurdle Rates
     */
    async deleteHurdleRatesRaw(requestParameters: DeleteHurdleRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.hurdleDate) {
            queryParameters['hurdleDate'] = requestParameters.hurdleDate;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomCategory) {
            queryParameters['roomCategory'] = requestParameters.roomCategory;
        }

        if (requestParameters.yieldCategory) {
            queryParameters['yieldCategory'] = requestParameters.yieldCategory;
        }

        if (requestParameters.lengthOfStay) {
            queryParameters['lengthOfStay'] = requestParameters.lengthOfStay;
        }

        if (requestParameters.yieldMarketCode) {
            queryParameters['yieldMarketCode'] = requestParameters.yieldMarketCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows to delete hurdles rates. <p><strong>OperationId:</strong>deleteHurdleRates</p>
     * Delete Hurdle Rates
     */
    async deleteHurdleRates(requestParameters: DeleteHurdleRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteHurdleRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to Delete a given restriction. The date range is passed along with the restriction control type details which can include house, room type, room class or rate plan information. The unique criteria has been defined with one of these combinations: restrictionType, restrictionStartDate, restrictionEndDate, bookingChannelCode, ratePlanCategory, ratePlanCode, roomClass, roomType.<p><strong>OperationId:</strong>deleteRestriction</p>
     * Delete a Restriction 
     */
    async deleteRestrictionRaw(requestParameters: DeleteRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.restrictionEndDate !== undefined) {
            queryParameters['restrictionEndDate'] = (requestParameters.restrictionEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.restrictionStartDate !== undefined) {
            queryParameters['restrictionStartDate'] = (requestParameters.restrictionStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.ratePlanCategory !== undefined) {
            queryParameters['ratePlanCategory'] = requestParameters.ratePlanCategory;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restrictions/{restrictionId}`.replace(`{${"restrictionId"}}`, encodeURIComponent(String(requestParameters.restrictionId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows to Delete a given restriction. The date range is passed along with the restriction control type details which can include house, room type, room class or rate plan information. The unique criteria has been defined with one of these combinations: restrictionType, restrictionStartDate, restrictionEndDate, bookingChannelCode, ratePlanCategory, ratePlanCode, roomClass, roomType.<p><strong>OperationId:</strong>deleteRestriction</p>
     * Delete a Restriction 
     */
    async deleteRestriction(requestParameters: DeleteRestrictionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRestrictionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get alternate dates for closed rates. Filter criteria include dates, room stay information, profile, block or guest information.<p><strong>OperationId:</strong>getAlternateAvailability</p>
     * Get alternate availability
     */
    async getAlternateAvailabilityRaw(requestParameters: GetAlternateAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AlternateAvailability>> {
        const queryParameters: any = {};

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.redemption !== undefined) {
            queryParameters['redemption'] = requestParameters.redemption;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomNumber !== undefined) {
            queryParameters['roomNumber'] = requestParameters.roomNumber;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.reservationProfileType) {
            queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
        }

        if (requestParameters.blockCode !== undefined) {
            queryParameters['blockCode'] = requestParameters.blockCode;
        }

        if (requestParameters.blockName !== undefined) {
            queryParameters['blockName'] = requestParameters.blockName;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.blockIdType !== undefined) {
            queryParameters['blockIdType'] = requestParameters.blockIdType;
        }

        if (requestParameters.membershipLevel !== undefined) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipType !== undefined) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/availability/alternate`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AlternateAvailabilityFromJSON(jsonValue));
    }

    /**
     * Use this API to get alternate dates for closed rates. Filter criteria include dates, room stay information, profile, block or guest information.<p><strong>OperationId:</strong>getAlternateAvailability</p>
     * Get alternate availability
     */
    async getAlternateAvailability(requestParameters: GetAlternateAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AlternateAvailability> {
        const response = await this.getAlternateAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API fetches the ratePlan information like description, short information, long information, Web URL for the ratePlan and Commission Code. The rate plan code list can be passed as part of the criteria in the request. <p><strong>OperationId:</strong>getAvailabilityRatePlanInfo</p>
     * Get Rate Plan Information 
     */
    async getAvailabilityRatePlanInfoRaw(requestParameters: GetAvailabilityRatePlanInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityRatePlanInfo>> {
        const queryParameters: any = {};

        if (requestParameters.ratePlanCodeList) {
            queryParameters['ratePlanCodeList'] = requestParameters.ratePlanCodeList;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rates/{ratePlanCode}`.replace(`{${"ratePlanCode"}}`, encodeURIComponent(String(requestParameters.ratePlanCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityRatePlanInfoFromJSON(jsonValue));
    }

    /**
     * This API fetches the ratePlan information like description, short information, long information, Web URL for the ratePlan and Commission Code. The rate plan code list can be passed as part of the criteria in the request. <p><strong>OperationId:</strong>getAvailabilityRatePlanInfo</p>
     * Get Rate Plan Information 
     */
    async getAvailabilityRatePlanInfo(requestParameters: GetAvailabilityRatePlanInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityRatePlanInfo> {
        const response = await this.getAvailabilityRatePlanInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Operation description<p><strong>OperationId:</strong>getAvailabilityRatePlanInfoByMultipleRatePlans</p>
     * Use this API to get Rate Plan information such as commission codes, market codes, and rate category. 
     */
    async getAvailabilityRatePlanInfoByMultipleRatePlansRaw(requestParameters: GetAvailabilityRatePlanInfoByMultipleRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailabilityRatePlanInfo>> {
        const queryParameters: any = {};

        if (requestParameters.ratePlanCodeList) {
            queryParameters['ratePlanCodeList'] = requestParameters.ratePlanCodeList;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/rates`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailabilityRatePlanInfoFromJSON(jsonValue));
    }

    /**
     * Operation description<p><strong>OperationId:</strong>getAvailabilityRatePlanInfoByMultipleRatePlans</p>
     * Use this API to get Rate Plan information such as commission codes, market codes, and rate category. 
     */
    async getAvailabilityRatePlanInfoByMultipleRatePlans(requestParameters: GetAvailabilityRatePlanInfoByMultipleRatePlansRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailabilityRatePlanInfo> {
        const response = await this.getAvailabilityRatePlanInfoByMultipleRatePlansRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to fetch for Available Up-sells for specific hotel and date range. <p><strong>OperationId:</strong>getAvailableUpsells</p>
     * Get for Available Up-sells
     */
    async getAvailableUpsellsRaw(requestParameters: GetAvailableUpsellsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableUpsells>> {
        const queryParameters: any = {};

        if (requestParameters.reservationId !== undefined) {
            queryParameters['reservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.profileId !== undefined) {
            queryParameters['profileId'] = requestParameters.profileId;
        }

        if (requestParameters.reservationStatus !== undefined) {
            queryParameters['reservationStatus'] = requestParameters.reservationStatus;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.rateAmount !== undefined) {
            queryParameters['rateAmount'] = requestParameters.rateAmount;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.marketCode !== undefined) {
            queryParameters['marketCode'] = requestParameters.marketCode;
        }

        if (requestParameters.fixedRate !== undefined) {
            queryParameters['fixedRate'] = requestParameters.fixedRate;
        }

        if (requestParameters.rateDate) {
            queryParameters['rateDate'] = requestParameters.rateDate;
        }

        if (requestParameters.requiredAmount) {
            queryParameters['requiredAmount'] = requestParameters.requiredAmount;
        }

        if (requestParameters.numberOfRooms !== undefined) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/availableUpsells`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableUpsellsFromJSON(jsonValue));
    }

    /**
     * This API allows to fetch for Available Up-sells for specific hotel and date range. <p><strong>OperationId:</strong>getAvailableUpsells</p>
     * Get for Available Up-sells
     */
    async getAvailableUpsells(requestParameters: GetAvailableUpsellsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableUpsells> {
        const response = await this.getAvailableUpsellsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Guarantee-able Preference Codes for a specified property. <p><strong>OperationId:</strong>getGuaranteeablePreferences</p>
     * Get Guarantee-able Preference Codes
     */
    async getGuaranteeablePreferencesRaw(requestParameters: GetGuaranteeablePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GuaranteeablePreferences>> {
        const queryParameters: any = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.availableCode) {
            queryParameters['availableCode'] = requestParameters.availableCode;
        }

        if (requestParameters.requestedCode) {
            queryParameters['requestedCode'] = requestParameters.requestedCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guaranteeablePreferences`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GuaranteeablePreferencesFromJSON(jsonValue));
    }

    /**
     * Get Guarantee-able Preference Codes for a specified property. <p><strong>OperationId:</strong>getGuaranteeablePreferences</p>
     * Get Guarantee-able Preference Codes
     */
    async getGuaranteeablePreferences(requestParameters: GetGuaranteeablePreferencesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GuaranteeablePreferences> {
        const response = await this.getGuaranteeablePreferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get hotel availability for multiple hotels, given dates, Rate Plans, Rate Category, Rate Group, Membership Rates, and number of people. By default five records are returned unless a higher number is specified in the limit query parameter.<p><strong>OperationId:</strong>getHotelAvailability</p>
     * Get hotel availability
     */
    async getHotelAvailabilityRaw(requestParameters: GetHotelAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelAvailability>> {
        const queryParameters: any = {};

        if (requestParameters.cro) {
            queryParameters['cro'] = requestParameters.cro;
        }

        if (requestParameters.includeClosedRates) {
            queryParameters['includeClosedRates'] = requestParameters.includeClosedRates;
        }

        if (requestParameters.includeDefaultRatePlanSet) {
            queryParameters['includeDefaultRatePlanSet'] = requestParameters.includeDefaultRatePlanSet;
        }

        if (requestParameters.initialRatePlanSet) {
            queryParameters['initialRatePlanSet'] = requestParameters.initialRatePlanSet;
        }

        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pagePointerKey) {
            queryParameters['pagePointerKey'] = requestParameters.pagePointerKey;
        }

        if (requestParameters.ratePlanSet) {
            queryParameters['ratePlanSet'] = requestParameters.ratePlanSet;
        }

        if (requestParameters.redeemAwards) {
            queryParameters['redeemAwards'] = requestParameters.redeemAwards;
        }

        if (requestParameters.roomStayStartDate !== undefined) {
            queryParameters['roomStayStartDate'] = (requestParameters.roomStayStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomStayEndDate !== undefined) {
            queryParameters['roomStayEndDate'] = (requestParameters.roomStayEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomStayQuantity !== undefined) {
            queryParameters['roomStayQuantity'] = requestParameters.roomStayQuantity;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.fullStayTimeSpanStartDate !== undefined) {
            queryParameters['fullStayTimeSpanStartDate'] = (requestParameters.fullStayTimeSpanStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fullStayTimeSpanEndDate !== undefined) {
            queryParameters['fullStayTimeSpanEndDate'] = (requestParameters.fullStayTimeSpanEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.prevailingRate !== undefined) {
            queryParameters['prevailingRate'] = requestParameters.prevailingRate;
        }

        if (requestParameters.rateCategory !== undefined) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.rateClass !== undefined) {
            queryParameters['rateClass'] = requestParameters.rateClass;
        }

        if (requestParameters.rateGroup !== undefined) {
            queryParameters['rateGroup'] = requestParameters.rateGroup;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.promotionCode) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.feature) {
            queryParameters['feature'] = requestParameters.feature;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.reservationProfileType) {
            queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
        }

        if (requestParameters.attachedProfileId) {
            queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
        }

        if (requestParameters.hotelReservationId !== undefined) {
            queryParameters['hotelReservationId'] = requestParameters.hotelReservationId;
        }

        if (requestParameters.hotelReservationIdType !== undefined) {
            queryParameters['hotelReservationIdType'] = requestParameters.hotelReservationIdType;
        }

        if (requestParameters.ratePlanInfo !== undefined) {
            queryParameters['ratePlanInfo'] = requestParameters.ratePlanInfo;
        }

        if (requestParameters.returnOnlyAvailableRateCodes !== undefined) {
            queryParameters['returnOnlyAvailableRateCodes'] = requestParameters.returnOnlyAvailableRateCodes;
        }

        if (requestParameters.resGuaranteeInfo !== undefined) {
            queryParameters['resGuaranteeInfo'] = requestParameters.resGuaranteeInfo;
        }

        if (requestParameters.roomTypeInfo !== undefined) {
            queryParameters['roomTypeInfo'] = requestParameters.roomTypeInfo;
        }

        if (requestParameters.membershipIdNumber) {
            queryParameters['membershipIdNumber'] = requestParameters.membershipIdNumber;
        }

        if (requestParameters.membershipLevel) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.pointsAvailable) {
            queryParameters['pointsAvailable'] = requestParameters.pointsAvailable;
        }

        if (requestParameters.smokingPreference) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }

        if (requestParameters.hotelPackage) {
            queryParameters['hotelPackage'] = requestParameters.hotelPackage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/availability`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelAvailabilityFromJSON(jsonValue));
    }

    /**
     * Use this API to get hotel availability for multiple hotels, given dates, Rate Plans, Rate Category, Rate Group, Membership Rates, and number of people. By default five records are returned unless a higher number is specified in the limit query parameter.<p><strong>OperationId:</strong>getHotelAvailability</p>
     * Get hotel availability
     */
    async getHotelAvailability(requestParameters: GetHotelAvailabilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelAvailability> {
        const response = await this.getHotelAvailabilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  This API fetches hotel availablity for multiple hotels, given dates, RatePlans, Rate Category, Rate Group, Membership Rates, Number of People. <p><strong>OperationId:</strong>getHotelAvailabilityCRO</p>
     * Get Hotel Availability
     */
    async getHotelAvailabilityCRORaw(requestParameters: GetHotelAvailabilityCRORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HotelAvailability>> {
        const queryParameters: any = {};

        if (requestParameters.cro) {
            queryParameters['cro'] = requestParameters.cro;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.includeClosedRates) {
            queryParameters['includeClosedRates'] = requestParameters.includeClosedRates;
        }

        if (requestParameters.includeDefaultRatePlanSet) {
            queryParameters['includeDefaultRatePlanSet'] = requestParameters.includeDefaultRatePlanSet;
        }

        if (requestParameters.initialRatePlanSet) {
            queryParameters['initialRatePlanSet'] = requestParameters.initialRatePlanSet;
        }

        if (requestParameters.limit) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pagePointerKey) {
            queryParameters['pagePointerKey'] = requestParameters.pagePointerKey;
        }

        if (requestParameters.ratePlanSet) {
            queryParameters['ratePlanSet'] = requestParameters.ratePlanSet;
        }

        if (requestParameters.redeemAwards) {
            queryParameters['redeemAwards'] = requestParameters.redeemAwards;
        }

        if (requestParameters.roomStayStartDate !== undefined) {
            queryParameters['roomStayStartDate'] = (requestParameters.roomStayStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomStayEndDate !== undefined) {
            queryParameters['roomStayEndDate'] = (requestParameters.roomStayEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.roomStayQuantity !== undefined) {
            queryParameters['roomStayQuantity'] = requestParameters.roomStayQuantity;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.childAge) {
            queryParameters['childAge'] = requestParameters.childAge;
        }

        if (requestParameters.bucket1Count !== undefined) {
            queryParameters['bucket1Count'] = requestParameters.bucket1Count;
        }

        if (requestParameters.bucket2Count !== undefined) {
            queryParameters['bucket2Count'] = requestParameters.bucket2Count;
        }

        if (requestParameters.bucket3Count !== undefined) {
            queryParameters['bucket3Count'] = requestParameters.bucket3Count;
        }

        if (requestParameters.bucket4Count !== undefined) {
            queryParameters['bucket4Count'] = requestParameters.bucket4Count;
        }

        if (requestParameters.bucket5Count !== undefined) {
            queryParameters['bucket5Count'] = requestParameters.bucket5Count;
        }

        if (requestParameters.fullStayTimeSpanStartDate !== undefined) {
            queryParameters['fullStayTimeSpanStartDate'] = (requestParameters.fullStayTimeSpanStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.fullStayTimeSpanEndDate !== undefined) {
            queryParameters['fullStayTimeSpanEndDate'] = (requestParameters.fullStayTimeSpanEndDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.prevailingRate !== undefined) {
            queryParameters['prevailingRate'] = requestParameters.prevailingRate;
        }

        if (requestParameters.rateCategory !== undefined) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.rateClass !== undefined) {
            queryParameters['rateClass'] = requestParameters.rateClass;
        }

        if (requestParameters.rateGroup !== undefined) {
            queryParameters['rateGroup'] = requestParameters.rateGroup;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.promotionCode) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.feature) {
            queryParameters['feature'] = requestParameters.feature;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.reservationProfileType) {
            queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
        }

        if (requestParameters.attachedProfileId) {
            queryParameters['attachedProfileId'] = requestParameters.attachedProfileId;
        }

        if (requestParameters.hotelReservationId !== undefined) {
            queryParameters['hotelReservationId'] = requestParameters.hotelReservationId;
        }

        if (requestParameters.hotelReservationIdType !== undefined) {
            queryParameters['hotelReservationIdType'] = requestParameters.hotelReservationIdType;
        }

        if (requestParameters.ratePlanInfo !== undefined) {
            queryParameters['ratePlanInfo'] = requestParameters.ratePlanInfo;
        }

        if (requestParameters.returnOnlyAvailableRateCodes !== undefined) {
            queryParameters['returnOnlyAvailableRateCodes'] = requestParameters.returnOnlyAvailableRateCodes;
        }

        if (requestParameters.resGuaranteeInfo !== undefined) {
            queryParameters['resGuaranteeInfo'] = requestParameters.resGuaranteeInfo;
        }

        if (requestParameters.roomTypeInfo !== undefined) {
            queryParameters['roomTypeInfo'] = requestParameters.roomTypeInfo;
        }

        if (requestParameters.membershipIdNumber) {
            queryParameters['membershipIdNumber'] = requestParameters.membershipIdNumber;
        }

        if (requestParameters.membershipLevel) {
            queryParameters['membershipLevel'] = requestParameters.membershipLevel;
        }

        if (requestParameters.membershipType) {
            queryParameters['membershipType'] = requestParameters.membershipType;
        }

        if (requestParameters.pointsAvailable) {
            queryParameters['pointsAvailable'] = requestParameters.pointsAvailable;
        }

        if (requestParameters.smokingPreference) {
            queryParameters['smokingPreference'] = requestParameters.smokingPreference;
        }

        if (requestParameters.hotelPackage) {
            queryParameters['hotelPackage'] = requestParameters.hotelPackage;
        }

        if (requestParameters.yieldMarketCode !== undefined) {
            queryParameters['yieldMarketCode'] = requestParameters.yieldMarketCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/availability`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HotelAvailabilityFromJSON(jsonValue));
    }

    /**
     *  This API fetches hotel availablity for multiple hotels, given dates, RatePlans, Rate Category, Rate Group, Membership Rates, Number of People. <p><strong>OperationId:</strong>getHotelAvailabilityCRO</p>
     * Get Hotel Availability
     */
    async getHotelAvailabilityCRO(requestParameters: GetHotelAvailabilityCRORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HotelAvailability> {
        const response = await this.getHotelAvailabilityCRORaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API is to search hotels for the sales process. <p><strong>OperationId:</strong>getHotels</p>
     * Search hotels for the sales process
     */
    async getHotelsRaw(requestParameters: GetHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchHotelsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.cro !== undefined) {
            queryParameters['cro'] = requestParameters.cro;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.quantity !== undefined) {
            queryParameters['quantity'] = requestParameters.quantity;
        }

        if (requestParameters.adults !== undefined) {
            queryParameters['adults'] = requestParameters.adults;
        }

        if (requestParameters.children !== undefined) {
            queryParameters['children'] = requestParameters.children;
        }

        if (requestParameters.alternateHotels !== undefined) {
            queryParameters['alternateHotels'] = requestParameters.alternateHotels;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        if (requestParameters.city) {
            queryParameters['city'] = requestParameters.city;
        }

        if (requestParameters.hotelType) {
            queryParameters['hotelType'] = requestParameters.hotelType;
        }

        if (requestParameters.hotelAmenity) {
            queryParameters['hotelAmenity'] = requestParameters.hotelAmenity;
        }

        if (requestParameters.attraction) {
            queryParameters['attraction'] = requestParameters.attraction;
        }

        if (requestParameters.hotelPackage) {
            queryParameters['hotelPackage'] = requestParameters.hotelPackage;
        }

        if (requestParameters.prevailingRate !== undefined) {
            queryParameters['prevailingRate'] = requestParameters.prevailingRate;
        }

        if (requestParameters.rateCategory !== undefined) {
            queryParameters['rateCategory'] = requestParameters.rateCategory;
        }

        if (requestParameters.rateClass !== undefined) {
            queryParameters['rateClass'] = requestParameters.rateClass;
        }

        if (requestParameters.rateGroup !== undefined) {
            queryParameters['rateGroup'] = requestParameters.rateGroup;
        }

        if (requestParameters.ratePlanCode) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.ratePlanId) {
            queryParameters['ratePlanId'] = requestParameters.ratePlanId;
        }

        if (requestParameters.promotionCode) {
            queryParameters['promotionCode'] = requestParameters.promotionCode;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.bedType) {
            queryParameters['bedType'] = requestParameters.bedType;
        }

        if (requestParameters.feature) {
            queryParameters['feature'] = requestParameters.feature;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.reservationGuestIdType !== undefined) {
            queryParameters['reservationGuestIdType'] = requestParameters.reservationGuestIdType;
        }

        if (requestParameters.reservationProfileType) {
            queryParameters['reservationProfileType'] = requestParameters.reservationProfileType;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.currencyExchangeRates !== undefined) {
            queryParameters['currencyExchangeRates'] = requestParameters.currencyExchangeRates;
        }

        if (requestParameters.ratePlanInfo !== undefined) {
            queryParameters['ratePlanInfo'] = requestParameters.ratePlanInfo;
        }

        if (requestParameters.resGuaranteeInfo !== undefined) {
            queryParameters['resGuaranteeInfo'] = requestParameters.resGuaranteeInfo;
        }

        if (requestParameters.returnAllRates !== undefined) {
            queryParameters['returnAllRates'] = requestParameters.returnAllRates;
        }

        if (requestParameters.roomTypeInfo !== undefined) {
            queryParameters['roomTypeInfo'] = requestParameters.roomTypeInfo;
        }

        if (requestParameters.sellMessages !== undefined) {
            queryParameters['sellMessages'] = requestParameters.sellMessages;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchHotelsDetailsFromJSON(jsonValue));
    }

    /**
     * This API is to search hotels for the sales process. <p><strong>OperationId:</strong>getHotels</p>
     * Search hotels for the sales process
     */
    async getHotels(requestParameters: GetHotelsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchHotelsDetails> {
        const response = await this.getHotelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to fetch existing Hurdle Rates. <p><strong>OperationId:</strong>getHurdleRates</p>
     * Get Hurdle Rates
     */
    async getHurdleRatesRaw(requestParameters: GetHurdleRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HurdleRates>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.hurdleDate !== undefined) {
            queryParameters['hurdleDate'] = (requestParameters.hurdleDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.roomTypesCode) {
            queryParameters['roomTypesCode'] = requestParameters.roomTypesCode;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HurdleRatesFromJSON(jsonValue));
    }

    /**
     * This API allows to fetch existing Hurdle Rates. <p><strong>OperationId:</strong>getHurdleRates</p>
     * Get Hurdle Rates
     */
    async getHurdleRates(requestParameters: GetHurdleRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HurdleRates> {
        const response = await this.getHurdleRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the required guarantee types in order to complete a booking. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.<p><strong>OperationId:</strong>getReservationGuarantees</p>
     * Get reservation guarantees
     */
    async getReservationGuaranteesRaw(requestParameters: GetReservationGuaranteesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationGuaranteesPolicies>> {
        const queryParameters: any = {};

        if (requestParameters.arrivalDate !== undefined) {
            queryParameters['arrivalDate'] = (requestParameters.arrivalDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.blockId !== undefined) {
            queryParameters['blockId'] = requestParameters.blockId;
        }

        if (requestParameters.reservationGuestId !== undefined) {
            queryParameters['reservationGuestId'] = requestParameters.reservationGuestId;
        }

        if (requestParameters.companyId !== undefined) {
            queryParameters['companyId'] = requestParameters.companyId;
        }

        if (requestParameters.travelAgentId !== undefined) {
            queryParameters['travelAgentId'] = requestParameters.travelAgentId;
        }

        if (requestParameters.sourceId !== undefined) {
            queryParameters['sourceId'] = requestParameters.sourceId;
        }

        if (requestParameters.groupId !== undefined) {
            queryParameters['groupId'] = requestParameters.groupId;
        }

        if (requestParameters.guaranteeCode !== undefined) {
            queryParameters['guaranteeCode'] = requestParameters.guaranteeCode;
        }

        if (requestParameters.calculateEstimateAmount !== undefined) {
            queryParameters['calculateEstimateAmount'] = requestParameters.calculateEstimateAmount;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.numberOfRooms !== undefined) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.numberOfAdults !== undefined) {
            queryParameters['numberOfAdults'] = requestParameters.numberOfAdults;
        }

        if (requestParameters.numberOfChildren !== undefined) {
            queryParameters['numberOfChildren'] = requestParameters.numberOfChildren;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/guarantees`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationGuaranteesPoliciesFromJSON(jsonValue));
    }

    /**
     * Use this API to get the required guarantee types in order to complete a booking. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.<p><strong>OperationId:</strong>getReservationGuarantees</p>
     * Get reservation guarantees
     */
    async getReservationGuarantees(requestParameters: GetReservationGuaranteesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationGuaranteesPolicies> {
        const response = await this.getReservationGuaranteesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get the Restrictions for a hotel in given date range. The search criteria can include filter codes or restriction control types, date range and the hotel information.<p><strong>OperationId:</strong>getRestrictionsByDateRange</p>
     * Get hotel restrictions
     */
    async getRestrictionsByDateRangeRaw(requestParameters: GetRestrictionsByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestrictionsByDateRange>> {
        const queryParameters: any = {};

        if (requestParameters.chainName !== undefined) {
            queryParameters['chainName'] = requestParameters.chainName;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substr(0,10);
        }

        if (requestParameters.fetchSizeByDay !== undefined) {
            queryParameters['fetchSizeByDay'] = requestParameters.fetchSizeByDay;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.restrictionInfo !== undefined) {
            queryParameters['restrictionInfo'] = requestParameters.restrictionInfo;
        }

        if (requestParameters.restrictionSearchCriteriaStartDate !== undefined) {
            queryParameters['restrictionSearchCriteriaStartDate'] = (requestParameters.restrictionSearchCriteriaStartDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.ratePlanCategory !== undefined) {
            queryParameters['ratePlanCategory'] = requestParameters.ratePlanCategory;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.filterCodeCategory !== undefined) {
            queryParameters['filterCodeCategory'] = requestParameters.filterCodeCategory;
        }

        if (requestParameters.filterCode) {
            queryParameters['filterCode'] = requestParameters.filterCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restrictions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestrictionsByDateRangeFromJSON(jsonValue));
    }

    /**
     * Use this API to get the Restrictions for a hotel in given date range. The search criteria can include filter codes or restriction control types, date range and the hotel information.<p><strong>OperationId:</strong>getRestrictionsByDateRange</p>
     * Get hotel restrictions
     */
    async getRestrictionsByDateRange(requestParameters: GetRestrictionsByDateRangeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestrictionsByDateRange> {
        const response = await this.getRestrictionsByDateRangeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to fetch the Restriction history. Specify filter codes or restriction control types. The date range can be passed as part of the request. <p><strong>OperationId:</strong>getRestrictionsHistory</p>
     * Get the Restriction history 
     */
    async getRestrictionsHistoryRaw(requestParameters: GetRestrictionsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RestrictionsHistory>> {
        const queryParameters: any = {};

        if (requestParameters.chainName !== undefined) {
            queryParameters['chainName'] = requestParameters.chainName;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = (requestParameters.date as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingChannelCode !== undefined) {
            queryParameters['bookingChannelCode'] = requestParameters.bookingChannelCode;
        }

        if (requestParameters.ratePlanCategory !== undefined) {
            queryParameters['ratePlanCategory'] = requestParameters.ratePlanCategory;
        }

        if (requestParameters.ratePlanCode !== undefined) {
            queryParameters['ratePlanCode'] = requestParameters.ratePlanCode;
        }

        if (requestParameters.roomClass !== undefined) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.filterCodeCategory !== undefined) {
            queryParameters['filterCodeCategory'] = requestParameters.filterCodeCategory;
        }

        if (requestParameters.filterCode) {
            queryParameters['filterCode'] = requestParameters.filterCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restrictionsHistory`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RestrictionsHistoryFromJSON(jsonValue));
    }

    /**
     * This API allows to fetch the Restriction history. Specify filter codes or restriction control types. The date range can be passed as part of the request. <p><strong>OperationId:</strong>getRestrictionsHistory</p>
     * Get the Restriction history 
     */
    async getRestrictionsHistory(requestParameters: GetRestrictionsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RestrictionsHistory> {
        const response = await this.getRestrictionsHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to create hurdle rates. <p><strong>OperationId:</strong>postHurdleRates</p>
     * Create Hurdle Rates
     */
    async postHurdleRatesRaw(requestParameters: PostHurdleRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostHurdleRatesRequestToJSON(requestParameters.createHurdleRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows to create hurdle rates. <p><strong>OperationId:</strong>postHurdleRates</p>
     * Create Hurdle Rates
     */
    async postHurdleRates(requestParameters: PostHurdleRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postHurdleRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create restrictions on various levels such as house level, rate class, rate category, rate plan, room class, room type, and booking channel code.<p><strong>OperationId:</strong>postRestriction</p>
     * Create a restriction
     */
    async postRestrictionRaw(requestParameters: PostRestrictionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/restrictions`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRestrictionRequestToJSON(requestParameters.createRestriction),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create restrictions on various levels such as house level, rate class, rate category, rate plan, room class, room type, and booking channel code.<p><strong>OperationId:</strong>postRestriction</p>
     * Create a restriction
     */
    async postRestriction(requestParameters: PostRestrictionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRestrictionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to update an existing Hurdle Rate. <p><strong>OperationId:</strong>putHurdleRates</p>
     * Change Hurdle Rates
     */
    async putHurdleRatesRaw(requestParameters: PutHurdleRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChangeHurdleRatesDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/hurdles`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutHurdleRatesRequestToJSON(requestParameters.changeHurdleRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChangeHurdleRatesDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows to update an existing Hurdle Rate. <p><strong>OperationId:</strong>putHurdleRates</p>
     * Change Hurdle Rates
     */
    async putHurdleRates(requestParameters: PutHurdleRatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChangeHurdleRatesDetails> {
        const response = await this.putHurdleRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows to Fetch Reservation Guarantee. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.  <p><strong>OperationId:</strong>validateReservationGuarantees</p>
     * Get Reservation Guarantee 
     */
    async validateReservationGuaranteesRaw(requestParameters: ValidateReservationGuaranteesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReservationGuaranteesPolicies>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/validateGuarantees`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ValidateReservationGuaranteesRequestToJSON(requestParameters.validateReservationGuarantees),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationGuaranteesPoliciesFromJSON(jsonValue));
    }

    /**
     * This API allows to Fetch Reservation Guarantee. The criteria can include the rate plan code, arrival date, guarantee code and the profile information.  <p><strong>OperationId:</strong>validateReservationGuarantees</p>
     * Get Reservation Guarantee 
     */
    async validateReservationGuarantees(requestParameters: ValidateReservationGuaranteesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReservationGuaranteesPolicies> {
        const response = await this.validateReservationGuaranteesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAlternateAvailabilityReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
} as const;
export type GetAlternateAvailabilityReservationProfileTypeEnum = typeof GetAlternateAvailabilityReservationProfileTypeEnum[keyof typeof GetAlternateAvailabilityReservationProfileTypeEnum];
/**
 * @export
 */
export const GetAvailableUpsellsReservationStatusEnum = {
    Reserved: 'Reserved',
    Requested: 'Requested',
    NoShow: 'NoShow',
    Cancelled: 'Cancelled',
    InHouse: 'InHouse',
    CheckedOut: 'CheckedOut',
    Waitlisted: 'Waitlisted',
    DueIn: 'DueIn',
    DueOut: 'DueOut',
    Walkin: 'Walkin',
    PendingCheckout: 'PendingCheckout'
} as const;
export type GetAvailableUpsellsReservationStatusEnum = typeof GetAvailableUpsellsReservationStatusEnum[keyof typeof GetAvailableUpsellsReservationStatusEnum];
/**
 * @export
 */
export const GetHotelAvailabilityReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
} as const;
export type GetHotelAvailabilityReservationProfileTypeEnum = typeof GetHotelAvailabilityReservationProfileTypeEnum[keyof typeof GetHotelAvailabilityReservationProfileTypeEnum];
/**
 * @export
 */
export const GetHotelAvailabilityCROReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
} as const;
export type GetHotelAvailabilityCROReservationProfileTypeEnum = typeof GetHotelAvailabilityCROReservationProfileTypeEnum[keyof typeof GetHotelAvailabilityCROReservationProfileTypeEnum];
/**
 * @export
 */
export const GetHotelsReservationProfileTypeEnum = {
    Guest: 'Guest',
    Company: 'Company',
    Group: 'Group',
    TravelAgent: 'TravelAgent',
    Source: 'Source',
    ReservationContact: 'ReservationContact',
    BillingContact: 'BillingContact',
    Addressee: 'Addressee'
} as const;
export type GetHotelsReservationProfileTypeEnum = typeof GetHotelsReservationProfileTypeEnum[keyof typeof GetHotelsReservationProfileTypeEnum];
/**
 * @export
 */
export const GetRestrictionsByDateRangeRestrictionInfoEnum = {
    Detail: 'Detail',
    Overview: 'Overview',
    Year: 'Year'
} as const;
export type GetRestrictionsByDateRangeRestrictionInfoEnum = typeof GetRestrictionsByDateRangeRestrictionInfoEnum[keyof typeof GetRestrictionsByDateRangeRestrictionInfoEnum];
/**
 * @export
 */
export const GetRestrictionsByDateRangeFilterCodeCategoryEnum = {
    BookingChannelCode: 'BookingChannelCode',
    RoomClass: 'RoomClass',
    RoomType: 'RoomType',
    RatePlanCategory: 'RatePlanCategory',
    RatePlanCode: 'RatePlanCode'
} as const;
export type GetRestrictionsByDateRangeFilterCodeCategoryEnum = typeof GetRestrictionsByDateRangeFilterCodeCategoryEnum[keyof typeof GetRestrictionsByDateRangeFilterCodeCategoryEnum];
/**
 * @export
 */
export const GetRestrictionsHistoryFilterCodeCategoryEnum = {
    BookingChannelCode: 'BookingChannelCode',
    RoomClass: 'RoomClass',
    RoomType: 'RoomType',
    RatePlanCategory: 'RatePlanCategory',
    RatePlanCode: 'RatePlanCode'
} as const;
export type GetRestrictionsHistoryFilterCodeCategoryEnum = typeof GetRestrictionsHistoryFilterCodeCategoryEnum[keyof typeof GetRestrictionsHistoryFilterCodeCategoryEnum];
