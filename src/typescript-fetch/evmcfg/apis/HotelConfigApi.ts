/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CateringRentalCodesCriteria,
  CateringRentalCodesDetails,
  CateringRentalCodesToBeChanged,
  CopyFunctionSpaceLocations,
  CopyFunctionSpaces,
  EventCodesCriteria,
  EventCodesDetails,
  EventCodesToBeChanged,
  ExceptionDetailType,
  FunctionSpaceConfigDetails,
  FunctionSpaceDetails,
  FunctionSpaceLocationsCriteria,
  FunctionSpaceLocationsDetails,
  FunctionSpaceLocationsToBeChanged,
  FunctionSpaceSetupStylesCriteria,
  FunctionSpaceSetupStylesDetails,
  FunctionSpaceSetupStylesToBeChanged,
  FunctionSpacesCriteria,
  FunctionSpacesDetails,
  FunctionSpacesToBeChanged,
  RoomTypePoolCriteria,
  RoomTypePoolDetails,
  RoomTypePoolToBeChanged,
  Status,
  TemplateEventCodesCriteria,
  TemplateEventCodesDetails,
  TemplateEventCodesToBeChanged,
} from '../models/index';
import {
    CateringRentalCodesCriteriaFromJSON,
    CateringRentalCodesCriteriaToJSON,
    CateringRentalCodesDetailsFromJSON,
    CateringRentalCodesDetailsToJSON,
    CateringRentalCodesToBeChangedFromJSON,
    CateringRentalCodesToBeChangedToJSON,
    CopyFunctionSpaceLocationsFromJSON,
    CopyFunctionSpaceLocationsToJSON,
    CopyFunctionSpacesFromJSON,
    CopyFunctionSpacesToJSON,
    EventCodesCriteriaFromJSON,
    EventCodesCriteriaToJSON,
    EventCodesDetailsFromJSON,
    EventCodesDetailsToJSON,
    EventCodesToBeChangedFromJSON,
    EventCodesToBeChangedToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    FunctionSpaceConfigDetailsFromJSON,
    FunctionSpaceConfigDetailsToJSON,
    FunctionSpaceDetailsFromJSON,
    FunctionSpaceDetailsToJSON,
    FunctionSpaceLocationsCriteriaFromJSON,
    FunctionSpaceLocationsCriteriaToJSON,
    FunctionSpaceLocationsDetailsFromJSON,
    FunctionSpaceLocationsDetailsToJSON,
    FunctionSpaceLocationsToBeChangedFromJSON,
    FunctionSpaceLocationsToBeChangedToJSON,
    FunctionSpaceSetupStylesCriteriaFromJSON,
    FunctionSpaceSetupStylesCriteriaToJSON,
    FunctionSpaceSetupStylesDetailsFromJSON,
    FunctionSpaceSetupStylesDetailsToJSON,
    FunctionSpaceSetupStylesToBeChangedFromJSON,
    FunctionSpaceSetupStylesToBeChangedToJSON,
    FunctionSpacesCriteriaFromJSON,
    FunctionSpacesCriteriaToJSON,
    FunctionSpacesDetailsFromJSON,
    FunctionSpacesDetailsToJSON,
    FunctionSpacesToBeChangedFromJSON,
    FunctionSpacesToBeChangedToJSON,
    RoomTypePoolCriteriaFromJSON,
    RoomTypePoolCriteriaToJSON,
    RoomTypePoolDetailsFromJSON,
    RoomTypePoolDetailsToJSON,
    RoomTypePoolToBeChangedFromJSON,
    RoomTypePoolToBeChangedToJSON,
    StatusFromJSON,
    StatusToJSON,
    TemplateEventCodesCriteriaFromJSON,
    TemplateEventCodesCriteriaToJSON,
    TemplateEventCodesDetailsFromJSON,
    TemplateEventCodesDetailsToJSON,
    TemplateEventCodesToBeChangedFromJSON,
    TemplateEventCodesToBeChangedToJSON,
} from '../models/index';

export interface ChangeCateringRentalCodesRequest {
    cateringRentalId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringRentalCodesToBeChanged: CateringRentalCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeEventCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventCodesToBeChanged: EventCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFunctionSpaceLocationsRequest {
    functionspaceLocationCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceLocationsToBeChanged: FunctionSpaceLocationsToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFunctionSpaceSetupStylesRequest {
    functionSpaceSetupStyleId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceSetupStylesToBeChanged: FunctionSpaceSetupStylesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeFunctionSpacesRequest {
    functionSpaceCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpacesToBeChanged: FunctionSpacesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeRoomTypePoolRequest {
    roomPoolCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomTypePoolToBeChanged: RoomTypePoolToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface ChangeTemplateEventCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateEventCodesToBeChanged: TemplateEventCodesToBeChanged;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyFunctionSpaceLocationsRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyFunctionSpaceLocations: CopyFunctionSpaceLocations;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyFunctionSpacesRequest {
    sourceHotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    copyFunctionSpaces: CopyFunctionSpaces;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringRentalCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEventCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    eventsCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFunctionSpaceRequest {
    functionSpaceCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    physical?: boolean;
    pseudo?: boolean;
    hotelId?: string;
    roomClassCodes?: Array<string>;
    roomTypeCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFunctionSpaceConfigRequest {
    functionSpaceCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFunctionSpaceLocationsRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelIds?: Array<string>;
    codes?: Array<string>;
    wildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFunctionSpaceSetupStylesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetFunctionSpacesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    limit?: number;
    pageNumber?: number;
    sortingBy?: GetFunctionSpacesSortingByEnum;
    roomCodes?: Array<string>;
    roomType?: string;
    spaceType?: string;
    functionSpaceWildcard?: string;
    webBookable?: boolean;
    floorCodes?: Array<string>;
    locationCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRoomTypePoolRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    includeInactive?: boolean;
    limit?: number;
    pageNumber?: number;
    physical?: boolean;
    pseudo?: boolean;
    summaryInfo?: boolean;
    roomTypeCodes?: Array<string>;
    roomClassCodes?: Array<string>;
    roomTypePoolCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetTemplateEventCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventsCodes?: Array<string>;
    wildCard?: string;
    includeInactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringRentalCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    cateringRentalCodesCriteria: CateringRentalCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostEventCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventCodesCriteria: EventCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFunctionSpaceLocationsRequest {
    functionspaceLocationCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceLocationsCriteria: FunctionSpaceLocationsCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFunctionSpaceSetupStylesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpaceSetupStylesCriteria: FunctionSpaceSetupStylesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostFunctionSpacesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    functionSpacesCriteria: FunctionSpacesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRoomTypePoolRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    roomTypePoolCriteria: RoomTypePoolCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostTemplateEventCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateEventCodesCriteria: TemplateEventCodesCriteria;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveCateringRentalCodesRequest {
    cateringRentalId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveEventCodesRequest {
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    eventCode?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFunctionSpaceLocationsRequest {
    functionspaceLocationCode: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    hotelId?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFunctionSpaceSetupStylesRequest {
    functionSpaceSetupStyleId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveFunctionSpacesRequest {
    functionSpaceCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveRoomTypePoolRequest {
    roomPoolCode: string;
    hotelId: string;
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    description?: Array<string>;
    defaultText?: string;
    lang?: Array<string>;
    sequence?: Array<number>;
    inactive?: Array<boolean>;
    numberOfRooms?: Array<number>;
    roomType?: Array<string>;
    roomClass?: Array<string>;
    shortDescription?: Array<string>;
    activeDate?: Array<string>;
    pseudo?: Array<boolean>;
    accessible?: Array<boolean>;
    sendToInterface?: Array<boolean>;
    sellSequence?: Array<number>;
    suite?: Array<boolean>;
    meetingRoom?: Array<boolean>;
    restricted?: Array<boolean>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface RemoveTemplateEventCodesRequest {
    authorization?: string;
    xAppKey?: string;
    xHotelid?: string;
    templateEventCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class HotelConfigApi extends runtime.BaseAPI {

    /**
     * Use this API to update Catering s Rental Codes. <p><strong>OperationId:</strong>changeCateringRentalCodes</p>
     * Change Catering s Rental Codes
     */
    async changeCateringRentalCodesRaw(requestParameters: ChangeCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringRentalId === null || requestParameters.cateringRentalId === undefined) {
            throw new runtime.RequiredError('cateringRentalId','Required parameter requestParameters.cateringRentalId was null or undefined when calling changeCateringRentalCodes.');
        }
        
        if (requestParameters.cateringRentalCodesToBeChanged === null || requestParameters.cateringRentalCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('cateringRentalCodesToBeChanged','Required parameter requestParameters.cateringRentalCodesToBeChanged was null or undefined when calling changeCateringRentalCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceRentalCodes/{cateringRentalId}`.replace(`{${"cateringRentalId"}}`, encodeURIComponent(String(requestParameters.cateringRentalId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringRentalCodesToBeChangedToJSON(requestParameters.cateringRentalCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Catering s Rental Codes. <p><strong>OperationId:</strong>changeCateringRentalCodes</p>
     * Change Catering s Rental Codes
     */
    async changeCateringRentalCodes(requestParameters: ChangeCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeCateringRentalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Hotel Event Codes. <p><strong>OperationId:</strong>changeEventCodes</p>
     * Change Hotel Event Codes
     */
    async changeEventCodesRaw(requestParameters: ChangeEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeEventCodes.');
        }
        
        if (requestParameters.eventCodesToBeChanged === null || requestParameters.eventCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('eventCodesToBeChanged','Required parameter requestParameters.eventCodesToBeChanged was null or undefined when calling changeEventCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventCodesToBeChangedToJSON(requestParameters.eventCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Hotel Event Codes. <p><strong>OperationId:</strong>changeEventCodes</p>
     * Change Hotel Event Codes
     */
    async changeEventCodes(requestParameters: ChangeEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update function space locations. <p><strong>OperationId:</strong>changeFunctionSpaceLocations</p>
     * Change function space locations
     */
    async changeFunctionSpaceLocationsRaw(requestParameters: ChangeFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionspaceLocationCode === null || requestParameters.functionspaceLocationCode === undefined) {
            throw new runtime.RequiredError('functionspaceLocationCode','Required parameter requestParameters.functionspaceLocationCode was null or undefined when calling changeFunctionSpaceLocations.');
        }
        
        if (requestParameters.functionSpaceLocationsToBeChanged === null || requestParameters.functionSpaceLocationsToBeChanged === undefined) {
            throw new runtime.RequiredError('functionSpaceLocationsToBeChanged','Required parameter requestParameters.functionSpaceLocationsToBeChanged was null or undefined when calling changeFunctionSpaceLocations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceLocations/{functionspaceLocationCode}`.replace(`{${"functionspaceLocationCode"}}`, encodeURIComponent(String(requestParameters.functionspaceLocationCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceLocationsToBeChangedToJSON(requestParameters.functionSpaceLocationsToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update function space locations. <p><strong>OperationId:</strong>changeFunctionSpaceLocations</p>
     * Change function space locations
     */
    async changeFunctionSpaceLocations(requestParameters: ChangeFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFunctionSpaceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update function space setup styles. <p><strong>OperationId:</strong>changeFunctionSpaceSetupStyles</p>
     * Change function space setup styles
     */
    async changeFunctionSpaceSetupStylesRaw(requestParameters: ChangeFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceSetupStyleId === null || requestParameters.functionSpaceSetupStyleId === undefined) {
            throw new runtime.RequiredError('functionSpaceSetupStyleId','Required parameter requestParameters.functionSpaceSetupStyleId was null or undefined when calling changeFunctionSpaceSetupStyles.');
        }
        
        if (requestParameters.functionSpaceSetupStylesToBeChanged === null || requestParameters.functionSpaceSetupStylesToBeChanged === undefined) {
            throw new runtime.RequiredError('functionSpaceSetupStylesToBeChanged','Required parameter requestParameters.functionSpaceSetupStylesToBeChanged was null or undefined when calling changeFunctionSpaceSetupStyles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceSetupStyles/{functionSpaceSetupStyleId}`.replace(`{${"functionSpaceSetupStyleId"}}`, encodeURIComponent(String(requestParameters.functionSpaceSetupStyleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceSetupStylesToBeChangedToJSON(requestParameters.functionSpaceSetupStylesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update function space setup styles. <p><strong>OperationId:</strong>changeFunctionSpaceSetupStyles</p>
     * Change function space setup styles
     */
    async changeFunctionSpaceSetupStyles(requestParameters: ChangeFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Function Spaces. <p><strong>OperationId:</strong>changeFunctionSpaces</p>
     * Change Function Spaces
     */
    async changeFunctionSpacesRaw(requestParameters: ChangeFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
            throw new runtime.RequiredError('functionSpaceCode','Required parameter requestParameters.functionSpaceCode was null or undefined when calling changeFunctionSpaces.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeFunctionSpaces.');
        }
        
        if (requestParameters.functionSpacesToBeChanged === null || requestParameters.functionSpacesToBeChanged === undefined) {
            throw new runtime.RequiredError('functionSpacesToBeChanged','Required parameter requestParameters.functionSpacesToBeChanged was null or undefined when calling changeFunctionSpaces.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/functionSpaces/{functionSpaceCode}`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpacesToBeChangedToJSON(requestParameters.functionSpacesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Function Spaces. <p><strong>OperationId:</strong>changeFunctionSpaces</p>
     * Change Function Spaces
     */
    async changeFunctionSpaces(requestParameters: ChangeFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeFunctionSpacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Room Type Pool and Associated Room Types. <p><strong>OperationId:</strong>changeRoomTypePool</p>
     * Change Room Type Pool 
     */
    async changeRoomTypePoolRaw(requestParameters: ChangeRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.roomPoolCode === null || requestParameters.roomPoolCode === undefined) {
            throw new runtime.RequiredError('roomPoolCode','Required parameter requestParameters.roomPoolCode was null or undefined when calling changeRoomTypePool.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling changeRoomTypePool.');
        }
        
        if (requestParameters.roomTypePoolToBeChanged === null || requestParameters.roomTypePoolToBeChanged === undefined) {
            throw new runtime.RequiredError('roomTypePoolToBeChanged','Required parameter requestParameters.roomTypePoolToBeChanged was null or undefined when calling changeRoomTypePool.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools/{roomPoolCode}`.replace(`{${"roomPoolCode"}}`, encodeURIComponent(String(requestParameters.roomPoolCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoomTypePoolToBeChangedToJSON(requestParameters.roomTypePoolToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Room Type Pool and Associated Room Types. <p><strong>OperationId:</strong>changeRoomTypePool</p>
     * Change Room Type Pool 
     */
    async changeRoomTypePool(requestParameters: ChangeRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update Template Event Codes. <p><strong>OperationId:</strong>changeTemplateEventCodes</p>
     * Change Template Event Codes
     */
    async changeTemplateEventCodesRaw(requestParameters: ChangeTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateEventCodesToBeChanged === null || requestParameters.templateEventCodesToBeChanged === undefined) {
            throw new runtime.RequiredError('templateEventCodesToBeChanged','Required parameter requestParameters.templateEventCodesToBeChanged was null or undefined when calling changeTemplateEventCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/eventCodes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateEventCodesToBeChangedToJSON(requestParameters.templateEventCodesToBeChanged),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update Template Event Codes. <p><strong>OperationId:</strong>changeTemplateEventCodes</p>
     * Change Template Event Codes
     */
    async changeTemplateEventCodes(requestParameters: ChangeTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.changeTemplateEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to copy function space locations. <p><strong>OperationId:</strong>copyFunctionSpaceLocations</p>
     * Copy function space locations
     */
    async copyFunctionSpaceLocationsRaw(requestParameters: CopyFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyFunctionSpaceLocations.');
        }
        
        if (requestParameters.copyFunctionSpaceLocations === null || requestParameters.copyFunctionSpaceLocations === undefined) {
            throw new runtime.RequiredError('copyFunctionSpaceLocations','Required parameter requestParameters.copyFunctionSpaceLocations was null or undefined when calling copyFunctionSpaceLocations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/functionspaceLocations/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyFunctionSpaceLocationsToJSON(requestParameters.copyFunctionSpaceLocations),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to copy function space locations. <p><strong>OperationId:</strong>copyFunctionSpaceLocations</p>
     * Copy function space locations
     */
    async copyFunctionSpaceLocations(requestParameters: CopyFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyFunctionSpaceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this API to copy Function Space. <p><strong>OperationId:</strong>copyFunctionSpaces</p>
     * Copy Function Spaces
     */
    async copyFunctionSpacesRaw(requestParameters: CopyFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyFunctionSpaces.');
        }
        
        if (requestParameters.copyFunctionSpaces === null || requestParameters.copyFunctionSpaces === undefined) {
            throw new runtime.RequiredError('copyFunctionSpaces','Required parameter requestParameters.copyFunctionSpaces was null or undefined when calling copyFunctionSpaces.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/functionSpaces/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CopyFunctionSpacesToJSON(requestParameters.copyFunctionSpaces),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  Use this API to copy Function Space. <p><strong>OperationId:</strong>copyFunctionSpaces</p>
     * Copy Function Spaces
     */
    async copyFunctionSpaces(requestParameters: CopyFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyFunctionSpacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Catering s Rental Codes. <p><strong>OperationId:</strong>getCateringRentalCodes</p>
     * Get Catering s Rental Codes
     */
    async getCateringRentalCodesRaw(requestParameters: GetCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringRentalCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceRentalCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringRentalCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Catering s Rental Codes. <p><strong>OperationId:</strong>getCateringRentalCodes</p>
     * Get Catering s Rental Codes
     */
    async getCateringRentalCodes(requestParameters: GetCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringRentalCodesDetails> {
        const response = await this.getCateringRentalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Hotel Event Codes. <p><strong>OperationId:</strong>getEventCodes</p>
     * Get Hotel Event Codes
     */
    async getEventCodesRaw(requestParameters: GetEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventCodesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getEventCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.eventsCodes) {
            queryParameters['eventsCodes'] = requestParameters.eventsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Hotel Event Codes. <p><strong>OperationId:</strong>getEventCodes</p>
     * Get Hotel Event Codes
     */
    async getEventCodes(requestParameters: GetEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventCodesDetails> {
        const response = await this.getEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve detailed information on function spaces, for example Meeting Room. <p><strong>OperationId:</strong>getFunctionSpace</p>
     * Get Function space 
     */
    async getFunctionSpaceRaw(requestParameters: GetFunctionSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceDetails>> {
        if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
            throw new runtime.RequiredError('functionSpaceCode','Required parameter requestParameters.functionSpaceCode was null or undefined when calling getFunctionSpace.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.physical !== undefined) {
            queryParameters['physical'] = requestParameters.physical;
        }

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }

        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaces/{functionSpaceCode}`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FunctionSpaceDetailsFromJSON(jsonValue));
    }

    /**
     * Retrieve detailed information on function spaces, for example Meeting Room. <p><strong>OperationId:</strong>getFunctionSpace</p>
     * Get Function space 
     */
    async getFunctionSpace(requestParameters: GetFunctionSpaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceDetails> {
        const response = await this.getFunctionSpaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  Use this  get Function Space detailed information. <p><strong>OperationId:</strong>getFunctionSpaceConfig</p>
     * Get Function Space Configuration
     */
    async getFunctionSpaceConfigRaw(requestParameters: GetFunctionSpaceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceConfigDetails>> {
        if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
            throw new runtime.RequiredError('functionSpaceCode','Required parameter requestParameters.functionSpaceCode was null or undefined when calling getFunctionSpaceConfig.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFunctionSpaceConfig.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/functionSpaces/{functionSpaceCode}/configurations`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FunctionSpaceConfigDetailsFromJSON(jsonValue));
    }

    /**
     *  Use this  get Function Space detailed information. <p><strong>OperationId:</strong>getFunctionSpaceConfig</p>
     * Get Function Space Configuration
     */
    async getFunctionSpaceConfig(requestParameters: GetFunctionSpaceConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceConfigDetails> {
        const response = await this.getFunctionSpaceConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get detail information of function space locations. <p><strong>OperationId:</strong>getFunctionSpaceLocations</p>
     * Get Function space locations
     */
    async getFunctionSpaceLocationsRaw(requestParameters: GetFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceLocationsDetails>> {
        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceLocations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FunctionSpaceLocationsDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get detail information of function space locations. <p><strong>OperationId:</strong>getFunctionSpaceLocations</p>
     * Get Function space locations
     */
    async getFunctionSpaceLocations(requestParameters: GetFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceLocationsDetails> {
        const response = await this.getFunctionSpaceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Function space setup styles. <p><strong>OperationId:</strong>getFunctionSpaceSetupStyles</p>
     * Get Function space setup styles
     */
    async getFunctionSpaceSetupStylesRaw(requestParameters: GetFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpaceSetupStylesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceSetupStyles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FunctionSpaceSetupStylesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Function space setup styles. <p><strong>OperationId:</strong>getFunctionSpaceSetupStyles</p>
     * Get Function space setup styles
     */
    async getFunctionSpaceSetupStyles(requestParameters: GetFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpaceSetupStylesDetails> {
        const response = await this.getFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API fetches the configured function spaces of a specific property with possible search criteria of function space code, and space type. The result returns the function spaces that fit the search criteria with details about space name, short name, attributes such as shareable, combo, web bookable, and more. <p><strong>OperationId:</strong>getFunctionSpaces</p>
     * Get Function Spaces
     */
    async getFunctionSpacesRaw(requestParameters: GetFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FunctionSpacesDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getFunctionSpaces.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.sortingBy !== undefined) {
            queryParameters['sortingBy'] = requestParameters.sortingBy;
        }

        if (requestParameters.roomCodes) {
            queryParameters['roomCodes'] = requestParameters.roomCodes;
        }

        if (requestParameters.roomType !== undefined) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.spaceType !== undefined) {
            queryParameters['spaceType'] = requestParameters.spaceType;
        }

        if (requestParameters.functionSpaceWildcard !== undefined) {
            queryParameters['functionSpaceWildcard'] = requestParameters.functionSpaceWildcard;
        }

        if (requestParameters.webBookable !== undefined) {
            queryParameters['webBookable'] = requestParameters.webBookable;
        }

        if (requestParameters.floorCodes) {
            queryParameters['floorCodes'] = requestParameters.floorCodes;
        }

        if (requestParameters.locationCodes) {
            queryParameters['locationCodes'] = requestParameters.locationCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/functionSpaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FunctionSpacesDetailsFromJSON(jsonValue));
    }

    /**
     * This API fetches the configured function spaces of a specific property with possible search criteria of function space code, and space type. The result returns the function spaces that fit the search criteria with details about space name, short name, attributes such as shareable, combo, web bookable, and more. <p><strong>OperationId:</strong>getFunctionSpaces</p>
     * Get Function Spaces
     */
    async getFunctionSpaces(requestParameters: GetFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FunctionSpacesDetails> {
        const response = await this.getFunctionSpacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Use this API to get Room Type Pool and the associated Room Types. <p><strong>OperationId:</strong>getRoomTypePool</p>
     * Fetch Room Type Pool
     */
    async getRoomTypePoolRaw(requestParameters: GetRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoomTypePoolDetails>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getRoomTypePool.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.physical !== undefined) {
            queryParameters['physical'] = requestParameters.physical;
        }

        if (requestParameters.pseudo !== undefined) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        if (requestParameters.summaryInfo !== undefined) {
            queryParameters['summaryInfo'] = requestParameters.summaryInfo;
        }

        if (requestParameters.roomTypeCodes) {
            queryParameters['roomTypeCodes'] = requestParameters.roomTypeCodes;
        }

        if (requestParameters.roomClassCodes) {
            queryParameters['roomClassCodes'] = requestParameters.roomClassCodes;
        }

        if (requestParameters.roomTypePoolCodes) {
            queryParameters['roomTypePoolCodes'] = requestParameters.roomTypePoolCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomTypePoolDetailsFromJSON(jsonValue));
    }

    /**
     * This API allows you to Use this API to get Room Type Pool and the associated Room Types. <p><strong>OperationId:</strong>getRoomTypePool</p>
     * Fetch Room Type Pool
     */
    async getRoomTypePool(requestParameters: GetRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoomTypePoolDetails> {
        const response = await this.getRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get Template Event Codes. <p><strong>OperationId:</strong>getTemplateEventCodes</p>
     * Get Template Event Codes
     */
    async getTemplateEventCodesRaw(requestParameters: GetTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateEventCodesDetails>> {
        const queryParameters: any = {};

        if (requestParameters.eventsCodes) {
            queryParameters['eventsCodes'] = requestParameters.eventsCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/eventCodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateEventCodesDetailsFromJSON(jsonValue));
    }

    /**
     * Use this API to get Template Event Codes. <p><strong>OperationId:</strong>getTemplateEventCodes</p>
     * Get Template Event Codes
     */
    async getTemplateEventCodes(requestParameters: GetTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateEventCodesDetails> {
        const response = await this.getTemplateEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Catering s Rental Codes. <p><strong>OperationId:</strong>postCateringRentalCodes</p>
     * Create Catering s Rental Codes
     */
    async postCateringRentalCodesRaw(requestParameters: PostCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringRentalCodesCriteria === null || requestParameters.cateringRentalCodesCriteria === undefined) {
            throw new runtime.RequiredError('cateringRentalCodesCriteria','Required parameter requestParameters.cateringRentalCodesCriteria was null or undefined when calling postCateringRentalCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceRentalCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringRentalCodesCriteriaToJSON(requestParameters.cateringRentalCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Catering s Rental Codes. <p><strong>OperationId:</strong>postCateringRentalCodes</p>
     * Create Catering s Rental Codes
     */
    async postCateringRentalCodes(requestParameters: PostCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringRentalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Hotel Event Codes. <p><strong>OperationId:</strong>postEventCodes</p>
     * Create Hotel Event Codes
     */
    async postEventCodesRaw(requestParameters: PostEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postEventCodes.');
        }
        
        if (requestParameters.eventCodesCriteria === null || requestParameters.eventCodesCriteria === undefined) {
            throw new runtime.RequiredError('eventCodesCriteria','Required parameter requestParameters.eventCodesCriteria was null or undefined when calling postEventCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventCodesCriteriaToJSON(requestParameters.eventCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Hotel Event Codes. <p><strong>OperationId:</strong>postEventCodes</p>
     * Create Hotel Event Codes
     */
    async postEventCodes(requestParameters: PostEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create function space locations. <p><strong>OperationId:</strong>postFunctionSpaceLocations</p>
     * Create function space locations
     */
    async postFunctionSpaceLocationsRaw(requestParameters: PostFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionspaceLocationCode === null || requestParameters.functionspaceLocationCode === undefined) {
            throw new runtime.RequiredError('functionspaceLocationCode','Required parameter requestParameters.functionspaceLocationCode was null or undefined when calling postFunctionSpaceLocations.');
        }
        
        if (requestParameters.functionSpaceLocationsCriteria === null || requestParameters.functionSpaceLocationsCriteria === undefined) {
            throw new runtime.RequiredError('functionSpaceLocationsCriteria','Required parameter requestParameters.functionSpaceLocationsCriteria was null or undefined when calling postFunctionSpaceLocations.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceLocations/{functionspaceLocationCode}`.replace(`{${"functionspaceLocationCode"}}`, encodeURIComponent(String(requestParameters.functionspaceLocationCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceLocationsCriteriaToJSON(requestParameters.functionSpaceLocationsCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create function space locations. <p><strong>OperationId:</strong>postFunctionSpaceLocations</p>
     * Create function space locations
     */
    async postFunctionSpaceLocations(requestParameters: PostFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFunctionSpaceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create function space setup styles. <p><strong>OperationId:</strong>postFunctionSpaceSetupStyles</p>
     * Create function space setup styles
     */
    async postFunctionSpaceSetupStylesRaw(requestParameters: PostFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceSetupStylesCriteria === null || requestParameters.functionSpaceSetupStylesCriteria === undefined) {
            throw new runtime.RequiredError('functionSpaceSetupStylesCriteria','Required parameter requestParameters.functionSpaceSetupStylesCriteria was null or undefined when calling postFunctionSpaceSetupStyles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceSetupStyles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpaceSetupStylesCriteriaToJSON(requestParameters.functionSpaceSetupStylesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create function space setup styles. <p><strong>OperationId:</strong>postFunctionSpaceSetupStyles</p>
     * Create function space setup styles
     */
    async postFunctionSpaceSetupStyles(requestParameters: PostFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows the creation of function spaces. Criteria that need to be supplied in the request body include function space code, description, space type, and min / max attendees. Optional details such as short name, shareable, combo, web bookable, and dimensions can also be included. <p><strong>OperationId:</strong>postFunctionSpaces</p>
     * Create Function Spaces
     */
    async postFunctionSpacesRaw(requestParameters: PostFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postFunctionSpaces.');
        }
        
        if (requestParameters.functionSpacesCriteria === null || requestParameters.functionSpacesCriteria === undefined) {
            throw new runtime.RequiredError('functionSpacesCriteria','Required parameter requestParameters.functionSpacesCriteria was null or undefined when calling postFunctionSpaces.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/functionSpaces`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FunctionSpacesCriteriaToJSON(requestParameters.functionSpacesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows the creation of function spaces. Criteria that need to be supplied in the request body include function space code, description, space type, and min / max attendees. Optional details such as short name, shareable, combo, web bookable, and dimensions can also be included. <p><strong>OperationId:</strong>postFunctionSpaces</p>
     * Create Function Spaces
     */
    async postFunctionSpaces(requestParameters: PostFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postFunctionSpacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to Use this API to create Room Type Pools. <p><strong>OperationId:</strong>postRoomTypePool</p>
     * Create Room Type Pools
     */
    async postRoomTypePoolRaw(requestParameters: PostRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postRoomTypePool.');
        }
        
        if (requestParameters.roomTypePoolCriteria === null || requestParameters.roomTypePoolCriteria === undefined) {
            throw new runtime.RequiredError('roomTypePoolCriteria','Required parameter requestParameters.roomTypePoolCriteria was null or undefined when calling postRoomTypePool.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoomTypePoolCriteriaToJSON(requestParameters.roomTypePoolCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to Use this API to create Room Type Pools. <p><strong>OperationId:</strong>postRoomTypePool</p>
     * Create Room Type Pools
     */
    async postRoomTypePool(requestParameters: PostRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to create Template Event Codes. <p><strong>OperationId:</strong>postTemplateEventCodes</p>
     * Create Template Event Codes
     */
    async postTemplateEventCodesRaw(requestParameters: PostTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.templateEventCodesCriteria === null || requestParameters.templateEventCodesCriteria === undefined) {
            throw new runtime.RequiredError('templateEventCodesCriteria','Required parameter requestParameters.templateEventCodesCriteria was null or undefined when calling postTemplateEventCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/eventCodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateEventCodesCriteriaToJSON(requestParameters.templateEventCodesCriteria),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to create Template Event Codes. <p><strong>OperationId:</strong>postTemplateEventCodes</p>
     * Create Template Event Codes
     */
    async postTemplateEventCodes(requestParameters: PostTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postTemplateEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Catering s Rental Codes. <p><strong>OperationId:</strong>removeCateringRentalCodes</p>
     * Delete Catering s Rental Codes
     */
    async removeCateringRentalCodesRaw(requestParameters: RemoveCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringRentalId === null || requestParameters.cateringRentalId === undefined) {
            throw new runtime.RequiredError('cateringRentalId','Required parameter requestParameters.cateringRentalId was null or undefined when calling removeCateringRentalCodes.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionSpaceRentalCodes/{cateringRentalId}`.replace(`{${"cateringRentalId"}}`, encodeURIComponent(String(requestParameters.cateringRentalId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Catering s Rental Codes. <p><strong>OperationId:</strong>removeCateringRentalCodes</p>
     * Delete Catering s Rental Codes
     */
    async removeCateringRentalCodes(requestParameters: RemoveCateringRentalCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeCateringRentalCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Hotel Event Codes. <p><strong>OperationId:</strong>removeEventCodes</p>
     * Delete Hotel Event Codes
     */
    async removeEventCodesRaw(requestParameters: RemoveEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeEventCodes.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.eventCode) {
            queryParameters['eventCode'] = requestParameters.eventCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eventCodes`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Hotel Event Codes. <p><strong>OperationId:</strong>removeEventCodes</p>
     * Delete Hotel Event Codes
     */
    async removeEventCodes(requestParameters: RemoveEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete function space locations. <p><strong>OperationId:</strong>removeFunctionSpaceLocations</p>
     * Delete function space locations
     */
    async removeFunctionSpaceLocationsRaw(requestParameters: RemoveFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionspaceLocationCode === null || requestParameters.functionspaceLocationCode === undefined) {
            throw new runtime.RequiredError('functionspaceLocationCode','Required parameter requestParameters.functionspaceLocationCode was null or undefined when calling removeFunctionSpaceLocations.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceLocations/{functionspaceLocationCode}`.replace(`{${"functionspaceLocationCode"}}`, encodeURIComponent(String(requestParameters.functionspaceLocationCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete function space locations. <p><strong>OperationId:</strong>removeFunctionSpaceLocations</p>
     * Delete function space locations
     */
    async removeFunctionSpaceLocations(requestParameters: RemoveFunctionSpaceLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFunctionSpaceLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete function space setup styles. <p><strong>OperationId:</strong>removeFunctionSpaceSetupStyles</p>
     * Delete function space setup styles
     */
    async removeFunctionSpaceSetupStylesRaw(requestParameters: RemoveFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceSetupStyleId === null || requestParameters.functionSpaceSetupStyleId === undefined) {
            throw new runtime.RequiredError('functionSpaceSetupStyleId','Required parameter requestParameters.functionSpaceSetupStyleId was null or undefined when calling removeFunctionSpaceSetupStyles.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/functionspaceSetupStyles/{functionSpaceSetupStyleId}`.replace(`{${"functionSpaceSetupStyleId"}}`, encodeURIComponent(String(requestParameters.functionSpaceSetupStyleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete function space setup styles. <p><strong>OperationId:</strong>removeFunctionSpaceSetupStyles</p>
     * Delete function space setup styles
     */
    async removeFunctionSpaceSetupStyles(requestParameters: RemoveFunctionSpaceSetupStylesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFunctionSpaceSetupStylesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Function Spaces. <p><strong>OperationId:</strong>removeFunctionSpaces</p>
     * Delete Function Spaces
     */
    async removeFunctionSpacesRaw(requestParameters: RemoveFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.functionSpaceCode === null || requestParameters.functionSpaceCode === undefined) {
            throw new runtime.RequiredError('functionSpaceCode','Required parameter requestParameters.functionSpaceCode was null or undefined when calling removeFunctionSpaces.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeFunctionSpaces.');
        }
        
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/functionSpaces/{functionSpaceCode}`.replace(`{${"functionSpaceCode"}}`, encodeURIComponent(String(requestParameters.functionSpaceCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Function Spaces. <p><strong>OperationId:</strong>removeFunctionSpaces</p>
     * Delete Function Spaces
     */
    async removeFunctionSpaces(requestParameters: RemoveFunctionSpacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeFunctionSpacesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete  Room Type Pool and Mappings. <p><strong>OperationId:</strong>removeRoomTypePool</p>
     * Delete  Room Type Pool and Mappings
     */
    async removeRoomTypePoolRaw(requestParameters: RemoveRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.roomPoolCode === null || requestParameters.roomPoolCode === undefined) {
            throw new runtime.RequiredError('roomPoolCode','Required parameter requestParameters.roomPoolCode was null or undefined when calling removeRoomTypePool.');
        }
        
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling removeRoomTypePool.');
        }
        
        const queryParameters: any = {};

        if (requestParameters.description) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.defaultText !== undefined) {
            queryParameters['defaultText'] = requestParameters.defaultText;
        }

        if (requestParameters.lang) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.sequence) {
            queryParameters['sequence'] = requestParameters.sequence;
        }

        if (requestParameters.inactive) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.numberOfRooms) {
            queryParameters['numberOfRooms'] = requestParameters.numberOfRooms;
        }

        if (requestParameters.roomType) {
            queryParameters['roomType'] = requestParameters.roomType;
        }

        if (requestParameters.roomClass) {
            queryParameters['roomClass'] = requestParameters.roomClass;
        }

        if (requestParameters.shortDescription) {
            queryParameters['shortDescription'] = requestParameters.shortDescription;
        }

        if (requestParameters.activeDate) {
            queryParameters['activeDate'] = requestParameters.activeDate;
        }

        if (requestParameters.pseudo) {
            queryParameters['pseudo'] = requestParameters.pseudo;
        }

        if (requestParameters.accessible) {
            queryParameters['accessible'] = requestParameters.accessible;
        }

        if (requestParameters.sendToInterface) {
            queryParameters['sendToInterface'] = requestParameters.sendToInterface;
        }

        if (requestParameters.sellSequence) {
            queryParameters['sellSequence'] = requestParameters.sellSequence;
        }

        if (requestParameters.suite) {
            queryParameters['suite'] = requestParameters.suite;
        }

        if (requestParameters.meetingRoom) {
            queryParameters['meetingRoom'] = requestParameters.meetingRoom;
        }

        if (requestParameters.restricted) {
            queryParameters['restricted'] = requestParameters.restricted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/roomPools/{roomPoolCode}`.replace(`{${"roomPoolCode"}}`, encodeURIComponent(String(requestParameters.roomPoolCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete  Room Type Pool and Mappings. <p><strong>OperationId:</strong>removeRoomTypePool</p>
     * Delete  Room Type Pool and Mappings
     */
    async removeRoomTypePool(requestParameters: RemoveRoomTypePoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeRoomTypePoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Template Event Codes. <p><strong>OperationId:</strong>removeTemplateEventCodes</p>
     * Delete Template Event Codes
     */
    async removeTemplateEventCodesRaw(requestParameters: RemoveTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        const queryParameters: any = {};

        if (requestParameters.templateEventCodes) {
            queryParameters['templateEventCodes'] = requestParameters.templateEventCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/eventCodes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Template Event Codes. <p><strong>OperationId:</strong>removeTemplateEventCodes</p>
     * Delete Template Event Codes
     */
    async removeTemplateEventCodes(requestParameters: RemoveTemplateEventCodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.removeTemplateEventCodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFunctionSpacesSortingByEnum = {
    Name: 'Name',
    AttendeeCapacity: 'AttendeeCapacity',
    AreaSize: 'AreaSize',
    CustomOrder1: 'CustomOrder1',
    CustomOrder2: 'CustomOrder2',
    CustomOrder3: 'CustomOrder3'
} as const;
export type GetFunctionSpacesSortingByEnum = typeof GetFunctionSpacesSortingByEnum[keyof typeof GetFunctionSpacesSortingByEnum];
