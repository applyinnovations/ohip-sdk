/* tslint:disable */
/* eslint-disable */
/**
 * OPERA Cloud Event Configuration API
 * This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 23.2.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2023 Oracle and/or its affiliates.</p>
 *
 * The version of the OpenAPI document: 23.2
 * Contact: hospitality_apis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CateringContainers,
  CateringContainersInfo,
  CateringItemRates,
  CateringItemRatesInfo,
  CateringMenuClasses,
  CateringMenuClassesInfo,
  CateringMenuItemClasses,
  CateringMenuItemClassesCopy,
  CateringMenuItemClassesInfo,
  CateringMenuItems,
  CateringMenuItemsCopy,
  CateringMenuItemsInfo,
  CateringMenus,
  CateringMenusCopy,
  CateringMenusInfo,
  CateringPackage,
  CateringPackages,
  CateringPackagesInfo,
  CateringServings,
  CateringServingsInfo,
  CheckedDiscountAvailable,
  DailyInventoryItems,
  EventForecasts,
  EventForecastsCopy,
  EventForecastsInfo,
  ExceptionDetailType,
  InventoryItemTemplates,
  InventoryItems,
  InventoryItemsCopy,
  InventoryItemsCreated,
  ItemClasses,
  ItemClassesCopy,
  ItemClassesInfo,
  ItemPools,
  ItemPoolsInfo,
  RevenueGroups,
  RevenueGroupsInfo,
  RevenueTypes,
  RevenueTypesInfo,
  Status,
} from '../models/index';
import {
    CateringContainersFromJSON,
    CateringContainersToJSON,
    CateringContainersInfoFromJSON,
    CateringContainersInfoToJSON,
    CateringItemRatesFromJSON,
    CateringItemRatesToJSON,
    CateringItemRatesInfoFromJSON,
    CateringItemRatesInfoToJSON,
    CateringMenuClassesFromJSON,
    CateringMenuClassesToJSON,
    CateringMenuClassesInfoFromJSON,
    CateringMenuClassesInfoToJSON,
    CateringMenuItemClassesFromJSON,
    CateringMenuItemClassesToJSON,
    CateringMenuItemClassesCopyFromJSON,
    CateringMenuItemClassesCopyToJSON,
    CateringMenuItemClassesInfoFromJSON,
    CateringMenuItemClassesInfoToJSON,
    CateringMenuItemsFromJSON,
    CateringMenuItemsToJSON,
    CateringMenuItemsCopyFromJSON,
    CateringMenuItemsCopyToJSON,
    CateringMenuItemsInfoFromJSON,
    CateringMenuItemsInfoToJSON,
    CateringMenusFromJSON,
    CateringMenusToJSON,
    CateringMenusCopyFromJSON,
    CateringMenusCopyToJSON,
    CateringMenusInfoFromJSON,
    CateringMenusInfoToJSON,
    CateringPackageFromJSON,
    CateringPackageToJSON,
    CateringPackagesFromJSON,
    CateringPackagesToJSON,
    CateringPackagesInfoFromJSON,
    CateringPackagesInfoToJSON,
    CateringServingsFromJSON,
    CateringServingsToJSON,
    CateringServingsInfoFromJSON,
    CateringServingsInfoToJSON,
    CheckedDiscountAvailableFromJSON,
    CheckedDiscountAvailableToJSON,
    DailyInventoryItemsFromJSON,
    DailyInventoryItemsToJSON,
    EventForecastsFromJSON,
    EventForecastsToJSON,
    EventForecastsCopyFromJSON,
    EventForecastsCopyToJSON,
    EventForecastsInfoFromJSON,
    EventForecastsInfoToJSON,
    ExceptionDetailTypeFromJSON,
    ExceptionDetailTypeToJSON,
    InventoryItemTemplatesFromJSON,
    InventoryItemTemplatesToJSON,
    InventoryItemsFromJSON,
    InventoryItemsToJSON,
    InventoryItemsCopyFromJSON,
    InventoryItemsCopyToJSON,
    InventoryItemsCreatedFromJSON,
    InventoryItemsCreatedToJSON,
    ItemClassesFromJSON,
    ItemClassesToJSON,
    ItemClassesCopyFromJSON,
    ItemClassesCopyToJSON,
    ItemClassesInfoFromJSON,
    ItemClassesInfoToJSON,
    ItemPoolsFromJSON,
    ItemPoolsToJSON,
    ItemPoolsInfoFromJSON,
    ItemPoolsInfoToJSON,
    RevenueGroupsFromJSON,
    RevenueGroupsToJSON,
    RevenueGroupsInfoFromJSON,
    RevenueGroupsInfoToJSON,
    RevenueTypesFromJSON,
    RevenueTypesToJSON,
    RevenueTypesInfoFromJSON,
    RevenueTypesInfoToJSON,
    StatusFromJSON,
    StatusToJSON,
} from '../models/index';

export interface CheckDiscountAvailableRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyCateringMenuItemClassesRequest {
    cateringMenuItemClassesCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuItemClassesCopy: CateringMenuItemClassesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyCateringMenuItemsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuItemsCopy: CateringMenuItemsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyCateringMenusRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenusCopy: CateringMenusCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyEventForecastsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    eventForecastsCopy: EventForecastsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyInventoryItemsRequest {
    sourceHotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    inventoryItemsCopy: InventoryItemsCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface CopyItemClassesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemClassesCopy: ItemClassesCopy;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringContainersRequest {
    cateringContainersCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringItemRatesRequest {
    cateringItemRatesCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringMenuClassesRequest {
    menuClassesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    menuClassListIDExtension?: Array<number>;
    menuClassListIdContext?: Array<string>;
    menuClassListUniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringMenuItemClassesRequest {
    cateringMenuItemClassesCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    menuItemClassesIdExtension?: Array<number>;
    menuItemClassesIdContext?: Array<string>;
    menuItemClassesUniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringMenuItemsRequest {
    cateringMenuItemId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringMenuItemsByChainRequest {
    cateringMenuItemId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelId?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringMenuMultiCoursesRequest {
    coursesId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    courseIdListUniqueIdExtension?: Array<number>;
    courseIdListUniqueIdContext?: Array<string>;
    courseIdListUniqueIdType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringMenusRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringPackageEventNotesRequest {
    notedId: string;
    eventId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    pkgEventIdExtension?: number;
    pkgEventIdContext?: string;
    pkgEventIdType?: string;
    noteIdExtension?: number;
    noteIdContext?: string;
    noteIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringPackageEventsRequest {
    packageEventsId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    pkgEventIdExtension?: number;
    pkgEventIdContext?: string;
    pkgEventIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringPackagePricesRequest {
    pricesId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    packagPriceIdExtension?: number;
    packagPriceIdContext?: string;
    packagPriceIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringPackageResourceNotesRequest {
    notesId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringPackageResourcesRequest {
    hotelId: Array<string>;
    pkgEventId: Array<string>;
    pkgEventIdType: Array<string>;
    resourceId: Array<string>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    pkgEventIdExtension?: number;
    pkgEventIdContext?: string;
    pkgEventType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringPackageRevenuesRequest {
    priceId: string;
    revenueType: string;
    eventsId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    packagePriceIdExtension?: number;
    packagePriceIdContext?: string;
    packagePriceIdType?: string;
    eventIdExtension?: number;
    eventIdContext?: string;
    eventIdType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteCateringPackagesRequest {
    cateringPackageId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteEventForecastsRequest {
    eventTypesCode: string;
    forecastsId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    forecastIdExtension?: number;
    forecastIdContext?: string;
    forecastIdType?: string;
    hotelId?: Array<string>;
    revenueTypeCode?: string;
    revenueTypeDescription?: string;
    amount?: number;
    currencyCode?: string;
    amountType?: Set<DeleteEventForecastsAmountTypeEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInventoryItemTemplatesRequest {
    inventoryItemId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    inventoryItemTemplatesIdExtension?: Array<number>;
    inventoryItemTemplatesContext?: Array<string>;
    inventoryItemTemplatesType?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteInventoryItemsRequest {
    inventoryItemId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemIDExtension?: number;
    idContext?: string;
    itemIDType?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteItemClassesRequest {
    itemClassesCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteItemPoolsRequest {
    itemPoolsCode: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface DeleteRevenueGroupsRequest {
    revenueGroupsCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringContainersRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringItemRatesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    codes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringMenuRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    inactive?: boolean;
    fetchInstructions?: Set<GetCateringMenuFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringMenuClassesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    className?: string;
    webBookable?: boolean;
    includeMenus?: boolean;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringMenuItemClassesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    className?: string;
    menuTypes?: Set<GetCateringMenuItemClassesMenuTypesEnum>;
    webBookable?: boolean;
    includeMenuItems?: boolean;
    inactive?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringMenuItemsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    name?: string;
    codes?: Array<string>;
    quickInsertCode?: string;
    listTypeCodes?: Array<string>;
    inactive?: boolean;
    eventTypesCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringMenusRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    menuId?: string;
    iDExtension?: number;
    idContext?: string;
    menuIDType?: string;
    name?: string;
    classNameListCodes?: Array<string>;
    eventTypesCodes?: Array<string>;
    menuTypes?: Set<GetCateringMenusMenuTypesEnum>;
    dietaryListCodes?: Array<string>;
    inactive?: boolean;
    multiChoice?: boolean;
    webBookable?: boolean;
    end?: Date;
    start?: Date;
    fetchInstructions?: Set<GetCateringMenusFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackageRequest {
    cateringPackageId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    idExtension?: number;
    idContext?: string;
    pkgIDType?: string;
    fetchInstructions?: Set<GetCateringPackageFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackageByChainRequest {
    cateringPackageId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelId?: string;
    idExtension?: number;
    idContext?: string;
    pkgIDType?: string;
    fetchInstructions?: Set<GetCateringPackageByChainFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackagesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    packageCode?: Array<string>;
    description?: string;
    duration?: number;
    webBookable?: boolean;
    pkgTmpltType?: GetCateringPackagesPkgTmpltTypeEnum;
    marketCode?: string;
    priceCode?: string;
    minAttendees?: number;
    maxAttendees?: number;
    sellDate?: Date;
    startDateTime?: string;
    endDateTime?: string;
    bookingType?: string;
    fetchInstructions?: Set<GetCateringPackagesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringPackagesMultiPropertiesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    hotelIds?: Array<string>;
    packageCode?: Array<string>;
    description?: string;
    duration?: number;
    webBookable?: boolean;
    pkgTmpltType?: GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum;
    marketCode?: string;
    priceCode?: string;
    minAttendees?: number;
    maxAttendees?: number;
    sellDate?: Date;
    startDateTime?: string;
    endDateTime?: string;
    bookingType?: string;
    fetchInstructions?: Set<GetCateringPackagesMultiPropertiesFetchInstructionsEnum>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetCateringServingsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    servingCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetDailyInventoryItemsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemClassCode?: string;
    itemName?: string;
    friday?: boolean;
    monday?: boolean;
    saturday?: boolean;
    sunday?: boolean;
    thursday?: boolean;
    tuesday?: boolean;
    wednesday?: boolean;
    startDate?: Date;
    endDate?: Date;
    duration?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetEventForecastsRequest {
    hotelId: string;
    fetchInstructions: Set<GetEventForecastsFetchInstructionsEnum>;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    limit?: number;
    offset?: number;
    eventTypeCodes?: Array<string>;
    eventTypeWildCard?: string;
    revenueTypeCodes?: Array<string>;
    revenueTypeWildCard?: string;
    eventDate?: Date;
    blockTypeCodes?: Array<string>;
    marketCodes?: Array<string>;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInventoryItemTemplatesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelId?: string;
    inventoryItemTemplateName?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetInventoryItemsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemClassCode?: string;
    itemName?: string;
    itemCode?: string;
    eventTypecodes?: Array<string>;
    usedForEvents?: boolean;
    includeItemsFromTemplates?: boolean;
    startDateTime?: string;
    endDateTime?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetItemClassesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelId?: Array<string>;
    itemClassesCode?: Array<string>;
    wildCard?: string;
    criteria?: GetItemClassesCriteriaEnum;
    classId?: number;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetItemPoolsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    hotelIds?: Array<string>;
    itemClasseCodes?: Array<string>;
    wildCard?: string;
    itemPoolCodes?: Array<string>;
    itemPoolsWildCard?: string;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueGroupsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    fetchInactive?: boolean;
    revenueGroupCodes?: Array<string>;
    wildCard?: string;
    description?: string;
    includeRevenueType?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface GetRevenueTypesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    revenueGroupCodes?: Array<string>;
    revenueGroupWildCard?: string;
    revenueTypeCodes?: Array<string>;
    revenueTypeWildCard?: string;
    includeInactive?: boolean;
    includeRevenueTypeDetail?: boolean;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringContainersRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringContainers: CateringContainers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringItemRatesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringItemRates: CateringItemRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringMenuClassesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuClasses: CateringMenuClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringMenuItemClassesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuItemClasses: CateringMenuItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringMenuItemsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuItems: CateringMenuItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringMenusRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenus: CateringMenus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostCateringPackagesRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringPackages: CateringPackages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostEventForecastsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    eventForecasts: EventForecasts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostInventoryItemTemplatesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    inventoryItemTemplates: InventoryItemTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostInventoryItemsRequest {
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    inventoryItems: InventoryItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostItemClassesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemClasses: ItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostItemPoolsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemPools: ItemPools;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRevenueGroupsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    revenueGroups: RevenueGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PostRevenueTypesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    revenueTypes: RevenueTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringContainersRequest {
    cateringContainersCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringContainers: CateringContainers;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringItemRatesRequest {
    cateringItemRatesCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringItemRates: CateringItemRates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringMenuClassesRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuClasses: CateringMenuClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringMenuItemClassesRequest {
    cateringMenuItemClassesCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuItemClasses: CateringMenuItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringMenuItemsRequest {
    cateringMenuItemId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenuItems: CateringMenuItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringMenusRequest {
    cateringMenuId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringMenus: CateringMenus;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringPackagesRequest {
    cateringPackageId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringPackages: CateringPackages;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutCateringServingsRequest {
    cateringServingsCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    cateringServings: CateringServings;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutEventForecastsRequest {
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    eventForecasts: EventForecasts;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInventoryItemTemplatesRequest {
    inventoryItemId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    inventoryItemTemplates: InventoryItemTemplates;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutInventoryItemsRequest {
    inventoryItemId: string;
    hotelId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    inventoryItems: InventoryItems;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutItemClassesRequest {
    itemClassesCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemClasses: ItemClasses;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutItemPoolsRequest {
    itemPoolsCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    itemPools: ItemPools;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueGroupsRequest {
    revenueGroupsCode: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    revenueGroups: RevenueGroups;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

export interface PutRevenueTypesRequest {
    revenueTypesId: string;
    authorization: string;
    xAppKey: string;
    xHotelid: string;
    revenueTypes: RevenueTypes;
    xExternalsystem?: string;
    acceptLanguage?: string;
}

/**
 * 
 */
export class ResourceConfigApi extends runtime.BaseAPI {

    /**
     * Check if discount is available <p><strong>OperationId:</strong>checkDiscountAvailable</p>
     * Check if discount is available
     */
    async checkDiscountAvailableRaw(requestParameters: CheckDiscountAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CheckedDiscountAvailable>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling checkDiscountAvailable.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling checkDiscountAvailable.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling checkDiscountAvailable.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling checkDiscountAvailable.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/discountAvailable/check`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckedDiscountAvailableFromJSON(jsonValue));
    }

    /**
     * Check if discount is available <p><strong>OperationId:</strong>checkDiscountAvailable</p>
     * Check if discount is available
     */
    async checkDiscountAvailable(requestParameters: CheckDiscountAvailableRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CheckedDiscountAvailable> {
        const response = await this.checkDiscountAvailableRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to copy menu item classes. <p><strong>OperationId:</strong>copyCateringMenuItemClasses</p>
     * Copy menu item classes
     */
    async copyCateringMenuItemClassesRaw(requestParameters: CopyCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuItemClassesCode === null || requestParameters.cateringMenuItemClassesCode === undefined) {
            throw new runtime.RequiredError('cateringMenuItemClassesCode','Required parameter requestParameters.cateringMenuItemClassesCode was null or undefined when calling copyCateringMenuItemClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyCateringMenuItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyCateringMenuItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyCateringMenuItemClasses.');
        }

        if (requestParameters.cateringMenuItemClassesCopy === null || requestParameters.cateringMenuItemClassesCopy === undefined) {
            throw new runtime.RequiredError('cateringMenuItemClassesCopy','Required parameter requestParameters.cateringMenuItemClassesCopy was null or undefined when calling copyCateringMenuItemClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringMenuItemClasses/{cateringMenuItemClassesCode}/copy`.replace(`{${"cateringMenuItemClassesCode"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemClassesCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuItemClassesCopyToJSON(requestParameters.cateringMenuItemClassesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to copy menu item classes. <p><strong>OperationId:</strong>copyCateringMenuItemClasses</p>
     * Copy menu item classes
     */
    async copyCateringMenuItemClasses(requestParameters: CopyCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyCateringMenuItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>copyCateringMenuItems</p>
     * Operation to copy catering menu items.
     */
    async copyCateringMenuItemsRaw(requestParameters: CopyCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyCateringMenuItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyCateringMenuItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyCateringMenuItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyCateringMenuItems.');
        }

        if (requestParameters.cateringMenuItemsCopy === null || requestParameters.cateringMenuItemsCopy === undefined) {
            throw new runtime.RequiredError('cateringMenuItemsCopy','Required parameter requestParameters.cateringMenuItemsCopy was null or undefined when calling copyCateringMenuItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuItems/copy`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuItemsCopyToJSON(requestParameters.cateringMenuItemsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>copyCateringMenuItems</p>
     * Operation to copy catering menu items.
     */
    async copyCateringMenuItems(requestParameters: CopyCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyCateringMenuItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy a menu for a property. <p><strong>OperationId:</strong>copyCateringMenus</p>
     * Copy a menu
     */
    async copyCateringMenusRaw(requestParameters: CopyCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
            throw new runtime.RequiredError('cateringMenuId','Required parameter requestParameters.cateringMenuId was null or undefined when calling copyCateringMenus.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling copyCateringMenus.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyCateringMenus.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyCateringMenus.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyCateringMenus.');
        }

        if (requestParameters.cateringMenusCopy === null || requestParameters.cateringMenusCopy === undefined) {
            throw new runtime.RequiredError('cateringMenusCopy','Required parameter requestParameters.cateringMenusCopy was null or undefined when calling copyCateringMenus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}/copy`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenusCopyToJSON(requestParameters.cateringMenusCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Copy a menu for a property. <p><strong>OperationId:</strong>copyCateringMenus</p>
     * Copy a menu
     */
    async copyCateringMenus(requestParameters: CopyCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyCateringMenusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to copy an Event Forecast from a property to another. <p><strong>OperationId:</strong>copyEventForecasts</p>
     * Copy event forecasts
     */
    async copyEventForecastsRaw(requestParameters: CopyEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyEventForecasts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyEventForecasts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyEventForecasts.');
        }

        if (requestParameters.eventForecastsCopy === null || requestParameters.eventForecastsCopy === undefined) {
            throw new runtime.RequiredError('eventForecastsCopy','Required parameter requestParameters.eventForecastsCopy was null or undefined when calling copyEventForecasts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/EventForecasts/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventForecastsCopyToJSON(requestParameters.eventForecastsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to copy an Event Forecast from a property to another. <p><strong>OperationId:</strong>copyEventForecasts</p>
     * Copy event forecasts
     */
    async copyEventForecasts(requestParameters: CopyEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyEventForecastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to select multiple Item Inventories from the Source Property and copy to the Target Property. <p><strong>OperationId:</strong>copyInventoryItems</p>
     * Copy Item Inventories
     */
    async copyInventoryItemsRaw(requestParameters: CopyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.sourceHotelId === null || requestParameters.sourceHotelId === undefined) {
            throw new runtime.RequiredError('sourceHotelId','Required parameter requestParameters.sourceHotelId was null or undefined when calling copyInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyInventoryItems.');
        }

        if (requestParameters.inventoryItemsCopy === null || requestParameters.inventoryItemsCopy === undefined) {
            throw new runtime.RequiredError('inventoryItemsCopy','Required parameter requestParameters.inventoryItemsCopy was null or undefined when calling copyInventoryItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{sourceHotelId}/inventoryItems/copy`.replace(`{${"sourceHotelId"}}`, encodeURIComponent(String(requestParameters.sourceHotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryItemsCopyToJSON(requestParameters.inventoryItemsCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to select multiple Item Inventories from the Source Property and copy to the Target Property. <p><strong>OperationId:</strong>copyInventoryItems</p>
     * Copy Item Inventories
     */
    async copyInventoryItems(requestParameters: CopyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to copy item classes. <p><strong>OperationId:</strong>copyItemClasses</p>
     * Copy item classes
     */
    async copyItemClassesRaw(requestParameters: CopyItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling copyItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling copyItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling copyItemClasses.');
        }

        if (requestParameters.itemClassesCopy === null || requestParameters.itemClassesCopy === undefined) {
            throw new runtime.RequiredError('itemClassesCopy','Required parameter requestParameters.itemClassesCopy was null or undefined when calling copyItemClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/itemClasses/copy`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemClassesCopyToJSON(requestParameters.itemClassesCopy),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to copy item classes. <p><strong>OperationId:</strong>copyItemClasses</p>
     * Copy item classes
     */
    async copyItemClasses(requestParameters: CopyItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.copyItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>deleteCateringContainers</p>
     * Delete Catering container
     */
    async deleteCateringContainersRaw(requestParameters: DeleteCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringContainersCode === null || requestParameters.cateringContainersCode === undefined) {
            throw new runtime.RequiredError('cateringContainersCode','Required parameter requestParameters.cateringContainersCode was null or undefined when calling deleteCateringContainers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringContainers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringContainers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringContainers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringContainers/{cateringContainersCode}`.replace(`{${"cateringContainersCode"}}`, encodeURIComponent(String(requestParameters.cateringContainersCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>deleteCateringContainers</p>
     * Delete Catering container
     */
    async deleteCateringContainers(requestParameters: DeleteCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove catering item rates code <p><strong>OperationId:</strong>deleteCateringItemRates</p>
     * Remove catering item rates
     */
    async deleteCateringItemRatesRaw(requestParameters: DeleteCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringItemRatesCode === null || requestParameters.cateringItemRatesCode === undefined) {
            throw new runtime.RequiredError('cateringItemRatesCode','Required parameter requestParameters.cateringItemRatesCode was null or undefined when calling deleteCateringItemRates.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringItemRates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringItemRates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringItemRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringItemRates/{cateringItemRatesCode}`.replace(`{${"cateringItemRatesCode"}}`, encodeURIComponent(String(requestParameters.cateringItemRatesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Remove catering item rates code <p><strong>OperationId:</strong>deleteCateringItemRates</p>
     * Remove catering item rates
     */
    async deleteCateringItemRates(requestParameters: DeleteCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringItemRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete menu classes. <p><strong>OperationId:</strong>deleteCateringMenuClasses</p>
     * Delete menu classes
     */
    async deleteCateringMenuClassesRaw(requestParameters: DeleteCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.menuClassesId === null || requestParameters.menuClassesId === undefined) {
            throw new runtime.RequiredError('menuClassesId','Required parameter requestParameters.menuClassesId was null or undefined when calling deleteCateringMenuClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringMenuClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringMenuClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringMenuClasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.menuClassListIDExtension) {
            queryParameters['menuClassListIDExtension'] = requestParameters.menuClassListIDExtension;
        }

        if (requestParameters.menuClassListIdContext) {
            queryParameters['menuClassListIdContext'] = requestParameters.menuClassListIdContext;
        }

        if (requestParameters.menuClassListUniqueIdType) {
            queryParameters['menuClassListUniqueIdType'] = requestParameters.menuClassListUniqueIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/menuClasses/{menuClassesId}/cateringMenuClasses`.replace(`{${"menuClassesId"}}`, encodeURIComponent(String(requestParameters.menuClassesId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete menu classes. <p><strong>OperationId:</strong>deleteCateringMenuClasses</p>
     * Delete menu classes
     */
    async deleteCateringMenuClasses(requestParameters: DeleteCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringMenuClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete menu item classes. <p><strong>OperationId:</strong>deleteCateringMenuItemClasses</p>
     * Delete menu item classes
     */
    async deleteCateringMenuItemClassesRaw(requestParameters: DeleteCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuItemClassesCode === null || requestParameters.cateringMenuItemClassesCode === undefined) {
            throw new runtime.RequiredError('cateringMenuItemClassesCode','Required parameter requestParameters.cateringMenuItemClassesCode was null or undefined when calling deleteCateringMenuItemClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringMenuItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringMenuItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringMenuItemClasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.menuItemClassesIdExtension) {
            queryParameters['menuItemClassesIdExtension'] = requestParameters.menuItemClassesIdExtension;
        }

        if (requestParameters.menuItemClassesIdContext) {
            queryParameters['menuItemClassesIdContext'] = requestParameters.menuItemClassesIdContext;
        }

        if (requestParameters.menuItemClassesUniqueIdType) {
            queryParameters['menuItemClassesUniqueIdType'] = requestParameters.menuItemClassesUniqueIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringMenuItemClasses/{cateringMenuItemClassesCode}`.replace(`{${"cateringMenuItemClassesCode"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemClassesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete menu item classes. <p><strong>OperationId:</strong>deleteCateringMenuItemClasses</p>
     * Delete menu item classes
     */
    async deleteCateringMenuItemClasses(requestParameters: DeleteCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringMenuItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItems</p>
     * Operation to remove catering menu items.
     */
    async deleteCateringMenuItemsRaw(requestParameters: DeleteCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuItemId === null || requestParameters.cateringMenuItemId === undefined) {
            throw new runtime.RequiredError('cateringMenuItemId','Required parameter requestParameters.cateringMenuItemId was null or undefined when calling deleteCateringMenuItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringMenuItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringMenuItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringMenuItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringMenuItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuItems/{cateringMenuItemId}`.replace(`{${"cateringMenuItemId"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItems</p>
     * Operation to remove catering menu items.
     */
    async deleteCateringMenuItems(requestParameters: DeleteCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringMenuItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItemsByChain</p>
     * Operation to remove catering menu items by chain.
     */
    async deleteCateringMenuItemsByChainRaw(requestParameters: DeleteCateringMenuItemsByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuItemId === null || requestParameters.cateringMenuItemId === undefined) {
            throw new runtime.RequiredError('cateringMenuItemId','Required parameter requestParameters.cateringMenuItemId was null or undefined when calling deleteCateringMenuItemsByChain.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringMenuItemsByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringMenuItemsByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringMenuItemsByChain.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringMenuItems/{cateringMenuItemId}`.replace(`{${"cateringMenuItemId"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>deleteCateringMenuItemsByChain</p>
     * Operation to remove catering menu items by chain.
     */
    async deleteCateringMenuItemsByChain(requestParameters: DeleteCateringMenuItemsByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringMenuItemsByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to remove Menu Multi Courses. <p><strong>OperationId:</strong>deleteCateringMenuMultiCourses</p>
     * Remove menu multi courses
     */
    async deleteCateringMenuMultiCoursesRaw(requestParameters: DeleteCateringMenuMultiCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.coursesId === null || requestParameters.coursesId === undefined) {
            throw new runtime.RequiredError('coursesId','Required parameter requestParameters.coursesId was null or undefined when calling deleteCateringMenuMultiCourses.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringMenuMultiCourses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringMenuMultiCourses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringMenuMultiCourses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringMenuMultiCourses.');
        }

        const queryParameters: any = {};

        if (requestParameters.courseIdListUniqueIdExtension) {
            queryParameters['courseIdListUniqueIdExtension'] = requestParameters.courseIdListUniqueIdExtension;
        }

        if (requestParameters.courseIdListUniqueIdContext) {
            queryParameters['courseIdListUniqueIdContext'] = requestParameters.courseIdListUniqueIdContext;
        }

        if (requestParameters.courseIdListUniqueIdType) {
            queryParameters['courseIdListUniqueIdType'] = requestParameters.courseIdListUniqueIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/courses/{coursesId}/menuMultiCourses`.replace(`{${"coursesId"}}`, encodeURIComponent(String(requestParameters.coursesId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to remove Menu Multi Courses. <p><strong>OperationId:</strong>deleteCateringMenuMultiCourses</p>
     * Remove menu multi courses
     */
    async deleteCateringMenuMultiCourses(requestParameters: DeleteCateringMenuMultiCoursesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringMenuMultiCoursesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a menu from a property. <p><strong>OperationId:</strong>deleteCateringMenus</p>
     * Delete a menu
     */
    async deleteCateringMenusRaw(requestParameters: DeleteCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
            throw new runtime.RequiredError('cateringMenuId','Required parameter requestParameters.cateringMenuId was null or undefined when calling deleteCateringMenus.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringMenus.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringMenus.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringMenus.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringMenus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete a menu from a property. <p><strong>OperationId:</strong>deleteCateringMenus</p>
     * Delete a menu
     */
    async deleteCateringMenus(requestParameters: DeleteCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringMenusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete catering package event notes. <p><strong>OperationId:</strong>deleteCateringPackageEventNotes</p>
     * Delete catering package event notes
     */
    async deleteCateringPackageEventNotesRaw(requestParameters: DeleteCateringPackageEventNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.notedId === null || requestParameters.notedId === undefined) {
            throw new runtime.RequiredError('notedId','Required parameter requestParameters.notedId was null or undefined when calling deleteCateringPackageEventNotes.');
        }

        if (requestParameters.eventId === null || requestParameters.eventId === undefined) {
            throw new runtime.RequiredError('eventId','Required parameter requestParameters.eventId was null or undefined when calling deleteCateringPackageEventNotes.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageEventNotes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringPackageEventNotes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringPackageEventNotes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringPackageEventNotes.');
        }

        const queryParameters: any = {};

        if (requestParameters.pkgEventIdExtension !== undefined) {
            queryParameters['pkgEventIdExtension'] = requestParameters.pkgEventIdExtension;
        }

        if (requestParameters.pkgEventIdContext !== undefined) {
            queryParameters['pkgEventIdContext'] = requestParameters.pkgEventIdContext;
        }

        if (requestParameters.pkgEventIdType !== undefined) {
            queryParameters['pkgEventIdType'] = requestParameters.pkgEventIdType;
        }

        if (requestParameters.noteIdExtension !== undefined) {
            queryParameters['noteIdExtension'] = requestParameters.noteIdExtension;
        }

        if (requestParameters.noteIdContext !== undefined) {
            queryParameters['noteIdContext'] = requestParameters.noteIdContext;
        }

        if (requestParameters.noteIdType !== undefined) {
            queryParameters['noteIdType'] = requestParameters.noteIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packages/{eventId}/notes/{notedId}/cateringPackageEventNotes`.replace(`{${"notedId"}}`, encodeURIComponent(String(requestParameters.notedId))).replace(`{${"eventId"}}`, encodeURIComponent(String(requestParameters.eventId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete catering package event notes. <p><strong>OperationId:</strong>deleteCateringPackageEventNotes</p>
     * Delete catering package event notes
     */
    async deleteCateringPackageEventNotes(requestParameters: DeleteCateringPackageEventNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringPackageEventNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete catering package events. <p><strong>OperationId:</strong>deleteCateringPackageEvents</p>
     * Delete catering package events
     */
    async deleteCateringPackageEventsRaw(requestParameters: DeleteCateringPackageEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.packageEventsId === null || requestParameters.packageEventsId === undefined) {
            throw new runtime.RequiredError('packageEventsId','Required parameter requestParameters.packageEventsId was null or undefined when calling deleteCateringPackageEvents.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageEvents.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringPackageEvents.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringPackageEvents.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringPackageEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.pkgEventIdExtension !== undefined) {
            queryParameters['pkgEventIdExtension'] = requestParameters.pkgEventIdExtension;
        }

        if (requestParameters.pkgEventIdContext !== undefined) {
            queryParameters['pkgEventIdContext'] = requestParameters.pkgEventIdContext;
        }

        if (requestParameters.pkgEventIdType !== undefined) {
            queryParameters['pkgEventIdType'] = requestParameters.pkgEventIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packageEvents/{packageEventsId}/cateringPackageEvents`.replace(`{${"packageEventsId"}}`, encodeURIComponent(String(requestParameters.packageEventsId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete catering package events. <p><strong>OperationId:</strong>deleteCateringPackageEvents</p>
     * Delete catering package events
     */
    async deleteCateringPackageEvents(requestParameters: DeleteCateringPackageEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringPackageEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete Catering package prices. <p><strong>OperationId:</strong>deleteCateringPackagePrices</p>
     * Delete Catering package prices
     */
    async deleteCateringPackagePricesRaw(requestParameters: DeleteCateringPackagePricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.pricesId === null || requestParameters.pricesId === undefined) {
            throw new runtime.RequiredError('pricesId','Required parameter requestParameters.pricesId was null or undefined when calling deleteCateringPackagePrices.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackagePrices.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringPackagePrices.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringPackagePrices.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringPackagePrices.');
        }

        const queryParameters: any = {};

        if (requestParameters.packagPriceIdExtension !== undefined) {
            queryParameters['packagPriceIdExtension'] = requestParameters.packagPriceIdExtension;
        }

        if (requestParameters.packagPriceIdContext !== undefined) {
            queryParameters['packagPriceIdContext'] = requestParameters.packagPriceIdContext;
        }

        if (requestParameters.packagPriceIdType !== undefined) {
            queryParameters['packagPriceIdType'] = requestParameters.packagPriceIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/packagePrices/{pricesId}/cateringPackagePrices`.replace(`{${"pricesId"}}`, encodeURIComponent(String(requestParameters.pricesId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete Catering package prices. <p><strong>OperationId:</strong>deleteCateringPackagePrices</p>
     * Delete Catering package prices
     */
    async deleteCateringPackagePrices(requestParameters: DeleteCateringPackagePricesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringPackagePricesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete catering package resource notes. <p><strong>OperationId:</strong>deleteCateringPackageResourceNotes</p>
     * Delete catering package resource notes
     */
    async deleteCateringPackageResourceNotesRaw(requestParameters: DeleteCateringPackageResourceNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.notesId === null || requestParameters.notesId === undefined) {
            throw new runtime.RequiredError('notesId','Required parameter requestParameters.notesId was null or undefined when calling deleteCateringPackageResourceNotes.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageResourceNotes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringPackageResourceNotes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringPackageResourceNotes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringPackageResourceNotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/notes/{notesId}/cateringPackageResourceNotes`.replace(`{${"notesId"}}`, encodeURIComponent(String(requestParameters.notesId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete catering package resource notes. <p><strong>OperationId:</strong>deleteCateringPackageResourceNotes</p>
     * Delete catering package resource notes
     */
    async deleteCateringPackageResourceNotes(requestParameters: DeleteCateringPackageResourceNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringPackageResourceNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete catering package resources. <p><strong>OperationId:</strong>deleteCateringPackageResources</p>
     * Delete catering package resources
     */
    async deleteCateringPackageResourcesRaw(requestParameters: DeleteCateringPackageResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageResources.');
        }

        if (requestParameters.pkgEventId === null || requestParameters.pkgEventId === undefined) {
            throw new runtime.RequiredError('pkgEventId','Required parameter requestParameters.pkgEventId was null or undefined when calling deleteCateringPackageResources.');
        }

        if (requestParameters.pkgEventIdType === null || requestParameters.pkgEventIdType === undefined) {
            throw new runtime.RequiredError('pkgEventIdType','Required parameter requestParameters.pkgEventIdType was null or undefined when calling deleteCateringPackageResources.');
        }

        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling deleteCateringPackageResources.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringPackageResources.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringPackageResources.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringPackageResources.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.pkgEventId) {
            queryParameters['pkgEventId'] = requestParameters.pkgEventId;
        }

        if (requestParameters.pkgEventIdType) {
            queryParameters['pkgEventIdType'] = requestParameters.pkgEventIdType;
        }

        if (requestParameters.resourceId) {
            queryParameters['resourceId'] = requestParameters.resourceId;
        }

        if (requestParameters.pkgEventIdExtension !== undefined) {
            queryParameters['pkgEventIdExtension'] = requestParameters.pkgEventIdExtension;
        }

        if (requestParameters.pkgEventIdContext !== undefined) {
            queryParameters['pkgEventIdContext'] = requestParameters.pkgEventIdContext;
        }

        if (requestParameters.pkgEventType) {
            queryParameters['pkgEventType'] = requestParameters.pkgEventType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringPackageResources`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete catering package resources. <p><strong>OperationId:</strong>deleteCateringPackageResources</p>
     * Delete catering package resources
     */
    async deleteCateringPackageResources(requestParameters: DeleteCateringPackageResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringPackageResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete catering package revenues. <p><strong>OperationId:</strong>deleteCateringPackageRevenues</p>
     * Delete catering package revenues
     */
    async deleteCateringPackageRevenuesRaw(requestParameters: DeleteCateringPackageRevenuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.priceId === null || requestParameters.priceId === undefined) {
            throw new runtime.RequiredError('priceId','Required parameter requestParameters.priceId was null or undefined when calling deleteCateringPackageRevenues.');
        }

        if (requestParameters.revenueType === null || requestParameters.revenueType === undefined) {
            throw new runtime.RequiredError('revenueType','Required parameter requestParameters.revenueType was null or undefined when calling deleteCateringPackageRevenues.');
        }

        if (requestParameters.eventsId === null || requestParameters.eventsId === undefined) {
            throw new runtime.RequiredError('eventsId','Required parameter requestParameters.eventsId was null or undefined when calling deleteCateringPackageRevenues.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackageRevenues.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringPackageRevenues.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringPackageRevenues.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringPackageRevenues.');
        }

        const queryParameters: any = {};

        if (requestParameters.packagePriceIdExtension !== undefined) {
            queryParameters['packagePriceIdExtension'] = requestParameters.packagePriceIdExtension;
        }

        if (requestParameters.packagePriceIdContext !== undefined) {
            queryParameters['packagePriceIdContext'] = requestParameters.packagePriceIdContext;
        }

        if (requestParameters.packagePriceIdType !== undefined) {
            queryParameters['packagePriceIdType'] = requestParameters.packagePriceIdType;
        }

        if (requestParameters.eventIdExtension !== undefined) {
            queryParameters['eventIdExtension'] = requestParameters.eventIdExtension;
        }

        if (requestParameters.eventIdContext !== undefined) {
            queryParameters['eventIdContext'] = requestParameters.eventIdContext;
        }

        if (requestParameters.eventIdType !== undefined) {
            queryParameters['eventIdType'] = requestParameters.eventIdType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/events/{eventsId}/revenues/{revenueType}/packages/{priceId}/cateringPackageRevenues`.replace(`{${"priceId"}}`, encodeURIComponent(String(requestParameters.priceId))).replace(`{${"revenueType"}}`, encodeURIComponent(String(requestParameters.revenueType))).replace(`{${"eventsId"}}`, encodeURIComponent(String(requestParameters.eventsId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete catering package revenues. <p><strong>OperationId:</strong>deleteCateringPackageRevenues</p>
     * Delete catering package revenues
     */
    async deleteCateringPackageRevenues(requestParameters: DeleteCateringPackageRevenuesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringPackageRevenuesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete catering packages. <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete catering packages
     */
    async deleteCateringPackagesRaw(requestParameters: DeleteCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
            throw new runtime.RequiredError('cateringPackageId','Required parameter requestParameters.cateringPackageId was null or undefined when calling deleteCateringPackages.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteCateringPackages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteCateringPackages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteCateringPackages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteCateringPackages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete catering packages. <p><strong>OperationId:</strong>deleteCateringPackages</p>
     * Delete catering packages
     */
    async deleteCateringPackages(requestParameters: DeleteCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteCateringPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to delete an Event Forecast for a property. <p><strong>OperationId:</strong>deleteEventForecasts</p>
     * Delete event forecasts
     */
    async deleteEventForecastsRaw(requestParameters: DeleteEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.eventTypesCode === null || requestParameters.eventTypesCode === undefined) {
            throw new runtime.RequiredError('eventTypesCode','Required parameter requestParameters.eventTypesCode was null or undefined when calling deleteEventForecasts.');
        }

        if (requestParameters.forecastsId === null || requestParameters.forecastsId === undefined) {
            throw new runtime.RequiredError('forecastsId','Required parameter requestParameters.forecastsId was null or undefined when calling deleteEventForecasts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteEventForecasts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteEventForecasts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteEventForecasts.');
        }

        const queryParameters: any = {};

        if (requestParameters.forecastIdExtension !== undefined) {
            queryParameters['forecastIdExtension'] = requestParameters.forecastIdExtension;
        }

        if (requestParameters.forecastIdContext !== undefined) {
            queryParameters['forecastIdContext'] = requestParameters.forecastIdContext;
        }

        if (requestParameters.forecastIdType !== undefined) {
            queryParameters['forecastIdType'] = requestParameters.forecastIdType;
        }

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.revenueTypeCode !== undefined) {
            queryParameters['revenueTypeCode'] = requestParameters.revenueTypeCode;
        }

        if (requestParameters.revenueTypeDescription !== undefined) {
            queryParameters['revenueTypeDescription'] = requestParameters.revenueTypeDescription;
        }

        if (requestParameters.amount !== undefined) {
            queryParameters['amount'] = requestParameters.amount;
        }

        if (requestParameters.currencyCode !== undefined) {
            queryParameters['currencyCode'] = requestParameters.currencyCode;
        }

        if (requestParameters.amountType) {
            queryParameters['amountType'] = requestParameters.amountType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/eventForecasts/{forecastsId}/eventTypes/{eventTypesCode}/eventForecasts`.replace(`{${"eventTypesCode"}}`, encodeURIComponent(String(requestParameters.eventTypesCode))).replace(`{${"forecastsId"}}`, encodeURIComponent(String(requestParameters.forecastsId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to delete an Event Forecast for a property. <p><strong>OperationId:</strong>deleteEventForecasts</p>
     * Delete event forecasts
     */
    async deleteEventForecasts(requestParameters: DeleteEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteEventForecastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Item Inventory template. <p><strong>OperationId:</strong>deleteInventoryItemTemplates</p>
     * Delete Item Inventory templates
     */
    async deleteInventoryItemTemplatesRaw(requestParameters: DeleteInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
            throw new runtime.RequiredError('inventoryItemId','Required parameter requestParameters.inventoryItemId was null or undefined when calling deleteInventoryItemTemplates.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteInventoryItemTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteInventoryItemTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteInventoryItemTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.inventoryItemTemplatesIdExtension) {
            queryParameters['inventoryItemTemplatesIdExtension'] = requestParameters.inventoryItemTemplatesIdExtension;
        }

        if (requestParameters.inventoryItemTemplatesContext) {
            queryParameters['inventoryItemTemplatesContext'] = requestParameters.inventoryItemTemplatesContext;
        }

        if (requestParameters.inventoryItemTemplatesType) {
            queryParameters['inventoryItemTemplatesType'] = requestParameters.inventoryItemTemplatesType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete Item Inventory template. <p><strong>OperationId:</strong>deleteInventoryItemTemplates</p>
     * Delete Item Inventory templates
     */
    async deleteInventoryItemTemplates(requestParameters: DeleteInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInventoryItemTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to delete an existing Item Inventory Code  <p><strong>OperationId:</strong>deleteInventoryItems</p>
     * Delete Item Inventory
     */
    async deleteInventoryItemsRaw(requestParameters: DeleteInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
            throw new runtime.RequiredError('inventoryItemId','Required parameter requestParameters.inventoryItemId was null or undefined when calling deleteInventoryItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteInventoryItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.itemIDExtension !== undefined) {
            queryParameters['itemIDExtension'] = requestParameters.itemIDExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.itemIDType !== undefined) {
            queryParameters['itemIDType'] = requestParameters.itemIDType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to delete an existing Item Inventory Code  <p><strong>OperationId:</strong>deleteInventoryItems</p>
     * Delete Item Inventory
     */
    async deleteInventoryItems(requestParameters: DeleteInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to delete an existing Item Classes for a property. <p><strong>OperationId:</strong>deleteItemClasses</p>
     * Delete Item classes
     */
    async deleteItemClassesRaw(requestParameters: DeleteItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.itemClassesCode === null || requestParameters.itemClassesCode === undefined) {
            throw new runtime.RequiredError('itemClassesCode','Required parameter requestParameters.itemClassesCode was null or undefined when calling deleteItemClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteItemClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/itemClasses/{itemClassesCode}`.replace(`{${"itemClassesCode"}}`, encodeURIComponent(String(requestParameters.itemClassesCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to delete an existing Item Classes for a property. <p><strong>OperationId:</strong>deleteItemClasses</p>
     * Delete Item classes
     */
    async deleteItemClasses(requestParameters: DeleteItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Item Pool for a property. <p><strong>OperationId:</strong>deleteItemPools</p>
     * Delete Item Pools
     */
    async deleteItemPoolsRaw(requestParameters: DeleteItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.itemPoolsCode === null || requestParameters.itemPoolsCode === undefined) {
            throw new runtime.RequiredError('itemPoolsCode','Required parameter requestParameters.itemPoolsCode was null or undefined when calling deleteItemPools.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling deleteItemPools.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteItemPools.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteItemPools.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteItemPools.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/itemPools/{itemPoolsCode}/itemPools`.replace(`{${"itemPoolsCode"}}`, encodeURIComponent(String(requestParameters.itemPoolsCode))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Delete Item Pool for a property. <p><strong>OperationId:</strong>deleteItemPools</p>
     * Delete Item Pools
     */
    async deleteItemPools(requestParameters: DeleteItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteItemPoolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to delete a catering revenue group code. <p><strong>OperationId:</strong>deleteRevenueGroups</p>
     * Delete Catering Revenue Groups
     */
    async deleteRevenueGroupsRaw(requestParameters: DeleteRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueGroupsCode === null || requestParameters.revenueGroupsCode === undefined) {
            throw new runtime.RequiredError('revenueGroupsCode','Required parameter requestParameters.revenueGroupsCode was null or undefined when calling deleteRevenueGroups.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteRevenueGroups.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling deleteRevenueGroups.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling deleteRevenueGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueGroups/{revenueGroupsCode}`.replace(`{${"revenueGroupsCode"}}`, encodeURIComponent(String(requestParameters.revenueGroupsCode))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to delete a catering revenue group code. <p><strong>OperationId:</strong>deleteRevenueGroups</p>
     * Delete Catering Revenue Groups
     */
    async deleteRevenueGroups(requestParameters: DeleteRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.deleteRevenueGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to retrieve all existing Menu Item Catering Container codes. <p><strong>OperationId:</strong>getCateringContainers</p>
     * Get catering containers
     */
    async getCateringContainersRaw(requestParameters: GetCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringContainersInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringContainers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringContainers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringContainers.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringContainers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringContainersInfoFromJSON(jsonValue));
    }

    /**
     * This API allows you to retrieve all existing Menu Item Catering Container codes. <p><strong>OperationId:</strong>getCateringContainers</p>
     * Get catering containers
     */
    async getCateringContainers(requestParameters: GetCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringContainersInfo> {
        const response = await this.getCateringContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve catering item rates <p><strong>OperationId:</strong>getCateringItemRates</p>
     * Get catering item rates
     */
    async getCateringItemRatesRaw(requestParameters: GetCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringItemRatesInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringItemRates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringItemRates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringItemRates.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringItemRates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringItemRatesInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve catering item rates <p><strong>OperationId:</strong>getCateringItemRates</p>
     * Get catering item rates
     */
    async getCateringItemRates(requestParameters: GetCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringItemRatesInfo> {
        const response = await this.getCateringItemRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve details of a Catering menu <p><strong>OperationId:</strong>getCateringMenu</p>
     * Get menu
     */
    async getCateringMenuRaw(requestParameters: GetCateringMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenusInfo>> {
        if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
            throw new runtime.RequiredError('cateringMenuId','Required parameter requestParameters.cateringMenuId was null or undefined when calling getCateringMenu.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenu.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringMenu.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringMenu.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringMenu.');
        }

        const queryParameters: any = {};

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringMenusInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve details of a Catering menu <p><strong>OperationId:</strong>getCateringMenu</p>
     * Get menu
     */
    async getCateringMenu(requestParameters: GetCateringMenuRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenusInfo> {
        const response = await this.getCateringMenuRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get menu classes for a property. <p><strong>OperationId:</strong>getCateringMenuClasses</p>
     * Get menu classes
     */
    async getCateringMenuClassesRaw(requestParameters: GetCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenuClassesInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenuClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringMenuClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringMenuClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringMenuClasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.className !== undefined) {
            queryParameters['className'] = requestParameters.className;
        }

        if (requestParameters.webBookable !== undefined) {
            queryParameters['webBookable'] = requestParameters.webBookable;
        }

        if (requestParameters.includeMenus !== undefined) {
            queryParameters['includeMenus'] = requestParameters.includeMenus;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringMenuClassesInfoFromJSON(jsonValue));
    }

    /**
     * Get menu classes for a property. <p><strong>OperationId:</strong>getCateringMenuClasses</p>
     * Get menu classes
     */
    async getCateringMenuClasses(requestParameters: GetCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenuClassesInfo> {
        const response = await this.getCateringMenuClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get menu item classes for a property. <p><strong>OperationId:</strong>getCateringMenuItemClasses</p>
     * Get menu item classes
     */
    async getCateringMenuItemClassesRaw(requestParameters: GetCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenuItemClassesInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenuItemClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringMenuItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringMenuItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringMenuItemClasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.className !== undefined) {
            queryParameters['className'] = requestParameters.className;
        }

        if (requestParameters.menuTypes) {
            queryParameters['menuTypes'] = requestParameters.menuTypes;
        }

        if (requestParameters.webBookable !== undefined) {
            queryParameters['webBookable'] = requestParameters.webBookable;
        }

        if (requestParameters.includeMenuItems !== undefined) {
            queryParameters['includeMenuItems'] = requestParameters.includeMenuItems;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuItemClasses`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringMenuItemClassesInfoFromJSON(jsonValue));
    }

    /**
     * Get menu item classes for a property. <p><strong>OperationId:</strong>getCateringMenuItemClasses</p>
     * Get menu item classes
     */
    async getCateringMenuItemClasses(requestParameters: GetCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenuItemClassesInfo> {
        const response = await this.getCateringMenuItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    async getCateringMenuItemsRaw(requestParameters: GetCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenuItemsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenuItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringMenuItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringMenuItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringMenuItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.codes) {
            queryParameters['codes'] = requestParameters.codes;
        }

        if (requestParameters.quickInsertCode !== undefined) {
            queryParameters['quickInsertCode'] = requestParameters.quickInsertCode;
        }

        if (requestParameters.listTypeCodes) {
            queryParameters['listTypeCodes'] = requestParameters.listTypeCodes;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.eventTypesCodes) {
            queryParameters['eventTypesCodes'] = requestParameters.eventTypesCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringMenuItemsInfoFromJSON(jsonValue));
    }

    /**
     * Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p>
     * Get Menu items
     */
    async getCateringMenuItems(requestParameters: GetCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenuItemsInfo> {
        const response = await this.getCateringMenuItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    async getCateringMenusRaw(requestParameters: GetCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringMenusInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCateringMenus.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringMenus.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringMenus.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringMenus.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.menuId !== undefined) {
            queryParameters['menuId'] = requestParameters.menuId;
        }

        if (requestParameters.iDExtension !== undefined) {
            queryParameters['iDExtension'] = requestParameters.iDExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.menuIDType !== undefined) {
            queryParameters['menuIDType'] = requestParameters.menuIDType;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.classNameListCodes) {
            queryParameters['classNameListCodes'] = requestParameters.classNameListCodes;
        }

        if (requestParameters.eventTypesCodes) {
            queryParameters['eventTypesCodes'] = requestParameters.eventTypesCodes;
        }

        if (requestParameters.menuTypes) {
            queryParameters['menuTypes'] = requestParameters.menuTypes;
        }

        if (requestParameters.dietaryListCodes) {
            queryParameters['dietaryListCodes'] = requestParameters.dietaryListCodes;
        }

        if (requestParameters.inactive !== undefined) {
            queryParameters['inactive'] = requestParameters.inactive;
        }

        if (requestParameters.multiChoice !== undefined) {
            queryParameters['multiChoice'] = requestParameters.multiChoice;
        }

        if (requestParameters.webBookable !== undefined) {
            queryParameters['webBookable'] = requestParameters.webBookable;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringMenusInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p>
     * Get menus
     */
    async getCateringMenus(requestParameters: GetCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringMenusInfo> {
        const response = await this.getCateringMenusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackage</p>
     * Get catering package
     */
    async getCateringPackageRaw(requestParameters: GetCateringPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackage>> {
        if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
            throw new runtime.RequiredError('cateringPackageId','Required parameter requestParameters.cateringPackageId was null or undefined when calling getCateringPackage.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCateringPackage.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringPackage.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringPackage.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringPackage.');
        }

        const queryParameters: any = {};

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.pkgIDType !== undefined) {
            queryParameters['pkgIDType'] = requestParameters.pkgIDType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringPackageFromJSON(jsonValue));
    }

    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackage</p>
     * Get catering package
     */
    async getCateringPackage(requestParameters: GetCateringPackageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackage> {
        const response = await this.getCateringPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackageByChain</p>
     * Get catering package by chain
     */
    async getCateringPackageByChainRaw(requestParameters: GetCateringPackageByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackage>> {
        if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
            throw new runtime.RequiredError('cateringPackageId','Required parameter requestParameters.cateringPackageId was null or undefined when calling getCateringPackageByChain.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringPackageByChain.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringPackageByChain.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringPackageByChain.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.idExtension !== undefined) {
            queryParameters['idExtension'] = requestParameters.idExtension;
        }

        if (requestParameters.idContext !== undefined) {
            queryParameters['idContext'] = requestParameters.idContext;
        }

        if (requestParameters.pkgIDType !== undefined) {
            queryParameters['pkgIDType'] = requestParameters.pkgIDType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringPackageFromJSON(jsonValue));
    }

    /**
     * Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackageByChain</p>
     * Get catering package by chain
     */
    async getCateringPackageByChain(requestParameters: GetCateringPackageByChainRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackage> {
        const response = await this.getCateringPackageByChainRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch existing Catering Packages for a property. <p><strong>OperationId:</strong>getCateringPackages</p>
     * Fetch catering packages for a property.
     */
    async getCateringPackagesRaw(requestParameters: GetCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackagesInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getCateringPackages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringPackages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringPackages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringPackages.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.webBookable !== undefined) {
            queryParameters['webBookable'] = requestParameters.webBookable;
        }

        if (requestParameters.pkgTmpltType !== undefined) {
            queryParameters['pkgTmpltType'] = requestParameters.pkgTmpltType;
        }

        if (requestParameters.marketCode !== undefined) {
            queryParameters['marketCode'] = requestParameters.marketCode;
        }

        if (requestParameters.priceCode !== undefined) {
            queryParameters['priceCode'] = requestParameters.priceCode;
        }

        if (requestParameters.minAttendees !== undefined) {
            queryParameters['minAttendees'] = requestParameters.minAttendees;
        }

        if (requestParameters.maxAttendees !== undefined) {
            queryParameters['maxAttendees'] = requestParameters.maxAttendees;
        }

        if (requestParameters.sellDate !== undefined) {
            queryParameters['sellDate'] = (requestParameters.sellDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = requestParameters.startDateTime;
        }

        if (requestParameters.endDateTime !== undefined) {
            queryParameters['endDateTime'] = requestParameters.endDateTime;
        }

        if (requestParameters.bookingType !== undefined) {
            queryParameters['bookingType'] = requestParameters.bookingType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringPackages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringPackagesInfoFromJSON(jsonValue));
    }

    /**
     * Fetch existing Catering Packages for a property. <p><strong>OperationId:</strong>getCateringPackages</p>
     * Fetch catering packages for a property.
     */
    async getCateringPackages(requestParameters: GetCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackagesInfo> {
        const response = await this.getCateringPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch existing Catering Packages. <p><strong>OperationId:</strong>getCateringPackagesMultiProperties</p>
     * Fetch catering packages
     */
    async getCateringPackagesMultiPropertiesRaw(requestParameters: GetCateringPackagesMultiPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringPackagesInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringPackagesMultiProperties.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringPackagesMultiProperties.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringPackagesMultiProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.packageCode) {
            queryParameters['packageCode'] = requestParameters.packageCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        if (requestParameters.webBookable !== undefined) {
            queryParameters['webBookable'] = requestParameters.webBookable;
        }

        if (requestParameters.pkgTmpltType !== undefined) {
            queryParameters['pkgTmpltType'] = requestParameters.pkgTmpltType;
        }

        if (requestParameters.marketCode !== undefined) {
            queryParameters['marketCode'] = requestParameters.marketCode;
        }

        if (requestParameters.priceCode !== undefined) {
            queryParameters['priceCode'] = requestParameters.priceCode;
        }

        if (requestParameters.minAttendees !== undefined) {
            queryParameters['minAttendees'] = requestParameters.minAttendees;
        }

        if (requestParameters.maxAttendees !== undefined) {
            queryParameters['maxAttendees'] = requestParameters.maxAttendees;
        }

        if (requestParameters.sellDate !== undefined) {
            queryParameters['sellDate'] = (requestParameters.sellDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = requestParameters.startDateTime;
        }

        if (requestParameters.endDateTime !== undefined) {
            queryParameters['endDateTime'] = requestParameters.endDateTime;
        }

        if (requestParameters.bookingType !== undefined) {
            queryParameters['bookingType'] = requestParameters.bookingType;
        }

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringPackages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringPackagesInfoFromJSON(jsonValue));
    }

    /**
     * Fetch existing Catering Packages. <p><strong>OperationId:</strong>getCateringPackagesMultiProperties</p>
     * Fetch catering packages
     */
    async getCateringPackagesMultiProperties(requestParameters: GetCateringPackagesMultiPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringPackagesInfo> {
        const response = await this.getCateringPackagesMultiPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get catering servings <p><strong>OperationId:</strong>getCateringServings</p>
     * Get catering servings
     */
    async getCateringServingsRaw(requestParameters: GetCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CateringServingsInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getCateringServings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getCateringServings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getCateringServings.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.servingCodes) {
            queryParameters['servingCodes'] = requestParameters.servingCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringServings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CateringServingsInfoFromJSON(jsonValue));
    }

    /**
     * Get catering servings <p><strong>OperationId:</strong>getCateringServings</p>
     * Get catering servings
     */
    async getCateringServings(requestParameters: GetCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CateringServingsInfo> {
        const response = await this.getCateringServingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of Daily Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc. API will fetch daily quantity configured for the particular item.  <p><strong>OperationId:</strong>getDailyInventoryItems</p>
     * Get Daily Item Inventory
     */
    async getDailyInventoryItemsRaw(requestParameters: GetDailyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyInventoryItems>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getDailyInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getDailyInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getDailyInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getDailyInventoryItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.itemClassCode !== undefined) {
            queryParameters['itemClassCode'] = requestParameters.itemClassCode;
        }

        if (requestParameters.itemName !== undefined) {
            queryParameters['itemName'] = requestParameters.itemName;
        }

        if (requestParameters.friday !== undefined) {
            queryParameters['friday'] = requestParameters.friday;
        }

        if (requestParameters.monday !== undefined) {
            queryParameters['monday'] = requestParameters.monday;
        }

        if (requestParameters.saturday !== undefined) {
            queryParameters['saturday'] = requestParameters.saturday;
        }

        if (requestParameters.sunday !== undefined) {
            queryParameters['sunday'] = requestParameters.sunday;
        }

        if (requestParameters.thursday !== undefined) {
            queryParameters['thursday'] = requestParameters.thursday;
        }

        if (requestParameters.tuesday !== undefined) {
            queryParameters['tuesday'] = requestParameters.tuesday;
        }

        if (requestParameters.wednesday !== undefined) {
            queryParameters['wednesday'] = requestParameters.wednesday;
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.duration !== undefined) {
            queryParameters['duration'] = requestParameters.duration;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/dailyInventoryItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DailyInventoryItemsFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of Daily Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc. API will fetch daily quantity configured for the particular item.  <p><strong>OperationId:</strong>getDailyInventoryItems</p>
     * Get Daily Item Inventory
     */
    async getDailyInventoryItems(requestParameters: GetDailyInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyInventoryItems> {
        const response = await this.getDailyInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to retrieve all Event Forecast for a property. <p><strong>OperationId:</strong>getEventForecasts</p>
     * Get Event Forecasts
     */
    async getEventForecastsRaw(requestParameters: GetEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventForecastsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getEventForecasts.');
        }

        if (requestParameters.fetchInstructions === null || requestParameters.fetchInstructions === undefined) {
            throw new runtime.RequiredError('fetchInstructions','Required parameter requestParameters.fetchInstructions was null or undefined when calling getEventForecasts.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getEventForecasts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getEventForecasts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getEventForecasts.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInstructions) {
            queryParameters['fetchInstructions'] = requestParameters.fetchInstructions;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.eventTypeCodes) {
            queryParameters['eventTypeCodes'] = requestParameters.eventTypeCodes;
        }

        if (requestParameters.eventTypeWildCard !== undefined) {
            queryParameters['eventTypeWildCard'] = requestParameters.eventTypeWildCard;
        }

        if (requestParameters.revenueTypeCodes) {
            queryParameters['revenueTypeCodes'] = requestParameters.revenueTypeCodes;
        }

        if (requestParameters.revenueTypeWildCard !== undefined) {
            queryParameters['revenueTypeWildCard'] = requestParameters.revenueTypeWildCard;
        }

        if (requestParameters.eventDate !== undefined) {
            queryParameters['eventDate'] = (requestParameters.eventDate as any).toISOString().substring(0,10);
        }

        if (requestParameters.blockTypeCodes) {
            queryParameters['blockTypeCodes'] = requestParameters.blockTypeCodes;
        }

        if (requestParameters.marketCodes) {
            queryParameters['marketCodes'] = requestParameters.marketCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/eventForecasts`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventForecastsInfoFromJSON(jsonValue));
    }

    /**
     * This API will allow you to retrieve all Event Forecast for a property. <p><strong>OperationId:</strong>getEventForecasts</p>
     * Get Event Forecasts
     */
    async getEventForecasts(requestParameters: GetEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventForecastsInfo> {
        const response = await this.getEventForecastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of Item Inventory templates that exist for a property. <p><strong>OperationId:</strong>getInventoryItemTemplates</p>
     * Get Item Inventory templates
     */
    async getInventoryItemTemplatesRaw(requestParameters: GetInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItemTemplates>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getInventoryItemTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getInventoryItemTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getInventoryItemTemplates.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId !== undefined) {
            queryParameters['hotelId'] = requestParameters.hotelId;
        }

        if (requestParameters.inventoryItemTemplateName !== undefined) {
            queryParameters['inventoryItemTemplateName'] = requestParameters.inventoryItemTemplateName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/inventoryItems`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryItemTemplatesFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of Item Inventory templates that exist for a property. <p><strong>OperationId:</strong>getInventoryItemTemplates</p>
     * Get Item Inventory templates
     */
    async getInventoryItemTemplates(requestParameters: GetInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItemTemplates> {
        const response = await this.getInventoryItemTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a list of Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc.  There is typically a quantity configured for each item, such as 5 Roll Away beds.  <p><strong>OperationId:</strong>getInventoryItems</p>
     * Get Item Inventory
     */
    async getInventoryItemsRaw(requestParameters: GetInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItems>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getInventoryItems.');
        }

        const queryParameters: any = {};

        if (requestParameters.itemClassCode !== undefined) {
            queryParameters['itemClassCode'] = requestParameters.itemClassCode;
        }

        if (requestParameters.itemName !== undefined) {
            queryParameters['itemName'] = requestParameters.itemName;
        }

        if (requestParameters.itemCode !== undefined) {
            queryParameters['itemCode'] = requestParameters.itemCode;
        }

        if (requestParameters.eventTypecodes) {
            queryParameters['eventTypecodes'] = requestParameters.eventTypecodes;
        }

        if (requestParameters.usedForEvents !== undefined) {
            queryParameters['usedForEvents'] = requestParameters.usedForEvents;
        }

        if (requestParameters.includeItemsFromTemplates !== undefined) {
            queryParameters['includeItemsFromTemplates'] = requestParameters.includeItemsFromTemplates;
        }

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = requestParameters.startDateTime;
        }

        if (requestParameters.endDateTime !== undefined) {
            queryParameters['endDateTime'] = requestParameters.endDateTime;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/inventoryItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryItemsFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc.  There is typically a quantity configured for each item, such as 5 Roll Away beds.  <p><strong>OperationId:</strong>getInventoryItems</p>
     * Get Item Inventory
     */
    async getInventoryItems(requestParameters: GetInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItems> {
        const response = await this.getInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to fetch all existing Item Classes for a property. Items are categorized into logical entities called Item Classes. Item Classes assist you in filtering when selecting and grouping items on the Banquet Event Order (BEO). For example, you might have an item class for different kinds of audio visual equipment, for floral decorations, for recreational equipment, and so on.  <p><strong>OperationId:</strong>getItemClasses</p>
     * Get item classes
     */
    async getItemClassesRaw(requestParameters: GetItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemClassesInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getItemClasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelId) {
            queryParameters['hotelId'] = requestParameters.hotelId.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.itemClassesCode) {
            queryParameters['itemClassesCode'] = requestParameters.itemClassesCode.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.criteria !== undefined) {
            queryParameters['criteria'] = requestParameters.criteria;
        }

        if (requestParameters.classId !== undefined) {
            queryParameters['classId'] = requestParameters.classId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/itemClasses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemClassesInfoFromJSON(jsonValue));
    }

    /**
     * This API will allow you to fetch all existing Item Classes for a property. Items are categorized into logical entities called Item Classes. Item Classes assist you in filtering when selecting and grouping items on the Banquet Event Order (BEO). For example, you might have an item class for different kinds of audio visual equipment, for floral decorations, for recreational equipment, and so on.  <p><strong>OperationId:</strong>getItemClasses</p>
     * Get item classes
     */
    async getItemClasses(requestParameters: GetItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemClassesInfo> {
        const response = await this.getItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Item Pools that are configured for a property. <p><strong>OperationId:</strong>getItemPools</p>
     * Get Item Pools
     */
    async getItemPoolsRaw(requestParameters: GetItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemPoolsInfo>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling getItemPools.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getItemPools.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getItemPools.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getItemPools.');
        }

        const queryParameters: any = {};

        if (requestParameters.hotelIds) {
            queryParameters['hotelIds'] = requestParameters.hotelIds;
        }

        if (requestParameters.itemClasseCodes) {
            queryParameters['itemClasseCodes'] = requestParameters.itemClasseCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.itemPoolCodes) {
            queryParameters['itemPoolCodes'] = requestParameters.itemPoolCodes;
        }

        if (requestParameters.itemPoolsWildCard !== undefined) {
            queryParameters['itemPoolsWildCard'] = requestParameters.itemPoolsWildCard;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/itemPools`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemPoolsInfoFromJSON(jsonValue));
    }

    /**
     * Get Item Pools that are configured for a property. <p><strong>OperationId:</strong>getItemPools</p>
     * Get Item Pools
     */
    async getItemPools(requestParameters: GetItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemPoolsInfo> {
        const response = await this.getItemPoolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve all catering revenue group codes. <p><strong>OperationId:</strong>getRevenueGroups</p>
     * Get Catering Revenue Groups
     */
    async getRevenueGroupsRaw(requestParameters: GetRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueGroupsInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRevenueGroups.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRevenueGroups.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRevenueGroups.');
        }

        const queryParameters: any = {};

        if (requestParameters.fetchInactive !== undefined) {
            queryParameters['fetchInactive'] = requestParameters.fetchInactive;
        }

        if (requestParameters.revenueGroupCodes) {
            queryParameters['revenueGroupCodes'] = requestParameters.revenueGroupCodes;
        }

        if (requestParameters.wildCard !== undefined) {
            queryParameters['wildCard'] = requestParameters.wildCard;
        }

        if (requestParameters.description !== undefined) {
            queryParameters['description'] = requestParameters.description;
        }

        if (requestParameters.includeRevenueType !== undefined) {
            queryParameters['includeRevenueType'] = requestParameters.includeRevenueType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueGroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueGroupsInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve all catering revenue group codes. <p><strong>OperationId:</strong>getRevenueGroups</p>
     * Get Catering Revenue Groups
     */
    async getRevenueGroups(requestParameters: GetRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueGroupsInfo> {
        const response = await this.getRevenueGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to retrieve all Catering Revenue Type codes configured. <p><strong>OperationId:</strong>getRevenueTypes</p>
     * Get Catering Revenue Types
     */
    async getRevenueTypesRaw(requestParameters: GetRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RevenueTypesInfo>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getRevenueTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling getRevenueTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling getRevenueTypes.');
        }

        const queryParameters: any = {};

        if (requestParameters.revenueGroupCodes) {
            queryParameters['revenueGroupCodes'] = requestParameters.revenueGroupCodes;
        }

        if (requestParameters.revenueGroupWildCard !== undefined) {
            queryParameters['revenueGroupWildCard'] = requestParameters.revenueGroupWildCard;
        }

        if (requestParameters.revenueTypeCodes) {
            queryParameters['revenueTypeCodes'] = requestParameters.revenueTypeCodes;
        }

        if (requestParameters.revenueTypeWildCard !== undefined) {
            queryParameters['revenueTypeWildCard'] = requestParameters.revenueTypeWildCard;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.includeRevenueTypeDetail !== undefined) {
            queryParameters['includeRevenueTypeDetail'] = requestParameters.includeRevenueTypeDetail;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RevenueTypesInfoFromJSON(jsonValue));
    }

    /**
     * You can use this API to retrieve all Catering Revenue Type codes configured. <p><strong>OperationId:</strong>getRevenueTypes</p>
     * Get Catering Revenue Types
     */
    async getRevenueTypes(requestParameters: GetRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RevenueTypesInfo> {
        const response = await this.getRevenueTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Menu Item Catering Containers describe how individual menu item are sold (for example, per piece, per dozen, or each) when they are not included in the price of the menu. The description prints on reports such as the Banquet Event Order (BEO) and Proforma Invoice.  This API allows you to create a new Menu Item Catering Container code and description. <p><strong>OperationId:</strong>postCateringContainers</p>
     * Create catering containers
     */
    async postCateringContainersRaw(requestParameters: PostCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCateringContainers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCateringContainers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCateringContainers.');
        }

        if (requestParameters.cateringContainers === null || requestParameters.cateringContainers === undefined) {
            throw new runtime.RequiredError('cateringContainers','Required parameter requestParameters.cateringContainers was null or undefined when calling postCateringContainers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringContainers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringContainersToJSON(requestParameters.cateringContainers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Menu Item Catering Containers describe how individual menu item are sold (for example, per piece, per dozen, or each) when they are not included in the price of the menu. The description prints on reports such as the Banquet Event Order (BEO) and Proforma Invoice.  This API allows you to create a new Menu Item Catering Container code and description. <p><strong>OperationId:</strong>postCateringContainers</p>
     * Create catering containers
     */
    async postCateringContainers(requestParameters: PostCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Catering Item rates <p><strong>OperationId:</strong>postCateringItemRates</p>
     * Create Catering Item rates
     */
    async postCateringItemRatesRaw(requestParameters: PostCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCateringItemRates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCateringItemRates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCateringItemRates.');
        }

        if (requestParameters.cateringItemRates === null || requestParameters.cateringItemRates === undefined) {
            throw new runtime.RequiredError('cateringItemRates','Required parameter requestParameters.cateringItemRates was null or undefined when calling postCateringItemRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringItemRates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringItemRatesToJSON(requestParameters.cateringItemRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create Catering Item rates <p><strong>OperationId:</strong>postCateringItemRates</p>
     * Create Catering Item rates
     */
    async postCateringItemRates(requestParameters: PostCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringItemRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create menu classes. <p><strong>OperationId:</strong>postCateringMenuClasses</p>
     * Create menu classes
     */
    async postCateringMenuClassesRaw(requestParameters: PostCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCateringMenuClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCateringMenuClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCateringMenuClasses.');
        }

        if (requestParameters.cateringMenuClasses === null || requestParameters.cateringMenuClasses === undefined) {
            throw new runtime.RequiredError('cateringMenuClasses','Required parameter requestParameters.cateringMenuClasses was null or undefined when calling postCateringMenuClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringMenuClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuClassesToJSON(requestParameters.cateringMenuClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create menu classes. <p><strong>OperationId:</strong>postCateringMenuClasses</p>
     * Create menu classes
     */
    async postCateringMenuClasses(requestParameters: PostCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringMenuClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create menu item classes. <p><strong>OperationId:</strong>postCateringMenuItemClasses</p>
     * Create menu item classes
     */
    async postCateringMenuItemClassesRaw(requestParameters: PostCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCateringMenuItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCateringMenuItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCateringMenuItemClasses.');
        }

        if (requestParameters.cateringMenuItemClasses === null || requestParameters.cateringMenuItemClasses === undefined) {
            throw new runtime.RequiredError('cateringMenuItemClasses','Required parameter requestParameters.cateringMenuItemClasses was null or undefined when calling postCateringMenuItemClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringMenuItemClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuItemClassesToJSON(requestParameters.cateringMenuItemClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create menu item classes. <p><strong>OperationId:</strong>postCateringMenuItemClasses</p>
     * Create menu item classes
     */
    async postCateringMenuItemClasses(requestParameters: PostCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringMenuItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create menu items. <p><strong>OperationId:</strong>postCateringMenuItems</p>
     * Create menu items
     */
    async postCateringMenuItemsRaw(requestParameters: PostCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCateringMenuItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCateringMenuItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCateringMenuItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCateringMenuItems.');
        }

        if (requestParameters.cateringMenuItems === null || requestParameters.cateringMenuItems === undefined) {
            throw new runtime.RequiredError('cateringMenuItems','Required parameter requestParameters.cateringMenuItems was null or undefined when calling postCateringMenuItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuItemsToJSON(requestParameters.cateringMenuItems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create menu items. <p><strong>OperationId:</strong>postCateringMenuItems</p>
     * Create menu items
     */
    async postCateringMenuItems(requestParameters: PostCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringMenuItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create menus for a property. <p><strong>OperationId:</strong>postCateringMenus</p>
     * Create menus
     */
    async postCateringMenusRaw(requestParameters: PostCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCateringMenus.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCateringMenus.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCateringMenus.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCateringMenus.');
        }

        if (requestParameters.cateringMenus === null || requestParameters.cateringMenus === undefined) {
            throw new runtime.RequiredError('cateringMenus','Required parameter requestParameters.cateringMenus was null or undefined when calling postCateringMenus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenus`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenusToJSON(requestParameters.cateringMenus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create menus for a property. <p><strong>OperationId:</strong>postCateringMenus</p>
     * Create menus
     */
    async postCateringMenus(requestParameters: PostCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringMenusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Catering packages and templates are designed to make it easier for you to set up Events. They provide pre-configured resources typically used for Events. Templates and packages are similar except that templates do not include prices. <p><strong>OperationId:</strong>postCateringPackages</p>
     * Create catering packages
     */
    async postCateringPackagesRaw(requestParameters: PostCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postCateringPackages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postCateringPackages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postCateringPackages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postCateringPackages.');
        }

        if (requestParameters.cateringPackages === null || requestParameters.cateringPackages === undefined) {
            throw new runtime.RequiredError('cateringPackages','Required parameter requestParameters.cateringPackages was null or undefined when calling postCateringPackages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringPackages`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CateringPackagesToJSON(requestParameters.cateringPackages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Catering packages and templates are designed to make it easier for you to set up Events. They provide pre-configured resources typically used for Events. Templates and packages are similar except that templates do not include prices. <p><strong>OperationId:</strong>postCateringPackages</p>
     * Create catering packages
     */
    async postCateringPackages(requestParameters: PostCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postCateringPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can define Event Forecasts, with or without a market code or a block type, to manage different revenue forecasts for different types of bookings, such as corporate versus social. This API will allow you to create a new Event Forecast. <p><strong>OperationId:</strong>postEventForecasts</p>
     * Create event forecasts
     */
    async postEventForecastsRaw(requestParameters: PostEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postEventForecasts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postEventForecasts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postEventForecasts.');
        }

        if (requestParameters.eventForecasts === null || requestParameters.eventForecasts === undefined) {
            throw new runtime.RequiredError('eventForecasts','Required parameter requestParameters.eventForecasts was null or undefined when calling postEventForecasts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/eventForecasts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventForecastsToJSON(requestParameters.eventForecasts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can define Event Forecasts, with or without a market code or a block type, to manage different revenue forecasts for different types of bookings, such as corporate versus social. This API will allow you to create a new Event Forecast. <p><strong>OperationId:</strong>postEventForecasts</p>
     * Create event forecasts
     */
    async postEventForecasts(requestParameters: PostEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postEventForecastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an Item Inventory template. <p><strong>OperationId:</strong>postInventoryItemTemplates</p>
     * Create Item Inventory template
     */
    async postInventoryItemTemplatesRaw(requestParameters: PostInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postInventoryItemTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postInventoryItemTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postInventoryItemTemplates.');
        }

        if (requestParameters.inventoryItemTemplates === null || requestParameters.inventoryItemTemplates === undefined) {
            throw new runtime.RequiredError('inventoryItemTemplates','Required parameter requestParameters.inventoryItemTemplates was null or undefined when calling postInventoryItemTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/inventoryItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryItemTemplatesToJSON(requestParameters.inventoryItemTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Create an Item Inventory template. <p><strong>OperationId:</strong>postInventoryItemTemplates</p>
     * Create Item Inventory template
     */
    async postInventoryItemTemplates(requestParameters: PostInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postInventoryItemTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new Item Inventory Code for a property. <p><strong>OperationId:</strong>postInventoryItems</p>
     * Create an Item Inventory
     */
    async postInventoryItemsRaw(requestParameters: PostInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryItemsCreated>> {
        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling postInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postInventoryItems.');
        }

        if (requestParameters.inventoryItems === null || requestParameters.inventoryItems === undefined) {
            throw new runtime.RequiredError('inventoryItems','Required parameter requestParameters.inventoryItems was null or undefined when calling postInventoryItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/inventoryItems`.replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryItemsToJSON(requestParameters.inventoryItems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryItemsCreatedFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new Item Inventory Code for a property. <p><strong>OperationId:</strong>postInventoryItems</p>
     * Create an Item Inventory
     */
    async postInventoryItems(requestParameters: PostInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryItemsCreated> {
        const response = await this.postInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create item classes. <p><strong>OperationId:</strong>postItemClasses</p>
     * Create item classes
     */
    async postItemClassesRaw(requestParameters: PostItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postItemClasses.');
        }

        if (requestParameters.itemClasses === null || requestParameters.itemClasses === undefined) {
            throw new runtime.RequiredError('itemClasses','Required parameter requestParameters.itemClasses was null or undefined when calling postItemClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/itemClasses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemClassesToJSON(requestParameters.itemClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create item classes. <p><strong>OperationId:</strong>postItemClasses</p>
     * Create item classes
     */
    async postItemClasses(requestParameters: PostItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can create Item Pools, whereby you are grouping Item Inventories into a group.  For example you might have a Item Pool for a Promotional Package where the guest receives a number of Item Inventories; thus creating a group enables you to easily manage this. <p><strong>OperationId:</strong>postItemPools</p>
     * Create Item Pools
     */
    async postItemPoolsRaw(requestParameters: PostItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postItemPools.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postItemPools.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postItemPools.');
        }

        if (requestParameters.itemPools === null || requestParameters.itemPools === undefined) {
            throw new runtime.RequiredError('itemPools','Required parameter requestParameters.itemPools was null or undefined when calling postItemPools.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/itemPools`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemPoolsToJSON(requestParameters.itemPools),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can create Item Pools, whereby you are grouping Item Inventories into a group.  For example you might have a Item Pool for a Promotional Package where the guest receives a number of Item Inventories; thus creating a group enables you to easily manage this. <p><strong>OperationId:</strong>postItemPools</p>
     * Create Item Pools
     */
    async postItemPools(requestParameters: PostItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postItemPoolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new catering revenue group code. <p><strong>OperationId:</strong>postRevenueGroups</p>
     * Create Catering Revenue Groups
     */
    async postRevenueGroupsRaw(requestParameters: PostRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRevenueGroups.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRevenueGroups.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRevenueGroups.');
        }

        if (requestParameters.revenueGroups === null || requestParameters.revenueGroups === undefined) {
            throw new runtime.RequiredError('revenueGroups','Required parameter requestParameters.revenueGroups was null or undefined when calling postRevenueGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueGroupsToJSON(requestParameters.revenueGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new catering revenue group code. <p><strong>OperationId:</strong>postRevenueGroups</p>
     * Create Catering Revenue Groups
     */
    async postRevenueGroups(requestParameters: PostRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRevenueGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to create a new Catering Revenue Type code. <p><strong>OperationId:</strong>postRevenueTypes</p>
     * Create Catering Revenue Types
     */
    async postRevenueTypesRaw(requestParameters: PostRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postRevenueTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling postRevenueTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling postRevenueTypes.');
        }

        if (requestParameters.revenueTypes === null || requestParameters.revenueTypes === undefined) {
            throw new runtime.RequiredError('revenueTypes','Required parameter requestParameters.revenueTypes was null or undefined when calling postRevenueTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueTypesToJSON(requestParameters.revenueTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to create a new Catering Revenue Type code. <p><strong>OperationId:</strong>postRevenueTypes</p>
     * Create Catering Revenue Types
     */
    async postRevenueTypes(requestParameters: PostRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.postRevenueTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>putCateringContainers</p>
     * Change catering containers
     */
    async putCateringContainersRaw(requestParameters: PutCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringContainersCode === null || requestParameters.cateringContainersCode === undefined) {
            throw new runtime.RequiredError('cateringContainersCode','Required parameter requestParameters.cateringContainersCode was null or undefined when calling putCateringContainers.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringContainers.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringContainers.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringContainers.');
        }

        if (requestParameters.cateringContainers === null || requestParameters.cateringContainers === undefined) {
            throw new runtime.RequiredError('cateringContainers','Required parameter requestParameters.cateringContainers was null or undefined when calling putCateringContainers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringContainers/{cateringContainersCode}`.replace(`{${"cateringContainersCode"}}`, encodeURIComponent(String(requestParameters.cateringContainersCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringContainersToJSON(requestParameters.cateringContainers),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>putCateringContainers</p>
     * Change catering containers
     */
    async putCateringContainers(requestParameters: PutCateringContainersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringContainersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change catering item rates code <p><strong>OperationId:</strong>putCateringItemRates</p>
     * Change catering item rates
     */
    async putCateringItemRatesRaw(requestParameters: PutCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringItemRatesCode === null || requestParameters.cateringItemRatesCode === undefined) {
            throw new runtime.RequiredError('cateringItemRatesCode','Required parameter requestParameters.cateringItemRatesCode was null or undefined when calling putCateringItemRates.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringItemRates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringItemRates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringItemRates.');
        }

        if (requestParameters.cateringItemRates === null || requestParameters.cateringItemRates === undefined) {
            throw new runtime.RequiredError('cateringItemRates','Required parameter requestParameters.cateringItemRates was null or undefined when calling putCateringItemRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringItemRates/{cateringItemRatesCode}`.replace(`{${"cateringItemRatesCode"}}`, encodeURIComponent(String(requestParameters.cateringItemRatesCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringItemRatesToJSON(requestParameters.cateringItemRates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change catering item rates code <p><strong>OperationId:</strong>putCateringItemRates</p>
     * Change catering item rates
     */
    async putCateringItemRates(requestParameters: PutCateringItemRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringItemRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update catering menu classes <p><strong>OperationId:</strong>putCateringMenuClasses</p>
     * Update catering menu classes
     */
    async putCateringMenuClassesRaw(requestParameters: PutCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringMenuClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringMenuClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringMenuClasses.');
        }

        if (requestParameters.cateringMenuClasses === null || requestParameters.cateringMenuClasses === undefined) {
            throw new runtime.RequiredError('cateringMenuClasses','Required parameter requestParameters.cateringMenuClasses was null or undefined when calling putCateringMenuClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringMenuClasses`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuClassesToJSON(requestParameters.cateringMenuClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update catering menu classes <p><strong>OperationId:</strong>putCateringMenuClasses</p>
     * Update catering menu classes
     */
    async putCateringMenuClasses(requestParameters: PutCateringMenuClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringMenuClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to update menu item classes. <p><strong>OperationId:</strong>putCateringMenuItemClasses</p>
     * Update menu item classes
     */
    async putCateringMenuItemClassesRaw(requestParameters: PutCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuItemClassesCode === null || requestParameters.cateringMenuItemClassesCode === undefined) {
            throw new runtime.RequiredError('cateringMenuItemClassesCode','Required parameter requestParameters.cateringMenuItemClassesCode was null or undefined when calling putCateringMenuItemClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringMenuItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringMenuItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringMenuItemClasses.');
        }

        if (requestParameters.cateringMenuItemClasses === null || requestParameters.cateringMenuItemClasses === undefined) {
            throw new runtime.RequiredError('cateringMenuItemClasses','Required parameter requestParameters.cateringMenuItemClasses was null or undefined when calling putCateringMenuItemClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringMenuItemClasses/{cateringMenuItemClassesCode}`.replace(`{${"cateringMenuItemClassesCode"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemClassesCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuItemClassesToJSON(requestParameters.cateringMenuItemClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to update menu item classes. <p><strong>OperationId:</strong>putCateringMenuItemClasses</p>
     * Update menu item classes
     */
    async putCateringMenuItemClasses(requestParameters: PutCateringMenuItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringMenuItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to update menu items. <p><strong>OperationId:</strong>putCateringMenuItems</p>
     * Update menu items
     */
    async putCateringMenuItemsRaw(requestParameters: PutCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuItemId === null || requestParameters.cateringMenuItemId === undefined) {
            throw new runtime.RequiredError('cateringMenuItemId','Required parameter requestParameters.cateringMenuItemId was null or undefined when calling putCateringMenuItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCateringMenuItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringMenuItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringMenuItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringMenuItems.');
        }

        if (requestParameters.cateringMenuItems === null || requestParameters.cateringMenuItems === undefined) {
            throw new runtime.RequiredError('cateringMenuItems','Required parameter requestParameters.cateringMenuItems was null or undefined when calling putCateringMenuItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenuItems/{cateringMenuItemId}`.replace(`{${"cateringMenuItemId"}}`, encodeURIComponent(String(requestParameters.cateringMenuItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenuItemsToJSON(requestParameters.cateringMenuItems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to update menu items. <p><strong>OperationId:</strong>putCateringMenuItems</p>
     * Update menu items
     */
    async putCateringMenuItems(requestParameters: PutCateringMenuItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringMenuItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *  <p><strong>OperationId:</strong>putCateringMenus</p>
     * Operation to change catering menus.
     */
    async putCateringMenusRaw(requestParameters: PutCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringMenuId === null || requestParameters.cateringMenuId === undefined) {
            throw new runtime.RequiredError('cateringMenuId','Required parameter requestParameters.cateringMenuId was null or undefined when calling putCateringMenus.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCateringMenus.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringMenus.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringMenus.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringMenus.');
        }

        if (requestParameters.cateringMenus === null || requestParameters.cateringMenus === undefined) {
            throw new runtime.RequiredError('cateringMenus','Required parameter requestParameters.cateringMenus was null or undefined when calling putCateringMenus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringMenus/{cateringMenuId}`.replace(`{${"cateringMenuId"}}`, encodeURIComponent(String(requestParameters.cateringMenuId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringMenusToJSON(requestParameters.cateringMenus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     *  <p><strong>OperationId:</strong>putCateringMenus</p>
     * Operation to change catering menus.
     */
    async putCateringMenus(requestParameters: PutCateringMenusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringMenusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing Catering Package for a property. <p><strong>OperationId:</strong>putCateringPackages</p>
     * Update Catering packages
     */
    async putCateringPackagesRaw(requestParameters: PutCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringPackageId === null || requestParameters.cateringPackageId === undefined) {
            throw new runtime.RequiredError('cateringPackageId','Required parameter requestParameters.cateringPackageId was null or undefined when calling putCateringPackages.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putCateringPackages.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringPackages.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringPackages.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringPackages.');
        }

        if (requestParameters.cateringPackages === null || requestParameters.cateringPackages === undefined) {
            throw new runtime.RequiredError('cateringPackages','Required parameter requestParameters.cateringPackages was null or undefined when calling putCateringPackages.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/cateringPackages/{cateringPackageId}`.replace(`{${"cateringPackageId"}}`, encodeURIComponent(String(requestParameters.cateringPackageId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringPackagesToJSON(requestParameters.cateringPackages),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update an existing Catering Package for a property. <p><strong>OperationId:</strong>putCateringPackages</p>
     * Update Catering packages
     */
    async putCateringPackages(requestParameters: PutCateringPackagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringPackagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update catering servings <p><strong>OperationId:</strong>putCateringServings</p>
     * Update catering servings
     */
    async putCateringServingsRaw(requestParameters: PutCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.cateringServingsCode === null || requestParameters.cateringServingsCode === undefined) {
            throw new runtime.RequiredError('cateringServingsCode','Required parameter requestParameters.cateringServingsCode was null or undefined when calling putCateringServings.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putCateringServings.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putCateringServings.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putCateringServings.');
        }

        if (requestParameters.cateringServings === null || requestParameters.cateringServings === undefined) {
            throw new runtime.RequiredError('cateringServings','Required parameter requestParameters.cateringServings was null or undefined when calling putCateringServings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/cateringServings/{cateringServingsCode}`.replace(`{${"cateringServingsCode"}}`, encodeURIComponent(String(requestParameters.cateringServingsCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CateringServingsToJSON(requestParameters.cateringServings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Update catering servings <p><strong>OperationId:</strong>putCateringServings</p>
     * Update catering servings
     */
    async putCateringServings(requestParameters: PutCateringServingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putCateringServingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API will allow you to update an Event Forecast for a property. <p><strong>OperationId:</strong>putEventForecasts</p>
     * Update Event forecasts
     */
    async putEventForecastsRaw(requestParameters: PutEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putEventForecasts.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putEventForecasts.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putEventForecasts.');
        }

        if (requestParameters.eventForecasts === null || requestParameters.eventForecasts === undefined) {
            throw new runtime.RequiredError('eventForecasts','Required parameter requestParameters.eventForecasts was null or undefined when calling putEventForecasts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/eventForecasts`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventForecastsToJSON(requestParameters.eventForecasts),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API will allow you to update an Event Forecast for a property. <p><strong>OperationId:</strong>putEventForecasts</p>
     * Update Event forecasts
     */
    async putEventForecasts(requestParameters: PutEventForecastsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putEventForecastsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change Item Inventory template. <p><strong>OperationId:</strong>putInventoryItemTemplates</p>
     * Change Item Inventory templates
     */
    async putInventoryItemTemplatesRaw(requestParameters: PutInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
            throw new runtime.RequiredError('inventoryItemId','Required parameter requestParameters.inventoryItemId was null or undefined when calling putInventoryItemTemplates.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putInventoryItemTemplates.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putInventoryItemTemplates.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putInventoryItemTemplates.');
        }

        if (requestParameters.inventoryItemTemplates === null || requestParameters.inventoryItemTemplates === undefined) {
            throw new runtime.RequiredError('inventoryItemTemplates','Required parameter requestParameters.inventoryItemTemplates was null or undefined when calling putInventoryItemTemplates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryItemTemplatesToJSON(requestParameters.inventoryItemTemplates),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change Item Inventory template. <p><strong>OperationId:</strong>putInventoryItemTemplates</p>
     * Change Item Inventory templates
     */
    async putInventoryItemTemplates(requestParameters: PutInventoryItemTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putInventoryItemTemplatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Use this API to update an existing Item Inventory Code  <p><strong>OperationId:</strong>putInventoryItems</p>
     * Update Item Inventory
     */
    async putInventoryItemsRaw(requestParameters: PutInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.inventoryItemId === null || requestParameters.inventoryItemId === undefined) {
            throw new runtime.RequiredError('inventoryItemId','Required parameter requestParameters.inventoryItemId was null or undefined when calling putInventoryItems.');
        }

        if (requestParameters.hotelId === null || requestParameters.hotelId === undefined) {
            throw new runtime.RequiredError('hotelId','Required parameter requestParameters.hotelId was null or undefined when calling putInventoryItems.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putInventoryItems.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putInventoryItems.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putInventoryItems.');
        }

        if (requestParameters.inventoryItems === null || requestParameters.inventoryItems === undefined) {
            throw new runtime.RequiredError('inventoryItems','Required parameter requestParameters.inventoryItems was null or undefined when calling putInventoryItems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/hotels/{hotelId}/inventoryItems/{inventoryItemId}`.replace(`{${"inventoryItemId"}}`, encodeURIComponent(String(requestParameters.inventoryItemId))).replace(`{${"hotelId"}}`, encodeURIComponent(String(requestParameters.hotelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryItemsToJSON(requestParameters.inventoryItems),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Use this API to update an existing Item Inventory Code  <p><strong>OperationId:</strong>putInventoryItems</p>
     * Update Item Inventory
     */
    async putInventoryItems(requestParameters: PutInventoryItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putInventoryItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API allows you to update existing Item Classes for a property. <p><strong>OperationId:</strong>putItemClasses</p>
     * Update item classes
     */
    async putItemClassesRaw(requestParameters: PutItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.itemClassesCode === null || requestParameters.itemClassesCode === undefined) {
            throw new runtime.RequiredError('itemClassesCode','Required parameter requestParameters.itemClassesCode was null or undefined when calling putItemClasses.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putItemClasses.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putItemClasses.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putItemClasses.');
        }

        if (requestParameters.itemClasses === null || requestParameters.itemClasses === undefined) {
            throw new runtime.RequiredError('itemClasses','Required parameter requestParameters.itemClasses was null or undefined when calling putItemClasses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/itemClasses/{itemClassesCode}`.replace(`{${"itemClassesCode"}}`, encodeURIComponent(String(requestParameters.itemClassesCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemClassesToJSON(requestParameters.itemClasses),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * This API allows you to update existing Item Classes for a property. <p><strong>OperationId:</strong>putItemClasses</p>
     * Update item classes
     */
    async putItemClasses(requestParameters: PutItemClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putItemClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change/update an Item Pool that is already configured for a property. <p><strong>OperationId:</strong>putItemPools</p>
     * Change Item Pools
     */
    async putItemPoolsRaw(requestParameters: PutItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.itemPoolsCode === null || requestParameters.itemPoolsCode === undefined) {
            throw new runtime.RequiredError('itemPoolsCode','Required parameter requestParameters.itemPoolsCode was null or undefined when calling putItemPools.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putItemPools.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putItemPools.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putItemPools.');
        }

        if (requestParameters.itemPools === null || requestParameters.itemPools === undefined) {
            throw new runtime.RequiredError('itemPools','Required parameter requestParameters.itemPools was null or undefined when calling putItemPools.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/itemPools/{itemPoolsCode}`.replace(`{${"itemPoolsCode"}}`, encodeURIComponent(String(requestParameters.itemPoolsCode))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemPoolsToJSON(requestParameters.itemPools),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * Change/update an Item Pool that is already configured for a property. <p><strong>OperationId:</strong>putItemPools</p>
     * Change Item Pools
     */
    async putItemPools(requestParameters: PutItemPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putItemPoolsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to update a catering revenue group Code. <p><strong>OperationId:</strong>putRevenueGroups</p>
     * Update Catering Revenue Groups
     */
    async putRevenueGroupsRaw(requestParameters: PutRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueGroupsCode === null || requestParameters.revenueGroupsCode === undefined) {
            throw new runtime.RequiredError('revenueGroupsCode','Required parameter requestParameters.revenueGroupsCode was null or undefined when calling putRevenueGroups.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRevenueGroups.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRevenueGroups.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRevenueGroups.');
        }

        if (requestParameters.revenueGroups === null || requestParameters.revenueGroups === undefined) {
            throw new runtime.RequiredError('revenueGroups','Required parameter requestParameters.revenueGroups was null or undefined when calling putRevenueGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueGroups/{revenueGroupsCode}`.replace(`{${"revenueGroupsCode"}}`, encodeURIComponent(String(requestParameters.revenueGroupsCode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueGroupsToJSON(requestParameters.revenueGroups),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to update a catering revenue group Code. <p><strong>OperationId:</strong>putRevenueGroups</p>
     * Update Catering Revenue Groups
     */
    async putRevenueGroups(requestParameters: PutRevenueGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRevenueGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * You can use this API to update a Catering Revenue Type code. <p><strong>OperationId:</strong>putRevenueTypes</p>
     * Update Catering Revenue Types
     */
    async putRevenueTypesRaw(requestParameters: PutRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Status>> {
        if (requestParameters.revenueTypesId === null || requestParameters.revenueTypesId === undefined) {
            throw new runtime.RequiredError('revenueTypesId','Required parameter requestParameters.revenueTypesId was null or undefined when calling putRevenueTypes.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling putRevenueTypes.');
        }

        if (requestParameters.xAppKey === null || requestParameters.xAppKey === undefined) {
            throw new runtime.RequiredError('xAppKey','Required parameter requestParameters.xAppKey was null or undefined when calling putRevenueTypes.');
        }

        if (requestParameters.xHotelid === null || requestParameters.xHotelid === undefined) {
            throw new runtime.RequiredError('xHotelid','Required parameter requestParameters.xHotelid was null or undefined when calling putRevenueTypes.');
        }

        if (requestParameters.revenueTypes === null || requestParameters.revenueTypes === undefined) {
            throw new runtime.RequiredError('revenueTypes','Required parameter requestParameters.revenueTypes was null or undefined when calling putRevenueTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=UTF-8';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.xAppKey !== undefined && requestParameters.xAppKey !== null) {
            headerParameters['x-app-key'] = String(requestParameters.xAppKey);
        }

        if (requestParameters.xHotelid !== undefined && requestParameters.xHotelid !== null) {
            headerParameters['x-hotelid'] = String(requestParameters.xHotelid);
        }

        if (requestParameters.xExternalsystem !== undefined && requestParameters.xExternalsystem !== null) {
            headerParameters['x-externalsystem'] = String(requestParameters.xExternalsystem);
        }

        if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
            headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
        }

        const response = await this.request({
            path: `/revenueTypes/{revenueTypesId}`.replace(`{${"revenueTypesId"}}`, encodeURIComponent(String(requestParameters.revenueTypesId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RevenueTypesToJSON(requestParameters.revenueTypes),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusFromJSON(jsonValue));
    }

    /**
     * You can use this API to update a Catering Revenue Type code. <p><strong>OperationId:</strong>putRevenueTypes</p>
     * Update Catering Revenue Types
     */
    async putRevenueTypes(requestParameters: PutRevenueTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Status> {
        const response = await this.putRevenueTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DeleteEventForecastsAmountTypeEnum = {
    FlatAmount: 'FlatAmount',
    PerPerson: 'PerPerson'
} as const;
export type DeleteEventForecastsAmountTypeEnum = typeof DeleteEventForecastsAmountTypeEnum[keyof typeof DeleteEventForecastsAmountTypeEnum];
/**
 * @export
 */
export const GetCateringMenuFetchInstructionsEnum = {
    Revenue: 'Revenue',
    MenuDetails: 'MenuDetails',
    MenuNotes: 'MenuNotes'
} as const;
export type GetCateringMenuFetchInstructionsEnum = typeof GetCateringMenuFetchInstructionsEnum[keyof typeof GetCateringMenuFetchInstructionsEnum];
/**
 * @export
 */
export const GetCateringMenuItemClassesMenuTypesEnum = {
    Food: 'Food',
    Beverage: 'Beverage'
} as const;
export type GetCateringMenuItemClassesMenuTypesEnum = typeof GetCateringMenuItemClassesMenuTypesEnum[keyof typeof GetCateringMenuItemClassesMenuTypesEnum];
/**
 * @export
 */
export const GetCateringMenusMenuTypesEnum = {
    Food: 'Food',
    Beverage: 'Beverage'
} as const;
export type GetCateringMenusMenuTypesEnum = typeof GetCateringMenusMenuTypesEnum[keyof typeof GetCateringMenusMenuTypesEnum];
/**
 * @export
 */
export const GetCateringMenusFetchInstructionsEnum = {
    Revenue: 'Revenue',
    MenuDetails: 'MenuDetails',
    MenuNotes: 'MenuNotes'
} as const;
export type GetCateringMenusFetchInstructionsEnum = typeof GetCateringMenusFetchInstructionsEnum[keyof typeof GetCateringMenusFetchInstructionsEnum];
/**
 * @export
 */
export const GetCateringPackageFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
} as const;
export type GetCateringPackageFetchInstructionsEnum = typeof GetCateringPackageFetchInstructionsEnum[keyof typeof GetCateringPackageFetchInstructionsEnum];
/**
 * @export
 */
export const GetCateringPackageByChainFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
} as const;
export type GetCateringPackageByChainFetchInstructionsEnum = typeof GetCateringPackageByChainFetchInstructionsEnum[keyof typeof GetCateringPackageByChainFetchInstructionsEnum];
/**
 * @export
 */
export const GetCateringPackagesPkgTmpltTypeEnum = {
    Packages: 'Packages',
    Templates: 'Templates',
    Both: 'Both'
} as const;
export type GetCateringPackagesPkgTmpltTypeEnum = typeof GetCateringPackagesPkgTmpltTypeEnum[keyof typeof GetCateringPackagesPkgTmpltTypeEnum];
/**
 * @export
 */
export const GetCateringPackagesFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
} as const;
export type GetCateringPackagesFetchInstructionsEnum = typeof GetCateringPackagesFetchInstructionsEnum[keyof typeof GetCateringPackagesFetchInstructionsEnum];
/**
 * @export
 */
export const GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum = {
    Packages: 'Packages',
    Templates: 'Templates',
    Both: 'Both'
} as const;
export type GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum = typeof GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum[keyof typeof GetCateringPackagesMultiPropertiesPkgTmpltTypeEnum];
/**
 * @export
 */
export const GetCateringPackagesMultiPropertiesFetchInstructionsEnum = {
    PackageInfo: 'PackageInfo',
    Events: 'Events',
    Resources: 'Resources',
    Pricing: 'Pricing',
    Indicators: 'Indicators',
    BlockPackageInfo: 'BlockPackageInfo',
    EventNotes: 'EventNotes'
} as const;
export type GetCateringPackagesMultiPropertiesFetchInstructionsEnum = typeof GetCateringPackagesMultiPropertiesFetchInstructionsEnum[keyof typeof GetCateringPackagesMultiPropertiesFetchInstructionsEnum];
/**
 * @export
 */
export const GetEventForecastsFetchInstructionsEnum = {
    ForecastInfo: 'ForecastInfo',
    RevenueDetails: 'RevenueDetails'
} as const;
export type GetEventForecastsFetchInstructionsEnum = typeof GetEventForecastsFetchInstructionsEnum[keyof typeof GetEventForecastsFetchInstructionsEnum];
/**
 * @export
 */
export const GetItemClassesCriteriaEnum = {
    Reservation: 'Reservation',
    Events: 'Events',
    ReservationAndEvents: 'ReservationAndEvents'
} as const;
export type GetItemClassesCriteriaEnum = typeof GetItemClassesCriteriaEnum[keyof typeof GetItemClassesCriteriaEnum];
